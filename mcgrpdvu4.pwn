/*

					    Evolution Role Play
		(created by Next Generation Gaming Development Team)

		Combined:
		(***) Mike
		(***) Brian
		(***) Aldo
		(***) Phazd
		(***) Scott
		(***) GhoulSlayeR
		(***) Zhao
		(***) Calgon

		Credits to alternate sources (Y_LESS for foreach, gf, etc)

*/

#define SERVER_GM_TEXT "E:RP V0.32" // - This is the revision. DO NOT FORGET TO CHANGE IT!!!!!!!!!!!!!!!!!!!!!!
#define SERVER_SHORTNAME "E:RP"
//#define SERVER_LONGNAME "" // Not in use yet.

// We don't use NPCs. Touch this and you die.
#define	FOREACH_NO_BOTS
//#define SHOPAUTOMATED

#include <a_samp>

#include <a_mysql>
//#include <streamer>
#include <streamer_0_3z>
#include <sscanf2>
#include <a_zones>
#include <foreach>
#include <yom_buttons>
#include <djson>
#include <YSI\y_timers>
#include <YSI\y_utils>
#include <ZCMD>
#include <antiflood>

#include <fly>

#undef  MAX_PLAYERS
#define MAX_PLAYERS (500)

//Faction Types
/*
0 - None
1 - GOV
2 - Judical
3 - Hitman
4 - Transportation
5 - Medical
6 - Law Enforcement
*/

#define 		MAX_FAC_RANKS 				10
#define 		MAX_FAC_DIVS     			5
#define 		MAX_FAC_WEAPONS				10

// Third and fourth-dimension sizes.
#define			MAX_NAME_LEN				32
#define			MAX_RANK_LEN				24
#define			MAX_DIV_LEN					16

#define			MAX_FAC_TYPES				6

#define 		DIALOG_LISTFACS 			(4250)
#define 		DIALOG_EDITFAC				(4260)
#define 		DIALOG_FAC_NAME 			(4270)
#define 		DIALOG_FAC_TYPE				(4280)
#define 		DIALOG_FAC_RADIOACC			(4300)
#define 		DIALOG_FAC_DEPTRADIOACC		(4305)
#define 		DIALOG_FAC_CHATACC			(4310)
#define 		DIALOG_FAC_BUGACC			(4320)
#define 		DIALOG_FAC_GOVACC			(4321)
#define 		DIALOG_FAC_SPIKESACC		(4322)
#define 		DIALOG_FAC_BARRACC			(4323)
#define 		DIALOG_FAC_CONESACC			(4324)
#define 		DIALOG_FAC_FLARESACC		(4325)
#define 		DIALOG_FAC_BARRELSACC		(4326)
#define 		DIALOG_FAC_FNCACC			(4327)
#define 		DIALOG_FAC_DUTYCOL			(4330)
#define 		DIALOG_FAC_RADIOCOL			(4340)
#define 		DIALOG_FAC_EDITWEPS			(4360)
#define 		DIALOG_FAC_EDITDIVS			(4370)
#define 		DIALOG_FAC_EDITRANKS		(4380)
#define 		DIALOG_FAC_LOCKER			(4390)
#define 		DIALOG_FAC_GETWEPS			(4400)
#define 		DIALOG_FAC_GETSKIN			(4410)
#define 		DIALOG_FAC_DISBAND			(4420)
#define 		DIALOG_FAC_EDITWEPID		(4440)
#define 		DIALOG_FAC_EDITDIV			(4450)
#define 		DIALOG_FAC_EDITRANK			(4460)
#define 		DIALOG_FAC_LOCKERPOS		(4470)
#define 		DIALOG_DEPLOY				(4480)
#define 		DIALOG_DESTROY				(4500)
#define 		DIALOG_DES_SPIKES			(4490)
#define 		DIALOG_DES_FLARES			(4510)
#define 		DIALOG_DES_CONES			(4520)
#define 		DIALOG_DES_BARRELS			(4530)
#define 		DIALOG_DES_CADES			(4540)
#define 		DIALOG_LEADASK				(4550)
#define 		DIALOG_LEADLIST				(4560)

#define THREAD_LOAD_FACTIONS (2020)
#define MAX_FACTIONS (13)
enum factioninfo {
	fType,
	fName[MAX_NAME_LEN],
	fMOTD[128],
	fBug,
	fRadio,
	fDRadio,
	fGovAnnounce,
	fSpikes,
	fBarricades,
	fCones,
	fFlares,
	fBarrels,
	fFreeNameChange,
	fLocker,
	fLockerVW,
	Float: fLockerPos[3], // fucking aldo. finish your work bitch -Phazd <3
	fDutyColor,
	fRadioColor,
	fBudget,
	fBudgetPay,
	fRankpay[MAX_FAC_RANKS],
	fGun[MAX_FAC_WEAPONS],
	Text3D: f3DText,
};
new FactionInfo[MAX_FACTIONS + 1][factioninfo],
FacRanks[MAX_FACTIONS + 1][MAX_FAC_RANKS][MAX_RANK_LEN],
FacDivs[MAX_FACTIONS + 1][MAX_FAC_DIVS][MAX_DIV_LEN];

#define THREAD_LOAD_FACTIONVEHS (2121)
#define MAX_FACTIONVEHICLES (500)
enum factionvehicleinfo {
	fScriptID,
	fDisabled,
	fGroupID,
	fGroupDivID,
	fModel,
	fPlate[31],
	Float: fMaxHP,
	fFuel,
	fCol1,
	fCol2,
	Float: fvPos[4],
 	fvINT,
 	fvVW,
 	fUpkeep,
 	fvMod[15],
 	fObject1,
 	fObject2,
 	fObject1Model,
 	Float: fObject1Pos[3],
 	Float: fObject1RPos[3],
 	fObject2Model,
 	Float: fObject2Pos[3],
 	Float: fObject2RPos[3],
};
new FactionVehicleInfo[MAX_FACTIONVEHICLES + 1][factionvehicleinfo];



// Natives
native WP_Hash(buffer[], len, const str[]);

#define MAX_PING 1200

// House Interor ID
#define DIALOG_HOUSE_INTERIOR_MENU 1887

new HouseInteriorDialogNames[29][] =
{
    "Big House Interior 1",
	"Big House Interior 2",
	"Big House Interior 3",
	"Big House Interior 4",
	"Big House Interior 5",
	"Big House Interior 6",
	"Medium House Interior 1",
	"Medium House Interior 2",
	"Medium House Interior 3",
	"Medium House Interior 4",//10
	"Medium House Interior 5",
	"Medium House Interior 6",
	"Medium House Interior 7",
	"Medium House Interior 8",
	"Medium House Interior 9",
	"Medium House Interior 10",
	"Medium House Interior 11",
	"Medium House Interior 12",
	"Medium House Interior 13",
	"Medium House Interior 14",//10
	"Medium House Interior 15",
	"Medium House Interior 16",
	"Medium House Interior 17",
	"Medium House Interior 18",
	"Medium House Interior 19",
	"Medium House Interior 20",
	"Medium House Interior 21",
	"Medium House Interior 22",
	"Medium House Interior 23"
};
new Float:HouseInteriorDialogData[29][3] =
{
    {1260.64, -785.37, 1091.91},
	{140.17, 1366.07, 1083.65},
	{2324.53, -1149.54, 1050.71},
	{225.68, 1021.45, 1084.02},
	{234.19, 1063.73, 1084.21},
	{226.30, 1114.24, 1080.99},
	{235.34, 1186.68, 1080.26},
	{491.07, 1398.50, 1080.26},
	{24.04, 1340.17, 1084.38},
	{-283.44, 1470.93, 1084.38},//10
	{-260.49, 1456.75, 1084.37},
	{83.03, 1322.28, 1083.87},
	{2317.89, -1026.76, 1050.22},
	{2495.98, -1692.08, 1014.74},
	{2807.48, -1174.76, 1025.57},
	{2196.85, -1204.25, 1049.02},
	{377.15, 1417.41, 1081.33},
	{2270.38, -1210.35, 1047.56},
	{446.99, 1397.07, 1084.30},
	{387.22, 1471.70, 1080.19},//10
	{22.88, 1403.33, 1084.44},
	{2365.31, -1135.60, 1050.88},
	{2237.59, -1081.64, 1049.02},
	{295.04, 1472.26, 1080.26},
	{261.12, 1284.30, 1080.26},
	{221.92, 1140.20, 1082.61},
	{-68.81, 1351.21, 1080.21},
	{260.85, 1237.24, 1084.26},
	{2468.84, -1698.24, 1013.51}

};
new HouseInteriorDialogInteriors[29][1] =
{
    {5},
	{5},
	{12},
	{7},
	{6},
	{5},
	{3},
	{2},
	{10},
	{15},//10
	{4},
	{9},
	{9},
	{3},
	{8},
	{6},
	{15},
	{10},
	{2},
	{15},//10
	{5},
	{8},
	{2},
	{15},
	{4},
	{4},
	{6},
	{9},
	{2}
};

//Code2/3/Traffic System
#define CObject2 CreateDynamicObject
#define AObject2 AttachDynamicObjectToVehicle
#define DObject2 DestroyDynamicObject
#define VObject2 IsValidDynamicObject
#define CObject3 CreateDynamicObject
#define AObject3 AttachDynamicObjectToVehicle
#define DObject3 DestroyDynamicObject
#define VObject3 IsValidDynamicObject
#define CObject4 CreateDynamicObject
#define AObject4 AttachDynamicObjectToVehicle
#define DObject4 DestroyDynamicObject
#define VObject4 IsValidDynamicObject
#define CObject5 CreateDynamicObject
#define AObject5 AttachDynamicObjectToVehicle
#define DObject5 DestroyDynamicObject
#define VObject5 IsValidDynamicObject

//Business
#define MAX_BIZ 111
#define DIALOG_BIZMENU 112
#define DIALOG_BIZWITHDRAW 113
#define DIALOG_BIZDEPOSIT 114

/* Interiors */
#define DIALOG_INTERIOR_MENU 1886

new InteriorDialogNames[149][] =
{
    "Four Dragons' Managerial Suite",
    "Ganton Gym",
    "Brothel",
    "Brothel2",
    "Inside Track Betting",
    "Blastin' Fools Records",
    "The Big Spread Ranch",
    "Warehouse 1",
    "Warehouse 2",
    "B Dup's Apartment",
    "B Dup's Crack Palace",
    "Wheel Arch Angels",
    "OG Loc's House",
    "Barber Shop",
    "Planning Department",
    "Las Venturas Police Department",
    "Pro-Laps",
    "Sex Shop",
    "Las Venturas Tattoo parlor",
    "Lost San Fierro Tattoo parlor",
    "24/7 (version 1)",
    "Diner 1",
    "Pizza Stack",
    "Rusty Brown's Donuts",
    "Ammu-nation",
    "Victim",
    "Loco Low Co",
    "San Fierro Police Department",
    "24/7 (version 2 - large)",
    "Below The Belt Gym (Las Venturas)",
    "Transfenders",
    "World of Coq",
    "Ammu-nation (version 2)",
    "SubUrban",
    "Denise's Bedroom",
    "Helena's Barn",
    "Barbara's Love nest",
    "San Fierro Garage",
    "Oval Stadium",
    "8-Track Stadium",
    "The Pig Pen (strip club 2)",
    "Four Dragons",
    "Liberty City",
    "Ryder's house",
    "Sweet's House",
    "RC Battlefield",
    "The Johnson House",
    "Burger shot",
    "Caligula's Casino",
    "Katie's Lovenest",
    "Barber Shop 2 (Reece's)",
    "Angel Pine Trailer",
    "24/7 (version 3)",
    "Zip",
    "The Pleasure Domes",
    "Madd Dogg's Mansion",
    "Big Smoke's Crack Palace",
    "Burning Desire Building",
    "Wu-Zi Mu's",
    "Abandoned AC tower",
    "Wardrobe/Changing room",
    "Didier Sachs",
    "Casino (Redsands West)",
    "Kickstart Stadium",
    "Club",
    "Atrium",
    "Los Santos Tattoo Parlor",
    "Safe House group 1",
    "Safe House group 2",
    "Safe House group 3",
    "Safe House group 4",
    "Sherman Dam",
    "24/7 (version 4)",
    "Jefferson Motel",
    "Jet Interior",
    "The Welcome Pump",
    "Burglary House X1",
    "Burglary House X2",
    "Burglary House X3",
    "Burglary House X4",
    "Binco",
    "4 Burglary houses",
    "Blood Bowl Stadium",
    "Budget Inn Motel Room",
    "Palamino Bank",
    "Palamino Diner",
    "Dillimore Gas Station",
    "Lil' Probe Inn",
    "Torreno's Ranch",
    "Zombotech - lobby area",
    "Crypt in LS cemetery (temple)",
    "Blueberry Liquor Store",
    "Pair of Burglary Houses",
    "Crack Den",
    "Burglary House X11",
    "Burglary House X12",
    "Ammu-nation (version 3)",
    "Jay's Diner",
    "24/7 (version 5)",
    "Warehouse 3",
    "Michelle's Love Nest*",
    "Burglary House X14",
    "Sindacco Abatoir",
    "K.A.C.C. Military Fuels Depot",
    "Area 69",
    "Burglary House X13",
    "Unused Safe House",
    "Millie's Bedroom",
    "Barber Shop",
    "Dirtbike Stadium",
    "Cobra Gym",
    "Los Santos Police Department",
    "Los Santos Airport",
    "Burglary House X15",
    "Burglary House X16",
    "Burglary House X17",
    "Bike School",
    "Francis International Airport",
    "Vice Stadium",
    "Burglary House X18",
    "Burglary House X19",
    "Zero's RC Shop",
    "Ammu-nation (version 4)",
    "Ammu-nation (version 5)",
    "Burglary House X20",
    "24/7 (version 6)",
    "Secret Valley Diner",
    "Rosenberg's Office in Caligulas",
    "Fanny Batter's Whore House",
    "Colonel Furhberger's",
    "Cluckin' Bell",
    "The Camel's Toe Safehouse",
    "Caligula's Roof",
    "Old Venturas Strip Casino",
    "Driving School",
    "Verdant Bluffs Safehouse",
    "Bike School",
    "Andromada",
    "Four Dragons' Janitor's Office",
    "Bar",
    "Burglary House X21",
    "Willowfield Safehouse",
    "Burglary House X22",
    "Burglary House X23",
    "Otto's Autos",
    "Wang Cars",
    "Loco Low",
    "Wheel Arch Angels",
    "Transfender"
};
new Float:InteriorDialogData[149][4] =
{
    {2003.1178, 1015.1948, 33.008, 351.5789},
    {770.8033, -0.7033, 1000.7267, 22.8599},
    {974.0177, -9.5937, 1001.1484, 22.6045},
    {961.9308, -51.9071, 1001.1172, 95.5381},
    {830.6016, 5.9404, 1004.1797, 125.8149},
    {1037.8276, 0.397, 1001.2845, 353.9335},
    {1212.1489, -28.5388, 1000.9531, 170.5692},
    {1290.4106, 1.9512, 1001.0201, 179.9419},
    {1412.1472, -2.2836, 1000.9241, 114.661},
    {1527.0468, -12.0236, 1002.0971, 350.0013},
    {1523.5098, -47.8211, 1002.2699, 262.7038},
    {612.2191, -123.9028, 997.9922, 266.5704},
    {512.9291, -11.6929, 1001.5653, 198.7669},
    {418.4666, -80.4595, 1001.8047, 343.2358},
    {386.5259, 173.6381, 1008.3828, 63.7399},
    {288.4723, 170.0647, 1007.1794, 22.0477},
    {206.4627, -137.7076, 1003.0938, 10.9347},
    {-100.2674, -22.9376, 1000.7188, 17.285},
    {-201.2236, -43.2465, 1002.2734, 45.8613},
    {-202.9381, -6.7006, 1002.2734, 204.2693},
    {-25.7220, -187.8216, 1003.5469, 5.0760},
    {454.9853, -107.2548, 999.4376, 309.0195},
    {372.5565, -131.3607, 1001.4922, 354.2285},
    {378.026, -190.5155, 1000.6328, 141.0245},
    {315.244, -140.8858, 999.6016, 7.4226},
    {225.0306, -9.1838, 1002.218, 85.5322},
    {611.3536, -77.5574, 997.9995, 320.9263},
    {246.0688, 108.9703, 1003.2188, 0.2922},
    {6.0856, -28.8966, 1003.5494, 5.0365},
    {773.7318, -74.6957, 1000.6542, 5.2304},
    {621.4528, -23.7289, 1000.9219, 15.6789},
    {445.6003, -6.9823, 1000.7344, 172.2105},
    {285.8361, -39.0166, 1001.5156, 0.7529},
    {204.1174, -46.8047, 1001.8047, 357.5777},
    {245.2307, 304.7632, 999.1484, 273.4364},
    {290.623, 309.0622, 999.1484, 89.9164},
    {322.5014, 303.6906, 999.1484, 8.1747},
    {-2041.2334, 178.3969, 28.8465, 156.2153},
    {-1402.6613, 106.3897, 1032.2734, 105.1356},
    {-1403.0116, -250.4526, 1043.5341, 355.8576},
    {1204.6689, -13.5429, 1000.9219, 350.0204},
    {2016.1156, 1017.1541, 996.875, 88.0055},
    {-741.8495, 493.0036, 1371.9766, 71.7782},
    {2447.8704, -1704.4509, 1013.5078, 314.5253},
    {2527.0176, -1679.2076, 1015.4986, 260.9709},
    {-1129.8909, 1057.5424, 1346.4141, 274.5268},
    {2496.0549, -1695.1749, 1014.7422, 179.2174},
    {366.0248, -73.3478, 1001.5078, 292.0084},
    {2233.9363, 1711.8038, 1011.6312, 184.3891},
    {269.6405, 305.9512, 999.1484, 215.6625},
    {414.2987, -18.8044, 1001.8047, 41.4265},
    {1.1853, -3.2387, 999.4284, 87.5718},
    {-30.9875, -89.6806, 1003.5469, 359.8401},
    {161.4048, -94.2416, 1001.8047, 0.7938},
    {-2638.8232, 1407.3395, 906.4609, 94.6794},
    {1267.8407, -776.9587, 1091.9063, 231.3418},
    {2536.5322, -1294.8425, 1044.125, 254.9548},
    {2350.1597, -1181.0658, 1027.9766, 99.1864},
    {-2158.6731, 642.09, 1052.375, 86.5402},
    {419.8936, 2537.1155, 10.0, 67.6537},
    {256.9047, -41.6537, 1002.0234, 85.8774},
    {204.1658, -165.7678, 1000.5234, 181.7583},
    {1133.35, -7.8462, 1000.6797, 165.8482},
    {-1420.4277, 1616.9221, 1052.5313, 159.1255},
    {493.1443, -24.2607, 1000.6797, 356.9864},
    {1727.2853, -1642.9451, 20.2254, 172.4193},
    {-202.842, -24.0325, 1002.2734, 252.8154},
    {2233.6919, -1112.8107, 1050.8828, 8.6483},
    {1211.2484, 1049.0234, 359.941, 170.9341},
    {2319.1272, -1023.9562, 1050.2109, 167.3959},
    {2261.0977, -1137.8833, 1050.6328, 266.88},
    {-944.2402, 1886.1536, 5.0051, 179.8548},
    {-26.1856, -140.9164, 1003.5469, 2.9087},
    {2217.281, -1150.5349, 1025.7969, 273.7328},
    {1.5491, 23.3183, 1199.5938, 359.9054},
    {681.6216, -451.8933, -25.6172, 166.166},
    {234.6087, 1187.8195, 1080.2578, 349.4844},
    {225.5707, 1240.0643, 1082.1406, 96.2852},
    {224.288, 1289.1907, 1082.1406, 359.868},
    {239.2819, 1114.1991, 1080.9922, 270.2654},
    {207.5219, -109.7448, 1005.1328, 358.62},
    {295.1391, 1473.3719, 1080.2578, 352.9526},
    {-1417.8927, 932.4482, 1041.5313, 0.7013},
    {446.3247, 509.9662, 1001.4195, 330.5671},
    {2306.3826, -15.2365, 26.7496, 274.49},
    {2331.8984, 6.7816, 26.5032, 100.2357},
    {663.0588, -573.6274, 16.3359, 264.9829},
    {-227.5703, 1401.5544, 27.7656, 269.2978},
    {-688.1496, 942.0826, 13.6328, 177.6574},
    {-1916.1268, 714.8617, 46.5625, 152.2839},
    {818.7714, -1102.8689, 25.794, 91.1439},
    {255.2083, -59.6753, 1.5703, 1.4645},
    {446.626, 1397.738, 1084.3047, 343.9647},
    {227.3922, 1114.6572, 1080.9985, 267.459},
    {227.7559, 1114.3844, 1080.9922, 266.2624},
    {261.1165, 1287.2197, 1080.2578, 178.9149},
    {291.7626, -80.1306, 1001.5156, 290.2195},
    {449.0172, -88.9894, 999.5547, 89.6608},
    {-27.844, -26.6737, 1003.5573, 184.3118},
    {2135.2004, -2276.2815, 20.6719, 318.59},
    {306.1966, 307.819, 1003.3047, 203.1354},
    {24.3769, 1341.1829, 1084.375, 8.3305},
    {963.0586, 2159.7563, 1011.0303, 175.313},
    {2548.4807, 2823.7429, 10.8203, 270.6003},
    {215.1515, 1874.0579, 13.1406, 177.5538},
    {221.6766, 1142.4962, 1082.6094, 184.9618},
    {2323.7063, -1147.6509, 1050.7101, 206.5352},
    {344.9984, 307.1824, 999.1557, 193.643},
    {411.9707, -51.9217, 1001.8984, 173.3449},
    {-1421.5618, -663.8262, 1059.5569, 170.9341},
    {773.8887, -47.7698, 1000.5859, 10.7161},
    {246.6695, 65.8039, 1003.6406, 7.9562},
    {-1864.9434, 55.7325, 1055.5276, 85.8541},
    {-262.1759, 1456.6158, 1084.3672, 82.459},
    {22.861, 1404.9165, 1084.4297, 349.6158},
    {140.3679, 1367.8837, 1083.8621, 349.2372},
    {1494.8589, 1306.48, 1093.2953, 196.065},
    {-1813.213, -58.012, 1058.9641, 335.3199},
    {-1401.067, 1265.3706, 1039.8672, 178.6483},
    {234.2826, 1065.229, 1084.2101, 4.3864},
    {-68.5145, 1353.8485, 1080.2109, 3.5742},
    {-2240.1028, 136.973, 1035.4141, 269.0954},
    {297.144, -109.8702, 1001.5156, 20.2254},
    {316.5025, -167.6272, 999.5938, 10.3031},
    {-285.2511, 1471.197, 1084.375, 85.6547},
    {-26.8339, -55.5846, 1003.5469, 3.9528},
    {442.1295, -52.4782, 999.7167, 177.9394},
    {2182.2017, 1628.5848, 1043.8723, 224.8601},
    {748.4623, 1438.2378, 1102.9531, 0.6069},
    {2807.3604, -1171.7048, 1025.5703, 193.7117},
    {366.0002, -9.4338, 1001.8516, 160.528},
    {2216.1282, -1076.3052, 1050.4844, 86.428},
    {2268.5156, 1647.7682, 1084.2344, 99.7331},
    {2236.6997, -1078.9478, 1049.0234, 2.5706},
    {-2031.1196, -115.8287, 1035.1719, 190.1877},
    {2365.1089, -1133.0795, 1050.875, 177.3947},
    {1168.512, 1360.1145, 10.9293, 196.5933},
    {315.4544, 976.5972, 1960.8511, 359.6368},
    {1893.0731, 1017.8958, 31.8828, 86.1044},
    {501.9578, -70.5648, 998.7578, 171.5706},
    {-42.5267, 1408.23, 1084.4297, 172.068},
    {2283.3118, 1139.307, 1050.8984, 19.7032},
    {84.9244, 1324.2983, 1083.8594, 159.5582},
    {260.7421, 1238.2261, 1084.2578, 84.3084},
    {-1658.1656, 1215.0002, 7.25, 103.9074},
    {-1961.6281, 295.2378, 35.4688, 264.4891},
    {616.7820, -74.8151, 997.6350, 264.4891},
    {615.2851, -124.2390, 997.6350, 264.4891},
    {617.5380, -1.9900, 1000.6829, 264.4891}
};
new InteriorDialogInteriors[149][1] =
{
    {11},
    {5},
    {3},
    {3},
    {3},
    {3},
    {3},
    {18},
    {1},
    {3},
    {2},
    {3},
    {3},
    {3},
    {3},
    {3},
    {3},
    {3},
    {3},
    {17},
    {17},
    {5},
    {5},
    {17},
    {7},
    {5},
    {2},
    {10},
    {10},
    {7},
    {1},
    {1},
    {1},
    {1},
    {1},
    {3},
    {5},
    {1},
    {1},
    {7},
    {2},
    {10},
    {1},
    {2},
    {1},
    {10},
    {3},
    {10},
    {1},
    {2},
    {2},
    {2},
    {18},
    {18},
    {3},
    {5},
    {2},
    {5},
    {1},
    {10},
    {14},
    {14},
    {12},
    {14},
    {17},
    {18},
    {16},
    {5},
    {6},
    {9},
    {10},
    {17},
    {16},
    {15},
    {1},
    {1},
    {3},
    {2},
    {1},
    {5},
    {15},
    {15},
    {15},
    {12},
    {0},
    {0},
    {0},
    {18},
    {0},
    {0},
    {0},
    {0},
    {2},
    {5},
    {5},
    {4},
    {4},
    {4},
    {4},
    {0},
    {4},
    {10},
    {1},
    {0},
    {0},
    {4},
    {12},
    {6},
    {12},
    {4},
    {6},
    {6},
    {14},
    {4},
    {5},
    {5},
    {3},
    {14},
    {16},
    {6},
    {6},
    {6},
    {6},
    {6},
    {15},
    {6},
    {6},
    {2},
    {6},
    {8},
    {9},
    {1},
    {1},
    {2},
    {3},
    {8},
    {0},
    {9},
    {10},
    {11},
    {8},
    {11},
    {9},
    {9},
    {0},
    {0},
    {2},
    {3},
    {1}
};

new AutoMessages[][] = {
	"Don't forget to check out our Donation Specials at ~y~http://www.evolution-rp.net~w~,~n~Help keep the server up and running!",
	"Abusing newbie channel will result in mutes, frequent abuse will be punished with~n~ a ban.",
	"Want to make a suggestion? Post in the suggestion section on the Forums.",
	"Found someone ~r~deathmatching~w~? Report them on the Forums for a better response ~n~using ~y~/report ~w~may not be as successful.",
	"Evolution Roleplay staff will never ask for your ~p~Personal Information~w~, if someone~n~asks for your ~p~Personal Information ~w~report them immediately.",
	"Found a bug? Don't report it toward our staff, please goto our bug section~n~on the forums.",
	"Want to join a Faction? You can apply on the Forums. Want to join a Gang?~n~Be sure to Roleplay with their leaders, or apply on the forums!",
	"Evolution Roleplay doesn't tolerate hacks, if you are using hacks you will be~n~caught and banned for using them so don't use them!",
	"Don't forget to join our Teamspeak server ~y~ts.evolution-rp.net~w~ you can get help~n~with your questions or use it for general chat.",
	"When you ~y~Report ~w~it helps if you are patient, Administrators may be busy with~n~ someone elses ~y~Report~w~.",
	"Got any ~p~questions~w~ you want to ask? why not head to our Teamspeak or post on~n~the Forums sure someone will help answer your question."
};

//New Police shit added by Mike
new Pursuit[MAX_PLAYERS];

// LSFD Fire Locations
forward RandomFire();
forward StartRandomGarbage();
forward StartRandomUtility();
forward StartRandomFire();
forward IsPlayerInCircle(playerid,Float:x,Float:y,radius);
forward MAINTENANCE_T5();
forward GetPlayerDistanceToPoint(playerid,Float:x,Float:y);
new RandomFireActive;
new Float:RandomFire_X;
new Float:RandomFire_Y;
new Float:RandomFire_Z;
new RandomFireLocation[256];
new FireSmoke;
new FireCount;
new RandomFireTimer;

new Float:RandomFireSpawns[20][3] = {
{1802.979,-1579.536,13.510},//GPM VIP
{1567.887,-1894.786,13.632}, //: Metropolitan ave building automatic firealarm
{1447.816,-2289.690,13.622}, //: LAX Terminal Entrance Hindenburg N
{2283.268,-1702.766,17.772}, //: Gym Parking lot fire, Liverpool rd
{2307.164,-1642.985,14.652}, //: Ten Green Bottles Kennedy Vld and Grove
{862.530,-1252.124,14.892},//: Stage A Fire Liberty Ave and Rodeo Dr
{2782.219,-1814.517,11.745},// : Forum Arena Main Entrance off of 425
{2371.641,-2134.402,27.260},// : Oil tank fire accross from trucking depotw Atlantic Avenu
{2397.253,-1898.087,13.622},// : Clukinbell Atlantic Ave
{1413.382,-1699.106,13.612},// : LS Courthouse
{1337.640,-1090.549,26.729},// : Lawyers office stlarwrence blvd
{1173.541,-1307.865,14.071},// : Allsaints front entrance
{1940.535,-1172.337,20.668},// : Park Fire brush park north and green st
{1518.149,-1451.034,13.800},//: Residential Obey Hangout Central Ave and pasadena
{1351.162,-1756.498,13.497},//: Sandreas Blvd Near Courthouse 247 comercial alarm
{1940.8149,-1773.1541,19.5250}, // Gas Station Fire, San Andreas Blvd. and Gates.
{2852.2368,-1357.7797,11.0625}, // Building Fire, Santa Monica Blvd. and Bush St.
{1460.0709,-1009.9266,26.8438}, // Building Fire, Sunset Blvd. near ELM, LS Bank.
{813.6826,-1456.7595,14.2284}, // House Fire, Giggles and Hell Street.
{1034.7396,-813.1819,101.8516} // House Fire, Rich St. Near VGB Circle Dr.
};

new RandomFireLocationNames[][] = {
"Automatic Fire Alarm,Panopticon Ave and Washington St.",
"Automatic Fire Alarm, Metropolitan Ave and Pine St.",
"Pull Station Alarm, LAX Terminal, Front Entrance, Hindenburg North.",
"Working Structure Fire, Ten Greenbottles, Grove St.",
"Pryotechnics Fire, Stage A, Liberty Ave and Rodeo Dr.",
"Gas Leak, Forum Arena, Main Entrance, off of I425.",
"Gas Tank Explosion, Oil Refinery, Atlantic Ave, just south of Industrial Blvd.",
"Grease Fire, Cluckin' Bell, Atlantic Avenue.",
"Automatic Fire Alarm, Front Entrance, LS County Courthouse.",
"Gas Leak, near the Lawyer Firm, St Lawrence Blvd.",
"Automatic Fire Alarm, All Saints, Front Bay, Health St and St Mary.",
"Smoke seen, City Park, Park North and Green St.",
"Residental Alarm, Obey Residence, Central Ave and Pasadena Blvd.",
"Electrical Fire, 24/7 San Andrea Blvd Near the Courthouse.",
"Gas Spill and Explosion, San Andreas Blvd. and Gates.",
"Working Structure Fire, Santa Monica Blvd. and Bush St.",
"Working Structure Fire, Sunset Blvd. near ELM, LS Bank.",
"Residential Alarm, Giggles and Hell Street.",
"Working Structure Fire, Rich St. Near VGB Circle Dr."

};

#define	TYPE_TPMATRUNTIMER 1
#define	TYPE_TPDRUGRUNTIMER 2
#define	TYPE_ARMSTIMER 3
#define	TYPE_GIVEWEAPONTIMER 4
#define	TYPE_HOSPITALTIMER 5
#define	TYPE_SEXTIMER 6
#define	TYPE_FLOODPROTECTION 7
#define	TYPE_HEALTIMER 8
#define TYPE_GUARDTIMER 9
#define	TYPE_TPTRUCKRUNTIMER 10
#define	TYPE_SHOPORDERTIMER 11
#define TYPE_SELLMATSTIMER 12
#define TYPE_TPPIZZARUNTIMER 13
#define TYPE_PIZZATIMER 14

#define	MAX_BARRICADES	10
#define MAX_MODS 15
#define RED_FLAG_OBJ 1580
#define BLUE_FLAG_OBJ 1579
#define HILL_OBJ 1578
#define VEHICLE_RESPAWN 7200
#define SPEEDGUN 43
#define MAX_NOP_WARNINGS 4
#define DIALOG_NOTHING 32767

#define INVALID_GATE_ID -1

#define GetVehicleName(%0) VehicleName[GetVehicleModel(%0)-400]
#define GetPlayerCash(%0) PlayerInfo[%0][pCash]
#define GivePlayerCash(%0,%1) PlayerInfo[%0][pCash] += (%1)
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)
#define IsNull(%1) \
((!(%1[0])) || (((%1[0]) == '\1') && (!(%1[1]))))
#define FREEZE_TIME	2000

#pragma tabsize 0

// Script Commodities (Points, Houses, Etc)
#define 		NEW_VULNERABLE 				(24)
#define 		TIME_TO_CLAIM 				(1)
#define 		TIME_TO_TAKEOVER 			(10)
#define 		MAX_FAMILY 					(16)
#define 		MAX_POINTS 					(9)
#define 		MAX_DMAPICONS 				(400)
#define 		MAX_DDOORS					(2000)
#define 		MAX_TEXT					(2000)
#define 		MAX_HOUSES 					(3000) // Don't set this any higher, it will cause bugs -Phazd
#define 		MAX_GATES 					(4000)
#define 		MAX_EVENTPOINTS 			(50)
#define 		INVALID_HOUSE_ID			(-1)
#define			MAX_TURFS					(40)
#define			MAX_ARENAS					(10)

// Player Vehicle Defines
#define MAX_PLAYERVEHICLES 10
#define MAX_PLAYERTOYS 10
#define MAX_MODS 15
#define MAX_DEALERSHIPVEHICLES 10
#define MAX_CARDEALERSHIPS 15
#define MAX_GANG_VEHICLES 16
#define INVALID_PLAYER_VEHICLE_ID 0

// Admin Defines
#define MAX_REPORTS  1000
#define INVALID_REPORT_ID -1
#define WEAPON_HACKER_WARNINGS  4
#define NOOB_SKIN 299
#define DIALOG_NUNMUTE 10
#define DIALOG_SHOWSCORES 11
#define DIALOG_NAMECHANGE 261
#define DIALOG_NAMECHANGE2 262

// Dialogs
#define			BIGEARS						(10)
#define			BIGEARS2					(20)
#define			BIGEARS3					(30)
#define			BIGEARS4					(40)
#define			MAINMENU					(50)
#define			MAINMENU2					(60)
#define         MAINMENU3                   (70)
#define 		NULLEMAIL                   (80)
#define         PMOTDNOTICE                 (90)
#define			TWADMINMENU					(100)
#define			TWEDITTURFSSELECTION		(110)
#define			TWEDITTURFSMENU				(120)
#define			TWEDITFCOLORSSELECTION		(130)
#define			TWEDITFCOLORSMENU			(140)
#define			TWEDITTURFSOWNER			(150)
#define			TWEDITTURFSLOCKED			(160)
#define			TWEDITTURFSVUL				(170)
#define			TWEDITTURFSPERKS			(180)
#define			PBMAINMENU					(200)
#define			PBARENASELECTION			(210)
#define			PBTOKENBUYMENU				(220)
#define			PBSETUPARENA				(230)
#define			PBJOINPASSWORD				(240)
#define			PBJOINTEAM					(250)
#define			PBSWITCHTEAM				(260)
#define			PBCHANGEPASSWORD			(270)
#define			PBCHANGEGAMEMODE			(280)
#define			PBCHANGELIMIT				(290)
#define			PBCHANGETIMELEFT			(300)
#define			PBCHANGEBIDMONEY			(310)
#define			PBCHANGEHEALTH				(320)
#define			PBCHANGEARMOR				(330)
#define			PBCHANGEWEAPONS1			(340)
#define			PBCHANGEWEAPONS2			(350)
#define			PBCHANGEWEAPONS3			(360)
#define			PBCHANGEEXPLOITPERM			(370)
#define			PBCHANGEFLAGINSTAGIB		(380)
#define			PBCHANGEFLAGNOWEAPONS		(390)
#define			PBARENASCORES				(400)
#define			PBADMINMENU					(410)
#define			PBEDITMENU					(420)
#define			PBEDITARENAMENU				(430)
#define			PBEDITARENANAME				(440)
#define			PBEDITARENADMSPAWNS			(450)
#define			PBEDITARENATEAMSPAWNS		(460)
#define			PBEDITARENAFLAGSPAWNS		(470)
#define			PBEDITARENAINT				(480)
#define			PBEDITARENAVW				(490)
#define			PBEDITARENAHILLRADIUS		(500)
#define			DOORLOCK					(510)
#define			NMUTE						(520)
#define			ADMUTE						(530)
#define			RTONEMENU					(540)
#define			RCPINTRO					(550)
#define			RCPINTRO2					(560)
#define			RCPCHOOSE					(570)
#define			RCPSIZE						(580)
#define			RCPTYPE						(590)
#define			RCPEDITMENU					(600)
#define			RCPEDITMENU2				(610)

#define			DIALOG_SHOPORDER			(620)
#define			DIALOG_SHOPORDER2			(621)
#define			DIALOG_SHOPORDEREMAIL		(622)
#define			DIALOG_SHOPDELIVER			(623)
#define			DIALOG_SHOPDELIVERCAR		(624)
#define			DIALOG_SHOPDELIVERCAR2		(625)

#define			DIALOG_SHOPERROR			(630)
#define			DIALOG_SHOPSENT				(640)
#define			DIALOG_SHOPERROR2			(650)
#define			DIALOG_LOADTRUCK			(660)
#define			DIALOG_LOADTRUCKL			(670)
#define			DIALOG_LOADTRUCKI			(680)
#define         SHAFTDUTYMENU               (681)
#define         SHAFTDUTYMENU2              (682)
#define         SHAFTDUTYMENU3              (683)
#define         SHAFTDUTYMENU4              (684)
#define         SHAFTDUTYMENU5              (685)
#define 		RRMENU          			(10253)
#define 		RRMENUWEP       			(10254)
#define 		RRMENUSKIN      			(10255)
#define			FDUTYMENU					(690)
#define			FDUTYMENU2					(700)
#define			FDUTYMENU3					(710)
#define			FDUTYMENU4					(720)
#define			FDUTYMENU5					(730)
#define			TRMENU						(740)
#define			TRCMENU						(750)
#define			TRAFMENU					(760)
#define			TREMMENU					(770)
#define			TRDCMENU					(780)
#define			TRAAMENU					(790)
#define			TRSKINMENU					(800)
#define			TRWEAPONSMENU				(810)
#define			TRMEMBMENU					(820)
#define			TRAEQUIP					(830)
#define			TRASKINMENU					(840)
#define			NOOSEDUTYMENU				(850)
#define			NOOSEDUTYMENU2				(860)
#define			NOOSEDUTYMENU3				(870)
#define			DUTYMENU					(880)
#define			DUTY_OPTIONS				(890)
#define			DUTYMENU2					(900)
#define			DUTYMENU3					(910)
#define			DUTYMENU4					(920)
#define			DUTYMENU5					(930)
#define			STOREMENU					(940)
#define			LOTTOMENU					(950)
#define			ELEVATOR					(960)
#define			ELEVATOR2					(970)
#define			ELEVATOR3					(980)
#define			RENTMENU					(990)
#define			VIPNUMMENU					(1000)
#define			VIPNUMMENU2					(1010)
#define			VIPNUMMENU3					(1020)
#define			TRACKCAR					(1030)
#define			GTRACKCAR					(1040)
#define			GOTOPLAYERCAR				(1050)
#define			VEHICLESTORAGE				(1060)
//#define			GVEHICLESTORAGE				(1065)
#define			House275CAR					(1070)
#define			MaxAdmin				(1072)
#define			MaxAdminMenu				(1073)
#define			DIALOG_NUMBER_PLATE			(1080)
#define			DIALOG_NUMBER_PLATE_CHOSEN	(1090)
#define			COLORMENU					(1100)
#define			FIGHTMENU					(1110)
#define			REPORTSMENU					(1120)
#define			FDSADIVDUTYMENU				(1130)
#define			FDSADIVDUTYMENU2			(1140)
#define			FDSADIVDUTYMENU3			(1150)
#define			FDSADIVDUTYMENU4			(1160)
#define			FDSADIVDUTYMENU5			(1170)
#define			DIALOG_SFPD					(1180)
#define			DIALOG_SFPD_WEAPONS			(1190)
#define			DIALOG_SFPD_CLOTHING		(1200)
#define			DIALOG_SFPD_CLOTHING_TWO	(1210)
#define			DIALOG_SASD					(1220)
#define			DIALOG_SASD_WEAPONS			(1230)
#define			DIALOG_SASD_CLOTHING		(1240)
#define			DIALOG_SASD_CLOTHING_TWO	(1250)
#define			DIALOG_SANEWS				(1260)
#define			DIALOG_TAXI					(1270)
#define			DIALOG_TAXIEQUIPMENT		(1280)
#define			VIPWEPSMENU					(1290)
#define			NDUTYMENU					(1300)
#define			NDUTYMENU2					(1310)
#define			NDUTYMENU3					(1320)
#define			NDUTYMENU4					(1330)
#define			NDUTYMENU5					(1340)
#define			CGDUTYMENU					(1350)
#define			CGDUTYMENU2					(1360)
#define			CGDUTYMENU3					(1370)
#define			CGDUTYMENU4					(1380)
#define			WPDUTYMENU					(1390)
#define			WPDUTYMENU2					(1400)
#define			WPDUTYMENU3					(1410)
#define			WPDUTYMENU4					(1420)
#define			FDSAMENU					(1430)
#define			FDSASKINS					(1440)
#define			FDSAGEAR					(1450)
#define			SEMENU						(1460)
#define			SESKINS						(1470)
#define			SEGEAR						(1480)
#define			MPSMENU						(1490)
#define			MPSSKINS					(1500)
#define			MPSGEAR						(1510)
#define			MPSRELEASE					(1520)
#define			MPSPAYTICKETSCOP			(1530)
#define			MPSPAYTICKETS				(1540)
#define			GIVEKEYS					(1550)
#define			REMOVEKEYS					(1560)
#define			MPSFRELEASE					(1570)
#define			HQENTRANCE					(1580)
#define			HQEXIT						(1590)
#define			HQCUSTOMINT					(1600)
#define			HQDELETE					(1610)
#define			FAQMENU						(1620)
#define			COLOREDDOTSFAQ				(1630)
#define			LOCKSFAQ					(1640)
#define			SKINSFAQ					(1650)
#define			ATMFAQ						(1660)
#define			FACTIONSFAQ					(1670)
#define			GANGSFAQ					(1680)
#define			HITMENFAQ					(1690)
#define			WEBSITEFAQ					(1700)
#define			FURTHERHELPFAQ				(1710)
#define			SHOPMENU					(1720)
#define			UNMODCARMENU				(1730)
#define			DIALOG_CDEDIT				(1740)
#define			DIALOG_CDUPGRADE			(1750)
#define			DIALOG_CDTILL				(1760)
#define			DIALOG_CDEDITCARS			(1770)
#define			DIALOG_CDEDITONE			(1780)
#define			DIALOG_CDEDITMODEL			(1790)
#define			DIALOG_CDEDITCOST			(1800)
#define			DIALOG_CDEDITPARK			(1810)
#define			DIALOG_CDDELVEH				(1820)
#define			DIALOG_CDNEWVEH				(1830)
#define			DIALOG_CDRADIUS				(1840)
#define			DIALOG_CDNAME				(1850)
#define			DIALOG_CDPRICE				(1860)
#define			DIALOG_CDBUY				(1870)
#define			DIALOG_CDWITHDRAW			(1880)
#define			DIALOG_CDDEPOSIT			(1890)
#define			DIALOG_CDSELL				(1900)
#define			DIALOG_CDLOCKBUY			(1910)
#define			DIALOG_CDLOCKMENU			(1920)
#define			DIALOG_CDGLOCKBUY			(1930)
#define			DIALOG_CDGLOCKMENU			(1940)
#define			JOBHELPMENU					(1950)
#define			DETECTIVEJOB				(1960)
#define			DETECTIVEJOB2				(1970)
#define			DETECTIVEJOB3				(1980)
#define			LAWYERJOB					(1990)
#define			LAWYERJOB2					(2000)
#define			LAWYERJOB3					(2010)
#define			WHOREJOB					(2020)
#define			WHOREJOB2					(2030)
#define			WHOREJOB3					(2040)
#define			DRUGDEALERJOB				(2050)
#define			DRUGDEALERJOB2				(2060)
#define			DRUGDEALERJOB3				(2070)
#define			MECHANICJOB					(2080)
#define			MECHANICJOB2				(2090)
#define			MECHANICJOB3				(2100)
#define			BODYGUARDJOB				(2110)
#define			BODYGUARDJOB2				(2120)
#define			BODYGUARDJOB3				(2130)
#define			ARMSDEALERJOB				(2140)
#define			ARMSDEALERJOB2				(2150)
#define			ARMSDEALERJOB3				(2160)
#define			BOXERJOB					(2170)
#define			BOXERJOB2					(2180)
#define			BOXERJOB3					(2190)
#define			TAXIJOB						(2200)
#define			TAXIJOB2					(2210)
#define			TAXIJOB3					(2220)
#define			SMUGGLEJOB					(2230)
#define			SMUGGLEJOB2					(2240)
#define			SMUGGLEJOB3					(2250)
#define			CRAFTJOB					(2260)
#define			BARTENDERJOB				(2270)
#define			TRUCKERJOB					(2280)
#define			PIZZAJOB					(2290)
#define			MDC_START_ID				(2300)
#define			MDC_MAIN					(2310)
#define			MDC_FIND					(2320)
#define			MDC_MEMBERS					(2330)
#define			MDC_BLANK					(2340)
#define			MDC_WARRANTS				(2350)
#define			MDC_CHECK					(2360)
#define			MDC_LICENSES				(2370)
#define			MDC_LSPD					(2380)
#define			MDC_SFPD					(2390)
#define			MDC_FBI						(2400)
#define			MDC_FDSA					(2410)
#define			MDC_MESSAGE					(2420)
#define			MDC_SMS						(2430)
#define			MDC_BOLOLIST				(2440)
#define			MDC_ISSUE					(2450)
#define			MDC_DELETE					(2460)
#define			MDC_DEL_WARRANT				(2470)
#define			MDC_DEL_BOLO				(2480)
#define			MDC_LOGOUT					(2490)
#define			MDC_CREATE					(2500)
#define			MDC_CIVILIANS				(2510)
#define			MDC_ISSUE_SLOT				(2520)
#define			MDC_MESSAGE_2				(2530)
#define			MDC_SMS_2					(2540)
#define			MDC_BOLO					(2550)
#define			MDC_BOLO_SLOT				(2560)
#define			MDC_END_ID					(2570)
#define			AUDIO_URL					(2580)
#define			DRINKLISTDIALOG				(2590)
#define			DRINKDIALOG					(2600)
#define			TIPDIALOG					(2610)
#define			LAELEVATOR					(2620)
#define			TOYS						(2630)
#define			DELETETOY					(2640)
#define			WEARTOY						(2650)
#define			BUYTOYS						(2660)
#define			BUYTOYS2					(2670)
#define			BUYTOYS3					(2680)
#define			BUYTOYSGOLD					(2690)
#define			BUYTOYSGOLD2				(2700)
#define			BUYTOYSGOLD3				(2710)
#define			EDITTOYS					(2720)
#define			EDITTOYS2					(2730)
#define			EDITTOYSBONE				(2740)
#define			EDITTOYSPX					(2750)
#define			EDITTOYSPY					(2760)
#define			EDITTOYSPZ					(2770)
#define			EDITTOYSRX					(2780)
#define			EDITTOYSRY					(2790)
#define			EDITTOYSRZ					(2800)
#define			EDITTOYSSX					(2810)
#define			EDITTOYSSY					(2820)
#define			EDITTOYSSZ					(2830)
#define			LAELEVATORPASS				(2840)
#define			NGMENU						(2850)
#define			NGMENUWEP					(2860)
#define			NGMENUSKIN					(2870)
#define			BUYTOYSCOP					(2880)
#define			BUYTOYSCOP2					(2890)
#define			BUYTOYSCOP3					(2900)
#define			DIALOG_LICENSE_BUY			(2910)
#define			DIALOG_ADMAIN				(2920)
#define			DIALOG_ADLIST				(2930)
#define			DIALOG_ADPLACE				(2940)
#define			DIALOG_ADPLACEP				(2950)
#define			DIALOG_ADSEARCH				(2960)
#define			DIALOG_ADSEARCHLIST			(2970)
#define			DIALOG_ADFINAL				(2980)
#define			SELLVIP						(3000)
#define			DIALOG_DELETECAR			(3010)
#define         PANEL                       (3020)
#define         PANELCONTROLS               (3030)
#define			DIALOG_CHANGEPASS			(3040)
#define 		SETSTATION      			(3050)
#define 		GENRES      				(3060)
#define 		STATIONLIST 				(3070)
#define 		STATIONLISTEN 				(3080)
#define 		TOP50LIST       			(3090)
#define 		TOP50LISTEN     			(3100)
#define 		STATIONSEARCH   			(3110)
#define 		STATIONSEARCHLIST   		(3120)
#define 		STATIONSEARCHLISTEN 		(3130)
#define 		INTERACTMAIN				(3140)
#define 		INTERACTPAY					(3150)
#define 		INTERACTGIVE				(3160)
#define 		INTERACTGIVE2				(3170)
#define         REGISTERSEX                 (3180)
#define         REGISTERAGE                 (3190)
#define         CHOOSELOCATION                 (3191)
#define			STORAGESTORE                (3200)
#define         STORAGEEQUIP                (3210)
#define         DMRCONFIRM                  (3220)

#define			SHOPOBJECT_ORDERID			(3230)
#define			SHOPOBJECT_GIVEPLAYER		(3231)
#define			SHOPOBJECT_OBJECTID			(3232)
#define			SHOPOBJECT_TOYSLOT			(3233)
#define			SHOPOBJECT_SUCCESS			(3234)

#define         MDC_SHOWCRIMES              (3235)

#define         VIP_EXPIRES                 (3236)

#define         ADMIN_VEHCHECK              (3237)

#define         FLAG_LIST             		(3238)
#define         FLAG_DELETE                 (3239)
#define         FLAG_DELETE2                (3240)

#define         CRATE_GUNMENU               (3241)

#define         DIALOG_REPORTMENU           (3490)
#define         DIALOG_REPORTMENU2          (3500)
#define         DIALOG_REPORTDM             (3540)
#define         DIALOG_REPORTRK		        (3550)
#define         DIALOG_REPORTKOS            (3560)
#define         DIALOG_REPORTCR             (3570)
#define         DIALOG_REPORTCARRAM         (3580)
#define         DIALOG_REPORTPG             (3590)
#define         DIALOG_REPORTMG             (3600)
#define         DIALOG_REPORTSPAM           (3610)
#define         DIALOG_REPORTGDE            (3620)
#define         DIALOG_REPORTHACK           (3630)
#define         DIALOG_REPORTMF             (3640)
#define         DIALOG_REPORTSA             (3650)
#define         DIALOG_REPORTNRPN           (3660)
#define         DIALOG_REPORTBANEVADE       (3670)
#define         DIALOG_REPORTGE             (3680)
#define         DIALOG_REPORTRHN            (3690)
#define         DIALOG_REPORTRSE            (3700)
#define         DIALOG_REPORTLOG            (3710)
#define         DIALOG_REPORTCARSURF        (3720)
#define         DIALOG_REPORTNRPB           (3730)
#define         DIALOG_REPORTFREE           (3740)
#define         DIALOG_REPORTNOTLIST		(3750)
#define         DIALOG_REPORTNOTLIST2       (3755)
#define         DIALOG_UNMUTE               (3760)
#define         DIALOG_REPORTNRPB2          (3770)
#define         DIALOG_REPORTNAME           (3780)
#define         DIALOG_SPEAKTOADMIN         (3790)
#define         DIALOG_DEDICATEDPLAYER      (3800)
#define 		DIALOG_POMAILS 				(3810)
#define		 	DIALOG_PODETAIL 			(3820)
#define 		DIALOG_POTRASHED 			(3830)
#define 		DIALOG_POSTAMP 				(3840)
#define 		DIALOG_PORECEIVER 			(3850)
#define 		DIALOG_POMESSAGE 			(3860)
#define 		DIALOG_CREATEREPORT			(10000)

#define       LISTTOYS_DELETETOY          	(3861)
#define       LISTTOYS_DELETETOYCONFIRM     (3862)

// admin panel
#define			ADMINPANEL					(3890)
#define			ADMINMDCPANEL					(3891)
#define			ADMINPROFILEVIEW			(3892)
#define			ADMINMDCNAME				(3893)
#define		ADMINPROFILEERROR			(3894)
// admin panel

// SA:PA
#define			DIALOG_SAPA					(3900)
#define			DIALOG_SAPA_WEAPONS			(3901)
#define			DIALOG_SAPA_CLOTHING		(3902)
#define			DIALOG_SAPA_CLOTHING_TWO	(3903)

// RECOMMENDATIONS

#define			RECOMMENDATION				(3910)
#define			RECOMMENDATION_FAIL			(3911)
#define			RECOMMENDATION_ALREADY		(3912)


// Colors/Misc.
#define MAX_STRING 255
#define CHECKPOINT_NONE 0
#define CHECKPOINT_HOME 12
#define CHECKPOINT_LOADTRUCK 97651
#define CHECKPOINT_RETURNTRUCK 97652
#define CHECKPOINT_HITMAN 123
#define CHECKPOINT_HITMAN2 124
#define CHECKPOINT_HITMAN3 125
#define COLOR_TWWHITE 0xFFFFFFAA
#define COLOR_TWYELLOW 0xFFFF00AA
#define COLOR_TWPINK 0xE75480AA
#define COLOR_TWRED 0xFF0000AA
#define COLOR_TWBROWN 0x654321AA
#define COLOR_TWGRAY 0x808080AA
#define COLOR_TWOLIVE 0x808000AA
#define COLOR_TWPURPLE 0x800080AA
#define COLOR_TWTAN 0xD2B48CAA
#define COLOR_TWAQUA 0x00FFFFAA
#define COLOR_TWORANGE 0xFF8C00AA
#define COLOR_TWAZURE 0x007FFFAA
#define COLOR_TWGREEN 0x008000AA
#define COLOR_TWBLUE 0x0000FFAA
#define COLOR_TWBLACK 0x000000AA
#define COLOR_ORANGE 0xFF8000FF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xAA3333AA
#define COLOR_REALRED 0xFF0606FF
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_STEELBLUE 0xA4C1FFFF
#define COLOR_TAXI 0xFFFF9000
#define COLOR_VIP 0xC93CCE00
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_PINK 0xFF66FFAA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_BLACK 0x000000AA
#define TEAM_SFPD 0x6699FF00
#define TEAM_SASD 0xCC993300
#define COLOR_NEWS 0xFFA500AA
#define COLOR_OOC 0xE0FFFFAA
#define COLOR_NG 0x9ACD3200
#define COLOR_TR 0x56B9B900
#define COLOR_TR2 0x11DCDC00
#define COLOR_FBI 0x8D8DFFFF
#define COLOR_CYAN 0x40FFFFFF
#define PUBLICRADIO_COLOR 0x6DFB6DFF
#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_COR 5
#define TEAM_BAR 6
#define TEAM_TAT 7
#define TEAM_CUN 8
#define TEAM_STR 9
#define TEAM_HIT 10
#define TEAM_ADMIN 11
#define OBJECTIVE_COLOR 0x64000064
#define PAINTBALL_TEAM_RED 0xFF000000
#define PAINTBALL_TEAM_BLUE 0x2641FE00
#define WANTED_COLOR 0xFF0000FF
#define FIND_COLOR 0xB90000FF
#define COLOR_NOOSE 0x930A1600
#define COLOR_SHAFT 0x0B61A400
#define COLOR_SAPA 0x32C4E500
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_LSSD_COLOR 0x33AA3300
#define TEAM_JOB_COLOR 0xFFB6C1AA
#define TEAM_HIT_COLOR 0xFFFFFF00
#define TEAM_BLUE_COLOR 0x2641FE00
#define TEAM_FBI_COLOR 0x8D8DFF00
#define TEAM_NEWS_COLOR 0x049C7100
#define TEAM_FDSA_COLOR 0xFF828200
#define TEAM_TAXI_COLOR 0xF2FF0000
#define COP_GREEN_COLOR 0x33AA33AA
#define COLOR_ADD 0x63FF60AA
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_MED_COLOR 0xFF828200
#define TEAM_ADMINDUTY_COLOR 0xFF6347AA
#define TEAM_ORANGE_COLOR 0xFF800000
#define TEAM_APRISON_COLOR 0x9C791200
#define TEAM_COR_COLOR 0x39393900
#define TEAM_BAR_COLOR 0x00D90000
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TEAM_STR_COLOR 0x01FCFF00
#define TEAM_ADMIN_COLOR 0x00808000
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define DEPTRADIO 0xFFD7004A
#define RADIO 0x8D8DFFFF
#define FRADIO 0xAA3333AA
#define COLOR_NEWBIE 0x7DAEFFFF
#define COLOR_COMBINEDCHAT 0x6CEFF0FF
#define COLOR_JOINHELPERCHAT 0xAAC0E4FF
#define COLOR_HELPERCHAT  0x0BBD5FEC8
#define COLOR_REPORT 0xFFFF91FF
#define COLOR_SHOP 0xE7E784FF

#define RocketHeight 50
#define TYPE_COUNTDOWN 2000
#define TYPE_LAUNCH 2001
#define TYPE_EXPLODE 2002
#define MAX_FIREWORKS 100
#define FireworkSpread 30

// File parsing - Mike
#define 					ini_SetString(%0,%1,%2)				 			if(%2[0]) fwrite(%0, %1), fputchar(%0, '=', false) && fwrite(%0, %2) && fwrite(%0, "\r\n")
#define 					ini_SetInteger(%0,%1,%2,%3)                     format(%1, sizeof(%1), "%s=%d\r\n", %2, %3) && fwrite(%0, %1)
#define 					ini_SetFloat(%0,%1,%2,%3)                     	format(%1, sizeof(%1), "%s=%f\r\n", %2, %3) && fwrite(%0, %1)

// Elevator
#define ELEVATOR_SPEED      (5.0)   // Movement speed of the elevator.
#define DOORS_SPEED         (4.0)   // Movement speed of the doors.
#define ELEVATOR_WAIT_TIME  (5000)  // Time in ms that the elevator will wait in each floor before continuing with the queue.
									// Be sure to give enough time for doors to open.
#define X_DOOR_CLOSED       (1786.627685)
#define X_DOOR_R_OPENED     (1785.027685)
#define X_DOOR_L_OPENED     (1788.227685)
#define GROUND_Z_COORD      (14.511476)
#define ELEVATOR_OFFSET     (0.059523)

#define ELEVATOR_STATE_IDLE     (0)
#define ELEVATOR_STATE_WAITING  (1)
#define ELEVATOR_STATE_MOVING   (2)
#define INVALID_FLOOR           (-1)

//Speed Cam System
#define MAX_SPEEDCAMS 13

#define DIALOG_WHEELS 9710

#define TOTAL_ITEMS         207
#define SELECTION_ITEMS 	21
#define ITEMS_PER_LINE  	7

#define HEADER_TEXT "Vehicles"
#define NEXT_TEXT   "Next"
#define PREV_TEXT   "Prev"

#define DIALOG_BASE_X   	75.0
#define DIALOG_BASE_Y   	130.0
#define DIALOG_WIDTH    	550.0
#define DIALOG_HEIGHT   	180.0
#define SPRITE_DIM_X    	60.0
#define SPRITE_DIM_Y    	70.0


//#define O_BARREL     1217

new gTotalItems = TOTAL_ITEMS;
new PlayerText:gCurrentPageTextDrawId[MAX_PLAYERS];
new PlayerText:gHeaderTextDrawId[MAX_PLAYERS];
new PlayerText:gBackgroundTextDrawId[MAX_PLAYERS];
new PlayerText:gNextButtonTextDrawId[MAX_PLAYERS];
new PlayerText:gPrevButtonTextDrawId[MAX_PLAYERS];
new PlayerText:gSelectionItems[MAX_PLAYERS][SELECTION_ITEMS];
new gSelectionItemsTag[MAX_PLAYERS][SELECTION_ITEMS];
new gItemAt[MAX_PLAYERS];

new gItemList[TOTAL_ITEMS] = {
400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,
431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,450,451,452,453,454,455,456,457,458,459,460,461,
462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,
493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,
524,525,526,527,528,529,530,531,532,533,534,535,536,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,
555,556,557,558,559,560,561,562,563,564,565,566,567,568,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,
586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611
};

enum SpeedCam
{
	Float:SCamX,
	Float:SCamY,
	Float:SCamZ,
	CamSpeed,
}

new SpeedCams[MAX_SPEEDCAMS][SpeedCam]=
{
	//{X,Y,Z,Speed}
	{2078.86, -1762.17, 13.55, 65}, // Speedcam ONE //
	{2290.59, -1739.09, 13.20, 65}, // Speedcam TWO //
	{2419.18, -1922.15, 13.37, 65}, // Speedcam THREE //
	{2914.36, -1556.53, 11.02, 90}, // Speedcam FOUR //
	{2733.09, -198.49, 30.21, 90}, // Speedcam FIVE //
	{2096.73, 314.43, 34.37, 90}, // Speedcam SIX //
	{636.50, 316.62, 20.17, 80}, // Speedcam SEVEN //
	{246.58, -1017.81, 57.49, 80}, // Speedcam EIGHT //
	{391.85, -1709.21, 7.24, 90}, // Speedcam NINE //
	{1054.14, -1860.99, 13.55, 90}, // Speedcam TEN //
	{1816.03, -1603.05, 13.54, 65}, // Speedcam ELEVEN //
	{1664.40, -973.15, 38.05, 90}, // Speedcam TWELVE //
	{1672.30, -323.01, 43.16, 65} // Speedcam THIRTEEN //
};

//New LEO Siren shit
new Lamp[MAX_VEHICLES] = 0;
new NeonON[MAX_VEHICLES] = 0;
new light[MAX_VEHICLES];
new obj[MAX_VEHICLES] = { INVALID_OBJECT_ID, ... };

enum UCCoords
{
	UCModelID,
	Float:UCX,
	Float:UCY,
	Float:UCZ,
};
//pdl vehicles
new Offsets[44][UCCoords] = {
	{402, 0.53515625, 0.562988281, 0.278743744},
	{407, 0.522338867, 2.5925293, 1.46867275},
	{408, 0.522338867, 2.5925293, 1.46867275},
	{409, 0.420776367, 1.80236816, 0.368680954},
	{415, 0.409729004, 0.526367188, 0.206963539},
	{416, 0.522338867, 2.0925293, 1.06867275},
	{420, -0.5, 0.2, 0.8},
	{421, -0.5, 0.2, 0.8},
	{422, 0.454345703, 0.575683594, 0.645122528},
	{424, -0.624511719, 0.139648438, 0.918135643},
	{426, -0.5, 0.2, 0.8},
	{433, -0.577392578, 1.23217773, 1.70311642},
	{440, 0.522338867, 2.5925293, 1.46867275},
	{457, -0.500000, -0.2, 0.81},
	{461, 0.00000000, -0.932861328, 0.494509697},
	{470, -0.617797851, 0.056640625, 1.10928631},
	{482, 0.493530273, 1.39465332, 0.442443848},
	{490, 0.563842773, 0.754882812, 0.487258911},
	{494, -0.500000, -0.2, 0.81},
	{503, -0.500000, -0.2, 0.81},
	{504, -0.500000, -0.2, 0.81},
	{505, 0.563842773, 0.754882812, 0.487258911},
	{506, 0.541137695, 0.282714844, 0.272130013},
	{521, 0.00000000, -0.928955078, 0.558652878},
	{522, 0.00000000, -0.932861328, 0.494509697},
	{524, 0.522338867, 2.0, 1.0},
	{525, -0.0089111328, 0.273193359, 1.4037838},
	{528, 0.563842773, 0.754882812, 0.487258911},
	{538, 0.522338867, 2.5925293, 1.46867275},
	{540, -0.5, 0.2, 0.8},
	{543, -0.5, 0.2, 0.8},
	{544, -0.5, 0.2, 0.8},
	{552, 0.454345703, 0.575683594, 0.645122528},
	{560, 0.398071289,0.75390625,0.43879509},
	{566, 0.406738281, 0.696777344, 0.398208618},
	{573, 0.522338867, 2.5925293, 1.46867275},
	{578, 0.522338867, 2.5925293, 1.46867275},
	{579, 0.454345703, 0.575683594, 0.645122528},
	{585, 0.53515625, 0.771728516, 0.373809814},
	{586, 0.00000000, -1.20178223, 0.671886444},
	{596, 0.53515625, 0.771728516, 0.373809814},
	{597, 0.53515625, 0.771728516, 0.373809814},
	{598, 0.406738281, 0.696777344, 0.398208618},
	{599, 0.563842773, 0.754882812, 0.487258911}
};


// Textdraw Global Variables
new Text:MainMenuTxtdraw[9];
new Text:NoticeTxtdraw[10];
new Text:TutTxtdraw[115];
new Text:WristWatch;
new Text:GPS[MAX_PLAYERS];
new Text:BFText;
new Text:PriorityReport[MAX_PLAYERS];
forward OnPlayerLoad(playerid);

new itemtype[][] = { "Nothing", "Cash", "Pot", "Crack", "Materials" };
new storagetype[][] = { "Pocket", "Bag", "Backpack", "Briefcase", "PSF" };

// Cash, Pot, Crack, Mats
//new onhandlimit[] = { 250000, 20, 15, 0 };
new const onhandlimit[] = { 2147483647, 50, 50, 2147483647 };
new bbackpacklimit[] = { 250000, 20, 15, 25000 };
new backpacklimit[] = { 500000, 200,  200, 75000 };
new briefcaselimit[] = { 500000, 100, 100, 50000 };

//new limits[][] = {{250000, 20, 15, 0}, {250000, 20, 15, 25000}, {500000, 200, 200, 75000}, {500000, 100, 100, 50000}};

new zombieevent;

new servernumber;
new textdrawscount;

new hour, minuite, second;

new InsidePlane[MAX_PLAYERS];
new InsideMainMenu[MAX_PLAYERS char];
new InsideTut[MAX_PLAYERS char];

//new File:dumpfile; // global variable for buffer overflow protection
new File:logfile; // global variable for buffer overflow protection

//Pickups
new totalpickups;

//Pickups
new Float:lastpickup[3];
new Float:exitpos[3];


new
	iRewardPlay,
	Text3D: tRewardText,
	iRewardObj,
	iRewardBox;

new DoubleXP;

// Editing Objects
//new EditingObject[MAX_PLAYERS] = INVALID_OBJECT_ID;


new FlyingGod[MAX_PLAYERS];
//new AwesomeAdmin[MAX_PLAYERS];
//new AwesomeAdminKeys[MAX_PLAYERS];
new GateEditMode[MAX_PLAYERS];
new GateEditMode2[MAX_PLAYERS];


// Trucker Job
new TruckDeliver[MAX_PLAYERS];
new TruckUsed[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new TruckContents[MAX_VEHICLES char] = 0;

new courtbuttons[5], courtgates[2];
new Float: VehicleFuel[MAX_VEHICLES] = 100.0;
new VehicleStatus[MAX_VEHICLES char] = 0; // 0 == none, 1 == vehicle dead about to respawn
new RefuelingVehicle[MAX_PLAYERS];
new RefuelingVehiclePrice[MAX_PLAYERS];
new RefuelingVehicleTimer[MAX_PLAYERS];
new Float: fVehSpeed[MAX_PLAYERS];
new Float: fVehHealth[MAX_PLAYERS];
new szAdvert[MAX_PLAYERS][128];

new tmpPVASQLID[MAX_PLAYERS];
new tmpPVAModelID[MAX_PLAYERS][MAX_PLAYERVEHICLES];
new Float:tmpPVAPos[MAX_PLAYERS][MAX_PLAYERVEHICLES][4];

// C4 vehicle bomb
new VehicleBomb[MAX_VEHICLES char] = 0;
new PlacedVehicleBomb[MAX_PLAYERS] = INVALID_VEHICLE_ID;

new audiourlurl[256];
new audiourlid;
new Float:audiourlparams[4];

/* SAAS */
new backlift;
new sidelift;
new backhatch;

new Carrier[17];
new CarrierS[6];
new NGLandVehicles[29];
new NGARMVehicles[3];
new NGAIRVehicles[4];
new CrateIslandVehicles[12];
new CrateLoad;
//new MAXCRATES;
new AdminWarning;
new PrizeClaim;

enum cVehicleLoad
{
	vCrateAmt,
	vCrateID[6],
	vForkLoaded,
	vForkObject,
}
new CrateVehicleLoad[MAX_VEHICLES][cVehicleLoad];

enum crateInfo
{
	crActive,
	crObject,
	Float: crX,
	Float: crY,
	Float: crZ,
	GunQuantity,
	InVehicle,
	Text3D: crLabel,
}

new CrateInfo[20][crateInfo];
//new NGVehicles[23];
new tanks[3];
new air[2];

new canmove;

new TextSpamTimes[MAX_PLAYERS];
new TextSpamUnmute[MAX_PLAYERS];
new CommandSpamTimes[MAX_PLAYERS];
new CommandSpamUnmute[MAX_PLAYERS];

new control[MAX_PLAYERS];
new controlspeed[MAX_PLAYERS];
new controldistance[MAX_PLAYERS];
new ControlTimer[MAX_PLAYERS];

new Rocket[MAX_PLAYERS];
new RocketLight[MAX_PLAYERS];
new RocketSmoke[MAX_PLAYERS];
new RocketExplosions[MAX_PLAYERS];

new turfWarsRadar[MAX_PLAYERS] = 0;
new turfWarsMiniMap[MAX_PLAYERS] = 0;
new stationidv[MAX_VEHICLES][64];
new SFPDGate;
new SFPDGStatus;
new nationalGATE;
new nationalGATE2;
new nationalStatus;
new COURTGate;
new COURTGStatus;
new courtjail[MAX_PLAYERS];

new	arrTolls[2][4];

new TotalLogin, TotalConnect, TotalAutoBan, TotalRegister,MaxPlayersConnected,MPDay,MPMonth,MPYear,PlayerCars,TotalUptime,TotalHouses,TotalGates;
new Float:StopaniFloats[MAX_PLAYERS][3];
new HHcheckUsed = 0;
new SGcheckUsed = 0;
new WeaponExplode = 22;
new ExplodeType = 7;
new LowerSpeed = 2;
new WeaponCar = 23;
new WeaponCarID = 400;
new Float:ExplodeRad = 1.0;
new Float:zGate = 1.0;
new Float:HHcheckFloats[MAX_PLAYERS][6];
new HHcheckInt[MAX_PLAYERS];
new HHcheckVW[MAX_PLAYERS];
new Float:SGcheckPos[MAX_PLAYERS][6];
new SGcheckInt[MAX_PLAYERS];
new SGcheckVW[MAX_PLAYERS];
new Float:EventFloats[MAX_PLAYERS][6]; // 0 = EventLastR 1 = EventLastX 2 = EventLastY 3 = EventLastZ 4 = EventLastH 5 = EventLastA
new RCPIdCurrent[MAX_PLAYERS];
new RaceTotalLaps;
new TotalJoinsRace;
new toglapcount;
new ConfigEventCPs[MAX_PLAYERS][3]; // 0 = Player is editing the cps 1 = cp config stage 2 = creating/editing checkpoint
new ConfigEventCPId[MAX_PLAYERS]; // the eventcp Id that player is editing
new Float:BroadcastFloats[MAX_PLAYERS][6];
new BroadcastLastVW[MAX_PLAYERS];
new BroadcastLastInt[MAX_PLAYERS];
new EventLastInt[MAX_PLAYERS]; new EventLastVW[MAX_PLAYERS];
new Gifts, VIPGifts = 0, VIPGiftsTimeLeft, VIPGiftsName[MAX_PLAYER_NAME];
new XMASGifts = 0;
new GiftAllowed;
new SpecTimer;
new WeatherCalling;
new gWeather;
new OrderAssignedTo[MAX_PLAYERS];
new eastin, eastout, lockerin, lockerout, cctvin, cctvout, elevator, roofkey, garagekey, chiefout, chiefin, westin, westout;
new eastlobby1, eastlobby2, westlobby1, westlobby2, cctv1, cctv2, locker1, locker2, chief1, chief2, sasdbtn1, sasdbtn2, sasdbtn3, sasdbtn4, sasdbtn5, sasd1A, sasd2A, sasd3A, sasd4A, sasd5A, sasd1B, sasd2B, sasd3B, sasd4B, sasd5B;
new SANewsStudio, SANewsStudioA, SANewsStudioB;
new SANewsPrivate, SANewsPrivateOPP, SANewsPrivateA, SANewsPrivateB;
new SANewsOffice, SANewsOfficeA, SANewsOfficeB;
new FBILobbyLeft, FBILobbyLeftBTN[2], FBILobbyRight, FBILobbyRightBTN[2], FBIPrivate[2], FBIPrivateBTN[2];


/* LA ELEVATOR STUFF - ORIGINALLY SCRIPTED BY SCOTT, PORTED CODE OVER FROM KYE ON 10/12/11 */

new Obj_Elevator, Obj_ElevatorDoors[2],
	Obj_FloorDoors[21][2];
new ElevatorState,
	ElevatorFloor;  // If Idle or Waiting, this is the current floor. If Moving, the floor it's moving to.
new ElevatorQueue[21],  	// Floors in queue.
	FloorRequestedBy[21];   // FloorRequestedBy[floor_id] = playerid; - Points out who requested which floor.
new ElevatorBoostTimer;     // Timer that makes the elevator move faster after players start surfing the object.
new Text3D:Label_Elevator, Text3D:Label_Floors[21];

new LAElevatorFloorData[2][21][24]; // Stores floor name and passwords

static Float:FloorZOffsets[21] =
{
    0.0,		// 0.0,
    8.5479,		// 8.5479,
    13.99945,   // 8.5479 + (5.45155 * 1.0),
    19.45100,   // 8.5479 + (5.45155 * 2.0),
    24.90255,   // 8.5479 + (5.45155 * 3.0),
    30.35410,   // 8.5479 + (5.45155 * 4.0),
    35.80565,   // 8.5479 + (5.45155 * 5.0),
    41.25720,   // 8.5479 + (5.45155 * 6.0),
    46.70875,   // 8.5479 + (5.45155 * 7.0),
    52.16030,   // 8.5479 + (5.45155 * 8.0),
    57.61185,   // 8.5479 + (5.45155 * 9.0),
    63.06340,   // 8.5479 + (5.45155 * 10.0),
    68.51495,   // 8.5479 + (5.45155 * 11.0),
    73.96650,   // 8.5479 + (5.45155 * 12.0),
    79.41805,   // 8.5479 + (5.45155 * 13.0),
    84.86960,   // 8.5479 + (5.45155 * 14.0),
    90.32115,   // 8.5479 + (5.45155 * 15.0),
    95.77270,   // 8.5479 + (5.45155 * 16.0),
    101.22425,  // 8.5479 + (5.45155 * 17.0),
    106.67580,	// 8.5479 + (5.45155 * 18.0),
    112.12735	// 8.5479 + (5.45155 * 19.0)
};

new gFerrisWheel;
new gFerrisCages[10];
new Float:gCurrentTargetYAngle = 0.0;
new gWheelTransAlternate = 0;
new Float:gFerrisOrigin[3] = {389.77, -2028.47, 22.0};

new Text3D:SANews3DText;
new gBug[MAX_PLAYERS char];
new gRadio[MAX_PLAYERS char];
new NOPTrigger[MAX_PLAYERS];
new pTazer[MAX_PLAYERS char];
//new pDMGCheck[MAX_PLAYERS char];
new pTazerReplace[MAX_PLAYERS char];
new TazerTimeout[MAX_PLAYERS];
new pCurrentWeapon[MAX_PLAYERS char];
new ReleasingMenu[MAX_PLAYERS];
new ListItemReleaseId[MAX_PLAYERS][50];
new ListItemRCPId[MAX_PLAYERS][20];
//new Barricade[MAX_BARRICADES];
new GiveKeysTo[MAX_PLAYERS];
new GiveWheelsTo[MAX_PLAYERS];
new GiveCarTo[MAX_PLAYERS];
new ListItemTrackId[MAX_PLAYERS][50];
new dynamicgift;
new Text3D:dynamicgift3DText;
new jungleloaded;
new jungleobjects[160];
new nextteam;
new AdvisorMessage;
new SANGate;
new SANGateStatus;
new FAM1Gate;
new FAM1GateStatus;
new TRIGate;
new TRIGateStatus;
new NGGate;
new NGGateStatus;
new LSPDGate;
new LSPDGate2;
new SFPDGate1;
new SFPDGate2;
new SFPDGate3;
new FBIGate1;
new FBIGate2;
new SASDGate1;
new SASDGate2;
new SASDGate3;
new NGGate1;
new NGCellStatus;
new LSPDGateStatus;
new LSPDGate2Status;
new SFPDGate1Status;
new SFPDGate2Status;
new SFPDGate3Status;
new FBIGate1Status;
new FBIGate2Status;
new SASDGate1Status;
new SASDGate2Status;
new SASDGate3Status;
new CustomProject1906;
new CustomProject1906Password[24];
new House380Password[24];
new House275Gate[3];
new House275Password[24];
new MaxAdminPassword[24];
new House63Gate;
new House63GateStatus = 0;
new House63Password[24];
new House310Password[24];
new House310GateStatus[4];
new House310Gate[4];
new MatsHolding[MAX_PLAYERS];
new MatDeliver[MAX_PLAYERS];
new MatDeliver2[MAX_PLAYERS];
new NewbieTimer[MAX_PLAYERS];
new CancelReportTimer[MAX_PLAYERS];
new AcceptedReportTimer[MAX_PLAYERS];
new HelperTimer[MAX_PLAYERS];
new HlKickTimer[MAX_PLAYERS];
new JustReported[MAX_PLAYERS];
new UsedWeed[MAX_PLAYERS];
new UsedCrack[MAX_PLAYERS];
new Backup[MAX_PLAYERS];
new VIPM = 1;
new CreatedCars[100] = INVALID_VEHICLE_ID;
new SGcar[MAX_PLAYERS] = INVALID_VEHICLE_ID;
new Tax= 0;
new TaxValue = 0;
new nonewbie = 0;
new Jackpot, TicketsSold, NextDrawing, LottoNumbers[MAX_PLAYERS][5], SpecLotto, LottoPrize[64];
new Float:Positions[14][3];
new InRing = 0;
new RoundStarted = 0;
new BoxDelay = 0;
new Boxer1 = INVALID_PLAYER_ID;
new Boxer2 = INVALID_PLAYER_ID;
new TBoxer = INVALID_PLAYER_ID;
new PlayerBoxing[MAX_PLAYERS];
new Medics = 0;
new Coastguard = 0;
new MedicCall = INVALID_PLAYER_ID;
new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];
new Mechanics = 0;
new Lawyers = 0;
new Advisors = 0;
new shutdown = 0;
new timeshift = 0;
new MechanicCall = INVALID_PLAYER_ID;
new HelpingNewbie[MAX_PLAYERS];
new MechanicCallTime[MAX_PLAYERS];
new TaxiDrivers = 0;
new TaxiCallTime[MAX_PLAYERS];
new TaxiAccepted[MAX_PLAYERS];
new EMSCallTime[MAX_PLAYERS];
new EMSAccepted[MAX_PLAYERS];
new BusDrivers = 0;
new BusCall = INVALID_PLAYER_ID;
new BusCallTime[MAX_PLAYERS];
new BusAccepted[MAX_PLAYERS];
new Text3D:Camera3D[MAX_PLAYERS];
new TransportDuty[MAX_PLAYERS];
new TransportValue[MAX_PLAYERS];
new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];
new TransportCost[MAX_PLAYERS];
new TransportDriver[MAX_PLAYERS];
new JobDuty[MAX_PLAYERS];
new RegistrationStep[MAX_PLAYERS];
new playerSeconds[MAX_PLAYERS];
new playerTabbed[MAX_PLAYERS];
new playerAFK[MAX_PLAYERS];
new playerLastTyped[MAX_PLAYERS];
new UsedFind[MAX_PLAYERS];
new Spectating[MAX_PLAYERS];
new DivorceOffer[MAX_PLAYERS];
new MarriageCeremoney[MAX_PLAYERS];
new ProposeOffer[MAX_PLAYERS];
new ProposedTo[MAX_PLAYERS];
new GotProposedBy[MAX_PLAYERS];
new MarryWitness[MAX_PLAYERS];
new MarryWitnessOffer[MAX_PLAYERS];
new TicketOffer[MAX_PLAYERS];
new TicketMoney[MAX_PLAYERS];
new PlayerStoned[MAX_PLAYERS];
new FishCount[MAX_PLAYERS];
new ActiveChatbox[MAX_PLAYERS];
new TutStep[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];
new PlayerDrunkTime[MAX_PLAYERS];
new FindTimePoints[MAX_PLAYERS];
new FindingPlayer[MAX_PLAYERS];
new FindTime[MAX_PLAYERS];
new CalledCops[MAX_PLAYERS];
new CopsCallTime[MAX_PLAYERS];
new CalledMedics[MAX_PLAYERS];
new MedicsCallTime[MAX_PLAYERS];
new BoxWaitTime[MAX_PLAYERS];
new BoxOffer[MAX_PLAYERS];
new GotHit[MAX_PLAYERS];
new GoChase[MAX_PLAYERS];
new GetChased[MAX_PLAYERS];
new OrderReady[MAX_PLAYERS];
new ConnectedToPC[MAX_PLAYERS];
new PlayerTied[MAX_PLAYERS];
new PlayerCuffed[MAX_PLAYERS];
new PlayerCuffedTime[MAX_PLAYERS];
new LiveOffer[MAX_PLAYERS];
new TalkingLive[MAX_PLAYERS];
new broadcasting = 0;
new cameraangle = 0;
new Text3D:camera;
new viewers = 0;
new WatchingTV[MAX_PLAYERS];
new SelectFChar[MAX_PLAYERS];
new SelectFCharID[MAX_PLAYERS];
new SelectFCharPlace[MAX_PLAYERS];
new ChosenSkin[MAX_PLAYERS];
new GettingJob[MAX_PLAYERS];
new GettingJob2[MAX_PLAYERS];
new GuardOffer[MAX_PLAYERS];
new GuardPrice[MAX_PLAYERS];
new DefendOffer[MAX_PLAYERS];
new DefendPrice[MAX_PLAYERS];
new ApprovedLawyer[MAX_PLAYERS];
new CallLawyer[MAX_PLAYERS];
new WantLawyer[MAX_PLAYERS];
new AppealOffer[MAX_PLAYERS];
new AppealOfferAccepted[MAX_PLAYERS];
new CurrentMoney[MAX_PLAYERS];
new CP[MAX_PLAYERS];
new Condom[MAX_PLAYERS];
new SexOffer[MAX_PLAYERS];
new SexPrice[MAX_PLAYERS];
new RepairOffer[MAX_PLAYERS];
new RepairPrice[MAX_PLAYERS];
new RefillOffer[MAX_PLAYERS];
new RefillPrice[MAX_PLAYERS];
new RepairCar[MAX_PLAYERS];
new GunOffer[MAX_PLAYERS];
new GunStorageID[MAX_PLAYERS];
new GunId[MAX_PLAYERS];
new GunMats[MAX_PLAYERS];
new CraftOffer[MAX_PLAYERS];
new CraftId[MAX_PLAYERS];
new CraftMats[MAX_PLAYERS];
new CraftName[MAX_PLAYERS][50];
new HitOffer[MAX_PLAYERS];
new HitToGet[MAX_PLAYERS];
new hInviteOffer[MAX_PLAYERS];
new hInviteHouse[MAX_PLAYERS];
new hInviteSlot[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS];
new InviteFaction[MAX_PLAYERS];
new InviteFamily[MAX_PLAYERS];
new MatsOffer[MAX_PLAYERS];
new MatsStorageID[MAX_PLAYERS];
new MatsPrice[MAX_PLAYERS];
new MatsAmount[MAX_PLAYERS];
new PotOffer[MAX_PLAYERS];
new PotStorageID[MAX_PLAYERS];
new PotPrice[MAX_PLAYERS];
new PotGram[MAX_PLAYERS];
new CrackOffer[MAX_PLAYERS];
new CrackStorageID[MAX_PLAYERS];
new CrackPrice[MAX_PLAYERS];
new CrackGram[MAX_PLAYERS];
new FireworkOffer[MAX_PLAYERS];
new FireworkPrice[MAX_PLAYERS];
new FireworkCount[MAX_PLAYERS];
new DrinkOffer[MAX_PLAYERS];
new VehicleOffer[MAX_PLAYERS];
new VehicleId[MAX_PLAYERS];
new VehiclePrice[MAX_PLAYERS];
new HouseOffer[MAX_PLAYERS];
new House[MAX_PLAYERS];
new HousePrice[MAX_PLAYERS];
new JailPrice[MAX_PLAYERS];
new OnDuty[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS char];
new gPlayerLogTries[MAX_PLAYERS];
new gLastCar[MAX_PLAYERS];
new gOoc[MAX_PLAYERS];
new gNews[MAX_PLAYERS];
new gNewbie[MAX_PLAYERS];
new gHelp[MAX_PLAYERS];
new gFam[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new DmgCheck[MAX_PLAYERS];
new DmgCheckID[MAX_PLAYERS];
new DmgCheckedPlayer[MAX_PLAYERS];
new DmgCheckedPlayerID[MAX_PLAYERS];
new BigEarFamily[MAX_PLAYERS];
new BigEarFaction[MAX_PLAYERS];
new BigEarPlayer[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new GettingSpectated[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];
new advisorchat[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new JetPack[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new VehicleSpawned[MAX_PLAYERS];
new ShotPlayer[MAX_PLAYERS][MAX_PLAYERS];
new LastShot[MAX_PLAYERS];
new OpenedFire[MAX_PLAYERS];
new unbanip[MAX_PLAYERS][16];
new TruckerVehicles[19];
//new PizzaVehicles[12];
new SFPDVehicles[40];
new PrisonVehicles[26];
new SASDVehicles[47];
new EPVehicles[4];
new WPVehicles[11];
new TierraVehicles[16];
new TierraARVehicles[20];
new TierraESVehicles[6];
new GovVehicles[13];
new OPGVehicles[17];
new ShaftVehicles[17];
new CheckPointGates[4];
new CheckPointGateStatus[4];
//new IslandGate;
//new IslandGateStatus;
new Locator[MAX_PLAYERS];
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new LockStatus[MAX_VEHICLES char];
new arr_Engine[MAX_VEHICLES char];
new arr_Towing[MAX_PLAYERS];

new
	g_arrQueryHandle[MAX_PLAYERS char];

new iAdverTimer;
new gBike[MAX_PLAYERS];
new gBikeRenting[MAX_PLAYERS];
new pointpinglimit = 800;
new noooc = 1;
new noreports = 0;
new GlobalMOTD[128];
new AdminMOTD[128];
new VIPMOTD[128];
new CAMOTD[128];
new pMOTD[256];
new Float:ShopTechPay;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new shifthour;
new EventTimerHandle;
new MPSVehicles[9];
new CoastGuardVehicles[6];
new LSPDVehicles[57];
new SAPAAirVehicles[2];
new SAPAVehicles[18];
new House275Vehicles[8];
new FBIVehicles[13];
new DOCVehicles[15];
new VIPVehicles[50];
new FDSAVehicles[40];
new TaxiVehicles[14];
new nooseenter[2];
new radarroom[2];
new intergate[3];
new bottomroom[2];
new ncontrolroom[2];
new ncontrolroomobjects[3];
new ncontrolroomopened;
new blastdoor[4];
new cage;
new entrancedoor;
new PrisonButtons[9];
new SFPDButton[14];
new SFPDObject[9];
new PrisonGates[4];
new CellDoors[16];
new CellGates[12];
new BlastDoors[18];
new BackEntrance;

// shouts start here =========================

new Float: shoutspeed = 0.5; // by default
new dragonBorns[512];
new myShout[MAX_PLAYERS];
new myCoolDown[MAX_PLAYERS];
new shoutEffect[MAX_PLAYERS][3];// 0 = disarm, 1 = fire damage, 2 = frost damage
new fireEffect[MAX_PLAYERS];
new frostEffect[MAX_PLAYERS];
new dragonBorn[MAX_PLAYERS];
new useCoolDown = 0;
new shoutNames[5][30] = {"Unrelenting Force", "Whirlwind Sprint", "Disarm", "Fire Breath", "Frost Breath"};
new shoutCool[5] = {18, 14, 16, 25, 25};

// shouts end here ======================

new CIV[] = {7,19,20,23,73,101,122};
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new Float:PlayerPos[MAX_PLAYERS][3];
new ngeveryone;
new lspddoor1;
new lspddoor2;
new Seatbelt[MAX_PLAYERS];
new Float:AmazingDeath[MAX_PLAYERS][3];
new AmazingDeathInt[MAX_PLAYERS];


//forward strfindex(const string[],const sub[],bool:ignorecase=false,pos=0);
stock strfindex(string[],sub[],bool:ignorecase=false,pos=0) {
	if(pos < 0 || pos >= 2147483647) {
		printf("[strfind] Out of search position boundaries - Pos %d - string %s - sub %s", pos, string, sub);
		return -1;
	}
	return strfind(string, sub, ignorecase, pos);
}

stock InvalidNameCheck(playerid) {

	new
		arrForbiddenNames[][] = {
			"com1", "com2", "com3", "com4",
			"com5", "com6", "com7", "com8",
			"com9", "lpt4", "lpt5", "lpt6",
			"lpt7", "lpt8", "lpt9", "nul",
			"clock$", "aux", "prn", "con",
			"InvalidNick"
	    };

	new i = 0;
	while(i < sizeof(arrForbiddenNames)) if(strcmp(arrForbiddenNames[i++], GetPlayerNameExt(playerid), true) == 0) {
		SetPlayerName(playerid, "InvalidNick");
		SendClientMessage(playerid, COLOR_RED, "You have been kicked & logged for using a forbidden username.");
		KickWithMessage(playerid);
		return 0;

	}
	return 1;
}

stock UpdateSANewsBroadcast()
{
    new string[42];
	if(broadcasting == 0)
	{
	    format(string, sizeof(string), "Currently: Not Broadcasting\nViewers: %d", viewers);
	}
	else
	{
	    format(string, sizeof(string), "Currently: LIVE\nViewers: %d", viewers);
	}
	UpdateDynamic3DTextLabelText(SANews3DText, COLOR_LIGHTBLUE, string);
}

stock RespawnNearbyVehicles(iPlayerID, Float: fRadius) {

	new
		Float: fPlayerPos[3];

    GetPlayerPos(iPlayerID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
    for(new i = 1; i < MAX_VEHICLES; i++) if(GetVehicleModel(i) && GetVehicleDistanceFromPoint(i, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]) <= fRadius && !IsVehicleOccupied(i)) SetVehicleToRespawn(i);
	return 1;
}

stock IsVehicleOccupied(iVehicleID, iSeatID = 0) {
	foreach(new x: Player) if(GetPlayerVehicleID(x) == iVehicleID && GetPlayerVehicleSeat(x) == iSeatID) {
		return 1;
	}
	return 0;
}

stock IsVehicleInTow(iVehicleID) {
	foreach(new x: Player) if(arr_Towing[x] == iVehicleID) {
		return 1;
	}
	return 0;
}

stock FindFreeAttachedObjectSlot(playerid)
{
	new index;
 	while (index < MAX_PLAYER_ATTACHED_OBJECTS && IsPlayerAttachedObjectSlotUsed(playerid, index))
	{
		index++;
	}
	if (index == MAX_PLAYER_ATTACHED_OBJECTS) return -1;
	return index;
}

#define MAX_SPIKES 				(20)
#define MAX_CONES 				(20)
#define MAX_BARRELS 			(20)
#define MAX_FLARES 				(20)


new TotalSpikes, TotalCones, TotalCades, TotalBarrels, TotalFlares;

enum Barricade
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new Barricades[MAX_BARRICADES][Barricade];

enum Barrel
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new Barrels[MAX_BARRELS][Barrel];


enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new SpikeStrips[MAX_SPIKES][Spikes];

enum Cone
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new Cones[MAX_CONES][Cone];

enum Flare
{
	Float:sX,
	Float:sY,
	Float:sZ,
	sObjectID,
	sDeployedBy[MAX_PLAYER_NAME],
	sDeployedAt[MAX_ZONE_NAME]
}

new Flares[MAX_FLARES][Flare];

enum reportinfo
{
	HasBeenUsed,
	Report[128],
	ReportFrom,
	CheckingReport,
 	TimeToExpire,
	BeingUsed,
	ReportExpireTimer,
	ReplyTimerr,
	ReportPriority,
	ReportLevel
}

new Reports[MAX_REPORTS][reportinfo];
new ListItemReportId[MAX_PLAYERS][40];
new CancelReport[MAX_PLAYERS];

Float:GetDistanceBetweenPlayers(iPlayerOne, iPlayerTwo)
{
	new
		Float: fPlayerPos[3];

	GetPlayerPos(iPlayerOne, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
	return GetPlayerDistanceFromPoint(iPlayerTwo, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
}

new Music[MAX_PLAYERS];
new Songs[7][1] = {
{1187},
{1185},
{1183},
{1097},
{1076},
{1068},
{1062}
};

new FishNames[22][20] = {
{"Jacket"}, {"Amberjack"}, {"Grouper"},
{"Red Snapper"}, {"Pants"}, {"Trout"},
{"Blue Marlin"}, {"Can"}, {"Mackeral"},
{"Sea Bass"}, {"Shoes"}, {"Pike"},
{"Sail Fish"}, {"Garbage"}, {"Tuna"},
{"Eel"}, {"Dolphin"}, {"Shark"},
{"Turtle"}, {"Catfish"}, {"Money Bag"},
{"Swordfish"}
};
new Float:DocPrison[12][3] = {
{-2081.1941,-188.6734,991.536},
{-2075.0042,-188.3738,991.5364},
{-2069.1348,-188.3445,991.5364},
{-2062.9697,-188.8881,991.5364},
{-2057.2039,-189.1190,991.5364},
{-2051.4260,-188.8504,991.5364},
{-2057.0588,-209.8594,991.5364},
{-2062.7124,-210.4578,991.5364},
{-2068.8271,-210.3926,991.5364},
{-2074.9646,-210.1767,991.5364},
{-2080.8003,-210.1505,991.5364},
{-2086.3982,-209.9947,991.5364}
};

/*new Float:ZombieSpawns[62][4] = {
	{2769.2925,-2089.1626,12.0251,83.2693},
	{2701.5674,-1834.3137,10.3125,100.1895},
	{2767.2363,-1566.2611,20.8337,85.2709},
	{2830.0146,-1359.4216,24.7349,121.7861},
	{2555.4099,-916.6085,94.3540,99.5157},
	{2508.6150,-278.0373,16.9119,80.0654},
	{2378.6587,294.4337,20.0692,199.4465},
	{2284.2292,1042.9535,10.8203,225.1401},
	{2323.7227,1283.2747,97.6038,187.7805},
	{2373.0986,1956.7019,6.0156,215.9083},
	{2550.4517,2321.3643,3.4831,351.0779},
	{2224.9348,2537.9519,11.0222,2.8163},
	{1633.2236,2072.5002,11.0626,211.0165},
	{1860.6730,1497.2793,8.0484,103.5422},
	{1633.2701,665.6920,10.8203,359.6830},
	{816.6675,856.7156,12.7891,294.5815},
	{193.1662,1373.4420,14.9219,178.7664},
	{-181.3267,1517.7977,35.6679,306.2709},
	{388.3340,2589.0615,16.4774,150.6387},
	{-782.2084,2491.9431,99.8088,32.5109},
	{-1157.4725,1955.2711,117.0372,173.1264},
	{-1678.2843,2436.9778,75.3277,38.3918},
	{-2139.4614,2650.9126,155.2020,92.9123},
	{-2885.4045,2552.2139,261.9760,257.0046},
	{-2712.4702,1266.0345,14.5275,232.0103},
	{-2777.3147,876.2353,55.6501,98.1666},
	{-2429.6699,642.0405,34.0675,124.8727},
	{-2134.6548,370.1073,35.1719,354.8381},
	{-2106.1765,136.8254,39.2737,68.1354},
	{-2332.6023,31.2750,35.3200,352.5979},
	{-2481.1897,-284.3549,35.5880,120.4393},
	{-2147.4797,-245.3284,36.5156,89.8048},
	{-1641.0974,-33.8037,3.8063,313.3118},
	{-1678.2706,-772.7601,61.3971,13.8349},
	{-1993.6145,-1543.2251,84.7795,178.9631},
	{-1850.9301,-1699.3285,40.8672,40.7818},
	{-1806.5605,-2245.7180,72.3877,272.3140},
	{-2672.7725,-2134.7742,37.7934,193.8606},
	{-947.5450,-2090.1013,113.4716,20.9950},
	{-823.4070,-1564.1321,128.0549,225.8936},
	{-495.8162,-442.9817,36.3038,319.8945},
	{-89.6936,-36.4489,6.4844,151.9229},
	{511.0306,-288.9214,23.0598,191.3307},
	{847.1105,-629.9376,27.6024,216.5427},
	{1094.4984,-672.8294,112.1078,154.9627},
	{604.7968,-1294.8607,15.8359,170.6295},
	{655.7311,-1610.1833,15.0000,70.2169},
	{837.6950,-1857.7500,8.3979,126.3041},
	{1223.1130,-1915.6439,30.8465,176.3420},
	{1412.7804,-1304.8748,9.5430,178.6078},
	{1115.8658,-1089.9353,25.8061,184.0796},
	{1292.1049,-1026.7606,33.8984,161.6877},
	{1473.4871,-1242.1685,15.0859,86.9687},
	{1851.8678,-1574.9648,13.6336,48.7417},
	{2036.7904,-1477.5708,14.2850,265.2336},
	{2445.4973,-1460.6742,24.0000,94.7786},
	{2397.3071,-1777.3590,13.5469,222.2598},
	{1917.5731,-1891.3939,15.0373,99.1420},
	{1499.7932,-2270.0461,13.5469,311.1747},
	{1127.8864,-2346.0579,13.3368,239.6616},
	{184.9726,-1767.2711,4.4174,220.0172},
	{-852.2209,-652.9780,123.5095,38.3781}
};*/

new Float:WarrantJail[3][3] = {
{2136.1924,1297.5011,7699.0610},
{2136.0273,1310.5793,7699.0547},
{2131.5989,1309.8353,7699.0547}
};

new Float:OOCPrisonSpawns[3][3] = {
{-304.4369,1894.9891,29.8929},
{-295.9042,1894.9121,29.8929},
{-287.1133,1894.6259,29.8929}
};

new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}
};

enum pBoxingStats
{
	TitelName[128],
	TitelWins,
	TitelLoses,
};
new Titel[pBoxingStats];

enum EventKernelEnum
{
	EventAdvisor,
	EventStatus,
	EventType,
	EventInfo[128],
	Float: EventHealth,
	Float: EventArmor,
	Float: EventPositionX,
	Float: EventPositionY,
	Float: EventPositionZ,
	EventInterior,
	EventWorld,
	EventWeapons[5],
	EventTeamColor[2],
    EventTeamSkin[2],
    EventLimit,
    EventTime,
	EventFootRace,
    EventPlayers,
    EventRequest,
    EventStartRequest,
    EventCreator,
    EventStaff[5],
    EventJoinStaff,
    VipOnly,
    Float: EventTeamPosX1,
    Float: EventTeamPosY1,
    Float: EventTeamPosZ1,
    Float: EventTeamPosX2,
    Float: EventTeamPosY2,
    Float: EventTeamPosZ2
}

new EventKernel[EventKernelEnum];

new EventRCPU[20]; // Value to know if rcp is being used
new Float:EventRCPX[20]; // Value for the x position of the RCP
new Float:EventRCPY[20]; // Value for the y position of the RCP
new Float:EventRCPZ[20]; // Value for the z position of the RCP
new Float:EventRCPS[20]; // RCP Size
new EventRCPT[20]; // RCP Type

enum PaintBallArenaEnum
{
	pbArenaName[64],
	pbOwner[MAX_PLAYER_NAME],
	pbPassword[64],
	pbActive,
	pbExploitPerm,
	pbFlagInstagib,
	pbFlagNoWeapons,
	pbTimeLeft,
	pbGameType,
	pbLocked,
	pbLimit,
	pbPlayers,
	pbTeamRedKills,
	pbTeamRedDeaths,
	pbTeamRedScores,
	pbTeamBlueKills,
	pbTeamBlueDeaths,
	pbTeamBlueScores,
	pbTeamRed,
	pbTeamBlue,
	Float:pbHillX,
	Float:pbHillY,
	Float:pbHillZ,
	Float:pbHillRadius,
	Text3D:pbHillTextID,
	pbWorldBonds[3],
	pbBidMoney,
	pbMoneyPool,
	pbWeapons[3],
	pbVirtual,
	pbInterior,
	pbFlagRedActive,
	pbFlagBlueActive,
	pbFlagRedActiveTime,
	pbFlagBlueActiveTime,
	Text3D:pbTeamRedTextID,
	Text3D:pbTeamBlueTextID,
	Text3D:pbFlagRedTextID,
	Text3D:pbFlagBlueTextID,
	pbFlagRedID,
	pbFlagBlueID,
	Float: pbHealth,
	Float: pbArmor,
	Float: pbFlagRedSpawn[3],
	Float: pbFlagBlueSpawn[3],
	Float: pbFlagRedPos[3],
	Float: pbFlagBluePos[3],
	Float: pbDeathmatch1[4],
	Float: pbDeathmatch2[4],
	Float: pbDeathmatch3[4],
	Float: pbDeathmatch4[4],
	Float: pbTeamRed1[4],
	Float: pbTeamRed2[4],
	Float: pbTeamRed3[4],
	Float: pbTeamBlue1[4],
	Float: pbTeamBlue2[4],
	Float: pbTeamBlue3[4],
};
new PaintBallArena[MAX_ARENAS][PaintBallArenaEnum];

enum TurfWarsEnum
{
	twName[64],
	twOwnerId,
	twLocked,
	twSpecial,
	twVulnerable,
	twAttemptId,
	twTimeLeft,
	twGangZoneId,
	twAreaId,
	twActive,
	twFlash,
	twFlashColor,
	Float: twMinX,
	Float: twMinY,
	Float: twMaxX,
	Float: twMaxY,
};
new TurfWars[MAX_TURFS][TurfWarsEnum];

enum fInfo
{
	FamilyTaken,
	FamilyName[42],
	FamilyMOTD[65],
	FamilyColor,
	FamilyTurfTokens,
	FamilyLeader[MAX_PLAYER_NAME],
	FamilyMembers,
	Float:FamilySpawn[4],
	FamilyInterior,
	FamilyCash,
	FamilyBank,
	FamilyMats,
	FamilyPot,
	FamilyCrack,
	Float:FamilySafe[3],
	FamilyUSafe,
	FamilyRank1[20],
	FamilyRank2[20],
	FamilyRank3[20],
	FamilyRank4[20],
	FamilyRank5[20],
	FamilyRank6[20],
	FamilyPickup,
	FamilyMaxSkins,
	FamilySkins[8],
	Float: FamilyEntrance[4],
	Float: FamilyExit[4],
	FamilyEntrancePickup,
	FamilyExitPickup,
	Text3D:FamilyEntranceText,
	Text3D:FamilyExitText,
	FamilyCustomMap,
	FamilyVirtualWorld,
	FamilyResetSpawns,
	FamilyGuns[10],
};
new FamilyInfo[MAX_FAMILY][fInfo];

new FactionPay[18][7];

enum fvInfo
{
    fvId,
	fvModelId,
	Float: fvSpawnx,
	Float: fvSpawny,
	Float: fvSpawnz,
	Float: fvSpawna,
	Float: fvSpawnxtmp,
	Float: fvSpawnytmp,
	Float: fvSpawnztmp,
	Float: fvSpawnatmp,
	fvLock,
	fvLocked,
	fvPaintJob,
	fvColor1,
	fvColor2,
	fvMods[MAX_MODS],
	fvPrice,
	fvImpounded,
	//fvSpawned,
	Float:fvFuel
};

new FamilyVehicleInfo[MAX_FAMILY][MAX_GANG_VEHICLES][fvInfo];

enum fPoint
{
	Float:Pointx,
	Float:Pointy,
	Float:Pointz,
	Type,
	Vulnerable,
	MatPoint,
	CratePoint,
	Announced,
	ClaimerId,
	ClaimerTeam,
	TimeToClaim,
	TimeLeft,
	Owner[32],
	PlayerNameCapping[MAX_PLAYER_NAME],
	CapperName[MAX_PLAYER_NAME],
	Name[32],
	TakeOverTimerStarted,
	TakeOverTimer,
	Text3D:TextLabel,
	CaptureTimerEx2,
	Stock,
	Text3D:CaptureProccess,
	Text3D:CaptureProgress,
	CaptureProccessEx,
	Float: Capturex,
	Float: Capturey,
	Float: Capturez,
	PointPickupID
}

new Points[MAX_POINTS][fPoint];

enum pFishing
{
	pFish1[20],
	pFish2[20],
	pFish3[20],
	pFish4[20],
	pFish5[20],
	pWeight1,
	pWeight2,
	pWeight3,
	pWeight4,
	pWeight5,
	pFid1,
	pFid2,
	pFid3,
	pFid4,
	pFid5,
	pLastFish,
	pFishID,
	pLastWeight,
};
new Fishes[MAX_PLAYERS][pFishing];

enum hNews
{
	hTaken1,
	hTaken2,
	hTaken3,
	hTaken4,
	hTaken5,
	hTaken6,
	hTaken7,
	hTaken8,
	hTaken9,
	hTaken10,
	hTaken11,
	hTaken12,
	hTaken13,
	hTaken14,
	hTaken15,
	hTaken16,
	hTaken17,
	hTaken18,
	hTaken19,
	hTaken20,
	hTaken21,
	hAdd1[64],
	hAdd2[64],
	hAdd3[64],
	hAdd4[64],
	hAdd5[64],
	hAdd6[64],
	hAdd7[64],
	hAdd8[64],
	hAdd9[64],
	hAdd10[64],
	hAdd11[64],
	hAdd12[64],
	hAdd13[64],
	hAdd14[64],
	hAdd15[64],
	hAdd16[64],
	hAdd17[64],
	hAdd18[64],
	hAdd19[64],
	hAdd20[64],
	hAdd21[64],
	hContact1[64],
	hContact2[64],
	hContact3[64],
	hContact4[64],
	hContact5[64],
	hContact6[64],
	hContact7[64],
	hContact8[64],
	hContact9[64],
	hContact10[64],
	hContact11[64],
	hContact12[64],
	hContact13[64],
	hContact14[64],
	hContact15[64],
	hContact16[64],
	hContact17[64],
	hContact18[64],
	hContact19[64],
	hContact20[64],
	hContact21[64],
};
new News[hNews];

enum sInfo
{
	sStorage,
	sAttached,
	sCash,
	sPot,
	sCrack,
	sMats,
	sHouseID,
	sVehicleSlot
};
new StorageInfo[MAX_PLAYERS][3][sInfo];

enum pInfo
{
	pId,
	pOnline,
	pLevel,
	pAdmin,
	pDonateRank,
	pVBiz,
	pBiz,
	gPupgrade,
	pConnectHours,
	pReg,
	pSex,
	pAge,
	pOrigin,
	pCash,
	pHospital,
	pMuted,
	pPrisonReason[128],
	pPrisonedBy[MAX_PLAYER_NAME],
	pFlag[128],
	pRMuted,
	pRMutedTotal,
	pRMutedTime,
	pDMRMuted,
	pVMuted,
	pVMutedTime,
	pFactionModerator,
	pGangModerator,
	pExp,
	pAccount,
	pCrimes,
	pPaintTeam,
	pKills,
	pDeaths,
	pArrested,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pJob,
	pAutoTextReply[64],
	pPhonePrivacy,
	pJob2,
	pNMute,
	pNMuteTotal,
	pADMute,
	pADMuteTotal,
	pHelpMute,
	pPayCheck,
	pHeadValue,
	pJailTime,
	pWRestricted,
	pMats,
	pLeader,
	pMember,
	pDivision,
	pFMember,
	pSpeakerPhone,
	pRank,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pTruckSkill,
	pWantedLevel,
	pPot,
	pCrack,
	pHelper,
	pDrugsSkill,
	pArmsSkill,
	pSmugSkill,
	pFishSkill,
	Float:pHealth,
	Float:pArmor,
	Float:pSHealth,
	pInt,
	pModel,
	pPnumber,
	pPhousekey,
	pPhousekey2,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	Float:pPos_r,
	pCarLic,
	pSpeedo,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pGuns[12],
	pAGuns[12],
	pConnectSeconds,
	pPayDayHad,
	pCDPlayer,
	pWins,
	pLoses,
	pTut,
	pWarns,
	pMarried,
	pC4,
	pC4Get,
	pC4Used,
	pMarriedTo[MAX_PLAYER_NAME],
	pLock,
	pLockCar,
	pSprunk,
	pCigar,
	pPole,
	pSpraycan,
	pRope,
	pDice,
	pBombs,
	pDuty,
	pFightStyle,
	pIP[16],
	pSecureIP[16],
	pBanned,
	pPermaBanned,
	pDisabled,
	pAccent,
	pCHits,
	pFHits,
	pCrates,
	pVW,
	pRenting,
	pTempVIP,
	pBuddyInvited,
	pVIPInviteDay,
	pTokens,
	pPaintTokens,
	pDrugsTime,
	pLawyerTime,
	pGangWarn,
	pFactionBanned,
	pCSFBanned,
	pMechTime,
	pSexTime,
	pLawyerFreeTime,
	pGiftTime,
	pContractBy[32],
	pContractDetail[64],
	pBanAppealer,
 	pShopTech,
    pUndercover,
	pPR,
	pTogReports,
	pRadio,
	pRadioFreq,
	pDutyHours,
	pAcceptedHelp,
	pAcceptReport,
	pShopTechOrders,
	pTrashReport,
	pInsurance,
	pTriageTime,
	pVehicleKeys,
	pVehicleKeysFrom,
	pTaxiLicense,
	pTicketTime,
	pScrewdriver,
	pSmslog,
	pSmslog0[128],
	pSmslog1[128],
	pSmslog2[128],
	pSmslog3[128],
	pSmslog4[128],
	pSmslog5[128],
	pSmslog6[128],
	pSmslog7[128],
	pSmslog8[128],
	pSmslog9[128],
	pKillLog0[128],
	pKillLog1[128],
	pKillLog2[128],
	pKillLog3[128],
	pKillLog4[128],
	pKillLog5[128],
	pKillLog6[128],
	pKillLog7[128],
	pKillLog8[128],
	pKillLog9[128],
	pWristwatch,
	pSurveillance,
	pTire,
	pFirstaid,
	pRccam,
	pReceiver,
	pGPS,
	pSweep,
	pSweepLeft,
	pBugged,
	pCheckCash,
	pChecks,
	pWeedObject,
	Float: pWeedPos[3],
	pWeedVW,
	pWeedInt,
	pWeedGrowth,
	pWSeeds,
	pWarrant[128],
	pJudgeJailTime,
	pJudgeJailType,
	pBeingSentenced,
	pProbationTime,
	pDMKills,
	pOrder,
	pOrderConfirmed,
	pCallsAccepted,
	pPatientsDelivered,
	pLiveBanned,
	pFreezeBank,
	pFreezeHouse,
	pFreezeCar,
	pServiceTime,
	pFirework,
	pBoombox,
	pHydration,
	pRacePlayerLaps,
	pDoubleEXP,
	pEXPToken,
	pRingtone,
	pVIPM,
	pVIPMO,
	pVIPExpire,
	pGVip,
	pSMod,
	pWatchdog,
	pPSFPot,
	pPSFCrack,
	pPSFMats,
	pVIPSold,
	pGoldBoxTokens,
	Float: pRewardHours,
	pRewardDrawChance,
	pRVehRestricted,
	pRVehWarns,
	pLastRVehWarn,
	pFlagged,
	pPaper,
	pMailEnabled,
	pMailbox,
	pUnreadMails,
	pReceivedSpeedTicket,
	pAdminDuty,
	pCode[128],
	pMainOwner,
	pInfractions,
};
new PlayerInfo[MAX_PLAYERS][pInfo];

enum pvInfo
{
    Float:pvPosX,
	Float:pvPosY,
	Float:pvPosZ,
 	Float:pvPosAngle,
	pvId,
	pvModelId,
	pvLock,
	pvLocked,
	pvPaintJob,
	pvColor1,
	pvColor2,
	pvMods[MAX_MODS],
	pvAllowedPlayerId,
	pvPark,
	//pvNumberPlate[32], // sz
	pvPrice,
	pvTicket,
	pvWeapons[3],
	pvWepUpgrade,
	pvImpounded,
	pvSpawned,
	pvDisabled,
	pvPlate[32],
	pvRestricted,
	Float: pvFuel,
	Float: pvHealth,
};
new PlayerVehicleInfo[MAX_PLAYERS][MAX_PLAYERVEHICLES][pvInfo];

enum ptInfo
{
    ptModelID,
	ptBone,
    Float:ptPosX,
	Float:ptPosY,
	Float:ptPosZ,
	Float:ptRotX,
	Float:ptRotY,
	Float:ptRotZ,
	Float:ptScaleX,
	Float:ptScaleY,
	Float:ptScaleZ,
};
new PlayerToyInfo[MAX_PLAYERS][MAX_PLAYERTOYS][ptInfo];

enum cdInfo
{
	cdOwned,
	cdOwner[MAX_PLAYER_NAME],
	Float: cdEntranceX,
	Float: cdEntranceY,
	Float: cdEntranceZ,
	Float: cdExitX,
	Float: cdExitY,
	Float: cdExitZ,
	cdMessage[128],
	cdTill,
	cdInterior,
	Float: cdRadius,
	cdPrice,
	cdPickupID,
	Text3D:cdTextLabel,
	Text3D:cdVehicleLabel[MAX_DEALERSHIPVEHICLES],
	cdVehicleModel[MAX_DEALERSHIPVEHICLES],
	cdVehicleCost[MAX_DEALERSHIPVEHICLES],
	cdVehicleId[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnX[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnY[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnZ[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawnAngle[MAX_DEALERSHIPVEHICLES],
	Float: cdVehicleSpawn[4],
};
new CarDealershipInfo[MAX_CARDEALERSHIPS][cdInfo];

enum hInfo
{
	hSQLId,
	hOwned,
	hLevel,
	hHInteriorWorld,
	hCustomInterior,
	hDescription[16],
	hOwner[ MAX_PLAYER_NAME ],
	Float: hExteriorX,
	Float: hExteriorY,
	Float: hExteriorZ,
	Float: hExteriorR,
	Float: hExteriorA,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	Float: hInteriorR,
	Float: hInteriorA,
	hLock,
	hRentable,
	hRentFee,
	hValue,
	hSafeMoney,
	hPot,
	hCrack,
	hMaterials,
	hWeapons[ 5 ],
	hGLUpgrade,
	hPickupID,
	Text3D: hTextID,
	hCustomExterior
};
new HouseInfo[MAX_HOUSES][hInfo];

enum bizInfo
{
	bType,
	bStatus,
	bOwner[32],
	Float:bX,
	Float:bY,
	Float:bZ,
	Float:bA,
	Float: bInteriorX,
	Float: bInteriorY,
	Float: bInteriorZ,
	Float: bInteriorA,
	bPickup,
	bMoney,
	bProducts,
	Text3D:bText,
	bSold,
	bLevel,
	bPrice,
	bAP
}
new BizInfo[MAX_BIZ][bizInfo];

stock RBT(bizid)
{
	new string[24];
	if(!BizInfo[bizid][bType]) format(string, sizeof(string), "None");
    else if(BizInfo[bizid][bType] == 1) format(string, sizeof(string), "24/7 Market");
    else if(BizInfo[bizid][bType] == 2) format(string, sizeof(string), "Clothes Shop");
    else if(BizInfo[bizid][bType] == 3) format(string, sizeof(string), "Ammunation");
    else if(BizInfo[bizid][bType] == 4) format(string, sizeof(string), "Well Stacked Pizza");
    else if(BizInfo[bizid][bType] == 5) format(string, sizeof(string), "Gas Station");
    else if(BizInfo[bizid][bType] == 6) format(string, sizeof(string), "Burger Shot");
    else if(BizInfo[bizid][bType] == 7) format(string, sizeof(string), "Sex Shop");
	return string;
}

stock RBS(bizid)
{
	new string[16];
	if(!BizInfo[bizid][bStatus]) format(string, sizeof(string), "{FF0000}Closed");
    else if(BizInfo[bizid][bStatus]) format(string, sizeof(string), "{00FF00}Open");
	return string;
}

stock RPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pBiz]][bProducts]);
	return string;
}

stock RPVIPBP(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[PlayerInfo[playerid][pVBiz]][bProducts]);
	return string;
}

stock RPPNO(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pCellphone]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pCellphone]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pCellphone]);
	return string;
}

stock RPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "$%d", BizInfo[PlayerInfo[playerid][pBiz]][bMoney]);
	return string;
}
stock RPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pBiz]);
	return string;
}

stock RPBS(playerid)
{
	new idx = PlayerInfo[playerid][pBiz];
	return BizInfo[idx][bSold];
}

stock RPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pBiz];
	if(!PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}

// VIP
stock RPVIPBM(playerid)
{
	new string[32];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "$%d", BizInfo[PlayerInfo[playerid][pVBiz]][bMoney]);
	return string;
}
stock RPVIPBK(playerid)
{
	new string[8];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "0");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", PlayerInfo[playerid][pVBiz]);
	return string;
}

stock RPVIPBS(playerid)
{
	new idx = PlayerInfo[playerid][pVBiz];
	return BizInfo[idx][bSold];
}

stock RPVIPBL(playerid)
{
	new string[32], idx = PlayerInfo[playerid][pVBiz];
	if(!PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "None");
	else if(PlayerInfo[playerid][pVBiz]) format(string, sizeof(string), "%d", BizInfo[idx][bLevel]);
	return string;
}

stock PlayerInfoU(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock GiveZaiatMoney(playerid, amount)
{
	new string[128];
	if(amount < 0) format(string, sizeof(string), "~r~-$%d", amount*-1);
	else if(amount > 0) format(string, sizeof(string), "~g~+$%d", amount);
	GameTextForPlayer(playerid, string, 3000, 1);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	PlayerInfo[playerid][pCash] += amount;
	return 1;
}

enum dmpInfo
{
	dmpSQLId,
	dmpMapIconID,
	Float: dmpPosX,
	Float: dmpPosY,
	Float: dmpPosZ,
	dmpMarkerType,
	dmpColor,
	dmpVW,
	dmpInt,
}
new DMPInfo[MAX_DMAPICONS][dmpInfo];

enum ddInfo
{
	ddSQLId,
	ddDescription[128],
	ddPickupID,
	Text3D: ddTextID,
	ddCustomInterior,
	ddExteriorVW,
	ddExteriorInt,
	ddInteriorVW,
	ddInteriorInt,
	Float: ddExteriorX,
	Float: ddExteriorY,
	Float: ddExteriorZ,
	Float: ddExteriorA,
	Float: ddInteriorX,
	Float: ddInteriorY,
	Float: ddInteriorZ,
	Float: ddInteriorA,
	ddCustomExterior,
	ddVIP,
	ddFamily,
	ddFaction,
	ddAdmin,
	ddWanted,
	ddVehicleAble,
	ddColor,
	ddPickupModel,
	dPass[24],
	dLocked,
};
new DDoorsInfo[MAX_DDOORS][ddInfo];

enum dtInfo
{
	dtSQLId,
	dtDescription[128],
	dtPickupID,
	Text3D: dtTextID,
	dtExteriorVW,
	dtExteriorInt,
	Float: dtExteriorX,
	Float: dtExteriorY,
	Float: dtExteriorZ,
	dtColor,
	dtModel,
};
new DTextInfo[MAX_TEXT][dtInfo];

enum gInfo
{
    gGATE,
    gHID,
	Float: gSpeed,
	gRange,
	gModel,
	gVW,
	gInt,
	Float:gPosX,
	Float:gPosY,
	Float:gPosZ,
	Float:gRotX,
	Float:gRotY,
	Float:gRotZ,
	Float:gPosXM,
	Float:gPosYM,
	Float:gPosZM,
	Float:gRotXM,
	Float:gRotYM,
    Float:gRotZM,
    gStatus,
    gPass[24],
    gRenderHQ,
};
new GateInfo[MAX_GATES][gInfo];

enum ePoints
{
	epObjectID,
	Text3D: epText3dID,
	Float:epPosX,
	Float:epPosY,
	Float:epPosZ,
	epVW,
	epInt,
	epPrize[64],
	epFlagable,
};
new EventPoints[MAX_EVENTPOINTS][ePoints];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};
new PlayerCrime[MAX_PLAYERS][pCrime];

static const VehicleName[212][] = {
	"Landstalker","Bravura","Buffalo","Linerunner","Perennial","Sentinel","Dumper","Firetruck","Trashmaster","Stretch",
	"Manana","Infernus","Voodoo","Pony","Mule","Cheetah","Ambulance","Leviathan","Moonbeam","Esperanto","Taxi",
	"Washington","Bobcat","Mr Whoopee","BF Injection","Hunter","Premier","Enforcer","Securicar","Banshee","Predator",
	"Bus","Rhino","Barracks","Hotknife","Trailer","Previon","Coach","Cabbie","Stallion","Rumpo","RC Bandit", "Romero",
	"Packer","Monster","Admiral","Squalo","Seasparrow","Pizzaboy","Tram","Trailer","Turismo","Speeder","Reefer","Tropic","Flatbed",
	"Yankee","Caddy","Solair","Berkley's RC Van","Skimmer","PCJ-600","Faggio","Freeway","RC Baron","RC Raider",
	"Glendale","Oceanic","Sanchez","Sparrow","Patriot","Quad","Coastguard","Dinghy","Hermes","Sabre","Rustler",
	"ZR-350","Walton","Regina","Comet","BMX","Burrito","Camper","Marquis","Baggage","Dozer","Maverick","News Chopper",
	"Rancher","FBI Rancher","Virgo","Greenwood","Jetmax","Hotring Racer","Sandking","Blista Compact","Police Maverick",
	"Boxville","Benson","Mesa","RC Goblin","Hotring Racer A","Hotring Racer B","Bloodring Banger","Rancher","Super GT",
	"Elegant","Journey","Bike","Mountain Bike","Beagle","Cropduster","Stuntplane","Tanker","Road Train","Nebula","Majestic",
	"Buccaneer","Shamal","Hydra","FCR-900","NRG-500","HPV-1000","Cement Truck","Tow Truck","Fortune","Cadrona","FBI Truck",
	"Willard","Forklift","Tractor","Combine","Feltzer","Remington","Slamvan","Blade","Freight","Streak","Vortex","Vincent",
	"Bullet","Clover","Sadler","Firetruck","Hustler","Intruder","Primo","Cargobob","Tampa","Sunrise","Merit","Utility",
	"Nevada","Yosemite","Windsor","Monster A","Monster B","Uranus","Jester","Sultan","Stratum","Elegy","Raindance","RC Tiger",
	"Flash","Tahoma","Savanna","Bandito","Freight","Trailer","Kart","Mower","Duneride","Sweeper","Broadway",
	"Tornado","AT-400","DFT-30","Huntley","Stafford","BF-400","Newsvan","Tug","Trailer","Emperor","Wayfarer",
	"Euros","Hotdog","Club","Trailer","Trailer","Andromada","Dodo","RCCam","Launch","Police Car (LSPD)","Police Car (SFPD)",
	"Police Car (LVPD)","Police Ranger","Picador","S.W.A.T. Van","Alpha","Phoenix","Glendale","Sadler","Luggage Trailer A",
	"Luggage Trailer B","Stair Trailer","Boxville","Farm Plow","Utility Trailer"
};

#if defined SHOPAUTOMATED
enum VehicleNameShopEnum
{
	svehicleid,
	svehiclename[24]
}

static const VehicleNameShop[167][VehicleNameShopEnum] = {
	{400, "Landstalker"}, {401, "Bravura"}, {402, "Buffalo"}, {403, "Linerunner"}, {404, "Perennial"}, {405, "Sentinel"}, {409, "Stretch"},
	{410, "Manana"}, {411, "Infernus"}, {412, "Voodoo"}, {413, "Pony"}, {414, "Mule"}, {415, "Cheetah"}, {417, "Leviathan"}, {418, "Moonbeam"},
	{419, "Esperanto"}, {420, "Taxi"}, {421, "Washington"}, {422, "Bobcat"}, {423, "Mr Whoopee"}, {424, "BF Injection"}, {426, "Premier"},
	{428, "Securicar"}, {429, "Banshee"}, {431, "Bus"}, {434, "Hotknife"}, {435, "Trailer"}, {436, "Previon"}, {437, "Coach"}, {438, "Cabbie"},
	{439, "Stallion"}, {440, "Rumpo"}, {442, "Romero"}, {443, "Packer"}, {444, "Monster"}, {445, "Admiral"}, {446, "Squalo"},
	{448, "Pizzaboy"}, {450, "Trailer"}, {451, "Turismo"}, {452, "Speeder"}, {453, "Reefer"}, {454, "Tropic"}, {455, "Flatbed"}, {456, "Yankee"},
	{457, "Caddy"}, {458, "Solair"}, {459, "Berkley's RC Van"}, {460, "Skimmer"}, {461, "PCJ-600"}, {462, "Faggio"}, {463, "Freeway"},
	{466, "Glendale"}, {467, "Oceanic"}, {468, "Sanchez"}, {469, "Sparrow"}, {470, "Patriot"}, {471, "Quad"}, {472, "Coastguard"},
	{473, "Dinghy"}, {474, "Hermes"}, {475, "Sabre"}, {477, "ZR-350"}, {478, "Walton"}, {479, "Regina"}, {480, "Comet"}, {481, "BMX"}, {482, "Burrito"},
	{483, "Camper"}, {484, "Marquis"}, {485, "Baggage"}, {487, "Maverick"}, {489, "Rancher"}, {491, "Virgo"}, {492, "Greenwood"}, {493, "Jetmax"},
	{494, "Hotring Racer"}, {495, "Sandking"}, {496, "Blista Compact"}, {498, "Boxville"}, {499, "Benson"}, {500, "Mesa"}, {502, "Hotring Racer A"},
	{503, "Hotring Racer B"}, {504, "Bloodring Banger"}, {505, "Rancher"}, {506, "Super GT"}, {507, "Elegant"}, {508, "Journey"}, {509, "Bike"},
	{510, "Mountain Bike"}, {511, "Beagle"}, {512, "Cropduster"}, {513, "Stuntplane"}, {514, "Tanker"}, {515, "Road Train"}, {516, "Nebula"},
	{517, "Majestic"}, {518, "Buccaneer"}, {519, "Shamal"}, {521, "FCR-900"}, {522, "NRG-500"}, {526, "Fortune"}, {527, "Cadrona"}, {529, "Willard"},
	{530, "Forklift"}, {531, "Tractor"}, {533, "Feltzer"}, {534, "Remington"}, {535, "Slamvan"}, {536, "Blade"}, {539, "Vortex"}, {540, "Vincent"},
	{541, "Bullet"}, {542, "Clover"}, {543, "Sadler"}, {545, "Hustler"}, {546, "Intruder"}, {547, "Primo"}, {549, "Tampa"}, {550, "Sunrise"},
	{551, "Merit"}, {553, "Nevada"}, {554, "Yosemite"}, {555, "Windsor"}, {556, "Monster A"}, {557, "Monster B"}, {558, "Uranus"}, {559, "Jester"},
	{560, "Sultan"}, {561, "Stratum"}, {562, "Elegy"}, {565, "Flash"}, {566, "Tahoma"}, {567, "Savanna"}, {568, "Bandito"}, {571, "Kart"}, {572, "Mower"},
	{573, "Duneride"}, {574, "Sweeper"}, {575, "Broadway"}, {576, "Tornado"}, {578, "DFT-30"}, {579, "Huntley"}, {580, "Stafford"}, {581, "BF-400"},
	{582, "Newsvan"}, {583, "Tug"}, {584, "Trailer"}, {585, "Emperor"}, {586, "Wayfarer"}, {587, "Euros"}, {588, "Hotdog"}, {589, "Club"}, {591, "Trailer"},
	{592, "Andromada"}, {593, "Dodo"}, {595, "Launch"}, {600, "Picador"}, {602, "Alpha"}, {603, "Phoenix"}, {604, "Glendale"}, {605, "Sadler"},
	{606, "Luggage Trailer A"}, {607, "Luggage Trailer B"}, {608, "Stair Trailer"}, {609, "Boxville"}
};
#endif

enum HoldingEnumAll
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}


new HoldingObjectsShop[][HoldingEnumAll] = {
{18647,0,	"RedNeonTube1"},
{18648,0,	"BlueNeonTube1"},
{18649,0,	"GreenNeonTube1"},
{18650,0,	"YellowNeonTube1"},
{18651,0,	"PinkNeonTube1"},
{18652,0,	"WhiteNeonTube1"},
{365,0, 	"Spray Can"},
{373,0, 	"Armour model"},
{371,0, 	"Parachute"},
{1486,0,	"Beer Bottle"},
{1575,0, 	"white sack of cocaine"},
{1212,0, 	"money packet"},
{348, 0, 	"deagle toy"},
{349, 0, 	"shotgun toy"},
{352, 0, 	"uzi toy"},
{353, 0, 	"mp5 toy"},
{343, 0, 	"teargas grenade"},
{326, 0, 	"cane"},
{325, 0, 	"flowers"},
{355, 0, 	"AK47 toy"},
{371, 0, 	"parachute bag"},
{1484, 0, 	"beer bottle"},
{3028, 0, 	"sword"},
{1279, 0, 	"drug bundle"},
{19348, 0, 	"cane"},
{19349, 0, 	"monocle"},
{19350, 0, 	"moustache1"},
{19469, 0, 	"scarf"},
{19472, 0, 	"gasmask"},
{19352, 0, 	"Top hat 01"},
{19487,0, 	"tophat02"},
{351,0, "Combat Shotgun"},
{335,0, "Combat Knife"},
{356,0, "M4 Assault Rifle"},
{373,0, "Armour Model"},
{1550,0,"sack of money"},
{1212,0,"money packet"}
};

new HoldingObjectsCop[13][HoldingEnumAll] = {
{18642,1000,"Taser1"},
{19141,2500,"SWATHelmet1"},
{19142,2500,"SWATArmour1"},
{18636,1000,"PoliceCap1"},
{19099,1000,"PoliceCap2"},
{19100,1000,"PoliceCap3"},
{18637,1000,"PoliceShield1"},
{19161,1000,"PoliceHat1"},
{19162,1000,"PoliceHat2"},
{19200,1000,"PoliceHelmet1"},
{19138,1000,"PoliceGlasses1"},
{19139,1000,"PoliceGlasses2"},
{19140,1000,"PoliceGlasses3"}
};

new HoldingObjectsAll[][HoldingEnumAll] = {
{18642,1000,"Taser1"},
{18643,10000,"LaserPointer1"},
{19080,10000,"LaserPointer2"},
{19081,10000,"LaserPointer3"},
{19082,10000,"LaserPointer4"},
{19083,10000,"LaserPointer5"},
{19084,10000,"LaserPointer6"},
{19086,5000,"ChainsawDildo1"},
{18675,10000,"SmokePuff"},
{19701,10000,"SmallFlame"},
{18693,10000,"LargeFlame"},
{18698,10000,"Insects"},
{18708,10000,"Bubbles"},
{19141,2500,"SWATHelmet1"},
{19142,2500,"SWATArmour1"},
{18636,1000,"PoliceCap1"},
{19099,1000,"PoliceCap2"},
{19100,1000,"PoliceCap3"},
{18637,1000,"PoliceShield1"},
{19161,1000,"PoliceHat1"},
{19162,1000,"PoliceHat2"},
{19200,1000,"PoliceHelmet1"},
{19138,1000,"PoliceGlasses1"},
{19139,1000,"PoliceGlasses2"},
{19140,1000,"PoliceGlasses3"},
{18632,1000,"FishingRod"},
{18633,1500,"Wrench"},
{18634,1000,"Crowbar"},
{18635,1000,"Hammer"},
{18638,500,"HardHat"},
{19093,500,"HardHat2"},
{19160,500,"HardHat3"},
{18639,500,"BlackHat"},
{19317,1000,"Bass Guitar"},
{19318,1000,"FlyingV Guitar"},
{19319,1000,"Warlock Guitar"},
{18640,700,"Hair"},
{18975,700,"Hair2"},
{19136,700,"Hair3"},
{19274,700,"Hair4"},
{18641,1000,"Flashlight"},
{18644,5000,"Screwdriver"},
{18865,500,"MobilePhone1"},
{18866,500,"MobilePhone2"},
{18867,500,"MobilePhone3"},
{18868,500,"MobilePhone4"},
{18869,500,"MobilePhone5"},
{18870,1000,"MobilePhone6"},
{18871,1000,"MobilePhone7"},
{18872,1000,"MobilePhone8"},
{18873,1000,"MobilePhone9"},
{18874,1000,"MobilePhone10"},
{18875,750,"Pager"},
{18890,500,"Rake"},
{18891,500,"Bandana1"},
{18892,500,"Bandana2"},
{18893,500,"Bandana3"},
{18894,500,"Bandana4"},
{18895,500,"Bandana5"},
{18896,500,"Bandana6"},
{18897,500,"Bandana7"},
{18898,500,"Bandana8"},
{18899,500,"Bandana9"},
{18900,500,"Bandana10"},
{18901,750,"Bandana11"},
{18902,750,"Bandana12"},
{18903,750,"Bandana13"},
{18904,750,"Bandana14"},
{18905,750,"Bandana15"},
{18906,750,"Bandana16"},
{18907,750,"Bandana17"},
{18908,750,"Bandana18"},
{18909,750,"Bandana19"},
{18910,750,"Bandana20"},
{18911,1000,"Mask1"},
{18912,1000,"Mask2"},
{18913,1000,"Mask3"},
{18914,1000,"Mask4"},
{18915,1000,"Mask5"},
{18916,1000,"Mask6"},
{18917,1000,"Mask7"},
{18918,1000,"Mask8"},
{18919,1000,"Mask9"},
{18920,1000,"Mask10"},
{18921,500,"Beret1"},
{18922,500,"Beret2"},
{18923,750,"Beret3"},
{18924,1000,"Beret4"},
{18925,1000,"Beret5"},
{18926,500,"Hat1"},
{18927,500,"Hat2"},
{18928,500,"Hat3"},
{18929,500,"Hat4"},
{18930,500,"Hat5"},
{18931,1000,"Hat6"},
{18932,1000,"Hat7"},
{18933,1000,"Hat8"},
{18934,1000,"Hat9"},
{18935,1000,"Hat10"},
{18936,500,"Helmet1"},
{18937,750,"Helmet2"},
{18938,1000,"Helmet3"},
{18939,750,"CapBack1"},
{18940,750,"CapBack2"},
{18941,750,"CapBack3"},
{18942,1000,"CapBack4"},
{18943,1000,"CapBack5"},
{18944,1000,"HatBoater1"},
{18945,1250,"HatBoater2"},
{18946,1500,"HatBoater3"},
{18947,1000,"HatBowler1"},
{18948,1000,"HatBowler2"},
{18949,1000,"HatBowler3"},
{18950,1000,"HatBowler4"},
{18951,1000,"HatBowler5"},
{18952,1500,"BoxingHelmet"},
{18953,500,"CapKnit1"},
{18954,750,"CapKnit2"},
{18955,750,"CapOverEye1"},
{18956,750,"CapOverEye2"},
{18957,750,"CapOverEye3"},
{18958,750,"CapOverEye4"},
{18959,750,"CapOverEye5"},
{18960,1000,"CapRimUp1"},
{18961,750,"CapTrucker1"},
{18962,750,"CowboyHat2"},
{18964,1000,"SkullyCap1"},
{18965,1250,"SkullyCap2"},
{18966,1500,"SkullyCap3"},
{18967,1000,"HatMan1"},
{18968,1000,"HatMan2"},
{18969,1000,"HatMan3"},
{18970,2000,"HatTiger"},
{18971,1000,"HatCool1"},
{18972,1250,"HatCool2"},
{18973,1500,"HatCool3"},
{18974,10000,"MaskZorro1"},
{18645,1500,"MotorcycleHelmet"},
{18976,1000,"MotorcycleHelmet2"},
{18977,1000,"MotorcycleHelmet3"},
{18978,1250,"MotorcycleHelmet4"},
{18979,1500,"MotorcycleHelmet5"},
{19006,500,"GlassesType1"},
{19007,500,"GlassesType2"},
{19008,500,"GlassesType3"},
{19009,500,"GlassesType4"},
{19010,500,"GlassesType5"},
{19011,500,"GlassesType6"},
{19012,500,"GlassesType7"},
{19013,500,"GlassesType8"},
{19014,500,"GlassesType9"},
{19015,500,"GlassesType10"},
{19016,1000,"GlassesType11"},
{19017,1000,"GlassesType12"},
{19018,1000,"GlassesType13"},
{19019,1000,"GlassesType14"},
{19020,1000,"GlassesType15"},
{19021,1000,"GlassesType16"},
{19022,1000,"GlassesType17"},
{19023,1000,"GlassesType18"},
{19024,1000,"GlassesType19"},
{19025,1000,"GlassesType20"},
{19026,1500,"GlassesType21"},
{19027,1500,"GlassesType22"},
{19028,1500,"GlassesType23"},
{19029,1500,"GlassesType24"},
{19030,1500,"GlassesType25"},
{19031,1500,"GlassesType26"},
{19032,1500,"GlassesType27"},
{19033,1500,"GlassesType28"},
{19034,1500,"GlassesType29"},
{19035,1500,"GlassesType30"},
{19036,2000,"HockeyMask1"},
{19037,2000,"HockeyMask2"},
{19038,2000,"HockeyMask3"},
{19039,500,"WatchType1"},
{19040,500,"WatchType2"},
{19041,500,"WatchType3"},
{19042,500,"WatchType4"},
{19043,500,"WatchType5"},
{19044,500,"WatchType6"},
{19045,500,"WatchType7"},
{19046,1000,"WatchType8"},
{19047,1000,"WatchType9"},
{19048,1000,"WatchType10"},
{19049,1000,"WatchType11"},
{19050,1000,"WatchType12"},
{19051,1000,"WatchType13"},
{19052,1000,"WatchType14"},
{19053,1000,"WatchType15"},
{19064,10000, "SantaHat1"},
{19065,20000, "SantaHat2"},
{19066,30000, "SantaHat3"},
{19067,1000, "HoodyHat1"},
{19068,1000, "HoodyHat2"},
{19069,1000, "HoodyHat3"},
{19078,7500, "TheParrot1"},
{19079,7500, "TheParrot2"},
{19085,5000, "EyePatch"},
{19090,1500, "PomPomBlue"},
{19091,1500, "PomPomRed"},
{19092,1500, "PomPomGreen"},
{19094,2000, "BurgerShotHat"},
{19095,500, "CowboyHat1"},
{19096,500, "CowboyHat3"},
{19097,1000, "CowboyHat4"},
{19098,1000, "CowboyHat5"},
{19101,2000, "ArmyHelmet1"},
{19102,2000, "ArmyHelmet2"},
{19103,2000, "ArmyHelmet3"},
{19104,2000, "ArmyHelmet4"},
{19105,2000, "ArmyHelmet5"},
{19106,2000, "ArmyHelmet6"},
{19107,4000, "ArmyHelmet7"},
{19108,4000, "ArmyHelmet8"},
{19109,4000, "ArmyHelmet9"},
{19110,4000, "ArmyHelmet10"},
{19111,4000, "ArmyHelmet11"},
{19112,4000, "ArmyHelmet12"},
{19113,1000, "SillyHelmet1"},
{19114,2000, "SillyHelmet2"},
{19115,3000, "SillyHelmet3"},
{19116,500, "PlainHelmet1"},
{19117,500, "PlainHelmet2"},
{19118,750, "PlainHelmet3"},
{19119,1000, "PlainHelmet4"},
{19120,1000, "PlainHelmet5"},
{19137,5000, "CluckinBellHat"},
{19163,1000, "GimpMask"},
{1210,500, "Briefcase"},
{18647,0,	"RedNeonTube1"},
{18648,0,	"BlueNeonTube1"},
{18649,0,	"GreenNeonTube1"},
{18650,0,	"YellowNeonTube1"},
{18651,0,	"PinkNeonTube1"},
{18652,0,	"WhiteNeonTube1"},
{365,0, 	"Spray Can"},
{373,0, 	"Armour model"},
{371,0, 	"Parachute"},
{1486,0,	"Beer Bottle"},
{1575,0, 	"white sack of cocaine"},
{1212,0, 	"money packet"},
{348, 0, "deagle toy"},
{349, 0, "shotgun toy"},
{352, 0, "uzi toy"},
{353, 0, "mp5 toy"},
{343, 0, "teargas grenade"},
{326, 0, "cane"},
{325, 0, "flowers"},
{355, 0, "AK47 toy"},
{371, 0, "parachute bag"},
{1484, 0, "beer bottle"},
{3028, 0, "sword"},
{1279, 0, "drug bundle"},
{19348, 0, "cane"},
{19349, 0, "monocle"},
{19350, 0, "moustache1"},
{19469, 0, "scarf"},
{19472, 0, "gasmask"},
{19352, 0, "Top hat 01"},
{19487,0, "tophat02"},
{351,0, "Combat Shotgun"},
{335,0, "Combat Knife"},
{356,0, "M4 Assault Rifle"},
{373,0, "Armour Model"},
{1550,0,"sack of money"},
{1212,0,"money packet"}
};

enum HoldingEnum
{
	holdingmodelid,
	holdingprice,
	holdingmodelname[24]
}

new HoldingObjects[206][HoldingEnum] = {
{18632,1000,"FishingRod"},
{18633,1500,"Wrench"},
{18634,1000,"Crowbar"},
{18635,1000,"Hammer"},
{18638,500,"HardHat"},
{19093,500,"HardHat2"},
{19160,500,"HardHat3"},
{18639,500,"BlackHat"},
{19317,1000,"Bass Guitar"},
{19318,1000,"FlyingV Guitar"},
{19319,1000,"Warlock Guitar"},
{18640,700,"Hair"},
{18975,700,"Hair2"},
{19136,700,"Hair3"},
{19274,700,"Hair4"},
{18641,1000,"Flashlight"},
{18644,5000,"Screwdriver"},
{18865,500,"MobilePhone1"},
{18866,500,"MobilePhone2"},
{18867,500,"MobilePhone3"},
{18868,500,"MobilePhone4"},
{18869,500,"MobilePhone5"},
{18870,1000,"MobilePhone6"},
{18871,1000,"MobilePhone7"},
{18872,1000,"MobilePhone8"},
{18873,1000,"MobilePhone9"},
{18874,1000,"MobilePhone10"},
{18875,750,"Pager"},
{18890,500,"Rake"},
{18891,500,"Bandana1"},
{18892,500,"Bandana2"},
{18893,500,"Bandana3"},
{18894,500,"Bandana4"},
{18895,500,"Bandana5"},
{18896,500,"Bandana6"},
{18897,500,"Bandana7"},
{18898,500,"Bandana8"},
{18899,500,"Bandana9"},
{18900,500,"Bandana10"},
{18901,750,"Bandana11"},
{18902,750,"Bandana12"},
{18903,750,"Bandana13"},
{18904,750,"Bandana14"},
{18905,750,"Bandana15"},
{18906,750,"Bandana16"},
{18907,750,"Bandana17"},
{18908,750,"Bandana18"},
{18909,750,"Bandana19"},
{18910,750,"Bandana20"},
{18911,1000,"Mask1"},
{18912,1000,"Mask2"},
{18913,1000,"Mask3"},
{18914,1000,"Mask4"},
{18915,1000,"Mask5"},
{18916,1000,"Mask6"},
{18917,1000,"Mask7"},
{18918,1000,"Mask8"},
{18919,1000,"Mask9"},
{18920,1000,"Mask10"},
{18921,500,"Beret1"},
{18922,500,"Beret2"},
{18923,750,"Beret3"},
{18924,1000,"Beret4"},
{18925,1000,"Beret5"},
{18926,500,"Hat1"},
{18927,500,"Hat2"},
{18928,500,"Hat3"},
{18929,500,"Hat4"},
{18930,500,"Hat5"},
{18931,1000,"Hat6"},
{18932,1000,"Hat7"},
{18933,1000,"Hat8"},
{18934,1000,"Hat9"},
{18935,1000,"Hat10"},
{18936,500,"Helmet1"},
{18937,750,"Helmet2"},
{18938,1000,"Helmet3"},
{18939,750,"CapBack1"},
{18940,750,"CapBack2"},
{18941,750,"CapBack3"},
{18942,1000,"CapBack4"},
{18943,1000,"CapBack5"},
{18944,1000,"HatBoater1"},
{18945,1250,"HatBoater2"},
{18946,1500,"HatBoater3"},
{18947,1000,"HatBowler1"},
{18948,1000,"HatBowler2"},
{18949,1000,"HatBowler3"},
{18950,1000,"HatBowler4"},
{18951,1000,"HatBowler5"},
{18952,1500,"BoxingHelmet"},
{18953,500,"CapKnit1"},
{18954,750,"CapKnit2"},
{18955,750,"CapOverEye1"},
{18956,750,"CapOverEye2"},
{18957,750,"CapOverEye3"},
{18958,750,"CapOverEye4"},
{18959,750,"CapOverEye5"},
{18960,1000,"CapRimUp1"},
{18961,750,"CapTrucker1"},
{18962,750,"CowboyHat2"},
{18964,1000,"SkullyCap1"},
{18965,1250,"SkullyCap2"},
{18966,1500,"SkullyCap3"},
{18967,1000,"HatMan1"},
{18968,1000,"HatMan2"},
{18969,1000,"HatMan3"},
{18970,2000,"HatTiger"},
{18971,1000,"HatCool1"},
{18972,1250,"HatCool2"},
{18973,1500,"HatCool3"},
{18974,10000,"MaskZorro1"},
{18645,1500,"MotorcycleHelmet"},
{18976,1000,"MotorcycleHelmet2"},
{18977,1000,"MotorcycleHelmet3"},
{18978,1250,"MotorcycleHelmet4"},
{18979,1500,"MotorcycleHelmet5"},
{19006,500,"GlassesType1"},
{19007,500,"GlassesType2"},
{19008,500,"GlassesType3"},
{19009,500,"GlassesType4"},
{19010,500,"GlassesType5"},
{19011,500,"GlassesType6"},
{19012,500,"GlassesType7"},
{19013,500,"GlassesType8"},
{19014,500,"GlassesType9"},
{19015,500,"GlassesType10"},
{19016,1000,"GlassesType11"},
{19017,1000,"GlassesType12"},
{19018,1000,"GlassesType13"},
{19019,1000,"GlassesType14"},
{19020,1000,"GlassesType15"},
{19021,1000,"GlassesType16"},
{19022,1000,"GlassesType17"},
{19023,1000,"GlassesType18"},
{19024,1000,"GlassesType19"},
{19025,1000,"GlassesType20"},
{19026,1500,"GlassesType21"},
{19027,1500,"GlassesType22"},
{19028,1500,"GlassesType23"},
{19029,1500,"GlassesType24"},
{19030,1500,"GlassesType25"},
{19031,1500,"GlassesType26"},
{19032,1500,"GlassesType27"},
{19033,1500,"GlassesType28"},
{19034,1500,"GlassesType29"},
{19035,1500,"GlassesType30"},
{19036,2000,"HockeyMask1"},
{19037,2000,"HockeyMask2"},
{19038,2000,"HockeyMask3"},
{19039,500,"WatchType1"},
{19040,500,"WatchType2"},
{19041,500,"WatchType3"},
{19042,500,"WatchType4"},
{19043,500,"WatchType5"},
{19044,500,"WatchType6"},
{19045,500,"WatchType7"},
{19046,1000,"WatchType8"},
{19047,1000,"WatchType9"},
{19048,1000,"WatchType10"},
{19049,1000,"WatchType11"},
{19050,1000,"WatchType12"},
{19051,1000,"WatchType13"},
{19052,1000,"WatchType14"},
{19053,1000,"WatchType15"},
{19064,10000, "SantaHat1"},
{19065,20000, "SantaHat2"},
{19066,30000, "SantaHat3"},
{19067,1000, "HoodyHat1"},
{19068,1000, "HoodyHat2"},
{19069,1000, "HoodyHat3"},
{19078,7500, "TheParrot1"},
{19079,7500, "TheParrot2"},
{19085,5000, "EyePatch"},
{19090,1500, "PomPomBlue"},
{19091,1500, "PomPomRed"},
{19092,1500, "PomPomGreen"},
{19094,2000, "BurgerShotHat"},
{19095,500, "CowboyHat1"},
{19096,500, "CowboyHat3"},
{19097,1000, "CowboyHat4"},
{19098,1000, "CowboyHat5"},
{19101,2000, "ArmyHelmet1"},
{19102,2000, "ArmyHelmet2"},
{19103,2000, "ArmyHelmet3"},
{19104,2000, "ArmyHelmet4"},
{19105,2000, "ArmyHelmet5"},
{19106,2000, "ArmyHelmet6"},
{19107,4000, "ArmyHelmet7"},
{19108,4000, "ArmyHelmet8"},
{19109,4000, "ArmyHelmet9"},
{19110,4000, "ArmyHelmet10"},
{19111,4000, "ArmyHelmet11"},
{19112,4000, "ArmyHelmet12"},
{19113,1000, "SillyHelmet1"},
{19114,2000, "SillyHelmet2"},
{19115,3000, "SillyHelmet3"},
{19116,500, "PlainHelmet1"},
{19117,500, "PlainHelmet2"},
{19118,750, "PlainHelmet3"},
{19119,1000, "PlainHelmet4"},
{19120,1000, "PlainHelmet5"},
{19137,5000, "CluckinBellHat"},
{19163,1000, "GimpMask"},
{1210,500, "Briefcase"},
{3044,500, "Cigar"}
};

new HoldingBones[][] = {
	"None",
	"Spine",
	"Head",
	"Left upper arm",
	"Right upper arm",
	"Left hand",
	"Right hand",
	"Left thigh",
	"Right thigh",
	"Left foot",
	"Right foot",
	"Right calf",
	"Left calf",
	"Left forearm",
	"Right forearm",
	"Left clavicle",
	"Right clavicle",
	"Neck",
	"Jaw"
};

enum AC_STRUCT_INFO {
	Float:LastOnFootPosition[3],
	checkmaptp,
	maptplastclick,
	Float:maptp[3]
}

new acstruct[MAX_PLAYERS][AC_STRUCT_INFO];

//------------------------------------------------------------------------------------------------------

// Threads
#define NO_THREAD -1
#define NO_EXTRAID -1
#define LOADUSERDATA_THREAD 1
#define SENDDATA_THREAD 2
#define AUTH_THREAD 3
#define LOGIN_THREAD 4
#define REGISTER_THREAD 5
#define ONLINE_THREAD 6
#define LOADMOTDDATA_THREAD 7
#define LOADPVEHPOS_THREAD 8
#define CHECKPVEHPOS_THREAD 9
#define MDC_THREAD 10 // mdc

new MainPipeline;
#if defined SHOPAUTOMATED
new ShopPipeline;
#endif

enum mdcInfo
{
	mdcCrime[64],
	mdcIssuer[24],
	mdcActive[3],
}

new MDCInfo[12][mdcInfo];


// Callbacks
forward OnQueryFinish(resultid, extraid, handleid);
public OnQueryFinish(resultid, extraid, handleid)
{
    new rows, fields;
	if(resultid != SENDDATA_THREAD) {
		if(extraid != INVALID_PLAYER_ID) {
			if(g_arrQueryHandle{extraid} != -1 && g_arrQueryHandle{extraid} != handleid) return 0;
		}
		cache_get_data(rows, fields, MainPipeline);
	}
	switch(resultid)
	{
		case LOADMOTDDATA_THREAD:
		{
   			for(new i;i < rows;i++)
			{
			    new szResult[34];
   				/*cache_get_field_content(i, "gMOTD", GlobalMOTD, MainPipeline);
				cache_get_field_content(i, "aMOTD", AdminMOTD, MainPipeline);
				cache_get_field_content(i, "vMOTD", VIPMOTD, MainPipeline);
				cache_get_field_content(i, "cMOTD", CAMOTD, MainPipeline);
				cache_get_field_content(i, "pMOTD", pMOTD, MainPipeline);*/
				cache_get_field_content(i, "ShopTechPay", szResult, MainPipeline); ShopTechPay = floatstr(szResult);
				break;
			}
		}
		case LOADUSERDATA_THREAD:
		{
			if(IsPlayerConnected(extraid))
			{
   				new szField[MAX_PLAYER_NAME], szResult[64];

				for(new row;row < rows;row++)
				{
					cache_get_field_content(row, "Username", szField, MainPipeline);

					if(strcmp(szField, GetPlayerNameExt(extraid), true) != 0)
					{
						return 1;
					}
					cache_get_field_content(row, "id", szResult, MainPipeline); PlayerInfo[extraid][pId] = strval(szResult);
					cache_get_field_content(row, "Online", szResult, MainPipeline); PlayerInfo[extraid][pOnline] = strval(szResult);
					cache_get_field_content(row, "IP", PlayerInfo[extraid][pIP]);
					cache_get_field_content(row, "SecureIP", PlayerInfo[extraid][pSecureIP]);
					cache_get_field_content(row,  "ConnectedTime", szResult, MainPipeline); PlayerInfo[extraid][pConnectHours] = strval(szResult);
					cache_get_field_content(row,  "Age", szResult, MainPipeline); PlayerInfo[extraid][pAge] = strval(szResult);
					cache_get_field_content(row,  "Sex", szResult, MainPipeline); PlayerInfo[extraid][pSex] = strval(szResult);
					cache_get_field_content(row,  "Band", szResult, MainPipeline); PlayerInfo[extraid][pBanned] = strval(szResult);
					cache_get_field_content(row,  "PermBand", szResult, MainPipeline); PlayerInfo[extraid][pPermaBanned] = strval(szResult);
					cache_get_field_content(row,  "Registered", szResult, MainPipeline); PlayerInfo[extraid][pReg] = strval(szResult);
					cache_get_field_content(row,  "Warnings", szResult, MainPipeline); PlayerInfo[extraid][pWarns] = strval(szResult);
					cache_get_field_content(row,  "Disabled", szResult, MainPipeline); PlayerInfo[extraid][pDisabled] = strval(szResult);
					cache_get_field_content(row,  "Level", szResult, MainPipeline); PlayerInfo[extraid][pLevel] = strval(szResult);
					cache_get_field_content(row,  "AdminLevel", szResult, MainPipeline); PlayerInfo[extraid][pAdmin] = strval(szResult);
					cache_get_field_content(row,  "DonateRank", szResult, MainPipeline); PlayerInfo[extraid][pDonateRank] = strval(szResult);
					cache_get_field_content(row,  "Respect", szResult, MainPipeline); PlayerInfo[extraid][pExp] = strval(szResult);
					cache_get_field_content(row,  "Money", szResult, MainPipeline); PlayerInfo[extraid][pCash] = strval(szResult);
					cache_get_field_content(row,  "Bank", szResult, MainPipeline); PlayerInfo[extraid][pAccount] = strval(szResult);
					cache_get_field_content(row,  "pHealth", szResult, MainPipeline); PlayerInfo[extraid][pHealth] = floatstr(szResult);
					cache_get_field_content(row,  "pArmor", szResult, MainPipeline); PlayerInfo[extraid][pArmor] = floatstr(szResult);
					cache_get_field_content(row,  "pSHealth", szResult, MainPipeline); PlayerInfo[extraid][pSHealth] = floatstr(szResult);
					cache_get_field_content(row,  "Int", szResult, MainPipeline); PlayerInfo[extraid][pInt] = strval(szResult);
					cache_get_field_content(row,  "VirtualWorld", szResult, MainPipeline); PlayerInfo[extraid][pVW] = strval(szResult);
					cache_get_field_content(row,  "Model", szResult, MainPipeline); PlayerInfo[extraid][pModel] = strval(szResult);
					cache_get_field_content(row,  "SPos_x", szResult, MainPipeline); PlayerInfo[extraid][pPos_x] = floatstr(szResult);
					cache_get_field_content(row,  "SPos_y", szResult, MainPipeline); PlayerInfo[extraid][pPos_y] = floatstr(szResult);
					cache_get_field_content(row,  "SPos_z", szResult, MainPipeline); PlayerInfo[extraid][pPos_z] = floatstr(szResult);
					cache_get_field_content(row,  "SPos_r", szResult, MainPipeline); PlayerInfo[extraid][pPos_r] = floatstr(szResult);
					cache_get_field_content(row,  "BanAppealer", szResult, MainPipeline); PlayerInfo[extraid][pBanAppealer] = strval(szResult);
					cache_get_field_content(row,  "PR", szResult, MainPipeline); PlayerInfo[extraid][pPR] = strval(szResult);
					cache_get_field_content(row,  "ShopTech", szResult, MainPipeline); PlayerInfo[extraid][pShopTech] = strval(szResult);
					cache_get_field_content(row,  "Undercover", szResult, MainPipeline); PlayerInfo[extraid][pUndercover] = strval(szResult);
					cache_get_field_content(row,  "TogReports", szResult, MainPipeline); PlayerInfo[extraid][pTogReports] = strval(szResult);
					cache_get_field_content(row,  "Radio", szResult, MainPipeline); PlayerInfo[extraid][pRadio] = strval(szResult);
					cache_get_field_content(row,  "RadioFreq", szResult, MainPipeline); PlayerInfo[extraid][pRadioFreq] = strval(szResult);
					cache_get_field_content(row,  "UpgradePoints", szResult, MainPipeline); PlayerInfo[extraid][gPupgrade] = strval(szResult);
					cache_get_field_content(row,  "Origin", szResult, MainPipeline); PlayerInfo[extraid][pOrigin] = strval(szResult);
					cache_get_field_content(row,  "Muted", szResult, MainPipeline); PlayerInfo[extraid][pMuted] = strval(szResult);
					cache_get_field_content(row,  "Crimes", szResult, MainPipeline); PlayerInfo[extraid][pCrimes] = strval(szResult);
					cache_get_field_content(row,  "Accent", szResult, MainPipeline); PlayerInfo[extraid][pAccent] = strval(szResult);
					cache_get_field_content(row,  "CHits", szResult, MainPipeline); PlayerInfo[extraid][pCHits] = strval(szResult);
					cache_get_field_content(row,  "FHits", szResult, MainPipeline); PlayerInfo[extraid][pFHits] = strval(szResult);
					cache_get_field_content(row,  "Arrested", szResult, MainPipeline); PlayerInfo[extraid][pArrested] = strval(szResult);
					cache_get_field_content(row,  "Phonebook", szResult, MainPipeline); PlayerInfo[extraid][pPhoneBook] = strval(szResult);
					cache_get_field_content(row,  "LottoNr", szResult, MainPipeline); PlayerInfo[extraid][pLottoNr] = strval(szResult);
					cache_get_field_content(row,  "Fishes", szResult, MainPipeline); PlayerInfo[extraid][pFishes] = strval(szResult);
					cache_get_field_content(row,  "BiggestFish", szResult, MainPipeline); PlayerInfo[extraid][pBiggestFish] = strval(szResult);
					cache_get_field_content(row,  "Job", szResult, MainPipeline); PlayerInfo[extraid][pJob] = strval(szResult);
					cache_get_field_content(row,  "Job2", szResult, MainPipeline); PlayerInfo[extraid][pJob2] = strval(szResult);
					cache_get_field_content(row,  "Paycheck", szResult, MainPipeline); PlayerInfo[extraid][pPayCheck] = strval(szResult);
					cache_get_field_content(row,  "HeadValue", szResult, MainPipeline); PlayerInfo[extraid][pHeadValue] = strval(szResult);
					cache_get_field_content(row,  "JailTime", szResult, MainPipeline); PlayerInfo[extraid][pJailTime] = strval(szResult);
					cache_get_field_content(row,  "WRestricted", szResult, MainPipeline); PlayerInfo[extraid][pWRestricted] = strval(szResult);
					cache_get_field_content(row,  "Materials", szResult, MainPipeline); PlayerInfo[extraid][pMats] = strval(szResult);
					cache_get_field_content(row,  "Crates", szResult, MainPipeline); PlayerInfo[extraid][pCrates] = strval(szResult);
					cache_get_field_content(row,  "Pot", szResult, MainPipeline); PlayerInfo[extraid][pPot] = strval(szResult);
					cache_get_field_content(row,  "Crack", szResult, MainPipeline); PlayerInfo[extraid][pCrack] = strval(szResult);
					cache_get_field_content(row,  "Leader", szResult, MainPipeline); PlayerInfo[extraid][pLeader] = strval(szResult);
					cache_get_field_content(row,  "Member", szResult, MainPipeline); PlayerInfo[extraid][pMember] = strval(szResult);
					cache_get_field_content(row,  "Division", szResult, MainPipeline); PlayerInfo[extraid][pDivision] = strval(szResult);
					cache_get_field_content(row,  "FMember", szResult, MainPipeline); PlayerInfo[extraid][pFMember] = strval(szResult);
					cache_get_field_content(row,  "Rank", szResult, MainPipeline); PlayerInfo[extraid][pRank] = strval(szResult);
					cache_get_field_content(row,  "DetSkill", szResult, MainPipeline); PlayerInfo[extraid][pDetSkill] = strval(szResult);
					cache_get_field_content(row,  "SexSkill", szResult, MainPipeline); PlayerInfo[extraid][pSexSkill] = strval(szResult);
					cache_get_field_content(row,  "BoxSkill", szResult, MainPipeline); PlayerInfo[extraid][pBoxSkill] = strval(szResult);
					cache_get_field_content(row,  "LawSkill", szResult, MainPipeline); PlayerInfo[extraid][pLawSkill] = strval(szResult);
					cache_get_field_content(row,  "MechSkill", szResult, MainPipeline); PlayerInfo[extraid][pMechSkill] = strval(szResult);
					cache_get_field_content(row,  "TruckSkill", szResult, MainPipeline); PlayerInfo[extraid][pTruckSkill] = strval(szResult);
					cache_get_field_content(row,  "DrugsSkill", szResult, MainPipeline); PlayerInfo[extraid][pDrugsSkill] = strval(szResult);
					cache_get_field_content(row,  "ArmsSkill", szResult, MainPipeline); PlayerInfo[extraid][pArmsSkill] = strval(szResult);
					cache_get_field_content(row,  "SmugglerSkill", szResult, MainPipeline); PlayerInfo[extraid][pSmugSkill] = strval(szResult);
					cache_get_field_content(row,  "FishSkill", szResult, MainPipeline); PlayerInfo[extraid][pFishSkill] = strval(szResult);
					cache_get_field_content(row,  "FightingStyle", szResult, MainPipeline); PlayerInfo[extraid][pFightStyle] = strval(szResult);
					cache_get_field_content(row,  "PhoneNr", szResult, MainPipeline); PlayerInfo[extraid][pPnumber] = strval(szResult);
					cache_get_field_content(row,  "Apartment", szResult, MainPipeline); PlayerInfo[extraid][pPhousekey] = strval(szResult);
					cache_get_field_content(row,  "Apartment2", szResult, MainPipeline); PlayerInfo[extraid][pPhousekey2] = strval(szResult);
					cache_get_field_content(row,  "Renting", szResult, MainPipeline); PlayerInfo[extraid][pRenting] = strval(szResult);
					cache_get_field_content(row,  "CarLic", szResult, MainPipeline); PlayerInfo[extraid][pCarLic] = strval(szResult);
					cache_get_field_content(row,  "FlyLic", szResult, MainPipeline); PlayerInfo[extraid][pFlyLic] = strval(szResult);
					cache_get_field_content(row,  "BoatLic", szResult, MainPipeline); PlayerInfo[extraid][pBoatLic] = strval(szResult);
					cache_get_field_content(row,  "FishLic", szResult, MainPipeline); PlayerInfo[extraid][pFishLic] = strval(szResult);
					cache_get_field_content(row,  "CheckCash", szResult, MainPipeline); PlayerInfo[extraid][pCheckCash] = strval(szResult);
					cache_get_field_content(row,  "Checks", szResult, MainPipeline); PlayerInfo[extraid][pChecks] = strval(szResult);
					cache_get_field_content(row,  "GunLic", szResult, MainPipeline); PlayerInfo[extraid][pGunLic] = strval(szResult);

					for(new i = 0; i < 12; i++)
					{
						format(szField, sizeof(szField), "Gun%d", i);
						cache_get_field_content(row,  szField, szResult, MainPipeline);
						PlayerInfo[extraid][pGuns][i] = strval(szResult);
					}

					cache_get_field_content(row,  "DrugsTime", szResult, MainPipeline); PlayerInfo[extraid][pDrugsTime] = strval(szResult);
					cache_get_field_content(row,  "LawyerTime", szResult, MainPipeline); PlayerInfo[extraid][pLawyerTime] = strval(szResult);
					cache_get_field_content(row,  "LawyerFreeTime", szResult, MainPipeline); PlayerInfo[extraid][pLawyerFreeTime] = strval(szResult);
					cache_get_field_content(row,  "MechTime", szResult, MainPipeline); PlayerInfo[extraid][pMechTime] = strval(szResult);
					cache_get_field_content(row,  "SexTime", szResult, MainPipeline); PlayerInfo[extraid][pSexTime] = strval(szResult);
					cache_get_field_content(row,  "PayDay", szResult, MainPipeline); PlayerInfo[extraid][pConnectSeconds] = strval(szResult);
					cache_get_field_content(row,  "PayDayHad", szResult, MainPipeline); PlayerInfo[extraid][pPayDayHad] = strval(szResult);
					cache_get_field_content(row,  "CDPlayer", szResult, MainPipeline); PlayerInfo[extraid][pCDPlayer] = strval(szResult);
					cache_get_field_content(row,  "Dice", szResult, MainPipeline); PlayerInfo[extraid][pDice] = strval(szResult);
					cache_get_field_content(row,  "Spraycan", szResult, MainPipeline); PlayerInfo[extraid][pSpraycan] = strval(szResult);
					cache_get_field_content(row,  "Rope", szResult, MainPipeline); PlayerInfo[extraid][pRope] = strval(szResult);
					cache_get_field_content(row,  "Cigars", szResult, MainPipeline); PlayerInfo[extraid][pCigar] = strval(szResult);
					cache_get_field_content(row,  "Sprunk", szResult, MainPipeline); PlayerInfo[extraid][pSprunk] = strval(szResult);
					cache_get_field_content(row,  "Bombs", szResult, MainPipeline); PlayerInfo[extraid][pBombs] = strval(szResult);
					cache_get_field_content(row,  "Wins", szResult, MainPipeline); PlayerInfo[extraid][pWins] = strval(szResult);
					cache_get_field_content(row,  "Loses", szResult, MainPipeline); PlayerInfo[extraid][pLoses] = strval(szResult);
					cache_get_field_content(row,  "Tutorial", szResult, MainPipeline); PlayerInfo[extraid][pTut] = strval(szResult);
					cache_get_field_content(row,  "OnDuty", szResult, MainPipeline); PlayerInfo[extraid][pDuty] = strval(szResult);
					cache_get_field_content(row,  "Hospital", szResult, MainPipeline); PlayerInfo[extraid][pHospital] = strval(szResult);
					cache_get_field_content(row,  "Married", szResult, MainPipeline); PlayerInfo[extraid][pMarried] = strval(szResult);
					cache_get_field_content(row, "MarriedTo", PlayerInfo[extraid][pMarriedTo], MainPipeline);
					cache_get_field_content(row, "ContractBy", PlayerInfo[extraid][pContractBy], MainPipeline);
					cache_get_field_content(row, "ContractDetail", PlayerInfo[extraid][pContractDetail], MainPipeline);
					cache_get_field_content(row,  "WantedLevel", szResult, MainPipeline); PlayerInfo[extraid][pWantedLevel] = strval(szResult);
					cache_get_field_content(row,  "Insurance", szResult, MainPipeline); PlayerInfo[extraid][pInsurance] = strval(szResult);
					cache_get_field_content(row,  "NewMuted", szResult, MainPipeline); PlayerInfo[extraid][pNMute] = strval(szResult);
					cache_get_field_content(row,  "NewMutedTotal", szResult, MainPipeline); PlayerInfo[extraid][pNMuteTotal] = strval(szResult);
					cache_get_field_content(row,  "AdMuted", szResult, MainPipeline); PlayerInfo[extraid][pADMute] = strval(szResult);
					cache_get_field_content(row,  "AdMutedTotal", szResult, MainPipeline); PlayerInfo[extraid][pADMuteTotal] = strval(szResult);
					cache_get_field_content(row,  "HelpMute", szResult, MainPipeline); PlayerInfo[extraid][pHelpMute] = strval(szResult);
					cache_get_field_content(row,  "Helper", szResult, MainPipeline); PlayerInfo[extraid][pHelper] = strval(szResult);
					cache_get_field_content(row,  "ReportMuted", szResult, MainPipeline); PlayerInfo[extraid][pRMuted] = strval(szResult);
					cache_get_field_content(row,  "ReportMutedTotal", szResult, MainPipeline); PlayerInfo[extraid][pRMutedTotal] = strval(szResult);
					cache_get_field_content(row,  "ReportMutedTime", szResult, MainPipeline); PlayerInfo[extraid][pRMutedTime] = strval(szResult);
					cache_get_field_content(row,  "DMRMuted", szResult, MainPipeline); PlayerInfo[extraid][pDMRMuted] = strval(szResult);
					cache_get_field_content(row,  "VIPMuted", szResult, MainPipeline); PlayerInfo[extraid][pVMuted] = strval(szResult);
					cache_get_field_content(row,  "VIPMutedTime", szResult, MainPipeline); PlayerInfo[extraid][pVMutedTime] = strval(szResult);
					cache_get_field_content(row,  "GiftTime", szResult, MainPipeline); PlayerInfo[extraid][pGiftTime] = strval(szResult);
					cache_get_field_content(row,  "AdvisorDutyHours", szResult, MainPipeline); PlayerInfo[extraid][pDutyHours] = strval(szResult);
					cache_get_field_content(row,  "AcceptedHelp", szResult, MainPipeline); PlayerInfo[extraid][pAcceptedHelp] = strval(szResult);
					cache_get_field_content(row,  "AcceptReport", szResult, MainPipeline); PlayerInfo[extraid][pAcceptReport] = strval(szResult);
					cache_get_field_content(row,  "ShopTechOrders", szResult, MainPipeline); PlayerInfo[extraid][pShopTechOrders] = strval(szResult);
					cache_get_field_content(row,  "TrashReport", szResult, MainPipeline); PlayerInfo[extraid][pTrashReport] = strval(szResult);
					cache_get_field_content(row,  "FactionModerator", szResult, MainPipeline); PlayerInfo[extraid][pFactionModerator] = strval(szResult);
					cache_get_field_content(row,  "GangModerator", szResult, MainPipeline); PlayerInfo[extraid][pGangModerator] = strval(szResult);
					cache_get_field_content(row,  "GangWarn", szResult, MainPipeline); PlayerInfo[extraid][pGangWarn] = strval(szResult);
					cache_get_field_content(row,  "FactionBanned", szResult, MainPipeline); PlayerInfo[extraid][pFactionBanned] = strval(szResult);
					cache_get_field_content(row,  "CSFBanned", szResult, MainPipeline); PlayerInfo[extraid][pCSFBanned] = strval(szResult);
					cache_get_field_content(row,  "VIPInviteDay", szResult, MainPipeline); PlayerInfo[extraid][pVIPInviteDay] = strval(szResult);
					cache_get_field_content(row,  "TempVIP", szResult, MainPipeline); PlayerInfo[extraid][pTempVIP] = strval(szResult);
					cache_get_field_content(row,  "BuddyInvite", szResult, MainPipeline); PlayerInfo[extraid][pBuddyInvited] = strval(szResult);
					cache_get_field_content(row,  "Tokens", szResult, MainPipeline); PlayerInfo[extraid][pTokens] = strval(szResult);
					cache_get_field_content(row,  "PTokens", szResult, MainPipeline); PlayerInfo[extraid][pPaintTokens] = strval(szResult);
					cache_get_field_content(row,  "TriageTime", szResult, MainPipeline); PlayerInfo[extraid][pTriageTime] = strval(szResult);
					cache_get_field_content(row, "PrisonedBy", PlayerInfo[extraid][pPrisonedBy]);
					cache_get_field_content(row, "PrisonReason", PlayerInfo[extraid][pPrisonReason]);
					cache_get_field_content(row, "Flag", PlayerInfo[extraid][pFlag]);
					cache_get_field_content(row,  "TaxiLicense", szResult, MainPipeline); PlayerInfo[extraid][pTaxiLicense] = strval(szResult);
					cache_get_field_content(row,  "TicketTime", szResult, MainPipeline); PlayerInfo[extraid][pTicketTime] = strval(szResult);
					cache_get_field_content(row,  "Screwdriver", szResult, MainPipeline); PlayerInfo[extraid][pScrewdriver] = strval(szResult);
					cache_get_field_content(row,  "Smslog", szResult, MainPipeline); PlayerInfo[extraid][pSmslog] = strval(szResult);
					cache_get_field_content(row,  "Wristwatch", szResult, MainPipeline); PlayerInfo[extraid][pWristwatch] = strval(szResult);
					cache_get_field_content(row,  "Surveillance", szResult, MainPipeline); PlayerInfo[extraid][pSurveillance] = strval(szResult);
					cache_get_field_content(row,  "Tire", szResult, MainPipeline); PlayerInfo[extraid][pTire] = strval(szResult);
					cache_get_field_content(row,  "Firstaid", szResult, MainPipeline); PlayerInfo[extraid][pFirstaid] = strval(szResult);
					cache_get_field_content(row,  "Rccam", szResult, MainPipeline); PlayerInfo[extraid][pRccam] = strval(szResult);
					cache_get_field_content(row,  "Receiver", szResult, MainPipeline); PlayerInfo[extraid][pReceiver] = strval(szResult);
					cache_get_field_content(row,  "GPS", szResult, MainPipeline); PlayerInfo[extraid][pGPS] = strval(szResult);
					cache_get_field_content(row,  "Sweep", szResult, MainPipeline); PlayerInfo[extraid][pSweep] = strval(szResult);
					cache_get_field_content(row,  "SweepLeft", szResult, MainPipeline); PlayerInfo[extraid][pSweepLeft] = strval(szResult);
					cache_get_field_content(row,  "Bugged", szResult, MainPipeline); PlayerInfo[extraid][pBugged] = strval(szResult);
					cache_get_field_content(row,  "Smslog0", PlayerInfo[extraid][pSmslog0], MainPipeline);
					cache_get_field_content(row,  "Smslog1", PlayerInfo[extraid][pSmslog1], MainPipeline);
					cache_get_field_content(row,  "Smslog2", PlayerInfo[extraid][pSmslog2], MainPipeline);
					cache_get_field_content(row,  "Smslog3", PlayerInfo[extraid][pSmslog3], MainPipeline);
					cache_get_field_content(row,  "Smslog4", PlayerInfo[extraid][pSmslog4], MainPipeline);
					cache_get_field_content(row,  "Smslog5", PlayerInfo[extraid][pSmslog5], MainPipeline);
					cache_get_field_content(row,  "Smslog6", PlayerInfo[extraid][pSmslog6], MainPipeline);
					cache_get_field_content(row,  "Smslog7", PlayerInfo[extraid][pSmslog7], MainPipeline);
					cache_get_field_content(row,  "Smslog8", PlayerInfo[extraid][pSmslog8], MainPipeline);
					cache_get_field_content(row,  "Smslog9", PlayerInfo[extraid][pSmslog9], MainPipeline);
					cache_get_field_content(row,  "KillLog0", PlayerInfo[extraid][pKillLog0], MainPipeline);
					cache_get_field_content(row,  "KillLog1", PlayerInfo[extraid][pKillLog1], MainPipeline);
					cache_get_field_content(row,  "KillLog2", PlayerInfo[extraid][pKillLog2], MainPipeline);
					cache_get_field_content(row,  "KillLog3", PlayerInfo[extraid][pKillLog3], MainPipeline);
					cache_get_field_content(row,  "KillLog4", PlayerInfo[extraid][pKillLog4], MainPipeline);
					cache_get_field_content(row,  "KillLog5", PlayerInfo[extraid][pKillLog5], MainPipeline);
					cache_get_field_content(row,  "KillLog6", PlayerInfo[extraid][pKillLog6], MainPipeline);
					cache_get_field_content(row,  "KillLog7", PlayerInfo[extraid][pKillLog7], MainPipeline);
					cache_get_field_content(row,  "KillLog8", PlayerInfo[extraid][pKillLog8], MainPipeline);
					cache_get_field_content(row,  "KillLog9", PlayerInfo[extraid][pKillLog9], MainPipeline);
					cache_get_field_content(row,  "pWExists", szResult, MainPipeline); PlayerInfo[extraid][pWeedObject] = strval(szResult);
					cache_get_field_content(row,  "pWX", szResult, MainPipeline); PlayerInfo[extraid][pWeedPos][0] = floatstr(szResult);
					cache_get_field_content(row,  "pWY", szResult, MainPipeline); PlayerInfo[extraid][pWeedPos][1] = floatstr(szResult);
					cache_get_field_content(row,  "pWZ", szResult, MainPipeline); PlayerInfo[extraid][pWeedPos][2] = floatstr(szResult);
					cache_get_field_content(row,  "pWVW", szResult, MainPipeline); PlayerInfo[extraid][pWeedVW] = strval(szResult);
					cache_get_field_content(row,  "pWInt", szResult, MainPipeline); PlayerInfo[extraid][pWeedInt] = strval(szResult);
					cache_get_field_content(row,  "pWValue", szResult, MainPipeline); PlayerInfo[extraid][pWeedGrowth] = strval(szResult);
					cache_get_field_content(row,  "pWSeeds", szResult, MainPipeline); PlayerInfo[extraid][pWSeeds] = strval(szResult);
					cache_get_field_content(row,  "Warrants", szResult, MainPipeline); PlayerInfo[extraid][pWarrant] = strval(szResult);
					cache_get_field_content(row,  "JudgeJailTime", szResult, MainPipeline); PlayerInfo[extraid][pJudgeJailTime] = strval(szResult);
					cache_get_field_content(row,  "JudgeJailType", szResult, MainPipeline); PlayerInfo[extraid][pJudgeJailType] = strval(szResult);
					cache_get_field_content(row,  "ProbationTime", szResult, MainPipeline); PlayerInfo[extraid][pProbationTime] = strval(szResult);
					cache_get_field_content(row,  "DMKills", szResult, MainPipeline); PlayerInfo[extraid][pDMKills] = strval(szResult);
					cache_get_field_content(row,  "Order", szResult, MainPipeline); PlayerInfo[extraid][pOrder] = strval(szResult);
					cache_get_field_content(row,  "OrderConfirmed", szResult, MainPipeline); PlayerInfo[extraid][pOrderConfirmed] = strval(szResult);
					cache_get_field_content(row,  "CallsAccepted", szResult, MainPipeline); PlayerInfo[extraid][pCallsAccepted] = strval(szResult);
					cache_get_field_content(row,  "PatientsDelivered", szResult, MainPipeline); PlayerInfo[extraid][pPatientsDelivered] = strval(szResult);
					cache_get_field_content(row,  "LiveBanned", szResult, MainPipeline); PlayerInfo[extraid][pLiveBanned] = strval(szResult);
					cache_get_field_content(row,  "FreezeBank", szResult, MainPipeline); PlayerInfo[extraid][pFreezeBank] = strval(szResult);
					cache_get_field_content(row,  "FreezeHouse", szResult, MainPipeline); PlayerInfo[extraid][pFreezeHouse] = strval(szResult);
					cache_get_field_content(row,  "FreezeCar", szResult, MainPipeline); PlayerInfo[extraid][pFreezeCar] = strval(szResult);
					cache_get_field_content(row,  "Firework", szResult, MainPipeline); PlayerInfo[extraid][pFirework] = strval(szResult);
					cache_get_field_content(row,  "Boombox", szResult, MainPipeline); PlayerInfo[extraid][pBoombox] = strval(szResult);
					cache_get_field_content(row,  "Hydration", szResult, MainPipeline); PlayerInfo[extraid][pHydration] = strval(szResult);
					cache_get_field_content(row,  "Speedo", szResult, MainPipeline); PlayerInfo[extraid][pSpeedo] = strval(szResult);
					cache_get_field_content(row,  "DoubleEXP", szResult, MainPipeline); PlayerInfo[extraid][pDoubleEXP] = strval(szResult);
					cache_get_field_content(row,  "EXPToken", szResult, MainPipeline); PlayerInfo[extraid][pEXPToken] = strval(szResult);
					cache_get_field_content(row,  "RacePlayerLaps", szResult, MainPipeline); PlayerInfo[extraid][pRacePlayerLaps] = strval(szResult);
					cache_get_field_content(row,  "Ringtone", szResult, MainPipeline); PlayerInfo[extraid][pRingtone] = strval(szResult);
					cache_get_field_content(row,  "VIPM", szResult, MainPipeline); PlayerInfo[extraid][pVIPM] = strval(szResult);
					cache_get_field_content(row,  "VIPMO", szResult, MainPipeline); PlayerInfo[extraid][pVIPMO] = strval(szResult);
					cache_get_field_content(row,  "VIPExpire", szResult, MainPipeline); PlayerInfo[extraid][pVIPExpire] = strval(szResult);
					cache_get_field_content(row,  "GVip", szResult, MainPipeline); PlayerInfo[extraid][pGVip] = strval(szResult);
					cache_get_field_content(row,  "SeniorModerator", szResult, MainPipeline); PlayerInfo[extraid][pSMod] = strval(szResult);
					cache_get_field_content(row,  "Watchdog", szResult, MainPipeline); PlayerInfo[extraid][pWatchdog] = strval(szResult);
					cache_get_field_content(row,  "VIPSold", szResult, MainPipeline); PlayerInfo[extraid][pVIPSold] = strval(szResult);
					cache_get_field_content(row,  "GoldBoxTokens", szResult, MainPipeline); PlayerInfo[extraid][pGoldBoxTokens] = strval(szResult);
					cache_get_field_content(row,  "DrawChance", szResult, MainPipeline); PlayerInfo[extraid][pRewardDrawChance] = strval(szResult);
					cache_get_field_content(row,  "RewardHours", szResult, MainPipeline); PlayerInfo[extraid][pRewardHours] = floatstr(szResult);
					cache_get_field_content(row,  "LastCarWarning", szResult, MainPipeline); PlayerInfo[extraid][pLastRVehWarn] = strval(szResult);
					cache_get_field_content(row,  "CarWarns", szResult, MainPipeline); PlayerInfo[extraid][pRVehWarns] = strval(szResult);
					cache_get_field_content(row,  "Flagged", szResult, MainPipeline); PlayerInfo[extraid][pFlagged] = strval(szResult);
					cache_get_field_content(row,  "AdminDuty", szResult, MainPipeline); PlayerInfo[extraid][pAdminDuty] = strval(szResult);
				//	cache_get_field_content(row,  "AuthCode", szResult, MainPipeline); PlayerInfo[extraid][pCode] = strval(szResult);
					cache_get_field_content(row, "AuthCode", PlayerInfo[extraid][pCode]);
					cache_get_field_content(row,  "MainOwner", szResult, MainPipeline); PlayerInfo[extraid][pMainOwner] = strval(szResult);
					cache_get_field_content(row,  "Infractions", szResult, MainPipeline); PlayerInfo[extraid][pInfractions] = strval(szResult);

					for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
					{
						format(szField, sizeof(szField), "pv%dModelId", i);
						cache_get_field_content(row,  szField, szResult, MainPipeline);
						PlayerVehicleInfo[extraid][i][pvModelId] = strval(szResult);

						if(PlayerVehicleInfo[extraid][i][pvModelId] != 0)
						{
							format(szField, sizeof(szField), "pv%dPosX", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvPosX] = floatstr(szResult);

							format(szField, sizeof(szField), "pv%dPosY", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvPosY] = floatstr(szResult);

							format(szField, sizeof(szField), "pv%dPosZ", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvPosZ] = floatstr(szResult);

							format(szField, sizeof(szField), "pv%dPosAngle", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvPosAngle] = floatstr(szResult);

							format(szField, sizeof(szField), "pv%dLock", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvLock] = strval(szResult);

							format(szField, sizeof(szField), "pv%dLocked", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvLocked] = strval(szResult);

							format(szField, sizeof(szField), "pv%dPaintJob", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvPaintJob] = strval(szResult);

							format(szField, sizeof(szField), "pv%dColor1", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvColor1] = strval(szResult);

							format(szField, sizeof(szField), "pv%dColor2", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvColor2] = strval(szResult);

							format(szField, sizeof(szField), "pv%dPrice", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvPrice] = strval(szResult);

							format(szField, sizeof(szField), "pv%dTicket", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvTicket] = strval(szResult);

							format(szField, sizeof(szField), "pv%dRestricted", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvRestricted] = strval(szResult);

							format(szField, sizeof(szField), "pv%dWeapon0", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvWeapons][0] = strval(szResult);

							format(szField, sizeof(szField), "pv%dWeapon1", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvWeapons][1] = strval(szResult);

							format(szField, sizeof(szField), "pv%dWeapon2", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvWeapons][2] = strval(szResult);

							format(szField, sizeof(szField), "pv%dWepUpgrade", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvWepUpgrade] = strval(szResult);

							format(szField, sizeof(szField), "pv%dFuel", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvFuel] = floatstr(szResult);

							format(szField, sizeof(szField), "pv%dImpound", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvImpounded] = strval(szResult);

							format(szField, sizeof(szField), "pv%dDisabled", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerVehicleInfo[extraid][i][pvDisabled] = strval(szResult);

							format(szField, sizeof(szField), "pv%dPlate", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							format(PlayerVehicleInfo[extraid][i][pvPlate], 32, "%s", szResult);// MainPipeline);
//							PlayerVehicleInfo[extraid][i][pvplate] = strval(szResult);

							for(new m = 0; m < MAX_MODS; m++)
							{
								format(szField, sizeof(szField), "pv%dMod%d", i, m);
								cache_get_field_content(row,  szField, szResult, MainPipeline);
								PlayerVehicleInfo[extraid][i][pvMods][m] = strval(szResult);
							}
						}
						else
						{
							PlayerVehicleInfo[extraid][i][pvPosX] = 0.0;
							PlayerVehicleInfo[extraid][i][pvPosY] = 0.0;
							PlayerVehicleInfo[extraid][i][pvPosZ] = 0.0;
							PlayerVehicleInfo[extraid][i][pvPosAngle] = 0.0;
							PlayerVehicleInfo[extraid][i][pvLock] = 0;
							PlayerVehicleInfo[extraid][i][pvLocked] = 0;
							PlayerVehicleInfo[extraid][i][pvPaintJob] = 0;
							PlayerVehicleInfo[extraid][i][pvColor1] = 0;
							PlayerVehicleInfo[extraid][i][pvColor2] = 0;
							PlayerVehicleInfo[extraid][i][pvPrice] = 0;
							PlayerVehicleInfo[extraid][i][pvTicket] = 0;
							PlayerVehicleInfo[extraid][i][pvWeapons][0] = 0;
							PlayerVehicleInfo[extraid][i][pvWeapons][1] = 0;
							PlayerVehicleInfo[extraid][i][pvWeapons][2] = 0;
							PlayerVehicleInfo[extraid][i][pvWepUpgrade] = 0;
							PlayerVehicleInfo[extraid][i][pvFuel] = 0.0;
							PlayerVehicleInfo[extraid][i][pvImpounded] = 0;
							PlayerVehicleInfo[extraid][i][pvSpawned] = 0;
							PlayerVehicleInfo[extraid][i][pvDisabled] = 0;
							PlayerVehicleInfo[extraid][i][pvPlate] = 0;

							for(new m = 0; m < MAX_MODS; m++)
							{
								PlayerVehicleInfo[extraid][i][pvMods][m] = 0;
							}
						}
					}

					for(new i = 0; i < MAX_PLAYERTOYS; i++)
					{
						format(szField, sizeof(szField), "pt%dModelID", i);
						cache_get_field_content(row,  szField, szResult, MainPipeline);
						PlayerToyInfo[extraid][i][ptModelID] = strval(szResult);

						if(PlayerToyInfo[extraid][i][ptModelID] != 0)
						{
							format(szField, sizeof(szField), "pt%dBone", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptBone] = strval(szResult);

							format(szField, sizeof(szField), "pt%dPosX", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptPosX] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dPosY", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptPosY] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dPosY", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptPosY] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dPosZ", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptPosZ] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dRotX", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptRotX] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dRotY", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptRotY] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dRotZ", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptRotZ] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dScaX", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptScaleX] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dScaY", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptScaleY] = floatstr(szResult);

							format(szField, sizeof(szField), "pt%dScaZ", i);
							cache_get_field_content(row,  szField, szResult, MainPipeline);
							PlayerToyInfo[extraid][i][ptScaleZ] = floatstr(szResult);
						}
						else
						{
							PlayerToyInfo[extraid][i][ptBone] = 0;
							PlayerToyInfo[extraid][i][ptPosX] = 0.0;
							PlayerToyInfo[extraid][i][ptPosY] = 0.0;
							PlayerToyInfo[extraid][i][ptPosZ] = 0.0;
							PlayerToyInfo[extraid][i][ptRotX] = 0.0;
							PlayerToyInfo[extraid][i][ptRotY] = 0.0;
							PlayerToyInfo[extraid][i][ptRotZ] = 0.0;
							PlayerToyInfo[extraid][i][ptScaleX] = 0.0;
							PlayerToyInfo[extraid][i][ptScaleY] = 0.0;
							PlayerToyInfo[extraid][i][ptScaleZ] = 0.0;
						}
					}
					g_mysql_LoadPVehiclePositions(extraid);
                	break;
				}
			}
			return 1;
		}
		case SENDDATA_THREAD:
		{
			if(GetPVarType(extraid, "RestartKick")) {
				gPlayerLogged{extraid} = 0;
//				GameTextForPlayer(extraid, "Scheduled Maintenance...", 5000, 5);
				GameTextForPlayer(extraid, "~y~Scheduled Maintenance...", 7000, 4);
				SendClientMessage(extraid, COLOR_LIGHTBLUE, "* The server will be going down for an Update. A short downtime may happen!.");
				SendClientMessage(extraid, COLOR_NEWBIE, "Please allow up to 30-60 Mintues for the Server to be back online! (Sometimes it may just be a re-start).");
				KickWithMessage(extraid);

				foreachex(Player, extraid) if(gPlayerLogged{extraid}) {
					SetPVarInt(extraid, "RestartKick", 1);
					return OnPlayerStatsUpdate(extraid);
				}
				ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Account saving finished!", 1);
				//g_mysql_dumpaccounts();

				SetTimer("FinishMaintenance", 15000, false);
			}
			if(GetPVarType(extraid, "AccountSaving") && (GetPVarInt(extraid, "AccountSaved") == 0)) {
				SetPVarInt(extraid, "AccountSaved", 1);
				foreachex(Player, extraid)
				{
					if(gPlayerLogged{extraid} && (GetPVarInt(extraid, "AccountSaved") == 0))
					{
						SetPVarInt(extraid, "AccountSaving", 1);
						return OnPlayerStatsUpdate(extraid);
					}
				}
				ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Account saving finished!", 1);
				print("Account Saving Complete");
				foreach(new i: Player)
				{
				    DeletePVar(i, "AccountSaved");
				    DeletePVar(i, "AccountSaving");
				}
				//g_mysql_dumpaccounts();
			}
			return 1;
		}
		case AUTH_THREAD:
		{
			new name[24];
			for(new i;i < rows;i++)
			{
				cache_get_field_content(i, "Username", name, MainPipeline);
				if(strcmp(name, GetPlayerNameExt(extraid), true) == 0)
				{
					HideNoticeGUIFrame(extraid);
					SafeLogin(extraid, 1);
					return 1;
				}
				else
				{
					return 1;
				}
			}
			HideNoticeGUIFrame(extraid);
			SafeLogin(extraid, 2);
			return 1;
		}
		case LOGIN_THREAD:
		{
			for(new i;i < rows;i++)
			{
				new
					szPass[129],
					szResult[129],
					szBuffer[129],
					szEmail[256];

				cache_get_field_content(i, "Username", szResult, MainPipeline);
				if(strcmp(szResult, GetPlayerNameExt(extraid), true) != 0)
				{
					//g_mysql_AccountAuthCheck(extraid);
					return 1;
				}

				cache_get_field_content(i, "Email", szEmail, MainPipeline);
				cache_get_field_content(i, "Pass", szResult, MainPipeline);
				GetPVarString(extraid, "PassAuth", szBuffer, sizeof(szBuffer));
				WP_Hash(szPass, sizeof(szPass), szBuffer);

				if(isnull(szEmail)) SetPVarInt(extraid, "NullEmail", 1);

				if((isnull(szPass)) || (isnull(szResult)) || (strcmp(szPass, szResult) != 0)) {
					// Invalid Password - Try Again!
					ShowMainMenuDialog(extraid, 3);
					HideNoticeGUIFrame(extraid);
					if(++gPlayerLogTries[extraid] == 2) {
						SendClientMessage(extraid, COLOR_RED, "{FF8000}Error{AA3333}: Wrong password, you have been kicked out automatically.");
						KickWithMessage(extraid);
					}
					return 1;
				}
				DeletePVar(extraid, "PassAuth");
				break;
			}
			HideNoticeGUIFrame(extraid);
			g_mysql_LoadAccount(extraid);
			return 1;
		}
		case REGISTER_THREAD:
		{
			if(IsPlayerConnected(extraid))
			{
				g_mysql_AccountLoginCheck(extraid);
				TotalRegister++;
			}
		}
		case LOADPVEHPOS_THREAD:
		{
			if(IsPlayerConnected(extraid))
			{
				new bool:bVehRestore;
				for(new i;i < rows;i++)
				{
					bVehRestore = true;
					for(new v; v < MAX_PLAYERVEHICLES; v++)
					{
						new szResult[32], szPrefix[32], tmpVehModelId, Float:tmpVehArray[4];

						format(szPrefix, sizeof(szPrefix), "pv%dModelId", v);
						cache_get_field_content(i, szPrefix, szResult, MainPipeline); tmpVehModelId = strval(szResult);
						format(szPrefix, sizeof(szPrefix), "pv%dPosX", v);
						cache_get_field_content(i, szPrefix, szResult, MainPipeline); tmpVehArray[0] = floatstr(szResult);
						format(szPrefix, sizeof(szPrefix), "pv%dPosY", v);
						cache_get_field_content(i, szPrefix, szResult, MainPipeline); tmpVehArray[1] = floatstr(szResult);
						format(szPrefix, sizeof(szPrefix), "pv%dPosZ", v);
						cache_get_field_content(i, szPrefix, szResult, MainPipeline); tmpVehArray[2] = floatstr(szResult);
						format(szPrefix, sizeof(szPrefix), "pv%dPosAngle", v);
						cache_get_field_content(i, szPrefix, szResult, MainPipeline); tmpVehArray[3] = floatstr(szResult);

						if(tmpVehModelId >= 400)
						{
							printf("Stored %d Vehicle Slot", v);

							format(szPrefix, sizeof(szPrefix), "tmpVeh%dModelId", v);
							SetPVarInt(extraid, szPrefix, tmpVehModelId);

							format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosX", v);
							SetPVarFloat(extraid, szPrefix, tmpVehArray[0]);

							format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosY", v);
							SetPVarFloat(extraid, szPrefix, tmpVehArray[1]);

							format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosZ", v);
							SetPVarFloat(extraid, szPrefix, tmpVehArray[2]);

							format(szPrefix, sizeof(szPrefix), "tmpVeh%dAngle", v);
							SetPVarFloat(extraid, szPrefix, tmpVehArray[3]);
						}
					}
					break;
				}

				if(bVehRestore == true) {
					// Player Vehicle Position Restore Granted, Now Purge them from the Table.
					new query[128];
					format(query, sizeof(query), "DELETE FROM `pvehpositions` WHERE `id`='%d'", PlayerInfo[extraid][pId]);
					mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, extraid);
				}

				OnPlayerLoad(extraid);
			}
		}
		case CHECKPVEHPOS_THREAD:
		{
				new tmpRows, tmpFields;
				cache_get_data(tmpRows, tmpFields, MainPipeline);

				if(rows == 0)
				{
					new query[2048];
					format(query, sizeof(query), "INSERT INTO `pvehpositions` (id,");
					for(new v; v < MAX_PLAYERVEHICLES; v++)
					{
						if(v == MAX_PLAYERVEHICLES-1) format(query, sizeof(query), "%s pv%dModelId, pv%dPosX, pv%dPosY, pv%dPosZ, pv%dPosAngle", query, v, v, v, v, v);
						else format(query, sizeof(query), "%s pv%dModelId, pv%dPosX, pv%dPosY, pv%dPosZ, pv%dPosAngle, ", query, v, v, v, v, v);

					}
					format(query, sizeof(query), "%s) VALUES (%d,", query, tmpPVASQLID[extraid]);
					for(new v; v < MAX_PLAYERVEHICLES; v++)
					{
						if(v == MAX_PLAYERVEHICLES-1) format(query, sizeof(query), "%s %d, %f, %f, %f, %f)", query, tmpPVAModelID[extraid][v], tmpPVAPos[extraid][v][0], tmpPVAPos[extraid][v][1], tmpPVAPos[extraid][v][2], tmpPVAPos[extraid][v][3]);
						else format(query, sizeof(query), "%s %d, %f, %f, %f, %f,", query, tmpPVAModelID[extraid][v], tmpPVAPos[extraid][v][0], tmpPVAPos[extraid][v][1], tmpPVAPos[extraid][v][2], tmpPVAPos[extraid][v][3]);
					}

					for(new v; v < MAX_PLAYERVEHICLES; v++)
					{
						tmpPVASQLID[extraid] = -1;
						tmpPVAModelID[extraid][v] = 0;
						tmpPVAPos[extraid][v][0] = 0;
						tmpPVAPos[extraid][v][1] = 0;
						tmpPVAPos[extraid][v][2] = 0;
						tmpPVAPos[extraid][v][3] = 0;
					}

					mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, extraid);
				}
		}
		case THREAD_LOAD_FACTIONS: {
			new
				x, szField[12], szResult[128];
			for(new i; i < rows; i++) {
				cache_get_field_content(i, "id", szResult, MainPipeline);
				x = strval(szResult);

				cache_get_field_content(i, "type", szResult, MainPipeline);
				FactionInfo[x][fType] = strval(szResult);

				cache_get_field_content(i, "name", FactionInfo[x][fName]);
				cache_get_field_content(i, "motd", FactionInfo[x][fMOTD]);

				cache_get_field_content(i, "bug", szResult, MainPipeline);
				FactionInfo[x][fBug] = strval(szResult);

				cache_get_field_content(i, "radio", szResult, MainPipeline);
				FactionInfo[x][fRadio] = strval(szResult);

				cache_get_field_content(i, "dradio", szResult, MainPipeline);
				FactionInfo[x][fDRadio] = strval(szResult);

				cache_get_field_content(i, "govaccounce", szResult, MainPipeline);
				FactionInfo[x][fGovAnnounce] = strval(szResult);

				cache_get_field_content(i, "spikes", szResult, MainPipeline);
				FactionInfo[x][fSpikes] = strval(szResult);

				cache_get_field_content(i, "barricades", szResult, MainPipeline);
				FactionInfo[x][fBarricades] = strval(szResult);

				cache_get_field_content(i, "cones", szResult, MainPipeline);
				FactionInfo[x][fCones] = strval(szResult);

				cache_get_field_content(i, "flares", szResult, MainPipeline);
				FactionInfo[x][fFlares] = strval(szResult);

				cache_get_field_content(i, "barrels", szResult, MainPipeline);
		        FactionInfo[x][fBarrels] = strval(szResult);

				cache_get_field_content(i, "freenamechange", szResult, MainPipeline);
				FactionInfo[x][fFreeNameChange] = strval(szResult);

				cache_get_field_content(i, "locker", szResult, MainPipeline);
				FactionInfo[x][fLocker] = strval(szResult);
				
				cache_get_field_content(i, "lockervw", szResult, MainPipeline);
				FactionInfo[x][fLockerVW] = strval(szResult);

		        cache_get_field_content(i, "lockerposx", szResult, MainPipeline);
		        FactionInfo[x][fLockerPos][0] = floatstr(szResult);

		        cache_get_field_content(i, "lockerposy", szResult, MainPipeline);
		        FactionInfo[x][fLockerPos][1] = floatstr(szResult);

		        cache_get_field_content(i, "lockerposz", szResult, MainPipeline);
		        FactionInfo[x][fLockerPos][2] = floatstr(szResult);
		        
				cache_get_field_content(i, "dutycolor", szResult, MainPipeline);
				FactionInfo[x][fDutyColor] = strval(szResult);

				cache_get_field_content(i, "radiocolor", szResult, MainPipeline);
				FactionInfo[x][fRadioColor] = strval(szResult);

				cache_get_field_content(i, "budget", szResult, MainPipeline);
				FactionInfo[x][fBudget] = strval(szResult);

				cache_get_field_content(i, "budgetpayment", szResult, MainPipeline);
				FactionInfo[x][fBudgetPay] = strval(szResult);

				cache_get_field_content(i, "rank0", FacRanks[x][0], MainPipeline);
				cache_get_field_content(i, "rank1", FacRanks[x][1], MainPipeline);
				cache_get_field_content(i, "rank2", FacRanks[x][2], MainPipeline);
				cache_get_field_content(i, "rank3", FacRanks[x][3], MainPipeline);
				cache_get_field_content(i, "rank4", FacRanks[x][4], MainPipeline);
				cache_get_field_content(i, "rank5", FacRanks[x][5], MainPipeline);
				cache_get_field_content(i, "rank6", FacRanks[x][6], MainPipeline);
				cache_get_field_content(i, "rank7", FacRanks[x][7], MainPipeline);
				cache_get_field_content(i, "rank8", FacRanks[x][8], MainPipeline);
		        cache_get_field_content(i, "rank9", FacRanks[x][9], MainPipeline);

				for(new z = 0; z < 10; z++){  // ranks pay 0-9
				    format(szField, sizeof(szField), "rank%dpay", z);
				    cache_get_field_content(i, szField, szResult, MainPipeline);
				    FactionInfo[x][fRankpay][z] = strval(szResult);
				}

				cache_get_field_content(i, "div0", FacDivs[x][0], MainPipeline);
				cache_get_field_content(i, "div1", FacDivs[x][1], MainPipeline);
				cache_get_field_content(i, "div2", FacDivs[x][2], MainPipeline);
				cache_get_field_content(i, "div3", FacDivs[x][3], MainPipeline);
				cache_get_field_content(i, "div4", FacDivs[x][4], MainPipeline);

				for(new z = 0; z < 10; z++){// guns 0-9
				    format(szField, sizeof(szField), "gun%d", i);
				    cache_get_field_content(i, szField, szResult, MainPipeline);
				    FactionInfo[x][fGun][z] = strval(szResult);
				}
			}
		}
		case THREAD_LOAD_FACTIONVEHS: {
			new
				x, szField[12], szResult[256];
			for(new i;i < rows;i++) {
				cache_get_field_content(i, "id", szResult, MainPipeline);
				x = strval(szResult);

				cache_get_field_content(i, "disabled", szResult, MainPipeline);
				FactionVehicleInfo[x][fDisabled] = strval(szResult);

				cache_get_field_content(i, "groupid", szResult, MainPipeline);
				FactionVehicleInfo[x][fGroupID] = strval(szResult);

				cache_get_field_content(i, "groupdivid", szResult, MainPipeline);
				FactionVehicleInfo[x][fGroupDivID] = strval(szResult);

				cache_get_field_content(i, "model", szResult, MainPipeline);
				FactionVehicleInfo[x][fModel] = strval(szResult);

				cache_get_field_content(i, "plate", FactionVehicleInfo[x][fPlate], MainPipeline);

				cache_get_field_content(i, "maxhp", szResult, MainPipeline);
				FactionVehicleInfo[x][fMaxHP] = floatstr(szResult);

		        cache_get_field_content(i, "fuel", szResult, MainPipeline);
		        FactionVehicleInfo[x][fFuel] = strval(szResult);

		        cache_get_field_content(i, "col1", szResult, MainPipeline);
		        FactionVehicleInfo[x][fCol1] = strval(szResult);

		        cache_get_field_content(i, "col2", szResult, MainPipeline);
		        FactionVehicleInfo[x][fCol2] = strval(szResult);

		        cache_get_field_content(i, "x", szResult, MainPipeline);
		        FactionVehicleInfo[x][fvPos][0] = floatstr(szResult);

		        cache_get_field_content(i, "y", szResult, MainPipeline);
		        FactionVehicleInfo[x][fvPos][1] = floatstr(szResult);

		        cache_get_field_content(i, "z", szResult, MainPipeline);
		        FactionVehicleInfo[x][fvPos][2] = floatstr(szResult);

		        cache_get_field_content(i, "rot", szResult, MainPipeline);
		        FactionVehicleInfo[x][fvPos][3] = floatstr(szResult);

		        cache_get_field_content(i, "vw", szResult, MainPipeline);
		        FactionVehicleInfo[x][fvVW] = strval(szResult);

		        cache_get_field_content(i, "int", szResult, MainPipeline);
		        FactionVehicleInfo[x][fvINT] = strval(szResult);

		        cache_get_field_content(i, "upkeep", szResult, MainPipeline);
		        FactionVehicleInfo[x][fUpkeep] = strval(szResult);

				for(new z = 0; z < 15; z++){// mods 0-14
				    format(szField, sizeof(szField), "mod%d", z);
				    cache_get_field_content(i, szField, szResult, MainPipeline);
				    FactionVehicleInfo[x][fvMod][z] = strval(szResult);
				}

				cache_get_field_content(i, "object1model", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1Model] = strval(szResult);

				cache_get_field_content(i, "object1x", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1Pos][0] = floatstr(szResult);

				cache_get_field_content(i, "object1y", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1Pos][1] = floatstr(szResult);

				cache_get_field_content(i, "object1z", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1Pos][2] = floatstr(szResult);

				cache_get_field_content(i, "object1rx", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1RPos][0] = floatstr(szResult);

				cache_get_field_content(i, "object1ry", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1RPos][1] = floatstr(szResult);

				cache_get_field_content(i, "object1rz", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject1RPos][2] = floatstr(szResult);

				cache_get_field_content(i, "object2model", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject2Model] = strval(szResult);

				cache_get_field_content(i, "object2x", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject2Pos][0] = floatstr(szResult);

				cache_get_field_content(i, "object2y", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject2Pos][1] = floatstr(szResult);

				cache_get_field_content(i, "object2z", szResult, MainPipeline);
		        FactionVehicleInfo[x][fObject2Pos][2] = floatstr(szResult);

				cache_get_field_content(i, "object2rx", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject2RPos][0] = floatstr(szResult);

				cache_get_field_content(i, "object2ry", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject2RPos][1] = floatstr(szResult);

				cache_get_field_content(i, "object2rz", szResult, MainPipeline);
				FactionVehicleInfo[x][fObject2RPos][2] = floatstr(szResult);
				if(FactionVehicleInfo[x][fModel] > 0)
				{
					FactionVehicleInfo[x][fScriptID] = CreateVehicle(FactionVehicleInfo[x][fModel], FactionVehicleInfo[x][fvPos][0], FactionVehicleInfo[x][fvPos][1], FactionVehicleInfo[x][fvPos][2], FactionVehicleInfo[x][fvPos][3], FactionVehicleInfo[x][fCol1], FactionVehicleInfo[x][fCol2], FactionVehicleInfo[x][fUpkeep]);
					LinkVehicleToInterior(FactionVehicleInfo[x][fScriptID], FactionVehicleInfo[x][fvINT]);
					SetVehicleVirtualWorld(FactionVehicleInfo[x][fScriptID], FactionVehicleInfo[x][fvVW]);
					if(strcmp(FactionVehicleInfo[x][fPlate], "0", true) != 0)
					{
					    SetVehicleNumberPlate(FactionVehicleInfo[x][fScriptID], FactionVehicleInfo[x][fPlate]);
	 				}
	 				SetVehicleToRespawn(FactionVehicleInfo[x][fScriptID]);
	 				SetVehicleHealth(FactionVehicleInfo[x][fScriptID], FactionVehicleInfo[x][fMaxHP]);
				}
			}
			if(rows > 0) printf("[LoadDynamicVehicles] %d vehicles loaded.", rows);
		}
	}
	return 1;
}
// This is the one copied from the NGRP DFU
/*
DisbandFaction(facid) {

	new
		i = 0,
		szQuery[128];

	while(factioninfo:i < factioninfo) {
		FactionInfo[facid][factioninfo:i++] = -1;
	}
	i = 0;

	while(i < MAX_FAC_DIVS) {
		FacDivs[facid][i++][0] = 0;
	}
	i = 0;

	while(i < MAX_FAC_RANKS) {
		FacRanks[facid][i++][0] = 0;
	}
	i = 0;

	while(i < MAX_FAC_WEAPONS) {
		FactionInfo[facid][fGun][i] = 0;
	}

	FactionInfo[facid][fName][0] = 0;
 SaveFaction(facid);

	foreach(Player, x) if(PlayerInfo[x][pMember] == facid || PlayerInfo[x][pLeader] == facid) {
		SendClientMessageEx(x, COLOR_WHITE, "Your group has been disbanded by an administrator. All members have been automatically removed.");
		PlayerInfo[x][pLeader] = -1;
		PlayerInfo[x][pMember] = -1;
		PlayerInfo[x][pRank] = 0;
		PlayerInfo[x][pDivision] = -1;
	}

	format(szQuery, sizeof szQuery, "UPDATE `accounts` SET `Member` = -1, `Leader` = -1, `Division` = -1, `Rank` = 0 WHERE `Member` = %i OR `Leader` = %i", facid);
	return mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "ii", SENDDATA_THREAD, facid);
}
*/

// Remake by -Phazd <3
stock DisbandFaction(facid)
{
	new szQuery[512], z;
	foreach(new i: Player) {
		if(PlayerInfo[i][pMember] == facid || PlayerInfo[i][pLeader] == facid) {
			SendClientMessageEx(i, COLOR_WHITE, "Your faction has been deleted by an Administrator. All members have been removed.");
			PlayerInfo[i][pMember] = 0;
			PlayerInfo[i][pLeader] = 0;
			PlayerInfo[i][pRank] = 0;
			PlayerInfo[i][pDivision] = -1;

		}
	}
	FactionInfo[facid][fType] = 0;
	FactionInfo[facid][fName][0] = 0;
	FactionInfo[facid][fMOTD] = 0;
	FactionInfo[facid][fBug] = -1;
	FactionInfo[facid][fRadio] = -1;
	FactionInfo[facid][fDRadio] = -1;
	FactionInfo[facid][fGovAnnounce] = -1;
	FactionInfo[facid][fSpikes] = -1;
	FactionInfo[facid][fBarricades] = -1;
	FactionInfo[facid][fCones] = -1;
	FactionInfo[facid][fFlares] = -1;
	FactionInfo[facid][fBarrels] = -1;
	FactionInfo[facid][fFreeNameChange] = -1;
	FactionInfo[facid][fLocker] = -1;
	FactionInfo[facid][fLockerVW] = 0;
	FactionInfo[facid][fLockerPos][0] = 0;
	FactionInfo[facid][fLockerPos][1] = 0;
	FactionInfo[facid][fLockerPos][2] = 0;
	FactionInfo[facid][fDutyColor] = 16777215;
	FactionInfo[facid][fRadioColor] = 16777215;
	FactionInfo[facid][fBudget] = 0;
	FactionInfo[facid][fBudgetPay] = 0;
	for(z = 0; z < MAX_FAC_RANKS; z++){  // ranks pay 0-9
	    FacRanks[facid][z][0] = 0;
	    FactionInfo[facid][fRankpay][z] = 0;
	}
	for(z = 0; z < MAX_FAC_WEAPONS; z++){  // ranks pay 0-9
	    FactionInfo[facid][fGun][z] = 0;
	}
	DestroyDynamic3DTextLabel(FactionInfo[facid][f3DText]);
	format(szQuery, sizeof szQuery, "UPDATE `accounts` SET `Member` = 0, `Leader` = 0, `Division` = -1, `Rank` = 0 WHERE `Member` = %i OR `Leader` = %i", facid);
	mysql_function_query(MainPipeline, szQuery, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	SaveFaction(facid);
}

stock SaveFaction(factionid){
    new string[2048];
	format(string, sizeof(string), "UPDATE `groups` SET \
		`type`=%i, \
		`name`='%s', \
		`motd`='%s', \
		`bug`=%i, \
		`radio`=%d, \
		`dradio`=%d, \
		`govaccounce`=%d, \
		`spikes`=%d, \
		`barricades`=%d, \
		`cones`=%d, \
		`flares`=%d, \
		`barrels`=%d, \
		`freenamechange`=%d,",
		FactionInfo[factionid][fType],
		FactionInfo[factionid][fName],
		FactionInfo[factionid][fMOTD],
		FactionInfo[factionid][fBug],
		FactionInfo[factionid][fRadio],
		FactionInfo[factionid][fDRadio],
		FactionInfo[factionid][fGovAnnounce],
		FactionInfo[factionid][fSpikes],
		FactionInfo[factionid][fBarricades],
		FactionInfo[factionid][fCones],
		FactionInfo[factionid][fFlares],
		FactionInfo[factionid][fBarrels],
		FactionInfo[factionid][fFreeNameChange]
	);

	format(string, sizeof(string), "%s \
		`locker`=%d, \
		`lockervw`=%d, \
	    `lockerposx`=%f, \
	    `lockerposy`=%f, \
	    `lockerposz`=%f, \
		`dutycolor`=%d, \
		`radiocolor`=%d, \
		`budget`=%d, \
		`budgetpayment`=%d, \
		`rank0`='%s', \
		`rank1`='%s', \
		`rank2`='%s', \
		`rank3`='%s', \
		`rank4`='%s', \
		`rank5`='%s', \
		`rank6`='%s', \
		`rank7`='%s', \
		`rank8`='%s', \
		`rank9`='%s' WHERE `id`=%d",
		string,
		FactionInfo[factionid][fLocker],
		FactionInfo[factionid][fLockerVW],
		FactionInfo[factionid][fLockerPos][0],
		FactionInfo[factionid][fLockerPos][1],
		FactionInfo[factionid][fLockerPos][2],
		FactionInfo[factionid][fDutyColor],
		FactionInfo[factionid][fRadioColor],
		FactionInfo[factionid][fBudget],
		FactionInfo[factionid][fBudgetPay],
		FacRanks[factionid][0],
		FacRanks[factionid][1],
		FacRanks[factionid][2],
		FacRanks[factionid][3],
		FacRanks[factionid][4],
		FacRanks[factionid][5],
		FacRanks[factionid][6],
		FacRanks[factionid][7],
		FacRanks[factionid][8],
  		FacRanks[factionid][9],
  		factionid
	);

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

    format(string, sizeof(string), "UPDATE `groups` SET \
		`rank0pay`=%d, \
		`rank1pay`=%d, \
		`rank2pay`=%d, \
		`rank3pay`=%d, \
		`rank4pay`=%d, \
		`rank5pay`=%d, \
		`rank6pay`=%d, \
		`rank7pay`=%d, \
		`rank8pay`=%d, \
		`rank9pay`=%d, \
		`div0`='%s', \
		`div1`='%s', \
		`div2`='%s',",
		FactionInfo[factionid][fRankpay][0],
		FactionInfo[factionid][fRankpay][1],
		FactionInfo[factionid][fRankpay][2],
		FactionInfo[factionid][fRankpay][3],
		FactionInfo[factionid][fRankpay][4],
		FactionInfo[factionid][fRankpay][5],
		FactionInfo[factionid][fRankpay][6],
		FactionInfo[factionid][fRankpay][7],
		FactionInfo[factionid][fRankpay][8],
		FactionInfo[factionid][fRankpay][9],
		FacDivs[factionid][0],
		FacDivs[factionid][1],
  		FacDivs[factionid][2]
	);

	format(string, sizeof(string), "%s \
		`div3`='%s', \
		`div4`='%s', \
		`gun0`=%d, \
		`gun1`=%d, \
		`gun2`=%d, \
		`gun3`=%d, \
		`gun4`=%d, \
		`gun5`=%d, \
		`gun6`=%d, \
		`gun7`=%d, \
		`gun8`=%d, \
		`gun9`=%d WHERE `id`=%d",
		string,
		FacDivs[factionid][3],
		FacDivs[factionid][4],
		FactionInfo[factionid][fGun][0],
		FactionInfo[factionid][fGun][1],
		FactionInfo[factionid][fGun][2],
		FactionInfo[factionid][fGun][3],
		FactionInfo[factionid][fGun][4],
		FactionInfo[factionid][fGun][5],
		FactionInfo[factionid][fGun][6],
		FactionInfo[factionid][fGun][7],
		FactionInfo[factionid][fGun][8],
		FactionInfo[factionid][fGun][9],
		factionid
	);

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}


/*stock SaveFaction(factionid){
    new string[2048];
	format(string, sizeof(string), "UPDATE `groups` SET \
		`type`=%d, \
		`name`='%s', \
		`motd`='%s', \
		`bug`=%d, \
		`radio`=%d, \
		`dradio`=%d, \
		`govaccounce`=%d, \
		`spikes`=%d, \
		`barricades`=%d, \
		`cones`=%d, \
		`flares`=%d, \
		`barrels`=%d, \
		`freenamechange`=%d,",
		FactionInfo[factionid][fType],
		FactionInfo[factionid][fName],
		FactionInfo[factionid][fMOTD],
		FactionInfo[factionid][fBug],
		FactionInfo[factionid][fRadio],
		FactionInfo[factionid][fDRadio],
		FactionInfo[factionid][fGovAnnounce],
		FactionInfo[factionid][fSpikes],
		FactionInfo[factionid][fBarricades],
		FactionInfo[factionid][fCones],
		FactionInfo[factionid][fFlares],
		FactionInfo[factionid][fBarrels],
		FactionInfo[factionid][fFreeNameChange]
	);

	format(string, sizeof(string), "%s \
		`dutycolor`=%d, \
		`radiocolor`=%d, \
		`budget`=%d, \
		`budgetpayment`=%d, \
		`rank0`='%s', \
		`rank1`='%s', \
		`rank2`='%s', \
		`rank3`='%s', \
		`rank4`='%s', \
		`rank5`='%s', \
		`rank6`='%s', \
		`rank7`='%s', \
		`rank8`='%s', \
		`rank9`='%s' WHERE `id`=%d",
		string,
		FactionInfo[factionid][fDutyColor],
		FactionInfo[factionid][fRadioColor],
		FactionInfo[factionid][fBudget],
		FactionInfo[factionid][fBudgetPay],
		FacRanks[factionid][0],
		FacRanks[factionid][1],
		FacRanks[factionid][2],
		FacRanks[factionid][3],
		FacRanks[factionid][4],
		FacRanks[factionid][5],
		FacRanks[factionid][6],
		FacRanks[factionid][7],
		FacRanks[factionid][8],
  		FacRanks[factionid][9],
  		factionid
	);

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

    format(string, sizeof(string), "UPDATE `groups` SET \
		`rank0pay`=%d, \
		`rank1pay`=%d, \
		`rank2pay`=%d, \
		`rank3pay`=%d, \
		`rank4pay`=%d, \
		`rank5pay`=%d, \
		`rank6pay`=%d, \
		`rank7pay`=%d, \
		`rank8pay`=%d, \
		`rank9pay`=%d, \
		`div0`='%s', \
		`div1`='%s', \
		`div2`='%s',",
		FactionInfo[factionid][fRankpay][0],
		FactionInfo[factionid][fRankpay][1],
		FactionInfo[factionid][fRankpay][2],
		FactionInfo[factionid][fRankpay][3],
		FactionInfo[factionid][fRankpay][4],
		FactionInfo[factionid][fRankpay][5],
		FactionInfo[factionid][fRankpay][6],
		FactionInfo[factionid][fRankpay][7],
		FactionInfo[factionid][fRankpay][8],
		FactionInfo[factionid][fRankpay][9],
		FacDivs[factionid][0],
		FacDivs[factionid][1],
		FacDivs[factionid][2]
	);

	format(string, sizeof(string), "%s \
		`div3`='%s', \
		`div4`='%s', \
		`gun0`=%d, \
		`gun1`=%d, \
		`gun2`=%d, \
		`gun3`=%d, \
		`gun4`=%d, \
		`gun5`=%d, \
		`gun6`=%d, \
		`gun7`=%d, \
		`gun8`=%d, \
		`gun9`=%d WHERE `id`=%d",
		string,
		FacDivs[factionid][3],
		FacDivs[factionid][4],
		FactionInfo[factionid][fGun][0],
		FactionInfo[factionid][fGun][1],
		FactionInfo[factionid][fGun][2],
		FactionInfo[factionid][fGun][3],
		FactionInfo[factionid][fGun][4],
		FactionInfo[factionid][fGun][5],
		FactionInfo[factionid][fGun][6],
		FactionInfo[factionid][fGun][7],
		FactionInfo[factionid][fGun][8],
		FactionInfo[factionid][fGun][9],
		factionid
	);

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}
*/
stock SaveFactionVehicle(fvehid){
    new string[2048];
	format(string, sizeof(string), "UPDATE `groupvehicles` SET \
		`disabled`=%d, \
		`groupid`=%d, \
		`groupdivid`=%d, \
		`model`=%d, \
		`plate`='%s', \
		`maxhp`=%.1f, \
		`fuel`=%d, \
		`col1`=%d, \
		`col2`=%d, \
		`x`=%f, \
		`y`=%f, \
		`z`=%f, \
		`rot`=%f,",
		FactionVehicleInfo[fvehid][fDisabled],
		FactionVehicleInfo[fvehid][fGroupID],
		FactionVehicleInfo[fvehid][fGroupDivID],
		FactionVehicleInfo[fvehid][fModel],
		FactionVehicleInfo[fvehid][fPlate],
		FactionVehicleInfo[fvehid][fMaxHP],
		FactionVehicleInfo[fvehid][fFuel],
		FactionVehicleInfo[fvehid][fCol1],
		FactionVehicleInfo[fvehid][fCol2],
		FactionVehicleInfo[fvehid][fvPos][0],
		FactionVehicleInfo[fvehid][fvPos][1],
		FactionVehicleInfo[fvehid][fvPos][2],
		FactionVehicleInfo[fvehid][fvPos][3]
	);

	format(string, sizeof(string), "%s \
		`vw`=%d, \
		`int`=%d, \
		`upkeep`=%d, \
		`object1model`=%d, \
		`object1x`=%f, \
		`object1y`=%f, \
		`object1z`=%f, \
		`object1rx`=%f, \
		`object1ry`=%f, \
		`object1rz`=%f, \
		`object2model`=%d, \
		`object2x`=%f, \
		`object2y`=%f, \
		`object2z`=%f WHERE `id`=%d",
		string,
		FactionVehicleInfo[fvehid][fvVW],
		FactionVehicleInfo[fvehid][fvINT],
		FactionVehicleInfo[fvehid][fUpkeep],
		FactionVehicleInfo[fvehid][fObject1Model],
		FactionVehicleInfo[fvehid][fObject1Pos][0],
		FactionVehicleInfo[fvehid][fObject1Pos][1],
		FactionVehicleInfo[fvehid][fObject1Pos][2],
		FactionVehicleInfo[fvehid][fObject1RPos][0],
		FactionVehicleInfo[fvehid][fObject1RPos][1],
		FactionVehicleInfo[fvehid][fObject1RPos][2],
		FactionVehicleInfo[fvehid][fObject2Model],
		FactionVehicleInfo[fvehid][fObject2Pos][0],
		FactionVehicleInfo[fvehid][fObject2Pos][1],
  		FactionVehicleInfo[fvehid][fObject2Pos][2],
  		fvehid
	);

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

    format(string, sizeof(string), "UPDATE `groupvehicles` SET \
		`object2rx`=%f, \
		`object2ry`=%f, \
		`object2rz`=%f, \
		`mod0`='%d', \
		`mod1`='%d', \
		`mod2`=%d, \
		`mod3`=%d, \
		`mod4`=%d, \
		`mod5`=%d, \
		`mod6`=%d, \
		`mod7`=%d, \
		`mod8`=%d, \
		`mod9`=%d,",
		FactionVehicleInfo[fvehid][fObject2RPos][0],
		FactionVehicleInfo[fvehid][fObject2RPos][1],
		FactionVehicleInfo[fvehid][fObject2RPos][2],
		FactionVehicleInfo[fvehid][fvMod][0],
		FactionVehicleInfo[fvehid][fvMod][1],
		FactionVehicleInfo[fvehid][fvMod][2],
		FactionVehicleInfo[fvehid][fvMod][3],
		FactionVehicleInfo[fvehid][fvMod][4],
		FactionVehicleInfo[fvehid][fvMod][5],
		FactionVehicleInfo[fvehid][fvMod][6],
		FactionVehicleInfo[fvehid][fvMod][7],
		FactionVehicleInfo[fvehid][fvMod][8],
		FactionVehicleInfo[fvehid][fvMod][9]
	);

	format(string, sizeof(string), "%s \
		`mod10`=%d, \
		`mod11`=%d, \
		`mod12`=%d, \
		`mod13`=%d, \
		`mod14`=%d WHERE `id`=%d",
		string,
		FactionVehicleInfo[fvehid][fvMod][10],
		FactionVehicleInfo[fvehid][fvMod][11],
		FactionVehicleInfo[fvehid][fvMod][12],
		FactionVehicleInfo[fvehid][fvMod][13],
		FactionVehicleInfo[fvehid][fvMod][14],
		fvehid
	);
}

stock DeleteFactionVehicle(fvehid)
{
	FactionVehicleInfo[fvehid][fDisabled] = 0;
	FactionVehicleInfo[fvehid][fGroupID] = 0;
	FactionVehicleInfo[fvehid][fGroupDivID] = 0;
	FactionVehicleInfo[fvehid][fModel] = 0;
	//FactionVehicleInfo[fvehid][fPlate] = 0;
	FactionVehicleInfo[fvehid][fMaxHP] = 1000.0;
	FactionVehicleInfo[fvehid][fFuel] = 100;
	FactionVehicleInfo[fvehid][fCol1] = 0;
	FactionVehicleInfo[fvehid][fCol2] = 0;
	FactionVehicleInfo[fvehid][fvPos][0] = 0;
	FactionVehicleInfo[fvehid][fvPos][1] = 0;
	FactionVehicleInfo[fvehid][fvPos][2] = 0;
	FactionVehicleInfo[fvehid][fvPos][3] = 0;

	FactionVehicleInfo[fvehid][fvVW] = 0;
	FactionVehicleInfo[fvehid][fvINT] = 0;
	FactionVehicleInfo[fvehid][fUpkeep] = 5000;
	FactionVehicleInfo[fvehid][fObject1Model] = 0;
	FactionVehicleInfo[fvehid][fObject1Pos][0] = 0;
	FactionVehicleInfo[fvehid][fObject1Pos][1] = 0;
	FactionVehicleInfo[fvehid][fObject1Pos][2] = 0;
	FactionVehicleInfo[fvehid][fObject1RPos][0] = 0;
	FactionVehicleInfo[fvehid][fObject1RPos][1] = 0;
	FactionVehicleInfo[fvehid][fObject1RPos][2] = 0;
	FactionVehicleInfo[fvehid][fObject2Model] = 0;
	FactionVehicleInfo[fvehid][fObject2Pos][0] = 0;
	FactionVehicleInfo[fvehid][fObject2Pos][1] = 0;
	FactionVehicleInfo[fvehid][fObject2Pos][2] = 0;

	FactionVehicleInfo[fvehid][fObject2RPos][0] = 0;
	FactionVehicleInfo[fvehid][fObject2RPos][1] = 0;
	FactionVehicleInfo[fvehid][fObject2RPos][2] = 0;
	FactionVehicleInfo[fvehid][fvMod][0] = 0;
	FactionVehicleInfo[fvehid][fvMod][1] = 0;
	FactionVehicleInfo[fvehid][fvMod][2] = 0;
	FactionVehicleInfo[fvehid][fvMod][3] = 0;
	FactionVehicleInfo[fvehid][fvMod][4] = 0;
	FactionVehicleInfo[fvehid][fvMod][5] = 0;
	FactionVehicleInfo[fvehid][fvMod][6] = 0;
	FactionVehicleInfo[fvehid][fvMod][7] = 0;
	FactionVehicleInfo[fvehid][fvMod][8] = 0;
	FactionVehicleInfo[fvehid][fvMod][9] = 0;

	FactionVehicleInfo[fvehid][fvMod][10] = 0;
	FactionVehicleInfo[fvehid][fvMod][11] = 0;
	FactionVehicleInfo[fvehid][fvMod][12] = 0;
	FactionVehicleInfo[fvehid][fvMod][13] = 0;
	FactionVehicleInfo[fvehid][fvMod][14] = 0;
	SaveFactionVehicle(fvehid);
	DestroyVehicle(FactionVehicleInfo[fvehid][fScriptID]);
	FactionVehicleInfo[fvehid][fScriptID] = -1;
}

stock RefreshFactionVehicle(fvehid)
{
	DestroyVehicle(FactionVehicleInfo[fvehid][fScriptID]);
	FactionVehicleInfo[fvehid][fScriptID] = CreateVehicle(FactionVehicleInfo[fvehid][fModel], FactionVehicleInfo[fvehid][fvPos][0], FactionVehicleInfo[fvehid][fvPos][1], FactionVehicleInfo[fvehid][fvPos][2], FactionVehicleInfo[fvehid][fvPos][3], FactionVehicleInfo[fvehid][fCol1], FactionVehicleInfo[fvehid][fCol2], FactionVehicleInfo[fvehid][fUpkeep]);
	SetVehicleHealth(FactionVehicleInfo[fvehid][fScriptID], FactionVehicleInfo[fvehid][fMaxHP]);
}

/*stock AddDynamicVehObject1(fvehid, obj)
{
	FactionVehicleInfo[fvehid][fObject1Model] = obj;
 	FactionVehicleInfo[fvehid][fObject1] = CreateDynamicObject(obj, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
 	AttachDynamicObjectToVehicle(FactionVehicleInfo[fvehid][fObject1], FactionVehicleInfo[fvehid][fScriptID], FactionVehicleInfo[fvehid][fObject1Pos][0], FactionVehicleInfo[fvehid][fObject1Pos][1], FactionVehicleInfo[fvehid][fObject1Pos][2], FactionVehicleInfo[fvehid][fObject1RPos][0], FactionVehicleInfo[fvehid][fObject1RPos][1], FactionVehicleInfo[fvehid][fObject1RPos][2]);

}
*/

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	printf("[MySQL] Query Error - (ErrorID: %d) (Handle: %d)",  errorid, connectionHandle);
	print("[MySQL] Check /logs/querydump.log to review the query that threw the error.");
	SQL_Log(query, error);

	if(errorid == 2013 || errorid == 2014 || errorid == 2006 || errorid == 2027 || errorid == 2055)
	{
		print("[MySQL] Connection Error Detected in Threaded Query");
		//mysql_query(query, resultid, extraid, MainPipeline);
	}
}

// Custom Functions
// g_mysql_Init()
// Description: Called with Gamemode Init.
stock g_mysql_Init()
{
	new SQL_HOST[64], SQL_DB[64], SQL_USER[32], SQL_PASS[128], iValue;
	new SQL_SHOST[64], SQL_SDB[64], SQL_SUSER[32], SQL_SPASS[128];
	new fileString[128], File: fileHandle = fopen("mysql.cfg", io_read);

	while(fread(fileHandle, fileString, sizeof(fileString))) {
		if(ini_GetValue(fileString, "HOST", SQL_HOST, sizeof(SQL_HOST))) continue;
		if(ini_GetValue(fileString, "DB", SQL_DB, sizeof(SQL_DB))) continue;
		if(ini_GetValue(fileString, "USER", SQL_USER, sizeof(SQL_USER))) continue;
		if(ini_GetValue(fileString, "PASS", SQL_PASS, sizeof(SQL_PASS))) continue;
		if(ini_GetValue(fileString, "SHOST", SQL_SHOST, sizeof(SQL_SHOST))) continue;
		if(ini_GetValue(fileString, "SDB", SQL_SDB, sizeof(SQL_SDB))) continue;
		if(ini_GetValue(fileString, "SUSER", SQL_SUSER, sizeof(SQL_SUSER))) continue;
		if(ini_GetValue(fileString, "SPASS", SQL_SPASS, sizeof(SQL_SPASS))) continue;
		if(ini_GetInt(fileString, "SERVER", servernumber)) continue;
		if(ini_GetInt(fileString, "DEBUG", iValue)) continue;
	}
	fclose(fileHandle);

	mysql_debug(2);
	MainPipeline = mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
	setproperty(.name = "pipeline", .value = MainPipeline);

	printf("[MySQL] (Main Pipelines) Connecting to %s...", SQL_HOST);

	if(mysql_ping(MainPipeline) == -1)
	{
		printf("[MySQL] (MainPipeline) Fatal Error! Could not connect to MySQL: Host %s - DB: %s - User: %s", SQL_HOST, SQL_DB, SQL_USER);
		print("[MySQL] Note: Make sure that you have provided the correct connection credentials.");
		SendRconCommand("exit");
	}
	else
	{
		print("[MySQL] (MainPipeline) Connection successful toward MySQL Database Server!");
	}

	#if defined SHOPAUTOMATED
	ShopPipeline = mysql_connect(SQL_SHOST, SQL_SUSER, SQL_SDB, SQL_SPASS);

	printf("[MySQL] (Shop Pipelines) Connecting to %s...", SQL_SHOST);

	if(mysql_ping(ShopPipeline) == -1)
	{
		printf("[MySQL] (ShopPipeline) Fatal Error! Could not connect to MySQL: Host %s - DB: %s - User: %s", SQL_SHOST, SQL_SDB, SQL_SUSER);
		print("[MySQL] Note: Make sure that you have provided the correct connection credentials.");
		//SendRconCommand("exit");
	}
	else
	{
		print("[MySQL] (ShopPipeline) Connection successful toward MySQL Database Server!");
	}
	#endif

	return 1;
}

// g_mysql_Exit()
// Description: Called with Gamemode Exit.
stock g_mysql_Exit()
{
	mysql_close(MainPipeline);
	#if defined SHOPAUTOMATED
	mysql_close(ShopPipeline);
	#endif
	return 1;
}

// g_mysql_ReturnEscaped(string unEscapedString)
// Description: Takes a unescaped string and returns an escaped one.
stock g_mysql_ReturnEscaped(unEscapedString[], connectionHandle)
{
	new EscapedString[256];
	mysql_real_escape_string(unEscapedString, EscapedString, connectionHandle);
	return EscapedString;
}

// g_mysql_CheckConnection()
stock g_mysql_CheckConnection()
{
	mysql_ping(MainPipeline);
	#if defined SHOPAUTOMATED
	mysql_ping(ShopPipeline);
	#endif
	return 1;
}

// g_mysql_AccountLoginCheck(playerid)
stock g_mysql_AccountLoginCheck(playerid)
{
	ShowNoticeGUIFrame(playerid, 2);

	new string[128];

	format(string, sizeof(string), "SELECT `Username`,`Pass`,`Email` from accounts WHERE Username = '%s'", GetPlayerNameExt(playerid));
	mysql_function_query(MainPipeline, string, true, "OnQueryFinish", "iii", LOGIN_THREAD, playerid, g_arrQueryHandle{playerid});
	return 1;
}

// g_mysql_AccountAuthCheck(playerid)
g_mysql_AccountAuthCheck(playerid)
{
	new string[128];

	format(string, sizeof(string), "SELECT `Username` FROM `accounts` WHERE `Username` = '%s'", GetPlayerNameExt(playerid));
	mysql_function_query(MainPipeline, string, true, "OnQueryFinish", "iii", AUTH_THREAD, playerid, g_arrQueryHandle{playerid});

	// Reset the GUI
	SetPlayerJoinCamera(playerid);
	ClearChatbox(playerid);
	SetPlayerVirtualWorld(playerid, 0);

	return 1;
}

// g_mysql_AccountOnline(int playerid, int stateid)
stock g_mysql_AccountOnline(playerid, stateid)
{
	new string[128];
	format(string, sizeof(string), "UPDATE `accounts` SET `Online`=%d WHERE `id` = %d", stateid, GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
	return 1;
}

stock g_mysql_AccountOnlineReset()
{
	new string[128];
	format(string, sizeof(string), "UPDATE `accounts` SET `Online` = 0 WHERE `Online` = %d", servernumber);
	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	return 1;
}

// g_mysql_CreateAccount(int playerid, string accountPassword[])
// Description: Creates a new account in the database.
stock g_mysql_CreateAccount(playerid, accountPassword[])
{
	new string[256];
	new passbuffer[129];
	WP_Hash(passbuffer, sizeof(passbuffer), accountPassword);

	format(string, sizeof(string), "INSERT INTO `accounts` (`Username`, `Pass`) VALUES ('%s','%s')", GetPlayerNameExt(playerid), passbuffer);
	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", REGISTER_THREAD, playerid);
	TotalRegister++;
	g_mysql_AccountLoginCheck(playerid);
	return 1;
}

// g_mysql_LoadPVehiclePositions(playerid)
// Description: Loads vehicle positions if player has timed out.
stock g_mysql_LoadPVehiclePositions(playerid)
{
	new string[128];

	format(string, sizeof(string), "SELECT * FROM `pvehpositions` WHERE `id` = %d", PlayerInfo[playerid][pId]);
	mysql_function_query(MainPipeline, string, true, "OnQueryFinish", "iii", LOADPVEHPOS_THREAD, playerid, g_arrQueryHandle{playerid});
	return 1;
}

// g_mysql_LoadAccount(playerid)
// Description: Loads an account from database into memory.
stock g_mysql_LoadAccount(playerid)
{
	ShowNoticeGUIFrame(playerid, 3);

	new string[128];

	format(string, sizeof(string), "SELECT * FROM `accounts` WHERE `Username` = '%s'", GetPlayerNameExt(playerid));
 	mysql_function_query(MainPipeline, string, true, "OnQueryFinish", "iii", LOADUSERDATA_THREAD, playerid, g_arrQueryHandle{playerid});
	return 1;
}

// g_mysql_RemoveDumpFile(sqlid)
// Description: Removes a account's dump file. Helpful upon logoff.
stock g_mysql_RemoveDumpFile(sqlid)
{
	new pwnfile[128];
	format(pwnfile, sizeof(pwnfile), "/accdump/%d.dump", sqlid);

	if(fexist(pwnfile))
	{
		fremove(pwnfile);
		return 1;
	}
	return 0;
}

// g_mysql_SaveAccount(playerid)
// Description: Saves an account from memory into the database.
stock g_mysql_SaveAccount(playerid)
{
	new query[4528];

	format(query, sizeof(query), "UPDATE `accounts` SET \
		`IP` = '%s', \
		`Registered` = %d, \
		`ConnectedTime` = %d, \
		`Sex` = %d, \
		`Age` = %d, \
		`Band` = %d, \
		`PermBand` = %d, \
		`Warnings` = %d, \
		`Disabled` = %d, \
		`Level` = %d, \
		`AdminLevel` = %d, \
		`DonateRank` = %d, \
		`Respect` = %d, \
		`Money` = %d, \
		`Bank` = %d,",
		PlayerInfo[playerid][pIP],
		PlayerInfo[playerid][pReg],
		PlayerInfo[playerid][pConnectHours],
		PlayerInfo[playerid][pSex],
		PlayerInfo[playerid][pAge],
		PlayerInfo[playerid][pBanned],
		PlayerInfo[playerid][pPermaBanned],
		PlayerInfo[playerid][pWarns],
		PlayerInfo[playerid][pDisabled],
		PlayerInfo[playerid][pLevel],
		PlayerInfo[playerid][pAdmin],
		PlayerInfo[playerid][pDonateRank],
		PlayerInfo[playerid][pExp],
		GetPlayerCash(playerid),
		PlayerInfo[playerid][pAccount]
	);

	format(query, sizeof(query), "%s \
		`pHealth` = %f, \
		`pArmor` = %f, \
		`pSHealth` = %f, \
		`Int` = %d, \
		`VirtualWorld` = %d, \
		`Model` = %d, \
		`SPos_x` = %f, \
		`SPos_y` = %f, \
		`SPos_z` = %f, \
		`SPos_r` = %f, \
		`BanAppealer` = %d, \
		`PR` = %d, \
		`ShopTech` = %d, \
		`Undercover` = %d, \
		`TogReports` = %d,",
		query,
		PlayerInfo[playerid][pHealth],
		PlayerInfo[playerid][pArmor],
		PlayerInfo[playerid][pSHealth],
		PlayerInfo[playerid][pInt],
		PlayerInfo[playerid][pVW],
		PlayerInfo[playerid][pModel],
		PlayerInfo[playerid][pPos_x],
		PlayerInfo[playerid][pPos_y],
		PlayerInfo[playerid][pPos_z],
		PlayerInfo[playerid][pPos_r],
		PlayerInfo[playerid][pBanAppealer],
		PlayerInfo[playerid][pPR],
		PlayerInfo[playerid][pShopTech],
		PlayerInfo[playerid][pUndercover],
		PlayerInfo[playerid][pTogReports]
	);

	format(query, sizeof(query), "%s \
		`Radio` = %d, \
		`RadioFreq` = %d, \
		`UpgradePoints` = %d, \
		`Origin` = %d, \
		`Muted` = %d, \
		`Crimes` = %d, \
		`Accent` = %d, \
		`CHits` = %d, \
		`FHits` = %d, \
		`Arrested` = %d, \
		`Phonebook` = %d, \
		`LottoNr` = %d, \
		`Fishes` = %d, \
		`BiggestFish` = %d, \
		`Job` = %d,",
		query,
		PlayerInfo[playerid][pRadio],
		PlayerInfo[playerid][pRadioFreq],
		PlayerInfo[playerid][gPupgrade],
		PlayerInfo[playerid][pOrigin],
		PlayerInfo[playerid][pMuted],
		PlayerInfo[playerid][pCrimes],
		PlayerInfo[playerid][pAccent],
		PlayerInfo[playerid][pCHits],
		PlayerInfo[playerid][pFHits],
		PlayerInfo[playerid][pArrested],
		PlayerInfo[playerid][pPhoneBook],
		PlayerInfo[playerid][pLottoNr],
		PlayerInfo[playerid][pFishes],
		PlayerInfo[playerid][pBiggestFish],
		PlayerInfo[playerid][pJob]
	);

	format(query, sizeof(query), "%s \
		`Job2` = %d, \
		`Paycheck` = %d, \
		`HeadValue` = %d, \
		`JailTime` = %d, \
		`WRestricted` = %d, \
		`Materials` = %d, \
		`Crates` = %d, \
		`Pot` = %d, \
		`Crack` = %d, \
		`Leader` = %d, \
		`Member` = %d, \
		`Division` = %d, \
		`FMember` = %d,",
		query,
		PlayerInfo[playerid][pJob2],
		PlayerInfo[playerid][pPayCheck],
		PlayerInfo[playerid][pHeadValue],
		PlayerInfo[playerid][pJailTime],
		PlayerInfo[playerid][pWRestricted],
		PlayerInfo[playerid][pMats],
		PlayerInfo[playerid][pCrates],
		PlayerInfo[playerid][pPot],
		PlayerInfo[playerid][pCrack],
		PlayerInfo[playerid][pLeader],
		PlayerInfo[playerid][pMember],
		PlayerInfo[playerid][pDivision],
		PlayerInfo[playerid][pFMember]
	);

	format(query, sizeof(query), "%s \
		`Rank` = %d, \
		`DetSkill` = %d, \
		`SexSkill` = %d, \
		`BoxSkill` = %d, \
		`LawSkill` = %d, \
		`MechSkill` = %d, \
		`TruckSkill` = %d, \
		`DrugsSkill` = %d, \
		`ArmsSkill` = %d, \
		`SmugglerSkill` = %d, \
		`FishSkill` = %d, \
		`CheckCash` = %d,",
		query,
		PlayerInfo[playerid][pRank],
		PlayerInfo[playerid][pDetSkill],
		PlayerInfo[playerid][pSexSkill],
		PlayerInfo[playerid][pBoxSkill],
		PlayerInfo[playerid][pLawSkill],
		PlayerInfo[playerid][pMechSkill],
		PlayerInfo[playerid][pTruckSkill],
		PlayerInfo[playerid][pDrugsSkill],
		PlayerInfo[playerid][pArmsSkill],
		PlayerInfo[playerid][pSmugSkill],
		PlayerInfo[playerid][pFishSkill],
		PlayerInfo[playerid][pCheckCash]
	);

	format(query, sizeof(query), "%s \
		`Checks` = %d, \
		`BoatLic` = %d, \
		`FlyLic` = %d, \
		`GunLic` = %d, \
		`FishLic` = %d, \
		`FishSkill` = %d, \
		`FightingStyle` = %d, \
		`PhoneNr` = %d, \
		`Apartment` = %d, \
		`Apartment2` = %d, \
		`Renting` = %d, \
		`CarLic` = %d \
		WHERE `id` = '%d'",
		query,
		PlayerInfo[playerid][pChecks],
		PlayerInfo[playerid][pBoatLic],
		PlayerInfo[playerid][pFlyLic],
		PlayerInfo[playerid][pGunLic],
		PlayerInfo[playerid][pFishLic],
		PlayerInfo[playerid][pFishSkill],
		PlayerInfo[playerid][pFightStyle],
		PlayerInfo[playerid][pPnumber],
		PlayerInfo[playerid][pPhousekey],
		PlayerInfo[playerid][pPhousekey2],
		PlayerInfo[playerid][pRenting],
		PlayerInfo[playerid][pCarLic],
		GetPlayerSQLId(playerid)
	);

	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);

	format(query, sizeof(query), "UPDATE `accounts` SET \
		`DrugsTime` = %d, \
		`LawyerTime` = %d, \
		`LawyerFreeTime` = %d, \
		`MechTime` = %d, \
		`SexTime` = %d, \
		`PayDay` = %d, \
		`PayDayHad` = %d, \
		`CDPlayer` = %d, \
		`Dice` = %d, \
		`Spraycan` = %d, \
		`Rope` = %d, \
		`Cigars` = %d, \
		`Sprunk` = %d, \
		`Bombs` = %d, \
		`Wins` = %d,",
		PlayerInfo[playerid][pDrugsTime],
		PlayerInfo[playerid][pLawyerTime],
		PlayerInfo[playerid][pLawyerFreeTime],
		PlayerInfo[playerid][pMechTime],
		PlayerInfo[playerid][pSexTime],
		PlayerInfo[playerid][pConnectSeconds],
		PlayerInfo[playerid][pPayDayHad],
		PlayerInfo[playerid][pCDPlayer],
		PlayerInfo[playerid][pDice],
		PlayerInfo[playerid][pSpraycan],
		PlayerInfo[playerid][pRope],
		PlayerInfo[playerid][pCigar],
		PlayerInfo[playerid][pSprunk],
		PlayerInfo[playerid][pBombs],
		PlayerInfo[playerid][pWins]
	);

	for(new i = 0; i < 12; i++)
	{
		format(query, sizeof(query), "%s `Gun%d` = %d,", query, i, PlayerInfo[playerid][pGuns][i]);
	}

	format(query, sizeof(query), "%s \
		`Loses` = %d, \
		`Tutorial` = %d, \
		`OnDuty` = %d, \
		`Hospital` = %d, \
		`Married` = %d, \
		`MarriedTo` = '%s', \
		`ContractBy` = '%s', \
		`ContractDetail` = '%s', \
		`WantedLevel` = %d, \
		`Insurance` = %d, \
		`NewMuted` = %d, \
		`NewMutedTotal` = %d, \
		`AdMuted` = %d, \
		`AdMutedTotal` = %d,",
		query,
		PlayerInfo[playerid][pLoses],
		PlayerInfo[playerid][pTut],
		PlayerInfo[playerid][pDuty],
		PlayerInfo[playerid][pHospital],
		PlayerInfo[playerid][pMarried],
		PlayerInfo[playerid][pMarriedTo],
		PlayerInfo[playerid][pContractBy],
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pContractDetail], MainPipeline),
		PlayerInfo[playerid][pWantedLevel],
		PlayerInfo[playerid][pInsurance],
		PlayerInfo[playerid][pNMute],
		PlayerInfo[playerid][pNMuteTotal],
		PlayerInfo[playerid][pADMute],
		PlayerInfo[playerid][pADMuteTotal]
	);

	format(query, sizeof(query), "%s \
		`HelpMute` = %d, \
		`Helper` = %d, \
		`ReportMuted` = %d, \
		`ReportMutedTotal` = %d, \
		`ReportMutedTime` = %d, \
		`DMRMuted` = %d, \
		`VIPMuted` = %d, \
		`VIPMutedTime` = %d, \
		`GiftTime` = %d, \
		`AdvisorDutyHours` = %d, \
		`AcceptedHelp` = %d, \
		`AcceptReport` = %d, \
		`TrashReport` = %d, \
		`FactionModerator` = %d, \
		`GangModerator` = %d, \
		`GangWarn` = %d,",
		query,
		PlayerInfo[playerid][pHelpMute],
		PlayerInfo[playerid][pHelper],
		PlayerInfo[playerid][pRMuted],
		PlayerInfo[playerid][pRMutedTotal],
		PlayerInfo[playerid][pRMutedTime],
		PlayerInfo[playerid][pDMRMuted],
		PlayerInfo[playerid][pVMuted],
		PlayerInfo[playerid][pVMutedTime],
		PlayerInfo[playerid][pGiftTime],
		PlayerInfo[playerid][pDutyHours],
		PlayerInfo[playerid][pAcceptedHelp],
		PlayerInfo[playerid][pAcceptReport],
		PlayerInfo[playerid][pTrashReport],
		PlayerInfo[playerid][pFactionModerator],
		PlayerInfo[playerid][pGangModerator],
		PlayerInfo[playerid][pGangWarn]
	);

	format(query, sizeof(query), "%s \
		`FactionBanned` = %d, \
		`CSFBanned` = %d, \
		`VIPInviteDay` = %d, \
		`TempVIP` = %d, \
		`BuddyInvite` = %d, \
		`Tokens` = %d, \
		`PTokens` = %d, \
		`TriageTime` = %d, \
		`PrisonedBy` = '%s', \
		`PrisonReason` = '%s', \
		`Flag` = '%s', \
		`TaxiLicense` = %d, \
		`TicketTime` = %d, \
		`Screwdriver` = %d, \
		`Smslog` = %d, \
		`Speedo` = %d \
		WHERE `id` = '%d'",
		query,
		PlayerInfo[playerid][pFactionBanned],
		PlayerInfo[playerid][pCSFBanned],
		PlayerInfo[playerid][pVIPInviteDay],
		PlayerInfo[playerid][pTempVIP],
		PlayerInfo[playerid][pBuddyInvited],
		PlayerInfo[playerid][pTokens],
		PlayerInfo[playerid][pPaintTokens],
		PlayerInfo[playerid][pTriageTime],
		PlayerInfo[playerid][pPrisonedBy],
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pPrisonReason], MainPipeline),
		//PlayerInfo[playerid][pPrisonReason],
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pFlag], MainPipeline),
		PlayerInfo[playerid][pTaxiLicense],
		PlayerInfo[playerid][pTicketTime],
		PlayerInfo[playerid][pScrewdriver],
		PlayerInfo[playerid][pSmslog],
		PlayerInfo[playerid][pSpeedo],
		GetPlayerSQLId(playerid)
	);

	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);

	format(query, sizeof(query), "UPDATE `accounts` SET \
		`Wristwatch` = %d, \
		`Surveillance` = %d, \
		`Tire` = %d, \
		`Firstaid` = %d, \
		`Rccam` = %d, \
		`Receiver` = %d, \
		`GPS` = %d, \
		`Sweep` = %d, \
		`SweepLeft` = %d, \
		`Bugged` = %d,",
		PlayerInfo[playerid][pWristwatch],
		PlayerInfo[playerid][pSurveillance],
		PlayerInfo[playerid][pTire],
		PlayerInfo[playerid][pFirstaid],
		PlayerInfo[playerid][pRccam],
		PlayerInfo[playerid][pReceiver],
		PlayerInfo[playerid][pGPS],
		PlayerInfo[playerid][pSweep],
		PlayerInfo[playerid][pSweepLeft],
		PlayerInfo[playerid][pBugged]
	);

	format(query, sizeof(query), "%s \
	    `pWExists` = %d, \
		`pWX` = %f, \
		`pWY` = %f, \
		`pWZ` = %f, \
		`pWVW` = %d, \
		`pWInt` = %d, \
		`pWValue` = %d, \
		`pWSeeds` = %d, \
		`Warrants` = %d, \
		`JudgeJailTime` = %d, \
		`JudgeJailType` = %d, \
		`BeingSentenced` = %d, \
		`ProbationTime` = %d, \
		`DMKills` = %d,",
		query,
		PlayerInfo[playerid][pWeedObject],
		PlayerInfo[playerid][pWeedPos][0],
		PlayerInfo[playerid][pWeedPos][1],
		PlayerInfo[playerid][pWeedPos][2],
		PlayerInfo[playerid][pWeedVW],
		PlayerInfo[playerid][pWeedInt],
		PlayerInfo[playerid][pWeedGrowth],
		PlayerInfo[playerid][pWSeeds],
		PlayerInfo[playerid][pWarrant],
		PlayerInfo[playerid][pJudgeJailTime],
		PlayerInfo[playerid][pJudgeJailType],
		PlayerInfo[playerid][pBeingSentenced],
		PlayerInfo[playerid][pProbationTime],
		PlayerInfo[playerid][pDMKills]
	);

	format(query, sizeof(query), "%s \
	    `OrderConfirmed` = %d, \
		`FreezeHouse` = %d, \
		`FreezeCar` = %d, \
		`Firework` = %d, \
		`Boombox` = %d, \
		`Hydration` = %d, \
		`DoubleEXP` = %d, \
		`EXPToken` = %d, \
		`RacePlayerLaps` = %d, \
		`Ringtone` = %d,",
		query,
		PlayerInfo[playerid][pOrderConfirmed],
		PlayerInfo[playerid][pFreezeHouse],
		PlayerInfo[playerid][pFreezeCar],
		PlayerInfo[playerid][pFirework],
		PlayerInfo[playerid][pBoombox],
		PlayerInfo[playerid][pHydration],
	 	PlayerInfo[playerid][pDoubleEXP],
		PlayerInfo[playerid][pEXPToken],
		PlayerInfo[playerid][pRacePlayerLaps],
		PlayerInfo[playerid][pRingtone]
	);

	format(query, sizeof(query), "%s \
		`Order` = %d, \
		`CallsAccepted` = %d, \
		`PatientsDelivered` = %d, \
		`LiveBanned` = %d, \
		`FreezeBank` = %d, \
		`VIPM` = %d, \
		`VIPMO` = %d, \
		`VIPExpire` = %d, \
		`GVip` = %d, \
		`SeniorModerator` = %d, \
		`Watchdog` = %d, \
		`VIPSold` = %d, \
		`GoldBoxTokens` = %d, \
		`DrawChance` = %d, \
		`RewardHours` = %.2f, \
		`LastCarWarning` = %d, \
		`CarWarns` = %d, \
		`Flagged` = %d,",
		query,
		PlayerInfo[playerid][pOrder],
		PlayerInfo[playerid][pCallsAccepted],
		PlayerInfo[playerid][pPatientsDelivered],
		PlayerInfo[playerid][pLiveBanned],
		PlayerInfo[playerid][pFreezeBank],
		PlayerInfo[playerid][pVIPM],
		PlayerInfo[playerid][pVIPMO],
		PlayerInfo[playerid][pVIPExpire],
		PlayerInfo[playerid][pGVip],
		PlayerInfo[playerid][pSMod],
		PlayerInfo[playerid][pWatchdog],
		PlayerInfo[playerid][pVIPSold],
		PlayerInfo[playerid][pGoldBoxTokens],
		PlayerInfo[playerid][pRewardDrawChance],
		PlayerInfo[playerid][pRewardHours],
		PlayerInfo[playerid][pRVehRestricted],
		PlayerInfo[playerid][pLastRVehWarn],
		PlayerInfo[playerid][pRVehWarns],
		PlayerInfo[playerid][pFlagged]
	);

	format(query, sizeof(query), "%s \
		`AdminDuty` = %d, \
		`AuthCode` = '%s', \
		`MainOwner` = %d, \
		`Infractions` = %d \
		WHERE `id` = '%d'",
		query,
		PlayerInfo[playerid][pAdminDuty],
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pCode], MainPipeline),
		PlayerInfo[playerid][pMainOwner],
		PlayerInfo[playerid][pInfractions],
		GetPlayerSQLId(playerid)
	);
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);

	format(query, sizeof(query), "UPDATE `accounts` SET \
		`Smslog0` = '%s', \
		`Smslog1` = '%s', \
		`Smslog2` = '%s', \
		`Smslog3` = '%s', \
		`Smslog4` = '%s', \
		`Smslog5` = '%s', \
		`Smslog6` = '%s', \
		`Smslog7` = '%s', \
		`Smslog8` = '%s', \
		`Smslog9` = '%s',",
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog0], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog1], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog2], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog3], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog4], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog5], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog6], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog7], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog8], MainPipeline),
		g_mysql_ReturnEscaped(PlayerInfo[playerid][pSmslog9], MainPipeline)
	);

	format(query, sizeof(query), "%s \
		`KillLog0` = '%s', \
		`KillLog1` = '%s', \
		`KillLog2` = '%s', \
		`KillLog3` = '%s', \
		`KillLog4` = '%s', \
		`KillLog5` = '%s', \
		`KillLog6` = '%s', \
		`KillLog7` = '%s', \
		`KillLog8` = '%s', \
		`KillLog9` = '%s' \
		WHERE `id` = %d",
		query,
		PlayerInfo[playerid][pKillLog0],
		PlayerInfo[playerid][pKillLog1],
		PlayerInfo[playerid][pKillLog2],
		PlayerInfo[playerid][pKillLog3],
		PlayerInfo[playerid][pKillLog4],
		PlayerInfo[playerid][pKillLog5],
		PlayerInfo[playerid][pKillLog6],
		PlayerInfo[playerid][pKillLog7],
		PlayerInfo[playerid][pKillLog8],
		PlayerInfo[playerid][pKillLog9],
		GetPlayerSQLId(playerid)
	);

	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
	return 1;
}

// g_mysql_SavePlayerVehPositions(int playerid)
// Description: Saves a vehicle position for an account.
stock g_mysql_SavePlayerVehPositions(playerid)
{
	new query[2048];
	printf("%s saving their vehicle positions...", GetPlayerNameEx(playerid));

	// Tmp Variables since this will be called after disconnect.
	tmpPVASQLID[playerid] = GetPlayerSQLId(playerid);

	for(new v; v < MAX_PLAYERVEHICLES; v++) {
		if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			tmpPVAModelID[playerid][v] = PlayerVehicleInfo[playerid][v][pvModelId];
			GetVehiclePos(PlayerVehicleInfo[playerid][v][pvId], tmpPVAPos[playerid][v][0], tmpPVAPos[playerid][v][1], tmpPVAPos[playerid][v][2]);
			GetVehicleZAngle(PlayerVehicleInfo[playerid][v][pvId], tmpPVAPos[playerid][v][3]);
		}
	}

	format(query, sizeof(query), "SELECT `id` FROM `pvehpositions` WHERE `id`='%d'", GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, query, true, "OnQueryFinish", "iii", CHECKPVEHPOS_THREAD, playerid, g_arrQueryHandle{playerid});
}

// g_mysql_SaveVehicle(int playerid, int slotid)
// Description: Saves a account's specified vehicle slot.
stock g_mysql_SaveVehicle(playerid, slotid)
{
	new query[2048];
	printf("%s (%i) saving their %d (slot %i)...", GetPlayerNameEx(playerid), playerid, PlayerVehicleInfo[playerid][slotid][pvModelId], slotid);

	format(query, sizeof(query), "UPDATE `accounts` SET");
	format(query, sizeof(query), "%s `pv%dPosX` = %f,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPosX]);
	format(query, sizeof(query), "%s `pv%dPosY` = %f,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPosY]);
	format(query, sizeof(query), "%s `pv%dPosZ` = %f,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPosZ]);
	format(query, sizeof(query), "%s `pv%dPosAngle` = %f,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPosAngle]);
	format(query, sizeof(query), "%s `pv%dModelId` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvModelId]);
	format(query, sizeof(query), "%s `pv%dLock` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvLock]);
	format(query, sizeof(query), "%s `pv%dLocked` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvLocked]);
	format(query, sizeof(query), "%s `pv%dPaintJob` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPaintJob]);
	format(query, sizeof(query), "%s `pv%dColor1` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvColor1]);
	format(query, sizeof(query), "%s `pv%dColor2` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvColor2]);
	format(query, sizeof(query), "%s `pv%dPrice` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPrice]);
	format(query, sizeof(query), "%s `pv%dWeapon0` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvWeapons][0]);
	format(query, sizeof(query), "%s `pv%dWeapon1` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvWeapons][1]);
	format(query, sizeof(query), "%s `pv%dWeapon2` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvWeapons][2]);
	format(query, sizeof(query), "%s `pv%dLock` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvLock]);
	format(query, sizeof(query), "%s `pv%dWepUpgrade` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvWepUpgrade]);
	format(query, sizeof(query), "%s `pv%dFuel` = %f,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvFuel]);
	format(query, sizeof(query), "%s `pv%dImpound` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvImpounded]);
	format(query, sizeof(query), "%s `pv%dDisabled` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvDisabled]);
	format(query, sizeof(query), "%s `pv%dPlate` = '%s',", query, slotid, g_mysql_ReturnEscaped(PlayerVehicleInfo[playerid][slotid][pvPlate], MainPipeline));
	//format(query, sizeof(query), "%s `pv%dPlate` = '%s',", query, slotid, PlayerVehicleInfo[playerid][slotid][pvPlate]);
	format(query, sizeof(query), "%s `pv%dTicket` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvTicket]);
	format(query, sizeof(query), "%s `pv%dRestricted` = %d,", query, slotid, PlayerVehicleInfo[playerid][slotid][pvRestricted]);

	for(new m = 0; m < MAX_MODS; m++)
	{
		if(m == MAX_MODS-1)
		{
			format(query, sizeof(query), "%s `pv%dMod%d` = %d WHERE `id` = '%d'", query, slotid, m, PlayerVehicleInfo[playerid][slotid][pvMods][m], GetPlayerSQLId(playerid));
		}
		else
		{
			format(query, sizeof(query), "%s `pv%dMod%d` = %d,", query, slotid, m, PlayerVehicleInfo[playerid][slotid][pvMods][m]);
		}
	}
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
}

// g_mysql_SaveToys(int playerid, int slotid)
// Description: Saves a account's specified toy slot.
stock g_mysql_SaveToys(playerid, slotid)
{
	new query[2048];

	//printf("%s (%i) saving toy %i...", GetPlayerNameEx(playerid), playerid, slotid);

	format(query, sizeof(query), "UPDATE `accounts` SET");
	format(query, sizeof(query), "%s `pt%dModelID` = %d,", query, slotid, PlayerToyInfo[playerid][slotid][ptModelID]);
	format(query, sizeof(query), "%s `pt%dBone` = %d,", query, slotid, PlayerToyInfo[playerid][slotid][ptBone]);
	format(query, sizeof(query), "%s `pt%dPosX` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptPosX]);
	format(query, sizeof(query), "%s `pt%dPosY` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptPosY]);
	format(query, sizeof(query), "%s `pt%dPosZ` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptPosZ]);
	format(query, sizeof(query), "%s `pt%dRotX` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptRotX]);
	format(query, sizeof(query), "%s `pt%dRotY` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptRotY]);
	format(query, sizeof(query), "%s `pt%dRotZ` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptRotZ]);
	format(query, sizeof(query), "%s `pt%dScaX` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptScaleX]);
	format(query, sizeof(query), "%s `pt%dScaY` = %f,", query, slotid, PlayerToyInfo[playerid][slotid][ptScaleY]);
	format(query, sizeof(query), "%s `pt%dScaZ` = %f WHERE `id` = '%d'", query, slotid, PlayerToyInfo[playerid][slotid][ptScaleZ], GetPlayerSQLId(playerid));

    mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
}

// g_mysql_LoadMOTD()
// Description: Loads the MOTDs from the MySQL Database.
stock g_mysql_LoadMOTD()
{
	mysql_function_query(MainPipeline, "SELECT `gMOTD`,`aMOTD`,`vMOTD`,`cMOTD`,`pMOTD`,`ShopTechPay` FROM `misc`", true, "OnQueryFinish", "iii", LOADMOTDDATA_THREAD, INVALID_PLAYER_ID, -1);
}


stock g_mysql_SaveMOTD()
{
	new query[1024];

	format(query, sizeof(query), "UPDATE `misc` SET ");

	format(query, sizeof(query), "%s `gMOTD` = '%s',", query, g_mysql_ReturnEscaped(GlobalMOTD, MainPipeline));
	format(query, sizeof(query), "%s `aMOTD` = '%s',", query, g_mysql_ReturnEscaped(AdminMOTD, MainPipeline));
	format(query, sizeof(query), "%s `vMOTD` = '%s',", query, g_mysql_ReturnEscaped(VIPMOTD, MainPipeline));
	format(query, sizeof(query), "%s `cMOTD` = '%s',", query, g_mysql_ReturnEscaped(CAMOTD, MainPipeline));
	format(query, sizeof(query), "%s `pMOTD` = '%s',", query, g_mysql_ReturnEscaped(pMOTD, MainPipeline));
	format(query, sizeof(query), "%s `ShopTechPay` = '%.2f'", query, ShopTechPay);

	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

main()
{
}

//------------------------------------------------------------------------------------------------------

stock GiftPlayer(playerid, giveplayerid) // playerid = Gifter.  giveplayerid = gift receiver
{
	new string[128];
	if(playerid == MAX_PLAYERS || PlayerInfo[playerid][pAdmin] >= 2)
	{
		new randgift = Random(1, 100);
		if(randgift >= 1 && randgift <= 83)
		{
		    new gift = Random(1, 12);
		    if(gift == 1)
		    {
		        if(PlayerInfo[giveplayerid][pConnectHours] < 2 || PlayerInfo[giveplayerid][pWRestricted] > 0 || PlayerInfo[giveplayerid][pDonateRank] > 2) return GiftPlayer(playerid, giveplayerid);
		        GivePlayerValidWeapon(giveplayerid, 27, 60000);
		        GivePlayerValidWeapon(giveplayerid, 24, 60000);
		        GivePlayerValidWeapon(giveplayerid, 31, 60000);
		        GivePlayerValidWeapon(giveplayerid, 34, 60000);
		        GivePlayerValidWeapon(giveplayerid, 29, 60000);
		        SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a full weapon set!");
		        format(string, sizeof(string), "* %s (%d) was just gifted a full weapon set, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
		    else if(gift == 2)
		    {
		        if(PlayerInfo[giveplayerid][pDonateRank] > 2) return GiftPlayer(playerid, giveplayerid);
		        PlayerInfo[giveplayerid][pFirstaid]++;
		        SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a first aid kit!");
		        format(string, sizeof(string), "* %s (%d) was just gifted a first aid kit, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
		    else if(gift == 3)
		    {
		        PlayerInfo[giveplayerid][pMats] += 2000;
		        SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 2,000 materials!");
		        format(string, sizeof(string), "* %s (%d) was just gifted 2,000 materials, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
		    else if(gift == 4)
		    {
		        if(PlayerInfo[giveplayerid][pWarns] != 0)
		        {
		        	PlayerInfo[giveplayerid][pWarns]--;
		        	SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a single warning removal!");
		        	format(string, sizeof(string), "* %s (%d) was just gifted a single warning removal, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
					ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
				}
				else
				{
        			SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Random gift ended up in a removal of one warning - let's try again!");
        			GiftPlayer(playerid, giveplayerid);
				    return 1;
				}
		    }
		    else if(gift == 5)
		    {
				PlayerInfo[giveplayerid][pPot] += 50;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 50 grams of pot!");
				format(string, sizeof(string), "* %s (%d) was just gifted 50 grams of pot, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
		    else if(gift == 6)
		    {
		        PlayerInfo[giveplayerid][pCrack] += 25;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 25 grams of crack!");
				format(string, sizeof(string), "* %s (%d) was just gifted 25 grams of crack, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
		    else if(gift == 7)
		    {
		        GivePlayerCash(giveplayerid, 20000);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won $20,000!");
				format(string, sizeof(string), "* %s (%d) was just gifted $20,000, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
			else if(gift == 8)
		    {
		        PlayerInfo[giveplayerid][pPaintTokens] += 10;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 10 paintball tokens!");
				format(string, sizeof(string), "* %s (%d) was just gifted 10 paintball tokens, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
   			else if(gift == 9)
		    {
		        if(PlayerInfo[giveplayerid][pDonateRank] < 1) return GiftPlayer(playerid, giveplayerid);
		        PlayerInfo[giveplayerid][pTokens] += 5;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 5 VIP tokens!");
				format(string, sizeof(string), "* %s (%d) was just gifted 5 VIP tokens, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
   			else if(gift == 10)
		    {
		        PlayerInfo[giveplayerid][pFirework] += 2;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 2 Fireworks!");
				format(string, sizeof(string), "* %s (%d) was just gifted 2 Fireworks, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
   			else if(gift == 11)
		    {
		        PlayerInfo[giveplayerid][pExp] += 5;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 5 Respect Points!");
				format(string, sizeof(string), "* %s (%d) was just gifted 5 Respect Points, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
		    }
		}
		else if(randgift > 83 && randgift <= 98)
		{
		    new gift = Random(1, 9);
			if(gift == 1)
			{
			    GivePlayerCash(giveplayerid, 150000);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won $150,000!");
				format(string, sizeof(string), "* %s (%d) was just gifted $150,000, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 2)
			{
			    PlayerInfo[giveplayerid][pMats] += 15000;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 15,000 materials!");
				format(string, sizeof(string), "* %s (%d) was just gifted 15,000 materials, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 3)
			{
			    PlayerInfo[giveplayerid][pExp] += 10;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 10 respect points!");
				format(string, sizeof(string), "* %s (%d) was just gifted 10 respect points, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 4)
			{
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a free car!");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
                AddFlag(giveplayerid, INVALID_PLAYER_ID, "Free Car (Gift)");
			    new log[128];
				format(log, sizeof(log), "AdmCmd: %s was just gifted by the system and he won a free car", GetPlayerNameEx(giveplayerid));
				Log("logs/gifts.log", log);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (%d) was just gifted by the system and he won a free car.", GetPlayerNameEx(giveplayerid),giveplayerid);
				ABroadCast(COLOR_YELLOW, string, 4);
				format(string, sizeof(string), "* %s (%d) was just gifted a free car, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 5)
			{
   				if(PlayerInfo[giveplayerid][pDonateRank] > 0)
			    {
		    		PlayerInfo[giveplayerid][pTokens] += 15;
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 15 VIP tokens!");
					format(string, sizeof(string), "* %s (%d) was just gifted 15 VIP tokens, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
					ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			    }
			    else
			    {
			        PlayerInfo[giveplayerid][pDonateRank] = 1;
        			PlayerInfo[giveplayerid][pTempVIP] = 10800;
		    		PlayerInfo[giveplayerid][pBuddyInvited] = 1;
				    format(string, sizeof(string), "You have been invited to become a Level 1 VIP for 3 hours. Enjoy!", GetPlayerNameEx(giveplayerid));
				    SendClientMessageEx(giveplayerid, COLOR_VIP, string);
				    format(string, sizeof(string), "BUDDY INVITE: %s has won a buddyinvite.", GetPlayerNameEx(giveplayerid));
				    Log("logs/setvip.log", string);
				    format(string, sizeof(string), "* %s (%d) was just gifted 3 hours of VIP, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
					ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			    }
			}
			else if(gift == 6)
			{
				PlayerToyInfo[giveplayerid][4][ptModelID] = 18643;
				PlayerToyInfo[giveplayerid][4][ptBone] = 6;
				PlayerToyInfo[giveplayerid][4][ptPosX] = 0.0;
				PlayerToyInfo[giveplayerid][4][ptPosY] = 0.0;
				PlayerToyInfo[giveplayerid][4][ptPosZ] = 0.0;
				PlayerToyInfo[giveplayerid][4][ptRotX] = 0.0;
				PlayerToyInfo[giveplayerid][4][ptRotY] = 0.0;
				PlayerToyInfo[giveplayerid][4][ptRotZ] = 0.0;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a Free Laser Pointer!");
				format(string, sizeof(string), "* %s (%d) was just gifted a Free Laser Pointer, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);

				g_mysql_SaveToys(giveplayerid, 4);
			}
			else if(gift == 7)
			{
			    if(PlayerInfo[giveplayerid][pADMuteTotal] < 1) return GiftPlayer(playerid, giveplayerid);
                PlayerInfo[giveplayerid][pADMuteTotal] = 0;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a Free Admute Reset!");
				format(string, sizeof(string), "* %s (%d) was just gifted a Free Admute Reset, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 8)
			{
			    if(PlayerInfo[giveplayerid][pNMuteTotal] < 1) return GiftPlayer(playerid, giveplayerid);
                PlayerInfo[giveplayerid][pNMuteTotal] = 0;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a Free Nmute Reset!");
				format(string, sizeof(string), "* %s (%d) was just gifted a Free Nmute Reset, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
		}
		else if(randgift > 98 && randgift <= 100)
		{
		    new gift = Random(1, 6);
			if(gift == 1 && PlayerInfo[giveplayerid][pDonateRank] <= 2) // Silver VIP can get it extended, I suppose
			{
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won one month of Silver VIP!");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
				AddFlag(giveplayerid, INVALID_PLAYER_ID, "Free Silver VIP (Gift)");
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just gifted %s (%d) and he won one month of Silver VIP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),giveplayerid);
				ABroadCast(COLOR_YELLOW, string, 2);
				new log[128];
				format(log, sizeof(log), "AdmCmd: %s has just gifted %s and he won one month of Silver VIP", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("logs/gifts.log", log);
				format(string, sizeof(string), "* %s (%d) was just gifted one month of Silver VIP, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 2)
			{
				new log[128];
				format(log, sizeof(log), "AdmCmd: %s was just gifted by the system and he won a free house", GetPlayerNameEx(giveplayerid));
				Log("logs/gifts.log", log);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (%d) was just gifted by the system and he won a free house.", GetPlayerNameEx(giveplayerid),giveplayerid);
				ABroadCast(COLOR_YELLOW, string, 2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won a free house!");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
				AddFlag(giveplayerid, INVALID_PLAYER_ID, "Free House (Gift)");
				format(string, sizeof(string), "* %s (%d) was just gifted a free house, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 3)
			{
			    if(PlayerInfo[giveplayerid][pDonateRank] < 1) return GiftPlayer(playerid, giveplayerid);
 				PlayerInfo[giveplayerid][pTokens] += 50;
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won 50 VIP tokens!");
				format(string, sizeof(string), "* %s (%d) was just gifted 50 VIP tokens, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 4)
			{
			    new log[128];
				format(log, sizeof(log), "AdmCmd: %s has just gifted %s and he won $500,000.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("logs/gifts.log", log);
				GivePlayerCash(giveplayerid, 500000);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won $500,000!");
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just gifted %s (%d) and he won $500,000.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),giveplayerid);
				ABroadCast(COLOR_YELLOW, string, 2);
				format(string, sizeof(string), "* %s (%d) was just gifted $500,000, enjoy!", GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
			else if(gift == 5)
			{
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Congratulations - you have won one month of Gold VIP!");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
				AddFlag(giveplayerid, INVALID_PLAYER_ID, "Free Gold VIP (Gift)");
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s (%d) has just gifted %s (%d) and he won one month of Gold VIP.",ARank(playerid), GetPlayerNameEx(playerid),playerid, GetPlayerNameEx(giveplayerid),giveplayerid);
				ABroadCast(COLOR_YELLOW, string, 2);
				new log[128];
				format(log, sizeof(log), "AdmCmd: %s has just gifted %s and he won one month of Gold VIP", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("logs/gifts.log", log);
				format(string, sizeof(string), "* %s (%d) was just gifted one month of Gold VIP, enjoy!", GetPlayerNameEx(giveplayerid),giveplayerid);
				ProxDetector(30.0, giveplayerid, string, 0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF,0xFFFFFF);
			}
		}
		PlayerInfo[giveplayerid][pGiftTime] = 300;
	}
	return 1;
}

stock Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
	new Float:d;
	d += floatpower(x1-x2, 2.0 );
	d += floatpower(y1-y2, 2.0 );
	d += floatpower(z1-z2, 2.0 );
	d = floatsqroot(d);
	return d;
}

stock date( timestamp, _form=0 )
{
    new year=1970, day=0, month=0, hourt=0, mins=0, sec=0;

    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
    new returnstring[32];

    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }

    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;


    while(timestamp>86400){
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }

    while(timestamp>60){
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hourt++;
    }

    sec=timestamp;

    switch( _form ){
        case 1: format(returnstring, 31, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hourt, mins, sec);
        case 2: format(returnstring, 31, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hourt, mins, sec);
        case 3: format(returnstring, 31, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hourt,mins);
		case 4: format(returnstring, 31, "%s %02d, %d", names_of_month[month],day+1,year);
        default: format(returnstring, 31, "%02d.%02d.%d-%02d:%02d:%02d", day+1, month+1, year, hourt, mins, sec);
    }

    return returnstring;
}

stock SurfingCheck(vehicleid)
{
	foreach(new p: Player)
	{
		if(GetPlayerSurfingVehicleID(p) == vehicleid)
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(p, x, y, z);
			SetTimerEx("SurfingFix", 2000, 0, "ifff", p, x, y, z);
		}
	}
}


public OnPlayerClickPlayer(playerid)
{
	return 1;
}

forward SurfingFix(playerid, Float:x, Float:y, Float:z);
public SurfingFix(playerid, Float:x, Float:y, Float:z)
{
	SetPlayerPosEx(playerid, x, y, z);
	return 1;
}

GetNumberOfPages()
{
	if((gTotalItems >= SELECTION_ITEMS) && (gTotalItems % SELECTION_ITEMS) == 0)
	{
		return (gTotalItems / SELECTION_ITEMS);
	}
	else return (gTotalItems / SELECTION_ITEMS) + 1;
}

//------------------------------------------------

PlayerText:CreateCurrentPageTextDraw(playerid, Float:Xpos, Float:Ypos)
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, "0/0");
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------
// Creates a button textdraw and returns the textdraw ID.

PlayerText:CreatePlayerDialogButton(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height, button_text[])
{
 	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, button_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 1);
   	PlayerTextDrawBoxColor(playerid, txtInit, 0x000000FF);
   	PlayerTextDrawBackgroundColor(playerid, txtInit, 0x000000FF);
	PlayerTextDrawLetterSize(playerid, txtInit, 0.4, 1.1);
	PlayerTextDrawFont(playerid, txtInit, 1);
	PlayerTextDrawSetShadow(playerid, txtInit, 0); // no shadow
    PlayerTextDrawSetOutline(playerid, txtInit, 0);
    PlayerTextDrawColor(playerid, txtInit, 0x4A5A6BFF);
    PlayerTextDrawSetSelectable(playerid, txtInit, 1);
    PlayerTextDrawAlignment(playerid, txtInit, 2);
    PlayerTextDrawTextSize(playerid, txtInit, Height, Width); // The width and height are reversed for centering.. something the game does <g>
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------

PlayerText:CreatePlayerHeaderTextDraw(playerid, Float:Xpos, Float:Ypos, header_text[])
{
	new PlayerText:txtInit;
   	txtInit = CreatePlayerTextDraw(playerid, Xpos, Ypos, header_text);
   	PlayerTextDrawUseBox(playerid, txtInit, 0);
	PlayerTextDrawLetterSize(playerid, txtInit, 1.25, 3.0);
	PlayerTextDrawFont(playerid, txtInit, 0);
	PlayerTextDrawSetShadow(playerid, txtInit, 0);
    PlayerTextDrawSetOutline(playerid, txtInit, 1);
    PlayerTextDrawColor(playerid, txtInit, 0xACCBF1FF);
    PlayerTextDrawShow(playerid, txtInit);
    return txtInit;
}

//------------------------------------------------

PlayerText:CreatePlayerBackgroundTextDraw(playerid, Float:Xpos, Float:Ypos, Float:Width, Float:Height)
{
	new PlayerText:txtBackground = CreatePlayerTextDraw(playerid, Xpos, Ypos,
	"                                            ~n~"); // enough space for everyone
    PlayerTextDrawUseBox(playerid, txtBackground, 1);
    PlayerTextDrawBoxColor(playerid, txtBackground, 0x00000099);
	PlayerTextDrawLetterSize(playerid, txtBackground, 5.0, 5.0);
	PlayerTextDrawFont(playerid, txtBackground, 0);
	PlayerTextDrawSetShadow(playerid, txtBackground, 0);
    PlayerTextDrawSetOutline(playerid, txtBackground, 0);
    PlayerTextDrawColor(playerid, txtBackground,0x000000FF);
    PlayerTextDrawTextSize(playerid, txtBackground, Width, Height);
   	PlayerTextDrawBackgroundColor(playerid, txtBackground, 0x00000099);
    PlayerTextDrawShow(playerid, txtBackground);
    return txtBackground;
}

//------------------------------------------------
// Creates a model preview sprite

PlayerText:CreateModelPreviewTextDraw(playerid, modelindex, Float:Xpos, Float:Ypos, Float:width, Float:height)
{
    new PlayerText:txtPlayerSprite = CreatePlayerTextDraw(playerid, Xpos, Ypos, ""); // it has to be set with SetText later
    PlayerTextDrawFont(playerid, txtPlayerSprite, TEXT_DRAW_FONT_MODEL_PREVIEW);
    PlayerTextDrawColor(playerid, txtPlayerSprite, 0xFFFFFFFF);
    PlayerTextDrawBackgroundColor(playerid, txtPlayerSprite, 0x000000EE);
    PlayerTextDrawTextSize(playerid, txtPlayerSprite, width, height); // Text size is the Width:Height
    PlayerTextDrawSetPreviewModel(playerid, txtPlayerSprite, modelindex);
    PlayerTextDrawSetPreviewRot(playerid,txtPlayerSprite, -16.0, 0.0, -55.0);
    PlayerTextDrawSetSelectable(playerid, txtPlayerSprite, 1);
    PlayerTextDrawShow(playerid,txtPlayerSprite);
    return txtPlayerSprite;
}

//------------------------------------------------

DestroyPlayerModelPreviews(playerid)
{
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(gSelectionItems[playerid][x] != PlayerText:INVALID_TEXT_DRAW) {
			PlayerTextDrawDestroy(playerid, gSelectionItems[playerid][x]);
			gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
		}
		x++;
	}
}

//------------------------------------------------

ShowPlayerModelPreviews(playerid)
{
    new x=0;
	new Float:BaseX = DIALOG_BASE_X;
	new Float:BaseY = DIALOG_BASE_Y - (SPRITE_DIM_Y * 0.33); // down a bit
	new linetracker = 0;

	new itemat = GetPVarInt(playerid, "vspawner_page") * SELECTION_ITEMS;

	// Destroy any previous ones created
	DestroyPlayerModelPreviews(playerid);

	while(x != SELECTION_ITEMS && itemat < gTotalItems) {
	    if(linetracker == 0) {
	        BaseX = DIALOG_BASE_X + 25.0; // in a bit from the box
	        BaseY += SPRITE_DIM_Y + 1.0; // move on the Y for the next line
		}
  		gSelectionItems[playerid][x] = CreateModelPreviewTextDraw(playerid, gItemList[itemat], BaseX, BaseY, SPRITE_DIM_X, SPRITE_DIM_Y);
  		gSelectionItemsTag[playerid][x] = gItemList[itemat];
		BaseX += SPRITE_DIM_X + 1.0; // move on the X for the next sprite
		linetracker++;
		if(linetracker == ITEMS_PER_LINE) linetracker = 0;
		itemat++;
		x++;
	}
}

//------------------------------------------------

UpdatePageTextDraw(playerid)
{
	new PageText[64+1];
	format(PageText, 64, "%d/%d", GetPVarInt(playerid,"vspawner_page") + 1, GetNumberOfPages());
	PlayerTextDrawSetString(playerid, gCurrentPageTextDrawId[playerid], PageText);
}

//------------------------------------------------

CreateSelectionMenu(playerid)
{
    gBackgroundTextDrawId[playerid] = CreatePlayerBackgroundTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y + 20.0, DIALOG_WIDTH, DIALOG_HEIGHT);
    gHeaderTextDrawId[playerid] = CreatePlayerHeaderTextDraw(playerid, DIALOG_BASE_X, DIALOG_BASE_Y, HEADER_TEXT);
    gCurrentPageTextDrawId[playerid] = CreateCurrentPageTextDraw(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y + 15.0);
    gNextButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 30.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, NEXT_TEXT);
    gPrevButtonTextDrawId[playerid] = CreatePlayerDialogButton(playerid, DIALOG_WIDTH - 90.0, DIALOG_BASE_Y+DIALOG_HEIGHT+100.0, 50.0, 16.0, PREV_TEXT);

    ShowPlayerModelPreviews(playerid);
    UpdatePageTextDraw(playerid);
}

//------------------------------------------------

DestroySelectionMenu(playerid)
{
	DestroyPlayerModelPreviews(playerid);

	PlayerTextDrawDestroy(playerid, gHeaderTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gBackgroundTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gCurrentPageTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gNextButtonTextDrawId[playerid]);
	PlayerTextDrawDestroy(playerid, gPrevButtonTextDrawId[playerid]);

	gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
}

//------------------------------------------------

SpawnVehicle_InfrontOfPlayer(playerid, vehiclemodel, color1, color2)
{
	new Float:x,Float:y,Float:z;
	new Float:facing;
	new Float:distance;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, facing);

    new Float:size_x,Float:size_y,Float:size_z;
    new pid = GiveCarTo[playerid];
	GetVehicleModelInfo(vehiclemodel, VEHICLE_MODEL_INFO_SIZE, size_x, size_y, size_z);

	distance = size_x + 0.5;

  	x += (distance * floatsin(-facing, degrees));
    y += (distance * floatcos(-facing, degrees));

	facing += 90.0;
	if(facing > 360.0) facing -= 360.0;
	return CreatePlayerVehicle(pid, GetPlayerFreeVehicleId(pid), vehiclemodel, x, y, z, facing, color1, color2, 2000000);
}


SpawnVehicle_InfrontOfPlayer2(playerid, vehiclemodel, color1, color2)
{
	new Float:x,Float:y,Float:z;
	new Float:facing;
	new Float:distance;

    GetPlayerPos(playerid, x, y, z);
    GetPlayerFacingAngle(playerid, facing);

    new Float:size_x,Float:size_y,Float:size_z;
	GetVehicleModelInfo(vehiclemodel, VEHICLE_MODEL_INFO_SIZE, size_x, size_y, size_z);

	distance = size_x + 0.5;

  	x += (distance * floatsin(-facing, degrees));
    y += (distance * floatcos(-facing, degrees));

	facing += 90.0;
	if(facing > 360.0) facing -= 360.0;
	return CreateVehicleEx(vehiclemodel, x, y, z, facing, color1, color2, -1, playerid);
}

//------------------------------------------------

HandlePlayerItemSelection(playerid, selecteditem)
{
 	// In this case we're spawning a vehicle for them
 	new vid = gSelectionItemsTag[playerid][selecteditem];
 	new pid = GiveCarTo[playerid];
	if(IsATrain(vid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		return 1;
	}
	if(!vehicleCountCheck(pid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "That player can't have more vehicles - they own too many.");
		return 1;
	}
	if(!vehicleSpawnCountCheck(pid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "That player has too many vehicles spawned - they must store one first.");
		return 1;
	}
	if(IsRestrictedPlayerVehicle(vid) && PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 13338) {
		new string[84];
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can not create a Restriced Vehicle.");
		format(string, sizeof(string), "%s attempted to create a %s (%i) for %s.", GetPlayerNameEx(playerid), VehicleName[vid - 400], vid, GetPlayerNameEx(pid));
		Log("logs/playervehicle.log", string);
	}
	else
	{
    SpawnVehicle_InfrontOfPlayer(playerid, gSelectionItemsTag[playerid][selecteditem], -1, -1);
    }
    return 1;
}

//------------------------------------------------


IsAtTruckDeliveryPoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 812.287231, -1623.678222, 13.546875) || IsPlayerInRangeOfPoint(playerid, 6, 1204.510375, -920.674499, 43.074016) ||
	IsPlayerInRangeOfPoint(playerid, 6, 2402.169677, -1502.789306, 23.834865) || IsPlayerInRangeOfPoint(playerid, 6, 2110.254394, -1214.892578, 23.485479) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1458.425292, -1140.346069, 23.938444) || IsPlayerInRangeOfPoint(playerid, 6, 500.889678, -1352.339843, 15.463395) ||
	IsPlayerInRangeOfPoint(playerid, 6, 334.012207, -1373.775146, 14.230167) || IsPlayerInRangeOfPoint(playerid, 6, 1317.785522, -870.413818, 39.089378) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1342.577026, -1748.498535, 12.934987) || IsPlayerInRangeOfPoint(playerid, 6, 653.629699, -579.503051, 15.889705) ||
	IsPlayerInRangeOfPoint(playerid, 6, 1634.834716, 757.830017, 10.820312) || IsPlayerInRangeOfPoint(playerid, 6, 2833.109375, 893.754699, 10.757797) ||
	IsPlayerInRangeOfPoint(playerid, 6, -510.522918, -501.250030, 25.523437))
	{ return true; }
	return false;
}

CancelTruckDelivery(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsATruckerCar(vehicleid)) SetVehicleToRespawn(vehicleid);
	}
	DeletePVar(playerid, "TruckDeliver");
	if(1 <= TruckUsed[playerid] <= MAX_VEHICLES) TruckContents{TruckUsed[playerid]} = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	DisablePlayerCheckpoint(playerid);
	return 1;
}

stock InvalidModCheck(model, partid) {
    switch(model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595, 573, 556, 557, 539, 471, 432, 406, 444,
		448, 461, 462, 463, 468, 481, 509, 510, 521, 522, 581, 586, 417, 425, 447, 460, 469, 476, 487,
		488, 511, 512, 513, 519, 520, 548, 553, 563, 577, 592, 593: return 0;
		default: switch(GetVehicleComponentType(partid)) {
			case 5: switch(partid) {
				case 1008, 1009, 1010: return 1;
				default: return 0;
			}
			case 7: switch(partid) {
				case 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098, 1025: return 1;
				default: return 0;
			}
			case 8: switch(partid) {
				case 1086: return 1;
				default: return 0;
			}
			case 9: switch(partid) {
				case 1087: return 1;
				default: return 0;
			}
			case 12, 13: switch(partid) {
				case 1142, 1144, 1143, 1145: return 1;
				default: return 0;
			}
		}
	}
	return 1;
}

stock JudgeOnlineCheck()
{
	new count;
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pMember] == 5 || PlayerInfo[i][pLeader] == 5)
		{
			count++;
		}
	}
	return count;
}

stock StopRefueling(playerid, vehicleslot)
{
	GivePlayerCash(playerid, -RefuelingVehiclePrice[playerid]);

	new string[128];
	format(string, sizeof(string), "Your vehicle's tank has been refilled for $%d.", RefuelingVehiclePrice[playerid]);
	SendClientMessageEx(playerid, COLOR_WHITE,string);

	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if(strcmp(Points[i][Name], "Fossil Fuel Company", true) == 0)
		{
			mypoint = i;
		}
	}
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(RefuelingVehiclePrice[playerid]/10);
		}
	}

	// Save Fuel to MySQL
	if(vehicleslot != -1) {
	    PlayerVehicleInfo[playerid][vehicleslot][pvFuel] = VehicleFuel[PlayerVehicleInfo[playerid][vehicleslot][pvId]];
		format(string, sizeof(string), "UPDATE `accounts` SET `pv%dFuel` = %f WHERE `id` = '%d'", vehicleslot, VehicleFuel[PlayerVehicleInfo[playerid][vehicleslot][pvId]], GetPlayerSQLId(playerid));
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
	}

	RefuelingVehicle[playerid] = 0; RefuelingVehiclePrice[playerid] = 0; KillTimer(RefuelingVehicleTimer[playerid]);
	return true;
}

stock IsAtFuelStation(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetDynamicObjectPos(Carrier[0], X, Y, Z);
	if(IsPlayerInRangeOfPoint(playerid,10,1595.5406, 2198.0520, 10.3863) || IsPlayerInRangeOfPoint(playerid,10,2202.0649, 2472.6697, 10.5677) ||
	IsPlayerInRangeOfPoint(playerid,10,2115.1929, 919.9908, 10.5266) || IsPlayerInRangeOfPoint(playerid,10,2640.7209, 1105.9565, 10.5274) ||
	IsPlayerInRangeOfPoint(playerid,10,608.5971, 1699.6238, 6.9922) || IsPlayerInRangeOfPoint(playerid,10,618.4878, 1684.5792, 6.9922) ||
	IsPlayerInRangeOfPoint(playerid,10,2146.3467, 2748.2893, 10.5245) || IsPlayerInRangeOfPoint(playerid,10,-1679.4595, 412.5129, 6.9973) ||
	IsPlayerInRangeOfPoint(playerid,10,-1327.5607, 2677.4316, 49.8093) || IsPlayerInRangeOfPoint(playerid,10,-1470.0050, 1863.2375, 32.3521) ||
	IsPlayerInRangeOfPoint(playerid,10,-2409.2200, 976.2798, 45.2969) || IsPlayerInRangeOfPoint(playerid,10,-2244.1396, -2560.5833, 31.9219) ||
	IsPlayerInRangeOfPoint(playerid,10,-1606.0544, -2714.3083, 48.5335) || IsPlayerInRangeOfPoint(playerid,10,1937.4293, -1773.1865, 13.3828) ||
	IsPlayerInRangeOfPoint(playerid,10,-91.3854, -1169.9175, 2.4213) || IsPlayerInRangeOfPoint(playerid,10,1383.4221, 462.5385, 20.1506) ||
	IsPlayerInRangeOfPoint(playerid,10,660.4590, -565.0394, 16.3359) || IsPlayerInRangeOfPoint(playerid,10,1381.7206, 459.1907, 20.3452) ||
	IsPlayerInRangeOfPoint(playerid,10,-1605.7156, -2714.4573, 48.5335) || IsPlayerInRangeOfPoint(playerid,20,1882.2546,-2393.9824,16.5144) ||
	IsPlayerInRangeOfPoint(playerid,10,1386.5360,-271.5511,-0.4857) || IsPlayerInRangeOfPoint(playerid,10,2017.3016,-229.9219,-0.2183) ||
	IsPlayerInRangeOfPoint(playerid,10,1551.3206,-1609.9823,13.3828) || IsPlayerInRangeOfPoint(playerid,10,279.1325,1940.4025,17.6406) || IsPlayerInRangeOfPoint(playerid,10,-2324.0815,2362.8477,4.9922) || IsPlayerInRangeOfPoint(playerid,250,X, Y, Z) || IsPlayerInRangeOfPoint(playerid,250,1005.5143,-936.5746,42.3281))
	{ return true; }
	return false;
}

forward ReFill(playerid, vehicleslot);
public ReFill(playerid, vehicleslot)
{
	if(!IsAtFuelStation(playerid) || !IsPlayerInAnyVehicle(playerid) || VehicleFuel[GetPlayerVehicleID(playerid)] >= 100.0 || GetPlayerCash(playerid) < 1)
	{
		StopRefueling(playerid, vehicleslot);
	}
	else
	{
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(GetPlayerVehicleID(playerid),engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON) {
			StopRefueling(playerid, vehicleslot);
		}
		else {
			VehicleFuel[GetPlayerVehicleID(playerid)] += 1.0;
			RefuelingVehiclePrice[playerid] += 30;
			if(VehicleFuel[GetPlayerVehicleID(playerid)] >= 100.0) VehicleFuel[GetPlayerVehicleID(playerid)] = 100.0;
		}
	}
	return true;
}

stock SendAudioURLToRange(url[], Float:x, Float:y, Float:z, Float:range)
{
    audiourlid = CreateDynamicSphere(x, y, z, range);
	format(audiourlurl, sizeof(audiourlurl), "%s", url);
	audiourlparams[0] = x;
	audiourlparams[1] = y;
	audiourlparams[2] = z;
	audiourlparams[3] = range;
	return 1;
}

forward SetVehicleEngine(vehicleid, playerid);
public SetVehicleEngine(vehicleid, playerid)
{
	new string[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine stopped successfully.");
		arr_Engine{vehicleid} = 0;
	}
    else if(engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET)
	{
		new
			Float: f_vHealth;

		GetVehicleHealth(vehicleid, f_vHealth);
		if(f_vHealth < 350.0) return SendClientMessageEx(playerid, COLOR_RED, "The car won't start - it's totalled!");
	    if(VehicleFuel[vehicleid] <= 0.0) return SendClientMessageEx(playerid, COLOR_RED, "The car won't start - there's no fuel in the tank!");
		SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		if(vehicleid != CrateIslandVehicles[0] || vehicleid != CrateIslandVehicles[1]) { SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine started successfully (/car engine to turn the engine off)."); }
		else SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine started successfully (/announcetakeoff to turn the engine off).");
		arr_Engine{vehicleid} = 1;
		if(GetChased[playerid] < 999 && VehicleBomb{vehicleid} == 1)
		{
			if(PlayerInfo[playerid][pHeadValue] >= 1)
			{
				if(PlayerInfo[GetChased[playerid]][pMember] == 8 || PlayerInfo[GetChased[playerid]][pLeader] == 8)
				{
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(playerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 1);
					VehicleBomb{vehicleid} = 0;
					PlacedVehicleBomb[GetChased[playerid]] = INVALID_VEHICLE_ID;
					new takemoney = (PlayerInfo[playerid][pHeadValue] / 4) * 2;
					GivePlayerCash(GetChased[playerid], takemoney);
					GivePlayerCash(playerid, -takemoney);
					format(string,sizeof(string),"Hitman %s has fulfilled the contract on %s and collected $%d.",GetPlayerNameEx(GetChased[playerid]),GetPlayerNameEx(playerid),takemoney);
					SendFamilyMessage(8, COLOR_YELLOW, string);
					format(string,sizeof(string),"You have been critically injured by a hitman and lost $%d!",takemoney);
					ResetPlayerWeaponsEx(playerid);
					// SpawnPlayer(playerid);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					PlayerInfo[playerid][pHeadValue] = 0;
					PlayerInfo[GetChased[playerid]][pCHits] += 1;
					SetPlayerHealth(playerid, 0.0);
					// KillEMSQueue(playerid);
					GoChase[GetChased[playerid]] = INVALID_PLAYER_ID;
					PlayerInfo[GetChased[playerid]][pC4Used] = 0;
					PlayerInfo[GetChased[playerid]][pC4] = 0;
					GotHit[playerid] = 0;
					GetChased[playerid] = INVALID_PLAYER_ID;
					return 1;
				}
			}
		}
	}
	return 1;
}

stock SetVehicleLights(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle lights successfully turned off.");
	}
    else if(lights == VEHICLE_PARAMS_OFF || lights == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,VEHICLE_PARAMS_ON,alarm,doors,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle lights successfully turned on.");
	}
	return 1;
}

stock SetVehicleHood(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(bonnet == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_OFF,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle hood successfully closed.");
	}
    else if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,VEHICLE_PARAMS_ON,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle hood successfully opened.");
	}
	return 1;
}

stock SetVehicleTrunk(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(boot == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_OFF,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle trunk successfully closed.");
	}
    else if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,VEHICLE_PARAMS_ON,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle trunk successfully opened.");
	}
	return 1;
}

stock Comma(numbers) //by Gamer931215
{
    new temp[24],counter = -1;
    valstr(temp,numbers);
    for(new i = strlen(temp);i > 0; i--)
    {
        counter++;
        if(counter == 3)
        {
            strins(temp,",",i);
            counter = 0;
        }
    }
    return temp;
}

stock FormatMoney(Float:amount, delimiter[2]=",")
{
	#define MAX_MONEY_STRING 16
	new txt[MAX_MONEY_STRING];
	format(txt, MAX_MONEY_STRING, "%d", floatround(amount));
	new l = strlen(txt);
	if (amount < 0) // -
	{
	  if (l > 5) strins(txt, delimiter, l-3);
		if (l > 8) strins(txt, delimiter, l-6);
		if (l > 11) strins(txt, delimiter, l-9);
	}
	else
	{
		if (l > 4) strins(txt, delimiter, l-3);
		if (l > 7) strins(txt, delimiter, l-6);
		if (l > 10) strins(txt, delimiter, l-9);
	}
	return txt;
}

stock SetVehicleDoors(vehicleid, playerid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if(doors == VEHICLE_PARAMS_ON)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,VEHICLE_PARAMS_OFF,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle {AA3333}Doors {FFFFFF}successfully {33AA33}closed{FFFFFF}.");
	}
    else if(doors == VEHICLE_PARAMS_OFF || doors == VEHICLE_PARAMS_UNSET)
	{
		SetVehicleParamsEx(vehicleid,engine,lights,alarm,VEHICLE_PARAMS_ON,bonnet,boot,objective);
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle {AA3333}Doors {FFFFFF}successfully {33AA33}opened{FFFFFF}.");
	}
	return 1;
}

stock ShowNMuteFine(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new allmoney;
 	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
 		allmoney = HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
   	}
   	else
    {
   		allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
    }

    new fine = 10*allmoney/100;
	if(PlayerInfo[playerid][pNMuteTotal] < 4)
	{
		new string[64];
		format(string,sizeof(string),"Jail for %d Minutes\nCash Fine ($%d)",PlayerInfo[playerid][pNMuteTotal] * 15, fine);
		ShowPlayerDialog(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:",string,"Select","Cancel");
	}
	else if(PlayerInfo[playerid][pNMuteTotal] == 4) ShowPlayerDialog(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:","Prison for 1 Hour","Select","Cancel");
	else if(PlayerInfo[playerid][pNMuteTotal] == 5) ShowPlayerDialog(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:","Prison for 1 Hour and 15 Minutes","Select","Cancel");
	else if(PlayerInfo[playerid][pNMuteTotal] == 6) ShowPlayerDialog(playerid,NMUTE,DIALOG_STYLE_LIST,"Newbie Chat Unmute - Select your Punishment:","Prison for 1 Hour and 30 Minutes","Select","Cancel");
}

stock ShowAdMuteFine(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));

	new allmoney;
 	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
 		allmoney = HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
   	}
   	else
    {
   		allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
    }

    new fine = 10*allmoney/100;
	if(PlayerInfo[playerid][pADMuteTotal] < 4)
	{
		format(string,sizeof(string),"Jail for %d Minutes\nCash Fine ($%d)",PlayerInfo[playerid][pADMuteTotal]*15,fine);
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 4)
	{
	    format(string,sizeof(string),"Prison for 1 Hour");
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 5)
	{
	    format(string,sizeof(string),"Prison for 1 Hour and 15 Minutes)");
	}
	if(PlayerInfo[playerid][pADMuteTotal] == 6)
	{
	    format(string,sizeof(string),"Prison for 1 Hour and 30 Minutes");
	}
	ShowPlayerDialog(playerid,ADMUTE,DIALOG_STYLE_LIST,"Advertisements Unmute - Select your Punishment:",string,"Select","Cancel");
}

stock TurfWarsEditTurfsSelection(playerid)
{
	new string[2048];
	for(new i = 0; i < MAX_TURFS; i++)
	{
	    if(TurfWars[i][twOwnerId] != -1)
	    {
	        if(TurfWars[i][twOwnerId] < 0 || TurfWars[i][twOwnerId] > MAX_FAMILY-1)
	        {
	        	format(string,sizeof(string),"%s%s - \t(Invalid Family)\n",string,TurfWars[i][twName]);
			}
			else
			{
			    format(string,sizeof(string),"%s%s - \t(%s)\n",string,TurfWars[i][twName],FamilyInfo[TurfWars[i][twOwnerId]][FamilyName]);
			}
	    }
	    else
	    {
	        format(string,sizeof(string),"%s%s - \t(%s)\n",string,TurfWars[i][twName],"Vacant");
	    }
	}
	ShowPlayerDialog(playerid,TWEDITTURFSSELECTION,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Selection Menu:",string,"Select","Back");
}

stock TurfWarsEditFColorsSelection(playerid)
{
	new string[1024];
	for(new i = 0; i < MAX_FAMILY; i++)
	{
	    format(string,sizeof(string),"%s (ID: %d) %s - (%d)\n",string,i,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyColor]);
	}
	ShowPlayerDialog(playerid,TWEDITFCOLORSSELECTION,DIALOG_STYLE_LIST,"Turf Wars - Edit Family Colors Selection:",string,"Select","Back");
}

stock PaintballEditMenu(playerid)
{
	new string[1024], status[64];
	for(new i = 0; i < MAX_ARENAS; i++)
	{
	    if(PaintBallArena[i][pbLocked] == 0)
 	    {
 	        format(status,sizeof(status),"Open");
 	    }
 	    if(PaintBallArena[i][pbLocked] == 1)
 	    {
 	        format(status,sizeof(status),"Active");
 	    }
 	    if(PaintBallArena[i][pbLocked] == 2)
 	    {
 	        format(status,sizeof(status),"Closed");
 	    }
 	    if(PaintBallArena[i][pbLocked] == 3)
 	    {
 	        format(status,sizeof(status),"Setup");
 	    }
		format(string,sizeof(string),"%s%s - \t(%s)\n",string,PaintBallArena[i][pbArenaName],status);
	}
	ShowPlayerDialog(playerid,PBEDITMENU,DIALOG_STYLE_LIST,"Paintball Arena - Edit Menu:",string,"Select","Back");
}

stock PaintballEditArenaMenu(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	new string[1024];
	new arenaid = GetPVarInt(playerid, "ArenaNumber");
	format(string,sizeof(string),"Edit Arena Name - (%s)\nEdit Deathmatch Positions...\nEdit Team Positions...\nEdit Flag Positions...\nEdit Hill Position...\nHill Radius (%f)\nInterior (%d)\nVirtual World (%d)",PaintBallArena[arenaid][pbArenaName],PaintBallArena[arenaid][pbHillRadius],PaintBallArena[arenaid][pbInterior],PaintBallArena[arenaid][pbVirtual]);
	ShowPlayerDialog(playerid,PBEDITARENAMENU,DIALOG_STYLE_LIST,"Paintball Arena - Edit Arena Menu:",string,"Select","Back");
	return 1;
}

stock PaintballEditArenaName(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	new string[128];
	new arenaid = GetPVarInt(playerid, "ArenaNumber");
	format(string,sizeof(string),"Enter a new Arena Name for Arena Slot %d:",arenaid);
	ShowPlayerDialog(playerid,PBEDITARENANAME,DIALOG_STYLE_INPUT,"Paintball Arena - Edit Arena Name:",string,"Change","Back");
	return 1;
}

stock PaintballEditArenaDMSpawns(playerid)
{
    if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	ShowPlayerDialog(playerid,PBEDITARENADMSPAWNS,DIALOG_STYLE_LIST,"Paintball Arena - Edit Arena DM Spawns:","Deathmatch Spawn 1\nDeathmatch Spawn 2\nDeathmatch Spawn 3\nDeathmatch Spawn 4","Change","Back");
	return 1;
}

stock PaintballEditArenaTeamSpawns(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	ShowPlayerDialog(playerid,PBEDITARENATEAMSPAWNS,DIALOG_STYLE_LIST,"Paintball Arena - Edit Arena Team Spawns:","Red Team Spawn 1\nRed Team Spawn 2\nRed Team Spawn 3\nBlue Team Spawn 1\nBlue Team Spawn 2\nBlue Team Spawn 3","Change","Back");
	return 1;
}

stock PaintballEditArenaFlagSpawns(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	ShowPlayerDialog(playerid,PBEDITARENAFLAGSPAWNS,DIALOG_STYLE_LIST,"Paintball Arena - Edit Arena Flag Spawns:","Red Team Flag\nBlue Team Flag","Change","Back");
	return 1;
}

stock PaintballEditArenaInt(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	ShowPlayerDialog(playerid,PBEDITARENAINT,DIALOG_STYLE_INPUT,"Paintball Arena - Edit Arena Interior:","Please enter a new interior id to place on the Arena:","Change","Back");
	return 1;
}

stock PaintballEditArenaVW(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	ShowPlayerDialog(playerid,PBEDITARENAVW,DIALOG_STYLE_INPUT,"Paintball Arena - Edit Arena Virtual World:","Please enter a new virtual world id to place on the Arena:","Change","Back");
	return 1;
}

stock PaintballEditArenaHillRadius(playerid)
{
	if(GetPVarInt(playerid, "ArenaNumber") == -1) { return 1; }
	ShowPlayerDialog(playerid,PBEDITARENAHILLRADIUS,DIALOG_STYLE_INPUT,"Paintball Arena - Edit Arena Hill Radius:","Please enter a new hill radius for the Arena:","Change","Back");
	return 1;
}

stock PaintballScoreboard(playerid, arenaid)
{
	if(GetPVarInt(playerid, "IsInArena") == -1) { return 1; }
	new titlestring[128];
	new string[2048];
 	foreach(new p: Player)
  	{
		if(GetPVarInt(p, "IsInArena") == arenaid)
		{
		    if(PaintBallArena[arenaid][pbGameType] == 1)
		    {
				format(string,sizeof(string),"%s(ID: %d) %s - (Kills: %d) (Deaths: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),PlayerInfo[p][pKills],PlayerInfo[p][pDeaths],GetPlayerPing(p));
			}
			if(PaintBallArena[arenaid][pbGameType] == 2 || PaintBallArena[arenaid][pbGameType] == 3)
			{
			    switch(PlayerInfo[p][pPaintTeam])
			    {
			        case 1: // Red Team
			        {
			            format(string,sizeof(string),"%s(ID: %d) ({FF0000}Red Team{FFFFFF}) %s - (Points: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),PlayerInfo[p][pKills],GetPlayerPing(p));
			        }
			        case 2: // Blue Team
			        {
			            format(string,sizeof(string),"%s(ID: %d) ({0000FF}Blue Team{FFFFFF}) %s - (Points: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),PlayerInfo[p][pKills],GetPlayerPing(p));
			        }
			    }
			}
			if(PaintBallArena[arenaid][pbGameType] == 4)
			{
			    format(string,sizeof(string),"%s(ID: %d) %s - (Points: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),PlayerInfo[p][pKills],GetPlayerPing(p));
			}
			if(PaintBallArena[arenaid][pbGameType] == 5)
			{
			    switch(PlayerInfo[p][pPaintTeam])
			    {
			        case 1: // Red Team
			        {
			            format(string,sizeof(string),"%s(ID: %d) ({FF0000}Red Team{FFFFFF}) %s - (Points: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),PlayerInfo[p][pKills],GetPlayerPing(p));
			        }
			        case 2: // Blue Team
					{
					    format(string,sizeof(string),"%s(ID: %d) ({0000FF}Blue Team{FFFFFF}) %s - (Points: %d) (Ping: %d)\n", string, p, GetPlayerNameEx(p),PlayerInfo[p][pKills],GetPlayerPing(p));
					}
			    }
			}
		}
	}
	switch (PaintBallArena[arenaid][pbGameType])
	{
		case 1: // Deathmatch
		{
			format(titlestring,sizeof(titlestring),"(DM) Scoreboard - Time Left: (%d)",PaintBallArena[arenaid][pbTimeLeft]);
		}
		case 2: // Team Deathmatch
		{
		    format(titlestring,sizeof(titlestring),"(TDM) Scoreboard - Red: (%d) - Blue: (%d) - Time Left: (%d)",
			PaintBallArena[arenaid][pbTeamRedKills],
			PaintBallArena[arenaid][pbTeamBlueKills],
			PaintBallArena[arenaid][pbTimeLeft]);
		}
		case 3: // Capture The Flag
		{
		    format(titlestring,sizeof(titlestring),"(CTF) Scoreboard - Red: (%d) - Blue: (%d) - Time Left: (%d)",PaintBallArena[arenaid][pbTeamRedScores],PaintBallArena[arenaid][pbTeamBlueScores],PaintBallArena[arenaid][pbTimeLeft]);
		}
		case 4: // King of the Hill
		{
		    format(titlestring,sizeof(titlestring),"(KOTH) Scoreboard - Time Left: (%d)",PaintBallArena[arenaid][pbTimeLeft]);
		}
		case 5: // Team King of the Hill
		{
		    format(titlestring,sizeof(titlestring),"(TKOTH) Scoreboard - Red: (%d) - Blue: (%d) - Time Left (%d)",PaintBallArena[arenaid][pbTeamRedScores],PaintBallArena[arenaid][pbTeamBlueScores],PaintBallArena[arenaid][pbTimeLeft]);
		}
	}
	ShowPlayerDialog(playerid,PBARENASCORES,DIALOG_STYLE_LIST,titlestring,string,"Update","Close");
	return 1;
}

stock PaintballArenaSelection(playerid)
{
	new string[2048], status[64], gametype[64], eperm[64], limit, count, money;
 	for(new i = 0; i < MAX_ARENAS; i++) if(!isnull(PaintBallArena[i][pbArenaName]))
 	{
 	    limit = PaintBallArena[i][pbLimit];
 	    count = PaintBallArena[i][pbPlayers];
 	    money = PaintBallArena[i][pbBidMoney];

 	    if(PaintBallArena[i][pbLocked] == 0)
 	    {
 	        format(status,sizeof(status),"{00FF00}Open{FFFFFF}");
 	    }
 	    if(PaintBallArena[i][pbLocked] == 1)
 	    {
 	        format(status,sizeof(status),"{00FF00}Active{FFFFFF}");
 	    }
 	    if(PaintBallArena[i][pbLocked] == 2)
 	    {
 	        format(status,sizeof(status),"{FF0000}Closed{FFFFFF}");
 	    }
 	    if(PaintBallArena[i][pbLocked] == 3)
 	    {
 	        format(status,sizeof(status),"{FF6600}Setup{FFFFFF}");
 	    }

 	    if(PaintBallArena[i][pbGameType] == 1)
 	    {
 	        format(gametype,sizeof(gametype),"DM");
		}
		if(PaintBallArena[i][pbGameType] == 2)
		{
		    format(gametype,sizeof(gametype),"TDM");
		}
		if(PaintBallArena[i][pbGameType] == 3)
		{
		    format(gametype,sizeof(gametype),"CTF");
		}
		if(PaintBallArena[i][pbGameType] == 4)
		{
		    format(gametype,sizeof(gametype),"KOTH");
		}
		if(PaintBallArena[i][pbGameType] == 5)
		{
		    format(gametype,sizeof(gametype),"TKOTH");
		}

		if(PaintBallArena[i][pbExploitPerm] == 0)
		{
		    format(eperm,sizeof(eperm),"{FF0000}No QS/CS{FFFFFF}");
		}
		if(PaintBallArena[i][pbExploitPerm] == 1)
		{
		    format(eperm,sizeof(eperm),"{00FF00}QS/CS{FFFFFF}");
		}

		if(!strcmp(PaintBallArena[i][pbPassword], "None", false))
		{
 	    	format(string,sizeof(string),"%s{FFFFFF}%s - \t(%s) (%s) (%s) (%d/%d) ($%d) (%s)\n",string,PaintBallArena[i][pbArenaName],PaintBallArena[i][pbOwner],status,gametype,count,limit,money,eperm);
		}
		else
		{
		    format(string,sizeof(string),"%s{FFFFFF}%s - \t(%s) (%s) (%s) (%d/%d) ($%d) (%s) (PW)\n",string,PaintBallArena[i][pbArenaName],PaintBallArena[i][pbOwner],status,gametype,count,limit,money,eperm);
		}
	}
	ShowPlayerDialog(playerid,PBARENASELECTION,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Arena:",string,"Select","Back");
}

stock PaintballTokenBuyMenu(playerid)
{
	new string[150];
	format(string,sizeof(string),"{FFFFFF}How many Paintball Tokens do you wish to purchase?\n\nEach token costs a total of $%d. You currently have {AA3333}%d{FFFFFF} Tokens.", 5000, PlayerInfo[playerid][pPaintTokens]);
	ShowPlayerDialog(playerid,PBTOKENBUYMENU,DIALOG_STYLE_INPUT,"Paintball Arena - Paintball Tokens:",string,"Buy","Back");
}

stock PaintballSetupArena(playerid)
{
	new string[1024], gametype[32], password[64], wepname1[128], wepname2[128], wepname3[128], eperm[64], finstagib[64], fnoweapons[64];
	new timelimit, limit, money, Float:health, Float:armor, wep1, wep2, wep3;
	new a = GetPVarInt(playerid, "ArenaNumber");

	format(password,sizeof(password),"%s", PaintBallArena[a][pbPassword]);
	timelimit = PaintBallArena[a][pbTimeLeft]/60;
	limit = PaintBallArena[a][pbLimit];
	money = PaintBallArena[a][pbBidMoney];
	health = PaintBallArena[a][pbHealth];
	armor = PaintBallArena[a][pbArmor];
	wep1 = PaintBallArena[a][pbWeapons][0];
	wep2 = PaintBallArena[a][pbWeapons][1];
	wep3 = PaintBallArena[a][pbWeapons][2];

	GetWeaponName(wep1,wepname1,sizeof(wepname1));
	GetWeaponName(wep2,wepname2,sizeof(wepname2));
	GetWeaponName(wep3,wepname3,sizeof(wepname3));

	if(PaintBallArena[a][pbGameType] == 1)
	{
		format(gametype,sizeof(gametype),"DM");
	}
	if(PaintBallArena[a][pbGameType] == 2)
	{
	    format(gametype,sizeof(gametype),"TDM");
	}
	if(PaintBallArena[a][pbGameType] == 3)
	{
	    format(gametype,sizeof(gametype),"CTF");
	}
	if(PaintBallArena[a][pbGameType] == 4)
	{
	    format(gametype,sizeof(gametype),"KOTH");
	}
	if(PaintBallArena[a][pbGameType] == 5)
	{
	    format(gametype,sizeof(gametype),"TKOTH");
	}

	if(PaintBallArena[a][pbExploitPerm] == 0)
	{
		format(eperm,sizeof(eperm),"Not Allowed");
	}
	if(PaintBallArena[a][pbExploitPerm] == 1)
	{
	    format(eperm,sizeof(eperm),"Allowed");
	}

	if(PaintBallArena[a][pbFlagInstagib] == 0)
	{
	    format(finstagib,sizeof(finstagib),"Off");
	}
	if(PaintBallArena[a][pbFlagInstagib] == 1)
	{
	    format(finstagib,sizeof(finstagib),"On");
	}

	if(PaintBallArena[a][pbFlagNoWeapons] == 0)
	{
	    format(fnoweapons,sizeof(fnoweapons),"Off");
	}
	if(PaintBallArena[a][pbFlagNoWeapons] == 1)
	{
	    format(fnoweapons,sizeof(fnoweapons),"On");
	}

	switch(PaintBallArena[a][pbGameType])
	{
	    case 1:
	    {
	        format(string,sizeof(string),"Password - (%s)\nGameType - (%s)\nLimit - (%d)\nTime Limit - (%d Minutes)\nBid Money - ($%d)\nHealth - (%.2f)\nArmor - (%.2f)\nWeapons Slot 1 - (%s)\nWeapons Slot 2 - (%s)\nWeapons Slot 3 - (%s)\nQS/CS - (%s)\nBegin Arena",password,gametype,limit,timelimit,money,health,armor,wepname1,wepname2,wepname3,eperm);
	    }
	    case 2:
	    {
	        format(string,sizeof(string),"Password - (%s)\nGameType - (%s)\nLimit - (%d)\nTime Limit - (%d Minutes)\nBid Money - ($%d)\nHealth - (%.2f)\nArmor - (%.2f)\nWeapons Slot 1 - (%s)\nWeapons Slot 2 - (%s)\nWeapons Slot 3 - (%s)\nQS/CS - (%s)\nBegin Arena",password,gametype,limit,timelimit,money,health,armor,wepname1,wepname2,wepname3,eperm);
	    }
	    case 3:
	    {
	        format(string,sizeof(string),"Password - (%s)\nGameType - (%s)\nLimit - (%d)\nTime Limit - (%d Minutes)\nBid Money - ($%d)\nHealth - (%.2f)\nArmor - (%.2f)\nWeapons Slot 1 - (%s)\nWeapons Slot 2 - (%s)\nWeapons Slot 3 - (%s)\nQS/CS - (%s)\nFlag Instagib - (%s)\nFlag No Weapons - (%s)\nBegin Arena",password,gametype,limit,timelimit,money,health,armor,wepname1,wepname2,wepname3,eperm,finstagib,fnoweapons);
	    }
	    case 4:
	    {
	        format(string,sizeof(string),"Password - (%s)\nGameType - (%s)\nLimit - (%d)\nTime Limit - (%d Minutes)\nBid Money - ($%d)\nHealth - (%.2f)\nArmor - (%.2f)\nWeapons Slot 1 - (%s)\nWeapons Slot 2 - (%s)\nWeapons Slot 3 - (%s)\nQS/CS - (%s)\nBegin Arena",password,gametype,limit,timelimit,money,health,armor,wepname1,wepname2,wepname3,eperm);
	    }
	    case 5:
	    {
	        format(string,sizeof(string),"Password - (%s)\nGameType - (%s)\nLimit - (%d)\nTime Limit - (%d Minutes)\nBid Money - ($%d)\nHealth - (%.2f)\nArmor - (%.2f)\nWeapons Slot 1 - (%s)\nWeapons Slot 2 - (%s)\nWeapons Slot 3 - (%s)\nQS/CS - (%s)\nBegin Arena",password,gametype,limit,timelimit,money,health,armor,wepname1,wepname2,wepname3,eperm);
	    }
	}
	ShowPlayerDialog(playerid,PBSETUPARENA,DIALOG_STYLE_LIST,"Paintball Arena - Setup Arena:",string,"Select","Leave");
}

stock PaintballSwitchTeam(playerid)
{
	new arenaid = GetPVarInt(playerid, "IsInArena");
	new teamlimit = PaintBallArena[arenaid][pbLimit]/2;
	new string[128];
	format(string,sizeof(string),"{FF0000}Red Team (%d/%d)\n{0000FF}Blue Team (%d/%d)",PaintBallArena[arenaid][pbTeamRed],teamlimit,PaintBallArena[arenaid][pbTeamBlue],teamlimit);
	ShowPlayerDialog(playerid,PBSWITCHTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Team:",string,"Switch","Cancel");
}

forward OnPhoneNumberCheck(index, extraid);
public OnPhoneNumberCheck(index, extraid)
{
	if(IsPlayerConnected(index))
	{
		new string[128];
		new rows, fields;
		cache_get_data(rows, fields, MainPipeline);

		switch(extraid)
		{
			case 1: {
				if(rows)
				{
					SendClientMessageEx(index, COLOR_WHITE, "That phone number has already been taken.");
				}
				else
				{
					SendClientMessageEx(index, COLOR_GREEN, "________________________________________________");
					SendClientMessageEx(index, COLOR_YELLOW, "Phone number is not being used, updating your phone number.");
					format(string,sizeof(string),"You have changed numbers from: %d, to: %d and it cost $%d",GetPVarInt(index, "CurrentPh"), GetPVarInt(index, "WantedPh"), GetPVarInt(index, "PhChangeCost"));
					SendClientMessageEx(index,COLOR_GREY,string);
					PlayerInfo[index][pPnumber] = GetPVarInt(index, "WantedPh");
					GivePlayerCash(index, -GetPVarInt(index, "PhChangeCost"));
					format(string, sizeof(string), "UPDATE `accounts` SET `PhoneNr` = %d WHERE `id` = '%d'", PlayerInfo[index][pPnumber], GetPlayerSQLId(index));
                    mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, index);
				}
			}
			case 2: {
				if(rows)
				{
					SendClientMessageEx(index, COLOR_WHITE, "That phone number has already been taken.");
				}
				else
				{
					PlayerInfo[index][pPnumber] = GetPVarInt(index, "WantedPh");
					GivePlayerCash(index, -GetPVarInt(index, "PhChangeCost"));
					format(string, sizeof(string), "Cellphone purchased, your new phone number is %d.", GetPVarInt(index, "WantedPh"));
					SendClientMessageEx(index, COLOR_GRAD4, string);
					SendClientMessageEx(index, COLOR_GRAD5, "You can check this any time you wish by typing /stats.");
					SendClientMessageEx(index, COLOR_WHITE, "HINT: You can now type /cellphonehelp to see your cellphone commands.");
					format(string, sizeof(string), "UPDATE `accounts` SET `PhoneNr` = %d WHERE `id` = '%d'", PlayerInfo[index][pPnumber], GetPlayerSQLId(index));
					mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, index);
				}
			}
			case 3: {
				if(rows)
				{
					SendClientMessageEx(index, COLOR_WHITE, "That phone number has already been taken.");
				}
				else
				{
					PlayerInfo[index][pPnumber] = GetPVarInt(index, "WantedPh");
					format(string, sizeof(string), "   %s's Phone Number has been set to %d.", GetPlayerNameEx(index), GetPVarInt(index, "WantedPh"));
					new log[128];
					format(log, sizeof(log), "%s by %s", string, GetPlayerNameEx(index));
					Log("logs/undercover.log", log);
					SendClientMessageEx(index, COLOR_GRAD1, string);
					format(string, sizeof(string), "UPDATE `accounts` SET `PhoneNr` = %d WHERE `id` = '%d'", PlayerInfo[index][pPnumber], GetPlayerSQLId(index));
					mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, index);
				}
			}
			case 4: {
				if(IsPlayerConnected(GetPVarInt(index, "PhChangerId")))
				{
					if(rows)
					{
						SendClientMessageEx(GetPVarInt(index, "PhChangerId"), COLOR_WHITE, "That phone number has already been taken.");
					}
					else
					{
						PlayerInfo[index][pPnumber] = GetPVarInt(index, "WantedPh");
						format(string, sizeof(string), "   %s's Phone Number has been set to %d.", GetPlayerNameEx(index), GetPVarInt(index, "WantedPh"));
						new log[128];
						format(log, sizeof(log), "%s by %s", string, GetPlayerNameEx(GetPVarInt(index, "PhChangerId")));
						Log("logs/stats.log", log);
						SendClientMessageEx(GetPVarInt(index, "PhChangerId"), COLOR_GRAD1, string);
						format(string, sizeof(string), "UPDATE `accounts` SET `PhoneNr` = %d WHERE `id` = '%d'", PlayerInfo[index][pPnumber], GetPlayerSQLId(index));
						mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, index);
					}
				}
			}
		}
		DeletePVar(index, "PhChangerId");
		DeletePVar(index, "WantedPh");
		DeletePVar(index, "PhChangeCost");
		DeletePVar(index, "CurrentPh");
	}

	return 1;
}

stock SearchingHit(playerid)
{
	new string[ 128 ];
   	SendClientMessageEx(playerid, COLOR_WHITE, "Available Contracts:");
   	new hits;
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pMember] != 8 && PlayerInfo[i][pHeadValue] > 0)
		{
	 		if(GotHit[i] == 0)
  			{
				hits++;
				format(string, sizeof(string), "Name: %s (ID %d) | Price: $%d | Contracted By: %s | Details: %s | Chased By: Nobody", GetPlayerNameEx(i), i, PlayerInfo[i][pHeadValue], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractDetail]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
			else
			{
  				format(string, sizeof(string), "Name: %s (ID %d) | Price: $%d | Contracted By: %s | Details: %s | Chased By: %s", GetPlayerNameEx(i), i, PlayerInfo[i][pHeadValue], PlayerInfo[i][pContractBy], PlayerInfo[i][pContractDetail], GetPlayerNameEx(GetChased[i]));
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
			}
  		}
	}
	if(hits && PlayerInfo[playerid][pRank] <= 1 && PlayerInfo[playerid][pMember] == 8)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "Use /givemehit to assign a contract to yourself.");
	}
	if(hits && PlayerInfo[playerid][pRank] >= 6 && PlayerInfo[playerid][pMember] == 8 && PlayerInfo[playerid][pLeader] == 8)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "Use /givehit to assign a contract to one of the hitmen.");
	}
	if(hits == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "There are no hits available.");
	}
	return 0;
}

/*stock GivePlayerValidWeapon( playerid, WeaponID, Ammo )
{
    //if((PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) && WeaponID != 46 && WeaponID != 43) return 1;
	switch( WeaponID )
	{
  		case 0, 1:
		{
			PlayerInfo[playerid][pGuns][ 0 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			PlayerInfo[playerid][pGuns][ 1 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 22, 23, 24:
		{
			PlayerInfo[playerid][pGuns][ 2 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 25, 26, 27:
		{
			PlayerInfo[playerid][pGuns][ 3 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 28, 29, 32:
		{
			PlayerInfo[playerid][pGuns][ 4 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 30, 31:
		{
			PlayerInfo[playerid][pGuns][ 5 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 33, 34:
		{
			PlayerInfo[playerid][pGuns][ 6 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 35, 36, 37, 38:
		{
			PlayerInfo[playerid][pGuns][ 7 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 16, 17, 18, 39, 40:
		{
			PlayerInfo[playerid][pGuns][ 8 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 41, 42, 43:
		{
			PlayerInfo[playerid][pGuns][ 9 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 10, 11, 12, 13, 14, 15:
		{
			PlayerInfo[playerid][pGuns][ 10 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 44, 45, 46:
		{
			PlayerInfo[playerid][pGuns][ 11 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
	}
	return 1;
}*/

stock GivePlayerValidWeapon( playerid, WeaponID, Ammo )
{
    if(zombieevent == 1 && GetPVarType(playerid, "pIsZombie")) return SendClientMessageEx(playerid, COLOR_GREY, "Zombies can't have guns.");
    //if((PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) && WeaponID != 46 && WeaponID != 43) return 1;
	switch( WeaponID )
	{
  		case 0, 1:
		{
			PlayerInfo[playerid][pGuns][ 0 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			PlayerInfo[playerid][pGuns][ 1 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 22, 23, 24:
		{
			PlayerInfo[playerid][pGuns][ 2 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 25, 26, 27:
		{
			PlayerInfo[playerid][pGuns][ 3 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 28, 29, 32:
		{
			PlayerInfo[playerid][pGuns][ 4 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 30, 31:
		{
			PlayerInfo[playerid][pGuns][ 5 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 33, 34:
		{
			PlayerInfo[playerid][pGuns][ 6 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 35, 36, 37, 38:
		{
			PlayerInfo[playerid][pGuns][ 7 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 16, 17, 18, 39, 40:
		{
			PlayerInfo[playerid][pGuns][ 8 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 41, 42, 43:
		{
			PlayerInfo[playerid][pGuns][ 9 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 10, 11, 12, 13, 14, 15:
		{
			PlayerInfo[playerid][pGuns][ 10 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
		case 44, 45, 46:
		{
			PlayerInfo[playerid][pGuns][ 11 ] = WeaponID;
			GivePlayerWeapon( playerid, WeaponID, Ammo );
		}
	}
	return 1;
}//Zombie

stock GetWeaponSlot(weaponid)
{
	switch( weaponid )
	{
		case 0, 1:
		{
			return 0;
		}
		case 2, 3, 4, 5, 6, 7, 8, 9:
		{
			return 1;
		}
		case 22, 23, 24:
		{
			return 2;
		}
		case 25, 26, 27:
		{
			return 3;
		}
		case 28, 29, 32:
		{
			return 4;
		}
		case 30, 31:
		{
			return 5;
		}
		case 33, 34:
		{
			return 6;
		}
		case 35, 36, 37, 38:
		{
			return 7;
		}
		case 16, 17, 18, 39, 40:
		{
			return 8;
		}
		case 41, 42, 43:
		{
			return 9;
		}
		case 10, 11, 12, 13, 14, 15:
		{
			return 10;
		}
		case 44, 45, 46:
		{
			return 11;
		}
	}
	return -1;
}


stock ExecuteHackerAction( playerid, weaponid )
{
	if(!gPlayerLogged{playerid}) { return 1; }
	if(PlayerInfo[playerid][pTut] == 0) { return 1; }
	if(playerTabbed[playerid] >= 1) { return 1; }
	if(GetPVarInt(playerid, "IsInArena") >= 0) { return 1; }

	new String[ 128 ], WeaponName[ 128 ];
	GetWeaponName( weaponid, WeaponName, sizeof( WeaponName ) );

	format( String, sizeof( String ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be weapon hacking (%s).", GetPlayerNameEx(playerid), playerid, WeaponName );
	ABroadCast( COLOR_YELLOW, String, 2 );
	//format(String, sizeof(String), "%s (ID %d) may possibly be weapon hacking (%s)", GetPlayerNameEx(playerid), playerid, WeaponName);
	//Log("logs/hack.log", String);

	return 1;
}

stock IsValidIP(ip[])
{
    new a;
	for (new i = 0; i < strlen(ip); i++)
	{
		if (ip[i] == '.')
		{
		    a++;
		}
	}
	if (a != 3)
	{
	    return 1;
	}
	return 0;
}

stock CheckBan(ip[])
{
	new string[20];
	if(fexist("ban.cfg"))
	{
	    new File: file = fopen("ban.cfg", io_read);
		while(fread(file, string))
		{
		    if (strcmp(ip, string, true, strlen(ip)) == 0)
		    {
		        fclose(file);
		        return 1;
		    }
		}
		fclose(file);
	}
	return 0;
}

stock AddBan(ip[])
{
	if (CheckBan(ip) == 0)
	{
		new File: file = fopen("ban.cfg", io_append);
		if(file)
		{
			new string[20];
			format(string, sizeof(string), "\n%s", ip);
		 	fwrite(file, string);
		 	fclose(file);
		 	foreach(new playerid: Player)
			{
       			if (strcmp(GetPlayerIpEx(playerid), ip) == 0)
				{
		            SendClientMessage(playerid, COLOR_WHITE, "{FF8000}Notice{FFFFFF}: You are banned from this server.");
					KickWithMessage(playerid);
				}
			}
			return 1;
		}
	}
	return 0;
}

stock RemoveBan(ip[])
{
    if (CheckBan(ip) == 1)
	{
	    new string[20];
		if(fexist("ban.cfg"))
		{
			new File: file = fopen("ban.cfg", io_read);
			fcreate("tempBan.cfg");
			new File: file2 = fopen("tempBan.cfg", io_append);
			if(file2)
			{
				while(fread(file, string))
				{
					if (strcmp(ip, string, true, strlen(ip)) != 0 && strcmp("\n", string) != 0)
				    {
						fwrite(file2, string);
					}
				}
				fclose(file);
				fclose(file2);
				file = fopen("ban.cfg", io_write);
				file2 = fopen("tempBan.cfg", io_read);
				while(fread(file2, string))
				{
					fwrite(file, string);
				}
				fclose(file);
				fclose(file2);
				fremove("tempBan.cfg");
			}
		}
		return 1;
    }
	return 0;
}

forward Firework(playerid, type);
public Firework(playerid, type)
{
	if(!IsPlayerConnected(playerid))
	{
	    DestroyDynamicObject(Rocket[playerid]);
	    DestroyDynamicObject(RocketLight[playerid]);
	    DestroyDynamicObject(RocketSmoke[playerid]);
	    return 1;
	}
    new Float:x, Float:y, Float:z;
    x = GetPVarFloat(playerid, "fxpos");
    y = GetPVarFloat(playerid, "fypos");
    z = GetPVarFloat(playerid, "fzpos");
    if (type == TYPE_COUNTDOWN)
    {
        new string[128];
		format(string, sizeof(string), "STAND BACK! 5 seconds till launch!", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	    SetTimerEx("Firework", 5000, 0, "ii", playerid, TYPE_LAUNCH);
    }
	else if(type == TYPE_LAUNCH)
	{
	    CreateExplosion(x ,y, z, 12, 5);
		new time = MoveDynamicObject(Rocket[playerid], x, y, z + RocketHeight, 10);
		MoveDynamicObject(RocketLight[playerid], x, y, z + 2 + RocketHeight, 10);
		MoveDynamicObject(RocketSmoke[playerid], x, y, z + RocketHeight, 10);
		SetTimerEx("Firework", time, 0, "ii", playerid, TYPE_EXPLODE);
	}
	else if(type == TYPE_EXPLODE)
	{
	    z += RocketHeight;
	    if (RocketExplosions[playerid] == 0)
		{
		    DestroyDynamicObject(Rocket[playerid]);
		    DestroyDynamicObject(RocketLight[playerid]);
		    DestroyDynamicObject(RocketSmoke[playerid]);
		    CreateExplosion(x ,y, z, 4, 10);
		    CreateExplosion(x ,y, z, 5, 10);
		    CreateExplosion(x ,y, z, 6, 10);
		}
		else if (RocketExplosions[playerid] >= MAX_FIREWORKS)
		{
		    for (new i = 0; i <= FireworkSpread; i++)
		    {
		    	CreateExplosion(x + float(i - (FireworkSpread / 2)), y, z, 7, 10);
		    	CreateExplosion(x, y + float(i - (FireworkSpread / 2)), z, 7, 10);
		    	CreateExplosion(x, y, z + float(i - (FireworkSpread / 2)), 7, 10);
		    }
		    RocketExplosions[playerid] = -1;
		    return 1;
		}
		else
		{
			x += float(random(FireworkSpread) - (FireworkSpread / 2));
			y += float(random(FireworkSpread) - (FireworkSpread / 2));
			z += float(random(FireworkSpread) - (FireworkSpread / 2));
		    CreateExplosion(x, y, z, 7, 10);
		}
		RocketExplosions[playerid]++;
  		SetTimerEx("Firework", 250, 0, "ii", playerid, TYPE_EXPLODE);
	}
	return 1;
}

stock GetPlayersName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock IsAGovernmentFaction(playerid)
{
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pMember] == 7) {
	    return 1;
	}
	return 0;
}

stock IsValidSkin(skinid)
{
	if (skinid < 0 || skinid > 299)
	    return 0;

	switch (skinid)
	{
	    case
		0, 105, 106, 107, 102, 103, 69, 123,
		104, 114, 115, 116, 174, 175, 100, 247, 173,
		248, 117, 118, 147, 163, 21, 24, 143, 71,
		156, 176, 177, 108, 109, 110, 165, 166,
		265, 266, 267, 269, 270, 271, 274, 276,
		277, 278, 279, 280, 281, 282, 283, 284,
		285, 286, 287, 288, 294, 296, 297: return 0;
	}

	return 1;
}

stock GetVehicleSpeed(vehicleid, get3d)
{
	new Float:x, Float:y, Float:z;
	GetVehicleVelocity(vehicleid, x, y, z);
	return SpeedCheck(x, y, z, 100.0, get3d);
}

stock IsFemaleSpawnSkin(skinid)
{
	switch (skinid)
	{
	    case
		9, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54,
		55, 56, 65, 76, 77, 89, 91, 93, 129, 130,
		131, 141, 148, 150, 151, 157, 169, 172, 190,
		191, 192, 193, 194, 195, 196, 197, 198, 199,
		211, 214, 215, 216, 218, 219, 224, 225, 226,
		231, 232, 233, 263, 298: return 1;
	}

	return 0;
}

stock IsFemaleSkin(skinid)
{
	switch (skinid)
	{
	    case
		9, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55,
		56, 63, 64, 65, 75, 76, 77, 85, 87, 88, 89, 90,
		91, 92, 93, 129, 130, 131, 138, 139, 140, 141,
		145, 148, 150, 151, 152, 157, 169, 172, 178, 190,
		191, 192, 193, 194, 195, 196, 197, 198, 199, 201,
		205, 207, 211, 214, 215, 216, 218, 219, 224, 225,
		226, 231, 232, 233, 237, 238, 243, 244, 245, 246,
		251, 256, 257, 263, 298: return 1;
	}

	return 0;
}

Float: player_get_speed(playerid) {

	new
		Float: fVelocity[3];

	GetVehicleVelocity(GetPlayerVehicleID(playerid), fVelocity[0], fVelocity[1], fVelocity[2]);
	return floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
}

Float: vehicle_get_speed(vehicleid) {

	new
		Float: fVelocity[3];

	GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);
	return floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])) * 100;
}

stock strfindcount(substring[], string[], bool:ignorecase = false, startpos = 0)
{
	new ncount, start = strfindex(string, substring, ignorecase, startpos);
	while(start >- 1)
	{
		start = strfindex(string, substring, ignorecase, start + strlen(substring));
		ncount++;
	}
	return ncount;
}

stock ResetPlayerWeaponsEx( playerid )
{
	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pGuns][ 0 ] = 0;
	PlayerInfo[playerid][pGuns][ 1 ] = 0;
	PlayerInfo[playerid][pGuns][ 2 ] = 0;
	PlayerInfo[playerid][pGuns][ 3 ] = 0;
	PlayerInfo[playerid][pGuns][ 4 ] = 0;
	PlayerInfo[playerid][pGuns][ 5 ] = 0;
	PlayerInfo[playerid][pGuns][ 6 ] = 0;
	PlayerInfo[playerid][pGuns][ 7 ] = 0;
	PlayerInfo[playerid][pGuns][ 8 ] = 0;
	PlayerInfo[playerid][pGuns][ 9 ] = 0;
	PlayerInfo[playerid][pGuns][ 10 ] = 0;
	PlayerInfo[playerid][pGuns][ 11 ] = 0;
	PlayerInfo[playerid][pAGuns][ 0 ] = 0;
	PlayerInfo[playerid][pAGuns][ 1 ] = 0;
	PlayerInfo[playerid][pAGuns][ 2 ] = 0;
	PlayerInfo[playerid][pAGuns][ 3 ] = 0;
	PlayerInfo[playerid][pAGuns][ 4 ] = 0;
	PlayerInfo[playerid][pAGuns][ 5 ] = 0;
	PlayerInfo[playerid][pAGuns][ 6 ] = 0;
	PlayerInfo[playerid][pAGuns][ 7 ] = 0;
	PlayerInfo[playerid][pAGuns][ 8 ] = 0;
	PlayerInfo[playerid][pAGuns][ 9 ] = 0;
	PlayerInfo[playerid][pAGuns][ 10 ] = 0;
	PlayerInfo[playerid][pAGuns][ 11 ] = 0;
	return 1;
}

stock ConvertTimeS(seconds)
{
	new string[64];
    if(seconds > 86400)
	{
 		if(floatround((seconds/86400), floatround_floor) > 1) format(string, sizeof(string), "%d days", floatround((seconds/86400), floatround_floor));
		else format(string, sizeof(string), "%d day", floatround((seconds/86400), floatround_floor));
		seconds=seconds-((floatround((seconds/86400), floatround_floor))*86400);
	}
	if(seconds > 3600)
	{
 		if(floatround((seconds/3600), floatround_floor) > 1) format(string, sizeof(string), "%s, %d hours", string, floatround((seconds/3600), floatround_floor));
   		else format(string, sizeof(string), "%s, %d hour", string, floatround((seconds/3600), floatround_floor));
		seconds=seconds-((floatround((seconds/3600), floatround_floor))*3600);
	}
	if(seconds > 60)
	{
 		if(floatround((seconds/60), floatround_floor) > 1) format(string, sizeof(string), "%s, %d minutes", string, floatround((seconds/60), floatround_floor));
   		else format(string, sizeof(string), "%s, %d minute", string, floatround((seconds/60), floatround_floor));
		seconds=seconds-((floatround((seconds/60), floatround_floor))*60);
	}
	if(seconds > 1) format(string, sizeof(string), "%s, %d seconds", string, seconds);
	else format(string, sizeof(string), "%s, %d seconds", string, seconds);
	return string;
}

stock ConvertTime(cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1)
{
    //Defines to drastically reduce the code..

    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

    #define CTM_cty 31536000
    #define CTM_ctmo 2628000
    #define CTM_ctw 604800
    #define CTM_ctd 86400
    #define CTM_cth 3600
    #define CTM_ctm 60

    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0


    new strii[128];

    if(cty != -1)
    {
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(cty,"year","years"),PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctmo != -1)
    {
        CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctmo,"month","months"),PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctw != -1)
    {
        CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, and %d %s",PLUR(ctw,"week","weeks"),PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctd != -1)
    {
        CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, and %d %s",PLUR(ctd,"day","days"),PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(cth != -1)
    {
        CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, and %d %s",PLUR(cth,"hour","hours"),PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    if(ctm != -1)
    {
        CT(ctm);
        format(strii, sizeof(strii), "%d %s, and %d %s",PLUR(ctm,"minute","minutes"),PLUR(cts,"second","seconds"));
        return strii;
    }
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"second","seconds"));
    return strii;
}

stock IsValidVehicleID(vehicleid)
{
   if(GetVehicleModel(vehicleid)) return 1;
   return 0;
}

forward CloseCourtGate1();
public CloseCourtGate1()
{
	MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934,7698.23632812,4);
	return 1;
}

forward CloseCourtGate2();
public CloseCourtGate2()
{
	MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719,7698.24169922,4);
	return 1;
}

forward CloseWestLobby();
public CloseWestLobby()
{
	MoveDynamicObject(westlobby1,239.71582031,116.09179688,1002.21502686,4);
	MoveDynamicObject(westlobby2,239.67968750,119.09960938,1002.21502686,4);
	return 1;
}

forward CloseEastLobby();
public CloseEastLobby()
{
	MoveDynamicObject(eastlobby1,253.14941406,110.59960938,1002.21502686,4);
	MoveDynamicObject(eastlobby2,253.18457031,107.59960938,1002.21502686,4);
	return 1;
}

forward ClosePrisonDoor();
public ClosePrisonDoor()
{
	MoveDynamicObject(BlastDoors[0],-2095.10156250 ,-203.91210938, 994.66918945, 1);
	return 1;
}

forward ClosePrisonDoor2();
public ClosePrisonDoor2()
{
	MoveDynamicObject(BlastDoors[1],-2088.76562500,-211.33984375,994.66918945, 1);
	MoveDynamicObject(BlastDoors[6] ,-2088.76562500,-209.21093750,994.66918945, 1);
	return 1;
}

forward ClosePrisonDoor3();
public ClosePrisonDoor3()
{
    MoveDynamicObject(BlastDoors[11], -2050.50097656,-205.82617188,984.02539062, 1);
    return 1;
}

forward ClosePrisonDoor4();
public ClosePrisonDoor4()
{
	MoveDynamicObject(BlastDoors[16], -2057.9 , -144.905 ,987.24, 1);
	return 1;
}

forward CloseBlastDoor();
public CloseBlastDoor()
{
	MoveDynamicObject(blastdoor[0],-764.11816406,2568.81445312,10021.5,2);
	return 1;
}

forward CloseBlastDoor2();
public CloseBlastDoor2()
{
    MoveDynamicObject(blastdoor[1],-746.02636719,2535.19433594,10021.5,2);
	return 1;
}

forward CloseBlastDoor3();
public CloseBlastDoor3()
{
	MoveDynamicObject(blastdoor[2],-765.26171875,2552.31347656,10021.5,2);
	return 1;
}

forward CloseCage();
public CloseCage()
{
   	MoveDynamicObject(cage,-773.52050781,2545.62109375,10022.29492188,2);
	return 1;
}

forward CloseLocker();
public CloseLocker()
{
	MoveDynamicObject(locker1,267.29980469,112.56640625,1003.61718750,4);
	MoveDynamicObject(locker2,264.29980469,112.52929688,1003.61718750,4);
	return 1;
}

forward CloseEntranceDoor();
public CloseEntranceDoor()
{
    MoveDynamicObject(entrancedoor,-766.27539062,2536.58691406,10019.5,2);
	return 1;
}

forward CloseCCTV();
public CloseCCTV()
{
	MoveDynamicObject(cctv1,264.44921875,115.79980469,1003.61718750,4);
	MoveDynamicObject(cctv2,267.46875000,115.83691406,1003.61718750,4);
	return 1;
}

forward CloseChief();
public CloseChief()
{
	MoveDynamicObject(chief1,229.59960938,119.50000000,1009.21875000,4);
	MoveDynamicObject(chief2,232.59960938,119.53515625,1009.21875000,4);
	return 1;
}

forward CloseSASD1();
public CloseSASD1()
{
	MoveDynamicObject(sasd1A,2511.65332031,-1697.00976562,561.79223633,4);
	MoveDynamicObject(sasd1B,2514.67211914,-1696.97485352,561.79223633,4);
	return 1;
}

forward CloseSASD2();
public CloseSASD2()
{
	MoveDynamicObject(sasd2A,2516.87548828,-1697.01525879,561.79223633,4);
	MoveDynamicObject(sasd2B,2519.89257812,-1696.97509766,561.79223633,4);
	return 1;
}

forward CloseSASD3();
public CloseSASD3()
{
	MoveDynamicObject(sasd3A,2522.15600586,-1697.01550293,561.79223633,4);
	MoveDynamicObject(sasd3B,2525.15893555,-1696.98010254,561.79223633,4);
	return 1;
}

forward CloseSASD4();
public CloseSASD4()
{
	MoveDynamicObject(sasd4A,2511.84130859,-1660.08081055,561.79528809,4);
	MoveDynamicObject(sasd4B,2514.81982422,-1660.04650879,561.80004883,4);
	return 1;
}

forward CloseSASD5();
public CloseSASD5()
{
	MoveDynamicObject(sasd5A,2522.86059570,-1660.07177734,561.80206299,4);
	MoveDynamicObject(sasd5B,2519.84228516,-1660.10888672,561.80004883,4);
	return 1;
}

forward CloseSANewsStudio();
public CloseSANewsStudio()
{
	MoveDynamicObject(SANewsStudioA,625.60937500,-10.80000019,1106.96081543,4);
	MoveDynamicObject(SANewsStudioB,625.64941406,-13.77000046,1106.96081543,4);
	return 1;
}

forward CloseSANewsPrivate();
public CloseSANewsPrivate()
{
	MoveDynamicObject(SANewsPrivateA,625.61999512,-0.55000001,1106.96081543,4);
	MoveDynamicObject(SANewsPrivateB,625.65002441,-3.54999995,1106.96081543,4);
	return 1;
}

forward CloseSANewsOffice();
public CloseSANewsOffice()
{
	MoveDynamicObject(SANewsOfficeA,614.66998291,17.82812500,1106.98425293,4);
	MoveDynamicObject(SANewsOfficeB,617.69000244,17.86899948,1106.98425293,4);
	return 1;
}

forward CloseFBILobbyLeft();
public CloseFBILobbyLeft()
{
	MoveDynamicObject(FBILobbyLeft,295.40136719,-1498.43457031,-46.13965225,4);
	return 1;
}

forward CloseFBILobbyRight();
public CloseFBILobbyRight()
{
	MoveDynamicObject(FBILobbyRight,302.39355469,-1521.62988281,-46.13965225,4);
	return 1;
}

forward CloseFBIPrivate();
public CloseFBIPrivate()
{
	MoveDynamicObject(FBIPrivate[0],299.29986572,-1492.82666016,-28.73300552,4);
	MoveDynamicObject(FBIPrivate[1],299.33737183,-1495.83911133,-28.73300552,4);
	return 1;
}

forward HideReportText(playerid);
public HideReportText(playerid)
{
    TextDrawHideForPlayer(playerid, PriorityReport[playerid]);
    return 1;
}

stock ExecuteNOPAction(playerid)
{
	new string[128];
	new newcar = GetPlayerVehicleID(playerid);
	if(NOPTrigger[playerid] >= MAX_NOP_WARNINGS) { return 1; }
	NOPTrigger[playerid]++;
	RemovePlayerFromVehicle(playerid);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	SetPlayerPosEx(playerid, X, Y, Z+2);
	NOPCheck(playerid);
	if(NOPTrigger[playerid] > 1)
	{
		new sec = (NOPTrigger[playerid] * 5000)/1000-1;
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may be NOP hacking - restricted vehicle (model %d) for %d seconds.", GetPlayerNameEx(playerid), playerid, GetVehicleModel(newcar),sec);
		ABroadCast(COLOR_YELLOW, string, 2);
	}
	return 1;
}

stock Random(min, max)
{
    new a = random(max - min) + min;
    return a;
}

/*SendReportToQue(reportfrom, report[])
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID;

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        Reports[newid][ReportFrom] = reportfrom;
        Reports[newid][TimeToExpire] = 5;
        Reports[newid][HasBeenUsed] = 1;
        Reports[newid][BeingUsed] = 1;
        Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
        new string[128];
        format(string, sizeof(string), "Report from [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, (report));
        ABroadCast(COLOR_REPORT,string,2);
    }
    else
    {
        ClearReports();
        SendReportToQue(reportfrom, report);
    }
    if(PlayerInfo[reportfrom][pDonateRank] >= 3)
    {
        new string[128];
		format(string, sizeof(string), "~r~Priority Report: ~g~%d", newid);
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pAdmin] >= 2)
		    {
		        GameTextForPlayer(i, string, 1500, 1);
			}
		}
	}
}*/

stock SendReportToQue(reportfrom, report[], reportlevel, reportpriority)
{
    new bool:breakingloop = false, newid = INVALID_REPORT_ID, string[128];

	for(new i=0;i<MAX_REPORTS;i++)
	{
		if(!breakingloop)
		{
			if(Reports[i][HasBeenUsed] == 0)
			{
				breakingloop = true;
				newid = i;
			}
		}
    }
    if(newid != INVALID_REPORT_ID)
    {
        switch(reportpriority)
       	{
   	    	case 1:
   	    	{
	        	foreach(Player, i)
				{
 					if(PlayerInfo[i][pAdmin] >= 2 && PlayerInfo[i][pTogReports] == 0)
   					{
     					GameTextForPlayer(i, "~r~DM Alert", 1500, 1);
					}
				}
    		}
 	    	case 2:
  	    	{
        		foreach(Player, i)
				{
 					if(PlayerInfo[i][pAdmin] >= reportlevel && PlayerInfo[i][pTogReports] == 0)
   					{
		        		GameTextForPlayer(i, "~p~Priority Report", 1500, 1);
					}
				}
			}
   			case 3..4:
 	    	{
       			foreach(Player, i)
				{
 					if(PlayerInfo[i][pAdmin] >= reportlevel && PlayerInfo[i][pTogReports] == 0)
   					{
 			    		TextDrawSetString(PriorityReport[i], "~y~New Report");
       					TextDrawShowForPlayer(i, PriorityReport[i]);
        				SetTimerEx("HideReportText", 2000, 0, "d", i);
					}
				}
    		}
 	    	case 5:
  	    	{
        		foreach(Player, i)
				{
 					if(PlayerInfo[i][pAdmin] >= reportlevel && PlayerInfo[i][pTogReports] == 0)
   					{
     					//GameTextForPlayer(i, "~w~~n~n~n~Priority 5 Item Pending", 1500, 3);
       					TextDrawSetString(PriorityReport[i], "~p~Priority 5 Item Pending");
        				TextDrawShowForPlayer(i, PriorityReport[i]);
	        			SetTimerEx("HideReportText", 2000, 0, "d", i);
					}
				}
    		}
 	    	case 6:
  	    	{
        		foreach(Player, i)
				{
 					if(PlayerInfo[i][pAdmin] >= reportlevel && PlayerInfo[i][pTogReports] == 0)
   					{
     					//GameTextForPlayer(i, "~w~~n~n~n~Priority 5 Item Pending", 1500, 3);
       					TextDrawSetString(PriorityReport[i], "~r~Prize Claim Report");
        				TextDrawShowForPlayer(i, PriorityReport[i]);
	        			SetTimerEx("HideReportText", 2000, 0, "d", i);
					}
				}
    		}
     	}
     	foreach(Player, i)
     	{
     	    if(PlayerInfo[i][pAdmin] >= 2 && PlayerInfo[i][pTogReports] == 0 && !GetPVarType(i, "TogReports")) {
     	       // format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: 5 minutes | Priority: %i", GetPlayerNameEx(reportfrom), reportfrom, newid, report, reportpriority);
				format(string, sizeof(string), "Report from [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, report);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
     	    }
     	    else if((reportpriority == 1 || reportpriority == 2) && PlayerInfo[i][pTogReports] == 0 && GetPVarType(i, "TogReports")) {
     	     //   format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: 5 minutes | Priority: %i", GetPlayerNameEx(reportfrom), reportfrom, newid, report, reportpriority);
				format(string, sizeof(string), "Report from [%i] %s (RID: %i): %s", reportfrom, GetPlayerNameEx(reportfrom), newid, report);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
     	    }
     	}
     	SetPVarInt(reportfrom, "HasReport", 1);
        if(reportlevel == 2)
		{
        	strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        	Reports[newid][ReportFrom] = reportfrom;
        	Reports[newid][TimeToExpire] = 5;
        	Reports[newid][HasBeenUsed] = 1;
        	Reports[newid][BeingUsed] = 1;
        	Reports[newid][ReportPriority] = reportpriority;
        	Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
		}
		else
		{
		    strmid(Reports[newid][Report], report, 0, strlen(report), 128);
        	Reports[newid][ReportFrom] = reportfrom;
        	Reports[newid][TimeToExpire] = 5;
        	Reports[newid][HasBeenUsed] = 1;
        	Reports[newid][BeingUsed] = 1;
        	Reports[newid][ReportPriority] = reportpriority;
        	Reports[newid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", newid);
		}
    }
    else
    {
        ClearReports();
        SendReportToQue(reportfrom, report, reportlevel, reportpriority);
    }
}

stock ClearReports()
{
	for(new i=0;i<MAX_REPORTS;i++)
	{
	    if(Reports[i][BeingUsed] == 1) {
			DeletePVar(Reports[i][ReportFrom], "HasReport");
		}
		strmid(Reports[i][Report], "None", 0, 4, 4);
		Reports[i][CheckingReport] = INVALID_PLAYER_ID;
        Reports[i][ReportFrom] = INVALID_PLAYER_ID;
        Reports[i][TimeToExpire] = 0;
        Reports[i][HasBeenUsed] = 0;
        Reports[i][BeingUsed] = 0;
        Reports[i][ReportPriority] = 0;
        Reports[i][ReportLevel] = 0;
	}
	return 1;
}

stock Float: GetDistanceToCar(playerid, veh) {

	new
		Float: fVehiclePos[3];

	GetVehiclePos(veh, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
	return GetPlayerDistanceFromPoint(playerid, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
}

stock GetClosestCar(iPlayer, iException = INVALID_VEHICLE_ID, Float: fRange = Float: 0x7F800000) {

	new
		iReturnID = INVALID_VEHICLE_ID,
		Float: fVehiclePos[4];

	for(new i = 1; i <= MAX_VEHICLES; ++i) if(GetVehicleModel(i) && i != iException) {
		GetVehiclePos(i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
		if((fVehiclePos[3] = GetPlayerDistanceFromPoint(iPlayer, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) < fRange) {
			fRange = fVehiclePos[3];
			iReturnID = i;
		}
	}
	return iReturnID;
}

forward ERequested();
public ERequested()
{
	EventKernel[EventAdvisor] = 0;
	return 1;
}

forward Three();
public Three()
{
 	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "3");
	return 1;
}

forward Two();
public Two()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "2");
	return 1;
}

forward One();
public One()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "1");
 	return 1;
}

forward GoGoGo();
public GoGoGo()
{
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, "Go!");
 	return 1;
}

forward BackupClear(playerid, calledbytimer);
public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
		{
			if (Backup[playerid] == 1)
			{
			    foreach(new i: Player)
				{
					if(IsACop(i))
					{
						SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
					}
				}
				SetPlayerToTeamColor(playerid);
				if (calledbytimer != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "Your backup request has been cleared.");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "Your backup request has been cleared automatically.");
				}
				Backup[playerid] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have an active backup request!");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are not in Law Enforcement!");
			}
		}
	}
	return 1;
}

forward ClearDrugs(playerid);
public ClearDrugs(playerid)
{
	UsedWeed[playerid] = 0;
	UsedCrack[playerid] = 0;
	return 1;
}

forward PrepareLotto();
public PrepareLotto()
{
 	SetTimerEx("StartLotto", 60000, 0, "d", 1);
	return 1;
}

forward StartLotto(stage);
public StartLotto(stage)
{
	new minutes, string[128];
	if(stage <= 3 && stage != 0)
	{
	    if(stage == 1) minutes = 6;
	    else if(stage == 2) minutes = 4;
	    else if(stage == 3) minutes = 2;
		format(string, sizeof(string), "Lottery News: A Lottery Election is about to start, please get a lottery ticket at any 24/7. %d minutes left.", minutes);
		OOCOff(COLOR_WHITE, string);
		if(stage > 0)
		{
			SetTimerEx("StartLotto", 120000, 0, "d", stage+1);
		}
	}
	else if(stage == 4)
	{
	    SetTimerEx("EndLotto", 1000, 0, "d", 3);
	}
	return 1;
}

forward EndLotto(secondt);
public EndLotto(secondt)
{
	new string[128];
	if(secondt != 0)
	{
		format(string, sizeof(string), "Lottery News Countdown: %d.", secondt);
		OOCOff(COLOR_WHITE, string);
		SetTimerEx("EndLotto", 1000, 0, "d", secondt-1);
	}
	else
	{
	    format(string, sizeof(string), "Lottery News: We have started the Lottery Election.");
		OOCOff(COLOR_WHITE, string);
		new rand = Random(1, 300);
		Lotto(rand);
	}
	return 1;
}

stock PlayerFacePlayer( playerid, targetplayerid )
{
	new Float: Angle;
	GetPlayerFacingAngle( playerid, Angle );
	SetPlayerFacingAngle( targetplayerid, Angle+180 );
	return true;
}

stock GivePlayerEventWeapons( playerid )
{
	if( GetPVarInt( playerid, "EventToken" ) == 1 )
	{
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 0 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 1 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 2 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 3 ], 60000 );
		GivePlayerWeapon( playerid, EventKernel[ EventWeapons ][ 4 ], 60000 );
	}

	return 1;
}

stock crc32(string[])
{
	new crc_table[256] = {
			0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535,
			0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD,
			0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D,
			0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,
			0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
			0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,
			0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC,
			0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
			0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB,
			0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
			0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB,
			0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,
			0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA,
			0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE,
			0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
			0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,
			0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409,
			0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,
			0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739,
			0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
			0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344, 0x8708A3D2, 0x1E01F268,
			0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0,
			0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8,
			0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,
			0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
			0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703,
			0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7,
			0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,
			0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE,
			0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
			0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 0x88085AE6,
			0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,
			0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D,
			0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5,
			0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
			0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
			0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
	};
	new crc = -1;
	for(new i = 0; i < strlen(string); i++)
	{
 		crc = ( crc >>> 8 ) ^ crc_table[(crc ^ string[i]) & 0xFF];
  	}
  	return crc ^ -1;
}

stock GetPlayerSQLId(playerid)
{
	if(gPlayerLogged{playerid})
	{
		return PlayerInfo[playerid][pId];
	}
	return -1;
}

stock GetUserSQLId(player2)
{
	if(gPlayerLogged{player2})
	{
		return PlayerInfo[player2][pId];
	}
	return -1;
}

stock GetPlayerNameExt(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, sizeof(name));
	return name;
}

stock GetPlayerNameEx(playerid) {

	new
		sz_playerName[MAX_PLAYER_NAME],
		i_pos;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	while ((i_pos = strfindex(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
	return sz_playerName;
}

stock GetPlayerIpEx(playerid)
{
    new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock StripNewLine(string[])
{
  new len = strlen(string);
  if (string[0]==0) return ;
  if ((string[len - 1] == '\n') || (string[len - 1] == '\r'))
    {
      string[len - 1] = 0;
      if (string[0]==0) return ;
      if ((string[len - 2] == '\n') || (string[len - 2] == '\r')) string[len - 2] = 0;
    }
}

//------------------------------------------------------------------------------------------------------

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	Seatbelt[playerid] = 0;
	if(PlayerCuffed[playerid] != 0) SetPVarInt( playerid, "ToBeEjected", 1 );

	if(ispassenger) {
		if(GetPVarType(playerid, "Injured")) {
			SetPlayerPosEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
		}
		else if(PlayerCuffed[playerid] != 0) {
			ClearAnimations(playerid);
			ApplyAnimation(playerid,"ped","cower",1,1,0,0,0,0,1);
			TogglePlayerControllable(playerid, false);
		}
	}
	SetPVarInt(playerid, "LastWeapon", GetPlayerWeapon(playerid));

	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	if(engine == VEHICLE_PARAMS_UNSET) switch(GetVehicleModel(vehicleid)) {
		case 509, 481, 510: VehicleFuel[vehicleid] = 100, arr_Engine{vehicleid} = 1, SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
		default: SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_OFF,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective), arr_Engine{vehicleid} = 0;
	}

    /*if(GetPVarType(playerid, "Pizza") && !(IsAPizzaCar(vehicleid)))
	{
	    new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPosEx(playerid, slx, sly, slz+1.3);
		PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
		RemovePlayerFromVehicle(playerid);
		NOPCheck(playerid);
		SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be in a Pizzaboy when delivering pizzas!");
		return 1;
	}*/
	if(!ispassenger)
	{
	    SetPlayerArmedWeapon(playerid, 0);
	    new dvehid = GetDynamicCarID(vehicleid);
   		if(dvehid > -1)
		{
		    if(FactionVehicleInfo[dvehid][fGroupID] > 0)
			{
			    if(FactionVehicleInfo[dvehid][fGroupID] != PlayerInfo[playerid][pMember])
				{
				    new string[128];
				    
				    format(string, sizeof(string), "You are not in %s", FactionInfo[FactionVehicleInfo[dvehid][fGroupID]][fName]);
				    RemovePlayerFromVehicle(playerid);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz);
				    NOPCheck(playerid);
				    SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}
		}
   		if(dvehid > -1)
		{
		    if(FactionVehicleInfo[dvehid][fGroupDivID] > 0)
			{
			    if(FactionVehicleInfo[dvehid][fGroupDivID] != PlayerInfo[playerid][pDivision])
				{
				    new string[128];
				    format(string, sizeof(string), "You are not in %s's %s division",
					FactionInfo[FactionVehicleInfo[dvehid][fGroupID]][fName],
					FacDivs[FactionVehicleInfo[dvehid][fGroupID]][FactionVehicleInfo[dvehid][fGroupDivID] - 1]
					);
				    RemovePlayerFromVehicle(playerid);
				    new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz);
				    NOPCheck(playerid);
				    SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
			}
		}
		else if(IsVIPcar(vehicleid))
		{
		    if(PlayerInfo[playerid][pDonateRank] == 0)
			{
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.3);
				PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a VIP, this is a vehicle from the VIP Garage!");
			}
		}
		/*else if(IsAPizzaCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21)
		    {
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.3);
				PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a Pizza Boy!");
			}
		}*/
		else if(IsAnAmbulance(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
			    if(FDSAVehicles[13] == vehicleid && PlayerInfo[playerid][pRank] < 5)
			    {
			        RemovePlayerFromVehicle(playerid);
			        new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz);
					NOPCheck(playerid);
					SendClientMessageEx(playerid, COLOR_GRAD2, "Only ranks 5+ can drive this vehicle.");
			    }
			}
		    else
			{
			    SendClientMessageEx(playerid,COLOR_GREY,"   You are not in the FDSA!");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
				NOPCheck(playerid);
			}
		}
		else if(IsAnSASDCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
		    {
		    }
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		        NOPCheck(playerid);
		        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SASD!");
		    }
		}
		else if(IsATruckerCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
			{
				new string[128];

				new iTruckContents = TruckContents{vehicleid};
				new truckcontentname[50];
				if(iTruckContents == 0)
				{ format(truckcontentname, sizeof(truckcontentname), "None"); }
				else if(iTruckContents >= 1 && iTruckContents <= 3)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Food & beverages");}
				else if(iTruckContents >= 4 && iTruckContents <= 6)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Clothing"); }
				else if(iTruckContents == 7)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Legal materials"); }
				else if(iTruckContents >= 8 && iTruckContents <= 10)
				{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}24/7 items"); }
				else if(iTruckContents >= 11 && iTruckContents <= 15)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal weapons"); }
				else if(iTruckContents >= 16 && iTruckContents <= 20)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal drugs"); }
				else if(iTruckContents >= 21 && iTruckContents <= 25)
				{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materials"); }

				format(string, sizeof(string), "TRUCKER JOB: (Truck registration: %s %d) - (Content: %s{FFFF00})", GetVehicleName(vehicleid), vehicleid, truckcontentname);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);

				if(IsACop(playerid) && iTruckContents >= 11)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "TRUCKER JOB: To remove the illegal goods type /cleartruck near the Truck.");
				}
				if(iTruckContents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "TRUCKER JOB: To deliver the goods type /hijacktruck as the driver.");
				}
				else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
				{
    				SendClientMessageEx(playerid, COLOR_YELLOW, "TRUCKER JOB: To get goods type /loadtruck as the driver.");
				}
				else if(TruckUsed[playerid] == vehicleid && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "TRUCKER JOB: This is your Truck, you have not returned it to the docks yet for your pay.");
				}
				else if(TruckUsed[playerid] == vehicleid)
   				{
      				SendClientMessageEx(playerid, COLOR_YELLOW, "TRUCKER JOB: This is your Truck, you have not delivered your goods yet.");
     			}
				else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
   				{
      				SendClientMessageEx(playerid, COLOR_YELLOW, "TRUCKER JOB: You are already on another delivery, type /cancel truck to cancel that delivery.");
     			}
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a Trucker!");
			}
		}
		else if(IsAnPrisonCar(vehicleid))
		{
		    if(IsACop(playerid))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a LEO!");
			}
		}
		else if(IsAnSFPDCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SFPD!");
			}
		}
		else if(IsAnOPGVehicles(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Rapid Recovery!");
			}
		}
		else if(IsAnEPCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 5)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SFPD Executive Protection Division!");
			}
		}
		else if(IsAnWPCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 7)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
    			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SASD!");
			}
		}
		else if(IsAOPGVehicle(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 13)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not part of the Rapid Recovery!");
			}
		}
		else if(IsAShaftCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 16)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not part of the S.H.A.F.T!");
			}
		}
		else if(IsATierraCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pRank] >= 2)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not Tierra Robada rank 2+!");
			}
		}
		else if(IsATierraARCar(vehicleid))
		{
		    if((PlayerInfo[playerid][pMember] != 12 && PlayerInfo[playerid][pDivision] != 2) || ((GetVehicleModel(vehicleid) == 476 || GetVehicleModel(vehicleid) == 447) && PlayerInfo[playerid][pRank] < 4))
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Tierra Robada Armed Forces Division!");
			}
		}
		else if(IsATierraESCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Tierra Robada Emergency Services Division!");
			}
		}
		else if(IsAGovernmentCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 || IsACop(playerid))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Government!");
			}
		}
		else if(IsACopCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the LSPD!");
			}
		}
		else if(IsASaPaAirCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 17 && PlayerInfo[playerid][pDivision] == 3 ||PlayerInfo[playerid][pLeader] == 17 && PlayerInfo[playerid][pDivision] == 3)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SA:PA Air Division!");
			}
		}
		else if(IsASaPaCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 17||PlayerInfo[playerid][pLeader] == 17)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SA:PA!");
			}
		}
		else if(IsAFBICar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the FBI!");
			}
		}
		else if(IsAnNGAIRCar(vehicleid))
		{
		    if((PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11) && (PlayerInfo[playerid][pDivision] == 1 || PlayerInfo[playerid][pDivision] == 3 ||PlayerInfo[playerid][pDivision] == 4))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS AIR Division!");
			}
		}
		else if(IsAnNGARMCar(vehicleid))
		{
		    if((PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11) && (PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 3))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS ARM Division!");
			}
		}
		else if(IsAnNGCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS!");
			}
		}
		else if(IsAnDOCCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11)
			{
			}
		    else
			{
	   			NOPCheck(playerid);
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS!");
			}
		}
		else if(IsAnMPSCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
		    {
		    }
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		        NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in SASD.");
		    }
		}
		else if(IsACoastguardCar(vehicleid))
		{
		    if( ( PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 ) || ( PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 3 ))
			{
			}
			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Coastguard division!");
			}
		}
	 	else if(IsANewsCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 9 ||PlayerInfo[playerid][pLeader] == 9)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SANews!");
			}
		}
	   	else if(IsAPlane(vehicleid))
		{
	  		if(PlayerInfo[playerid][pFlyLic] != 1)
	  		{
		  		RemovePlayerFromVehicle(playerid);
		  		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		  		NOPCheck(playerid);
			 	SendClientMessageEx(playerid,COLOR_GREY,"You don't have a pilot license!");
	  		}
		}
		else if(TaxiVehicles[10] ==vehicleid || TaxiVehicles[11]==vehicleid || TaxiVehicles[12]==vehicleid)
		{
		    if(PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pDivision] == 2|| PlayerInfo[playerid][pLeader] == 10)
			{
			}
		    else
			{
		        SendClientMessageEx(playerid,COLOR_GREY,"   You are not in the Taxi Company! (ATO Division)");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		    }
		}
		else if(TaxiCompanyVehicle(vehicleid))
		{
	        if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
			{
			}
		    else
			{
		        SendClientMessageEx(playerid,COLOR_GREY,"   You are not in the Taxi Company!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		    }
		}
		else if(IsAHelicopter(vehicleid))
		{
		    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
			GivePlayerValidWeapon(playerid, 46, 60000);
		}
		else if(IsAnTaxi(vehicleid) || IsAnBus(vehicleid))
		{
	        if(PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pTaxiLicense] == 1)
			{
			}
		    else
			{
		        SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Taxi/Bus Driver!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		    }
		}
	}
	else if(!IsPlayerInRangeOfVehicle(playerid, vehicleid, 7.5) || LockStatus{vehicleid} >= 1) { // G-bugging fix
		ClearAnimations(playerid);
	}
	return 1;
}

ReadyToCapture(pointid)
{
	new string[128];
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pFMember] < 255)
		{
			if(Points[pointid][Type] == 3 && Points[pointid][Type] == 4) return 1;
			format(string, sizeof(string), "%s has become available to capture! Stand at here and /capture it!", Points[pointid][Name]);
			Points[pointid][CaptureProccess] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[pointid][Pointx], Points[pointid][Pointy], Points[pointid][Pointz], 10.0, _, _, _, _, _, i);
			Points[pointid][CaptureProccessEx] = 1;
		}
	}
	return 1;
}

stock GetPlayerHFactionInfo(targetid, rankn, faction, divn, rank[64], division[64], employer[64])
{
	switch (faction) // employer/rank/division data is pulled from here
	{
	    case 1:
		{
            employer = "LSPD";
			switch(rankn)
			{
			    case 1: rank = "Officer";
			    case 2: rank = "Corporal";
			    case 3: rank = "Sergeant";
			    case 4: rank = "Lieutenant";
			    case 5: rank = "Captain";
			    case 6: rank = "Chief";
			    default: rank = "Cadet";
			}
			switch(divn)
			{
			    case 1: division = "General Duties";
			    case 2: division = "DET";
			    case 3: division = "FTO";
			    case 4: division = "IA";
			    case 5: division = "SWAT";
			    case 6: division = "HSIU";
			    default: division = "General Duties";
			}
		}
  		case 2:
		{
            employer = "FBI";
			switch(rankn)
			{
			    case 1: rank = "Staff";
			    case 2: rank = "Agent";
			    case 3: rank = "Senior Agent";
			    case 4: rank = "Special Agent";
			    case 5: rank = "Assistant Director";
			    case 6: rank = "Director";
			    default: rank = "Intern";
			}
			switch(divn)
			{
			    case 1: division = "General Duties";
			    case 2: division = "GU";
			    case 3: division = "FAN";
			    case 4: division = "CID";
			    case 5: division = "IA";
				case 6: division = "NSB";
			    default: division = "General Duties";
			}
		}
  		case 3:
		{
            employer = "SFPD";
			switch(rankn)
			{
				case 1: rank = "Officer";
				case 2: rank = "Corporal";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Chief";
				default: rank = "Cadet";
			}
			switch(divn)
			{
			    case 1: division = "HR";
				case 2: division = "ERT";
			    case 3: division = "IA";
			    case 4: division = "SO";
			    case 5: division = "DOC";
			    default: division = "General Duties";
			}
		}
  		case 4:
		{
            employer = "FDSA";
			switch(rankn)
			{
				case 1: rank = "EMT Intermediate";
				case 2: rank = "EMT Paramedic";
				case 3: rank = "Lieutenant";
				case 4: rank = "Captain";
				case 5: rank = "Deputy Chief";
				case 6: rank = "Chief";
				default: rank = "EMT Basic";
			}
			switch(divn)
			{
			    case 1: division = "FD";
			    case 2: division = "Life Flight";
			    case 3: division = "T&R";
			    default: division = "General Duties";
			}
		}
		case 5:
		{
	        employer = "Judicial";
			switch(rankn)
			{
				case 1: rank = "Clerk of Court";
				case 2: rank = "District Attorney";
				case 3: rank = "District Judge";
				case 4: rank = "Appellate Judge";
				case 5: rank = "Associate Justice";
				case 6: rank = "Chief Justice";
				default: rank = "Fugitive Recovery Agent";
			}
			division = "None";
		}
  		case 6:
		{
            employer = "State Government";
			switch(rankn)
			{
				case 1: rank = "Staff Member";
				case 2: rank = "G.E.T. Officer";
				case 3: rank = "Legislator";
				case 4: rank = "Government Cabinet";
				case 5: rank = "Vice President";
				case 6: rank = "President";
				default: rank = "Intern";
			}
			division = "None";
		}
  		case 7:
		{
	        employer = "SASD";
			switch(rankn)
			{
				case 1: rank = "Deputy";
				case 2: rank = "Senior Deputy";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Sheriff";
				default: rank = "Trainee";
			}
			switch(divn)
			{
			    case 2: division = "TET";
			    case 3: division = "SCU";
			    case 4: division = "SORT";
			    case 5: division = "FTO";
			    default: division = "Patrol";
			}
		}
		case 8:
		{
		    employer = "Hitman Agency";
		    switch(rankn)
		    {
    			case 1: rank = "Freelancer";
				case 2: rank = "Marksman";
				case 3: rank = "Agent";
				case 4: rank = "Special Agent";
				case 5: rank = "Vice Director";
				case 6: rank = "Director";
				default: rank = "Freelancer";
			}
			division = "None";
		}
		case 9:
		{
			employer = "SANews";
			switch(rankn)
			{
				case 1: rank = "Local Reporter";
				case 2: rank = "Local Editor";
				case 3: rank = "Network Anchor";
				case 4: rank = "Network Editor";
				case 5: rank = "Asst. Network Producer";
				case 6: rank = "Network Producer";
				default: rank = "Intern";
			}
			switch(divn)
			{
			    case 1: division = "Security";
			    case 2: division = "IA";
			    case 3: division = "Tech Support";
			    case 4: division = "TnR";
			    default: division = "General";
			}
		}
   		case 10:
		{
            employer = "San Andreas Department of Transportation";
			switch(rankn)
			{
				case 1: rank = "Trainee";
				case 2: rank = "Taxi Rookie";
				case 3: rank = "Cabbie";
				case 4: rank = "Dispatcher";
				case 5: rank = "Shift Supervisor";
				case 6: rank = "Taxi Company Owner";
				default: rank = "Trainee";
			}
			switch(divn)
			{
			    case 1: division = "Internal Affairs";
			    case 2: division = "Alternative Transportation Operators";
			    case 3: division = "T&R";
			    default: division = "None";
			}
		}
		case 11:
		{
            employer = "SAAS";
			switch(rankn)
 			{
 			    case 0: rank = "Private";
 				case 1: rank = "Corporal";
 				case 2: rank = "Sergeant";
 				case 3: rank = "Lieutenant";
 				case 4: rank = "Captain";
 				case 5: rank = "Major";
 				case 6: rank = "General";
				default: rank = "Private";
			}
			switch(divn)
			{
			    case 1: division = "AIR";
			    case 2: division = "ARM";
			    case 3: division = "VET";
				case 4: division = "AIR SF";
				case 5: division = "SAASA";
				case 6: division = "INF";
				case 7: division = "CM";
			    default: division = "General Duties";
			}
		}
		case 12:
		{
	        employer = "Tierra Robada";
			if(divn == 1 || divn == 0)
	    	{
				switch(rankn)
				{
					case 1: rank = "Citizen";
					case 2: rank = "People's Representative";
					case 3: rank = "Tribal Representative";
					case 4: rank = "Mayor";
					case 5: rank = "Ruling Council Member";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(divn == 2)
			{
				switch(rankn)
				{
					case 1: rank = "Citizen";
					case 2: rank = "Private";
					case 3: rank = "Lieutenant";
					case 4: rank = "Captain";
					case 5: rank = "General";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(divn == 3)
			{
				switch(rankn)
				{
					case 1: rank = "Citizen";
					case 2: rank = "Trainee";
					case 3: rank = "Lieutenant";
					case 4: rank = "Captain";
					case 5: rank = "Chief";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(divn == 4)
			{
				switch(rankn)
				{
					case 1: rank = "Citizen";
					case 2: rank = "Aide";
					case 3: rank = "Staff";
					case 4: rank = "Ambassador";
					case 5: rank = "Councelor General";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(divn == 5)
			{
				switch(rankn)
				{
					case 1: rank = "Citizen";
					case 2: rank = "Staff";
					case 3: rank = "Assistant Director";
					case 4: rank = "Director";
					case 5: rank = "Chief Administrator";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			switch(divn)
			{
			    case 1: division = "Civil";
			    case 2: division = "AF";
			    case 3: division = "ES";
			    case 4: division = "DC";
			    case 5: division = "TRAA";
			    default: division = "Civil";
			}
		}
		case 13:
		{
            employer = "Rapid Recovery";
			switch(PlayerInfo[targetid][pRank])
			{
			    case 1: rank = "Battery ";
				case 2: rank = "Mechanic ";
				case 3: rank = "Tow Truck ";
				case 4: rank = "Shift Manager ";
				case 5: rank = "Deputy Head ";
				case 6: rank = "Head ";
				default: rank = "Trainee ";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "(DILI)";
			    case 2: division = "(LA)";
			    case 3: division = "(REPO)";
			    case 4: division = "(FLAT)";
				case 5: division = "(MONT)";
			}
		}
		case 16:
		{
			employer = "S.H.A.F.T";
			switch(rankn)
			{
				case 0: rank = "Probationary Agent";
       			case 1: rank = "Agent";
       			case 2: rank = "Special Agent";
          		case 3: rank = "Supervisory Special Agent";
            	case 4: rank = "Special Agent in Charge";
             	case 5: rank = "Deputy Director";
              	case 6: rank = "Director";
               	default: rank = "Probationary Agent";
			}
			switch(divn)
			{
				case 1: division = "IA";
				case 2: division = "ATT";
				case 3: division = "TAR";
				case 4: division = "FO";
				default: division = "General Duties";
			}
		}
		case 17:
		{
			employer = "SA:PA";
			switch(rankn)
			{
				case 0: rank = "Rookie";
       			case 1: rank = "Patrol Officer";
       			case 2: rank = "Sergeant";
          		case 3: rank = "Lieutenant";
            	case 4: rank = "Captain";
             	case 5: rank = "Assistant Chief of Ops";
              	case 6: rank = "Chief of Operations";
               	default: rank = "Rookie";
			}
			switch(divn)
			{
				case 1: division = "IA";
				case 2: division = "T&R";
				case 3: division = "AIR";
				default: division = "General Duties";
			}
		}
	    default: { employer = "None"; division = "None"; rank = "N/A"; }
	}
	return 1;
}

stock AdminNameLogin(id)
{
	new Level[32];
	switch(id)
	{
		case 0: Level = "None";
		case 1: Level = "Server Moderator";
		case 2: Level = "Junior Admin";
		case 3: Level = "General Admin";
		case 4: Level = "Senior Admin";
		case 1337: Level = "Head Admin";
		case 1338: Level = "Admin Director";
		case 13338: Level = "Co-Executive Admin";
		case 99998: Level = "Lead Developer";
		case 99999: Level = "Executive Admin";
		default: Level = "Undefined Administrator";
	}
	return Level;
}

stock AdminDuty(id)
{
	new Duty[32];
	switch(id)
	{
		case 0: Duty = "Off Duty";
		case 1: Duty = "On Duty";
		default: Duty = "(Error)";
	}
	return Duty;
}

stock GetPlayerFactionInfo(targetid, rank[64], division[64], employer[64])
{
	switch (PlayerInfo[targetid][pMember]) // employer/rank/division data is pulled from here
	{
	    case 1:
		{
            employer = "LSPD";
			switch(PlayerInfo[targetid][pRank])
			{
			    case 1: rank = "Officer";
			    case 2: rank = "Corporal";
			    case 3: rank = "Sergeant";
			    case 4: rank = "Lieutenant";
			    case 5: rank = "Captain";
			    case 6: rank = "Chief";
			    default: rank = "Cadet";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "General Duties";
			    case 2: division = "DET";
			    case 3: division = "FTO";
			    case 4: division = "IA";
			    case 5: division = "SWAT";
			    case 6: division = "HSIU";
			    default: division = "General Duties";
			}
		}
  		case 2:
		{
            employer = "FBI";
			switch(PlayerInfo[targetid][pRank])
			{
			    case 1: rank = "Staff";
			    case 2: rank = "Agent";
			    case 3: rank = "Senior Agent";
			    case 4: rank = "Special Agent";
			    case 5: rank = "Assistant Director";
			    case 6: rank = "Director";
			    default: rank = "Intern";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "General Duties";
			    case 2: division = "GU";
			    case 3: division = "FAN";
			    case 4: division = "CID";
			    case 5: division = "IA";
				case 6: division = "NSB";
			    default: division = "General Duties";
			}
		}
  		case 3:
		{
            employer = "SFPD";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Officer";
				case 2: rank = "Corporal";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Chief";
				default: rank = "Cadet";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "HR";
				case 2: division = "ERT";
			    case 3: division = "IA";
			    case 4: division = "SO";
			    case 5: division = "DOC";
			    default: division = "General Duties";
			}
		}
  		case 4:
		{
            employer = "FDSA";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "EMT Intermediate";
				case 2: rank = "EMT Paramedic";
				case 3: rank = "Lieutenant";
				case 4: rank = "Captain";
				case 5: rank = "Deputy Chief";
				case 6: rank = "Chief";
				default: rank = "EMT Basic";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "FD";
			    case 2: division = "Life Flight";
			    case 3: division = "T&R";
			    default: division = "General Duties";
			}
		}
		case 5:
		{
	        employer = "Judicial";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Clerk of Court";
				case 2: rank = "District Attorney";
				case 3: rank = "District Judge";
				case 4: rank = "Appellate Judge";
				case 5: rank = "Associate Justice";
				case 6: rank = "Chief Justice";
				default: rank = "Fugitive Recovery Agent";
			}
			division = "None";
		}
  		case 6:
		{
            employer = "State Government";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Staff Member";
				case 2: rank = "G.E.T. Officer";
				case 3: rank = "Legislator";
				case 4: rank = "Government Cabinet";
				case 5: rank = "Vice President";
				case 6: rank = "President";
				default: rank = "Intern";
			}
			division = "None";
		}
  		case 7:
		{
	        employer = "SASD";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Deputy";
				case 2: rank = "Senior Deputy";
				case 3: rank = "Sergeant";
				case 4: rank = "Lieutenant";
				case 5: rank = "Captain";
				case 6: rank = "Sheriff";
				default: rank = "Trainee";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 2: division = "TET";
			    case 3: division = "SCU";
			    case 4: division = "SORT";
			    case 5: division = "FTO";
			    default: division = "Patrol";
			}
		}
		case 8:
		{
		    employer = "Hitman Agency";
		    switch(PlayerInfo[targetid][pRank])
		    {
    			case 1: rank = "Freelancer";
				case 2: rank = "Marksman";
				case 3: rank = "Agent";
				case 4: rank = "Special Agent";
				case 5: rank = "Vice Director";
				case 6: rank = "Director";
				default: rank = "Freelancer";
			}
			division = "None";
		}
		case 9:
		{
			employer = "SANews";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Local Reporter";
				case 2: rank = "Local Editor";
				case 3: rank = "Network Anchor";
				case 4: rank = "Network Editor";
				case 5: rank = "Asst. Network Producer";
				case 6: rank = "Network Producer";
				default: rank = "Intern";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "Security";
			    case 2: division = "IA";
			    case 3: division = "Tech Support";
			    case 4: division = "TnR";
			    default: division = "General";
			}
		}
   		case 10:
		{
            employer = "San Andreas Department of Transportation";
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: rank = "Trainee";
				case 2: rank = "Taxi Rookie";
				case 3: rank = "Cabbie";
				case 4: rank = "Dispatcher";
				case 5: rank = "Shift Supervisor";
				case 6: rank = "Taxi Company Owner";
				default: rank = "Trainee";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "Internal Affairs";
			    case 2: division = "Alternative Transportation Operators";
			    case 3: division = "T&R";
			    default: division = "None";
			}
		}
		case 11:
		{
            employer = "SAAS";
			switch(PlayerInfo[targetid][pRank])
 			{
 			    case 0: rank = "Private";
 				case 1: rank = "Corporal";
 				case 2: rank = "Sergeant";
 				case 3: rank = "Lieutenant";
 				case 4: rank = "Captain";
 				case 5: rank = "Major";
 				case 6: rank = "General";
				default: rank = "Private";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "AIR";
			    case 2: division = "ARM";
			    case 3: division = "VET";
				case 4: division = "AIR SF";
				case 5: division = "SAASA";
				case 6: division = "INF";
				case 7: division = "CM";
			    default: division = "General Duties";
			}
		}
		case 12:
		{
	        employer = "Tierra Robada";
			if(PlayerInfo[targetid][pDivision] == 1 || PlayerInfo[targetid][pDivision] == 0)
	    	{
				switch(PlayerInfo[targetid][pRank])
				{
					case 1: rank = "Citizen";
					case 2: rank = "People's Representative";
					case 3: rank = "Tribal Representative";
					case 4: rank = "Mayor";
					case 5: rank = "Ruling Council Member";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(PlayerInfo[targetid][pDivision] == 2)
			{
				switch(PlayerInfo[targetid][pRank])
				{
					case 1: rank = "Citizen";
					case 2: rank = "Private";
					case 3: rank = "Lieutenant";
					case 4: rank = "Captain";
					case 5: rank = "General";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(PlayerInfo[targetid][pDivision] == 3)
			{
				switch(PlayerInfo[targetid][pRank])
				{
					case 1: rank = "Citizen";
					case 2: rank = "Trainee";
					case 3: rank = "Lieutenant";
					case 4: rank = "Captain";
					case 5: rank = "Chief";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(PlayerInfo[targetid][pDivision] == 4)
			{
				switch(PlayerInfo[targetid][pRank])
				{
					case 1: rank = "Citizen";
					case 2: rank = "Aide";
					case 3: rank = "Staff";
					case 4: rank = "Ambassador";
					case 5: rank = "Councelor General";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			else if(PlayerInfo[targetid][pDivision] == 5)
			{
				switch(PlayerInfo[targetid][pRank])
				{
					case 1: rank = "Citizen";
					case 2: rank = "Staff";
					case 3: rank = "Assistant Director";
					case 4: rank = "Director";
					case 5: rank = "Chief Administrator";
					case 6: rank = "Executive Officer of RC";
					default: rank = "Resident";
				}
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "Civil";
			    case 2: division = "AF";
			    case 3: division = "ES";
			    case 4: division = "DC";
			    case 5: division = "TRAA";
			    default: division = "Civil";
			}
		}
		case 13:
		{
            employer = "Rapid Recovery";
			switch(PlayerInfo[targetid][pRank])
			{
			    case 1: rank = "Battery ";
				case 2: rank = "Mechanic ";
				case 3: rank = "Tow Truck ";
				case 4: rank = "Shift Manager ";
				case 5: rank = "Deputy Head ";
				case 6: rank = "Head ";
				default: rank = "Trainee ";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
			    case 1: division = "(DILI)";
			    case 2: division = "(LS)";
			    case 3: division = "(REPO)";
			    case 4: division = "(FLAT)";
				case 5: division = "(MONT)";
			}
		}
		case 16:
		{
			employer = "S.H.A.F.T";
			switch(PlayerInfo[targetid][pRank])
			{
				case 0: rank = "Probationary Agent";
       			case 1: rank = "Agent";
       			case 2: rank = "Special Agent";
          		case 3: rank = "Supervisory Special Agent";
            	case 4: rank = "Special Agent in Charge";
             	case 5: rank = "Deputy Director";
              	case 6: rank = "Director";
               	default: rank = "Probationary Agent";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
				case 1: division = "IA";
				case 2: division = "ATT";
				case 3: division = "TAR";
				case 4: division = "FO";
				default: division = "General Duties";
			}
		}
		case 17:
		{
			employer = "SA:PA";
			switch(PlayerInfo[targetid][pRank])
			{
				case 0: rank = "Rookie";
       			case 1: rank = "Patrol Officer";
       			case 2: rank = "Sergeant";
          		case 3: rank = "Lieutenant";
            	case 4: rank = "Captain";
             	case 5: rank = "Assistant Chief of Ops";
              	case 6: rank = "Chief of Operations";
               	default: rank = "Rookie";
			}
			switch(PlayerInfo[targetid][pDivision])
			{
				case 1: division = "IA";
				case 2: division = "T&R";
				case 3: division = "AIR";
				default: division = "General Duties";
			}
		}
	    default: { employer = "None"; division = "None"; rank = "N/A"; }
	}
	return 1;
}

stock IsInFDSA(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		new leader = PlayerInfo[playerid][pLeader];
		new member = PlayerInfo[playerid][pMember];
		if(member==4)
		{
			return 1;
		}
		else if(leader==4)
		{
			return 1;
		}
 	}
	return 0;
}

stock IsAtClothShop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,25.0,207.5627,-103.7291,1005.2578) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047) || IsPlayerInRangeOfPoint(playerid,25.0,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,30.0,214.4470,-7.6471,1001.2109) || IsPlayerInRangeOfPoint(playerid,50.0,161.3765,-83.8416,1001.8047))
		{//Zip & Victim
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-2664.3318,1538.4259,907.1797))
		{// SaC HQ
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,202.6777,-163.0623,1000.5306))
		{//Diedier Sachs
		    return 1;
		}
	}
	return 0;
}

stock IsAtNameChange(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1154.7295,-1440.2323,15.7969))
		{
			return 1;
		}
	}
	return 0;
}

stock IsAt247(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 100.0, -30.875, -88.9609, 1004.53))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2654.2300,1526.3693,907.1797))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 890.66, 1429.08, -82.34))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -29.2035, -185.1285, 1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, 2.0450,-29.0116,1003.5494))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -28.1463,-89.9533,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -22.0699,-138.6297,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -30.9772,-29.0228,1003.5573))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 50.0, -23.4488,-55.6319,1003.5469))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 500, 2554.471435, 1417.497802, 7700.006347)) // VIP Lounge
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You are at VIP you can /buy!");
			return 1;
		}
 	}
	return 0;
}

stock IsInSideVIP(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 500, 2554.471435, 1417.497802, 7700.006347)) // VIP Lounge
		{
			return 1;
		}
 	}
	return 0;
}

stock IsAtATM(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,2065.439453125, -1897.5510253906, 13.19670009613) || IsPlayerInRangeOfPoint(playerid,3.0,1497.7467041016, -1749.8747558594, 15.088212013245) || IsPlayerInRangeOfPoint(playerid,3.0,2093.5124511719, -1359.5474853516, 23.62727355957) || IsPlayerInRangeOfPoint(playerid,3.0,1155.6235351563, -1464.9141845703, 15.44321346283))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2139.4487304688, -1164.0811767578, 23.63508605957) || IsPlayerInRangeOfPoint(playerid,3.0,1482.7761230469, -1010.3353881836, 26.48664855957) || IsPlayerInRangeOfPoint(playerid,3.0,1482.7761230469, -1010.3353881836, 26.48664855957) || IsPlayerInRangeOfPoint(playerid,3.0,387.16552734375, -1816.0512695313, 7.4834146499634))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-24.385023117065, -92.001075744629, 1003.1897583008) || IsPlayerInRangeOfPoint(playerid,3.0,-31.811220169067, -58.106018066406, 1003.1897583008) || IsPlayerInRangeOfPoint(playerid,3.0,1212.7785644531, 2.451762676239, 1000.5647583008) || IsPlayerInRangeOfPoint(playerid,3.0,2324.4028320313, -1644.9445800781, 14.469946861267))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2228.39, -1707.78, 13.25) || IsPlayerInRangeOfPoint(playerid,3.0,651.19305419922, -520.48815917969, 15.978837013245) || IsPlayerInRangeOfPoint(playerid, 3.0, 45.78035736084, -291.80926513672, 1.5024013519287) || IsPlayerInRangeOfPoint(playerid,3.0,1275.7958984375, 368.31481933594, 19.19758605957) || IsPlayerInRangeOfPoint(playerid,3.0,2303.4577636719, -13.539554595947, 26.12727355957))/*End of Red County Random ATM's*/
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,294.80, -84.01, 1001.0) || /*Start of Red County Random ATM's*/IsPlayerInRangeOfPoint(playerid,3.0,691.08215332031, -618.5625, 15.978837013245) || IsPlayerInRangeOfPoint(playerid,3.0,173.23471069336, -155.07606506348, 1.2210245132446) || IsPlayerInRangeOfPoint(playerid,3.0,1260.8796386719, 209.30152893066, 19.19758605957) || IsPlayerInRangeOfPoint(playerid,3.0,2316.1015625, -88.522567749023, 26.12727355957))/*End of Red County Random ATM's*/
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,1311.0361,-1446.2249,0.2216))
		{//ATMS
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,2052.9246, -1660.6346, 13.1300) || IsPlayerInRangeOfPoint(playerid,3.0,-1980.6300,121.5300,27.3100))
		{
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,3.0,-2453.7600,754.8200,34.8000) || IsPlayerInRangeOfPoint(playerid,3.0,-2678.6201,-283.3400,6.8000))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,519.8157,-2890.8601,4.4609))
		{
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,2565.667480, 1406.839355, 7699.584472))
		{// VIP Lounge ATM
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-665.975341, -4033.334716, 20.779014) || IsPlayerInRangeOfPoint(playerid,5.0,-1619.9645996094,713.67535400391, 19995.501953125))
		{// Random Island ATM
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 7.0,-780.12,500.85,1371.74))
		{// Donation from Jacob Corleone
			return 1;
		}
	}
	return 0;
}

stock IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,1.0,403.8266,-2088.7598,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,396.2197,-2088.6692,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,383.4157,-2088.7849,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,369.8107,-2088.7927,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,1.0,362.2244,-2088.7981,7.8359) || IsPlayerInRangeOfPoint(playerid,1.0,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
			return 1;
		}
	}
	return 0;
}

stock fcreate(filename[])
{
	if (fexist(filename)) return false;
	new File:fhnd;
	fhnd=fopen(filename,io_write);
	if (fhnd) {
		fclose(fhnd);
		return true;
	}
	return false;
}

stock IsAtBar(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid,3.0,495.7801,-76.0305,998.7578) || IsPlayerInRangeOfPoint(playerid,3.0,499.9654,-20.2515,1000.6797) || IsPlayerInRangeOfPoint(playerid,9.0,1497.5735,-1811.6150,825.3397))
		{//In grove street bar (with girlfriend), and in Havanna
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,4.0,1215.9480,-13.3519,1000.9219) || IsPlayerInRangeOfPoint(playerid,10.0,-2658.9749,1407.4136,906.2734) || IsPlayerInRangeOfPoint(playerid,10.0,2155.3367,-97.3984,3.8308))
		{//PIG Pen
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,1131.3655,-1641.2759,18.6054) || IsPlayerInRangeOfPoint(playerid,10.0,-2676.4509,1540.6925,900.8359))
		{//Families 8 & SaC
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,2492.5532,-1698.2817,1715.5508) || IsPlayerInRangeOfPoint(playerid,5.0,2462.8247,-1649.5435,1732.0295) || IsPlayerInRangeOfPoint(playerid,5.0,2498.9863,-1666.6274,1738.3696))
		{
		    //Custom House
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,5.0,878.6188,1431.0234,-82.3449) || IsPlayerInRangeOfPoint(playerid,5.0,918.7236,1421.3997,-81.1839))
		{
		    //VIP
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,2574.3931,-1682.1548,1030.0206))
		{
			//The Cove
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,1266.14,-1073.00,1082.92))
		{
			//The Cove
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,1886.993652, -734.707275, 3380.847656))
		{
			//Syndicate HQ Bar
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid,10.0,453.2437,-105.4000,999.5500) || IsPlayerInRangeOfPoint(playerid,10.0,1255.69, -791.76, 1085.38) ||
		IsPlayerInRangeOfPoint(playerid,10.0,2561.94, -1296.44, 1062.04) || IsPlayerInRangeOfPoint(playerid,10.0,1139.72, -3.96, 1000.67) ||
		IsPlayerInRangeOfPoint(playerid,10.0,1139.72, -3.96, 1000.67) || IsPlayerInRangeOfPoint(playerid, 10.0, 880.06, 1430.86, -82.34) ||
		IsPlayerInRangeOfPoint(playerid,10.0,499.96, -20.66, 1000.68))
		{
			//Bars
			return 1;
		}
	}
	return 0;
}

stock IsAtArrestPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,-1606.307861, 673.740539, -5.242187) || IsPlayerInRangeOfPoint(playerid, 3.0,1528.3882,-1677.7719,5.8906) ||IsPlayerInRangeOfPoint(playerid, 3.0,295.6430,-1540.8610,24.5938) || IsPlayerInRangeOfPoint(playerid, 3.0,611.96, -587.25, 17.22) || IsPlayerInRangeOfPoint(playerid, 8.0,1379.0077,-274.9919,1.9850) || IsPlayerInRangeOfPoint(playerid, 8.0,-228.4971,985.1687,19.6088)
		|| IsPlayerInRangeOfPoint(playerid, 8.0,598.5661,-607.9127,-14.9744) || IsPlayerInRangeOfPoint(playerid, 4.0, 680.2208,-1546.9856,14.8516) || IsPlayerInRangeOfPoint(playerid, 8.0,  205.5576,1861.6444,13.1406))
		{//Tierra Robada + SFPD + LSPD
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0,-1394.333007, 2625.446533, 55.913421) || IsPlayerInRangeOfPoint(playerid, 4.0, 1566.4901,-1653.9076,28.3956) || IsPlayerInRangeOfPoint(playerid, 3.0,2182.20, 530.32, 1.19) || IsPlayerInRangeOfPoint(playerid, 3.0,292.7859,-1530.6685,76.5391) || IsPlayerInRangeOfPoint(playerid, 3.0,2334.65, 566.84, 7.78) || PlayerInfo[playerid][pVW] == 133337 || PlayerInfo[playerid][pVW] == 4 || PlayerInfo[playerid][pVW] == 1324123)
		{//LSPD int and FBI
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 2226.8472,2458.2598,-7.4531))
		{
		    //SASD LV
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, -800.397094, -1877.925903, 11.668975))
		{
		    //NOOSE
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, -591.0120,440.0535,1345.9948))
		{
		    //SHAFT
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, -659.9869, -1248.2073, 23.9865))
		{
		    //Flint County Station
		    return 1;
		}
		if(IsPlayerInRangeOfPoint(playerid,25.0,-536.9695,466.6663,1368.4176) || IsPlayerInRangeOfPoint(playerid, 25.0,-577.3339,470.3352,1369.4100) ||IsPlayerInRangeOfPoint(playerid, 25.0,-588.6917,430.4547,1364.2682) || IsPlayerInRangeOfPoint(playerid, 25.0,-199.4224,429.1942,1365.4587) || IsPlayerInRangeOfPoint(playerid, 25.0,-255.3451,429.0869,1365.4688))
		{//SHAFT interior
			return 1;
		}
	}
	return 0;
}

stock IsAtDeliverPatientPoint(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502) || IsPlayerInRangeOfPoint(playerid, 3.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
		{//ALLSAINTS, ALL SAINTS ROOF, COUNTY GENERAL, COUNTY ROOF
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 4.0, 1227.2339,306.4730,19.7028) || IsPlayerInRangeOfPoint(playerid, 5.0, 1233.3384,316.4022,24.7578) || IsPlayerInRangeOfPoint(playerid, 3.0,-339.2989,1055.8138,19.7392) || IsPlayerInRangeOfPoint(playerid, 5.0, -334.1560,1051.4434,26.0125))
		{//RED COUNTY, RED COUNTY ROOF, FORT CARSON, Fortcarson ROOF
			return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -2695.5725,639.4147,14.4531) || IsPlayerInRangeOfPoint(playerid, 5.0, -2656.0339,615.2567,66.0938))
		{//SF, SF ROOF
		    return 1;
		}
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1528.814331, 2540.706054, 55.835937) || IsPlayerInRangeOfPoint(playerid, 5.0, 228.7983,1983.0693,17.6406))
		{//Tierra Robada // SAAS Hospital
			return 1;
		}
	}
	return 0;
}

stock IsAtImpoundingPoint(playerid) {
	return (IsPlayerInRangeOfPoint(playerid, 4.0,-1577.085937, 682.506225, 7.187500) || IsPlayerInRangeOfPoint(playerid, 4.0,2059.7659,-1856.2783,13.5459) || IsPlayerInRangeOfPoint(playerid, 4.0,797.7496,-617.0283,16.3359) || IsPlayerInRangeOfPoint(playerid, 4.0, 2412.3098,-1425.6677,23.9836) || IsPlayerInRangeOfPoint(playerid, 4.0, 1602.8927,-1608.4335,13.7085) || IsPlayerInRangeOfPoint(playerid, 4.0, 1354.5469,363.1523,19.8893) || IsPlayerInRangeOfPoint(playerid, 4.0, -639.2586,-1240.2565,21.4865));
}

stock IsVIPcar(carid)
{
	for(new i = 0; i < sizeof(VIPVehicles); i++)
	{
		if(carid == VIPVehicles[i]) return 1;
	}
	return 0;
}

stock IsVIPModel(carid)
{
	new Cars[] = { 451, 411, 429, 522, 444, 556, 557 };
	for(new i = 0; i < sizeof(Cars); i++)
	{
		if(GetVehicleModel(carid) == Cars[i]) return 1;
	}
	return 0;
}

stock IsARC(carid)
{
	switch(GetVehicleModel(carid)) {
		case 441, 464, 465, 501, 564: return 1;
	}
	return 0;
}

stock IsABoat(carid) {
	switch(GetVehicleModel(carid)) {
		case 472, 473, 493, 484, 430, 454, 453, 452, 446, 595: return 1;
	}
	return 0;
}

stock IsABike(carid) {
	switch(GetVehicleModel(carid)) {
		case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
	}
	return 0;
}

stock IsATrain(iModelID) {
	switch(iModelID) {
		case 538, 537, 449, 590, 569, 570: return 1;
	}
	return 0;
}

stock IsAPlane(carid)
{
	switch(GetVehicleModel(carid)) {
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

stock IsWeaponisedVehicle(modelid)
{
	switch(modelid) {
		case 520, 425, 490, 596, 597, 598, 599, 601, 528, 447, 464, 497, 432, 407: return 1;
	}
	return 0;
}

stock IsRestrictedPlayerVehicle(modelid)
{
	switch(modelid) {
		case 406, 407, 416, 425, 427, 432, 433, 447, 486, 488, 490, 497, 520, 523, 525, 528, 532, 544, 548, 582, 596, 597, 598, 599, 601: return 1;
	}
	return 0;
}

stock IsATruckerCar(carid)
{
	for(new v = 0; v < sizeof(TruckerVehicles); v++) {
	    if(carid == TruckerVehicles[v]) return 1;
	}
	return 0;
}

/*stock IsAPizzaCar(carid)
{
	for (new v = 0; v < sizeof(PizzaVehicles); v++) {
	    if(carid == PizzaVehicles[v]) return 1;
	}
	return 0;
}*/

stock IsAnPrisonCar(carid)
{
    for(new v = 0; v < sizeof(PrisonVehicles); v++) {
	    if(carid == PrisonVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnSFPDCar(carid)
{
	for(new v = 0; v < sizeof(SFPDVehicles); v++) {
	    if(carid == SFPDVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnOPGVehicles(carid)
{
	for(new v = 0; v < sizeof(OPGVehicles); v++) {
	    if(carid == OPGVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnSASDCar(carid)
{
	for(new v = 0; v < sizeof(SASDVehicles); v++) {
	    if(carid == SASDVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnEPCar(carid)
{
	for(new v = 0; v < sizeof(EPVehicles); v++) {
	    if(carid == EPVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnWPCar(carid)
{
	for(new v = 0; v < sizeof(WPVehicles); v++) {
	    if(carid == WPVehicles[v]) return 1;
	}
	return 0;
}

stock IsAShaftCar(carid)
{
	for(new v = 0; v < sizeof(ShaftVehicles); v++) {
	    if(carid == ShaftVehicles[v]) return 1;
	}
	return 0;
}
stock IsAOPGVehicle(carid)
{
	for(new v = 0; v < sizeof(OPGVehicles); v++) {
	    if(carid == OPGVehicles[v]) return 1;
	}
	return 0;
}

stock IsATierraCar(carid)
{
	for(new v = 0; v < sizeof(TierraVehicles); v++) {
	    if(carid == TierraVehicles[v]) return 1;
	}
	return 0;
}

stock IsATierraARCar(carid)
{
	for(new v = 0; v < sizeof(TierraARVehicles); v++) {
	    if(carid == TierraARVehicles[v]) return 1;
	}
	return 0;
}

stock IsATierraESCar(carid)
{
	for(new v = 0; v < sizeof(TierraESVehicles); v++) {
	    if(carid == TierraESVehicles[v]) return 1;
	}
	return 0;
}

stock IsAGovernmentCar(carid)
{
	for(new v = 0; v < sizeof(GovVehicles); v++) {
	    if(carid == GovVehicles[v]) return 1;
	}
	return 0;
}

stock IsACopCar(carid)
{
	for(new v = 0; v < sizeof(LSPDVehicles); v++) {
	    if(carid == LSPDVehicles[v]) return 1;
	}
	return 0;
}

stock GetDynamicCarID(carid) // -Phazd <3
{
	for(new v = 0; v < MAX_FACTIONVEHICLES; v++) {
	    if(carid == FactionVehicleInfo[v][fScriptID]) return v;
	}
	return -1;
}





stock IsASaPaAirCar(carid)
{
	for(new v = 0; v < sizeof(SAPAAirVehicles); v++) {
	    if(carid == SAPAAirVehicles[v]) return 1;
	}
	return 0;
}

stock IsASaPaCar(carid)
{
	for(new v = 0; v < sizeof(SAPAVehicles); v++) {
	    if(carid == SAPAVehicles[v]) return 1;
	}
	return 0;
}

stock IsAUndercoverCopCar(carid)
{
	if(carid == LSPDVehicles[41] || carid == LSPDVehicles[42] || carid == LSPDVehicles[43] || carid == SASDVehicles[31] || carid == SASDVehicles[32] ||\
 	carid == SFPDVehicles[27] || carid == SFPDVehicles[28] || carid == SFPDVehicles[29] || carid == FBIVehicles[3] || carid == FBIVehicles[4] ||\
 	carid == FBIVehicles[5] || carid == FBIVehicles[6] || carid == FBIVehicles[8] || carid == FBIVehicles[9]) return 1;
	return 0;
}

stock IsAHouse275Car(carid)
{
	for(new v = 0; v < sizeof(House275Vehicles); v++) {
	    if(carid == House275Vehicles[v]) return 1;
	}
	return 0;
}

stock IsATowTruck(carid)
{
	if(GetVehicleModel(carid) == 485 || GetVehicleModel(carid) == 525 || GetVehicleModel(carid) == 583 || GetVehicleModel(carid) == 574) {
		return 1;
	}
	return 0;
}

stock IsAHelicopter(carid)
{
	if(GetVehicleModel(carid) == 548 || GetVehicleModel(carid) == 425 || GetVehicleModel(carid) == 417 || GetVehicleModel(carid) == 487 || GetVehicleModel(carid) == 488 || GetVehicleModel(carid) == 497 || GetVehicleModel(carid) == 563 || GetVehicleModel(carid) == 447 || GetVehicleModel(carid) == 469 || GetVehicleModel(carid) == 593) {
		return 1;
	}
	return 0;
}

stock IsAFBICar(carid)
{
	for(new v = 0; v < sizeof(FBIVehicles); v++) {
	    if(carid == FBIVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnDOCCar(carid)
{
	for(new v = 0; v < sizeof(DOCVehicles); v++) {
	    if(carid == DOCVehicles[v]) return 1;
	}
	return 0;
}

stock IsACoastguardCar(carid)
{
	for(new v = 0; v < sizeof(CoastGuardVehicles); v++) {
	    if(carid == CoastGuardVehicles[v]) return 1;
	}
	return 0;
}

stock IsANewsCar(carid)
{
	if(GetVehicleModel(carid)== 582 || GetVehicleModel(carid)== 488) {
		return 1;
	}
	return 0;
}

stock IsAnNGCar(carid)
{
	for(new i = 0; i < sizeof(NGLandVehicles); i++) {
		if(NGLandVehicles[i] == carid) return 1;
	}
	return 0;
}

stock IsAnNGAIRCar(carid)
{
	for(new i = 0; i < sizeof(NGAIRVehicles); i++) {
	    if(NGAIRVehicles[i] == carid) return 1;
	}
	if(CrateIslandVehicles[10] == carid) return 1;
	else if(CrateIslandVehicles[11] == carid) return 1;
	return 0;
}

stock IsAnNGARMCar(carid)
{
	for(new i = 0; i < sizeof(NGARMVehicles); i++) {
		if(NGARMVehicles[ i ] == carid) return 1;
	}
	return 0;
}

stock IsAnMPSCar(carid)
{
	for(new i = 0; i < sizeof(MPSVehicles); i++) {
		if(MPSVehicles[ i ] == carid) return 1;
	}
	return 0;
}

stock IsAnAmbulance(carid)
{
	for(new v = 0; v < sizeof(FDSAVehicles); v++) {
	    if(carid == FDSAVehicles[v]) return 1;
	}
	return 0;
}

stock IsAnBus(carid)
{
	if(GetVehicleModel(carid) == 431 || GetVehicleModel(carid) == 437) {
		return 1;
	}
	return 0;
}

stock IsAnTaxi(carid)
{
	if(GetVehicleModel(carid) == 420 || GetVehicleModel(carid) == 438) {
		return 1;
	}
	return 0;
}

TaxiCompanyVehicle(carid)
{
	for(new v = 0; v < sizeof(TaxiVehicles); v++)
	{
	    if(carid == TaxiVehicles[v]) return 1;
	}
	return 0;
}

stock factionName(id)
{
	new name[32];
	switch(id)
	{
	    case 1: name = "LSPD";
	    case 2: name = "FBI";
	    case 3: name = "SFPD";
	    case 4: name = "FDSA";
	    case 5: name = "Judicial System";
	    case 6: name = "Government";
	    case 7: name = "SASD";
	    case 8: name = "Hitman";
	    case 9: name = "SA News";
	    case 10: name = "Taxi Company";
	    case 11: name = "SAAS";
	    case 12: name = "Tierra Robada";
	    case 13: name = "RR";
		case 16: name = "S.H.A.F.T";
		case 17: name = "SA:PA";
	}
	return name;
}

stock partType(type)
{
	new name[32];
	switch(type)
	{
	    case 0:
		{
			name = "Spoiler";
        }
        case 1:
		{
			name = "Hood";
        }
        case 2:
		{
			name = "Roof";
        }
        case 3:
		{
			name = "Sideskirt";
        }
        case 4:
		{
			name = "Lamps";
        }
        case 5:
		{
			name = "Nitro";
        }
        case 6:
		{
			name = "Exhaust";
        }
        case 7:
		{
			name = "Wheels";
        }
        case 8:
		{
			name = "Stereo";
        }
        case 9:
		{
			name = "Hydraulics";
        }
        case 10:
		{
			name = "Front Bumper";
        }
        case 11:
		{
			name = "Rear Bumper";
        }
        case 12:
		{
			name = "Left Vent";
        }
        case 13:
		{
			name = "Right Vent";
        }
        default:
        {
            name = "Unknown";
		}
	}
	return name;
}

stock partName(part)
{
	new name[32];
	switch(part - 1000)
	{
		case 0:
		{
			name = "Pro";
        }
		case 1:
        {
			name = "Win";
        }
		case 2:
        {
			name = "Drag";
        }
		case 3:
        {
			name = "Alpha";
        }
		case 4:
        {
			name = "Champ Scoop";
        }
		case 5:
        {
			name = "Fury Scoop";
        }
		case 6:
        {
			name = "Roof Scoop";
        }
		case 7:
        {
			name = "Sideskirt";
        }
        case 8:
        {
            name = "2x";
        }
        case 9:
        {
            name = "5x";
        }
        case 10:
        {
            name = "10x";
        }
		case 11:
        {
			name = "Race Scoop";
        }
		case 12:
        {
			name = "Worx Scoop";
        }
		case 13:
        {
			name = "Round Fog";
        }
		case 14:
        {
			name = "Champ";
        }
		case 15:
        {
			name = "Race";
        }
		case 16:
        {
			name = "Worx";
        }
		case 17:
        {
			name = "Sideskirt";
        }
		case 18:
        {
			name = "Upswept";
        }
		case 19:
        {
			name = "Twin";
        }
		case 20:
		{
			name = "Large";
        }
		case 21:
        {
			name = "Medium";
        }
		case 22:
        {
			name = "Small";
        }
		case 23:
        {
			name = "Fury";
        }
		case 24:
        {
			name = "Square Fog";
        }
		case 26:
        {
			name = "Alien";
        }
		case 27:
        {
			name = "Alien";
        }
		case 28:
        {
			name = "Alien";
        }
		case 29:
        {
			name = "X-Flow";
        }
		case 30:
        {
			name = "X-Flow";
        }
		case 31:
        {
			name = "X-Flow";
        }
		case 32:
        {
			name = "Alien Roof Vent";
        }
		case 33:
        {
			name = "X-Flow Roof Vent";
        }
		case 34:
        {
			name = "Alien";
        }
		case 35:
        {
			name = "X-Flow Roof Vent";
        }
		case 36:
        {
			name = "Alien";
        }
		case 37:
        {
			name = "X-Flow";
        }
		case 38:
        {
			name = "Alien Roof Vent";
        }
		case 39:
        {
			name = "X-Flow";
        }
		case 40:
        {
			name = "Alien";
        }
		case 41:
        {
			name = "X-Flow";
        }
		case 42:
        {
			name = "Chrome";
        }
		case 43:
        {
			name = "Slamin";
        }
		case 44:
        {
			name = "Chrome";
        }
		case 45:
        {
			name = "X-Flow";
        }
		case 46:
        {
			name = "Alien";
        }
		case 47:
        {
			name = "Alien";
        }
		case 48:
        {
			name = "X-Flow";
        }
		case 49:
        {
			name = "Alien";
        }
		case 50:
        {
			name = "X-Flow";
        }
		case 51:
        {
			name = "Alien";
        }
		case 52:
        {
			name = "X-Flow";
        }
		case 53:
        {
			name = "X-Flow";
        }
		case 54:
        {
			name = "Alien";
        }
		case 55:
        {
			name = "Alien";
        }
		case 56:
        {
			name = "Alien";
        }
		case 57:
        {
			name = "X-Flow";
        }
		case 58:
        {
			name = "Alien";
        }
		case 59:
        {
			name = "X-Flow";
        }
		case 60:
        {
			name = "X-Flow";
        }
		case 61:
        {
			name = "X-Flow";
        }
		case 62:
        {
			name = "Alien";
        }
		case 63:
        {
			name = "X-Flow";
        }
		case 64:
        {
			name = "Alien";
        }
		case 65:
        {
			name = "Alien";
        }
		case 66:
        {
			name = "X-Flow";
        }
		case 67:
        {
			name = "Alien";
        }
		case 68:
        {
			name = "X-Flow";
        }
		case 69:
        {
			name = "Alien";
        }
		case 70:
        {
			name = "X-Flow";
        }
		case 71:
        {
			name = "Alien";
        }
		case 72:
        {
			name = "X-Flow";
        }
		case 88:
        {
			name = "Alien";
        }
		case 89:
        {
			name = "X-Flow";
        }
		case 90:
        {
			name = "Alien";
        }
		case 91:
        {
			name = "X-Flow";
        }
		case 92:
        {
			name = "Alien";
        }
		case 93:
        {
			name = "X-Flow";
        }
		case 94:
        {
			name = "Alien";
        }
		case 95:
        {
			name = "X-Flow";
        }
		case 99:
        {
			name = "Chrome";
        }
		case 100:
        {
			name = "Chrome Grill";
        }
        		case 101:
        {
			name = "Chrome Flames";
        }
		case 102:
        {
			name = "Chrome Strip";
        }
		case 103:
        {
			name = "Covertible";
        }
		case 104:
        {
			name = "Chrome";
        }
		case 105:
        {
			name = "Slamin";
        }
		case 106:
        {
			name = "Chrome Arches";
        }
		case 107:
        {
			name = "Chrome Strip";
        }
		case 108:
        {
			name = "Chrome Strip";
        }
		case 109:
        {
			name = "Chrome";
        }
		case 110:
        {
			name = "Slamin";
        }
		case 113:
        {
			name = "Chrome";
        }
		case 114:
        {
			name = "Slamin";
        }
		case 115:
        {
			name = "Chrome";
        }
		case 116:
        {
			name = "Slamin";
        }
		case 117:
        {
			name = "Chrome";
        }
		case 118:
        {
			name = "Chrome Trim";
        }
		case 119:
        {
			name = "Wheelcovers";
        }
		case 120:
        {
			name = "Chrome Trim";
        }
		case 121:
        {
			name = "Wheelcovers";
        }
		case 122:
        {
			name = "Chrome Flames";
        }
		case 123:
        {
			name = "Bullbar Chrome Bars";
        }
		case 124:
        {
			name = "Chrome Arches";
        }
		case 125:
        {
			name = "Bullbar Chrome Lights";
        }
		case 126:
        {
			name = "Chrome";
        }
		case 127:
        {
			name = "Slamin";
        }
		case 128:
        {
			name = "Vinyl Hardtop";
        }
		case 129:
        {
			name = "Chrome";
        }
		case 130:
        {
			name = "Hardtop";
        }
		case 131:
        {
			name = "Softtop";
        }
		case 132:
        {
			name = "Slamin";
        }
		case 133:
        {
			name = "Chrome Strip";
        }
		case 134:
        {
			name = "Chrome Strip";
        }
		case 135:
        {
			name = "Slamin";
        }
		case 136:
        {
			name = "Chrome";
        }
		case 137:
        {
			name = "Chrome Strip";
        }
		case 138:
        {
			name = "Alien";
        }
		case 139:
        {
			name = "X-Flow";
        }
		case 140:
        {
			name = "X-Flow";
        }
		case 141:
        {
			name = "Alien";
        }
		case 142:
        {
			name = "Left Oval Vents";
        }
		case 143:
        {
			name = "Right Oval Vents";
        }
		case 144:
        {
			name = "Left Square Vents";
        }
		case 145:
        {
			name = "Right Square Vents";
        }
		case 146:
        {
			name = "X-Flow";
        }
		case 147:
        {
			name = "Alien";
        }
		case 148:
        {
			name = "X-Flow";
        }
		case 149:
        {
			name = "Alien";
        }
		case 150:
        {
			name = "Alien";
        }
		case 151:
        {
			name = "X-Flow";
        }
		case 152:
        {
			name = "X-Flow";
        }
		case 153:
        {
			name = "Alien";
        }
		case 154:
        {
			name = "Alien";
        }
		case 155:
        {
			name = "Alien";
        }
		case 156:
        {
			name = "X-Flow";
        }
		case 157:
        {
			name = "X-Flow";
        }
		case 158:
        {
			name = "X-Flow";
        }
		case 159:
        {
			name = "Alien";
        }
		case 160:
        {
			name = "Alien";
        }
		case 161:
        {
			name = "X-Flow";
        }
		case 162:
        {
			name = "Alien";
        }
		case 163:
        {
			name = "X-Flow";
        }
		case 164:
        {
			name = "Alien";
        }
		case 165:
        {
			name = "X-Flow";
        }
		case 166:
        {
			name = "Alien";
        }
		case 167:
        {
			name = "X-Flow";
        }
		case 168:
        {
			name = "Alien";
        }
		case 169:
        {
			name = "Alien";
        }
		case 170:
        {
			name = "X-Flow";
        }
		case 171:
        {
			name = "Alien";
        }
		case 172:
        {
			name = "X-Flow";
        }
		case 173:
        {
			name = "X-Flow";
        }
		case 174:
        {
			name = "Chrome";
        }
		case 175:
        {
			name = "Slamin";
        }
		case 176:
        {
			name = "Chrome";
        }
		case 177:
        {
			name = "Slamin";
        }
		case 178:
        {
			name = "Slamin";
        }
		case 179:
        {
			name = "Chrome";
        }
		case 180:
        {
			name = "Chrome";
        }
		case 181:
        {
			name = "Slamin";
        }
		case 182:
        {
			name = "Chrome";
        }
		case 183:
        {
			name = "Slamin";
        }
		case 184:
        {
			name = "Chrome";
        }
		case 185:
        {
			name = "Slamin";
        }
		case 186:
        {
			name = "Slamin";
        }
		case 187:
        {
			name = "Chrome";
        }
		case 188:
        {
			name = "Slamin";
        }
		case 189:
        {
			name = "Chrome";
        }
		case 190:
        {
			name = "Slamin";
        }
		case 191:
        {
			name = "Chrome";
        }
		case 192:
        {
			name = "Chrome";
        }
		case 193:
        {
			name = "Slamin";
        }
   	}
	return name;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerConnect(playerid) {
	if(IsPlayerNPC(playerid)) return 1;

	g_arrQueryHandle{playerid} = random(256); // maybe its this? why would it be random?

	TotalConnect++;
	if(Iter_Count(Player) > MaxPlayersConnected) {
		MaxPlayersConnected = Iter_Count(Player);
		getdate(MPYear,MPMonth,MPDay);
	}
	// Init all of the textdraw related globals
    gHeaderTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gBackgroundTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gCurrentPageTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gNextButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;
    gPrevButtonTextDrawId[playerid] = PlayerText:INVALID_TEXT_DRAW;

    for(new x=0; x < SELECTION_ITEMS; x++) {
        gSelectionItems[playerid][x] = PlayerText:INVALID_TEXT_DRAW;
	}

	gItemAt[playerid] = 0;
	AOnPlayerConnect(playerid);


	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);

	SetPVarInt(playerid, "IsInArena", -1);
	SetPVarInt(playerid, "ArenaNumber", -1);
	SetPVarInt(playerid, "ArenaEnterPass", -1);
	SetPVarInt(playerid, "ArenaEnterTeam", -1);
	SetPVarInt(playerid, "EditingTurfs", -1);
	SetPVarInt(playerid, "EditingTurfsStage", -1);
	SetPVarInt(playerid, "EditingHillStage", -1);
	SetPVarInt(playerid, "EditingFamC", -1);
	SetPVarInt(playerid, "editingcd", -1);
	SetPVarInt(playerid, "editingcdveh", -1);
	SetPVarInt(playerid, "editingfamhq", 255);
	SetPVarInt(playerid, "UsingSurfAttachedObject", -1);
	SetPVarInt(playerid, "UsingBriefAttachedObject", -1);
	SetPVarInt(playerid, "AOSlotPaintballFlag", -1);
	SetPVarInt(playerid, "MovingStretcher", -1);
	SetPVarInt(playerid, "DraggingPlayer", -1);

	for(new i = 0; i < 3; i++) {
		StopaniFloats[playerid][i] = 0;
	}

	for(new i = 0; i < 3; i++) {
        ConfigEventCPs[playerid][i] = 0;
    }
    ConfigEventCPId[playerid] = 0;
    RCPIdCurrent[playerid] = 0;

	for(new i = 0; i < 6; i++) {
	    EventFloats[playerid][i] = 0.0;
	}
	EventLastInt[playerid] = 0; EventLastVW[playerid] = 0;

	for(new i = 0; i < 6; i++) {
		HHcheckFloats[playerid][i] = 0;
	}
	for(new i = 0; i < MAX_PLAYERVEHICLES; ++i) {
		PlayerVehicleInfo[playerid][i][pvModelId] = 0;
		PlayerVehicleInfo[playerid][i][pvId] = INVALID_PLAYER_VEHICLE_ID;
		PlayerVehicleInfo[playerid][i][pvSpawned] = 0;
	}

	for(new i = 0; i < 5; i++) {
		LottoNumbers[playerid][i] = 0;
	}

	PlayerInfo[playerid][pReg] = 0;
	HHcheckVW[playerid] = 0;
	HHcheckInt[playerid] = 0;
	SGcheckVW[playerid] = 0;
	SGcheckInt[playerid] = 0;
	OrderAssignedTo[playerid] = INVALID_PLAYER_ID;
	TruckDeliver[playerid] = 0;
	TruckUsed[playerid] = INVALID_VEHICLE_ID;
	RefuelingVehicle[playerid] = 0;
	RefuelingVehiclePrice[playerid] = 0;
	HouseOffer[playerid] = INVALID_PLAYER_ID;
	House[playerid] = 0;
	HousePrice[playerid] = 0;
	playerTabbed[playerid] = 0;
	playerAFK[playerid] = 0;
	gBug{playerid} = 1;
	TazerTimeout[playerid] = 0;
	gRadio{playerid} = 1;
	playerLastTyped[playerid] = 0;
	DmgCheck[playerid] = 0;
	DmgCheckID[playerid] = -1;
	DmgCheckedPlayer[playerid] = 0;
	DmgCheckedPlayerID[playerid] = -1;
	pTazer{playerid} = 0;
	//pDMGCheck{playerid} = 0;
	pTazerReplace{playerid} = 0;
	pCurrentWeapon{playerid} = 0;
	MedicAccepted[playerid] = INVALID_PLAYER_ID;
	DefendOffer[playerid] = INVALID_PLAYER_ID;
	AppealOffer[playerid] = INVALID_PLAYER_ID;
	AppealOfferAccepted[playerid] = 0;
	PlayerInfo[playerid][pWantedLevel] = 0;
	DefendPrice[playerid] = 0;
	Spectating[playerid] = 0;
	GettingSpectated[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pPhonePrivacy] = 0;
	NewbieTimer[playerid] = 0;
	CancelReportTimer[playerid] = 0;
	AcceptedReportTimer[playerid] = 0;
	HlKickTimer[playerid] = 0;
	HelperTimer[playerid] = 0;
	VehicleOffer[playerid] = INVALID_PLAYER_ID;
	VehiclePrice[playerid] = 0;
	VehicleId[playerid] = -1;
	NOPTrigger[playerid] = 0;
	JustReported[playerid] = -1;
	UsedCrack[playerid] = 0;
	UsedWeed[playerid] = 0;
	SexOffer[playerid] = INVALID_PLAYER_ID;
	DrinkOffer[playerid] =  INVALID_PLAYER_ID;
	PotOffer[playerid] = INVALID_PLAYER_ID;
	PotStorageID[playerid] = -1;
	CrackOffer[playerid] = INVALID_PLAYER_ID;
	CrackStorageID[playerid] = -1;
	GunOffer[playerid] = INVALID_PLAYER_ID;
	GunStorageID[playerid] = -1;
	CraftOffer[playerid] = INVALID_PLAYER_ID;
	RepairOffer[playerid] = INVALID_PLAYER_ID;
	GuardOffer[playerid] = INVALID_PLAYER_ID;
	LiveOffer[playerid] = INVALID_PLAYER_ID;
	RefillOffer[playerid] = INVALID_PLAYER_ID;
	MatsOffer[playerid] = INVALID_PLAYER_ID;
	MatsStorageID[playerid] = -1;
	MatsPrice[playerid] = 0;
	MatsAmount[playerid] = 0;
	BoxOffer[playerid] = INVALID_PLAYER_ID;
	MarryWitnessOffer[playerid] = INVALID_PLAYER_ID;
	ProposeOffer[playerid] = INVALID_PLAYER_ID;
	DivorceOffer[playerid] = INVALID_PLAYER_ID;
	HidePM[playerid] = 0;
	PhoneOnline[playerid] = 0;
	unbanip[playerid][0] = 0;
    advisorchat[playerid] = 1;
	ChosenSkin[playerid]=0;
	SelectFChar[playerid]=0;
	MatsHolding[playerid]=0;
	MatDeliver[playerid]=0;
	MatDeliver2[playerid]=0;
	SelectFCharID[playerid]=0;
	szAdvert[playerid][0] = 0;
	SelectFCharPlace[playerid]=0;
	GettingJob[playerid]=0;
	GettingJob2[playerid]=0;
	GuardOffer[playerid]= INVALID_PLAYER_ID;
	GuardPrice[playerid]=0;
	ApprovedLawyer[playerid]=0;
	CallLawyer[playerid]=0;
	WantLawyer[playerid]=0;
	CurrentMoney[playerid]=0;
	UsedFind[playerid]=0;
	CP[playerid]=0;
	Condom[playerid]=0;
	SexOffer[playerid]= INVALID_PLAYER_ID;
	SexPrice[playerid]=0;
	PlayerInfo[playerid][pAdmin]=0;
	RepairOffer[playerid]= INVALID_PLAYER_ID;
	RepairPrice[playerid]=0;
	RepairCar[playerid]=0;
	TalkingLive[playerid]=INVALID_PLAYER_ID;
	LiveOffer[playerid]= INVALID_PLAYER_ID;
	RefillOffer[playerid]= INVALID_PLAYER_ID;
	RefillPrice[playerid]=0;
	InsidePlane[playerid]=INVALID_VEHICLE_ID;
	InsideMainMenu{playerid}=0;
	InsideTut{playerid}=0;
	PotOffer[playerid]= INVALID_PLAYER_ID;
	PotStorageID[playerid]=-1;
	CrackOffer[playerid]= INVALID_PLAYER_ID;
	CrackStorageID[playerid]=-1;
	PlayerCuffed[playerid]=0;
	PlayerCuffedTime[playerid]=0;
	PotPrice[playerid]=0;
	CrackPrice[playerid]=0;
	FireworkOffer[playerid]= INVALID_PLAYER_ID;
	FireworkPrice[playerid]=0;
	FireworkCount[playerid]=0;
	RegistrationStep[playerid]=0;
	PotGram[playerid]=0;
	CrackGram[playerid]=0;
	PlayerInfo[playerid][pBanned]=0;
	ConnectedToPC[playerid]=0;
	OrderReady[playerid]=0;
	GunId[playerid]=0;
	GunMats[playerid]=0;
	CraftId[playerid]=0;
	CraftMats[playerid]=0;
	HitOffer[playerid]= INVALID_PLAYER_ID;
	HitToGet[playerid]= INVALID_PLAYER_ID;
	InviteOffer[playerid]= INVALID_PLAYER_ID;
	InviteFaction[playerid]=0;
	InviteFamily[playerid]=255;
	hInviteHouse[playerid]= -1;
	hInviteOffer[playerid]= INVALID_PLAYER_ID;
	hInviteSlot[playerid]=0;
	JailPrice[playerid]=0;
	GotHit[playerid]=0;
	GoChase[playerid]= INVALID_PLAYER_ID;
	GetChased[playerid]= INVALID_PLAYER_ID;
	OnDuty[playerid]=0;
	CalledCops[playerid]=0;
	CopsCallTime[playerid]=0;
	BoxWaitTime[playerid]=0;
	CalledMedics[playerid]=0;
	TransportDuty[playerid]=0;
	PlayerTied[playerid]=0;
	MedicsCallTime[playerid]=0;
	BusCallTime[playerid]=0;
	TaxiCallTime[playerid]=0;
	EMSCallTime[playerid]=0;
	MedicCallTime[playerid]=0;
	MechanicCallTime[playerid]=0;
	FindTimePoints[playerid]=0;
	FindingPlayer[playerid]=-1;
	FindTime[playerid]=0;
	JobDuty[playerid]=0;
	Mobile[playerid]=INVALID_PLAYER_ID;
	Music[playerid]=0;
	BoxOffer[playerid]= INVALID_PLAYER_ID;
	PlayerBoxing[playerid]=0;
	Spectate[playerid]= INVALID_PLAYER_ID;
	PlayerDrunk[playerid]=0;
	PlayerDrunkTime[playerid]=0;
	format(PlayerInfo[playerid][pPrisonReason],128,"None");
	FishCount[playerid]=0;
	HelpingNewbie[playerid]= INVALID_PLAYER_ID;
	turfWarsRadar[playerid]=0;
	courtjail[playerid]=0;
	gLastCar[playerid]=0;
	FirstSpawn[playerid]=0;
	JetPack[playerid]=0;
	PlayerInfo[playerid][pKills]=0;
	PlayerInfo[playerid][pPaintTeam]=0;
	TextSpamTimes[playerid] = 0;
	TextSpamUnmute[playerid] = 0;
 	CommandSpamTimes[playerid] = 0;
	CommandSpamUnmute[playerid] = 0;
	gOoc[playerid] = 0;
	arr_Towing[playerid] = INVALID_VEHICLE_ID;
	gNews[playerid] = 0;
	gNewbie[playerid] = 1;
	gHelp[playerid] = 1;
	BigEar[playerid] = 0;
	BigEarFamily[playerid] = 255;
	BigEarFaction[playerid] = 0;
	BigEarPlayer[playerid] = INVALID_PLAYER_ID;
	gFam[playerid] = 0;
	gPlayerLogged{playerid} = 0;
	gPlayerLogTries[playerid] = 0;
	PlayerStoned[playerid] = 0;
	PlayerInfo[playerid][pPot] = 0;
	StartTime[playerid] = 0;
	TicketOffer[playerid] = INVALID_PLAYER_ID;
	TicketMoney[playerid] = 0;
	PlayerInfo[playerid][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	ActiveChatbox[playerid] = 1;
	TutStep[playerid] = 0;
	PlayerInfo[playerid][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	TaxiAccepted[playerid] = INVALID_PLAYER_ID;
	EMSAccepted[playerid] = INVALID_PLAYER_ID;
	BusAccepted[playerid] = INVALID_PLAYER_ID;
	PlayerInfo[playerid][pCrack] = 0;
	HireCar[playerid] = 299;
	TransportValue[playerid] = 0;
	TransportMoney[playerid] = 0;
	TransportTime[playerid] = 0;
	TransportCost[playerid] = 0;
	TransportDriver[playerid] = INVALID_PLAYER_ID;
	Locator[playerid] = 0;
	Spectating[playerid] = 0;
	ReleasingMenu[playerid] = INVALID_PLAYER_ID;
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = INVALID_PLAYER_ID;
	MarryWitness[playerid] = INVALID_PLAYER_ID;
	MarryWitnessOffer[playerid] = INVALID_PLAYER_ID;
	MarriageCeremoney[playerid] = 0;
	ProposedTo[playerid] = INVALID_PLAYER_ID;
	GotProposedBy[playerid] = INVALID_PLAYER_ID;
	DivorceOffer[playerid] = INVALID_PLAYER_ID;
	gBike[playerid] = 0;
	gBikeRenting[playerid] = 0;
	Fixr[playerid] = 0;
	VehicleSpawned[playerid] = 0;
	GateEditMode[playerid] = INVALID_GATE_ID;
	GateEditMode2[playerid] = INVALID_GATE_ID;
    FlyingGod[playerid] = 0;
	// These need to be reset to prevent some bugs (DO NOT REMOVE)
	PlayerInfo[playerid][pModel] = 0;
	PlayerInfo[playerid][pLeader] = 0;
	PlayerInfo[playerid][pMember] = 0;
	PlayerInfo[playerid][pDivision] = 0;
	PlayerInfo[playerid][pFMember] = 255;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pOrder] = 0;
	PlayerInfo[playerid][pOrderConfirmed] = 0;
	acstruct[playerid][LastOnFootPosition][0] = 0.0; acstruct[playerid][LastOnFootPosition][1] = 0.0; acstruct[playerid][LastOnFootPosition][2] = 0.0;
	acstruct[playerid][checkmaptp] = 0; acstruct[playerid][maptplastclick] = 0;
	acstruct[playerid][maptp][0] = 0.0; acstruct[playerid][maptp][1] = 0.0; acstruct[playerid][maptp][2] = 0.0;

	for(new x = 0; x < MAX_PLAYERS; x++)
	{
	    ShotPlayer[playerid][x] = 0;
	}

	for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
		PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	}

	for(new s = 0; s < 12; s++) {
		PlayerInfo[playerid][pAGuns][s] = 0;
		PlayerInfo[playerid][pGuns][s] = 0;
	}

	for(new s = 0; s < 40; s++) {
		ListItemReportId[playerid][s] = -1;
	}

	for(new s = 0; s < 20; s++) {
		ListItemRCPId[playerid][s] = -1;
	}

	CancelReport[playerid] = -1;
	GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
	GiveCarTo[playerid] = INVALID_PLAYER_ID;
	RocketExplosions[playerid] = -1;
	ClearFishes(playerid);
	ClearMarriage(playerid);

	// Crash Fix - GhoulSlayeR
	if(!InvalidNameCheck(playerid)) {
		return 1;
	}

	if (CheckBan(GetPlayerIpEx(playerid)) == 1) {
	    SendClientMessage(playerid, COLOR_WHITE, "{FF8000}Notice{FFFFFF}: You are banned from this server.");
		KickWithMessage(playerid);
		return 1;
	}

	InitFly(playerid);

	// Main Menu Features
	InsideMainMenu{playerid} = 0;
	InsideTut{playerid} = 0;

	ShowMainMenuGUI(playerid);
	SetPlayerJoinCamera(playerid);
	ClearChatbox(playerid);
	SetPlayerVirtualWorld(playerid, 0);

	SetPlayerColor(playerid,TEAM_HIT_COLOR);
	SendClientMessage( playerid, COLOR_WHITE, "Welcome to Evolution Roleplay." );
	//PlayAudioStreamForPlayer(playerid, "http://runezip.net/intro2.pls");
	SyncPlayerTime(playerid);

	ShowNoticeGUIFrame(playerid, 1);
	g_mysql_AccountAuthCheck(playerid);

	RemoveBuildings(playerid);
	return 1;
}

//-----------------[Get color code by name]----------------------
forward GetColorCode(clr[]);
public GetColorCode(clr[])
{
	new color = -1;

	if (IsNumeric(clr)) {
		color = strval(clr);
		return color;
	}

	if(strcmp(clr, "black", true)==0) color=0;
	if(strcmp(clr, "white", true)==0) color=1;
	if(strcmp(clr, "blue", true)==0) color=2;
	if(strcmp(clr, "red", true)==0) color=3;
	if(strcmp(clr, "green", true)==0) color=16;
	if(strcmp(clr, "purple", true)==0) color=5;
	if(strcmp(clr, "yellow", true)==0) color=6;
	if(strcmp(clr, "lightblue", true)==0) color=7;
	if(strcmp(clr, "navy", true)==0) color=94;
	if(strcmp(clr, "beige", true)==0) color=102;
	if(strcmp(clr, "darkgreen", true)==0) color=51;
	if(strcmp(clr, "darkblue", true)==0) color=103;
	if(strcmp(clr, "darkgrey", true)==0) color=13;
	if(strcmp(clr, "gold", true)==0) color=99;
	if(strcmp(clr, "brown", true)==0 || strcmp(clr, "dennell", true)==0) color=55;
	if(strcmp(clr, "darkbrown", true)==0) color=84;
	if(strcmp(clr, "darkred", true)==0) color=74;
	if(strcmp(clr, "maroon", true)==0) color=115;
	if(strcmp(clr, "pink", true)==0) color=126;
	return color;
}

forward Maintenance();
public Maintenance()
{
	new string[128];
    ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Freezing Accounts...", 1);

    foreach(new i: Player) {
        TogglePlayerControllable(i, false);
    }

    ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Locking Paintball Arenas...", 1);

    for(new i = 0; i < MAX_ARENAS; i++)
    {
		foreach(new p: Player)
		{
		    new arenaid = GetPVarInt(p, "IsInArena");
		    if(arenaid == i)
		    {
		        if(PaintBallArena[arenaid][pbBidMoney] > 0)
		        {
		            GivePlayerCash(p,PaintBallArena[GetPVarInt(p, "IsInArena")][pbBidMoney]);
					format(string,sizeof(string),"You have been refunded a total of $%d because of premature closure.",PaintBallArena[GetPVarInt(p, "IsInArena")][pbBidMoney]);
		            SendClientMessageEx(p, COLOR_WHITE, string);
		        }
		        if(arenaid == GetPVarInt(p, "ArenaNumber"))
	            {
					switch(PaintBallArena[arenaid][pbGameType])
					{
					    case 1:
					    {
					        if(PlayerInfo[p][pDonateRank] < 3)
					        {
					        	PlayerInfo[p][pPaintTokens] += 3;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",3);
	            				SendClientMessageEx(p, COLOR_WHITE, string);
							}
					    }
					    case 2:
					    {
					        if(PlayerInfo[p][pDonateRank] < 3)
					        {
					        	PlayerInfo[p][pPaintTokens] += 4;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",4);
	            				SendClientMessageEx(p, COLOR_WHITE, string);
							}
					    }
					    case 3:
					    {
					        if(PlayerInfo[p][pDonateRank] < 3)
					        {
				        		PlayerInfo[p][pPaintTokens] += 5;
								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
								SendClientMessageEx(p, COLOR_WHITE, string);
							}
					    }
					    case 4:
					    {
					        if(PlayerInfo[p][pDonateRank] < 3)
					        {
					            PlayerInfo[p][pPaintTokens] += 5;
					            format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
								SendClientMessageEx(p, COLOR_WHITE, string);
					        }
					    }
					    case 5:
					    {
					        if(PlayerInfo[p][pDonateRank] < 3)
					        {
					            PlayerInfo[p][pPaintTokens] += 6;
					            format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",6);
								SendClientMessageEx(p, COLOR_WHITE, string);
					        }
					    }
					}
				}
		        LeavePaintballArena(p, arenaid);
		    }
		}
		ResetPaintballArena(i);
		PaintBallArena[i][pbLocked] = 2;
    }
    foreach(new i: Player)
	{
	   // GameTextForPlayer(i, "Scheduled Maintenance..", 5000, 5);
	   GameTextForPlayer(i, "~y~Scheduled Maintenance...", 7000, 4);
	}


    ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Accounts...", 1);
	SendRconCommand("password dfdfdsfwerfwe");
	SendRconCommand("hostname Evolution Roleplay (Restarting for Maintenance)");
	foreach(new i: Player) if(gPlayerLogged{i}) {
		SetPVarInt(i, "RestartKick", 1);
		//g_mysql_SaveAccount(i);
		OnPlayerStatsUpdate(i);
		break; // We only need to save one player at a time.
	}
	//g_mysql_dumpaccounts();


	return 1;
}

forward FinishMaintenance();
public FinishMaintenance()
{
    ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Houses...", 1);
	SaveHouses();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Business...", 1);
	SaveBiz();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Dynamic Doors...", 1);
	SaveDynamicDoors();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Map Icons...", 1);
	SaveDynamicMapIcons();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Gates...", 1);
	SaveGates();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Event Points...", 1);
	SaveEventPoints();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Paintball Arenas...", 1);
	SavePaintballArenas();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Server Configuration", 1);
    Misc_Save();
    ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Office Elevator...", 1);
	SaveElevatorStuff();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Faction Pay...", 1);
	SaveThePay();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Factions...", 1);
	SaveAllFactions();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Force Saving Faction Vehicles...", 1);
	SaveAllFactionVehicles();
	ABroadCast(COLOR_YELLOW, "{AA3333}Maintenance{FFFF00}: Streamer Plugin Shutting Down...", 1);
	DestroyAllDynamicObjects();
	DestroyAllDynamic3DTextLabels();
	DestroyAllDynamicCPs();
	DestroyAllDynamicMapIcons();
	DestroyAllDynamicRaceCPs();
	DestroyAllDynamicAreas();

	SendRconCommand("exit");
	return 1;
}

stock ClearChatbox(playerid)
{
	for(new i = 0; i < 50; i++) {
		SendClientMessage(playerid, COLOR_WHITE, "");
	}
	return 1;
}

stock ShowNoticeGUIFrame(playerid, frame)
{
	HideNoticeGUIFrame(playerid);

	TextDrawShowForPlayer(playerid, NoticeTxtdraw[0]);
	TextDrawShowForPlayer(playerid, NoticeTxtdraw[1]);

	switch(frame)
	{
		case 1: // Looking up account
		{
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[2]);
		}
		case 2: // Fetching & Comparing Password
		{
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[3]);
		}
		case 3: // Fetching & Loading Account
		{
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[4]);
		}
		case 4: // Streaming Objects
		{
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[5]);
		}
		case 5: // Login Queue
		{
			TextDrawShowForPlayer(playerid, NoticeTxtdraw[6]);
		}
		case 6: // General loading
		{
		    TextDrawShowForPlayer(playerid, NoticeTxtdraw[7]);
		}
		case 7: // Event Loading
		{
		    TextDrawShowForPlayer(playerid, NoticeTxtdraw[8]);
		}
		case 8: // Event Exit
		{
		    TextDrawShowForPlayer(playerid, NoticeTxtdraw[9]);
		}
	}
}

stock HideNoticeGUIFrame(playerid)
{
	for(new i = 0; i < 10; i++)
	{
		TextDrawHideForPlayer(playerid, NoticeTxtdraw[i]);
	}
}

stock ShowTutGUIFrame(playerid, frame)
{
	switch(frame)
	{
		case 1:
		{
			for(new i = 4; i < 14; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 2:
		{
			for(new i = 14; i < 18; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 3:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[18]);
		}
		case 4:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[19]);
		}
		case 5:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[20]);
		}
		case 6:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[21]);
		}
		case 7:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[22]);
		}
		case 8:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[23]);
		}
		case 9:
		{
			TextDrawShowForPlayer(playerid, TutTxtdraw[24]);
		}
		case 10:
		{
			for(new i = 25; i < 34; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 11:
		{
			for(new i = 34; i < 40; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 12:
		{
			for(new i = 40; i < 46; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 13:
		{
			for(new i = 46; i < 52; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 14:
		{
			for(new i = 52; i < 58; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 15:
		{
			for(new i = 58; i < 65; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 16:
		{
			for(new i = 65; i < 71; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 17:
		{
			for(new i = 71; i < 77; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 18:
		{
			for(new i = 77; i < 82; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 19:
		{
			for(new i = 82; i < 87; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 20:
		{
			for(new i = 87; i < 93; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 21:
		{
			for(new i = 93; i < 100; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 22:
		{
			for(new i = 100; i < 108; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 23:
		{
			for(new i = 108; i < 114; i++) {
				TextDrawShowForPlayer(playerid, TutTxtdraw[i]);
			}
		}
	}
}

stock HideTutGUIFrame(playerid, frame)
{
	switch(frame)
	{
		case 1:
		{
			for(new i = 4; i < 14; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 2:
		{
			for(new i = 14; i < 18; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 3:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[18]);
		}
		case 4:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[19]);
		}
		case 5:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[20]);
		}
		case 6:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[21]);
		}
		case 7:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[22]);
		}
		case 8:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[23]);
		}
		case 9:
		{
			TextDrawHideForPlayer(playerid, TutTxtdraw[24]);
		}
		case 10:
		{
			for(new i = 25; i < 34; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 11:
		{
			for(new i = 34; i < 40; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 12:
		{
			for(new i = 40; i < 46; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 13:
		{
			for(new i = 46; i < 52; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 14:
		{
			for(new i = 52; i < 58; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 15:
		{
			for(new i = 58; i < 65; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 16:
		{
			for(new i = 65; i < 71; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 17:
		{
			for(new i = 71; i < 77; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 18:
		{
			for(new i = 77; i < 82; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 19:
		{
			for(new i = 82; i < 87; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 20:
		{
			for(new i = 87; i < 93; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 21:
		{
			for(new i = 93; i < 100; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 22:
		{
			for(new i = 100; i < 108; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
		case 23:
		{
			for(new i = 108; i < 114; i++) {
				TextDrawHideForPlayer(playerid, TutTxtdraw[i]);
			}
		}
	}
}

stock ShowTutGUIBox(playerid)
{
	InsideTut{playerid} = true;

	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[0]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[1]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[2]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[3]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[4]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[5]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[6]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[7]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[8]);

	TextDrawShowForPlayer(playerid, TutTxtdraw[0]);
	TextDrawShowForPlayer(playerid, TutTxtdraw[1]);
	TextDrawShowForPlayer(playerid, TutTxtdraw[2]);
	TextDrawShowForPlayer(playerid, TutTxtdraw[3]);
	TextDrawShowForPlayer(playerid, TutTxtdraw[114]);

}

stock HideTutGUIBox(playerid)
{
	InsideTut{playerid} = false;

	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[0]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[1]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[2]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[3]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[4]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[5]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[6]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[7]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[8]);

	TextDrawHideForPlayer(playerid, TutTxtdraw[0]);
	TextDrawHideForPlayer(playerid, TutTxtdraw[1]);
	TextDrawHideForPlayer(playerid, TutTxtdraw[2]);
	TextDrawHideForPlayer(playerid, TutTxtdraw[3]);
	TextDrawHideForPlayer(playerid, TutTxtdraw[114]);
}

stock ShowMainMenuGUI(playerid)
{
	InsideMainMenu{playerid} = true;
	MainMenuUpdateForPlayer(playerid);

	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[0]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[1]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[2]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[3]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[4]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[5]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[6]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[7]);
	TextDrawShowForPlayer(playerid, MainMenuTxtdraw[8]);
}

stock HideMainMenuGUI(playerid)
{
	InsideMainMenu{playerid} = false;

	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[0]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[1]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[2]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[3]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[4]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[5]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[6]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[7]);
	TextDrawHideForPlayer(playerid, MainMenuTxtdraw[8]);
}

stock SendClientMessageEx(playerid, color, string[])
{
	if(InsideMainMenu{playerid} == 1 || InsideTut{playerid} == 1 || ActiveChatbox[playerid] == 0)
		return 0;

	else SendClientMessage(playerid, color, string);
	return 1;
}

stock SendClientMessageToAllEx(color, string[])
{
	foreach(new i: Player) {
		if(InsideMainMenu{i} == 1 || InsideTut{i} == 1 || ActiveChatbox[i] == 0) {}
		else SendClientMessage(i, color, string);
	}
	return 1;
}

stock SetPlayerJoinCamera(playerid)
{
	new randcamera = Random(1,9);
	switch(randcamera)
	{
		case 1: // Gym
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,2229.4968,-1722.0701,13.5625);
			SetPlayerPosEx(playerid,2211.1460,-1748.3909,-10.0);
			SetPlayerCameraPos(playerid,2211.1460,-1748.3909,29.3744);
			SetPlayerCameraLookAt(playerid,2229.4968,-1722.0701,13.5625);
		}
		case 2: // Paintball Arena
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1295.6960,-1422.5111,14.9596);
			SetPlayerPosEx(playerid,1283.8524,-1385.5304,-10.0);
			SetPlayerCameraPos(playerid,1283.8524,-1385.5304,25.8896);
			SetPlayerCameraLookAt(playerid,1295.6960,-1422.5111,14.9596);
		}
		case 3: // LSPD
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1554.3381,-1675.5692,16.1953);
			SetPlayerPosEx(playerid,1514.7783,-1700.2913,-10.0);
			SetPlayerCameraPos(playerid,1514.7783,-1700.2913,36.7506);
			SetPlayerCameraLookAt(playerid,1554.3381,-1675.5692,16.1953);
		}
		case 4: // SaC HQ (Gang HQ)
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,655.5394,-1867.2231,5.4609);
			SetPlayerPosEx(playerid,655.5394,-1867.2231,-10.0);
			SetPlayerCameraPos(playerid,699.7435,-1936.7568,24.8646);
			SetPlayerCameraLookAt(playerid,655.5394,-1867.2231,5.4609);

		}
		case 5: // Fishing Pier
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,370.0804,-2087.8767,7.8359);
			SetPlayerPosEx(playerid,370.0804,-2087.8767,-10.0);
			SetPlayerCameraPos(playerid,423.3802,-2067.7915,29.8605);
			SetPlayerCameraLookAt(playerid,370.0804,-2087.8767,7.8359);
		}
		case 6: // VIP
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1797.3397,-1578.3440,14.0798);
			SetPlayerPosEx(playerid,1797.3397,-1578.3440,-10.0);
			SetPlayerCameraPos(playerid,1832.1698,-1600.1538,32.2877);
			SetPlayerCameraLookAt(playerid,1797.3397,-1578.3440,14.0798);
		}
		case 7: // All Saints
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1175.5581,-1324.7922,18.1610);
			SetPlayerPosEx(playerid, 1188.4574,-1309.2242,-10.0);
			SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
			SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
		}
		case 8: // Unity
		{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1716.1129,-1880.0715,22.0264);
			SetPlayerPosEx(playerid,1716.1129,-1880.0715,-10.0);
			SetPlayerCameraPos(playerid,1755.0413,-1824.8710,20.2100);
			SetPlayerCameraLookAt(playerid,1716.1129,-1880.0715,22.0264);
		}
	}
	return 1;
}

stock ShowMainMenuDialog(playerid, frame)
{
	new titlestring[64];
	new string[512];

	switch(frame)
	{
		case 1:
		{
			format(titlestring, sizeof(titlestring), "{3399FF}Login - %s", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "{FFFFFF}Welcome to Evolution Roleplay, {FF8000}%s{FFFFFF}.\n\nThe name that you are using is registered, please enter a password to login:", GetPlayerNameEx(playerid));//,  GetPlayerIpEx(playerid));
			ShowPlayerDialog(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,titlestring,string,"Login","Exit");
		}
		case 2:
		{
			format(titlestring, sizeof(titlestring), "{3399FF}Register - %s", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "{FFFFFF}Welcome to Evolution Roleplay, {FF8000}%s{FFFFFF}.\n\nYou may register an account by entering a desired password here:", GetPlayerNameEx(playerid));//, GetPlayerIpEx(playerid));
			ShowPlayerDialog(playerid,MAINMENU2,DIALOG_STYLE_PASSWORD,titlestring,string,"Register","Exit");
		}
		case 3:
		{
			format(titlestring, sizeof(titlestring), "{3399FF}Login - %s", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "{FF0000}Invalid Password{FFFFFF}!\n\nWelcome to Evolution Roleplay, {FF8000}%s{FFFFFF}.\n\nThe name that you are using is registered, please enter a password to login:", GetPlayerNameEx(playerid));//, GetPlayerIpEx(playerid));
			ShowPlayerDialog(playerid,MAINMENU,DIALOG_STYLE_PASSWORD,titlestring,string,"Login","Exit");
		}
		case 4:
		{
			format(titlestring, sizeof(titlestring), "{3399FF}Account Locked - %s", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "{FFFFFF}Our database indicates that %s is currently {00FF00}logged in{FFFFFF}, if this is a mistake please contact a tech administrator.", GetPlayerNameEx(playerid));
			ShowPlayerDialog(playerid,MAINMENU3,DIALOG_STYLE_MSGBOX,titlestring,string,"Exit","");
		}
	}
}

stock SafeLogin(playerid, type)
{
	switch(type)
	{
		case 1: // Account Exists
		{
			ShowMainMenuDialog(playerid, 1);
		}
		case 2: // No Account Exists
		{
			if(!IsValidName(playerid))
			{
			    SetPVarString(playerid, "KickNonRP", GetPlayerNameEx(playerid));
			    SetTimerEx("KickNonRP", 3000, false, "i", playerid);
			}
			else
			{
			    ShowMainMenuDialog(playerid, 2);
			}
		}
	}

	return 1;
}

forward KickNonRP(playerid);
public KickNonRP(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPVarString(playerid, "KickNonRP", name, sizeof(name));
	if(strcmp(GetPlayerNameEx(playerid), name) == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "You have been kicked for failing to connect with a role play name (i.e. John_Smith).");
		KickWithMessage(playerid);
	}
}

IsValidName(iPlayer) {

	new
		iLength,
		szPlayerName[MAX_PLAYER_NAME], tmpName[MAX_PLAYER_NAME];

	GetPlayerName(iPlayer, szPlayerName, sizeof(szPlayerName));

	if(strcmp(szPlayerName, tmpName, false) != 0)
	{
		return 0;
	}
	iLength = strlen(szPlayerName);

	if(strfindex(szPlayerName, "_", false) == -1 || szPlayerName[iLength - 1] == '_' || szPlayerName[0] == '_') {
		return 0;
	}
	else for(new i; i < iLength; ++i) {
		if(!('a' <= szPlayerName[i] <= 'z' || 'A' <= szPlayerName[i] <= 'Z' || szPlayerName[i] == '_')) {
			return 0;
		}
	}
	return 1;
}

forward Player_StreamPrep(iPlayer, Float: fPosX, Float: fPosY, Float: fPosZ, iTime);
public Player_StreamPrep(iPlayer, Float: fPosX, Float: fPosY, Float: fPosZ, iTime) {
	switch(GetPVarInt(iPlayer, "StreamPrep")) {
		case 0: {

			ShowNoticeGUIFrame(iPlayer, 4);
			TogglePlayerControllable(iPlayer, false);
			//GameTextForPlayer(iPlayer, "~w~Collecting position...", iTime * 2, 3);
			SetPVarInt(iPlayer, "StreamPrep", 1);
			SetTimerEx("Player_StreamPrep", iTime / 2, false, "ifffi", iPlayer, fPosX, fPosY, fPosZ, iTime);
		}
		case 1: {

			if(GetPlayerState(iPlayer) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(iPlayer), fPosX, fPosY, fPosZ + 2.0);

			else
				SetPlayerPosEx(iPlayer, fPosX, fPosY, fPosZ + 0.5);

			//GameTextForPlayer(iPlayer, "~w~Streaming objects...", iTime * 2, 3);
			SetPVarInt(iPlayer, "StreamPrep", 2);
			SetTimerEx("Player_StreamPrep", iTime / 2, false, "ifffi", iPlayer, fPosX, fPosY, fPosZ, iTime);
		}
		default: {
			//GameTextForPlayer(iPlayer, "~r~Loaded!", 1000, 3);
			HideNoticeGUIFrame(iPlayer);
			TogglePlayerControllable(iPlayer, true);

			if(GetPlayerState(iPlayer) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(iPlayer), fPosX, fPosY, fPosZ);

			else
				SetPlayerPosEx(iPlayer, fPosX, fPosY, fPosZ);

			if(GetPVarType(iPlayer, "MedicCall")) {
				ClearAnimations(iPlayer);
				ApplyAnimation(iPlayer, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			}
			DeletePVar(iPlayer, "StreamPrep");
		}
	}
	SetCameraBehindPlayer(iPlayer);
	Streamer_UpdateEx(iPlayer, fPosX, fPosY, fPosZ);
}

forward Player_EventPrep(iPlayer, Float: fPosX, Float: fPosY, Float: fPosZ, iTime);
public Player_EventPrep(iPlayer, Float: fPosX, Float: fPosY, Float: fPosZ, iTime) {
	switch(GetPVarInt(iPlayer, "EventPrep")) {
		case 0: {

			ShowNoticeGUIFrame(iPlayer, 7);
			TogglePlayerControllable(iPlayer, false);
			//GameTextForPlayer(iPlayer, "~w~Collecting position...", iTime * 2, 3);
			SetPVarInt(iPlayer, "EventPrep", 1);
			SetTimerEx("Player_EventPrep", iTime / 2, false, "ifffi", iPlayer, fPosX, fPosY, fPosZ, iTime);
		}
		case 1: {

			if(GetPlayerState(iPlayer) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(iPlayer), fPosX, fPosY, fPosZ + 2.0);

			else
				SetPlayerPosEx(iPlayer, fPosX, fPosY, fPosZ + 0.5);

			//GameTextForPlayer(iPlayer, "~w~Streaming objects...", iTime * 2, 3);
			SetPVarInt(iPlayer, "EventPrep", 2);
			SetTimerEx("Player_EventPrep", iTime / 2, false, "ifffi", iPlayer, fPosX, fPosY, fPosZ, iTime);
		}
		default: {
			//GameTextForPlayer(iPlayer, "~r~Loaded!", 1000, 3);
			HideNoticeGUIFrame(iPlayer);
			TogglePlayerControllable(iPlayer, true);

			if(GetPlayerState(iPlayer) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(iPlayer), fPosX, fPosY, fPosZ);

			else
				SetPlayerPosEx(iPlayer, fPosX, fPosY, fPosZ);

			if(GetPVarType(iPlayer, "MedicCall")) {
				ClearAnimations(iPlayer);
				ApplyAnimation(iPlayer, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			}
			DeletePVar(iPlayer, "EventPrep");
		}
	}
	SetCameraBehindPlayer(iPlayer);
	Streamer_UpdateEx(iPlayer, fPosX, fPosY, fPosZ);
}

forward Player_LeaveEventPrep(iPlayer, Float: fPosX, Float: fPosY, Float: fPosZ, iTime);
public Player_LeaveEventPrep(iPlayer, Float: fPosX, Float: fPosY, Float: fPosZ, iTime) {
	switch(GetPVarInt(iPlayer, "LeaveEventPrep")) {
		case 0: {

			ShowNoticeGUIFrame(iPlayer, 8);
			TogglePlayerControllable(iPlayer, false);
			//GameTextForPlayer(iPlayer, "~w~Collecting position...", iTime * 2, 3);
			SetPVarInt(iPlayer, "LeaveEventPrep", 1);
			SetTimerEx("Player_LeaveEventPrep", iTime / 2, false, "ifffi", iPlayer, fPosX, fPosY, fPosZ, iTime);
		}
		case 1: {

			if(GetPlayerState(iPlayer) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(iPlayer), fPosX, fPosY, fPosZ + 2.0);

			else
				SetPlayerPosEx(iPlayer, fPosX, fPosY, fPosZ + 0.5);

			//GameTextForPlayer(iPlayer, "~w~Streaming objects...", iTime * 2, 3);
			SetPVarInt(iPlayer, "LeaveEventPrep", 2);
			SetTimerEx("Player_LeaveEventPrep", iTime / 2, false, "ifffi", iPlayer, fPosX, fPosY, fPosZ, iTime);
		}
		default: {
			//GameTextForPlayer(iPlayer, "~r~Loaded!", 1000, 3);
			HideNoticeGUIFrame(iPlayer);
			TogglePlayerControllable(iPlayer, true);

			if(GetPlayerState(iPlayer) == PLAYER_STATE_DRIVER)
				SetVehiclePos(GetPlayerVehicleID(iPlayer), fPosX, fPosY, fPosZ);

			else
				SetPlayerPosEx(iPlayer, fPosX, fPosY, fPosZ);

			if(GetPVarType(iPlayer, "MedicCall")) {
				ClearAnimations(iPlayer);
				ApplyAnimation(iPlayer, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			}
			DeletePVar(iPlayer, "LeaveEventPrep");
		}
	}
	SetCameraBehindPlayer(iPlayer);
	Streamer_UpdateEx(iPlayer, fPosX, fPosY, fPosZ);
}

stock ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nobody");
		strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return 1;
}

stock ClearHouse(houseid) {
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 1;
}

stock ClearFamily(family)
{
	foreach(new i: Player) {
		if(PlayerInfo[i][pFMember] == family) {
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "* The Family you are in has just been deleted by an Admin, you have been kicked out automatically.");
			PlayerInfo[i][pFMember] = 255;
		}
	}

	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "None");
	FamilyInfo[family][FamilyTaken] = 0;
	strmid(FamilyInfo[family][FamilyName], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyMOTD], string, 0, strlen(string), 255);
	strmid(FamilyInfo[family][FamilyLeader], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Outsider");
	strmid(FamilyInfo[family][FamilyRank1], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Associate");
	strmid(FamilyInfo[family][FamilyRank2], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Soldier");
	strmid(FamilyInfo[family][FamilyRank3], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Capo");
	strmid(FamilyInfo[family][FamilyRank4], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Underboss");
	strmid(FamilyInfo[family][FamilyRank5], string, 0, strlen(string), 255);
	format(string, sizeof(string), "Godfather");
	strmid(FamilyInfo[family][FamilyRank6], string, 0, strlen(string), 255);
	FamilyInfo[family][FamilyColor] = 0;
	FamilyInfo[family][FamilyTurfTokens] = 24;
	FamilyInfo[family][FamilyMembers] = 0;
	FamilyInfo[family][FamilySpawn][0] = 0.0;
	FamilyInfo[family][FamilySpawn][1] = 0.0;
	FamilyInfo[family][FamilySpawn][2] = 0.0;
	FamilyInfo[family][FamilySpawn][3] = 0.0;
    FamilyInfo[family][FamilyGuns][0] = 0;
    FamilyInfo[family][FamilyGuns][2] = 0;
    FamilyInfo[family][FamilyGuns][3] = 0;
    FamilyInfo[family][FamilyGuns][4] = 0;
    FamilyInfo[family][FamilyGuns][5] = 0;
    FamilyInfo[family][FamilyGuns][6] = 0;
    FamilyInfo[family][FamilyGuns][7] = 0;
	FamilyInfo[family][FamilyGuns][8] = 0;
	FamilyInfo[family][FamilyGuns][9] = 0;
	FamilyInfo[family][FamilyCash] = 0;
	FamilyInfo[family][FamilyMats] = 0;
	FamilyInfo[family][FamilyPot] = 0;
	FamilyInfo[family][FamilyCrack] = 0;
	FamilyInfo[family][FamilySafe][0] = 0.0;
	FamilyInfo[family][FamilySafe][1] = 0.0;
	FamilyInfo[family][FamilySafe][2] = 0.0;
	FamilyInfo[family][FamilyUSafe] = 0;
	DestroyPickupEx( FamilyInfo[family][FamilyEntrancePickup] );
	DestroyPickupEx( FamilyInfo[family][FamilyExitPickup] );
	DestroyDynamic3DTextLabel( Text3D:FamilyInfo[family][FamilyEntranceText] );
	DestroyDynamic3DTextLabel( Text3D:FamilyInfo[family][FamilyExitText] );
	DestroyPickupEx( FamilyInfo[family][FamilyPickup] );
	SaveFamilies();
	return 1;
}

stock FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid)) {
		new cost = 0;
		switch (fish)
		{
			case 1:
			{
				cost = 1;
			}
			case 2:
			{
				cost = 3;
			}
			case 3:
			{
				cost = 3;
			}
			case 5:
			{
				cost = 5;
			}
			case 6:
			{
				cost = 2;
			}
			case 8:
			{
				cost = 8;
			}
			case 9:
			{
				cost = 12;
			}
			case 11:
			{
				cost = 9;
			}
			case 12:
			{
				cost = 7;
			}
			case 14:
			{
				cost = 12;
			}
			case 15:
			{
				cost = 9;
			}
			case 16:
			{
				cost = 7;
			}
			case 17:
			{
				cost = 7;
			}
			case 18:
			{
				cost = 10;
			}
			case 19:
			{
				cost = 4;
			}
			case 21:
			{
				cost = 3;
			}
		}
		return cost;
	}
	return 0;
}

stock ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid)) {
		Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;

		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return 1;
}

stock ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "None");
		switch (fish)
		{
			case 1:
			{
				strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight1] = 0;
				Fishes[playerid][pFid1] = 0;
			}
			case 2:
			{
				strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight2] = 0;
				Fishes[playerid][pFid2] = 0;
			}
			case 3:
			{
				strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight3] = 0;
				Fishes[playerid][pFid3] = 0;
			}
			case 4:
			{
				strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight4] = 0;
				Fishes[playerid][pFid4] = 0;
			}
			case 5:
			{
				strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
				Fishes[playerid][pWeight5] = 0;
				Fishes[playerid][pFid5] = 0;
			}
		}
	}
	return 1;
}

forward Lotto(number);
public Lotto(number)
{
	new JackpotFallen = 0, TotalWinners = 0, string[128];

	format(string, sizeof(string), "Lottery News: Today the winning number has fallen on... %d!.", number);
	OOCOff(COLOR_WHITE, string);

	foreach(new i: Player)
	{
		if(PlayerInfo[i][pLottoNr] > 0)
		{
  			for(new t = 0; t < 5; t++)
  			{
    			if(LottoNumbers[i][t] == number)
				{
				    TotalWinners++;
				    SetPVarInt(i, "Winner", 1);
       				break;
				}
				else
				{
				    LottoNumbers[i][t] = 0;
				    if(t == 4) {
				        SendClientMessageEx(i, COLOR_GREY, "Sorry your lottery tickets have not been selected this drawing.");
				    }
				}
			}
			DeleteTickets(i);
			PlayerInfo[i][pLottoNr] = 0;
		}
		else {
		    SendClientMessageEx(i, COLOR_GREY, "You did not participate in this drawing.");
		}
	}
	if(TotalWinners == 1)
	{
		foreach(new i: Player)
		{
		    if(GetPVarType(i, "Winner"))
		    {
		        for(new t = 0; t < 5; t++) {
  					LottoNumbers[i][t] = 0;
    			}
    			if(SpecLotto) {
    			    AddFlag(i, INVALID_PLAYER_ID, LottoPrize);
    			}
		        JackpotFallen = 1;
				format(string, sizeof(string), "Lottery News: %s (%d) has won the jackpot of $%d with their lottery ticket.", GetPlayerNameEx(i),i, Jackpot);
				OOCOff(COLOR_WHITE, string);
				format(string, sizeof(string), "* You have won $%d with your lottery ticket - congratulations!", Jackpot);
				SendClientMessageEx(i, COLOR_YELLOW, string);
				GivePlayerCash(i, Jackpot);
				DeletePVar(i, "Winner");
		    }
		}
	}
	else if(TotalWinners > 1)
	{
	    foreach(new i: Player)
	    {
	        if(GetPVarType(i, "Winner"))
	        {
	            for(new t = 0; t < 5; t++) {
  					LottoNumbers[i][t] = 0;
    			}
    			if(SpecLotto) {
    			    AddFlag(i, INVALID_PLAYER_ID, LottoPrize);
    			}
                JackpotFallen = 1;
				format(string, sizeof(string), "Lottery News: %s (%d) has won the jackpot of $%d with their lottery ticket.", GetPlayerNameEx(i),i, Jackpot/TotalWinners);
				OOCOff(COLOR_WHITE, string);
				format(string, sizeof(string), "* You have won $%d with your lottery ticket - congratulations!", Jackpot/TotalWinners);
				SendClientMessageEx(i, COLOR_YELLOW, string);
				GivePlayerCash(i, Jackpot/TotalWinners);
				DeletePVar(i, "Winner");
	        }
	    }
	}
	TicketsSold = 0;
	SpecLotto = 0;
	if(!JackpotFallen)
	{
		Misc_Save();
		format(string, sizeof(string), "Lottery News: The jackpot has been raised to $%d.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	else
	{
	    Jackpot = 50000;
	    format(string, sizeof(string), "Lottery News: The new jackpot has been started with $%d.", Jackpot);
		OOCOff(COLOR_WHITE, string);
	}
	return 1;
}

forward Disconnect(playerid);
public Disconnect(playerid)
{
	new string[24];
    GetPlayerIp(playerid, unbanip[playerid], 16);
    format(string, sizeof(string),"banip %s", unbanip[playerid]);
	SendRconCommand(string);
	return 1;
}
//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{
    if(!isnull(unbanip[playerid]))
	{
	    new string[26];
	    format(string, sizeof(string), "unbanip %s", unbanip[playerid]);
	    SendRconCommand(string);
	}
	// Why save on people who haven't logged in!
	DeletePVar(playerid, "dmgcheck");
	DeletePVar(playerid, "dmgcheckID");
	if(gPlayerLogged{playerid} == 1)
	{
		g_mysql_RemoveDumpFile(GetPlayerSQLId(playerid));

		if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject])) {
			DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
		}

		if(GetPVarType(playerid, "pBoomBox"))
		{
		    DestroyDynamicObject(GetPVarInt(playerid, "pBoomBox"));
		    DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "pBoomBoxLabel"));
		    if(GetPVarType(playerid, "pBoomBoxArea"))
		    {
		        new string[128];
				format(string, sizeof(string), "The boombox owner (%s) has logged off", GetPlayerNameEx(playerid));
		        foreach(new i: Player)
		        {
		            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "pBoomBoxArea")))
		            {
		                StopAudioStreamForPlayerEx(i);
		                SendClientMessage(i, COLOR_PURPLE, string);
					}
				}
			}
		}

		if(pTazer{playerid} == 1) GivePlayerValidWeapon(playerid,pTazerReplace{playerid},60000);
		if(GetPVarInt(playerid, "SpeedRadar") == 1) GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);

		if(GetPVarInt(playerid, "MovingStretcher") != -1) {
			KillTimer(GetPVarInt(playerid, "TickEMSMove"));
		}

		if(GetPVarInt(playerid, "Injured") == 1) {
			PlayerInfo[playerid][pHospital] = 1;
			KillEMSQueue(playerid);
			ResetPlayerWeaponsEx(playerid);
		}

		if(control[playerid] == 1) {
			control[playerid] = 0;
			KillTimer(ControlTimer[playerid]);
		}

		if(PlayerInfo[playerid][pLockCar] != INVALID_VEHICLE_ID) {
			vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
			PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
		}

		if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID) {
			PlayerVehicleInfo[PlayerInfo[playerid][pVehicleKeysFrom]][PlayerInfo[playerid][pVehicleKeys]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}

		new string[128];
		switch (reason)
		{
			case 0:
			{
				format(string, sizeof(string), "%s has left the server (timeout).", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				if(PlayerCuffed[playerid] != 0)
				{
					strcpy(PlayerInfo[playerid][pPrisonReason], "[OOC] Left while cuffed", 128);
					PlayerInfo[playerid][pJailTime] += 120*60;
				}
			}
			case 1:
			{
				format(string, sizeof(string), "%s has left the server (leaving).", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				if(PlayerCuffed[playerid] != 0)
				{
					strcpy(PlayerInfo[playerid][pPrisonReason], "[OOC] Left while cuffed", 128);
					PlayerInfo[playerid][pJailTime] += 120*60;
				}
			}
			case 2:
			{
				format(string, sizeof(string), "%s has left the server (kicked/banned).", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			}
		}
		if(EventKernel[EventRequest] == playerid)
		{
			EventKernel[EventRequest] = INVALID_PLAYER_ID;
			ABroadCast( COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: The player that was requesting an event has disconnected/crashed.", 4 );
		}
		if(EventKernel[EventCreator] == playerid)
		{
			EventKernel[EventCreator] = INVALID_PLAYER_ID;
			ABroadCast( COLOR_YELLOW, "{AA3333}AdmWarning{FFFF00}: The player that was creating an event has disconnected/crashed.", 4 );
		}
		for(new x; x < sizeof(EventKernel[EventStaff]); x++) {
			if(EventKernel[EventStaff][x] == playerid) {
				EventKernel[EventStaff][x] = INVALID_PLAYER_ID;
				break;
			}
		}
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
			PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
			PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
			PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "pbOldX");
			PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "pbOldY");
			PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "pbOldZ");
			PlayerInfo[playerid][pHealth] = GetPVarFloat(playerid, "pbOldHealth");
			PlayerInfo[playerid][pArmor] = GetPVarFloat(playerid, "pbOldArmor");
			SetPlayerHealth(playerid,GetPVarFloat(playerid, "pbOldHealth"));
			SetPlayerArmour(playerid,GetPVarFloat(playerid, "pbOldArmor"));
		}
		else if(GetPVarInt(playerid, "EventToken") == 0 && !GetPVarType(playerid, "LoadingObjects"))
		{
			new Float: x, Float: y, Float: z;
			PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
			PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
			PlayerInfo[playerid][pPos_x] = x;
			PlayerInfo[playerid][pPos_y] = y;
			PlayerInfo[playerid][pPos_z] = z;
		}
		else
		{
			PlayerInfo[playerid][pInt] = EventLastInt[playerid];
			PlayerInfo[playerid][pVW] = EventLastVW[playerid];
			PlayerInfo[playerid][pPos_r] = EventFloats[playerid][0];
			PlayerInfo[playerid][pPos_x] = EventFloats[playerid][1];
			PlayerInfo[playerid][pPos_y] = EventFloats[playerid][2];
			PlayerInfo[playerid][pPos_z] = EventFloats[playerid][3];
		}
		if(WatchingTV[playerid] == 1)
		{
			PlayerInfo[playerid][pInt] = BroadcastLastInt[playerid];
			PlayerInfo[playerid][pVW] = BroadcastLastVW[playerid];
			PlayerInfo[playerid][pPos_r] = BroadcastFloats[playerid][0];
			PlayerInfo[playerid][pPos_x] = BroadcastFloats[playerid][1];
			PlayerInfo[playerid][pPos_y] = BroadcastFloats[playerid][2];
			PlayerInfo[playerid][pPos_z] = BroadcastFloats[playerid][3];
			WatchingTV[playerid] = 0;
			viewers--;
			UpdateSANewsBroadcast();
		}
		if(Spectate[playerid] < 553)
		{
			PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "SpecInt");
			PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "SpecVW");
			PlayerInfo[playerid][pPos_x] = GetPVarFloat(playerid, "SpecPosX");
			PlayerInfo[playerid][pPos_y] = GetPVarFloat(playerid, "SpecPosY");
			PlayerInfo[playerid][pPos_z] = GetPVarFloat(playerid, "SpecPosZ");
			GettingSpectated[Spectate[playerid]] = INVALID_PLAYER_ID;
			Spectate[playerid] = INVALID_PLAYER_ID;
		}
	    new newcar = gLastCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if((engine == VEHICLE_PARAMS_ON) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510 && newcar != CrateIslandVehicles[0] && newcar != CrateIslandVehicles[1]) {
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] == 1)
			{
				SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
				arr_Engine{newcar} = 0;
				SendClientMessageEx(playerid, COLOR_GREY, "Car Engine Off.");
			}
		}
		if(gBike[playerid] >= 0 && gBikeRenting[playerid] == 1)
		{
			gBike[playerid] = 0;
			gBikeRenting[playerid] = 0;
			KillTimer(GetPVarInt(playerid, "RentTime"));
		}

		if(GetPVarInt(playerid, "gpsonoff") == 1) TextDrawDestroy(GPS[playerid]);

		if(PlayerInfo[playerid][pAdmin] >= 2) TextDrawDestroy(PriorityReport[playerid]);

		if(InsidePlane[playerid] != INVALID_VEHICLE_ID)
		{
			if(!IsAPlane(InsidePlane[playerid]))
			{
				GivePlayerValidWeapon(playerid, 46, 60000);
				PlayerInfo[playerid][pPos_x] = 0.000000;
				PlayerInfo[playerid][pPos_y] = 0.000000;
				PlayerInfo[playerid][pPos_z] = 420.000000;
			}
			else
			{
				new Float:X, Float:Y, Float:Z;
				GetVehiclePos(InsidePlane[playerid], X, Y, Z);
				PlayerInfo[playerid][pPos_x] = X;
				PlayerInfo[playerid][pPos_y] = Y;
				PlayerInfo[playerid][pPos_z] = Z;
				if(Z > 50.0)
				{
					GivePlayerValidWeapon(playerid, 46, 60000);
				}
			}
			PlayerInfo[playerid][pVW] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerInterior(playerid, 0);
			InsidePlane[playerid] = INVALID_VEHICLE_ID;
		}

		OnPlayerStatsUpdate(playerid);
		if(reason == 0) g_mysql_SavePlayerVehPositions(playerid);
		UnloadPlayerVehicles(playerid);
		g_mysql_AccountOnline(playerid, 0);

		for(new i = 0; i < MAX_REPORTS; i++)
		{
			if(Reports[i][ReportFrom] == playerid)
			{
				Reports[i][ReportFrom] = INVALID_PLAYER_ID;
				Reports[i][BeingUsed] = 0;
				Reports[i][TimeToExpire] = 0;
				Reports[i][ReportPriority] = 0;
        		Reports[i][ReportLevel] = 0;
			}
		}
		foreach(new i: Player)
		{
			if(TaxiAccepted[i] == playerid)
			{
				TaxiAccepted[i] = INVALID_PLAYER_ID;
				GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Left the game", 5000, 1);
				TaxiCallTime[i] = 0;
				DisablePlayerCheckpoint(i);
			}
			if(EMSAccepted[i] == playerid)
			{
				EMSAccepted[i] = INVALID_PLAYER_ID;
				GameTextForPlayer(i, "~w~EMS Caller~n~~r~Left the game", 5000, 1);
				EMSCallTime[i] = 0;
				DisablePlayerCheckpoint(i);
			}
			if(BusAccepted[i] == playerid)
			{
				BusAccepted[i] = INVALID_PLAYER_ID;
				GameTextForPlayer(i, "~w~Bus Caller~n~~r~Left the game", 5000, 1);
				BusCallTime[i] = 0;
				DisablePlayerCheckpoint(i);
			}
			if(MedicAccepted[i] == playerid)
			{
				TaxiAccepted[playerid] = INVALID_PLAYER_ID; BusAccepted[playerid] = INVALID_PLAYER_ID; MedicAccepted[playerid] = INVALID_PLAYER_ID;
				GameTextForPlayer(i, "~w~Medic Caller~n~~r~Left the game", 5000, 1);
				MedicCallTime[i] = 0;
				DisablePlayerCheckpoint(i);
			}
			if(OrderAssignedTo[i] == playerid)
			{
			   OrderAssignedTo[i] = INVALID_PLAYER_ID;
			}
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
			if(IsPlayerConnected(TransportDriver[playerid]))
			{
				TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
				TransportTime[TransportDriver[playerid]] = 0;
				TransportCost[TransportDriver[playerid]] = 0;
				format(string, sizeof(string), "~w~Passenger left~n~~g~Earned $%d",TransportCost[playerid]);
				GameTextForPlayer(TransportDriver[playerid], string, 5000, 1);
				TransportDriver[playerid] = INVALID_PLAYER_ID;
			}
		}
		if(GotHit[playerid] > 0)
		{
			if(GetChased[playerid] < 999)
			{
				if(IsPlayerConnected(GetChased[playerid]))
				{
					SendClientMessageEx(GetChased[playerid], COLOR_YELLOW, "Your hit has left the server.");
					GoChase[GetChased[playerid]] = INVALID_PLAYER_ID;
				}
			}
		}
		if(GoChase[playerid] < 999)
		{
		  GetChased[GoChase[playerid]] = INVALID_PLAYER_ID;
		  GotHit[GoChase[playerid]] = INVALID_PLAYER_ID;
		}
		if(HireCar[playerid] != 299)
		{
			vehicle_unlock_doors(HireCar[playerid]);
		}
		if (gLastCar[playerid] > 0)
		{
			if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
			{
				vehicle_unlock_doors(gLastCar[playerid]);
			}
		}
		if(PlayerBoxing[playerid] > 0)
		{
			if(Boxer1 == playerid)
			{
				if(IsPlayerConnected(Boxer2))
				{
					if(IsPlayerInRangeOfPoint(PlayerBoxing[Boxer2], 20.0, 768.94, -70.87, 1001.56))
					{
						PlayerBoxing[Boxer2] = 0;
						SetPlayerPosEx(Boxer2, 768.48, -73.66, 1000.57);
						SetPlayerInterior(Boxer2, 7);
						GameTextForPlayer(Boxer2, "~r~Match interupted", 5000, 1);
					}
					PlayerBoxing[Boxer2] = 0;
					SetPlayerPosEx(Boxer2, 765.8433,3.2924,1000.7186);
					SetPlayerInterior(Boxer2, 5);
					GameTextForPlayer(Boxer2, "~r~Match interupted", 5000, 1);
				}
			}
			else if(Boxer2 == playerid)
			{
				if(IsPlayerConnected(Boxer1))
				{
					if(IsPlayerInRangeOfPoint(PlayerBoxing[Boxer1],20.0,764.35, -66.48, 1001.56))
					{
						PlayerBoxing[Boxer1] = 0;
						SetPlayerPosEx(Boxer1, 768.48, -73.66, 1000.57);
						SetPlayerInterior(Boxer1, 7);
						GameTextForPlayer(Boxer1, "~r~Match interupted", 5000, 1);
					}
					PlayerBoxing[Boxer1] = 0;
					SetPlayerPosEx(Boxer1, 765.8433,3.2924,1000.7186);
					SetPlayerInterior(Boxer1, 5);
					GameTextForPlayer(Boxer1, "~r~Match interupted", 5000, 1);
				}
			}
			InRing = 0;
			RoundStarted = 0;
			Boxer1 = INVALID_PLAYER_ID;
			Boxer2 = INVALID_PLAYER_ID;
			TBoxer = INVALID_PLAYER_ID;
		}
		if(GetPVarInt(playerid, "AdvisorDuty") == 1)
		{
			Advisors--;
		}
		if(TransportDuty[playerid] == 1)
		{
			TaxiDrivers -= 1;
		}
		else if(TransportDuty[playerid] == 2)
		{
			BusDrivers -= 1;
		}
		if(PlayerInfo[playerid][pJob] == 11 || PlayerInfo[playerid][pJob2] == 11)
		{
			if(JobDuty[playerid] == 1) { Medics -= 1; }
		}
		if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
		{
			if(JobDuty[playerid] == 1) { Mechanics -= 1; }
		}
		if(PlayerInfo[playerid][pJob] == 11 || PlayerInfo[playerid][pJob2] == 11)
		{
			if(JobDuty[playerid] == 1) { Coastguard -= 1; }
		}
	}
	gPlayerLogged{playerid} = 0;
	return 1;
}

stock HospitalSpawn(playerid)
{
	if(GetPVarInt(playerid, "MedicBill") == 1 && PlayerInfo[playerid][pJailTime] == 0)
	{
		switch(PlayerInfo[playerid][pHospital]) {
			case 1:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -1500);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $1,500. Have a nice day!");
				SetPlayerPosEx(playerid, 1175.0586,-1324.2463,14.5938);
				SetPlayerFacingAngle(playerid, 268.9748);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 2:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -1500);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $1,500. Have a nice day!");
				SetPlayerPosEx(playerid, 2034.2269,-1404.3459,17.2617);
				SetPlayerFacingAngle(playerid, 179.4258);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 3:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -500);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $500. Have a nice day!");
				SetPlayerPosEx(playerid, 1241.4888,325.9947,19.7555);
				SetPlayerFacingAngle(playerid, 345.0);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 4:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -250);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $250. Have a nice day!");
				SetPlayerPosEx(playerid, -320.3253, 1049.2809, 20.3403);
				SetPlayerFacingAngle(playerid, 179.4258);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 5:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -250);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $250. Have a nice day!");
				SetPlayerPosEx(playerid, -2656.9661,623.1429,14.4531);
				SetPlayerFacingAngle(playerid, 180);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 6: {
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -1500);
				SetPlayerPosEx(playerid, 1175.0586,-1324.2463,14.5938);
				SetPlayerFacingAngle(playerid, 268.9748);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 7:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -250);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $250. Have a nice day!");
				SetPlayerPosEx(playerid, 2785.553955, 2394.641845, 1240.531127);
				SetPlayerFacingAngle(playerid, 266.41);
				SetPlayerInterior(playerid, 1);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 8:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -250);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $250. Have a nice day!");
				SendClientMessageEx(playerid, COLOR_YELLOW, "Platinum VIP: You have spawned at your home.");

				for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if(PlayerInfo[playerid][pPhousekey] == i || PlayerInfo[playerid][pPhousekey2] == i)
					{
						Streamer_UpdateEx(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
						SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
						SetPlayerPosEx(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
						PlayerInfo[playerid][pVW] = i+6000;
						SetPlayerVirtualWorld(playerid, i+6000);
						if(HouseInfo[i][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ], FREEZE_TIME);
						break;
					}
				}

				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 9:
			{
				if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11)
				{
					PlayerInfo[playerid][pInsurance] = 0;
					HospitalSpawn(playerid);
				}
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "DOC: Have a nice day.");
				new Float:X, Float:Y, Float:Z;
				GetDynamicObjectPos(Carrier[0], X, Y, Z);
				SetPlayerPosEx(playerid, (X-0.377671),(Y-10.917018),11.6986);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 10:
			{
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				DeletePVar(playerid, "MedicBill");
				GivePlayerCash(playerid, -250);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Your hospital bill comes to $250. Have a nice day!");
				SetPlayerPosEx(playerid, -1514.809204, 2526.305175, 55.759651);
				SetPlayerFacingAngle(playerid, 357.79);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
			case 11:
			{
				if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11)
				{
					PlayerInfo[playerid][pInsurance] = 0;
				}
				SetPlayerArmour(playerid, PlayerInfo[playerid][pSHealth]);
				SetPlayerHealth(playerid, 50.0);
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "DOC: Your Medical Bill is free of charge. Have a nice day!");
				SetPlayerPosEx(playerid, -1514.809204, 2526.305175, 55.759651);
				SetPlayerFacingAngle(playerid, 0);
				SetPlayerPosEx(playerid, 227.5432,1974.9200,18.2465);
				PlayerInfo[playerid][pHospital] = 0;
				SetCameraBehindPlayer(playerid);
				TogglePlayerControllable(playerid, 1);
				//DeathDrop(playerid);
			}
		}
		if(!PlayerInfo[playerid][pInsurance]) {
			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "You have been charged extra money for not being insured!");
			GameTextForPlayer( playerid, "~w~You are presently uninsured, ~n~buy insurance!", 5000, 6 );
		}
		PlayerInfo[playerid][pHydration] = 100;
	}

}

stock SetPlayerSpawn(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		if(GetPVarType(playerid, "AmazinglyDied"))
		{
	    	if(PlayerInfo[playerid][pAdminDuty] == 1)
			{
		        DeletePVar(playerid, "AmazinglyDied");
		        //GetPlayerPos(playerid, AmazingDeath[playerid][0],AmazingDeath[playerid][1],AmazingDeath[playerid][2]);
		        AmazingDeathInt[playerid] = GetPlayerInterior(playerid);
		        SetPlayerHealth(playerid, 100);
				SetPlayerPosEx(playerid, AmazingDeath[playerid][0],AmazingDeath[playerid][1],AmazingDeath[playerid][2]);
				SetPlayerInterior(playerid,AmazingDeathInt[playerid]);
				PlayerInfo[playerid][pInt] = AmazingDeathInt[playerid];
				//SendClientMessageEx(playerid,COLOR_RED, "Awesome Admin: You can't die - God :D");
			}
			return 1;
  		}
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SpawnPaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
			return 1;
		}
		if(GetPVarType(playerid, "SpecOff"))
		{
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "SpecPosX"), GetPVarFloat(playerid, "SpecPosY"), GetPVarFloat(playerid, "SpecPosZ"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "SpecInt"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "SpecVW"));
			DeletePVar(playerid, "SpecOff");
			if(GetPVarType(playerid, "pGodMode"))
	    	{
	        	SetPlayerHealth(playerid, 9999.9);
		    	SetPlayerArmour(playerid, 9999.9);
			}
			return 1;
		}
		if(PlayerInfo[playerid][pTut] == 0)
		{
			gOoc[playerid] = 1; gNews[playerid] = 1; gFam[playerid] = 1;
			TogglePlayerControllable(playerid,0);
			SetPlayerColor(playerid,TEAM_HIT_COLOR);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 2229.4968,-1722.0701,13.5625);
			SetPlayerPosEx(playerid, 2229.4968,-1722.0701,-10.0);
			SetPlayerCameraPos(playerid, 2211.1460,-1748.3909,29.3744);
			SetPlayerCameraLookAt(playerid, 2229.4968,-1722.0701,13.5625);

   			RegistrationStep[playerid] = 1;
   			ShowPlayerDialog(playerid, REGISTERSEX, DIALOG_STYLE_LIST, "{FF0000}Is your character male or female?", "Male\nFemale", "Submit", "");
			return 1;
		}
		new rand;
		if(PlayerInfo[playerid][pBeingSentenced] > 0)
		{
		    PhoneOnline[playerid] = 1;
		    rand = random(sizeof(WarrantJail));
			SetPlayerPosEx(playerid, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
			if(rand != 0) courtjail[playerid] = 2;
			else courtjail[playerid] = 1;
			Player_StreamPrep(playerid, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2], FREEZE_TIME);
			PlayerInfo[playerid][pInt] = 0;
			DeletePVar(playerid, "Injured");
			return 1;
		}
		if(PlayerInfo[playerid][pJailTime] > 0)
		{
		    if(strfindex(PlayerInfo[playerid][pPrisonReason], "[IC]", true) != -1)
		    {
                PhoneOnline[playerid] = 1;
				SetPlayerInterior(playerid, 10);
				PlayerInfo[playerid][pInt] = 0;
				rand = random(sizeof(DocPrison));
    			SetPlayerPosEx(playerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
				SetPlayerSkin(playerid, 50);
				SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
				DeletePVar(playerid, "Injured");
				Player_StreamPrep(playerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
				return 1;
		    }
		    else if(strfindex(PlayerInfo[playerid][pPrisonReason], "[ISOLATE]", true) != -1)
		    {
		        PhoneOnline[playerid] = 1;
				SetPlayerInterior(playerid, 10);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerPosEx(playerid, -2095.3391, -215.8563, 978.8315);
				SetPlayerSkin(playerid, 50);
				SetPlayerColor(playerid, TEAM_ORANGE_COLOR);
				DeletePVar(playerid, "Injured");
				Player_StreamPrep(playerid, -2095.3391, -215.8563, 978.8315, FREEZE_TIME);
				return 1;
		    }
		    else
		    {
		       	PhoneOnline[playerid] = 1;
				SetPlayerInterior(playerid, 1);
				PlayerInfo[playerid][pInt] = 1;
				rand = random(sizeof(OOCPrisonSpawns));
				SetPlayerPosEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
				SetPlayerSkin(playerid, 50);
				SetPlayerColor(playerid, TEAM_APRISON_COLOR);
				new string[128];
				format(string, sizeof(string), "You are in prison, reason: %s", PlayerInfo[playerid][pPrisonReason]);
				SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				ResetPlayerWeaponsEx(playerid);
				DeletePVar(playerid, "Injured");
				Player_StreamPrep(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
				return 1;
		    }
		}
		if(GetPVarInt(playerid, "Injured") == 1)
		{
		    SendEMSQueue(playerid,1);
		    return 1;
		}
		if(GetPVarInt(playerid, "EventToken") == 1)
		{
            if(EventKernel[EventType] == 4)
			{
			   	SetPlayerPosEx(playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
				SetPlayerInterior(playerid, EventKernel[ EventInterior ] );
				SetPlayerVirtualWorld(playerid, EventKernel[ EventWorld ] );
				SendClientMessageEx(playerid, COLOR_WHITE, "You are a zombie! Use /bite to infect others");
				SetPlayerHealth(playerid, 30);
				SetPlayerArmour(playerid, 0);
				SetPlayerSkin(playerid, 134);
				SetPlayerColor(playerid, 0x0BC43600);
				SetPVarInt(playerid, "pEventZombie", 1);
				return 1;
			}
			else
			{
			    DeletePVar(playerid, "EventToken");
			    SetPlayerWeapons(playerid);
			    SetPlayerPosEx(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
				//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
				SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
				SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
				SetPlayerInterior(playerid,EventLastInt[playerid]);
				SetPlayerHealth(playerid, EventFloats[playerid][4]);
				SetPlayerArmour(playerid, EventFloats[playerid][5]);
				Player_LeaveEventPrep(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
				for(new i = 0; i < 6; i++)
				{
				    EventFloats[playerid][i] = 0.0;
				}
				EventLastVW[playerid] = 0;
				EventLastInt[playerid] = 0;
				return 1;
			}
		}
		for(new i; i < sizeof(EventKernel[EventStaff]); i++)
		{
		    if(EventKernel[EventStaff][i] == playerid)
		    {
		        SetPlayerWeapons(playerid);
			    SetPlayerPosEx(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
				//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
				SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
				SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
				SetPlayerInterior(playerid,EventLastInt[playerid]);
				SetPlayerHealth(playerid, EventFloats[playerid][4]);
				SetPlayerArmour(playerid, EventFloats[playerid][5]);
				Player_LeaveEventPrep(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
				for(new d = 0; d < 6; d++)
				{
				    EventFloats[playerid][d] = 0.0;
				}
				EventLastInt[playerid] = 0;
				EventLastVW[playerid] = 0;
				EventKernel[EventStaff][i] = INVALID_PLAYER_ID;
		    }
		}
		if(GetPVarInt(playerid, "MedicBill") == 1 && PlayerInfo[playerid][pJailTime] == 0)
		{
			SendClientMessageEx( playerid, TEAM_CYAN_COLOR, "Before you are discharged, hospital staff will confiscate your weapons." );
			PlayerInfo[playerid][pDuty] = 0;
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			ResetPlayerWeapons(playerid);

			if( GetPVarInt( playerid, "EventToken" ) == 1 )
			{
				//SendClientMessageEx( playerid, COLOR_WHITE, "As you've just come from an event, your weapons have been refunded." );
			}
			else
			{
				ResetPlayerWeaponsEx(playerid);
			}

			SetPVarInt(playerid, "MedicBill", 1);
			SetPlayerInterior(playerid, 0);
			new string[70+MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pWantedLevel] > 1 && PlayerInfo[playerid][pInsurance] > 5)
			{
				new randhos = Random(1, 6);
				switch (randhos)
   				{
    				case 1:
  	    			{
						SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
						format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
						SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
						SetPlayerPosEx(playerid, 1999.5308,-1449.3281,10.5594);
						PlayerInfo[playerid][pHospital] = 2;
					}
					case 2:
					{
						SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
						format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
						SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
						SetPlayerPosEx(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
						PlayerInfo[playerid][pHospital] = 1;
					}
					case 3:
					{
						SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
						format(string, sizeof(string), " Red County Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SetPlayerCameraPos(playerid,1248.4147,338.8385,19.4063+6.0);
						SetPlayerCameraLookAt(playerid,1241.4449,326.3389,19.7555);
						SetPlayerPosEx(playerid, 1248.4147,338.8385,19.4063);
						PlayerInfo[playerid][pHospital] = 3;
					}
					case 4:
					{
						SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
						format(string, sizeof(string), " Fort Carson Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SetPlayerCameraPos(playerid,-314.0242,1060.7919,19.5938+6.0);
						SetPlayerCameraLookAt(playerid,-320.0992,1049.0341,20.3403);
						SetPlayerPosEx(playerid, -314.0242,1060.7919,19.5938);
						PlayerInfo[playerid][pHospital] = 4;
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
						format(string, sizeof(string), " San Fierro Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
						SetPlayerCameraPos(playerid,-2571.2766,558.7813,68.1754);
						SetPlayerCameraLookAt(playerid,-2619.2883,596.2850,49.0966);
						SetPlayerPosEx(playerid, -2653.6685,626.6485,4.8930);
						PlayerInfo[playerid][pHospital] = 5;
					}
				}
				SendRadioMessage(1, DEPTRADIO, string);
				SendRadioMessage(2, DEPTRADIO, string);
				SendRadioMessage(3, DEPTRADIO, string);
				SendRadioMessage(5, DEPTRADIO, string);
				SendRadioMessage(7, DEPTRADIO, string);
				SendRadioMessage(11, DEPTRADIO, string);
				SendRadioMessage(13, DEPTRADIO, string);
				SendRadioMessage(16, DEPTRADIO, string);
			}
			else if(PlayerInfo[playerid][pInsurance] == 1)
			{
				SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
				SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
				SetPlayerPosEx(playerid, 1999.5308,-1449.3281,10.5594);
				PlayerInfo[playerid][pHospital] = 2;
			}
			else if(PlayerInfo[playerid][pInsurance] == 2)
			{
				SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
				SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
				SetPlayerPosEx(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
				PlayerInfo[playerid][pHospital] = 1;
			}
			else if(PlayerInfo[playerid][pInsurance] == 3)
			{
				SetPlayerCameraPos(playerid,1248.4147,338.8385,19.4063+6.0);
				SetPlayerCameraLookAt(playerid,1241.4449,326.3389,19.7555);
				SetPlayerPosEx(playerid, 1248.4147,338.8385,19.4063);
				PlayerInfo[playerid][pHospital] = 3;
			}
   			else if(PlayerInfo[playerid][pInsurance] == 4)
			{
				SetPlayerCameraPos(playerid,-314.0242,1060.7919,19.5938+6.0);
				SetPlayerCameraLookAt(playerid,-320.0992,1049.0341,20.3403);
				SetPlayerPosEx(playerid, -314.0242,1060.7919,19.5938);
				PlayerInfo[playerid][pHospital] = 4;
			}
			else if(PlayerInfo[playerid][pInsurance] == 5)
			{
				SetPlayerCameraPos(playerid,-2571.2766,558.7813,68.1754);
				SetPlayerCameraLookAt(playerid,-2619.2883,596.2850,49.0966);
				SetPlayerPosEx(playerid, -2653.6685,626.6485,4.8930);
				PlayerInfo[playerid][pHospital] = 5;
			}
			else if(PlayerInfo[playerid][pInsurance] == 6)
			{
				SetPlayerCameraPos(playerid,2787.102050, 2392.162841, 1243.898681);
				SetPlayerCameraLookAt(playerid,2801.281982, 2404.575683, 1240.531127);
				SetPlayerPosEx(playerid, 2788.561523, 2387.321044, 1227.350219);
				PlayerInfo[playerid][pHospital] = 7;
			}
			else if(PlayerInfo[playerid][pInsurance] == 7)
			{
				SetPlayerCameraPos(playerid,2787.102050, 2392.162841, 1243.898681);
				SetPlayerCameraLookAt(playerid,2801.281982, 2404.575683, 1240.531127);
				SetPlayerPosEx(playerid, 2788.561523, 2387.321044, 1227.350219);
				PlayerInfo[playerid][pHospital] = 8;
			}
			else if(PlayerInfo[playerid][pInsurance] == 8)
			{
			    if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11)
			    {
			        PlayerInfo[playerid][pInsurance] = 0;
			        SetPlayerSpawn(playerid);
				}
			    new Float:X, Float:Y, Float:Z;
				GetDynamicObjectPos(Carrier[0], X, Y, Z);
				SetPlayerCameraPos(playerid,(X-100),(Y-100),30);
				SetPlayerCameraLookAt(playerid,X, Y, Z);
				SetPlayerPosEx(playerid, (X-0.377671),(Y-10.917018),0);
				PlayerInfo[playerid][pHospital] = 9;
			}
			else if(PlayerInfo[playerid][pInsurance] == 9)
			{
				SetPlayerCameraPos(playerid, -1529.847167, 2539.394042, 62.038913);
				SetPlayerCameraLookAt(playerid, -1514.883300, 2527.161132, 55.743553);
				SetPlayerPosEx(playerid, -1514.809204, 2526.305175, 51.865501);
				PlayerInfo[playerid][pHospital] = 10;
			}
			else if(PlayerInfo[playerid][pInsurance] == 10)
			{
				if(PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11)
			    {
			        PlayerInfo[playerid][pInsurance] = 0;
			        SetPlayerSpawn(playerid);
				}
				SetPlayerPosEx(playerid, 272.3733,2043.6031,-100.0);
				SetPlayerCameraPos(playerid, 150.1812,2000.4531,51.3394);
				SetPlayerCameraLookAt(playerid, 150.1812,2000.4531,51.3394);
				TogglePlayerControllable(playerid, 0);
				PlayerInfo[playerid][pHospital] = 11;
			}
   			if(PlayerInfo[playerid][pInsurance] == 0)
			{
				new randhos = Random(1,3);
 				switch (randhos)
   				{
    				case 1:
  	    			{
    					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    		format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    		SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
							SendRadioMessage(3, DEPTRADIO, string);
							SendRadioMessage(5, DEPTRADIO, string);
							SendRadioMessage(7, DEPTRADIO, string);
							SendRadioMessage(11, DEPTRADIO, string);
							SendRadioMessage(13, DEPTRADIO, string);
							SendRadioMessage(16, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
						SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
						SetPlayerPosEx(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
						PlayerInfo[playerid][pHospital] = 6;
  	    			}
    	    		case 2:
	    	    	{
    			    	if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    		format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    		SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
							SendRadioMessage(3, DEPTRADIO, string);
							SendRadioMessage(5, DEPTRADIO, string);
							SendRadioMessage(7, DEPTRADIO, string);
							SendRadioMessage(11, DEPTRADIO, string);
							SendRadioMessage(13, DEPTRADIO, string);
							SendRadioMessage(16, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
						SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
						SetPlayerPosEx(playerid, 1999.5308,-1449.3281,10.5594);
						PlayerInfo[playerid][pHospital] = 2;
   					}
   				}
			}
			TogglePlayerControllable(playerid, 0);
			SetPlayerHealth(playerid, 0.5);
			SetPVarInt(playerid, "HospitalTimer", 30);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
			return 1;
		}
		if(PlayerInfo[playerid][pHospital] == 0)
		{
			SetPlayerPosEx(playerid,PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pPos_z]);
			//PlayerInfo[playerid][pInterior] = PlayerInfo[playerid][pInt];
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pVW]);
			SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
			SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
			if(PlayerInfo[playerid][pHealth] < 1) PlayerInfo[playerid][pHealth] = 100;
			SetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
			SetCameraBehindPlayer(playerid);
			if(PlayerInfo[playerid][pInt] > 0) Player_StreamPrep(playerid, PlayerInfo[playerid][pPos_x],PlayerInfo[playerid][pPos_y],PlayerInfo[playerid][pPos_z], FREEZE_TIME);
		}
		else
		{
		    PlayerInfo[playerid][pDuty] = 0;
			PlayerInfo[playerid][pVW] = 0;
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			if( GetPVarInt( playerid, "EventToken" ) == 1 )
			{
				//SendClientMessageEx( playerid, COLOR_WHITE, "As you've just come from an event, your weapons have been refunded." );
			}
			else
			{
				ResetPlayerWeaponsEx(playerid);
			}

			SetPVarInt(playerid, "MedicBill", 1);
			new string[70+MAX_PLAYER_NAME];
			if(PlayerInfo[playerid][pInsurance] == 1)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
				    format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
					SendRadioMessage(3, DEPTRADIO, string);
					SendRadioMessage(5, DEPTRADIO, string);
					SendRadioMessage(7, DEPTRADIO, string);
					SendRadioMessage(11, DEPTRADIO, string);
					SendRadioMessage(13, DEPTRADIO, string);
					SendRadioMessage(16, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
				SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
				SetPlayerPosEx(playerid, 1999.5308,-1449.3281,10.5594);
				PlayerInfo[playerid][pHospital] = 2;
			}
			else if(PlayerInfo[playerid][pInsurance] == 2)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
				    format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
					SendRadioMessage(3, DEPTRADIO, string);
					SendRadioMessage(5, DEPTRADIO, string);
					SendRadioMessage(7, DEPTRADIO, string);
					SendRadioMessage(11, DEPTRADIO, string);
					SendRadioMessage(13, DEPTRADIO, string);
					SendRadioMessage(16, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
				SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
				SetPlayerPosEx(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
				PlayerInfo[playerid][pHospital] = 1;
			}
			else if(PlayerInfo[playerid][pInsurance] == 3)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
				    format(string, sizeof(string), " Red County Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
					SendRadioMessage(3, DEPTRADIO, string);
					SendRadioMessage(5, DEPTRADIO, string);
					SendRadioMessage(7, DEPTRADIO, string);
					SendRadioMessage(11, DEPTRADIO, string);
					SendRadioMessage(13, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,1248.4147,338.8385,19.4063+6.0);
				SetPlayerCameraLookAt(playerid,1241.4449,326.3389,19.7555);
				SetPlayerPosEx(playerid, 1248.4147,338.8385,19.4063);
				PlayerInfo[playerid][pHospital] = 3;
			}
   			else if(PlayerInfo[playerid][pInsurance] == 4)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, "The police have been informed of your current location and are on their way.");
				    format(string, sizeof(string), " Fort Carson Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
					SendRadioMessage(3, DEPTRADIO, string);
					SendRadioMessage(5, DEPTRADIO, string);
					SendRadioMessage(7, DEPTRADIO, string);
					SendRadioMessage(11, DEPTRADIO, string);
					SendRadioMessage(13, DEPTRADIO, string);
					SendRadioMessage(16, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,-314.0242,1060.7919,19.5938+6.0);
				SetPlayerCameraLookAt(playerid,-320.0992,1049.0341,20.3403);
				SetPlayerPosEx(playerid, -314.0242,1060.7919,19.5938);
				PlayerInfo[playerid][pHospital] = 4;
			}
			else if(PlayerInfo[playerid][pInsurance] == 5)
			{
			    if(PlayerInfo[playerid][pWantedLevel] >= 1)
				{
				    SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    format(string, sizeof(string), " San Fierro Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    SendRadioMessage(1, DEPTRADIO, string);
					SendRadioMessage(2, DEPTRADIO, string);
					SendRadioMessage(3, DEPTRADIO, string);
					SendRadioMessage(5, DEPTRADIO, string);
					SendRadioMessage(7, DEPTRADIO, string);
					SendRadioMessage(11, DEPTRADIO, string);
					SendRadioMessage(13, DEPTRADIO, string);
					SendRadioMessage(16, DEPTRADIO, string);
				}
				SetPlayerCameraPos(playerid,-2571.2766,558.7813,68.1754);
				SetPlayerCameraLookAt(playerid,-2619.2883,596.2850,49.0966);
				SetPlayerPosEx(playerid, -2653.6685,626.6485,4.8930);
				PlayerInfo[playerid][pHospital] = 5;
			}
			else if(PlayerInfo[playerid][pInsurance] == 6)
			{
				SetPlayerCameraPos(playerid,2787.102050, 2392.162841, 1243.898681);
				SetPlayerCameraLookAt(playerid,2801.281982, 2404.575683, 1240.531127);
				SetPlayerPosEx(playerid, 2788.561523, 2387.321044, 1227.350219);
				PlayerInfo[playerid][pHospital] = 7;
			}
			else if(PlayerInfo[playerid][pInsurance] == 7)
			{
				SetPlayerCameraPos(playerid,2787.102050, 2392.162841, 1243.898681);
				SetPlayerCameraLookAt(playerid,2801.281982, 2404.575683, 1240.531127);
				SetPlayerPosEx(playerid, 2788.561523, 2387.321044, 1227.350219);
				PlayerInfo[playerid][pHospital] = 8;
			}
			else if(PlayerInfo[playerid][pInsurance] == 8)
			{
			    new Float:X, Float:Y, Float:Z;
				GetDynamicObjectPos(Carrier[0], X, Y, Z);
				SetPlayerCameraPos(playerid,(X-100),(Y-100),30);
				SetPlayerCameraLookAt(playerid,X, Y, Z);
				SetPlayerPosEx(playerid, (X-0.377671),(Y-10.917018),0);
				PlayerInfo[playerid][pHospital] = 9;
			}
			else if(PlayerInfo[playerid][pInsurance] == 9)
			{
				SetPlayerCameraPos(playerid, -1529.847167, 2539.394042, 62.038913);
				SetPlayerCameraLookAt(playerid, -1514.883300, 2527.161132, 55.743553);
				SetPlayerPosEx(playerid, -1514.809204, 2526.305175, 51.865501);
				PlayerInfo[playerid][pHospital] = 10;
			}
   			if(PlayerInfo[playerid][pInsurance] == 0)
			{
				new randhos = Random(1,3);
 				switch(randhos)
   				{
    				case 1:
  	    			{
    					if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    		format(string, sizeof(string), " All Saints Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    		SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
							SendRadioMessage(3, DEPTRADIO, string);
							SendRadioMessage(5, DEPTRADIO, string);
							SendRadioMessage(7, DEPTRADIO, string);
							SendRadioMessage(11, DEPTRADIO, string);
							SendRadioMessage(13, DEPTRADIO, string);
							SendRadioMessage(16, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
						SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
						SetPlayerPosEx(playerid, 1188.4574,-1309.2242,10.5625); // Warp the player
						PlayerInfo[playerid][pHospital] = 6;
  	    			}
    	    		case 2:
	    	    	{
    			    	if(PlayerInfo[playerid][pWantedLevel] >= 1)
						{
				    		SendClientMessageEx(playerid, COLOR_YELLOW, " The police has been warned that you are wanted and they are on their way.");
				    		format(string, sizeof(string), " County General Hospital has reported %s as a wanted person.", GetPlayerNameEx(playerid));
				    		SendRadioMessage(1, DEPTRADIO, string);
							SendRadioMessage(2, DEPTRADIO, string);
							SendRadioMessage(3, DEPTRADIO, string);
							SendRadioMessage(5, DEPTRADIO, string);
							SendRadioMessage(7, DEPTRADIO, string);
							SendRadioMessage(11, DEPTRADIO, string);
							SendRadioMessage(13, DEPTRADIO, string);
							SendRadioMessage(16, DEPTRADIO, string);
						}

						SetPlayerCameraPos(playerid,1999.5308,-1449.3281,13.5594+6.0);
						SetPlayerCameraLookAt(playerid,2036.2179,-1410.3223,17.1641);
						SetPlayerPosEx(playerid, 1999.5308,-1449.3281,10.5594);
						PlayerInfo[playerid][pHospital] = 2;
   					}
   				}
			}
			TogglePlayerControllable(playerid, 0);
			SetPlayerHealth(playerid, 0.5);
			SetPVarInt(playerid, "HospitalTimer", 30);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
		}
		new Float: x, Float: y, Float: z;
		GetPlayerPos(playerid, x, y, z);
		if(x == 0.0 && y == 0.0)
		{
  			SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid, 1715.1201,-1903.1711,13.5665);
			SetPlayerFacingAngle(playerid, 359.4621);
			SetCameraBehindPlayer(playerid);
		}
		SetPlayerToTeamColor(playerid);
		return 1;
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(PlayerInfo[playerid][pAdminDuty] == 1)
	{
        SetPVarInt(playerid, "AmazinglyDied", 1);
        GetPlayerPos(playerid, AmazingDeath[playerid][0],AmazingDeath[playerid][1],AmazingDeath[playerid][2]);
        AmazingDeathInt[playerid] = GetPlayerInterior(playerid);
        SpawnPlayer(playerid);
        SetPlayerHealth(playerid, 100);
		SetPlayerPos(playerid, AmazingDeath[playerid][0],AmazingDeath[playerid][1],AmazingDeath[playerid][2]);
		SetPlayerInterior(playerid,AmazingDeathInt[playerid]);
		PlayerInfo[playerid][pInt] = AmazingDeathInt[playerid];
		//SendClientMessageEx(playerid,COLOR_RED, "Awesome Admin: You can't die - God :D");
		return 1;
	}
    if(IsPlayerNPC(playerid)) return 1;
	if(IsPlayerConnected(killerid))
	{
		new weaponname[32];
		GetWeaponName(reason, weaponname, sizeof(weaponname));

		PlayerInfo[playerid][pKillLog9][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog9], PlayerInfo[playerid][pKillLog8], 128);

		PlayerInfo[playerid][pKillLog8][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog8], PlayerInfo[playerid][pKillLog7], 128);

		PlayerInfo[playerid][pKillLog7][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog7], PlayerInfo[playerid][pKillLog6], 128);

		PlayerInfo[playerid][pKillLog6][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog6], PlayerInfo[playerid][pKillLog5], 128);

		PlayerInfo[playerid][pKillLog5][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog5], PlayerInfo[playerid][pKillLog4], 128);

		PlayerInfo[playerid][pKillLog4][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog4], PlayerInfo[playerid][pKillLog3], 128);

		PlayerInfo[playerid][pKillLog3][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog3], PlayerInfo[playerid][pKillLog2], 128);

		PlayerInfo[playerid][pKillLog2][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog2], PlayerInfo[playerid][pKillLog1], 128);

		PlayerInfo[playerid][pKillLog1][0] = 0;
		strcat(PlayerInfo[playerid][pKillLog1], PlayerInfo[playerid][pKillLog0], 128);

	 	format(PlayerInfo[playerid][pKillLog0], 128, "(%d:%d:%d) %s killed me with %s", hour,minuite,second,GetPlayerNameEx(killerid), weaponname);

		PlayerInfo[killerid][pKillLog9][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog9], PlayerInfo[killerid][pKillLog8], 128);

		PlayerInfo[killerid][pKillLog8][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog8], PlayerInfo[killerid][pKillLog7], 128);

		PlayerInfo[killerid][pKillLog7][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog7], PlayerInfo[killerid][pKillLog6], 128);

		PlayerInfo[killerid][pKillLog6][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog6], PlayerInfo[killerid][pKillLog5], 128);

		PlayerInfo[killerid][pKillLog5][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog5], PlayerInfo[killerid][pKillLog4], 128);

		PlayerInfo[killerid][pKillLog4][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog4], PlayerInfo[killerid][pKillLog3], 128);

		PlayerInfo[killerid][pKillLog3][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog3], PlayerInfo[killerid][pKillLog2], 128);

		PlayerInfo[killerid][pKillLog2][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog2], PlayerInfo[killerid][pKillLog1], 128);

		PlayerInfo[killerid][pKillLog1][0] = 0;
		strcat(PlayerInfo[killerid][pKillLog1], PlayerInfo[killerid][pKillLog0], 128);

	 	format(PlayerInfo[killerid][pKillLog0], 128, "(%d:%d:%d) Killed %s with %s", hour,minuite,second,GetPlayerNameEx(playerid), weaponname);

	 	if(GetPVarInt(killerid, "IsInArena") >= 0) PlayerInfo[killerid][pDMKills]++;
	}

    TextDrawHideForPlayer(playerid, BFText);
    DeletePVar(playerid, "BlindFolded");

	pTazer{playerid} = 0;
	InsidePlane[playerid] = INVALID_VEHICLE_ID;
	DeletePVar(playerid, "SpeedRadar");
    DeletePVar(playerid, "UsingSprunk");
    KillTimer(GetPVarInt(playerid, "firstaid5"));
  	DeletePVar(playerid, "usingfirstaid");
	if(GetPVarInt(playerid, "MovingStretcher") != -1)
	{
	    KillTimer(GetPVarInt(playerid, "TickEMSMove"));
	    DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	    SetPVarInt(playerid, "MovingStretcher", -1);
	}

	if(IsPlayerConnected(Mobile[playerid]))
	{
		new
			iCaller = Mobile[playerid],
			szMessage[64];

		SendClientMessageEx(iCaller, COLOR_GRAD2, "The line went dead.");
		format(szMessage, sizeof(szMessage), "* %s (%d) puts away their cellphone.", GetPlayerNameEx(iCaller),iCaller);
		ProxDetector(30.0, iCaller, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		CellTime[iCaller] = 0;
		Mobile[iCaller] = INVALID_PLAYER_ID;
	}
	Mobile[playerid] = INVALID_PLAYER_ID;
	CellTime[playerid] = 0;
	RingTone[playerid] = 0;

	if(GetPVarType(playerid, "SpecOff"))
	{
		SpawnPlayer(playerid);
		return 1;
	}

	if(GetPVarInt(playerid, "Injured") == 1)
	{
		foreach(new i: Player)
		{
			if(EMSAccepted[i] == playerid)
			{
				EMSAccepted[i] = INVALID_PLAYER_ID;
				GameTextForPlayer(i, "~w~EMS Caller~n~~r~Has Died", 5000, 1);
				EMSCallTime[i] = 0;
				DisablePlayerCheckpoint(i);
			}
		}
     	SendClientMessageEx(playerid, COLOR_WHITE, "You appear to be stuck in limbo, medics are trying to revive you.");
	    KillEMSQueue(playerid);
	    ResetPlayerWeaponsEx(playerid);
	    return 1;
	}

	if(GetPVarInt(playerid, "EventToken") == 0 && GetPVarInt(playerid, "AmazinglyDied") == 0)
	{
	    if(GetPVarInt(playerid, "IsInArena") == -1)
		{
			SetPVarInt(playerid, "Injured", 1);

			new Float:mX, Float:mY, Float:mZ;
			GetPlayerPos(playerid, mX, mY, mZ);

			SetPVarFloat(playerid, "MedicX", mX);
			SetPVarFloat(playerid, "MedicY", mY);
			SetPVarFloat(playerid, "MedicZ", mZ);
			SetPVarInt(playerid, "MedicVW", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "MedicInt", GetPlayerInterior(playerid));
		}
	}

	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		new
			iPlayer = GetPVarInt(playerid, "IsInArena"),
			iKiller = GetPVarInt(killerid, "IsInArena"),
			szMessage[96];

	    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
	    {
     		switch(PlayerInfo[playerid][pPaintTeam])
       		{
         		case 1:
           		{
					DropFlagPaintballArena(playerid, iPlayer, 2);
     			}
        		case 2:
          		{
            		DropFlagPaintballArena(playerid, iPlayer, 1);
            	}
        	}
	    }
		if(reason >= 0 && reason <= 46)
		{
		    new weapon[24];
			++PlayerInfo[killerid][pKills];
		    ++PlayerInfo[playerid][pDeaths];
			if(PlayerInfo[killerid][pPaintTeam] == 1)
			{
			    if(PlayerInfo[killerid][pPaintTeam] == PlayerInfo[playerid][pPaintTeam])
			    {
			        --PaintBallArena[iKiller][pbTeamRedKills];
			        ++PaintBallArena[iPlayer][pbTeamBlueKills];
			        SetPlayerHealth(killerid, 0);
			        PlayerInfo[killerid][pKills] -= 2;
			        ++PlayerInfo[killerid][pDeaths];
		    		--PlayerInfo[playerid][pDeaths];
			        SendClientMessageEx(killerid, COLOR_WHITE, "You have been warned, do not team-kill!");
			    }
			    else
			    {
		    		++PaintBallArena[iKiller][pbTeamRedKills];
		    		++PaintBallArena[iPlayer][pbTeamBlueDeaths];
				}
			}
			if(PlayerInfo[killerid][pPaintTeam] == 2)
			{
			    if(PlayerInfo[killerid][pPaintTeam] == PlayerInfo[playerid][pPaintTeam])
			    {
			        --PaintBallArena[iKiller][pbTeamBlueKills];
			        ++PaintBallArena[iPlayer][pbTeamRedKills];
			        SetPlayerHealth(killerid, 0);
			        PlayerInfo[killerid][pKills] -= 2;
			        ++PlayerInfo[killerid][pDeaths];
		    		--PlayerInfo[playerid][pDeaths];
			        SendClientMessageEx(killerid, COLOR_WHITE, "You have been warned, do not team-kill!");
			    }
		    	++PaintBallArena[iKiller][pbTeamBlueKills];
		    	++PaintBallArena[iPlayer][pbTeamRedDeaths];
			}
			GetWeaponName(reason,weapon,sizeof(weapon));
			if(PaintBallArena[iKiller][pbTimeLeft] < 12)
			{
				GivePlayerCash(killerid, 1000);
				format(szMessage,sizeof(szMessage),"[Paintball Arena] %s has earned $1000 bonus for a sudden death kill!",GetPlayerNameEx(killerid));
				SendPaintballArenaMessage(iKiller, COLOR_YELLOW, szMessage);
				////SendAudioToPlayer(killerid, 19, 100);
			}
			if(reason == 0) format(szMessage,sizeof(szMessage),"[Paintball Arena] %s has killed %s with their bare hands!",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid));
			else format(szMessage,sizeof(szMessage),"[Paintball Arena] %s has killed %s with a %s.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid),weapon);
		}
		else
		{
		    ++PlayerInfo[playerid][pDeaths];
			format(szMessage,sizeof(szMessage),"[Paintball Arena] %s has died.",GetPlayerNameEx(playerid));
		}
	    SendPaintballArenaMessage(iPlayer, COLOR_RED, szMessage);
	}

	if(GetPVarInt(playerid, "Injured") == 0)
	{
		if( GetPVarInt(playerid, "EventToken") >= 1 || GetPVarInt(playerid, "IsInArena") >= 0)
		{
			ResetPlayerWeapons(playerid);
		}
		else
		{
			ResetPlayerWeaponsEx(playerid);
		}
	}
	if(IsPlayerConnected(killerid) && PlayerInfo[killerid][pAdmin] < 2 && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
	{
		switch(reason)
		{
			case 49: {
			    new szMessage[128];
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just car-rammed %s (ID %d) to death.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
				ABroadCast(COLOR_YELLOW, szMessage, 2);
			}
			case 50: if(IsAHelicopter(GetPlayerVehicleID(killerid))) {
			    new szMessage[128];
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just blade-killed %s (ID %d).", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
				ABroadCast(COLOR_YELLOW, szMessage, 2);
			}
			default: switch(GetPlayerWeapon(killerid)) {
				case 32, 28, 29: {
				    new szMessage[128];
					format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has possibly just driver-shot %s (ID %d) to death.", GetPlayerNameEx(killerid), killerid, GetPlayerNameEx(playerid), playerid);
					ABroadCast(COLOR_YELLOW, szMessage, 2);
				}
			}
		}
	}

	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}

	if(PlayerInfo[playerid][pHeadValue] >= 1)
	{
		if(IsPlayerConnected(killerid))
		{
			if(GoChase[killerid] == playerid)
			{
				new szMessage[64 + MAX_PLAYER_NAME];
				new takemoney = (PlayerInfo[playerid][pHeadValue] / 4) * 2;
				GivePlayerCash(killerid, takemoney);
				GivePlayerCash(playerid, -takemoney);
				format(szMessage, sizeof(szMessage),"Hitman %s has fulfilled the contract on %s and collected $%d.",GetPlayerNameEx(killerid),GetPlayerNameEx(playerid),takemoney);
				SendFamilyMessage(8, COLOR_YELLOW, szMessage);
				format(szMessage, sizeof(szMessage),"You have been critically injured by a hitman and lost $%d.",takemoney);
   				ResetPlayerWeaponsEx(playerid);
				// SpawnPlayer(playerid);
				SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
				// KillEMSQueue(playerid);
				PlayerInfo[playerid][pHeadValue] = 0;
				PlayerInfo[killerid][pCHits] += 1;
				GotHit[playerid] = 0;
				GetChased[playerid] = INVALID_PLAYER_ID;
				GoChase[killerid] = INVALID_PLAYER_ID;
			}
		}
	}
	if(IsPlayerConnected(killerid))
 	{
		if(GoChase[playerid] == killerid)
		{
			new szMessage[64 + MAX_PLAYER_NAME];
			new takemoney = (PlayerInfo[playerid][pHeadValue] / 4) * 2;
			GivePlayerCash(killerid, takemoney);
			format(szMessage, sizeof(szMessage),"Hitman %s has failed the contract on %s and lost $%d.",GetPlayerNameEx(playerid),GetPlayerNameEx(killerid),takemoney);
			SendFamilyMessage(8, COLOR_YELLOW, szMessage);
			GivePlayerCash(playerid, -takemoney);
		   	format(szMessage, sizeof(szMessage),"You have just killed a hitman and gained $%d, removing the contact on your head.",takemoney);
			SendClientMessageEx(killerid, COLOR_YELLOW, szMessage);
			PlayerInfo[killerid][pHeadValue] = 0;
			PlayerInfo[playerid][pFHits] += 1;
			GotHit[playerid] = 0;
			GetChased[killerid] = INVALID_PLAYER_ID;
			GoChase[playerid] = INVALID_PLAYER_ID;
		}
	}
	SetPlayerColor(playerid,TEAM_HIT_COLOR);
	return 1;
}

public OnVehicleDeath(vehicleid) {
    new Float:X, Float:Y, Float:Z;
    new Float:XB, Float:YB, Float:ZB;
    new Float:vX, Float:vY, Float:vZ;
    VehicleStatus{vehicleid} = 1;
	foreach(new i: Player)
	{
	    if(InsidePlane[i] == vehicleid)
	    {
			GetVehiclePos(InsidePlane[i], X, Y, Z);
			SetPlayerPosEx(i, X-4, Y-2.3, Z);
			GetVehiclePos(InsidePlane[i], XB, YB, ZB);
			if(ZB > 50.0)
			{
				PlayerInfo[i][pAGuns][GetWeaponSlot(46)] = 46;
				GivePlayerValidWeapon(i, 46, 60000);
			}
   			PlayerInfo[i][pVW] = 0;
			SetPlayerVirtualWorld(i, 0);
			PlayerInfo[i][pInt] = 0;
			SetPlayerInterior(i, 0);
			InsidePlane[i] = INVALID_VEHICLE_ID;
			SendClientMessageEx(i, COLOR_WHITE, "The airplane has been damaged, you cannot be inside it!");
	    }
	    if(GetPVarInt(i, "NGPassengerVeh") == vehicleid)
	    {
	        TogglePlayerSpectating(i, 0);
		}
	}
	new string[128];
	GetVehiclePos(vehicleid, vX, vY, vZ);
    GetXYInFrontOfVehicle(vehicleid, vX, vY, 2);
    DestroyObject(CrateVehicleLoad[vehicleid][vForkObject]);
    CrateVehicleLoad[vehicleid][vForkLoaded] = 0;
    for(new i = 0; i < sizeof(CrateInfo); i++)
    {
		if(CrateInfo[i][InVehicle] == vehicleid)
		{
		    CrateInfo[i][InVehicle] = 0;
		    CrateInfo[i][crObject] = CreateDynamicObject(964,vX,vY,vZ-0.8,0.00000000,0.00000000,0.00000000);
		    CrateInfo[i][crX] = vX;
		    CrateInfo[i][crY] = vY;
		    CrateInfo[i][crZ] = vZ-0.8;
		    format(string, sizeof(string), "Serial Number: #%d\n High Grade Materials: %d/50", i, CrateInfo[i][GunQuantity]);
		    CrateInfo[i][crLabel] = CreateDynamic3DTextLabel(string, COLOR_ORANGE, CrateInfo[i][crX],CrateInfo[i][crY],CrateInfo[i][crZ]+1, 20.0, _, _, 1, 0, 0, _, 20.0);
		    break;
		}
    }
	arr_Engine{vehicleid} = 0;
}

public OnPlayerSpawn(playerid)
{
    if(IsPlayerNPC(playerid)) return 1;
    if(!gPlayerLogged{playerid})
    {
        SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: You are not logged in!");
        Kick(playerid);
        return 1;
	}
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);

	if(GetPVarInt(playerid, "NGPassenger") == 1)
	{
	    new Float:X, Float:Y, Float:Z;
	    GetVehiclePos(GetPVarInt(playerid, "NGPassengerVeh"), X, Y, Z);
	    SetPlayerPosEx(playerid, (X-2.557), (Y-3.049), Z);
	    SetPlayerWeaponsEx(playerid);
        GivePlayerValidWeapon(playerid, 46, 60000);
        SetPlayerSkin(playerid, GetPVarInt(playerid, "NGPassengerSkin"));
        SetPlayerHealth(playerid, GetPVarFloat(playerid, "NGPassengerHP"));
        SetPlayerArmour(playerid, GetPVarFloat(playerid, "NGPassengerArmor"));
		DeletePVar(playerid, "NGPassenger");
	    DeletePVar(playerid, "NGPassengerVeh");
		DeletePVar(playerid, "NGPassengerArmor");
		DeletePVar(playerid, "NGPassengerHP");
		DeletePVar(playerid, "NGPassengerSkin");
	    return 1;
	}
	if(InsidePlane[playerid] != INVALID_VEHICLE_ID)
	{
		SetPlayerPosEx(playerid, GetPVarFloat(playerid, "air_Xpos"), GetPVarFloat(playerid, "air_Ypos"), GetPVarFloat(playerid, "air_Zpos"));
		SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "air_Rpos"));
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "air_HP"));
		SetPlayerArmour(playerid, GetPVarFloat(playerid, "air_Arm"));
		SetPlayerWeaponsEx(playerid);
		SetPlayerToTeamColor(playerid);
		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

		DeletePVar(playerid, "air_Xpos");
		DeletePVar(playerid, "air_Ypos");
		DeletePVar(playerid, "air_Zpos");
		DeletePVar(playerid, "air_Rpos");
		DeletePVar(playerid, "air_HP");
		DeletePVar(playerid, "air_Arm");

		SetCameraBehindPlayer(playerid);
		SetPlayerVirtualWorld(playerid, InsidePlane[playerid]);
		return SetPlayerInterior(playerid, 1);
	}
	SyncPlayerTime(playerid);

	if(GetPVarType(playerid, "STD")) {
		DeletePVar(playerid, "STD");
	}

	//SetPlayerTeam(playerid, 1);
	SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	SetPlayerToTeamColor(playerid);
	for(new e = 0; e < 3; e++) shoutEffect[playerid][e] = 0;
	return 1;
}

stock RegisterVehicleNumberPlate(vehicleid, sz_NumPlate[]) {
	new
	    Float: a_CarPos[4], Float: fuel; // X, Y, Z, Z Angle, Fuel

	GetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	GetVehicleZAngle(vehicleid, a_CarPos[3]);
	fuel = VehicleFuel[vehicleid];
	SetVehicleNumberPlate(vehicleid, sz_NumPlate);
	SetVehicleToRespawn(vehicleid);
	SetVehiclePos(vehicleid, a_CarPos[0], a_CarPos[1], a_CarPos[2]);
	SetVehicleZAngle(vehicleid, a_CarPos[3]);
	VehicleFuel[vehicleid] = fuel;
	return 1;
}

forward MDCQueryFinish(playerid, suspectid);
public MDCQueryFinish(playerid, suspectid)
{
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
    new resultline[1424];
    new crimes = PlayerInfo[suspectid][pCrimes];
	new arrests = PlayerInfo[suspectid][pArrested];
	format(resultline, sizeof(resultline), "{FF6347}Name:{BFC0C2} %s\t{FF6347}Phone Number:{BFC0C2} %d\n{FF6347}Total Previous Crimes: {BFC0C2}%d\t {FF6347}Total Arrests: {BFC0C2}%d \n{FF6347}Crime Key: {FF7D7D}Currently Wanted/{BFC0C2}Past Crime\n\n", GetPlayerNameEx(suspectid),PlayerInfo[suspectid][pPnumber], crimes, arrests);

	for(new i; i < rows; i++)
	{
	    cache_get_field_content(i, "issuer", MDCInfo[i][mdcIssuer], MainPipeline);
	    cache_get_field_content(i, "crime", MDCInfo[i][mdcCrime], MainPipeline);
	    cache_get_field_content(i, "active", MDCInfo[i][mdcActive], MainPipeline);
	    if(strval(MDCInfo[i][mdcActive]) == 1)
	    {
	        format(resultline, sizeof(resultline),"%s{FF6347}Crime: {FF7D7D}%s \t{FF6347}Charged by:{BFC0C2} %s\n",resultline, MDCInfo[i][mdcCrime], MDCInfo[i][mdcIssuer]);
		} else {
			format(resultline, sizeof(resultline),"%s{FF6347}Crime: {BFC0C2}%s \t{FF6347}Charged by:{BFC0C2} %s\n",resultline, MDCInfo[i][mdcCrime], MDCInfo[i][mdcIssuer]);
		}
	}
	ShowPlayerDialog(playerid, MDC_SHOWCRIMES, DIALOG_STYLE_MSGBOX, "SA-MDC - Criminal History", resultline, "Back", "");
	return 1;
}
#define Flag_Query_Display  1
#define Flag_Query_Offline  2
#define Flag_Query_Count    3

forward FlagQueryFinish(playerid, suspectid, queryid);
public FlagQueryFinish(playerid, suspectid, queryid)
{
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
    new resultline[2000];
    new header[64], sResult[64];
    new FlagID, FlagIssuer[MAX_PLAYER_NAME], FlagText[64], FlagDate[24];
	switch(queryid)
	{
	    case Flag_Query_Display:
	    {
			format(header, sizeof(header), "{FF6347}Flag History for{BFC0C2} %s", GetPlayerNameEx(suspectid));

			for(new i; i < rows; i++)
			{
			    cache_get_field_content(i, "fid", sResult, MainPipeline); FlagID = strval(sResult);
			    cache_get_field_content(i, "issuer", FlagIssuer, MainPipeline);
			    cache_get_field_content(i, "flag", FlagText, MainPipeline);
			    cache_get_field_content(i, "time", FlagDate, MainPipeline);
				format(resultline, sizeof(resultline),"%s{FF6347}Flag (ID: %d): {BFC0C2} %s \t{FF6347}Issued by:{BFC0C2} %s \t{FF6347}Date: {BFC0C2}%s\n",resultline, FlagID, FlagText, FlagIssuer, FlagDate);
			}
			if(rows == 0)
			{
				format(resultline, sizeof(resultline),"{FF6347}No Flags on this account");
			}
			ShowPlayerDialog(playerid, FLAG_LIST, DIALOG_STYLE_MSGBOX, header, resultline, "Delete Flag", "Close");
		}
		case Flag_Query_Offline:
		{
			new string[128], name[24], reason[64], psqlid[12];
			GetPVarString(playerid, "OnAddFlag", name, 24);
			GetPVarString(playerid, "OnAddFlagReason", reason, 64);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			if(rows > 0) {
				format(string, sizeof(string), "You have appended %s's flag.", name);
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				format(string, sizeof(string), "AdmCmd: %s %s was offline flagged by %s, reason: %s.", name,ARank(playerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED, string, 2);

				format(string, sizeof(string), "%s was offline flagged by %s %s (%s).", name, ARank(playerid),GetPlayerNameEx(playerid), reason);
				Log("logs/flags.log", string);

				cache_get_field_content(0, "id", psqlid, MainPipeline);

				AddOFlag(strval(psqlid), playerid, reason);
			}
			else {
				format(string, sizeof(string), "There was a problem with appending %s's flag.", name);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			DeletePVar(playerid, "OnAddFlagReason");
		}
		case Flag_Query_Count:
		{
		    PlayerInfo[playerid][pFlagged] = rows;
		}
	}
	return 1;
}

forward CountAmount(playerid);
public CountAmount(playerid)
{
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	PlayerInfo[playerid][pLottoNr] = rows;
	return 1;
}

stock AddCrime(cop, suspect, crime[])
{
	new query[256];
	format(query, sizeof(query), "INSERT INTO `mdc` (`id` ,`time` ,`issuer` ,`crime`) VALUES ('%d',NOW(),'%s','%s')", GetPlayerSQLId(suspect), g_mysql_ReturnEscaped(GetPlayerNameEx(cop), MainPipeline), g_mysql_ReturnEscaped(crime, MainPipeline));
	//format(query, sizeof(query), "INSERT INTO `mdc` (`id` ,`time` ,`issuer` ,`crime`) VALUES ('%d',NOW(),'%s','%s')", GetPlayerSQLId(suspect), GetPlayerNameEx(cop), crime);
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	format(query, sizeof(query), "MDC: %s added crime %s to %s.", GetPlayerNameEx(cop), crime, GetPlayerNameEx(suspect));
	Log("logs/crime.log", query);
	return 1;
}

stock ClearCrimes(playerid)
{
	new query[80];
	format(query, sizeof(query), "UPDATE `mdc` SET `active`=0 WHERE `id` = %i AND `active` = 1", GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	return 1;
}

stock DisplayCrimes(playerid, suspectid)
{
    new query[128];
    format(query, sizeof(query), "SELECT issuer, crime, active FROM `mdc` WHERE id=%d ORDER BY `time` AND `active` DESC LIMIT 12", GetPlayerSQLId(suspectid));
    mysql_function_query(MainPipeline, query, true, "MDCQueryFinish", "ii", playerid, suspectid);
	return 1;
}

stock CountFlags(playerid)
{
	new query[80];
	format(query, sizeof(query), "SELECT * FROM `flags` WHERE id=%d", GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, query,  true, "FlagQueryFinish", "iii", playerid, INVALID_PLAYER_ID, Flag_Query_Count);
	return 1;
}

stock AddFlag(playerid, adminid, flag[])
{
	new query[300];
	new admin[24];
	if(adminid != INVALID_PLAYER_ID) {
		format(admin, sizeof(admin), "%s", GetPlayerNameEx(adminid));
	}
	else {
		format(admin, sizeof(admin), "Gifted/Script Added");
	}
	PlayerInfo[playerid][pFlagged]++;
	format(query, sizeof(query), "INSERT INTO `flags` (`id` ,`time` ,`issuer` ,`flag`) VALUES ('%d',NOW(),'%s','%s')", GetPlayerSQLId(playerid), g_mysql_ReturnEscaped(admin, MainPipeline), g_mysql_ReturnEscaped(flag, MainPipeline));
	//format(query, sizeof(query), "INSERT INTO `flags` (`id` ,`time` ,`issuer` ,`flag`) VALUES ('%d',NOW(),'%s','%s')", GetPlayerSQLId(playerid), admin, g_mysql_ReturnEscaped(flag, MainPipeline));
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	format(query, sizeof(query), "FLAG: %s added flag %s to %s.", admin, flag, GetPlayerNameEx(playerid));
	Log("logs/flags.log", query);
	return 1;
}

//AddFlag(giveplayerid, type, playerid, reason);
/*stock AddLog(type, playerid, player2, log[], command[])
{
	new query[300];
	new playerid2[24];
	if(player2 != INVALID_PLAYER_ID) {
		format(playerid2, sizeof(playerid2), "%d", GetUserSQLId(player2));
	}
	else {
		format(playerid2, sizeof(playerid2), "offline");
	}
	format(query, sizeof(query), "INSERT INTO `server_log` (`Type` ,`Time` ,`Name` ,`Player`, `Log`, `Command`) VALUES ('%d',NOW(),'%d','%s', '%s', '%s')", type,  GetPlayerSQLId(playerid), g_mysql_ReturnEscaped(playerid2, MainPipeline), g_mysql_ReturnEscaped(log, MainPipeline), g_mysql_ReturnEscaped(command, MainPipeline));
	//format(query, sizeof(query), "INSERT INTO `flags` (`id` ,`time` ,`issuer` ,`flag`) VALUES ('%d',NOW(),'%s','%s')", GetPlayerSQLId(playerid), admin, g_mysql_ReturnEscaped(flag, MainPipeline));
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	format(query, sizeof(query), "MySQL Log Debug: %s was added to the log (Command: %s) Player: %d", GetPlayerNameEx(playerid), command, player2);
	ABroadCast(COLOR_LIGHTRED, query, 2);
	return 1;
}*/

stock AddOFlag(sqlid, adminid, flag[]) // offline add
{
	new query[300];
	new admin[24], name[24];
	if(adminid != INVALID_PLAYER_ID) {
		format(admin, sizeof(admin), "%s", GetPlayerNameEx(adminid));
	}
	else {
		format(admin, sizeof(admin), "Gifted/Script Added");
	}
	GetPVarString(adminid, "OnAddFlag", name, sizeof(name));
	format(query, sizeof(query), "INSERT INTO `flags` (`id` ,`time` ,`issuer` ,`flag`) VALUES ('%d',NOW(),'%s','%s')", sqlid, g_mysql_ReturnEscaped(admin, MainPipeline), g_mysql_ReturnEscaped(flag, MainPipeline));
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	format(query, sizeof(query), "FLAG: %s added flag %s to %s.", admin, flag, name);
	Log("logs/flags.log", query);
	DeletePVar(adminid, "OnAddFlag");
	return 1;
}

stock DeleteFlag(flagid, adminid)
{
	new query[80];
	format(query, sizeof(query), "FLAG: Flag %d was deleted by %s.", flagid, GetPlayerNameEx(adminid));
	Log("logs/flags.log", query);
	format(query, sizeof(query), "DELETE FROM `flags` WHERE `fid` = %i", flagid);
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	return 1;
}

stock DisplayFlags(playerid, targetid)
{
    new query[128];
	CountFlags(targetid);
    format(query, sizeof(query), "SELECT fid, issuer, flag, time FROM `flags` WHERE id=%d ORDER BY `time` LIMIT 15", GetPlayerSQLId(targetid));
    mysql_function_query(MainPipeline, query, true, "FlagQueryFinish", "iii", playerid, targetid, Flag_Query_Display);
	return 1;
}

stock AddTicket(playerid, number)
{
	new query[80];
	PlayerInfo[playerid][pLottoNr]++;
	format(query, sizeof(query), "INSERT INTO `lotto` (`id` ,`number`) VALUES ('%d', '%d')", GetPlayerSQLId(playerid), number);
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	return 1;
}

stock DeleteTickets(playerid)
{
	new query[80];
	format(query, sizeof(query), "DELETE FROM `lotto` WHERE `id` = %i", GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	return 1;
}

stock LoadTickets(playerid)
{
    new query[128];
    format(query, sizeof(query), "SELECT `tid`, `number` FROM `lotto` WHERE `id` = %d LIMIT 5", GetPlayerSQLId(playerid));
    mysql_function_query(MainPipeline, query, true, "LoadTicket", "i", playerid);
	return 1;
}

forward LoadTicket(playerid);
public LoadTicket(playerid) {
 	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	if (rows == 0) {
		return 1;
	}

    new number, result[10];
	for(new i; i < rows; i++)
	{
    	cache_get_field_content(i, "number", result, MainPipeline);
    	number = strval(result);
		LottoNumbers[playerid][i] = number;
		printf("rows: %i, number: %i", i, number);
	}
	return 1;
}

stock CountTickets(playerid)
{
	new query[80];
	format(query, sizeof(query), "SELECT * FROM `lotto` WHERE `id` = %i", GetPlayerSQLId(playerid));
	mysql_function_query(MainPipeline, query,  true, "CountAmount", "i", playerid);
	return 1;
}

stock Log(sz_fileName[], sz_input[]) {

	new
		sz_logEntry[164],
		i_dateTime[2][3];

	//gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	//getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);
	//getdate(i_dateTime[1][2], i_dateTime[1][1], i_dateTime[1][0]);
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	format(sz_logEntry, sizeof(sz_logEntry), "[%i/%i/%i - %i:%i:%i] %s\r\n", i_dateTime[1][2], i_dateTime[1][1], i_dateTime[1][0], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], sz_input);
	if(logfile) fclose(logfile);
	if(!fexist(sz_fileName)) logfile = fopen(sz_fileName, io_write);
	else logfile = fopen(sz_fileName, io_append);
	if(logfile)
	{
		fwrite(logfile, sz_logEntry);
		fclose(logfile);
	}
	return 1;
}

stock SQL_Log(szQuery[], szDesc[] = "none", iExtraID = 0) {
	new i_dateTime[2][3];
	gettime(i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2]);
	getdate(i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2]);

	printf("Dumping query from %i/%i/%i (%i:%i:%i)\r\nDescription: %s (index %i). Query:\r\n", i_dateTime[1][0], i_dateTime[1][1], i_dateTime[1][2], i_dateTime[0][0], i_dateTime[0][1], i_dateTime[0][2], szDesc, iExtraID);
	if(strlen(szQuery) > 1023)
	{
	    new sz_print[1024];
	    new Float:maxfloat = strlen(szQuery)/1023;
		for(new x;x<=floatround(maxfloat, floatround_ceil);x++)
		{
		    strmid(sz_print, szQuery, 0+(x*1023), 1023+(x*1023));
		    print(sz_print);
		}
	}
	else
	{
		print(szQuery);
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
    if(GetPVarInt(playerid, "EventToken") == 1 && GetPVarInt(playerid, "InWaterStationRCP") == 1)
	{
	    KillTimer(GetPVarInt(playerid, "WSRCPTimerId"));
	    SetPVarInt(playerid, "WSRCPTimerId", 0);
     	SetPVarInt(playerid, "InWaterStationRCP", 0);
     	RCPIdCurrent[playerid]++;
     	if(EventRCPT[RCPIdCurrent[playerid]] == 1) {
	        DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
		}
		else if(EventRCPT[RCPIdCurrent[playerid]] == 4) {
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
		} else {
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have exited the checkpoint, you are no longer getting rehydrated.");
		return 1;
	}
    if(GetPVarInt(playerid,"IsInArena") >= 0)
	{
	    new arenaid = GetPVarInt(playerid, "IsInArena");
	    if(PaintBallArena[arenaid][pbGameType] == 4 || PaintBallArena[arenaid][pbGameType] == 5)
	    {
	        //SendAudioToPlayer(playerid, 24, 100);
	    }
	    return 1;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
    if(GetPVarInt(playerid, "EventToken") == 1)
	{
	    if(EventKernel[EventFootRace] == 0 && IsPlayerInAnyVehicle(playerid))
	    {
			return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot be inside vehicles and participate in this event at the same time.");
	    }
	    if(EventRCPT[RCPIdCurrent[playerid]] == 3 && PlayerInfo[playerid][pHydration] < 60) {
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have entered a Watering Station checkpoint, you need to stay here in order to get rehydrated again.");
		    SendClientMessageEx(playerid, COLOR_WHITE, "You may choose to leave at any point or wait until you get the message of fully rehydrated.");
            SetPVarInt(playerid, "WSRCPTimerId", SetTimerEx("WateringStation", 4000, 1, "i", playerid));
            SetPVarInt(playerid, "InWaterStationRCP", 1);
            return 1;
		}
	    else if(EventRCPT[RCPIdCurrent[playerid]] == 4) {
			RCPIdCurrent[playerid] = 0;
			PlayerInfo[playerid][pHydration] -= 4;
			PlayerInfo[playerid][pRacePlayerLaps]++;
			if(PlayerInfo[playerid][pRacePlayerLaps] % 10 == 0) {
			    GiftPlayer(MAX_PLAYERS, playerid);
			}
			else if(PlayerInfo[playerid][pRacePlayerLaps] == 25) {
			    PlayerInfo[playerid][pEXPToken]++;
			    SendClientMessageEx(playerid, COLOR_YELLOW, "You have been given a Double EXP Token for completing 25 laps");
			}
			if(toglapcount == 0) {
				RaceTotalLaps++;
				Misc_Save();
			}
			new string[128];
			format(string, sizeof(string), "Lap successfully completed. Laps Completed: %d | Total Laps Completed: %d", PlayerInfo[playerid][pRacePlayerLaps], RaceTotalLaps, TotalJoinsRace);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	    else {
	    	RCPIdCurrent[playerid]++;
            PlayerInfo[playerid][pHydration] -= 4;
		}
		new string[128];
        if(PlayerInfo[playerid][pHydration] > 60)
        {
			format(string, sizeof(string), "Hydration level normal(%d)", PlayerInfo[playerid][pHydration]);
			SendClientMessageEx(playerid, COLOR_GREEN, string);
		}
		else if(PlayerInfo[playerid][pHydration] < 61 && PlayerInfo[playerid][pHydration] > 30)
		{
		    format(string, sizeof(string), "Hydration level low(%d)", PlayerInfo[playerid][pHydration]);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
		else if(PlayerInfo[playerid][pHydration] < 31 && PlayerInfo[playerid][pHydration] > 0)
		{
		    format(string, sizeof(string), "Hydration level very low(%d)", PlayerInfo[playerid][pHydration]);
			SendClientMessageEx(playerid, COLOR_RED, string);
		}
		else if(PlayerInfo[playerid][pHydration] < 0)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have fallen to the ground due to being dehydrated, FDSA is going to rescue you and take you to the First Aid Station.");
            DeletePVar(playerid, "EventToken");
			SetPlayerHealth(playerid, 0);
		}
	    if(EventRCPT[RCPIdCurrent[playerid]] == 1) {
	        DisablePlayerCheckpoint(playerid);
			SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
		}
		else if(EventRCPT[RCPIdCurrent[playerid]] == 4) {
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
		} else {
		    DisablePlayerCheckpoint(playerid);
		    SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
		}
		return 1;
	}
	if(GetPVarInt(playerid,"IsInArena") >= 0)
	{
	    new arenaid = GetPVarInt(playerid, "IsInArena");
	    if(PaintBallArena[arenaid][pbGameType] == 4 || PaintBallArena[arenaid][pbGameType] == 5)
	    {
	        //SendAudioToPlayer(playerid, 23, 100);
	    }
	    return 1;
	}
	if(GetPVarInt(playerid,"TrackCar") != 0)
	{
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "TrackCar");
		return 1;
	}
	if(GetPVarInt(playerid,"igps") != 0)
	{
	    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	    DisablePlayerCheckpoint(playerid);
		DeletePVar(playerid, "igps");
		return 1;
	}
	for(new h = 0; h < MAX_POINTS; h++)
	{
		if(Points[h][Type] == 3 && GetPVarInt(playerid, "CrateDeliver") == 1 && IsPlayerInRangeOfPoint(playerid, 6.0, 2166.3772,-1675.3829,15.0859))
		{
			new string[128];
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	    	{
			   	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast( COLOR_YELLOW, string, 2 );
			   	// format(string, sizeof(string), "%s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	// Log("logs/hack.log", string);
			}
			DisablePlayerCheckpoint(playerid);
			new level = PlayerInfo[playerid][pSmugSkill];
   			if(level >= 0 && level <= 20)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $1250 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 1250);
			}
			else if(level >= 21 && level <= 50)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $1500 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 1500);
			}
			else if(level >= 51 && level <= 100)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $2000 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 2000);
			}
			else if(level >= 101 && level <= 200)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $3000 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 3000);
			}
			else if(level >= 201)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $4000 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 4000);
			}
			DeletePVar(playerid, "CrateDeliver");
			PlayerInfo[playerid][pCrates] = 0;
			Points[h][Stock] += 10;

			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 smuggler skill points instead of 1. (Double XP Active)");
   				PlayerInfo[playerid][pSmugSkill] += 2;
			}
			else
 			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
		    {
				format(string, sizeof(string), "You have gained 2 smuggler skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pSmugSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pSmugSkill] += 1;
			}

			format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 4 && GetPVarInt(playerid, "CrateDeliver") == 2 && IsPlayerInRangeOfPoint(playerid, 6.0, 2354.2808,-1169.2959,28.0066))
		{
			new string[128];
		    if(GetPVarInt(playerid, "tpDrugRunTimer") != 0)
	    	{
			   	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	ABroadCast( COLOR_YELLOW, string, 2 );
			   	// format(string, sizeof(string), "%s (ID %d) is possibly teleport drugrunning.", GetPlayerNameEx(playerid), playerid);
			   	// Log("logs/hack.log", string);
			}
			DisablePlayerCheckpoint(playerid);
			new level = PlayerInfo[playerid][pSmugSkill];
			if(level >= 0 && level <= 20)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $1250 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 1250);
			}
			else if(level >= 21 && level <= 50)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $1500 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 1500);
			}
			else if(level >= 51 && level <= 100)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $2000 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 2000);
			}
			else if(level >= 101 && level <= 200)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $3000 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 3000);
			}
			else if(level >= 201)
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You received $4000 for delivering the Drug Crates.");
				GivePlayerCash(playerid, 4000);
			}
			DeletePVar(playerid, "CrateDeliver");
			PlayerInfo[playerid][pCrates] = 0;
			Points[h][Stock] += 10;
			PlayerInfo[playerid][pSmugSkill]++;
			format(string, sizeof(string), " CRACK AVAILABLE: %d/1000.", Points[h][Stock]);
			UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
			return 1;
		}
		else if(Points[h][Type] == 2 && GetPVarInt(playerid, "MatDeliver") == Points[h][MatPoint] && IsPlayerInRangeOfPoint(playerid, 6.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				new string[128];
				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
			    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	// Log("logs/hack.log", string);
				}
				new payout = (25)*(GetPVarInt(playerid, "Packages"));

				if(PlayerInfo[playerid][pDonateRank] == 1)
				{
					TransferStorage(playerid, -1, -1, -1, 4, 375, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 375 materials for your 15 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more materials than normal.");

				}
				else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 500, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 500 materials for your 20 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more materials than normal.");

				}
				else if(PlayerInfo[playerid][pDonateRank] >= 4)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 625, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 625 materials for your 25 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more materials than normal.");

				}
				else
				{
    				TransferStorage(playerid, -1, -1, -1, 4, 250, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 250 materials for your 10 materials packages.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);

				for(new p = 0; p < sizeof(FamilyInfo); p++)
				{
					if(strcmp(Points[h][Owner], FamilyInfo[p][FamilyName], true) == 0)
					{
						FamilyInfo[p][FamilyBank] = FamilyInfo[p][FamilyBank]+(payout/3);
						//SendClientMessageEx(playerid, COLOR_WHITE, " Family owner recieved 50 percent of the cost.");
					}
				}
				return 1;
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 333 && IsPlayerInRangeOfPoint(playerid, 6.0, -330.44, -467.54, 0.85))
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				new vehicle = GetPlayerVehicleID(playerid);
				if(IsABoat(vehicle))
				{
					if(PlayerInfo[playerid][pDonateRank] == 1)
					{
				    	TransferStorage(playerid, -1, -1, -1, 4, 675, -1, 2);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 675 materials for your 23 materials packages.");
						SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more materials than normal.");
					}
					else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
					{
				    	TransferStorage(playerid, -1, -1, -1, 4, 900, -1, 2);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 900 materials for your 30 materials packages.");
						SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more materials than normal.");

					}
					else if(PlayerInfo[playerid][pDonateRank] >= 4)
					{
				    	TransferStorage(playerid, -1, -1, -1, 4, 1125, -1, 2);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 1125 materials for your 38 materials packages.");
						SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more materials than normal.");

					}
					else
					{
						TransferStorage(playerid, -1, -1, -1, 4, 450, -1, 2);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 450 materials for your 15 materials packages.");
					}
					DeletePVar(playerid, "Packages");
					DeletePVar(playerid, "MatDeliver");
					DisablePlayerCheckpoint(playerid);
				}
				else
				{
					GameTextForPlayer(playerid, "~r~You are not in a boat!", 3000, 1);
					return 1;
				}

				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
					new string[128];
			    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	// Log("logs/hack.log", string);
				}
				return 1;
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 444 && IsPlayerInRangeOfPoint(playerid, 6.0, -1872.879760, 1416.312500, 7.180089))
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(PlayerInfo[playerid][pDonateRank] == 1)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 450, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 450 materials for your 18 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more materials than normal.");

				}
				else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 600, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 600 materials for your 24 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more materials than normal.");

				}
				else if(PlayerInfo[playerid][pDonateRank] >= 4)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 750, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 750 materials for your 30 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more materials than normal.");

				}
				else
				{
			    	TransferStorage(playerid, -1, -1, -1, 4, 300, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 300 materials for your 12 materials packages.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);

				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
					new string[128];
			    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	// Log("logs/hack.log", string);
				}
				return 1;
			}
		}
		else if(GetPVarInt(playerid, "MatDeliver") == 555 && IsPlayerInRangeOfPoint(playerid, 6.0, -688.7897, 966.1434, 12.1627))
		{
			if(GetPVarInt(playerid, "Packages") > 0)
			{
				if(PlayerInfo[playerid][pDonateRank] == 1)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 450, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 450 materials for your 18 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more materials than normal.");

				}
				else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 600, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 600 materials for your 24 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more materials than normal.");

				}
				else if(PlayerInfo[playerid][pDonateRank] >= 4)
				{
				    TransferStorage(playerid, -1, -1, -1, 4, 750, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 750 materials for your 30 materials packages.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more materials than normal.");

				}
				else
				{
			    	TransferStorage(playerid, -1, -1, -1, 4, 300, -1, 2);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* The factory gave you 300 materials for your 12 materials packages.");
				}

				DeletePVar(playerid, "Packages");
				DeletePVar(playerid, "MatDeliver");
				DisablePlayerCheckpoint(playerid);

				if(GetPVarInt(playerid, "tpMatRunTimer") != 0)
			    {
					new string[128];
			    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	ABroadCast( COLOR_YELLOW, string, 2 );
			    	// format(string, sizeof(string), "%s (ID %d) is possibly teleport matrunning.", GetPlayerNameEx(playerid), playerid);
			    	// Log("logs/hack.log", string);
				}
				return 1;
			}
		}
	}
	if(GetPVarInt(playerid, "TruckDeliver") > 0 && gPlayerCheckpointStatus[playerid] != CHECKPOINT_RETURNTRUCK)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a Truck!");
	        return 1;
	    }
	    if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "This is not your Truck with the goods you are suppose to deliver!");
	        return 1;
	    }

		if(!IsAtTruckDeliveryPoint(playerid))
 		{// In the case the player finds a way to exploit the checkpoint to different location
			CancelTruckDelivery(playerid);
			SendClientMessageEx(playerid, COLOR_REALRED, "ERROR: Wrong checkpoint entered. Truck delivery canceled completely.");
			return 1;
   		}

		if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
		{
  			new string[128];
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast( COLOR_YELLOW, string, 2 );
    		// format(string, sizeof(string), "%s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
	    	// Log("logs/hack.log", string);
		}
		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
		TruckContents{vehicleid} = 0;

		if(truckdeliver >= 1 && truckdeliver <= 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the food & beverages, return the truck to the Los Santos Docks to collect your pay.");
		}
		else if(truckdeliver >= 4 && truckdeliver <= 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the clothing, return the truck to the Los Santos Docks to collect your pay.");
		}
		else if(truckdeliver == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the materials, return the truck to the Los Santos Docks to collect your pay.");
		}
		else if(truckdeliver >= 8 && truckdeliver <= 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the 24/7 items, return the truck to the Los Santos Docks to collect your pay.");
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the weapons, return the truck to the Los Santos Docks to collect your pay.");
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the drugs, return the truck to the Los Santos Docks to collect your pay.");
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You delivered the illegal materials, return the truck to the Los Santos Docks to collect your pay.");
		}
		DisablePlayerCheckpoint(playerid);

		gPlayerCheckpointStatus[playerid] = CHECKPOINT_RETURNTRUCK;
		SetPlayerCheckpoint(playerid, 2439.6140,-2116.7917,13.5469, 5);
		GameTextForPlayer(playerid, "~w~Waypoint set ~r~Los Santos Docks", 5000, 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Return to the Los Santos Docks (see checkpoint on radar).");

		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
		return 1;
	}
	// Pizza Delivery
	if(GetPVarInt(playerid, "Pizza") > 0 && IsPlayerInRangeOfPoint(playerid, 5.0, HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorX], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorY], HouseInfo[GetPVarInt(playerid, "Pizza")][hExteriorZ]))
	{
	    new string[128];
		if (GetPVarInt(playerid, "tpPizzaTimer") != 0)
		{
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport pizzarunning.", GetPlayerNameEx(playerid), playerid);
  			ABroadCast( COLOR_YELLOW, string, 2 );
    		// format(string, sizeof(string), "%s (ID %d) is possibly teleport pizzarunning.", GetPlayerNameEx(playerid), playerid);
	    	// Log("logs/hack.log", string);
		}
		format(string, sizeof(string), "You have delivered the pizza to the destination! You have made $%d.", (GetPVarInt(playerid, "pizzaTimer") * 70));
		Tax -= (GetPVarInt(playerid, "pizzaTimer") * 70);
		//Misc_Save();
		Tax_Save();
		GivePlayerCash(playerid, floatround((GetPVarInt(playerid, "pizzaTimer") * 70), floatround_round));
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		DeletePVar(playerid, "Pizza");
		DisablePlayerCheckpoint(playerid);

	}
	if(GetPVarInt(playerid, "Finding")>=1)
	{
	    DeletePVar(playerid, "Finding");
	    DisablePlayerCheckpoint(playerid);
	    GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
	}
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
		TaxiAccepted[playerid] = INVALID_PLAYER_ID;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(EMSCallTime[playerid] > 0 && EMSAccepted[playerid] < 999)
	{
	    if(GetPVarInt(EMSAccepted[playerid], "Injured") == 1)
	    {
	    	SendEMSQueue(EMSAccepted[playerid],2);
	    	EMSAccepted[playerid] = INVALID_PLAYER_ID;
	    	GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
	    	EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
		else
		{
            EMSAccepted[playerid] = INVALID_PLAYER_ID;
		    GameTextForPlayer(playerid, "~r~Patient has died", 5000, 1);
		    EMSCallTime[playerid] = 0;
	    	DisablePlayerCheckpoint(playerid);
		}
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
		BusAccepted[playerid] = INVALID_PLAYER_ID;
		GameTextForPlayer(playerid, "~w~Reached destination", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(MedicCallTime[playerid] > 0 && MedicAccepted[playerid] < 999)
	{
		MedicAccepted[playerid] = INVALID_PLAYER_ID;
		GameTextForPlayer(playerid, "~w~Reached patient", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
			{
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				new i = hInviteHouse[playerid];
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				SetPlayerPosEx(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pVW] = i+6000;
				SetPlayerVirtualWorld(playerid, i+6000);
				if(HouseInfo[i][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ], FREEZE_TIME);
				hInviteOffer[playerid] = INVALID_PLAYER_ID;
				hInviteHouse[playerid] = INVALID_HOUSE_ID;
			}
			case CHECKPOINT_LOADTRUCK:
			{
			    if(IsPlayerInRangeOfPoint(playerid, 6, 2439.6140,-2116.7917,13.5469))
			    {
				    new vehicleid = GetPlayerVehicleID(playerid);
	   				if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    		{
				    	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				    	DisablePlayerCheckpoint(playerid);
				    	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
						TogglePlayerControllable(playerid, 0);
						SetPVarInt(playerid, "IsFrozen", 1);
						ShowPlayerDialog(playerid,DIALOG_LOADTRUCK,DIALOG_STYLE_LIST,"What do you want to transport?","{00F70C}Legal goods {FFFFFF}(no risk but also no bonuses)\n{FF0606}Illegal goods {FFFFFF}(risk of getting caught but a bonus)","Select","Cancel");
					}
					else return SendClientMessageEx(playerid, COLOR_GREY, "You are not driving a Los Santos Docks Truck!");
				}
			}
			case CHECKPOINT_RETURNTRUCK:
			{
			    if(!IsPlayerInRangeOfPoint(playerid, 6, 2439.6140,-2116.7917,13.5469))
			    {// In the case the player finds a way to exploit the checkpoint to different location
                    CancelTruckDelivery(playerid);
                    SendClientMessageEx(playerid, COLOR_REALRED, "ERROR: Wrong checkpoint entered. Truck delivery canceled completely.");
					return 1;
			    }
 				if(GetPVarInt(playerid, "tpTruckRunTimer") != 0)
				{
  					new string[128];
					format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
  					ABroadCast( COLOR_YELLOW, string, 2 );
    				// format(string, sizeof(string), "%s (ID %d) is possibly teleport truckrunning.", GetPlayerNameEx(playerid), playerid);
	    			// Log("logs/hack.log", string);
				}
   				new vehicleid = GetPlayerVehicleID(playerid);
				if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    		{
	        		SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a Truck!");
	        		return 1;
	    		}
	    		if(TruckUsed[playerid] != INVALID_VEHICLE_ID && vehicleid != TruckUsed[playerid])
	    		{
	        		SendClientMessageEx(playerid, COLOR_WHITE, "This is not the Truck you used, return the Truck you used in order to receive your pay!");
	        		return 1;
	    		}

			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			    SetVehicleToRespawn(vehicleid);

   				new string[128], payment;
				new level = PlayerInfo[playerid][pTruckSkill];
				if(level >= 0 && level <= 50) payment = 7000;
				else if(level >= 51 && level <= 100) payment = 8250;
				else if(level >= 101 && level <= 200) payment = 9500;
				else if(level >= 201 && level <= 400) payment = 10750;
				else if(level >= 401) payment = 12000;
				new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
				TruckContents{vehicleid} = 0;

				if(truckdeliver >= 1 && truckdeliver <= 10)
				{
					Tax -= payment;
					//Misc_Save();
					Tax_Save();
					GivePlayerCash(playerid, payment);
					format(string, sizeof(string), "* You were paid $%d for delivering the goods and returning the truck.", payment);
				}
				else if(truckdeliver >= 11 && truckdeliver <= 25)
				{
					payment = floatround(payment * 1.5);
					Tax -= payment;
					//Misc_Save();
					Tax_Save();
					GivePlayerCash(playerid, payment);
	    			format(string, sizeof(string), "* You were paid $%d for delivering the goods and returning the truck.", payment);
	    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You received a 50 percent bonus for the additional risk from the cops.");

				}
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

				if(truckdeliver == 11)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given a free 9mm as a bonus for taking the risk of transporting illegal weapons.");
				    GivePlayerValidWeapon(playerid, 22, 60000);
				}
				else if(truckdeliver == 12)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given a free Shotgun as a bonus for taking the risk of transporting illegal weapons.");
				    GivePlayerValidWeapon(playerid, 25, 60000);
				}
				else if(truckdeliver == 13)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given a free MP5 as a bonus for taking the risk of transporting illegal weapons.");
				    GivePlayerValidWeapon(playerid, 29, 60000);
				}
				else if(truckdeliver == 14)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given a free Deagle as a bonus for taking the risk of transporting illegal weapons.");
				    GivePlayerValidWeapon(playerid, 24, 60000);
				}
				else if(truckdeliver == 15)
				{
   					new randomweapon = Random(1, 3);
    				if(randomweapon == 1)
					{
    					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given a free AK-47 as a bonus for taking the risk of transporting illegal weapons.");
    					GivePlayerValidWeapon(playerid, 30, 60000);
    				}
    				if(randomweapon == 2)
					{
    					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given a free M4 as a bonus for taking the risk of transporting illegal weapons.");
    					GivePlayerValidWeapon(playerid, 31, 60000);
    				}
				}
				else if(truckdeliver == 16)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 2 pot & 1 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 2;
				    PlayerInfo[playerid][pCrack] += 1;
				}
				else if(truckdeliver == 17)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 4 pot & 2 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 4;
				    PlayerInfo[playerid][pCrack] += 2;
				}
				else if(truckdeliver == 18)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 6 pot & 3 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 6;
				    PlayerInfo[playerid][pCrack] += 3;
				}
				else if(truckdeliver == 19)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 8 pot & 4 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 8;
				    PlayerInfo[playerid][pCrack] += 4;
				}
				else if(truckdeliver == 20)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 10 pot & 5 crack as a bonus for taking the risk of transporting illegal drugs.");
				    PlayerInfo[playerid][pPot] += 10;
				    PlayerInfo[playerid][pCrack] += 5;
				}
				else if(truckdeliver == 21)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 50 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 50;
				}
				else if(truckdeliver == 22)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 100 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 100;
				}
				else if(truckdeliver == 23)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 200 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 200;
				}
				else if(truckdeliver == 24)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 300 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 300;
				}
				else if(truckdeliver == 25)
				{
				    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You were also given 400 materials as a bonus for taking the risk of transporting illegal materials.");
					PlayerInfo[playerid][pMats] += 400;
				}

				if(DoubleXP) {
					SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 truck skill points instead of 1. (Double XP Active)");
					PlayerInfo[playerid][pTruckSkill] += 2;
				}
				else
				if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
				{
					format(string, sizeof(string), "You have gained 2 truck skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
   					PlayerInfo[playerid][pTruckSkill] += 2;
				}
				else
				{
  					PlayerInfo[playerid][pTruckSkill] += 1;
				}

				TruckUsed[playerid] = INVALID_VEHICLE_ID;
				DeletePVar(playerid, "TruckDeliver");

				new mypoint = -1;
				for (new i=0; i<MAX_POINTS; i++)
				{
					if(strcmp(Points[i][Name], "Los Santos Docks", true) == 0)
					{
						mypoint = i;
					}
				}
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						Tax -= 200;
						//Misc_Save();
						Tax_Save();
						FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+(200);
					}
			 	}
			}
			case CHECKPOINT_HITMAN:
			{
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			    SendClientMessageEx(playerid, COLOR_GRAD2, "  Type /enter to enter the HQ.");
			}
			case CHECKPOINT_HITMAN2:
			{
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			    SendClientMessageEx(playerid, COLOR_GRAD2, "  Type /enter to enter the HQ.");
			}
			case CHECKPOINT_HITMAN3:
			{
			    PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
			    DisablePlayerCheckpoint(playerid);
			    gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			    SendClientMessageEx(playerid, COLOR_GRAD2, "  Type /order to get your weaponry.");
			}
		}
	}
	return 1;
}

forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	foreach(new i: Player)
	{
		if(IsACop(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
		}
	}
	return 1;
}

forward SetAllMedicCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
public SetAllMedicCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pLeader] == 4)
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
		}
	}
	return 1;
}

forward ShowPlayerBeaconForCops(playerid);
public ShowPlayerBeaconForCops(playerid)
{
	foreach(new i: Player)
	{
		if(IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

forward HidePlayerBeaconForCops(playerid);
public HidePlayerBeaconForCops(playerid)
{
	foreach(new i: Player)
	{
		if(IsACop(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

forward ShowPlayerBeaconForMedics(playerid);
public ShowPlayerBeaconForMedics(playerid)
{
	foreach(new i: Player)
	{
		if(IsInFDSA(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, COP_GREEN_COLOR);
		}
	}
	return 1;
}

forward HidePlayerBeaconForMedics(playerid);
public HidePlayerBeaconForMedics(playerid)
{
	foreach(new i: Player)
	{
		if(IsInFDSA(i))
		{
			SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
		}
	}
	SetPlayerToTeamColor(playerid);
	return 1;
}

forward TickCTF(playerid);
public TickCTF(playerid)
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
	    new arenaid = GetPVarInt(playerid, "IsInArena");
	    if(PaintBallArena[arenaid][pbGameType] == 3)
	    {
	        // Flag Active Codes
			//
			// Active -1 = Flag is being carried by someone, not pickupable by anyone intill dropping.
			// Active 0 = Flag is on the stand, pickupable by only the opp team.
			// Active 1 = Flag is lying on the ground somewhere, pickupable by both teams, same team resets the flag.

			// Inactive Teams Check
			if(PaintBallArena[arenaid][pbTeamRed] == 0)
			{
			    return 1;
			}
			if(PaintBallArena[arenaid][pbTeamBlue] == 0)
			{
			    return 1;
			}

	        new teamid = PlayerInfo[playerid][pPaintTeam];
	        switch(teamid)
	        {
	            case 1: // Red Team's Tick
	            {
	                // Red Flag Checks
	                if(PaintBallArena[arenaid][pbFlagRedActive] == 0)
					{
					    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
					    {
					    	if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagRedPos][0], PaintBallArena[arenaid][pbFlagRedPos][1], PaintBallArena[arenaid][pbFlagRedPos][2]))
	                		{
	                		    ScoreFlagPaintballArena(playerid, arenaid, 2);
	                		}
						}
					}
	                if(PaintBallArena[arenaid][pbFlagRedActive] == 1)
	                {
	                	if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagRedPos][0], PaintBallArena[arenaid][pbFlagRedPos][1], PaintBallArena[arenaid][pbFlagRedPos][2]))
	                	{
	                	    ResetFlagPaintballArena(arenaid, 1);
	                	}
					}

					// Blue Flag Checks
	                if(PaintBallArena[arenaid][pbFlagBlueActive] == 0)
					{
					    if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagBluePos][0], PaintBallArena[arenaid][pbFlagBluePos][1], PaintBallArena[arenaid][pbFlagBluePos][2]))
					    {
					        if(PaintBallArena[arenaid][pbFlagInstagib] == 1)
					        {
					            SetPlayerHealth(playerid, 1);
					            SetPlayerArmour(playerid, 0);
					        }
					        if(PaintBallArena[arenaid][pbFlagNoWeapons] == 1)
					        {
					            SetPlayerArmedWeapon(playerid, 0);
					        }
							PickupFlagPaintballArena(playerid, arenaid, 2);
					    }
					}
	                if(PaintBallArena[arenaid][pbFlagBlueActive] == 1)
	                {
	                    if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagBluePos][0], PaintBallArena[arenaid][pbFlagBluePos][1], PaintBallArena[arenaid][pbFlagBluePos][2]))
					    {
					        if(PaintBallArena[arenaid][pbFlagInstagib] == 1)
					        {
					            SetPlayerHealth(playerid, 1);
					            SetPlayerArmour(playerid, 0);
					        }
					        if(PaintBallArena[arenaid][pbFlagNoWeapons] == 1)
					        {
					            SetPlayerArmedWeapon(playerid, 0);
					        }
							PickupFlagPaintballArena(playerid, arenaid, 2);
					    }
					}
	            }
	            case 2: // Blue Team's Tick
	            {
	                // Blue Flag Checks
	                if(PaintBallArena[arenaid][pbFlagBlueActive] == 0)
	                {
	                    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
	                    {
	                        if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagBluePos][0], PaintBallArena[arenaid][pbFlagBluePos][1], PaintBallArena[arenaid][pbFlagBluePos][2]))
	                		{
	                		    ScoreFlagPaintballArena(playerid, arenaid, 1);
	                		}
	                    }
	                }
	                if(PaintBallArena[arenaid][pbFlagBlueActive] == 1)
	                {
	                    if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagBluePos][0], PaintBallArena[arenaid][pbFlagBluePos][1], PaintBallArena[arenaid][pbFlagBluePos][2]))
	                	{
	                	    ResetFlagPaintballArena(arenaid, 2);
	                	}
	                }

	                // Red Flag Checks
	                if(PaintBallArena[arenaid][pbFlagRedActive] == 0)
	                {
                        if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagRedPos][0], PaintBallArena[arenaid][pbFlagRedPos][1], PaintBallArena[arenaid][pbFlagRedPos][2]))
					    {
					        if(PaintBallArena[arenaid][pbFlagInstagib] == 1)
					        {
					            SetPlayerHealth(playerid, 1);
					            SetPlayerArmour(playerid, 0);
					        }
					        if(PaintBallArena[arenaid][pbFlagNoWeapons] == 1)
					        {
					            SetPlayerArmedWeapon(playerid, 0);
					        }
							PickupFlagPaintballArena(playerid, arenaid, 1);
					    }
	                }
	                if(PaintBallArena[arenaid][pbFlagRedActive] == 1)
	                {
	                    if(IsPlayerInRangeOfPoint(playerid, 3.0, PaintBallArena[arenaid][pbFlagRedPos][0], PaintBallArena[arenaid][pbFlagRedPos][1], PaintBallArena[arenaid][pbFlagRedPos][2]))
					    {
					        if(PaintBallArena[arenaid][pbFlagInstagib] == 1)
					        {
					            SetPlayerHealth(playerid, 1);
					            SetPlayerArmour(playerid, 0);
					        }
					        if(PaintBallArena[arenaid][pbFlagNoWeapons] == 1)
					        {
					            SetPlayerArmedWeapon(playerid, 0);
					        }
							PickupFlagPaintballArena(playerid, arenaid, 1);
					    }
					}
	            }
	        }
	    }
	}
	return 1;
}

forward TickKOTH(playerid);
public TickKOTH(playerid)
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
	    new arenaid = GetPVarInt(playerid, "IsInArena");

   		// Inactive Players Check
       	if(PaintBallArena[arenaid][pbPlayers] < 2)
       	{
			return 1;
		}

	    if(PaintBallArena[arenaid][pbGameType] == 4) // King of the Hill
		{
		    if(IsPlayerInCheckpoint(playerid))
			{
			    new Float:health;
			    GetPlayerHealth(playerid, health);
			    SetPlayerHealth(playerid, health+1);

			    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
			    PlayerInfo[playerid][pKills] += 1;
			}
		}
		if(PaintBallArena[arenaid][pbGameType] == 5) // Team King of the Hill
		{
		    if(IsPlayerInCheckpoint(playerid))
			{
			    new Float:health;
			    GetPlayerHealth(playerid, health);
			    SetPlayerHealth(playerid, health+1);

			    PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);


			    switch(PlayerInfo[playerid][pPaintTeam])
			    {
			        case 1:
			        {
						PaintBallArena[arenaid][pbTeamRedScores] += 1;
			        }
			        case 2:
			        {
			            PaintBallArena[arenaid][pbTeamBlueScores] += 1;
					}
			    }
			}
		}
	}
	return 1;
}

forward MoveEMS(playerid);
public MoveEMS(playerid)
{
    new Float:mX, Float:mY, Float:mZ;
    GetPlayerPos(playerid, mX, mY, mZ);

    SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicX", mX);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicY", mY);
	SetPVarFloat(GetPVarInt(playerid, "MovingStretcher"), "MedicZ", mZ);
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicVW", GetPlayerVirtualWorld(playerid));
	SetPVarInt(GetPVarInt(playerid, "MovingStretcher"), "MedicInt", GetPlayerInterior(playerid));

	Streamer_UpdateEx(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	SetPlayerPosEx(GetPVarInt(playerid, "MovingStretcher"), mX, mY, mZ);
	SetPlayerInterior(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));
	SetPlayerVirtualWorld(GetPVarInt(playerid, "MovingStretcher"), GetPlayerVirtualWorld(playerid));

	ClearAnimations(GetPVarInt(playerid, "MovingStretcher"));
	ApplyAnimation(GetPVarInt(playerid, "MovingStretcher"), "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);

	DeletePVar(GetPVarInt(playerid, "MovingStretcher"), "OnStretcher");
	SetPVarInt(playerid, "MovingStretcher", -1);
}

forward KillEMSQueue(playerid);
public KillEMSQueue(playerid)
{
    DeletePVar(playerid, "Injured");
    DeletePVar(playerid, "EMSAttempt");
	SetPVarInt(playerid, "MedicBill", 1);
	DeletePVar(playerid, "MedicCall");

	return 1;
}

forward SendEMSQueue(playerid,type);
public SendEMSQueue(playerid,type)
{
	switch (type)
	{
		case 1:
		{
		    Streamer_UpdateEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerPosEx(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid,"MedicVW"));
	  		SetPlayerInterior(playerid, GetPVarInt(playerid,"MedicInt"));

			SetPVarInt(playerid, "EMSAttempt", -1);

			if(GetPlayerInterior(playerid) > 0) Player_StreamPrep(playerid, GetPVarFloat(playerid,"MedicX"), GetPVarFloat(playerid,"MedicY"), GetPVarFloat(playerid,"MedicZ"), FREEZE_TIME);
			GameTextForPlayer(playerid, "~r~Injured~n~~y~/accept death ~w~or ~g~/service ems", 5000, 3);
			ClearAnimations(playerid);
			ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid,0);
			if(GetPVarInt(playerid, "usingfirstaid") == 1)
			{
			    firstaidexpire(playerid);
			}
			SetPVarInt(playerid,"MedicCall",1);
		}
		case 2:
		{
		    SetPVarInt(playerid,"EMSAttempt", 2);
			ClearAnimations(playerid);
		 	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 0, 1, 1, 1, 0, 1);
			SetPlayerHealth(playerid, 100);
			SetPlayerArmour(playerid,0);
		}
	}
	return 1;
}

stock AddSpecialToken(playerid)
{

	new
		sz_FileStr[10 + MAX_PLAYER_NAME],
		sz_playerName[MAX_PLAYER_NAME],
		File: fPointer;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	format(sz_FileStr, sizeof(sz_FileStr), "stokens/%s", sz_playerName);
	if(fexist(sz_FileStr)) {
		fPointer = fopen(sz_FileStr, io_read);
		fread(fPointer, sz_playerName), fclose(fPointer);

		new
			i_tokenVal = strval(sz_playerName);

		format(sz_playerName, sizeof(sz_playerName), "%i", i_tokenVal + 1);
		fPointer = fopen(sz_FileStr, io_write);
		if(fPointer)
		{
			fwrite(fPointer, sz_playerName);
			fclose(fPointer);
		}
	}
	else {
		fPointer = fopen(sz_FileStr, io_write);
	    if(fPointer)
		{
			fwrite(fPointer, "1");
			fclose(fPointer);
		}
	}
	return 1;
}

stock SeeSpecialTokens(playerid, hoursneeded)
{
	if(PlayerInfo[playerid][pAdmin] >= 2) return 0; // Admins cant win
	if(hoursneeded <= 0) return 1;

	new
		szName[MAX_PLAYER_NAME],
		szFileStr[10 + MAX_PLAYER_NAME];

	GetPlayerName(playerid, szName, MAX_PLAYER_NAME);
	format(szFileStr, sizeof(szFileStr), "stokens/%s", szName);
	if(fexist(szFileStr)) {

		new
			File: iFile = fopen(szFileStr, io_read);

		fread(iFile, szFileStr);
		fclose(iFile);
		if(strval(szFileStr) >= hoursneeded) return 1;
	}
	return 0;
}

forward AddReportToken(playerid);
public AddReportToken(playerid)
{
	new
		sz_FileStr[32 + MAX_PLAYER_NAME],
		sz_playerName[MAX_PLAYER_NAME],
		i_timestamp[3],
		File: fPointer;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);

	format(sz_FileStr, sizeof(sz_FileStr), "admins/rtokens/%s[%d'%d'%d]", sz_playerName, i_timestamp[1], i_timestamp[2], i_timestamp[0]);
	if(fexist(sz_FileStr))
	{
		fPointer = fopen(sz_FileStr, io_read);
		fread(fPointer, sz_playerName);
		fclose(fPointer);

		new
			i_tokenVal = strval(sz_playerName);

		format(sz_playerName, sizeof(sz_playerName), "%i", i_tokenVal + 1);
		fPointer = fopen(sz_FileStr, io_write);
		if(fPointer)
		{
			fwrite(fPointer, sz_playerName);
			fclose(fPointer);
		}
	}
	else {
		fPointer = fopen(sz_FileStr, io_write);
		if(fPointer)
		{
			fwrite(fPointer, "1");
			fclose(fPointer);
		}
	}
	return 1;
}

forward AddCAReportToken(playerid);
public AddCAReportToken(playerid)
{

	new
		sz_FileStr[32 + MAX_PLAYER_NAME],
		sz_playerName[MAX_PLAYER_NAME],
		i_timestamp[3],
		File: fPointer;

	GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
	getdate(i_timestamp[0], i_timestamp[1], i_timestamp[2]);

	format(sz_FileStr, sizeof(sz_FileStr), "admins/catokens/%s[%d'%d'%d]", sz_playerName, i_timestamp[1], i_timestamp[2], i_timestamp[0]);
	if(fexist(sz_FileStr))
	{
		fPointer = fopen(sz_FileStr, io_readwrite);
		fread(fPointer, sz_playerName);
		fclose(fPointer);

		new
			i_tokenVal = strval(sz_playerName);

		format(sz_playerName, sizeof(sz_playerName), "%i", i_tokenVal + 1);
		fPointer = fopen(sz_FileStr, io_write);
		if(fPointer)
		{
			fwrite(fPointer, sz_playerName);
			fclose(fPointer);
		}
	}
	else {
		fPointer = fopen(sz_FileStr, io_write);
		if(fPointer)
		{
			fwrite(fPointer, "1");
			fclose(fPointer);
		}
	}
	return 1;
}

forward SeeReportToken(playerid,name[],month,day,year);
public SeeReportToken(playerid,name[],month,day,year)
{
	new string[128], rtoken;
	new strFromFile[128];
	format(string,sizeof(string),"admins/rtokens/%s[%d'%d'%d]",name,month,day,year);
	if(fexist(string))
	{
		new File: file = fopen(string, io_read);
		fread(file, strFromFile);
		fclose(file);

		rtoken = strval(strFromFile);
		format(string,sizeof(string),"Admin has %d report tokens on [%d/%d/%d].",rtoken,month,day,year);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "Admin does not have any logged report tokens for this date.");
		return 0;
	}
	return 1;
}

forward SeeCAReportToken(playerid,name[],month,day,year);
public SeeCAReportToken(playerid,name[],month,day,year)
{
	new string[128], rtoken;
	new strFromFile[128];
	format(string,sizeof(string),"admins/catokens/%s[%d'%d'%d]",name,month,day,year);
	if(fexist(string))
	{
		new File: file = fopen(string, io_read);
		fread(file, strFromFile);
		fclose(file);

		rtoken = strval(strFromFile);
		format(string,sizeof(string),"Junior Administrator has %d report tokens on [%d/%d/%d].",rtoken,month,day,year);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "Junior Administrator does not have any logged report tokens for this date.");
		return 0;
	}
	return 1;
}

stock IsInvalidSkin(skin) {
	if(!(0 <= skin <= 299)) return 1;
    return 0;
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock Float:GetElevatorZCoordForFloor(floorid)
{
    return (GROUND_Z_COORD + FloorZOffsets[floorid] + ELEVATOR_OFFSET); // A small offset for the elevator object itself.
}

stock Float:GetDoorsZCoordForFloor(floorid)
{
	return (GROUND_Z_COORD + FloorZOffsets[floorid]);
}

forward DrinkCooldown(playerid);
public DrinkCooldown(playerid)
{
    SetPVarInt(playerid, "DrinkCooledDown", 1);
    return 1;
}

forward RadarCooldown(playerid);
public RadarCooldown(playerid)
{
   DeletePVar(playerid, "RadarTimeout");
   return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	GetPlayerPos(playerid, lastpickup[0], lastpickup[1], lastpickup[2]);
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{

    if(newkeys & KEY_YES)
    {
        if(InsideTut{playerid} > 0)
		{
			TutorialStep(playerid);
			return 1;
		}
        if(GetPlayerTargetPlayer(playerid) != INVALID_PLAYER_ID && ProxDetectorS(5.0, playerid, GetPlayerTargetPlayer(playerid)) && !IsPlayerNPC(GetPlayerTargetPlayer(playerid)))
        {
            new string[64];
			new name[MAX_PLAYER_NAME+8];
			format(name, sizeof(name), "{FF0000}%s", GetPlayerNameEx(GetPlayerTargetPlayer(playerid)));
			SetPVarString(playerid, "pInteractName", name);
			SetPVarInt(playerid, "pInteractID", GetPlayerTargetPlayer(playerid));
            format(string, sizeof(string), "Pay\nGive\n");
			ShowPlayerDialog(playerid, INTERACTMAIN, DIALOG_STYLE_LIST, name, string, "Select", "Cancel");
        }
    }
   	/*else if ((newkeys & (KEY_JUMP | KEY_CROUCH)) == (KEY_JUMP | KEY_CROUCH) && (oldkeys & (KEY_JUMP | KEY_CROUCH)) != (KEY_JUMP | KEY_CROUCH))
    {
	    if (PlayerInfo[playerid][pAdmin] >= 2)
		{
	 		if (FlyingGod[playerid] == 0)
			{
	        	FlyingGod[playerid] = 1;
	        	StartFly(playerid);
	        	SendClientMessageEx(playerid, COLOR_WHITE, "Fly Mode On!");

	 		}
	 		else
	 		{
	        	FlyingGod[playerid] = 0;
	        	StopFly(playerid);
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "Fly Mode Off!");
	        }

	    }
	}*/
	else if((newkeys & KEY_FIRE) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerWeapon(playerid) == SPEEDGUN && GetPVarType(playerid, "SpeedRadar"))
	{
	    if(GetPVarInt(playerid, "RadarTimeout") == 0)
	    {
			new Float:x,Float:y,Float:z;
			foreach(new i: Player)
			{
				if(IsPlayerStreamedIn(i, playerid))
				{
					GetPlayerPos(i,x,y,z);
					if(IsPlayerAimingAt(playerid,x,y,z,10))
					{
						new string[68];
						format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~b~License Plate: ~w~%d~n~~b~Speed: ~w~%.0f MPH", GetPlayerVehicleID(i), fVehSpeed[i]);
						GameTextForPlayer(playerid, string,3500, 3);
						format(string, sizeof(string), "License Plate: %d. Speed: %.0f MPH", GetPlayerVehicleID(i), fVehSpeed[i]);
						SendClientMessageEx(playerid, COLOR_GRAD4, string);
						SetPVarInt(playerid, "RadarTimeout", 1);
						SetTimerEx("RadarCooldown", 3000, 0, "i", playerid);
						return 1;
					}
				}
			}
		}
	}
	else if((newkeys & 16) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerCuffed[playerid] == 0 && PlayerInfo[playerid][pBeingSentenced] == 0 && GetPVarType(playerid,"UsingAnim") && !GetPVarType(playerid, "IsFrozen"))
	{
		ClearAnimations(playerid);
		DeletePVar(playerid,"UsingAnim");
	}
	else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_BEER && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				SetPlayerHealth(playerid, cHealth+5);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
			DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_WINE && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				SetPlayerHealth(playerid, cHealth+8);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
			DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}

	else if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK && (newkeys & KEY_FIRE))
	{
	    if(GetPVarInt(playerid, "DrinkCooledDown") == 1)
	    {
			new Float: cHealth;
			GetPlayerHealth(playerid, cHealth);
		    if(cHealth < 100)
		    {
				SetPlayerHealth(playerid, cHealth+2);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "* You finish up the drink and throw it away.");
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		    }
		    DeletePVar(playerid, "DrinkCooledDown");
		    SetTimerEx("DrinkCooldown", 2500, 0, "i", playerid);
			return 1;
		}
	}
	else if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys))
	{
	    if(GetPVarInt(playerid, "NGPassenger") == 1)
	    {
	        TogglePlayerSpectating(playerid, 0);
		}
		if(GetPVarInt(playerid, "UsingSprunk"))
		{
			DeletePVar(playerid, "UsingSprunk");
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	else if(!IsPlayerInAnyVehicle(playerid) && newkeys & KEY_SECONDARY_ATTACK)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, lastpickup[0], lastpickup[1], lastpickup[2]))
	    {
	        return cmd_enter(playerid, "");
	    }
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, exitpos[0], exitpos[1], exitpos[2]))
	    {
	        return cmd_exit(playerid, "");
	    }

	    new Float:pos[3];
	    GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	    if(pos[1] < -1301.4 && pos[1] > -1303.2417 && pos[0] < 1786.2131 && pos[0] > 1784.1555)
		{    // He is using the elevator button
		    PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		    ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 10.0, 0, 0, 0, 0, 0);
	        ShowElevatorDialog(playerid);
		}
		else    // Is he in a floor button?
		{
		    if(pos[1] > -1301.4 && pos[1] < -1299.1447 && pos[0] < 1785.6147 && pos[0] > 1781.9902)
		    {
		        // He is most likely using it, check floor:
				new i=20;
				while(pos[2] < GetDoorsZCoordForFloor(i) + 3.5 && i > 0)
				    i --;

				if(i == 0 && pos[2] < GetDoorsZCoordForFloor(0) + 2.0)
				    i = -1;

				if(i <= 19)
				{
				    PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		    		ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 10.0, 0, 0, 0, 0, 0);
					CallElevator(playerid, i + 1);
					GameTextForPlayer(playerid, "~r~Elevator called", 3500, 4);
				}
		    }
		}
	}
	else if(IsKeyJustDown(128, newkeys, oldkeys))
	{
	    if(ConfigEventCPs[playerid][1] == 1 && ConfigEventCPs[playerid][0] == 1) {
        	SendClientMessageEx(playerid, COLOR_WHITE, "You have cancelled stage 1, you can't edit the checkpoint's position.");
        	ConfigEventCPs[playerid][1] = 0;
        	ConfigEventCPs[playerid][0] = 0;
        	ConfigEventCPs[playerid][2] = 0;
		}
		else if(ConfigEventCPs[playerid][1] == 2 && ConfigEventCPs[playerid][0] == 1) {
        	TogglePlayerControllable(playerid, true);
        	SendClientMessageEx(playerid, COLOR_WHITE, "You have cancelled stage 2, please choose another position. If you want to cancel stage 1(Edit CP Position) press the AIM button again.");
        	ConfigEventCPs[playerid][1] = 1;
		}
	}
	else if (IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
 	{
 	    if(ConfigEventCPs[playerid][1] == 1 && ConfigEventCPs[playerid][0] == 1) {
		    TogglePlayerControllable(playerid, false);
		    new string[92], Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
		    format(string, sizeof(string), "Position: X = %f.3 Y = %f.3 Z = %f.3", x, y, z);
		    SendClientMessageEx(playerid, COLOR_WHITE, "Are you sure this is the correct position? Please press the fire button again to confirm this, you can cancel by simply pressing the AIM button.");
            SendClientMessageEx(playerid, COLOR_YELLOW, string);
            ConfigEventCPs[playerid][1] = 2;
		}
		else if(ConfigEventCPs[playerid][1] == 2 && ConfigEventCPs[playerid][0] == 1) {
		    TogglePlayerControllable(playerid, true);
		    new string[298];
			GetPlayerPos(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]]);
		    format(string, sizeof(string), "You have successfuly created a race checkpoint. Position: X = %f.3 Y = %f.3 Z = %f.3 - ID:%d", EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], ConfigEventCPId[playerid]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
			if(ConfigEventCPs[playerid][2] == 1)
			{
			    EventRCPU[ConfigEventCPId[playerid]] = 1;
            	EventRCPS[ConfigEventCPId[playerid]] = 10.0;
            	if(ConfigEventCPId[playerid] == 0) {
					EventRCPT[ConfigEventCPId[playerid]] = 1;
					SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
            	else {
					EventRCPT[ConfigEventCPId[playerid]] = 2;
					SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
				ConfigEventCPs[playerid][1] = 3;
            	format(string,sizeof(string),"Race Checkpoint %d Size", ConfigEventCPId[playerid]);
				ShowPlayerDialog(playerid,RCPSIZE,DIALOG_STYLE_INPUT,string,"You are now in stage 3, which means you will need to choose the size of the checkpoint\nYou now have a preview of the checkpoint(Step outside the checkpoint so you can see it)\nNote: Checkpoint is now made with the default settings,\nyou may choose not to continue checkpoint won't be affected.","Ok","Cancel");
			}
			else
			{
	        	if(EventRCPT[ConfigEventCPId[playerid]] == 1) {
					SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
				else if(EventRCPT[ConfigEventCPId[playerid]] == 4) {
				    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
				else {
				    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
			}
		}
 	    if( PlayerInfo[playerid][pC4Used] == 1 )
 	    {
			if(GoChase[playerid] < 999)
			{
			    if(IsPlayerInRangeOfPoint(GoChase[playerid], 12.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
			    {
			        if(PlayerInfo[GoChase[playerid]][pHeadValue] >= 1)
					{
						if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
						{
							new string[128];
							new takemoney = (PlayerInfo[GoChase[playerid]][pHeadValue] / 4) * 2;
							GivePlayerCash(playerid, takemoney);
							GivePlayerCash(GoChase[playerid], -takemoney);
							format(string,sizeof(string),"Hitman %s has fulfilled the contract on %s and collected $%d",GetPlayerNameEx(playerid),GetPlayerNameEx(GoChase[playerid]),takemoney);
							SendFamilyMessage(8, COLOR_YELLOW, string);
							format(string,sizeof(string),"You have been critically injured by a Hitman and lost $%d!",takemoney);
							ResetPlayerWeaponsEx(GoChase[playerid]);
						    // SpawnPlayer(GoChase[playerid]);
							SendClientMessageEx(GoChase[playerid], COLOR_YELLOW, string);
							PlayerInfo[GoChase[playerid]][pHeadValue] = 0;
							PlayerInfo[playerid][pCHits] += 1;
							SetPlayerHealth(GoChase[playerid], 0.0);
							// KillEMSQueue(GoChase[playerid]);
							GotHit[GoChase[playerid]] = 0;
							GetChased[GoChase[playerid]] = INVALID_PLAYER_ID;
							GoChase[playerid] = INVALID_PLAYER_ID;
						}
					}
			    }
			}
 	        PlayerInfo[playerid][pC4Used] = 0;
			CreateExplosion(GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z"), 7, 8);
			PickUpC4(playerid);
			SendClientMessageEx(playerid, COLOR_YELLOW, " Bomb has been detonated!");
			PlayerInfo[playerid][pC4Used] = 0;
			return 1;
 	    }
 	    if(GetPVarInt(playerid, "MovingStretcher") != -1)
 	    {
 	        KillTimer(GetPVarInt(playerid, "TickEMSMove"));
		    MoveEMS(playerid);
			return 1;
 	    }
		if(GetPVarInt(playerid, "editingcdvehpos"))
		{
			TogglePlayerControllable(playerid, false);
		    ShowPlayerDialog(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Warning:","Is this the new position you want?","Ok","Cancel");
		}
		if(GetPVarInt(playerid, "editingcdvehnew"))
		{
            TogglePlayerControllable(playerid, false);
	        ShowPlayerDialog(playerid,DIALOG_CDEDITPARK,DIALOG_STYLE_MSGBOX,"Warning:","Is this the new position you want?","Ok","Cancel");
		}
		if(GetPVarInt(playerid, "editingfamhq") != 255)
		{
		    if(GetPVarInt(playerid, "editingfamhqaction") == 1)
		    {
      			DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Warning:","Is this the entrance you want?","Ok","Cancel");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 2)
		    {
		        DeletePVar(playerid, "editingfamhqaction");
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Warning:","Is this the exit you want?","Ok","Cancel");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 5)
		    {
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQENTRANCE,DIALOG_STYLE_MSGBOX,"Warning:","Is this the entrance you want?","Ok","Cancel");
		    }
		    else if(GetPVarInt(playerid, "editingfamhqaction") == 6)
		    {
		        TogglePlayerControllable(playerid, false);
	        	ShowPlayerDialog(playerid,HQEXIT,DIALOG_STYLE_MSGBOX,"Warning:","Is this the exit you want?","Ok","Cancel");
		    }

		}
 		new Float:health;
 		GetPlayerHealth(playerid, health);

		if(GetPVarInt(playerid, "UsingSprunk"))
		{
		    new hpint = floatround( health, floatround_round );
		    if( hpint >= 100 )
			{
  				SendClientMessageEx(playerid, COLOR_GREY, " You already have full health.");
	 			return 1;
	   		}
	   		else
	   		{
				GetPlayerHealth(playerid, health);
				SetPlayerHealth(playerid, health+1.0);
			}
		}
	}
	else if((newkeys & KEY_SPRINT) && GetPlayerState(playerid) == 2)// Pressing the gas, detonates the bomb.
    {
		new vehicleid = GetPlayerVehicleID(playerid);
		new string[128];
        if(GetChased[playerid] < 999 && VehicleBomb{vehicleid} == 1)
		{
			if(PlayerInfo[playerid][pHeadValue] >= 1)
			{
				if(PlayerInfo[GetChased[playerid]][pMember] == 8 || PlayerInfo[GetChased[playerid]][pLeader] == 8)
				{
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(playerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 1);
					VehicleBomb{vehicleid} = 0;
					PlacedVehicleBomb[GetChased[playerid]] = INVALID_VEHICLE_ID;
					new takemoney = (PlayerInfo[playerid][pHeadValue] / 4) * 2;
					GivePlayerCash(GetChased[playerid], takemoney);
					GivePlayerCash(playerid, -takemoney);
					format(string,sizeof(string),"Hitman %s has fulfilled the contract on %s and collected $%d.",GetPlayerNameEx(GetChased[playerid]),GetPlayerNameEx(playerid),takemoney);
					SendFamilyMessage(8, COLOR_YELLOW, string);
					format(string,sizeof(string),"You have been critically injured by a hitman and lost $%d!",takemoney);
					ResetPlayerWeaponsEx(playerid);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					PlayerInfo[playerid][pHeadValue] = 0;
					PlayerInfo[GetChased[playerid]][pCHits] += 1;
					SetPlayerHealth(playerid, 0.0);
					GoChase[GetChased[playerid]] = INVALID_PLAYER_ID;
					PlayerInfo[GetChased[playerid]][pC4Used] = 0;
					PlayerInfo[GetChased[playerid]][pC4] = 0;
					GotHit[playerid] = 0;
					GetChased[playerid] = INVALID_PLAYER_ID;
					return 1;
				}
			}
		}
    }
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if(newstate != 2) NOPTrigger[playerid] = 0;
	if(GettingSpectated[playerid] != INVALID_PLAYER_ID)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = INVALID_PLAYER_ID;
	        Spectate[spectator] = INVALID_PLAYER_ID;
		}

	    if(newstate == PLAYER_STATE_DRIVER && PlayerInfo[spectator][pAdmin] >= 2 || newstate == PLAYER_STATE_PASSENGER && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
			new carid = GetPlayerVehicleID( playerid );
			PlayerSpectateVehicle( spectator, carid );
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && PlayerInfo[spectator][pAdmin] >= 2)
	    {
	        TogglePlayerSpectating(spectator, true);
		   	PlayerSpectatePlayer( spectator, playerid );
		   	SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
	    }
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		StopAudioStreamForPlayerEx(playerid);
		if(GetPVarType(playerid, "Siren"))
		{
  			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
    		if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1);
      		DeletePVar(playerid, "Siren");
		}

		if(GettingSpectated[playerid] < MAX_PLAYERS && PlayerInfo[GettingSpectated[playerid]][pAdmin] >= 2) {
			new spectator = GettingSpectated[playerid];
	        // Preventing possible buffer overflows with the arrays
	 		TogglePlayerSpectating(spectator, true);
			PlayerSpectatePlayer( spectator, playerid );
			SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
			SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
			SetPlayerVirtualWorld( spectator, GetPlayerVirtualWorld( playerid ) );
		}

	    if(oldstate == PLAYER_STATE_DRIVER)
		{
		    new newcar = gLastCar[playerid],engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
			if((engine == VEHICLE_PARAMS_ON) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510 && newcar != CrateIslandVehicles[0] && newcar != CrateIslandVehicles[1]) {
				if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] == 1)
				{
					SetVehicleParamsEx(newcar,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
					arr_Engine{newcar} = 0;
					SendClientMessageEx(playerid, COLOR_GREY, "Car Engine Off.");
				}
			}
		    SetPlayerWeaponsEx(playerid);
		    /*new vehicleid = GetPlayerVehicleID(playerid);
		    new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(vehicleid) != 509 && GetVehicleModel(vehicleid) != 481 && GetVehicleModel(vehicleid) != 510 && vehicleid != CrateIslandVehicles[0] && vehicleid != CrateIslandVehicles[1]) {
				if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] == 1)
				{
					SetVehicleParamsEx(vehicleid,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
					return 1;
				}
   			}*/
		}
		else if(oldstate == PLAYER_STATE_PASSENGER) SetPlayerWeaponsEx(playerid);

		if(ConnectedToPC[playerid] == 1337)//mdc
	    {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now logged off the MDC.");
	        ConnectedToPC[playerid] = 0;
		}
        if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			new string[42];
			format(string, sizeof(string), "* You are now off duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			if(PlayerInfo[playerid][pMember] != 10 && PlayerInfo[playerid][pLeader] != 10) { SetPlayerColor(playerid, TEAM_HIT_COLOR); }
			TransportTime[playerid] = 0;
   			TransportCost[playerid] = 0;
		}
		if(TransportDriver[playerid] < MAX_PLAYERS)
		{
			new string[128];
			TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			format(string, sizeof(string), "~w~The ride cost~n~~r~$%d",TransportCost[playerid]);
			GameTextForPlayer(playerid, string, 5000, 3);
			format(string, sizeof(string), "~w~Passenger left the taxi.~n~~g~Earned $%d",TransportCost[playerid]);
			GameTextForPlayer(TransportDriver[playerid], string, 5000, 3);
			GivePlayerCash(playerid, -TransportCost[playerid]);

			if(TransportCost[playerid] >= 10000)
			{
				format(string, sizeof(string), "%s (IP:%s) has taxied %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid), GetPlayerNameEx(TransportDriver[playerid]), GetPlayerIpEx(TransportDriver[playerid]), TransportCost[playerid]);
				//Log("logs/pay.log", string);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			TransportTime[TransportDriver[playerid]] = 0;
			TransportCost[TransportDriver[playerid]] = 0;
			TransportCost[playerid] = 0;
			TransportTime[playerid] = 0;
			TransportDriver[playerid] = INVALID_PLAYER_ID;
		}
	}
    if(newstate == PLAYER_STATE_PASSENGER) // TAXI & BUSSES
	{
		fVehSpeed[playerid] = 0;
		fVehHealth[playerid] = 0;
 		if(!isnull(stationidv[GetPlayerVehicleID(playerid)]))
		{
   			PlayAudioStreamForPlayerEx(playerid, stationidv[GetPlayerVehicleID(playerid)]);
		}
        new vehicleid = GetPlayerVehicleID(playerid);

        if(PlayerInfo[playerid][pGuns][4] > 0)	SetPlayerArmedWeapon(playerid,PlayerInfo[playerid][pGuns][4]);
		else SetPlayerArmedWeapon(playerid,0);

	    gLastCar[playerid] = vehicleid;
	    foreach(new i: Player)
	    {
     		if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
       		{
				if(GetPlayerCash(playerid) < TransportValue[i])
				{
					new string[28];
					format(string, sizeof(string), "* You need $%d to enter.", TransportValue[i]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(playerid);
					new Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					SetPlayerPosEx(playerid, X, Y, Z+2);
					TogglePlayerControllable(playerid, 1);
				}
				else
				{
					new string[35+MAX_PLAYER_NAME];
					if(TransportDuty[i] == 1)
					{
						format(string, sizeof(string), "* You paid $%d to the taxi driver.", TransportValue[i]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Passenger %s (%d) has entered your taxi.", GetPlayerNameEx(playerid),playerid);
						SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
						TransportTime[i] = 1;
						TransportTime[playerid] = 1;
						TransportCost[playerid] = TransportValue[i];
						TransportCost[i] = TransportValue[i];
						TransportDriver[playerid] = i;
					}
					else if(TransportDuty[i] == 2)
					{
						format(string, sizeof(string), "* You paid $%d to the Taxi Driver.", TransportValue[i]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Passenger %s (%d) has entered your Taxi.", GetPlayerNameEx(playerid),playerid);
						SendClientMessageEx(i, COLOR_LIGHTBLUE, string);
					}
					GivePlayerCash(playerid, - TransportValue[i]);
					TransportMoney[i] += TransportValue[i];
				}
      		}
	    }
	}
	if(newstate == PLAYER_STATE_WASTED)
	{
	    if(GetPVarInt(playerid, "EventToken") == 0)
	    {
			SetPVarInt(playerid, "MedicBill", 1);
		}
		if(ConnectedToPC[playerid] == 1337)//mdc
	    {
	        ConnectedToPC[playerid] = 0;
		}
		Seatbelt[playerid] = 0;
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
		fVehSpeed[playerid] = 0;
		fVehHealth[playerid] = 0;
	    if(!isnull(stationidv[GetPlayerVehicleID(playerid)]))
		{
   			PlayAudioStreamForPlayerEx(playerid, stationidv[GetPlayerVehicleID(playerid)]);
		}

		SetPlayerArmedWeapon(playerid, 0);

		new
			newcar = GetPlayerVehicleID(playerid),
			engine, lights, alarm, doors, bonnet, boot, objective, v;

		gLastCar[playerid] = newcar;
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510 && newcar != CrateIslandVehicles[0] && newcar != CrateIslandVehicles[1]) {
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] == 1)
			{
				SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
				SendClientMessageEx(playerid, COLOR_GREY, "Car Engine On.");
				arr_Engine{newcar} = 1;
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle's engine is not running - if you wish to start it, type /car engine.");
		}

	 	foreach(new i: Player) {
	   		v = GetPlayerVehicle(i, newcar);
		    if(v != -1) {
				if(i == playerid) {

					new
						string[96];

					format(string, sizeof(string),"You are the owner of this %s.", GetVehicleName(newcar));
					SendClientMessageEx(playerid, COLOR_GREY, string);
				    //new engine,lights,alarm,doors,bonnet,boot,objective;
					/*GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510 && newcar != CrateIslandVehicles[0] && newcar != CrateIslandVehicles[1]) {
						if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] == 1)
						{
							SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
							arr_Engine{newcar} = 1;
							SendClientMessageEx(playerid, COLOR_GREY, "Car Engine On.");
						}
		   			}*/
					if(PlayerVehicleInfo[i][v][pvTicket] != 0)
					{
						format(string, sizeof(string),"A $%d parking ticket was left on your vehicle. You must pay the ticket at the DMV in Dilimore.", PlayerVehicleInfo[i][v][pvTicket]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
						SendClientMessageEx(playerid, COLOR_GREY, "Failure to pay this ticket as soon as possible will result in a fine, or even an arrest.");
					}
				}
				else if(i == PlayerInfo[playerid][pVehicleKeysFrom] && v == PlayerInfo[playerid][pVehicleKeys]) {

					new
						string[64 + MAX_PLAYER_NAME];

					format(string, sizeof(string),"You have the keys for this %s from owner %s.", GetVehicleName(newcar), GetPlayerNameEx(i));
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 1) {
				    GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				else if(PlayerVehicleInfo[i][v][pvLocked] == 1 && PlayerVehicleInfo[i][v][pvLock] == 2) {

					new
						string[49 + MAX_PLAYER_NAME];

	          		if(PlayerInfo[playerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "* %s (%d) has been stunned by the electric anti-theft.",GetPlayerNameEx(playerid),playerid);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:X, Float:Y, Float:Z;
	     				GetPlayerPos(playerid, X, Y, Z);
						//SendAudioToRange(64, 100, X, Y, Z, 20.0);
	     				SetPlayerPosEx(playerid, X + 1, Y, Z);
	         			RemovePlayerFromVehicle(playerid);
	         			SetPVarInt(playerid, "IsFrozen", 1);
	            		TogglePlayerControllable(playerid,0);
		            	SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
			            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
					}
					else
					{
	    				format(string, sizeof(string), "Warning: This %s is owned by %s (%d).", GetVehicleName(newcar), GetPlayerNameEx(i),i);
	      				SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}
				return 1;
			}
		}

		for(new f = 0; f < MAX_FAMILY; f++) {
			v = GetGangVehicle(f, newcar);
			if(v != -1) {
				new string[49 + MAX_PLAYER_NAME];
				if(PlayerInfo[playerid][pFMember] == f)
				{
					format(string, sizeof(string), "You are in the family that owns this %s.", GetVehicleName(newcar));
	    			SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 1)
				{
					GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
					SetVehicleParamsEx(newcar,engine,lights,VEHICLE_PARAMS_ON,doors,bonnet,boot,objective);
					SetTimerEx("DisableVehicleAlarm", 20000, 0, "d",  newcar);
				}
				else if(FamilyVehicleInfo[f][v][fvLocked] == 1 && FamilyVehicleInfo[f][v][fvLock] == 2)
				{
		            format(string, sizeof(string), "* %s (%d) has been stunned by the electric anti-theft.",GetPlayerNameEx(playerid),playerid);
		            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		            new Float:X, Float:Y, Float:Z;
		            GetPlayerPos(playerid, X, Y, Z);
					//SendAudioToRange(64, 100, X, Y, Z, 20.0);
		            SetPlayerPosEx(playerid, X + 1, Y, Z);
		            RemovePlayerFromVehicle(playerid);
		            new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz);
					SetPVarInt(playerid, "IsFrozen", 1);
		            TogglePlayerControllable(playerid,0);
		            SetTimerEx("ReleasePlayer", 10000, 0, "d", playerid);
		            GameTextForPlayer(playerid,"~r~STUNNED!",11000,3);
				}
				return 1;
			}
		}
		new vehicleid = newcar;
		if(IsVIPcar(vehicleid))
		{
		    if(PlayerInfo[playerid][pDonateRank] > 0)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: This is a VIP vehicle from the VIP garage, therefore it has unlimited fuel.");
			}
		    else
			{
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.3);
				PlayerPlaySound(playerid, 1130, slx, sly, slz+1.3);
			    RemovePlayerFromVehicle(playerid);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a VIP, this is a vehicle from the VIP Garage!");
			}
		}
		else if(IsAnAmbulance(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 4||PlayerInfo[playerid][pLeader] == 4)
			{
			    if(FDSAVehicles[13] == vehicleid && PlayerInfo[playerid][pRank] < 5)
			    {
			        RemovePlayerFromVehicle(playerid);
			        new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz);
			        NOPCheck(playerid);
					SendClientMessageEx(playerid, COLOR_GRAD2, "Only ranks 5+ can drive this vehicle.");
			    }
			}
		    else
			{
			    SendClientMessageEx(playerid,COLOR_GREY,"   You are not in the FDSA!");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
				NOPCheck(playerid);
			}
		}
		else if(IsAnSASDCar(vehicleid))
		{
			if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
		    {
		    }
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		        NOPCheck(playerid);
		        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SASD!");
		    }
		}
		else if(IsAnPrisonCar(vehicleid))
		{
		    if(IsACop(playerid))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a LEO!");
			}
		}
		else if(IsAnSFPDCar(vehicleid))
		{
            if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SFPD!");
			}
		}
		else if(IsAnEPCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 5)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SFPD Executive Protection Division!");
			}
		}
		else if(IsAnWPCar(vehicleid))
		{
		   	if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 7){
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SASD!");
			}
		}
		else if(IsACopCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 1||PlayerInfo[playerid][pLeader] == 1)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the LSPD!");
			}
		}
		else if(IsASaPaAirCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 17 && PlayerInfo[playerid][pDivision] == 3 ||PlayerInfo[playerid][pLeader] == 17 && PlayerInfo[playerid][pDivision] == 3)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SA:PA Air Division!");
			}
		}
		else if(IsASaPaCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 17||PlayerInfo[playerid][pLeader] == 17)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SA:PA!");
			}
		}
	 	else if(IsAHouse275Car(vehicleid))
		{
		    TogglePlayerControllable(playerid, false);
	  		ShowPlayerDialog(playerid, House275CAR, DIALOG_STYLE_INPUT, "KeyPad", "Password:", "ENTER", "ENTER");
		}
		else if(IsAFBICar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 2||PlayerInfo[playerid][pLeader] == 2)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the FBI!");
			}
		}
		else if(IsAnNGARMCar(vehicleid))
		{
		    if((PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11) && (PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 3))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS ARM Division!");
			}
		}
		else if(vehicleid == FDSAVehicles[12] || vehicleid == FDSAVehicles[33] || vehicleid == FDSAVehicles[34] || vehicleid == FDSAVehicles[35])
		{
		    if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 1)
		    {
		    }
			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Fire Department Division!");
			}
		}
		else if(vehicleid == FDSAVehicles[37] || vehicleid == FDSAVehicles[36])
		{
		    if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2)
		    {
		    }
			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Life Flight Division!");
			}
		}
		else if(IsAnNGAIRCar(vehicleid))
		{
		    if((PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11) && (PlayerInfo[playerid][pDivision] == 1 || PlayerInfo[playerid][pDivision] == 3 ||PlayerInfo[playerid][pDivision] == 4))
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS AIR Division!");
			}
		}
		else if(IsAnNGCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS!");
			}
		}
		else if(IsAnDOCCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 11||PlayerInfo[playerid][pLeader] == 11)
			{
			}
		    else
			{
	   			NOPCheck(playerid);
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SAAS!");
			}
		}
		else if(IsAnMPSCar(vehicleid))
		{
		    if(IsACop(playerid))
		    {
		    }
		    else
		    {
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		        NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
		    }
		}
		else if(IsACoastguardCar(vehicleid))
		{
		    if( ( PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 ) || ( PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 3 ))
			{
			}
			else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the Coastguard division!");
			}
		}
	 	else if(IsANewsCar(vehicleid))
		{
		    if(PlayerInfo[playerid][pMember] == 9 ||PlayerInfo[playerid][pLeader] == 9)
			{
			}
		    else
			{
			    RemovePlayerFromVehicle(playerid);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
			    NOPCheck(playerid);
			    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SANews!");
			}
		}
	   	else if(IsAPlane(vehicleid))
		{
	  		if(PlayerInfo[playerid][pFlyLic] != 1)
	  		{
		  		RemovePlayerFromVehicle(playerid);
		  		new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		  		NOPCheck(playerid);
			 	SendClientMessageEx(playerid,COLOR_GREY,"You don't have a pilot license!");
	  		}
		}
		else if(TaxiVehicles[10] ==vehicleid || TaxiVehicles[11]==vehicleid || TaxiVehicles[12]==vehicleid)
		{
		    if(PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pDivision] == 2|| PlayerInfo[playerid][pLeader] == 10)
			{
			}
		    else
			{
		        SendClientMessageEx(playerid,COLOR_GREY,"   You are not in the Taxi Company! (ATO Division)");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		    }
		}
		else if(TaxiCompanyVehicle(vehicleid))
		{
	        if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10)
			{
			}
		    else
			{
		        SendClientMessageEx(playerid,COLOR_GREY,"   You are not in the Taxi Company!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		    }
		}
		else if(IsAHelicopter(vehicleid))
		{
		    PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
			GivePlayerValidWeapon(playerid, 46, 60000);
		}
		else if(IsAnTaxi(vehicleid) || IsAnBus(vehicleid))
		{
	        if(PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10 || PlayerInfo[playerid][pTaxiLicense] == 1)
			{
			}
		    else
			{
		        SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Taxi/Bus Driver!");
		        RemovePlayerFromVehicle(playerid);
		        new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz);
		    }
		}

		//if(lights == VEHICLE_PARAMS_UNSET) SetVehicleParamsEx(newcar,engine,VEHICLE_PARAMS_OFF,alarm,doors,bonnet,boot,objective);
	    if(GetCarDealershipVehicleId(newcar) != -1 && GetCarDealershipVehicleId(newcar) == GetPVarInt(playerid, "editingcdveh")) return 1;
        if(GetCarDealershipVehicleId(newcar) != -1)
        {
			new string[57 + 20 + 4];
			format(string, sizeof(string),"Would you like to buy this %s?\n\nThis vehicle costs $%d.", GetVehicleName(newcar), CarDealershipInfo[GetCarDealershipId(newcar)][cdVehicleCost][GetCarDealershipVehicleId(newcar)]);
		    ShowPlayerDialog(playerid,DIALOG_CDBUY,DIALOG_STYLE_MSGBOX,"Warning:",string,"Buy","Cancel");
		    TogglePlayerControllable(playerid, false);
		    return 1;
        }
        /*
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && GetVehicleModel(newcar) != 509 && GetVehicleModel(newcar) != 481 && GetVehicleModel(newcar) != 510 && vehicleid != CrateIslandVehicles[0] && vehicleid != CrateIslandVehicles[1]) {
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] == 1)
			{
				SetVehicleParamsEx(newcar,VEHICLE_PARAMS_ON,lights,alarm,doors,bonnet,boot,objective);
				SendClientMessageEx(playerid, COLOR_GREY, "Car Engine On.");
				arr_Engine{vehicleid} = 1;
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle's engine is not running - if you wish to start it, type /car engine.");
		}*/
		else if((engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF) && (vehicleid == CrateIslandVehicles[0] || vehicleid == CrateIslandVehicles[1]))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You must request clearance to take off. /announcetakeoff to put in the request.");
		}
	}
	if((newstate == 2 || newstate == 3 || newstate == 7 || newstate == 9) && pTazer{playerid} == 1)
	{
		GivePlayerValidWeapon(playerid, pTazerReplace{playerid}, 60000);
		pTazer{playerid} = 0;
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		if(ConnectedToPC[playerid] == 1337)//mdc
	    {
	        ConnectedToPC[playerid] = 0;
		}
	}
	return 1;
}

stock HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //bullit
		}
		case 70:
		{
			return 130000; //infurnus
		}
		case 71:
		{
			return 100000; //turismo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

stock player_remove_vip_toys(iTargetID)
{
	if(PlayerInfo[iTargetID][pDonateRank] >= 3) return 1;
	else for(new iToyIter; iToyIter < MAX_PLAYER_ATTACHED_OBJECTS; ++iToyIter) {
		for(new LoopRapist; LoopRapist < sizeof(HoldingObjectsCop); ++LoopRapist) {
			if(HoldingObjectsCop[LoopRapist][holdingmodelid] == PlayerToyInfo[iTargetID][iToyIter][ptModelID]) {
				PlayerToyInfo[iTargetID][iToyIter][ptModelID] = 0;
				PlayerToyInfo[iTargetID][iToyIter][ptBone] = 0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosX] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosY] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosZ] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosX] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosY] = 0.0;
				PlayerToyInfo[iTargetID][iToyIter][ptPosZ] = 0.0;
				if(IsPlayerAttachedObjectSlotUsed(iTargetID, iToyIter)) RemovePlayerAttachedObject(iTargetID, iToyIter);

				g_mysql_SaveToys(iTargetID, iToyIter);
			}
		}
	}
	SendClientMessageEx(iTargetID, COLOR_WHITE, "All accessories/toys that were property of your former employer have been removed.");
	return 1;
}

stock InitTurfWars()
{
	for(new i = 0; i < MAX_TURFS; i++)
	{
	    TurfWars[i][twOwnerId] = -1;
	    TurfWars[i][twActive] = 0;
	    TurfWars[i][twLocked] = 0;
	    TurfWars[i][twSpecial] = 0;
	    TurfWars[i][twTimeLeft] = 0;
	    TurfWars[i][twVulnerable] = 12;
	    TurfWars[i][twAttemptId] = -1;
	    TurfWars[i][twGangZoneId] = -1;
	    TurfWars[i][twAreaId] = -1;
	    TurfWars[i][twFlash] = -1;
	    TurfWars[i][twFlashColor] = 0;
	}
	return 1;
}

stock ShowInteriorDialog(playerid)
{
	new dialog_string[2600];
	for(new i = 0; i < sizeof(InteriorDialogNames); i++) {
		if(!i) {
			format(dialog_string, sizeof(dialog_string), InteriorDialogNames[i]);
		}
		else {
			format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, InteriorDialogNames[i]);
		}
	}
	return ShowPlayerDialog(playerid, DIALOG_INTERIOR_MENU, DIALOG_STYLE_LIST, "Interiors Teleport Dialog", dialog_string, "Select", "Cancel");
}

stock ShowHouseInteriorDialog(playerid)
{
	new dialog_string[2600];
	for(new i = 0; i < sizeof(HouseInteriorDialogNames); i++) {
		if(!i) {
			format(dialog_string, sizeof(dialog_string), HouseInteriorDialogNames[i]);
		}
		else {
			format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, HouseInteriorDialogNames[i]);
		}
	}
	return ShowPlayerDialog(playerid, DIALOG_HOUSE_INTERIOR_MENU, DIALOG_STYLE_LIST, "House Interior Dialog", dialog_string, "Select", "Cancel");
}

stock CreateTurfWarsZone(forcesync, zone)
{

    if(TurfWars[zone][twMinX] != 0.0 && TurfWars[zone][twMinY] != 0.0 && TurfWars[zone][twMaxX] != 0.0 && TurfWars[zone][twMaxY] != 0.0) {
 		TurfWars[zone][twGangZoneId] = GangZoneCreate(TurfWars[zone][twMinX],TurfWars[zone][twMinY],TurfWars[zone][twMaxX],TurfWars[zone][twMaxY]);
   		TurfWars[zone][twAreaId] = CreateDynamicRectangle(TurfWars[zone][twMinX],TurfWars[zone][twMinY],TurfWars[zone][twMaxX],TurfWars[zone][twMaxY],-1,-1,-1);
	}

	if(forcesync) {
	    SyncTurfWarsRadarToAll();
	}

	SaveTurfWars();
}

stock ResetTurfWarsZone(forcesync, zone)
{
	TurfWars[zone][twActive] = 0;
	TurfWars[zone][twFlash] = -1;
	TurfWars[zone][twFlashColor] = 0;
	TurfWars[zone][twTimeLeft] = 0;
	TurfWars[zone][twAttemptId] = -1;

	if(forcesync) {
	    SyncTurfWarsRadarToAll();
	}

	SaveTurfWars();
}

stock SetOwnerTurfWarsZone(forcesync, zone, ownerid)
{
	TurfWars[zone][twOwnerId] = ownerid;

	if(forcesync) {
	    SyncTurfWarsRadarToAll();
	}

	SaveTurfWars();
}

stock DestroyTurfWarsZone(zone)
{
	TurfWars[zone][twActive] = 0;

	if(TurfWars[zone][twGangZoneId] != -1) {
	    GangZoneDestroy(TurfWars[zone][twGangZoneId]);
	}

	if(TurfWars[zone][twAreaId] != -1) {
	    DestroyDynamicArea(TurfWars[zone][twAreaId]);
	}

	TurfWars[zone][twMinX] = 0;
	TurfWars[zone][twMinY] = 0;
	TurfWars[zone][twMaxX] = 0;
	TurfWars[zone][twMaxY] = 0;
 	TurfWars[zone][twOwnerId] = -1;
	TurfWars[zone][twGangZoneId] = -1;
	TurfWars[zone][twAreaId] = -1;
	TurfWars[zone][twFlash] = -1;
	TurfWars[zone][twFlashColor] = 0;
	TurfWars[zone][twActive] = 0;
 	TurfWars[zone][twLocked] = 0;
 	TurfWars[zone][twSpecial] = 0;
 	TurfWars[zone][twTimeLeft] = 0;
 	TurfWars[zone][twAttemptId] = -1;
	TurfWars[zone][twVulnerable] = 12;

	SyncTurfWarsRadarToAll();
	SaveTurfWars();

}

stock GetPlayerTurfWarsZone(playerid)
{
	for(new i = 0; i < MAX_TURFS; i++) {
    	if(IsPlayerInDynamicArea(playerid, TurfWars[i][twAreaId])) {
    	    return i;
    	}
	}
	return -1;
}

stock ShutdownTurfWarsZone(zone)
{
	new string[128];
	foreach(new i: Player) {
	    if(IsPlayerInDynamicArea(i, TurfWars[zone][twAreaId])) {
	        format(string,sizeof(string),"Law Enforcement has attempted to shutdown this turf!");
	        SendClientMessageEx(i,COLOR_YELLOW,string);
	    }
	}
	ResetTurfWarsZone(0, zone);

	TurfWars[zone][twActive] = 1;
	TurfWars[zone][twTimeLeft] = 600;
	TurfWars[zone][twVulnerable] = 0;
	TurfWars[zone][twAttemptId] = -1;
	TurfWars[zone][twFlash] = 1;
	TurfWars[zone][twFlashColor] = 0;

	SyncTurfWarsRadarToAll();

	SaveTurfWars();
}

stock TakeoverTurfWarsZone(familyid, zone)
{
	new string[128];
	foreach(new i: Player) {
	    if(IsPlayerInDynamicArea(i, TurfWars[zone][twAreaId])) {
	        format(string,sizeof(string),"%s has attempted to takeover this turf for their own!",FamilyInfo[familyid][FamilyName]);
	        SendClientMessageEx(i,COLOR_YELLOW,string);
	    }
	}
	ResetTurfWarsZone(0, zone);

	TurfWars[zone][twActive] = 1;
	TurfWars[zone][twTimeLeft] = 600;
	TurfWars[zone][twVulnerable] = 0;
	TurfWars[zone][twAttemptId] = familyid;
	TurfWars[zone][twFlash] = 1;
	TurfWars[zone][twFlashColor] = FamilyInfo[familyid][FamilyColor];

	SyncTurfWarsRadarToAll();
}

stock CaptureTurfWarsZone(familyid, zone)
{
	new string[128];
	foreach(new i: Player) {
	    if(IsPlayerInDynamicArea(i, TurfWars[zone][twAreaId])) {
			format(string,sizeof(string),"%s has successfully claimed this turf for their own!",FamilyInfo[familyid][FamilyName]);
			SendClientMessageEx(i,COLOR_RED,string);
			//SendAudioToPlayer(i, 62, 100);
	    }
	    if(PlayerInfo[i][pGangModerator] == 1) {
	        format(string,sizeof(string),"%s has successfully claimed turf %d",FamilyInfo[familyid][FamilyName], zone);
			SendClientMessageEx(i,COLOR_RED,string);
		}
	}
	TurfWars[zone][twOwnerId] = familyid;
	TurfWars[zone][twVulnerable] = 12;

	ResetTurfWarsZone(1, zone);

	SaveTurfWars();
}

stock ExtortionTurfsWarsZone(playerid, type, money)
{
    if(GetPlayerTurfWarsZone(playerid) != -1)
	{
	    if(GetPlayerInterior(playerid) != 0) return 1; // Interior fix
	    new string[128];
 		new tw = GetPlayerTurfWarsZone(playerid);
		switch(type)
		{
			case 1: // Drugs
			{
			    if(TurfWars[tw][twOwnerId] != -1)
			    {
			        new ownerid = TurfWars[tw][twOwnerId];
			        new famid = PlayerInfo[playerid][pFMember];
			        if(famid != ownerid)
			        {
						format(string,sizeof(string),"* You have been taxed $%d dollars for selling drugs on %s's Turf.",money/4,FamilyInfo[ownerid][FamilyName]);
						FamilyInfo[ownerid][FamilyCash] += money/4;
						GivePlayerCash(playerid, -money/4);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						SaveFamilies();
					}
				}
			}
			case 2: // Vests
			{
			    if(TurfWars[tw][twOwnerId] != -1)
			    {
			        new ownerid = TurfWars[tw][twOwnerId];
			        new famid = PlayerInfo[playerid][pFMember];
			        if(famid != ownerid)
			        {
						format(string,sizeof(string),"* You have been taxed $%d dollars for selling vests on %s's Turf.",money/4,FamilyInfo[ownerid][FamilyName]);
						FamilyInfo[ownerid][FamilyCash] += money/4;
						GivePlayerCash(playerid, -money/4);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						SaveFamilies();
					}
				}
			}
			case 3: // Weapons
			{
			    if(TurfWars[tw][twOwnerId] != -1)
			    {
			        new ownerid = TurfWars[tw][twOwnerId];
			        new famid = PlayerInfo[playerid][pFMember];
			        if(famid != ownerid)
			        {
						format(string,sizeof(string),"* You have been taxed $%d dollars for selling weapons on %s's Turf.",money/4,FamilyInfo[ownerid][FamilyName]);
						FamilyInfo[ownerid][FamilyCash] += money/4;
						GivePlayerCash(playerid, -money/4);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						SaveFamilies();
					}
				}
			}
			case 4: // Sex
			{
			    if(TurfWars[tw][twOwnerId] != -1)
			    {
			        new ownerid = TurfWars[tw][twOwnerId];
			        new famid = PlayerInfo[playerid][pFMember];
			        if(famid != ownerid)
			        {
						format(string,sizeof(string),"* You have been taxed $%d dollars for selling sex on %s's Turf.",money/4,FamilyInfo[ownerid][FamilyName]);
						FamilyInfo[ownerid][FamilyCash] += money/4;
						GivePlayerCash(playerid, -money/4);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						SaveFamilies();
					}
				}
			}
			case 5: // Fireworks
			{
			    if(TurfWars[tw][twOwnerId] != -1)
			    {
			        new ownerid = TurfWars[tw][twOwnerId];
			        new famid = PlayerInfo[playerid][pFMember];
			        if(famid != ownerid)
			        {
						format(string,sizeof(string),"* You have been taxed $%d dollars for selling fireworks on %s's Turf.",money/4,FamilyInfo[ownerid][FamilyName]);
						FamilyInfo[ownerid][FamilyCash] += money/4;
						GivePlayerCash(playerid, -money/4);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						SaveFamilies();
					}
				}
			}
		}
	}
	return 1;
}

stock ShowTurfWarsRadar(playerid)
{
	if(turfWarsRadar[playerid] == 1) { return 1; }
	turfWarsRadar[playerid] = 1;
	SyncTurfWarsRadar(playerid);
    return 1;
}

stock HideTurfWarsRadar(playerid)
{
	if(turfWarsRadar[playerid] == 0) { return 1; }
	for(new i = 0; i < MAX_TURFS; i++) {
	    if(TurfWars[i][twGangZoneId] != -1) {
	    	GangZoneHideForPlayer(playerid,TurfWars[i][twGangZoneId]);
		}
	}
	turfWarsRadar[playerid] = 0;
	return 1;
}

stock SyncTurfWarsRadarToAll()
{
	foreach(new i: Player) {
	    SyncTurfWarsRadar(i);
	}
}

stock SyncTurfWarsRadar(playerid)
{
	if(turfWarsRadar[playerid] == 0) { return 1; }
	HideTurfWarsRadar(playerid);
	turfWarsRadar[playerid] = 1;
	for(new i = 0; i < MAX_TURFS; i++)
	{
	    if(TurfWars[i][twGangZoneId] != -1)
	    {
	        if(TurfWars[i][twOwnerId] >= 0 && TurfWars[i][twOwnerId] <= MAX_FAMILY-1)
	        {
	            switch(FamilyInfo[TurfWars[i][twOwnerId]][FamilyColor])
	            {
	                case 0: // Black
	                {
	            		GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWBLACK);
					}
					case 1: // White
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWWHITE);
					}
					case 2: // Red
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWRED);
					}
					case 3: // Blue
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWBLUE);
					}
					case 4: // Yellow
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWYELLOW);
					}
					case 5: // Purple
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWPURPLE);
					}
					case 6: // Pink
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWPINK);
					}
					case 7: // Brown
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWBROWN);
					}
					case 8: // Gray
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWGRAY);
					}
					case 9: // Olive
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWOLIVE);
					}
					case 10: // Tan
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWTAN);
					}
					case 11: // Aqua
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWAQUA);
					}
					case 12: // Orange
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWORANGE);
					}
					case 13: // Azure
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWAZURE);
					}
					case 14: // Green
					{
					    GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_TWGREEN);
					}
				}
	        }
	        else
	        {
	            GangZoneShowForPlayer(playerid,TurfWars[i][twGangZoneId],COLOR_BLACK);
	        }

	        if(TurfWars[i][twFlash] == 1)
	        {
	            switch(TurfWars[i][twFlashColor])
	            {
	                case 0: // Black
	                {
	            		GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWBLACK);
					}
					case 1: // White
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWWHITE);
					}
					case 2: // Red
					{
         				GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWRED);
					}
					case 3: // Blue
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWBLUE);
					}
					case 4: // Yellow
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWYELLOW);
					}
					case 5: // Purple
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWPURPLE);
					}
					case 6: // Pink
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWPINK);
					}
					case 7: // Brown
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWBROWN);
					}
					case 8: // Gray
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWGRAY);
					}
					case 9: // Olive
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWOLIVE);
					}
					case 10: // Tan
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWTAN);
					}
					case 11: // Aqua
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWAQUA);
					}
					case 12: // Orange
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWORANGE);
					}
					case 13: // Azure
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWAZURE);
					}
					case 14: // Green
					{
					    GangZoneFlashForPlayer(playerid, TurfWars[i][twGangZoneId],COLOR_TWGREEN);
					}
				}
	        }
	        else
	        {
	            GangZoneStopFlashForPlayer(playerid, TurfWars[i][twGangZoneId]);
	        }
	    }
	}
	return 1;
}

stock InitEventPoints()
{
	for(new i = 0; i < MAX_EVENTPOINTS; i++)
	{
	    EventPoints[i][epObjectID] = 0;
	}
	return 1;
}

stock InitPaintballArenas()
{
    new string[64];
	for(new i = 0; i < MAX_ARENAS; i++)
	{
	    format(string, sizeof(string), "Unoccupied");
		strmid(PaintBallArena[i][pbOwner], string, 0, strlen(string), 64);

		format(string, sizeof(string), "None");
		strmid(PaintBallArena[i][pbPassword], string, 0, strlen(string), 64);

	    PaintBallArena[i][pbGameType] = 1;
  		PaintBallArena[i][pbActive] = 0;
  		PaintBallArena[i][pbExploitPerm] = 0;
  		PaintBallArena[i][pbFlagInstagib] = 0;
  		PaintBallArena[i][pbFlagNoWeapons] = 0;
  		PaintBallArena[i][pbTimeLeft] = 900;
  		PaintBallArena[i][pbHealth] = 100;
   		PaintBallArena[i][pbArmor] = 100;
   		PaintBallArena[i][pbLocked] = 0;
		PaintBallArena[i][pbLimit] = 16;
		PaintBallArena[i][pbPlayers] = 0;
		PaintBallArena[i][pbTeamRed] = 0;
		PaintBallArena[i][pbTeamBlue] = 0;
		PaintBallArena[i][pbBidMoney] = 500;
		PaintBallArena[i][pbMoneyPool] = 0;
		PaintBallArena[i][pbWeapons][0] = 29;
		PaintBallArena[i][pbWeapons][1] = 24;
		PaintBallArena[i][pbWeapons][2] = 27;
		PaintBallArena[i][pbHillX] = 0.0;
		PaintBallArena[i][pbHillY] = 0.0;
		PaintBallArena[i][pbHillZ] = 0.0;
		PaintBallArena[i][pbHillRadius] = 0.0;
	}
	return 1;
}

stock ResetPaintballArena(arenaid)
{
	new string[64];

	format(string, sizeof(string), "Unoccupied");
	strmid(PaintBallArena[arenaid][pbOwner], string, 0, strlen(string), 64);
	format(string, sizeof(string), "None");
	strmid(PaintBallArena[arenaid][pbPassword], string, 0, strlen(string), 64);

	if(PaintBallArena[arenaid][pbGameType] == 3) {
	    if(PaintBallArena[arenaid][pbFlagRedActive] == 1) {
	        Delete3DTextLabel(PaintBallArena[arenaid][pbFlagRedTextID]);
		}
		if(PaintBallArena[arenaid][pbFlagBlueActive] == 1) {
		    Delete3DTextLabel(PaintBallArena[arenaid][pbFlagBlueTextID]);
		}
	    Delete3DTextLabel(PaintBallArena[arenaid][pbTeamRedTextID]);
		Delete3DTextLabel(PaintBallArena[arenaid][pbTeamBlueTextID]);
		DestroyDynamicObject(PaintBallArena[arenaid][pbFlagRedID]);
		DestroyDynamicObject(PaintBallArena[arenaid][pbFlagBlueID]);
	}

	if(PaintBallArena[arenaid][pbGameType] == 4 || PaintBallArena[arenaid][pbGameType] == 5) {
	    ResetPaintballArenaHill(arenaid);
	}

  	PaintBallArena[arenaid][pbGameType] = 1;
  	PaintBallArena[arenaid][pbActive] = 0;
  	PaintBallArena[arenaid][pbExploitPerm] = 0;
  	PaintBallArena[arenaid][pbFlagInstagib] = 0;
	PaintBallArena[arenaid][pbFlagNoWeapons] = 0;
  	PaintBallArena[arenaid][pbTimeLeft] = 900;
  	PaintBallArena[arenaid][pbHealth] = 100;
   	PaintBallArena[arenaid][pbArmor] = 100;
   	PaintBallArena[arenaid][pbLocked] = 0;
	PaintBallArena[arenaid][pbLimit] = 16;
	PaintBallArena[arenaid][pbPlayers] = 0;
	PaintBallArena[arenaid][pbTeamRed] = 0;
	PaintBallArena[arenaid][pbTeamBlue] = 0;
	PaintBallArena[arenaid][pbBidMoney] = 500;
	PaintBallArena[arenaid][pbMoneyPool] = 0;
	PaintBallArena[arenaid][pbWeapons][0] = 29;
	PaintBallArena[arenaid][pbWeapons][1] = 24;
	PaintBallArena[arenaid][pbWeapons][2] = 27;
	PaintBallArena[arenaid][pbTeamRedKills] = 0;
	PaintBallArena[arenaid][pbTeamBlueKills] = 0;
	PaintBallArena[arenaid][pbTeamRedDeaths] = 0;
	PaintBallArena[arenaid][pbTeamBlueDeaths] = 0;
	return 1;
}

stock CreatePaintballArenaHill(arenaid) {
	PaintBallArena[arenaid][pbHillTextID] = Create3DTextLabel("Hill", COLOR_GREEN, PaintBallArena[arenaid][pbHillX], PaintBallArena[arenaid][pbHillY], PaintBallArena[arenaid][pbHillZ], 200.0, PaintBallArena[arenaid][pbVirtual], 0);
}

stock ResetPaintballArenaHill(arenaid) {
    Delete3DTextLabel(PaintBallArena[arenaid][pbHillTextID]);
}

stock SortWinnerPaintballScores(arenaid)
{
	new highscore = 0;
	new score = 0;
	new winnerid;
	for(new i = 0; i < PaintBallArena[arenaid][pbLimit]; i++) {
	    foreach(new p: Player) {
	        if(GetPVarInt(p, "IsInArena") == arenaid) {
	            score = PlayerInfo[p][pKills];
	            if(score > highscore) {
					highscore = score;
					winnerid = p;
	            }
	        }
	    }
	}
	return winnerid;
}

stock SendPaintballArenaTextMessage(arenaid, style, message[])
{
	foreach(new p: Player) {
	    new carenaid = GetPVarInt(p, "IsInArena");
	    if(arenaid == carenaid) {
	        GameTextForPlayer(p, message, 5000, style);
	    }
	}
	return 1;
}

stock SendPaintballArenaMessage(arenaid, color, message[])
{
	foreach(new p: Player) {
   		new carenaid = GetPVarInt(p, "IsInArena");
   		if(arenaid == carenaid) {
	      	SendClientMessageEx(p, color, message);
		}
	}
	return 1;
}

stock ResetFlagPaintballArena(arenaid, flagid)
{
	switch(flagid)
	{
	    case 1: // Red Flag
	    {
	        if(PaintBallArena[arenaid][pbFlagRedActive] == 1)
	        {
	            Delete3DTextLabel(PaintBallArena[arenaid][pbFlagRedTextID]);
	        }
	        ////SendPaintballArenaAudio(arenaid, 24, 75);
	        //SetTimerEx("//SendPaintballArenaAudio", 250, false, "iii", arenaid, 29, 100);
	        PaintBallArena[arenaid][pbFlagRedActive] = 0;
	        SendPaintballArenaTextMessage(arenaid, 5, "~r~Red Flag ~w~Returned!");
	        DestroyDynamicObject(PaintBallArena[arenaid][pbFlagRedID]);
	        PaintBallArena[arenaid][pbFlagRedID] = CreateDynamicObject(RED_FLAG_OBJ, PaintBallArena[arenaid][pbFlagRedSpawn][0], PaintBallArena[arenaid][pbFlagRedSpawn][1], PaintBallArena[arenaid][pbFlagRedSpawn][2], 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);


	        PaintBallArena[arenaid][pbFlagRedPos][0] = PaintBallArena[arenaid][pbFlagRedSpawn][0];
	        PaintBallArena[arenaid][pbFlagRedPos][1] = PaintBallArena[arenaid][pbFlagRedSpawn][1];
	        PaintBallArena[arenaid][pbFlagRedPos][2] = PaintBallArena[arenaid][pbFlagRedSpawn][2];
	    }
	    case 2: // Blue Flag
	    {
	        if(PaintBallArena[arenaid][pbFlagBlueActive] == 1)
	        {
	            Delete3DTextLabel(PaintBallArena[arenaid][pbFlagBlueTextID]);
	        }
	        ////SendPaintballArenaAudio(arenaid, 24, 75);
	        //SetTimerEx("//SendPaintballArenaAudio", 250, false, "iii", arenaid, 11, 100);
	        PaintBallArena[arenaid][pbFlagBlueActive] = 0;
	        SendPaintballArenaTextMessage(arenaid, 5, "~b~Blue Flag ~w~Returned!");
	        DestroyDynamicObject(PaintBallArena[arenaid][pbFlagBlueID]);
	        PaintBallArena[arenaid][pbFlagBlueID] = CreateDynamicObject(BLUE_FLAG_OBJ, PaintBallArena[arenaid][pbFlagBlueSpawn][0], PaintBallArena[arenaid][pbFlagBlueSpawn][1], PaintBallArena[arenaid][pbFlagBlueSpawn][2], 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);

	        PaintBallArena[arenaid][pbFlagBluePos][0] = PaintBallArena[arenaid][pbFlagBlueSpawn][0];
	        PaintBallArena[arenaid][pbFlagBluePos][1] = PaintBallArena[arenaid][pbFlagBlueSpawn][1];
	        PaintBallArena[arenaid][pbFlagBluePos][2] = PaintBallArena[arenaid][pbFlagBlueSpawn][2];
	    }
	}
}

stock ScoreFlagPaintballArena(playerid, arenaid, flagid)
{
	new string[128];
	switch(flagid)
	{
	    case 1: // Red Flag
	    {
	        if(PaintBallArena[arenaid][pbFlagInstagib] == 1)
	        {
	            SetPlayerHealth(playerid, PaintBallArena[arenaid][pbHealth]);
	            SetPlayerArmour(playerid, PaintBallArena[arenaid][pbArmor]);
	        }

	        PlayerInfo[playerid][pKills] += 5;

			////SendPaintballArenaAudio(arenaid, 25, 75);
         	//SetTimerEx("//SendPaintballArenaAudio", 250, false, "iii", arenaid, 15, 100);
	        RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AOSlotPaintballFlag"));
	        SetPVarInt(playerid, "AOSlotPaintballFlag", -1);
	        PaintBallArena[arenaid][pbFlagRedActive] = 0;
	        PaintBallArena[arenaid][pbTeamBlueScores]++;
	        SendPaintballArenaTextMessage(arenaid, 5, "~b~Blue Team ~w~Scores!");
			format(string,sizeof(string),"[Paintball Arena] %s has scored for the Blue Team!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(arenaid, COLOR_YELLOW, string);
	        PaintBallArena[arenaid][pbFlagRedID] = CreateDynamicObject(RED_FLAG_OBJ, PaintBallArena[arenaid][pbFlagRedSpawn][0], PaintBallArena[arenaid][pbFlagRedSpawn][1], PaintBallArena[arenaid][pbFlagRedSpawn][2], 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);

	        PaintBallArena[arenaid][pbFlagRedPos][0] = PaintBallArena[arenaid][pbFlagRedSpawn][0];
	        PaintBallArena[arenaid][pbFlagRedPos][1] = PaintBallArena[arenaid][pbFlagRedSpawn][1];
	        PaintBallArena[arenaid][pbFlagRedPos][2] = PaintBallArena[arenaid][pbFlagRedSpawn][2];
	    }
	    case 2: // Blue Flag
	    {
	        if(PaintBallArena[arenaid][pbFlagInstagib] == 1)
	        {
	            SetPlayerHealth(playerid, PaintBallArena[arenaid][pbHealth]);
	            SetPlayerArmour(playerid, PaintBallArena[arenaid][pbArmor]);
	        }

	        PlayerInfo[playerid][pKills] += 5;

			////SendPaintballArenaAudio(arenaid, 25, 75);
	        //SetTimerEx("//SendPaintballArenaAudio", 250, false, "iii", arenaid, 33, 100);
	        RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AOSlotPaintballFlag"));
	        SetPVarInt(playerid, "AOSlotPaintballFlag", -1);
	        PaintBallArena[arenaid][pbFlagBlueActive] = 0;
	        PaintBallArena[arenaid][pbTeamRedScores]++;
	        SendPaintballArenaTextMessage(arenaid, 5, "~r~Red Team ~w~Scores!");
			format(string,sizeof(string),"[Paintball Arena] %s has scored for the Red Team!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(arenaid, COLOR_YELLOW, string);
	        PaintBallArena[arenaid][pbFlagBlueID] = CreateDynamicObject(BLUE_FLAG_OBJ, PaintBallArena[arenaid][pbFlagBlueSpawn][0], PaintBallArena[arenaid][pbFlagBlueSpawn][1], PaintBallArena[arenaid][pbFlagBlueSpawn][2], 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);

	        PaintBallArena[arenaid][pbFlagBluePos][0] = PaintBallArena[arenaid][pbFlagBlueSpawn][0];
	        PaintBallArena[arenaid][pbFlagBluePos][1] = PaintBallArena[arenaid][pbFlagBlueSpawn][1];
	        PaintBallArena[arenaid][pbFlagBluePos][2] = PaintBallArena[arenaid][pbFlagBlueSpawn][2];
	    }
	}
}

stock DropFlagPaintballArena(playerid, arenaid, flagid)
{
	new string[128];
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	RemovePlayerAttachedObject(playerid, GetPVarInt(playerid, "AOSlotPaintballFlag"));
	SetPVarInt(playerid, "AOSlotPaintballFlag", -1);

	switch(flagid)
	{
	    case 1: // Red Flag
	    {
  			////SendPaintballArenaAudio(arenaid, 28, 100);
	        PaintBallArena[arenaid][pbFlagRedActive] = 1;
	        SendPaintballArenaTextMessage(arenaid, 5, "~r~Red Flag ~w~Dropped!");
			format(string,sizeof(string),"[Paintball Arena] %s has dropped the Red Flag!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(arenaid, COLOR_YELLOW, string);
	        PaintBallArena[arenaid][pbFlagRedID] = CreateDynamicObject(RED_FLAG_OBJ, X, Y, Z, 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);
	        PaintBallArena[arenaid][pbFlagRedTextID] = Create3DTextLabel("Red Flag", COLOR_RED, X, Y, Z, 200.0, PaintBallArena[arenaid][pbVirtual], 0);
	        //PaintBallArena[arenaid][pbFlagRedTextID] = CreateDynamic3DTextLabel("Red Flag", COLOR_RED, X, Y, Z, 200.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior]);
	        PaintBallArena[arenaid][pbFlagRedActiveTime] = 30;

	        PaintBallArena[arenaid][pbFlagRedPos][0] = X;
	        PaintBallArena[arenaid][pbFlagRedPos][1] = Y;
	        PaintBallArena[arenaid][pbFlagRedPos][2] = Z;
	    }
	    case 2: // Blue Flag
	    {
	        ////SendPaintballArenaAudio(arenaid, 10, 100);
	        PaintBallArena[arenaid][pbFlagBlueActive] = 1;
	        SendPaintballArenaTextMessage(arenaid, 5, "~b~Blue Flag ~w~Dropped!");
			format(string,sizeof(string),"[Paintball Arena] %s has dropped the Blue Flag!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(arenaid, COLOR_YELLOW, string);
	        PaintBallArena[arenaid][pbFlagBlueID] = CreateDynamicObject(BLUE_FLAG_OBJ, X, Y, Z, 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);
	        PaintBallArena[arenaid][pbFlagBlueTextID] = Create3DTextLabel("Blue Flag", COLOR_DBLUE, X, Y, Z, 200.0, PaintBallArena[arenaid][pbVirtual], 0);
	        //PaintBallArena[arenaid][pbFlagBlueTextID] = CreateDynamic3DTextLabel("Blue Flag", COLOR_DBLUE, X, Y, Z, 200.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior]);
	        PaintBallArena[arenaid][pbFlagBlueActiveTime] = 30;

	        PaintBallArena[arenaid][pbFlagBluePos][0] = X;
	        PaintBallArena[arenaid][pbFlagBluePos][1] = Y;
	        PaintBallArena[arenaid][pbFlagBluePos][2] = Z;
	    }
	}
}

stock PickupFlagPaintballArena(playerid, arenaid, flagid)
{
	new string[128];
	new index = -1;
    if(GetPlayerState(playerid) == PLAYER_STATE_WASTED) { return 1; }
	switch(flagid)
	{
	    case 1: // Red Flag
	    {
	        if(PaintBallArena[arenaid][pbFlagRedActive] == 1)
	        {
	            Delete3DTextLabel(PaintBallArena[arenaid][pbFlagRedTextID]);
	        }
	        ////SendPaintballArenaAudio(arenaid, 23, 75);
	        //SetTimerEx("//SendPaintballArenaAudio", 250, false, "iii", arenaid, 30, 100);
	        PaintBallArena[arenaid][pbFlagRedActive] = -1;
	        SendPaintballArenaTextMessage(arenaid, 5, "~r~Red Flag ~w~Taken!");
			format(string,sizeof(string),"[Paintball Arena] %s has taken the Red Flag!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(arenaid, COLOR_YELLOW, string);
	        //SetTimerEx("//SendAudioToPlayer", 1500, false, "iii", playerid, 42, 100);
			index = FindFreeAttachedObjectSlot(playerid);
			if(index == -1) { RemovePlayerAttachedObject(playerid, 4), index = 4; }
	        SetPlayerAttachedObject(playerid,index,RED_FLAG_OBJ,5,0.0,0.0,0.0,30.0,0.0,0.0);
	        DestroyDynamicObject(PaintBallArena[arenaid][pbFlagRedID]);
	    }
	    case 2: // Blug Flag
	    {
	        if(PaintBallArena[arenaid][pbFlagBlueActive] == 1)
	        {
	            Delete3DTextLabel(PaintBallArena[arenaid][pbFlagBlueTextID]);
	        }
	        ////SendPaintballArenaAudio(arenaid, 23, 75);
	        //SetTimerEx("//SendPaintballArenaAudio", 250, false, "iii", arenaid, 12, 100);
	        PaintBallArena[arenaid][pbFlagBlueActive] = -1;
	        SendPaintballArenaTextMessage(arenaid, 5, "~b~Blue Flag ~w~Taken!");
			format(string,sizeof(string),"[Paintball Arena] %s has taken the Blue Flag!", GetPlayerNameEx(playerid));
	        SendPaintballArenaMessage(arenaid, COLOR_YELLOW, string);
	        //SetTimerEx("//SendAudioToPlayer", 1500, false, "iii", playerid, 42, 100);
			index = FindFreeAttachedObjectSlot(playerid);
			if(index == -1) { RemovePlayerAttachedObject(playerid, 4), index = 4; }
	        SetPlayerAttachedObject(playerid,index,BLUE_FLAG_OBJ,5,0.0,0.0,0.0,30.0,0.0,0.0);
	        DestroyDynamicObject(PaintBallArena[arenaid][pbFlagBlueID]);
	    }
	}
	SetPVarInt(playerid, "AOSlotPaintballFlag", index);
	return 1;
}

stock SpawnPaintballArena(playerid, arenaid)
{
	switch(PaintBallArena[arenaid][pbGameType])
	{
	    case 1,4: // Deathmatch, KOTH
	    {
			new rand = Random(1,5);
			switch (rand)
			{
	    		case 1:
	    		{
	        		SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch1][0],PaintBallArena[arenaid][pbDeathmatch1][1],PaintBallArena[arenaid][pbDeathmatch1][2]);
 					SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch1][3]);
	    		}
	    		case 2:
				{
		    		SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch2][0],PaintBallArena[arenaid][pbDeathmatch2][1],PaintBallArena[arenaid][pbDeathmatch2][2]);
 					SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch2][3]);
				}
				case 3:
				{
		    		SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch3][0],PaintBallArena[arenaid][pbDeathmatch3][1],PaintBallArena[arenaid][pbDeathmatch3][2]);
 					SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch3][3]);
				}
				case 4:
				{
		    		SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch4][0],PaintBallArena[arenaid][pbDeathmatch4][1],PaintBallArena[arenaid][pbDeathmatch4][2]);
 					SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch4][3]);
				}
			}
		}
		case 2,3,5: // Team Deathmatch, Capture the Flag or Team KOTH
		{
		    if(PlayerInfo[playerid][pPaintTeam] == 1) // Red
		    {
		    	new rand = Random(1,4);
		    	switch (rand)
		    	{
		    	    case 1:
		    	    {
		    	        SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamRed1][0],PaintBallArena[arenaid][pbTeamRed1][1],PaintBallArena[arenaid][pbTeamRed1][2]);
 						SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamRed1][3]);
		    	    }
		    	    case 2:
		    	    {
		    	        SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamRed2][0],PaintBallArena[arenaid][pbTeamRed2][1],PaintBallArena[arenaid][pbTeamRed2][2]);
 						SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamRed2][3]);
		    	    }
		    	    case 3:
		    	    {
		    	        SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamRed3][0],PaintBallArena[arenaid][pbTeamRed3][1],PaintBallArena[arenaid][pbTeamRed3][2]);
 						SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamRed3][3]);
		    	    }
		    	}
				SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
			}
			if(PlayerInfo[playerid][pPaintTeam] == 2) // Blue
			{
			    new rand = Random(1,4);
			    switch (rand)
			    {
			        case 1:
		    	    {
		    	        SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamBlue1][0],PaintBallArena[arenaid][pbTeamBlue1][1],PaintBallArena[arenaid][pbTeamBlue1][2]);
 						SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamBlue1][3]);
		    	    }
		    	    case 2:
		    	    {
		    	        SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamBlue2][0],PaintBallArena[arenaid][pbTeamBlue2][1],PaintBallArena[arenaid][pbTeamBlue2][2]);
 						SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamBlue2][3]);
		    	    }
		    	    case 3:
		    	    {
		    	        SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamBlue3][0],PaintBallArena[arenaid][pbTeamBlue3][1],PaintBallArena[arenaid][pbTeamBlue3][2]);
 						SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamBlue3][3]);
		    	    }
			    }
			    SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
			}
		}
	}
	PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
	PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];


	pTazer{playerid} = 0; // Reset Tazer
	ResetPlayerWeapons(playerid);

 	SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
 	SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);
 	SetPlayerHealth(playerid, PaintBallArena[arenaid][pbHealth]);
 	SetPlayerArmour(playerid, PaintBallArena[arenaid][pbArmor]);
 	GivePlayerWeapon(playerid, PaintBallArena[arenaid][pbWeapons][0], 60000);
 	GivePlayerWeapon(playerid, PaintBallArena[arenaid][pbWeapons][1], 60000);
 	GivePlayerWeapon(playerid, PaintBallArena[arenaid][pbWeapons][2], 60000);
}

stock JoinPaintballArena(playerid, arenaid, password[])
{
	new string[128];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));

	if(PaintBallArena[arenaid][pbPlayers] >= PaintBallArena[arenaid][pbLimit]) {
	   	return 0;
	}

	if(strcmp(PaintBallArena[arenaid][pbPassword], password, false)) {
	    return 0;
	}

	new team = GetPVarInt(playerid, "pbTeamChoice");
	new teamlimit = PaintBallArena[arenaid][pbLimit]/2;
	new Float:oldX, Float:oldY, Float:oldZ, Float:oldHealth, Float:oldArmor;
	GetPlayerPos(playerid, oldX, oldY, oldZ);

	SetPVarFloat(playerid, "pbOldX", oldX);
	SetPVarFloat(playerid, "pbOldY", oldY);
	SetPVarFloat(playerid, "pbOldZ", oldZ);

	GetPlayerHealth(playerid,oldHealth);
	GetPlayerArmour(playerid,oldArmor);
	SetPVarInt(playerid, "pbOldInt", GetPlayerInterior(playerid));
	SetPVarInt(playerid, "pbOldVW", GetPlayerVirtualWorld(playerid));
	SetPVarFloat(playerid, "pbOldHealth", oldHealth);
	SetPVarFloat(playerid, "pbOldArmor", oldArmor);

 	PaintBallArena[arenaid][pbPlayers]++;

 	if(PaintBallArena[arenaid][pbGameType] == 3) {
		SetPVarInt(playerid, "TickCTFID", SetTimerEx("TickCTF", 1000, true, "d", playerid)); // Player's CTF Tick Function
	}

 	if(PaintBallArena[arenaid][pbGameType] == 4 || PaintBallArena[arenaid][pbGameType] == 5) {
 		SetPlayerCheckpoint(playerid, PaintBallArena[arenaid][pbHillX], PaintBallArena[arenaid][pbHillY], PaintBallArena[arenaid][pbHillZ], PaintBallArena[arenaid][pbHillRadius]);
   		SetPVarInt(playerid, "TickKOTHID", SetTimerEx("TickKOTH", 1000, true, "d", playerid)); // Player's KOTH Tick Function
	}

 	SetPVarInt(playerid, "IsInArena", arenaid);
	switch(team)
	{
	    case 0: // No Team
	    {
	        format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena!", name);
	        SendPaintballArenaMessage(arenaid,COLOR_WHITE,string);
	        //SendAudioToPlayer(playerid, 27, 100);
	    }
	    case 1: // Red Team
		{
		    if(PaintBallArena[arenaid][pbTeamRed] >= teamlimit)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "Red team is currently full, sending you to the Blue team.");
		        PlayerInfo[playerid][pPaintTeam] = 2;
		    	PaintBallArena[arenaid][pbTeamBlue]++;
		    	format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena on the Blue Team!", name);
		       	SendPaintballArenaMessage(arenaid,PAINTBALL_TEAM_BLUE,string);
		       	//SendAudioToPlayer(playerid, 40, 100);
		    }
		    else
		    {
		        if(PaintBallArena[arenaid][pbTeamRed] > PaintBallArena[arenaid][pbTeamBlue])
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Teams are currently un-even, sending you to the Blue team.");
		        	PlayerInfo[playerid][pPaintTeam] = 2;
		    		PaintBallArena[arenaid][pbTeamBlue]++;
		    		format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena on the Blue Team!", name);
		       		SendPaintballArenaMessage(arenaid,PAINTBALL_TEAM_BLUE,string);
		       		//SendAudioToPlayer(playerid, 40, 100);
		        }
		        else
		        {
		        	PlayerInfo[playerid][pPaintTeam] = 1;
		    		PaintBallArena[arenaid][pbTeamRed]++;
		    		format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena on the Red Team!", name);
		       		SendPaintballArenaMessage(arenaid,PAINTBALL_TEAM_RED,string);
		       		//SendAudioToPlayer(playerid, 41, 100);
				}
		    }
		}
  		case 2: // Blue Team
	   	{
     		if(PaintBallArena[arenaid][pbTeamBlue] >= teamlimit)
   			{
      			SendClientMessageEx(playerid, COLOR_WHITE, "Blue team is currently full, sending you to the Red team.");
	        	PlayerInfo[playerid][pPaintTeam] = 1;
	    		PaintBallArena[arenaid][pbTeamRed]++;
	    		format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena on the Red Team!", name);
      			SendPaintballArenaMessage(arenaid,PAINTBALL_TEAM_RED,string);
      			//SendAudioToPlayer(playerid, 41, 100);
		    }
	    	else
		    {
		        if(PaintBallArena[arenaid][pbTeamBlue] > PaintBallArena[arenaid][pbTeamRed])
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Teams are currently un-even, sending you to the Red team.");
	        		PlayerInfo[playerid][pPaintTeam] = 1;
	    			PaintBallArena[arenaid][pbTeamRed]++;
	    			format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena on the Red Team!", name);
      				SendPaintballArenaMessage(arenaid,PAINTBALL_TEAM_RED,string);
      				//SendAudioToPlayer(playerid, 41, 100);
		        }
		        else
		        {
      				PlayerInfo[playerid][pPaintTeam] = 2;
	    			PaintBallArena[arenaid][pbTeamBlue]++;
		    		format(string,sizeof(string),"[Paintball Arena] %s has joined the Paintball Arena on the Blue Team!", name);
      				SendPaintballArenaMessage(arenaid,PAINTBALL_TEAM_BLUE,string);
      				//SendAudioToPlayer(playerid, 40, 100);
				}
		    }
	    }
	}
 	SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");

	if(PaintBallArena[arenaid][pbExploitPerm] == 0)
 	{
 	    SendClientMessageEx(playerid, COLOR_YELLOW, "Warning: This room does not allow any QS/CS, any attempt will be punishable.");
 	}
 	else
 	{
 	    SendClientMessageEx(playerid, COLOR_YELLOW, "Warning: This room allows QS/CS, if you do not like it, leave the arena now.");
 	}

 	PlayerInfo[playerid][pKills] = 0;
  	PlayerInfo[playerid][pDeaths] = 0;

  	GivePlayerCash(playerid,-PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbBidMoney]);
    PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbMoneyPool] += PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbBidMoney];

 	SpawnPaintballArena(playerid,GetPVarInt(playerid, "IsInArena"));
 	return 1;
}

stock LeavePaintballArena(playerid, arenaid)
{
	if(arenaid == GetPVarInt(playerid, "IsInArena"))
	{
	    new string[128];
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));

		if(arenaid == GetPVarInt(playerid, "ArenaNumber"))
		{
		    SetPVarInt(playerid, "ArenaNumber", -1);
		}
		SetPVarInt(playerid, "IsInArena", -1);

		PlayerInfo[playerid][pKills] = 0;
	    PlayerInfo[playerid][pDeaths] = 0;

		if(PaintBallArena[arenaid][pbGameType] == 4 || PaintBallArena[arenaid][pbGameType] == 5)
		{
		    KillTimer(GetPVarInt(playerid, "TickKOTHID"));
		    DisablePlayerCheckpoint(playerid);
		}
		if(PlayerInfo[playerid][pPaintTeam] == 1)
		{
		    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
		    {
				DropFlagPaintballArena(playerid, arenaid, 2);
		    }
		    KillTimer(GetPVarInt(playerid, "TickCTFID"));
		    PaintBallArena[arenaid][pbTeamRed]--;
		    PlayerInfo[playerid][pPaintTeam] = 0;
		}
		if(PlayerInfo[playerid][pPaintTeam] == 2)
		{
		    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
		    {
				DropFlagPaintballArena(playerid, arenaid, 1);
		    }
		    KillTimer(GetPVarInt(playerid, "TickCTFID"));
		    PaintBallArena[arenaid][pbTeamBlue]--;
		    PlayerInfo[playerid][pPaintTeam] = 0;
		}
		PaintBallArena[arenaid][pbPlayers]--;
		if(PaintBallArena[arenaid][pbTimeLeft] > 30)
		{
			format(string,sizeof(string),"[Paintball Arena] %s has left the Paintball Arena!", name);
			SendPaintballArenaMessage(arenaid, COLOR_WHITE, string);
		}
		if(PaintBallArena[arenaid][pbPlayers] == 0)
		{
		    ResetPaintballArena(arenaid);
		}

		SetPlayerWeapons(playerid);
  		// SetPlayerToTeamColor(playerid);
  		SetPlayerColor(playerid,TEAM_HIT_COLOR);
  		SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		SetPlayerPosEx(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"));
		SetPlayerHealth(playerid, GetPVarFloat(playerid, "pbOldHealth"));
		SetPlayerArmour(playerid, GetPVarFloat(playerid, "pbOldArmor"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
		PlayerInfo[playerid][pVW] = GetPVarInt(playerid, "pbOldVW");
		PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "pbOldInt");
        PlayerInfo[playerid][pPaintTeam] = 0;
        DeletePVar(playerid, "pbTeamChoice");
		Player_StreamPrep(playerid, GetPVarFloat(playerid, "pbOldX"), GetPVarFloat(playerid, "pbOldY"), GetPVarFloat(playerid, "pbOldZ"), FREEZE_TIME);
	}
}

stock vehicle_lock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_ON, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock vehicle_unlock_doors(vehicle) {

	new
		vParamArr[7];

	GetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], vParamArr[3], vParamArr[4], vParamArr[5], vParamArr[6]);
	return SetVehicleParamsEx(vehicle, vParamArr[0], vParamArr[1], vParamArr[2], VEHICLE_PARAMS_OFF, vParamArr[4], vParamArr[5], vParamArr[6]);
}

stock IsSeatAvailable(vehicleid, seat)
{
	switch(GetVehicleModel(vehicleid)) {
		case 425, 430, 432, 441, 446, 448, 452, 453, 454, 464, 465, 472, 473, 476, 481, 484, 485, 486, 493, 501, 509, 510, 519, 520, 530, 531, 532, 539, 553, 564, 568, 571, 572, 574, 583, 592, 594, 595: return 0;
		default: if(IsVehicleOccupied(vehicleid, seat)) return 0;
	}
	return 1;
}

stock IsPlayerInInvalidNosVehicle( playerid )
{
	switch(GetVehicleModel(GetPlayerVehicleID(playerid))) {
		case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 1;
	}
	return 0;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{

	switch(Seatbelt[playerid])
	{
	    case 1:
	    {
			new string[128];
	        if(IsABike(vehicleid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your helmet.");
				format(string, sizeof(string), "* %s (%d) reaches for their helmet, and takes it off.", GetPlayerNameEx(playerid),playerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
				format(string, sizeof(string), "* %s (%d) reaches for their seatbelt, and unbuckles it.", GetPlayerNameEx(playerid),playerid);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
  			Seatbelt[playerid] = 0;
	    }
	}

	if(GetPVarInt(playerid, "rccam") == 1)
	{
		DestroyVehicle(GetPVarInt(playerid, "rcveh"));
	    SetPlayerPosEx(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
		DeletePVar(playerid, "rccam");
	    KillTimer(GetPVarInt(playerid, "rccamtimer"));
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC(playerid)) return 1;
	if(gPlayerLogged{playerid} == 1)
	{
		TogglePlayerSpectating(playerid, 0);
	}
	else
	{
		TogglePlayerSpectating(playerid, 1);
		SetPlayerJoinCamera(playerid);
	}

	return 1;
}

forward SetPlayerFree(playerid,declare,reason[]);
public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrimes(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new crbjstore[128];
		if (declare == INVALID_PLAYER_ID)
		{
			format(turner, sizeof(turner), "911");
		}
		else
		{
			if(IsPlayerConnected(declare))
			{
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		RingTone[playerid] = 20;
		foreach(new i: Player)
		{
			if(IsACop(i))
			{
				format(crbjstore, sizeof(crbjstore), "HQ: All units, officer %s has completed their assignment.",turner);
				SendClientMessageEx(i, COLOR_DBLUE, crbjstore);
				format(crbjstore, sizeof(crbjstore), "HQ: %s has been processed, %s.",turned,reason);
				SendClientMessageEx(i, COLOR_DBLUE, crbjstore);
			}
		}
	}
}

forward RingToner();
public RingToner()
{
	foreach(new i: Player)
	{
		if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
		}
		if(RingTone[i] == 6)
		{
			RingTone[i] = RingTone[i] -1;
		}
		if(RingTone[i] == 20)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return 1;
}

forward RingTonerRev();
public RingTonerRev()
{
	foreach(new i: Player)
	{
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
	}
	SetTimer("RingToner", 1000, 0);
	return 1;
}

forward OtherTimerEx(playerid, type);
public OtherTimerEx(playerid, type)
{
	switch(type) {
		case TYPE_TPMATRUNTIMER:
		{
			if(GetPVarInt(playerid, "tpMatRunTimer") > 0)
			{
				SetPVarInt(playerid, "tpMatRunTimer", GetPVarInt(playerid, "tpMatRunTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
			}
		}
		case TYPE_TPDRUGRUNTIMER:
		{
			if(GetPVarInt(playerid, "tpDrugRunTimer") > 0)
			{
				SetPVarInt(playerid, "tpDrugRunTimer", GetPVarInt(playerid, "tpDrugRunTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
			}
		}
		case TYPE_TPTRUCKRUNTIMER:
		{
			if(GetPVarInt(playerid, "tpTruckRunTimer") > 0)
			{
				SetPVarInt(playerid, "tpTruckRunTimer", GetPVarInt(playerid, "tpTruckRunTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
			}
		}
		case TYPE_ARMSTIMER:
		{
			if(GetPVarInt(playerid, "ArmsTimer") > 0)
			{
				SetPVarInt(playerid, "ArmsTimer", GetPVarInt(playerid, "ArmsTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
			}
		}
		case TYPE_GUARDTIMER:
		{
			if(GetPVarInt(playerid, "GuardTimer") > 0)
			{
				SetPVarInt(playerid, "GuardTimer", GetPVarInt(playerid, "GuardTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			}
		}
		case TYPE_GIVEWEAPONTIMER:
		{
			if(GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				SetPVarInt(playerid, "GiveWeaponTimer", GetPVarInt(playerid, "GiveWeaponTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
		}
		case TYPE_SHOPORDERTIMER:
		{
			if(GetPVarInt(playerid, "ShopOrderTimer") > 0)
			{
				SetPVarInt(playerid, "ShopOrderTimer", GetPVarInt(playerid, "ShopOrderTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SHOPORDERTIMER);
			}
		}
		case TYPE_SELLMATSTIMER:
		{
			if(GetPVarInt(playerid, "SellMatsTimer") > 0)
			{
				SetPVarInt(playerid, "SellMatsTimer", GetPVarInt(playerid, "SellMatsTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);
			}
		}
		case TYPE_HOSPITALTIMER:
		{
			if(GetPVarInt(playerid, "HospitalTimer") > 0)
			{
				new Float:curhealth;
				GetPlayerHealth(playerid, curhealth);
				SetPVarInt(playerid, "HospitalTimer", GetPVarInt(playerid, "HospitalTimer")-1);
				SetPlayerHealth(playerid, curhealth+1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HOSPITALTIMER);
				if(GetPVarInt(playerid, "HospitalTimer") == 0)
				{
					HospitalSpawn(playerid);
				}
			}
		}
		case TYPE_FLOODPROTECTION:
		{
			if( CommandSpamUnmute[playerid] >= 1)
			{
				CommandSpamUnmute[playerid]--;
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			}
			if( TextSpamUnmute[playerid] >= 1)
			{
				TextSpamUnmute[playerid]--;
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			}
		}
		case TYPE_HEALTIMER:
		{
			if( GetPVarInt(playerid, "TriageTimer") >= 1)
			{
				SetPVarInt(playerid, "TriageTimer", GetPVarInt(playerid, "TriageTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_HEALTIMER);
			}
		}
		case TYPE_TPPIZZARUNTIMER:
		{
			if(GetPVarInt(playerid, "tpPizzaTimer") > 0 && GetPVarInt(playerid, "Pizza"))
			{
				SetPVarInt(playerid, "tpPizzaTimer", GetPVarInt(playerid, "tpPizzaTimer")-1);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
			}
		}
		case TYPE_PIZZATIMER:
		{
			if(GetPVarInt(playerid, "pizzaTimer") == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You failed to deliver the pizza to the house before it got cold!");
				DeletePVar(playerid, "Pizza");
				DisablePlayerCheckpoint(playerid);
			}
			else if (GetPVarInt(playerid, "Pizza") == 0)
			{
				DisablePlayerCheckpoint(playerid);
			}
			else if (GetPVarInt(playerid, "pizzaTimer") > 0 && GetPVarInt(playerid, "Pizza") > 0)
			{
				SetPVarInt(playerid, "pizzaTimer", GetPVarInt(playerid, "pizzaTimer")-1);
				new string[128];
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%d seconds left", GetPVarInt(playerid, "pizzaTimer"));
				GameTextForPlayer(playerid, string, 1100, 3);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);
			}
		}
	}
}

forward RotateWheel();
public RotateWheel()
{
    UpdateWheelTarget();

    new Float:fModifyWheelZPos = 0.0;
    if(gWheelTransAlternate) fModifyWheelZPos = 0.05;

    MoveObject( gFerrisWheel, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2]+fModifyWheelZPos,
				0.01, 0.0, gCurrentTargetYAngle, -270.0 );
}

stock SetPlayerWeapons(playerid)
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) { return 1; }
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0 && PlayerInfo[playerid][pAGuns][s] == 0)
		{
			GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 60000);
		}
	}
	return 1;
}

stock SetPlayerWeaponsEx(playerid)
{
	ResetPlayerWeapons(playerid);
	for(new s = 0; s < 12; s++)
	{
		if(PlayerInfo[playerid][pGuns][s] > 0)
		{
			GivePlayerValidWeapon(playerid, PlayerInfo[playerid][pGuns][s], 60000);
		}
	}
	SetPlayerArmedWeapon(playerid, GetPVarInt(playerid, "LastWeapon"));
}

stock ShowStats(playerid,targetid)
{
	if(IsPlayerConnected(targetid)) {
		new cash =  GetPlayerCash(targetid);
		new sext[16], std[20], employer[64], rank[64], division[64], jtext2[20], jtext[20], pnumber[20], facfam[20];
		if(PlayerInfo[targetid][pPnumber] == 0) pnumber = "None"; else format(pnumber, sizeof(pnumber), "%d", PlayerInfo[targetid][pPnumber]);
		if(PlayerInfo[targetid][pSex] == 1) { sext = "Male"; } else { sext = "Female"; }
		switch(GetPVarInt(playerid, "STD"))
		{
		    case 1: std = "Chlamydia";
		    case 2: std = "Gonorrhea";
		    case 3: std = "Syphilis";
		    default: std = "None";
		}
		facfam = "Faction";
		if(PlayerInfo[targetid][pFMember] < 255)
		{
		    facfam = "Family"; division = "None";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]);
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);
		switch(PlayerInfo[targetid][pJob])
		{
			case 1: jtext = "Detective";
			case 2: jtext = "Lawyer";
			case 3: jtext = "Whore";
			case 4: jtext = "Drugs Dealer";
			//case 5: jtext = "Car Jacker";
			case 6: jtext = "News Reporter";
			case 7: jtext = "Car Mechanic";
			case 8: jtext = "Bodyguard";
			case 9: jtext = "Arms Dealer";
			case 10: jtext = "Car Dealer";
			case 12: jtext = "Boxer";
			case 14: jtext = "Drug Smuggler";
			case 15: jtext = "Paper Boy";
			case 16: jtext = "Trucker";
			case 17: jtext = "Taxi Driver";
			case 18: jtext = "Craftsman";
			case 19: jtext = "Bartender";
			case 20: jtext = "Trucker";
			case 21: jtext = "Pizza Boy";
			default: jtext = "None";
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1: jtext2 = "Detective";
			case 2: jtext2 = "Lawyer";
			case 3: jtext2 = "Whore";
			case 4: jtext2 = "Drugs Dealer";
			//case 5: jtext2 = "Car Jacker";
			case 6: jtext2 = "News Reporter";
			case 7: jtext2 = "Car Mechanic";
			case 8: jtext2 = "Bodyguard";
			case 9: jtext2 = "Arms Dealer";
			case 10: jtext2 = "Car Dealer";
			case 12: jtext2 = "Boxer";
			case 14: jtext2 = "Drug Smuggler";
			case 15: jtext2 = "Paper Boy";
			case 16: jtext2 = "Trucker";
			case 17: jtext2 = "Taxi Driver";
			case 18: jtext2 = "Craftsman";
			case 19: jtext2 = "Bartender";
			case 20: jtext2 = "Trucker";
			case 21: jtext2 = "Pizza Boy";
			default: jtext2 = "None";
		}
		new jlevel, jlevel2;
		switch(PlayerInfo[targetid][pJob])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
					else if(skilllevel >= 400) { jlevel = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 14: jlevel = 1;
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			default: jlevel = 0;
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel2 = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel2 = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel2 = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel2 = 4; }
					else if(skilllevel >= 400) { jlevel2 = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 14: jlevel2 = 1;
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			default: jlevel2 = 0;
		}
		new drank[20];
		switch(PlayerInfo[targetid][pDonateRank])
		{
			case 1: drank = "Bronze";
			case 2: drank = "Silver";
			case 3: drank = "Gold";
			case 4: drank = "Platinum";
			case 5: drank = "Moderator";
			default: drank = "None";
		}
		new insur[20];
		switch(PlayerInfo[targetid][pInsurance])
		{
			case 1: insur = "County General";
			case 2: insur = "All Saints";
			case 3: insur = "Red County";
			case 4: insur = "Fort Carson";
			case 5: insur = "San Fierro";
			case 6: insur = "Club VIP";
			case 7: insur = "Home care";
			case 9: insur = "El Quabrados";
			case 10: insur = "Demorgan";
			default: insur = "None";
		}
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new upgradep = PlayerInfo[targetid][gPupgrade];
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectHours];
		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new wanted = PlayerInfo[targetid][pWantedLevel];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*2;
		new costlevel = nxtlevel*25000;//10k for testing purposes
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new rentkey = PlayerInfo[targetid][pRenting];
		new radiofreq = PlayerInfo[targetid][pRadioFreq];
		new intir = GetPlayerInterior(targetid);
		new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health, Float:armor;
		new realvw = GetPlayerVirtualWorld(targetid),
			vw = PlayerInfo[targetid][pVW],
			warns = PlayerInfo[targetid][pWarns],
			jailt = PlayerInfo[targetid][pJailTime],
			wjailt = PlayerInfo[targetid][pBeingSentenced];
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new totalwealth;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		new nmutes = PlayerInfo[targetid][pNMuteTotal];
		new admutes = PlayerInfo[targetid][pADMuteTotal];
		totalwealth = account + cash;
		if(PlayerInfo[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[PlayerInfo[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[PlayerInfo[targetid][pPhousekey]][hSafeMoney];
		if(PlayerInfo[targetid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[PlayerInfo[targetid][pPhousekey2]][hOwner], true) == 0) totalwealth += HouseInfo[PlayerInfo[targetid][pPhousekey2]][hSafeMoney];
		new coordsstring[132], showsstring[1024];
		format(coordsstring, sizeof(coordsstring),"Account Information:\n");
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring),"Name: %s (%s), Level: %d, Age: %d, Total wealth: $%d, Playing hours: %d, Phone number: %s, VIP: %s\n",GetPlayerNameEx(targetid), sext, level, age, totalwealth, ptime, pnumber,drank);
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring), "Cash: $%d, Bank balance: $%d, Upgrade points: %d, Next level: %d / %d hours ($%d)\n", cash, account, upgradep, exp, expamount, costlevel);
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring), "Married to: %s, Radio frequency: %d khz, Warnings: %d\n\n",married,radiofreq,warns);
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring),"Crime and Health Information:\n");
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring), "Crimes: %d, Arrests: %d, Wanted level: %d, Health: %.1f, Armor: %.1f, Spawn armor: %.0f, Insurance: %s\n\n",crimes,arrests,wanted,health,armor,shealth,insur);
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring),"Job Information:\n");
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring), "%s: %s, Rank: %s (%d), Division: %s, Job: %s (level: %d), Job 2: %s (level: %d)\n\n", facfam, employer, rank, PlayerInfo[targetid][pRank], division, jtext,jlevel,jtext2, jlevel2);
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring),"Other Information:\n");
		strcat(showsstring, coordsstring, sizeof(showsstring));
		format(coordsstring, sizeof(coordsstring), "ADMutes: %d, NMutes: %d, RMutes: %d, Weapons Restricted: %d, Gang Warns: %d, EXP Tokens: %d, EXP Hours: %d\n", admutes, nmutes, PlayerInfo[targetid][pRMutedTotal],PlayerInfo[targetid][pWRestricted], PlayerInfo[targetid][pGangWarn], PlayerInfo[targetid][pEXPToken], PlayerInfo[targetid][pDoubleEXP]);
		strcat(showsstring, coordsstring, sizeof(showsstring));
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
		    format(coordsstring, sizeof(coordsstring), "House: %d, House 2: %d, Renting: %d, Int: %d, VW: %d, Real VW: %d, Jail: %d sec, WJail: %d sec, VIPM: %i, GVip: %i\n", housekey,housekey2,rentkey,intir,vw,realvw,jailt,wjailt, PlayerInfo[targetid][pVIPM], PlayerInfo[targetid][pGVip]);
		   strcat(showsstring, coordsstring, sizeof(showsstring));
		    format(coordsstring, sizeof(coordsstring), "Reward Hours: %.2f, Reward Box Tokens: %d\n", PlayerInfo[targetid][pRewardHours],PlayerInfo[targetid][pGoldBoxTokens]);
		   strcat(showsstring, coordsstring, sizeof(showsstring));
		}
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
		    if(PlayerInfo[targetid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] >= 2)
			{
			    format(coordsstring, sizeof(coordsstring), "Accepted reports: %d, Trashed reports: %d\n", PlayerInfo[targetid][pAcceptReport], PlayerInfo[targetid][pTrashReport]);
			 strcat(showsstring, coordsstring, sizeof(showsstring));
			}
			if(PlayerInfo[targetid][pHelper] >= 2 && PlayerInfo[playerid][pAdmin] >= 2)
			{
			    format(coordsstring, sizeof(coordsstring), "Hours on duty: %d, Accepted help requests: %d", PlayerInfo[targetid][pDutyHours], PlayerInfo[targetid][pAcceptedHelp]);
			 strcat(showsstring, coordsstring, sizeof(showsstring));
			}
		}
		ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"Player Statistics",showsstring,"Close","");
	}
}

stock OldStats(playerid,targetid)
{
	if(IsPlayerConnected(targetid)) {
	    SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		new cash =  GetPlayerCash(targetid);
		new sext[16], std[20], employer[64], rank[64], division[64], jtext2[20], jtext[20], pnumber[20], facfam[20];
		if(PlayerInfo[targetid][pPnumber] == 0) pnumber = "None"; else format(pnumber, sizeof(pnumber), "%d", PlayerInfo[targetid][pPnumber]);
		if(PlayerInfo[targetid][pSex] == 1) { sext = "Male"; } else { sext = "Female"; }
		switch(GetPVarInt(playerid, "STD"))
		{
		    case 1: std = "Chlamydia";
		    case 2: std = "Gonorrhea";
		    case 3: std = "Syphilis";
		    default: std = "None";
		}
		facfam = "Faction";
		if(PlayerInfo[targetid][pFMember] < 255)
		{
		    facfam = "Family"; division = "None";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]);
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
			}
		}
		else GetPlayerFactionInfo(targetid, rank, division, employer);
		switch(PlayerInfo[targetid][pJob])
		{
			case 1: jtext = "Detective";
			case 2: jtext = "Lawyer";
			case 3: jtext = "Whore";
			case 4: jtext = "Drugs Dealer";
			//case 5: jtext = "Car Jacker";
			case 6: jtext = "News Reporter";
			case 7: jtext = "Car Mechanic";
			case 8: jtext = "Bodyguard";
			case 9: jtext = "Arms Dealer";
			case 10: jtext = "Car Dealer";
			case 12: jtext = "Boxer";
			case 14: jtext = "Drug Smuggler";
			case 15: jtext = "Paper Boy";
			case 16: jtext = "Trucker";
			case 17: jtext = "Taxi Driver";
			case 18: jtext = "Craftsman";
			case 19: jtext = "Bartender";
			case 20: jtext = "Trucker";
			case 21: jtext = "Pizza Boy";
			default: jtext = "None";
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1: jtext2 = "Detective";
			case 2: jtext2 = "Lawyer";
			case 3: jtext2 = "Whore";
			case 4: jtext2 = "Drugs Dealer";
			//case 5: jtext2 = "Car Jacker";
			case 6: jtext2 = "News Reporter";
			case 7: jtext2 = "Car Mechanic";
			case 8: jtext2 = "Bodyguard";
			case 9: jtext2 = "Arms Dealer";
			case 10: jtext2 = "Car Dealer";
			case 12: jtext2 = "Boxer";
			case 14: jtext2 = "Drug Smuggler";
			case 15: jtext2 = "Paper Boy";
			case 16: jtext2 = "Trucker";
			case 17: jtext2 = "Taxi Driver";
			case 18: jtext2 = "Craftsman";
			case 19: jtext2 = "Bartender";
			case 20: jtext2 = "Trucker";
			case 21: jtext2 = "Pizza Boy";
			default: jtext2 = "None";
		}
		new jlevel, jlevel2;
		switch(PlayerInfo[targetid][pJob])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
					else if(skilllevel >= 400) { jlevel = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 14: jlevel = 1;
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			default: jlevel = 0;
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel2 = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel2 = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel2 = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel2 = 4; }
					else if(skilllevel >= 400) { jlevel2 = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 14: jlevel2 = 1;
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			default: jlevel2 = 0;
		}
		new drank[20];
		switch(PlayerInfo[targetid][pDonateRank])
		{
			case 1: drank = "Bronze";
			case 2: drank = "Silver";
			case 3: drank = "Gold";
			case 4: drank = "Platinum";
			case 5: drank = "Moderator";
			default: drank = "None";
		}
		new insur[20];
		switch(PlayerInfo[targetid][pInsurance])
		{
			case 1: insur = "County General";
			case 2: insur = "All Saints";
			case 3: insur = "Red County";
			case 4: insur = "Fort Carson";
			case 5: insur = "San Fierro";
			case 6: insur = "Club VIP";
			case 7: insur = "Home care";
			case 9: insur = "El Quabrados";
			case 10: insur = "Demorgan";
			default: insur = "None";
		}
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new upgradep = PlayerInfo[targetid][gPupgrade];
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectHours];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new pot = PlayerInfo[targetid][pPot];
		new crack = PlayerInfo[targetid][pCrack];
		new mats = PlayerInfo[targetid][pMats];
		new wanted = PlayerInfo[targetid][pWantedLevel];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*4;
		new costlevel = nxtlevel*25000;//10k for testing purposes
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new rentkey = PlayerInfo[targetid][pRenting];
		new radiofreq = PlayerInfo[targetid][pRadioFreq];
		new intir = GetPlayerInterior(targetid);
		new tokens = PlayerInfo[targetid][pTokens];
		new ptokens = PlayerInfo[targetid][pPaintTokens];
		new checks = PlayerInfo[targetid][pChecks];
		new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health, Float:armor;
		new packages = GetPVarInt(targetid, "Packages");
		new crates = PlayerInfo[targetid][pCrates];
		new rope = PlayerInfo[targetid][pRope],
			cigars = PlayerInfo[targetid][pCigar],
			sprunk = PlayerInfo[targetid][pSprunk],
			spray = PlayerInfo[targetid][pSpraycan],
			realvw = GetPlayerVirtualWorld(targetid),
			vw = PlayerInfo[targetid][pVW],
			warns = PlayerInfo[targetid][pWarns],
			jailt = PlayerInfo[targetid][pJailTime],
			wjailt = PlayerInfo[targetid][pBeingSentenced];
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new totalwealth;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		new nmutes = PlayerInfo[targetid][pNMuteTotal];
		new admutes = PlayerInfo[targetid][pADMuteTotal];
		totalwealth = account + cash;
		if(PlayerInfo[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[PlayerInfo[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[PlayerInfo[targetid][pPhousekey]][hSafeMoney];
		if(PlayerInfo[targetid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[PlayerInfo[targetid][pPhousekey2]][hOwner], true) == 0) totalwealth += HouseInfo[PlayerInfo[targetid][pPhousekey2]][hSafeMoney];
		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring),"%s - Level %d | %s | Age: %d | Total wealth: $%d | Playing hours: %d | Phone number: %s | Warnings: %d",GetPlayerNameEx(targetid), level, sext, age, totalwealth, ptime, pnumber, warns);
		SendClientMessageEx(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Cash: $%d | Bank balance: $%d | Upgrade points: %d | Spawn armor: %.0f | Next level: %d/%d hours ($%d)", cash, account, upgradep, shealth, exp, expamount, costlevel);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "%s: %s | Rank: %s (%d) | Division: %s | Job: %s (level: %d) | Job 2: %s (level: %d)", facfam, employer, rank, PlayerInfo[targetid][pRank], division, jtext,jlevel,jtext2, jlevel2);
		SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Crimes: %d | Arrests: %d | Insurance: %s | Wanted level: %d | Health: %.1f | Armor: %.1f | Paintball Tokens: %d",crimes,arrests,insur, wanted, health, armor, ptokens);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Married to: %s | Biggest fish: %d | Pot: %d | Crack: %d | Packages: %d | Crates: %d | Radio frequency: %d khz",married,bigfish,pot,crack,packages,crates,radiofreq);
		SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Materials: %d | Rope: %d | Cigars: %d | Sprunk: %d | Spray: %d | Screwdrivers: %d | VIP tokens: %d | Checks: %d | VIP: %s",mats,rope,cigars,sprunk,spray, PlayerInfo[targetid][pScrewdriver],tokens,checks,drank);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "ADMutes: %d | NMutes: %d | RMutes: %d | Weapons Restricted: %d | Gang Warns: %d | EXP Tokens: %d | EXP Hours: %d", admutes, nmutes, PlayerInfo[targetid][pRMutedTotal],PlayerInfo[targetid][pWRestricted], PlayerInfo[targetid][pGangWarn], PlayerInfo[targetid][pEXPToken], PlayerInfo[targetid][pDoubleEXP]);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
		    format(coordsstring, sizeof(coordsstring), "House: %d | House 2: %d | Renting: %d | Int: %d | VW: %d | Real VW: %d | Jail: %d sec | WJail: %d sec | VIPM: %i | GVip: %i", housekey,housekey2,rentkey,intir,vw,realvw,jailt,wjailt, PlayerInfo[targetid][pVIPM], PlayerInfo[targetid][pGVip]);
		    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		    format(coordsstring, sizeof(coordsstring), "Reward Hours: %.2f | Computer Drawing: %d | Gift Box Tokens: %d", PlayerInfo[targetid][pRewardHours],PlayerInfo[targetid][pRewardDrawChance],PlayerInfo[targetid][pGoldBoxTokens]);
		    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		}
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
		    if(PlayerInfo[targetid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] >= 2)
			{
			    format(coordsstring, sizeof(coordsstring), "Accepted reports: %d | Trashed reports: %d", PlayerInfo[targetid][pAcceptReport], PlayerInfo[targetid][pTrashReport]);
			    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
			}
			if(PlayerInfo[targetid][pHelper] >= 2 && PlayerInfo[playerid][pAdmin] >= 2)
			{
			    format(coordsstring, sizeof(coordsstring), "Hours on duty: %d | Accepted help requests: %d", PlayerInfo[targetid][pDutyHours], PlayerInfo[targetid][pAcceptedHelp]);
			    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
	}
}

stock AdminShowStats(playerid,targetid)
{
	if(IsPlayerConnected(targetid)) {
	    SendClientMessageEx(playerid, COLOR_RED,"___________________________________________________________________________________________________");
		new cash =  GetPlayerCash(targetid);
		new sext[16], std[20], employer[64], rank[64], division[64], jtext2[20], jtext[20], pnumber[20], facfam[20];
		if(PlayerInfo[targetid][pPnumber] == 0) pnumber = "None"; else format(pnumber, sizeof(pnumber), "%d", PlayerInfo[targetid][pPnumber]);
		if(PlayerInfo[targetid][pSex] == 1) { sext = "Male"; } else { sext = "Female"; }
		switch(GetPVarInt(playerid, "STD"))
		{
		    case 1: std = "Chlamydia";
		    case 2: std = "Gonorrhea";
		    case 3: std = "Syphilis";
		    default: std = "None";
		}
		facfam = "Faction";
		if(PlayerInfo[targetid][pFMember] < 255)
		{
		    facfam = "Family"; division = "None";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyName]);
			switch(PlayerInfo[targetid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[targetid][pFMember]][FamilyRank1]);
			}
		}
		else
		{
		 	format(rank, sizeof(rank), "%s", GetPlayerFactionRank(targetid));
		 	format(employer, sizeof(employer), "%s", FactionInfo[PlayerInfo[targetid][pMember]][fName]);
		 	format(division, sizeof(division), "%s", GetPlayerFactionDiv(targetid));
		}

		//GetPlayerFactionInfo(targetid, rank, division, employer);
		switch(PlayerInfo[targetid][pJob])
		{
			case 1: jtext = "Detective";
			case 2: jtext = "Lawyer";
			case 3: jtext = "Whore";
			case 4: jtext = "Drugs Dealer";
			//case 5: jtext = "Car Jacker";
			case 6: jtext = "News Reporter";
			case 7: jtext = "Car Mechanic";
			case 8: jtext = "Bodyguard";
			case 9: jtext = "Arms Dealer";
			case 10: jtext = "Car Dealer";
			case 12: jtext = "Boxer";
			case 14: jtext = "Drug Smuggler";
			case 15: jtext = "Paper Boy";
			case 16: jtext = "Trucker";
			case 17: jtext = "Taxi Driver";
			case 18: jtext = "Craftsman";
			case 19: jtext = "Bartender";
			case 20: jtext = "Trucker";
			case 21: jtext = "Pizza Boy";
			default: jtext = "None";
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1: jtext2 = "Detective";
			case 2: jtext2 = "Lawyer";
			case 3: jtext2 = "Whore";
			case 4: jtext2 = "Drugs Dealer";
			//case 5: jtext2 = "Car Jacker";
			case 6: jtext2 = "News Reporter";
			case 7: jtext2 = "Car Mechanic";
			case 8: jtext2 = "Bodyguard";
			case 9: jtext2 = "Arms Dealer";
			case 10: jtext2 = "Car Dealer";
			case 12: jtext2 = "Boxer";
			case 14: jtext2 = "Drug Smuggler";
			case 15: jtext2 = "Paper Boy";
			case 16: jtext2 = "Trucker";
			case 17: jtext2 = "Taxi Driver";
			case 18: jtext2 = "Craftsman";
			case 19: jtext2 = "Bartender";
			case 20: jtext2 = "Trucker";
			case 21: jtext2 = "Pizza Boy";
			default: jtext2 = "None";
		}
		new jlevel, jlevel2;
		switch(PlayerInfo[targetid][pJob])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel = 4; }
					else if(skilllevel >= 400) { jlevel = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			case 14: jlevel = 1;
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel = 4; }
					else if(skilllevel >= 401) { jlevel = 5; }
			}
			default: jlevel = 0;
		}
		switch(PlayerInfo[targetid][pJob2])
		{
			case 1:
			{
					new skilllevel = PlayerInfo[targetid][pDetSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 2:
			{
					new skilllevel = PlayerInfo[targetid][pLawSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 3:
			{
					new skilllevel = PlayerInfo[targetid][pSexSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 4:
			{
					new skilllevel = PlayerInfo[targetid][pDrugsSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
	  		case 7:
			{
					new skilllevel = PlayerInfo[targetid][pMechSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 9:
			{
					new skilllevel = PlayerInfo[targetid][pArmsSkill];
					if(skilllevel >= 0 && skilllevel < 50) { jlevel2 = 1; }
					else if(skilllevel >= 50 && skilllevel < 100) { jlevel2 = 2; }
					else if(skilllevel >= 100 && skilllevel < 200) { jlevel2 = 3; }
					else if(skilllevel >= 200 && skilllevel < 400) { jlevel2 = 4; }
					else if(skilllevel >= 400) { jlevel2 = 5; }
			}
			case 12:
			{
					new skilllevel = PlayerInfo[targetid][pBoxSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			case 14: jlevel2 = 1;
			case 20:
			{
					new skilllevel = PlayerInfo[targetid][pTruckSkill];
					if(skilllevel >= 0 && skilllevel <= 50) { jlevel2 = 1; }
					else if(skilllevel >= 51 && skilllevel <= 100) { jlevel2 = 2; }
					else if(skilllevel >= 101 && skilllevel <= 200) { jlevel2 = 3; }
					else if(skilllevel >= 201 && skilllevel <= 400) { jlevel2 = 4; }
					else if(skilllevel >= 401) { jlevel2 = 5; }
			}
			default: jlevel2 = 0;
		}
		new drank[20];
		switch(PlayerInfo[targetid][pDonateRank])
		{
			case 1: drank = "Bronze";
			case 2: drank = "Silver";
			case 3: drank = "Gold";
			case 4: drank = "Platinum";
			case 5: drank = "Moderator";
			default: drank = "None";
		}
		new insur[20];
		switch(PlayerInfo[targetid][pInsurance])
		{
			case 1: insur = "County General";
			case 2: insur = "All Saints";
			case 3: insur = "Red County";
			case 4: insur = "Fort Carson";
			case 5: insur = "San Fierro";
			case 6: insur = "Club VIP";
			case 7: insur = "Home care";
			case 9: insur = "El Quabrados";
			case 10: insur = "Demorgan";
			default: insur = "None";
		}
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
		new upgradep = PlayerInfo[targetid][gPupgrade];
		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectHours];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		new crimes = PlayerInfo[targetid][pCrimes];
		new arrests = PlayerInfo[targetid][pArrested];
		new pot = PlayerInfo[targetid][pPot];
		new crack = PlayerInfo[targetid][pCrack];
		new mats = PlayerInfo[targetid][pMats];
		new wanted = PlayerInfo[targetid][pWantedLevel];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new account = PlayerInfo[targetid][pAccount];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expamount = nxtlevel*2;
		new costlevel = nxtlevel*25000;//10k for testing purposes
		new housekey = PlayerInfo[targetid][pPhousekey];
		new housekey2 = PlayerInfo[targetid][pPhousekey2];
		new rentkey = PlayerInfo[targetid][pRenting];
		new radiofreq = PlayerInfo[targetid][pRadioFreq];
		new intir = GetPlayerInterior(targetid);
		new tokens = PlayerInfo[targetid][pTokens];
		new ptokens = PlayerInfo[targetid][pPaintTokens];
		new checks = PlayerInfo[targetid][pChecks];
		new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health, Float:armor;
		new packages = GetPVarInt(targetid, "Packages");
		new crates = PlayerInfo[targetid][pCrates];
		new rope = PlayerInfo[targetid][pRope],
			cigars = PlayerInfo[targetid][pCigar],
			sprunk = PlayerInfo[targetid][pSprunk],
			spray = PlayerInfo[targetid][pSpraycan],
			realvw = GetPlayerVirtualWorld(targetid),
			vw = PlayerInfo[targetid][pVW],
			warns = PlayerInfo[targetid][pWarns],
			jailt = PlayerInfo[targetid][pJailTime],
			wjailt = PlayerInfo[targetid][pBeingSentenced];
		GetPlayerHealth(targetid,health);
		GetPlayerArmour(targetid,armor);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
		new totalwealth;
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		new nmutes = PlayerInfo[targetid][pNMuteTotal];
		new admutes = PlayerInfo[targetid][pADMuteTotal];
		new infractions = PlayerInfo[targetid][pInfractions];
		totalwealth = account + cash;
		if(PlayerInfo[targetid][pPhousekey] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[PlayerInfo[targetid][pPhousekey]][hOwner], true) == 0) totalwealth += HouseInfo[PlayerInfo[targetid][pPhousekey]][hSafeMoney];
		if(PlayerInfo[targetid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(name, HouseInfo[PlayerInfo[targetid][pPhousekey2]][hOwner], true) == 0) totalwealth += HouseInfo[PlayerInfo[targetid][pPhousekey2]][hSafeMoney];
		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring),"%s - Level %d | %s | Age: %d | Total wealth: $%d | Playing hours: %d | Phone number: %s | Warnings: %d",GetPlayerNameEx(targetid), level, sext, age, totalwealth, ptime, pnumber, warns);
		SendClientMessageEx(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Cash: $%d | Bank balance: $%d | Upgrade points: %d | Spawn armor: %.0f | Next level: %d/%d hours ($%d)", cash, account, upgradep, shealth, exp, expamount, costlevel);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "%s: %s | Rank: %s (%d) | Division: %s | Job: %s (level: %d) | Job 2: %s (level: %d)", facfam, employer, rank, PlayerInfo[targetid][pRank], division, jtext,jlevel,jtext2, jlevel2);
		SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Crimes: %d | Arrests: %d | Insurance: %s | Wanted level: %d | Health: %.1f | Armor: %.1f | Paintball Tokens: %d",crimes,arrests,insur, wanted, health, armor, ptokens);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Married to: %s | Biggest fish: %d | Pot: %d | Crack: %d | Packages: %d | Crates: %d | Radio frequency: %d khz",married,bigfish,pot,crack,packages,crates,radiofreq);
		SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Materials: %d | Rope: %d | Cigars: %d | Sprunk: %d | Spray: %d | Screwdrivers: %d | VIP tokens: %d | Checks: %d | VIP: %s",mats,rope,cigars,sprunk,spray, PlayerInfo[targetid][pScrewdriver],tokens,checks,drank);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "ADMutes: %d | NMutes: %d | RMutes: %d | Weapons Restricted: %d | Gang Warns: %d | EXP Tokens: %d | EXP Hours: %d", admutes, nmutes, PlayerInfo[targetid][pRMutedTotal],PlayerInfo[targetid][pWRestricted], PlayerInfo[targetid][pGangWarn], PlayerInfo[targetid][pEXPToken], PlayerInfo[targetid][pDoubleEXP]);
		SendClientMessageEx(playerid, COLOR_GRAD1,coordsstring);
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
		    format(coordsstring, sizeof(coordsstring), "House: %d | House 2: %d | Renting: %d | Int: %d | VW: %d | Real VW: %d | Jail: %d sec | WJail: %d sec | VIPM: %i | GVip: %i", housekey,housekey2,rentkey,intir,vw,realvw,jailt,wjailt, PlayerInfo[targetid][pVIPM], PlayerInfo[targetid][pGVip]);
		    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		    format(coordsstring, sizeof(coordsstring), "Reward Hours: %.2f | Reward Box Tokens: %d | Infractions: %d", PlayerInfo[targetid][pRewardHours],PlayerInfo[targetid][pGoldBoxTokens], infractions);
		    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
		}
		if (PlayerInfo[playerid][pAdmin] >= 1337)
		{
		    if(PlayerInfo[targetid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] >= 2)
			{
			    format(coordsstring, sizeof(coordsstring), "Accepted reports: %d | Trashed reports: %d", PlayerInfo[targetid][pAcceptReport], PlayerInfo[targetid][pTrashReport]);
			    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
			}
			if(PlayerInfo[targetid][pHelper] >= 2 && PlayerInfo[playerid][pAdmin] >= 2)
			{
			    format(coordsstring, sizeof(coordsstring), "Hours on duty: %d | Accepted help requests: %d", PlayerInfo[targetid][pDutyHours], PlayerInfo[targetid][pAcceptedHelp]);
			    SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
			}
		}
		SendClientMessageEx(playerid, COLOR_RED,"___________________________________________________________________________________________________");
	}
}

stock SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetPVarInt(playerid, "IsInArena") >= 0)
	    {
	        new arenaid = GetPVarInt(playerid, "IsInArena");
	        if(PaintBallArena[arenaid][pbGameType] == 2 || PaintBallArena[arenaid][pbGameType] == 3 || PaintBallArena[arenaid][pbGameType] == 5)
	        {
				switch(PlayerInfo[playerid][pPaintTeam])
				{
				    case 1: // Red Team
				    {
				        SetPlayerColor(playerid, PAINTBALL_TEAM_RED);
				    }
				    case 2: // Blue Team
				    {
				        SetPlayerColor(playerid, PAINTBALL_TEAM_BLUE);
				    }
				}
				return 1;
	        }
	    }
	    if(GetPVarType(playerid, "pEventZombie"))
		{
			SetPlayerColor(playerid, 0x0BC43600);
			return 1;
		}
	    if(PlayerInfo[playerid][pJailTime] > 0)
	    {
            if(strfindex(PlayerInfo[playerid][pPrisonReason], "[IC]", true) != -1 || strfindex(PlayerInfo[playerid][pPrisonReason], "[ISOLATE]", true) != -1)
    		{
   				SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
   				return 1;
			}
			else if(strfindex(PlayerInfo[playerid][pPrisonReason], "[OOC]", true) != -1)
  			{
    			SetPlayerColor(playerid,TEAM_APRISON_COLOR);
    			return 1;
			}
			else
			{
    	        SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
		}
	    if(IsACop(playerid))
	    {
	        if(PlayerInfo[playerid][pDuty] == 1)
	        {
	            if(PlayerInfo[playerid][pMember] == 1)
	            {
	        		SetPlayerColor(playerid,TEAM_BLUE_COLOR);
				}
				else if(PlayerInfo[playerid][pMember] == 2)
	            {
	        		SetPlayerColor(playerid,TEAM_FBI_COLOR);
				}
				else if(PlayerInfo[playerid][pMember] == 3)
				{
				    SetPlayerColor(playerid, TEAM_SFPD);
				}
				else if(PlayerInfo[playerid][pMember] == 7)
				{
				    SetPlayerColor(playerid, TEAM_SASD);
				}
				else if(PlayerInfo[playerid][pMember] == 11)
    			{
	        		SetPlayerColor(playerid,COLOR_NG);
				}
				else if(PlayerInfo[playerid][pMember] == 12)
				{
  					SetPlayerColor(playerid, COLOR_TR);
				}
				else if(PlayerInfo[playerid][pMember] == 13)
    			{
	        		SetPlayerColor(playerid,COLOR_NOOSE);
				}
				else if(PlayerInfo[playerid][pMember] == 16)
				{
					SetPlayerColor(playerid,COLOR_SHAFT);
				}
				else if(PlayerInfo[playerid][pMember] == 17)
				{
					SetPlayerColor(playerid,COLOR_SAPA);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
				}
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
			}
		}
		else
		{
		    if((PlayerInfo[playerid][pMember] == 9) && PlayerInfo[playerid][pDuty] == 1)
	    	{
	    		SetPlayerColor(playerid,TEAM_NEWS_COLOR);
			}
			else if((PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17 || PlayerInfo[playerid][pTaxiLicense] == 1) && TransportDuty[playerid] != 0)
			{
  				SetPlayerColor(playerid,TEAM_TAXI_COLOR);
			}
			else if(PlayerInfo[playerid][pMember] == 10)
			{
			    if(PlayerInfo[playerid][pDuty] == 1)
			    {
			    	SetPlayerColor(playerid, COLOR_TAXI);
				}
				else
				{
			    	SetPlayerColor(playerid,TEAM_HIT_COLOR); //
				}
			}
			else if((PlayerInfo[playerid][pMember] == 4) && PlayerInfo[playerid][pDuty] == 1)
			{
   				SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			else if((PlayerInfo[playerid][pMember] == 12) && PlayerInfo[playerid][pDuty] == 1)
			{
  				SetPlayerColor(playerid, COLOR_TR);
			}
			else
			{
			    SetPlayerColor(playerid,TEAM_HIT_COLOR); // white
   			}
			if(PlayerInfo[playerid][pWantedLevel] > 0)
		    {
				//SetPlayerColor(playerid,WANTED_COLOR);
				SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
			}
		}
	}
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid,objectid)
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	return;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	return 1;
}

public OnGameModeExit()
{
    djson_GameModeExit();
    SaveBiz();
    g_mysql_Exit();
    return 1;
}

stock LoadThePay()
{

	new sz_FacPayStr[128], File: i_FileHandle, arrayIndex;

	#define PAY_FILE "factionpay.cfg"

	if(!fexist(PAY_FILE)) return 1; // Why create a file when you're trying to load?

	i_FileHandle = fopen(PAY_FILE, io_read);
	while (arrayIndex < sizeof(FactionPay))
	{
		fread(i_FileHandle, sz_FacPayStr);
		sscanf(sz_FacPayStr, "p<|>iiiiiii",
			FactionPay[arrayIndex][0],
			FactionPay[arrayIndex][1],
			FactionPay[arrayIndex][2],
			FactionPay[arrayIndex][3],
			FactionPay[arrayIndex][4],
			FactionPay[arrayIndex][5],
			FactionPay[arrayIndex][6]
		);
		arrayIndex++;
	}
	return fclose(i_FileHandle);
}

stock SaveThePay()
{

	new	File: i_FileHandle = fopen(PAY_FILE, io_write), arrayIndex, sz_FileStr[128];

	if(i_FileHandle)
	{
		while(arrayIndex < sizeof(FactionPay)) {
			format(sz_FileStr, sizeof(sz_FileStr), "%d|%d|%d|%d|%d|%d|%d\r\n",
				FactionPay[arrayIndex][0],
				FactionPay[arrayIndex][1],
			    FactionPay[arrayIndex][2],
				FactionPay[arrayIndex][3],
				FactionPay[arrayIndex][4],
				FactionPay[arrayIndex][5],
				FactionPay[arrayIndex][6]
			);
			fwrite(i_FileHandle, sz_FileStr);
			arrayIndex++;
		}

		#undef PAY_FILE
		return fclose(i_FileHandle);
	}
	return 0;
}

stock Misc_Save() {

	new
		szFileStr[32],
		File: iFileHandle = fopen("serverConfig.ini", io_write);

	ini_SetString(iFileHandle, "maxadminlevel", MaxAdminPassword);
	ini_SetInteger(iFileHandle, szFileStr, "RaceLaps", RaceTotalLaps);
	ini_SetInteger(iFileHandle, szFileStr, "RaceJoins", TotalJoinsRace);
	ini_SetInteger(iFileHandle, szFileStr, "Jackpot", Jackpot);
	ini_SetInteger(iFileHandle, szFileStr, "Tax", Tax);
	ini_SetInteger(iFileHandle, szFileStr, "TaxVal", TaxValue);
	ini_SetInteger(iFileHandle, szFileStr, "VIPM", VIPM);
	ini_SetInteger(iFileHandle, szFileStr, "LoginCount", TotalLogin);
	ini_SetInteger(iFileHandle, szFileStr, "ConnCount", TotalConnect);
	ini_SetInteger(iFileHandle, szFileStr, "ABanCount", TotalAutoBan);
	ini_SetInteger(iFileHandle, szFileStr, "RegCount", TotalRegister);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPCount", MaxPlayersConnected);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPDay", MPDay);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPMonth", MPMonth);
	ini_SetInteger(iFileHandle, szFileStr, "MaxPYear", MPYear);
	ini_SetInteger(iFileHandle, szFileStr, "Uptime", TotalUptime);
	ini_SetInteger(iFileHandle, szFileStr, "BoxWins", Titel[TitelWins]);
	ini_SetInteger(iFileHandle, szFileStr, "BoxLosses", Titel[TitelLoses]);
	ini_SetInteger(iFileHandle, szFileStr, "SpecTimer", SpecTimer);
	ini_SetString(iFileHandle, "H275Pass", House275Password);
	ini_SetString(iFileHandle, "H63Pass", House63Password);
	ini_SetString(iFileHandle, "H310Pass", House310Password);
	ini_SetString(iFileHandle, "H380Pass", House380Password);
	ini_SetString(iFileHandle, "P1906Pass", CustomProject1906Password);
	if(DoubleXP) {
		ini_SetInteger(iFileHandle, szFileStr, "DoubleXP", true);
	}
	if(iRewardPlay) {
		ini_SetInteger(iFileHandle, szFileStr, "RewardPlay", true);
	}
	if(iRewardBox) {

	    new
			Float: fObjectPos[3];

		GetDynamicObjectPos(iRewardObj, fObjectPos[0], fObjectPos[1], fObjectPos[2]);
	    ini_SetFloat(iFileHandle, szFileStr, "RewardPosX", fObjectPos[0]);
		ini_SetFloat(iFileHandle, szFileStr, "RewardPosY", fObjectPos[1]);
		ini_SetFloat(iFileHandle, szFileStr, "RewardPosZ", fObjectPos[2]);
	}
	fclose(iFileHandle);
}

stock Tax_Save() {

	new
		szFileStr[32],
		File: iFileHandle = fopen("tax.ini", io_write);

	ini_SetInteger(iFileHandle, szFileStr, "Tax", Tax);
	ini_SetInteger(iFileHandle, szFileStr, "TaxVal", TaxValue);

	fclose(iFileHandle);
}

stock Misc_Load() {

	new
		szResult[32],
		szFileStr[160],
		Float: fObjectPos[3],
		File: iFileHandle = fopen("serverConfig.ini", io_read);

	while(fread(iFileHandle, szFileStr, sizeof(szFileStr))) {

		if(ini_GetValue(szFileStr, "maxadminlevel", MaxAdminPassword, sizeof(MaxAdminPassword))) 								continue;
		if(ini_GetValue(szFileStr, "H275Pass", House275Password, sizeof(House275Password))) 								continue;
		if(ini_GetValue(szFileStr, "H63Pass", House63Password, sizeof(House63Password))) 									continue;
		if(ini_GetValue(szFileStr, "H310Pass", House310Password, sizeof(House310Password))) 								continue;
		if(ini_GetValue(szFileStr, "H380Pass", House380Password, sizeof(House380Password))) 								continue;
		if(ini_GetValue(szFileStr, "P1906Pass", CustomProject1906Password, sizeof(CustomProject1906Password))) 				continue;

		else if(ini_GetValue(szFileStr, "RaceLaps", szResult, sizeof(szResult)))											RaceTotalLaps = strval(szResult);
		else if(ini_GetValue(szFileStr, "RaceJoins", szResult, sizeof(szResult)))											TotalJoinsRace = strval(szResult);
		else if(ini_GetValue(szFileStr, "Jackpot", szResult, sizeof(szResult)))												Jackpot = strval(szResult);
		else if(ini_GetValue(szFileStr, "Tax", szResult, sizeof(szResult)))													Tax = strval(szResult);
		else if(ini_GetValue(szFileStr, "TaxVal", szResult, sizeof(szResult)))												TaxValue = strval(szResult);
		else if(ini_GetValue(szFileStr, "VIPM", szResult, sizeof(szResult)))												VIPM = strval(szResult);
		else if(ini_GetValue(szFileStr, "LoginCount", szResult, sizeof(szResult)))											TotalLogin = strval(szResult);
		else if(ini_GetValue(szFileStr, "ConnCount", szResult, sizeof(szResult)))											TotalConnect = strval(szResult);
		else if(ini_GetValue(szFileStr, "ABanCount", szResult, sizeof(szResult)))											TotalAutoBan = strval(szResult);
		else if(ini_GetValue(szFileStr, "RegCount", szResult, sizeof(szResult)))											TotalRegister = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPCount", szResult, sizeof(szResult)))											MaxPlayersConnected	= strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPDay", szResult, sizeof(szResult)))												MPDay = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPMonth", szResult, sizeof(szResult)))											MPMonth = strval(szResult);
		else if(ini_GetValue(szFileStr, "MaxPYear", szResult, sizeof(szResult)))											MPYear = strval(szResult);
		else if(ini_GetValue(szFileStr, "Uptime", szResult, sizeof(szResult)))												TotalUptime = strval(szResult);
		else if(ini_GetValue(szFileStr, "BoxWins", szResult, sizeof(szResult)))												Titel[TitelWins] = strval(szResult);
		else if(ini_GetValue(szFileStr, "BoxLosses", szResult, sizeof(szResult)))											Titel[TitelLoses] = strval(szResult);
		else if(ini_GetValue(szFileStr, "SpecTimer", szResult, sizeof(szResult)))											SpecTimer = strval(szResult);
		else if(ini_GetValue(szFileStr, "DoubleXP", szResult, sizeof(szResult)))											DoubleXP = strval(szResult);
		else if(ini_GetValue(szFileStr, "RewardPlay", szResult, sizeof(szResult)))											iRewardPlay = strval(szResult);
		else if(ini_GetValue(szFileStr, "RewardPosX", szResult, sizeof(szResult)))											fObjectPos[0] = floatstr(szResult);
		else if(ini_GetValue(szFileStr, "RewardPosY", szResult, sizeof(szResult)))											fObjectPos[1] = floatstr(szResult);
		else if(ini_GetValue(szFileStr, "RewardPosZ", szResult, sizeof(szResult)))											fObjectPos[2] = floatstr(szResult);
	}
	if(iRewardBox) {
		iRewardObj = CreateDynamicObject(19055, fObjectPos[0], fObjectPos[1], fObjectPos[2], 0.0, 0.0, 0.0, .streamdistance = 100.0);
		tRewardText = CreateDynamic3DTextLabel("Gold Reward Gift Box\n{FFFFFF}/getrewardgift{F3FF02} to claim your gift!", COLOR_YELLOW, fObjectPos[0], fObjectPos[1], fObjectPos[2], 10.0, .testlos = 1, .streamdistance = 50.0);
	}
	fclose(iFileHandle);
	printf("[MiscLoad] Misc Loaded");
}

stock Tax_Load() {

	new
		szResult[32],
		szFileStr[160],
		File: iFileHandle = fopen("tax.ini", io_read);

	while(fread(iFileHandle, szFileStr, sizeof(szFileStr))) {

		if(ini_GetValue(szFileStr, "Tax", szResult, sizeof(szResult)))													Tax = strval(szResult);
		else if(ini_GetValue(szFileStr, "TaxVal", szResult, sizeof(szResult)))												TaxValue = strval(szResult);
	}
	fclose(iFileHandle);
	printf("[Tax] Government Tax/Vault Loaded.");
}

ini_GetValue(szParse[], szValueName[], szDest[], iDestLen) { // Mike!!1

	new
		iPos = strfindex(szParse, "=", false),
		iLength = strlen(szParse);

	while(iLength-- && szParse[iLength] <= ' ') {
		szParse[iLength] = 0;
	}

	if(strcmp(szParse, szValueName, false, iPos) == 0) {
		strmid(szDest, szParse, iPos + 1, iLength + 1, iDestLen);
		return 1;
	}
	return 0;
}

stock ini_GetInt(szParse[], szValueName[], &iValue) {

	new
		iPos = strfindex(szParse, "=", false);

	if(strcmp(szParse, szValueName, false, iPos) == 0) {
		iValue = strval(szParse[iPos + 1]);
		return 1;
	}
	return 0;
}

stock ini_GetFloat(szParse[], szValueName[], & Float: iValue) {

	new
		iPos = strfindex(szParse, "=", false);

	if(strcmp(szParse, szValueName, false, iPos) == 0) {
		iValue = floatstr(szParse[iPos + 1]);
		return 1;
	}
	return 0;
}

stock ini_GetString(szParse[], szValueName[], szDest[], iLength = sizeof(szDest)) {

	new
		iPos = strfindex(szParse, "=", false);

	if(strcmp(szParse, szValueName, false, iPos) == 0) {
		strcat(szDest, szParse[iPos + 1], iLength);
		return 1;
	}
	return 0;
}

stock LoadElevatorStuff() {

	if(!fexist("elevator.ini")) return 1;

	new
		szFileStr[64],
		iIndex,
		File: iFileHandle = fopen("elevator.ini", io_read);

	while(iIndex < 20 && fread(iFileHandle, szFileStr)) {
		sscanf(szFileStr, "p<|>s[24]s[24]", LAElevatorFloorData[0][iIndex], LAElevatorFloorData[1][iIndex]);
		StripNL(LAElevatorFloorData[1][iIndex]);
	 	iIndex++;
	}
	printf("[LoadElevatorStuff] %i floors loaded.", iIndex);
	return fclose(iFileHandle);
}

stock SaveElevatorStuff() {

	new
		File: iFileHandle = fopen("elevator.ini", io_write);

	for(new iIndex; iIndex < 20; ++iIndex) {
		fwrite(iFileHandle, LAElevatorFloorData[0][iIndex]);
		fputchar(iFileHandle, '|', false);
		fwrite(iFileHandle, LAElevatorFloorData[1][iIndex]);
		fwrite(iFileHandle, "\r\n");
	}
	return fclose(iFileHandle);
}

stock LoadFamilies() {

	if(!fexist("families.cfg")) return 1;

	new
		szFileStr[512],
		iIndex,
		File: iFileHandle = fopen("families.cfg", io_read);

	while(iIndex < sizeof(FamilyInfo) && fread(iFileHandle, szFileStr)) {
		sscanf(szFileStr, "p<|>is[42]s[65]s[24]iiifffiiis[20]s[20]s[20]s[20]s[20]s[20]iiiiiiiiiiiiiiiiiiiiii",
			FamilyInfo[iIndex][FamilyTaken],
			FamilyInfo[iIndex][FamilyName],
			FamilyInfo[iIndex][FamilyMOTD],
			FamilyInfo[iIndex][FamilyLeader],
			FamilyInfo[iIndex][FamilyBank],
			FamilyInfo[iIndex][FamilyCash],
			FamilyInfo[iIndex][FamilyUSafe],
			FamilyInfo[iIndex][FamilySafe][0],
			FamilyInfo[iIndex][FamilySafe][1],
			FamilyInfo[iIndex][FamilySafe][2],
			FamilyInfo[iIndex][FamilyPot],
			FamilyInfo[iIndex][FamilyCrack],
			FamilyInfo[iIndex][FamilyMats],
			FamilyInfo[iIndex][FamilyRank1],
			FamilyInfo[iIndex][FamilyRank2],
			FamilyInfo[iIndex][FamilyRank3],
			FamilyInfo[iIndex][FamilyRank4],
			FamilyInfo[iIndex][FamilyRank5],
			FamilyInfo[iIndex][FamilyRank6],
			FamilyInfo[iIndex][FamilyMembers],
			FamilyInfo[iIndex][FamilyMaxSkins],
			FamilyInfo[iIndex][FamilySkins][0],
			FamilyInfo[iIndex][FamilySkins][1],
			FamilyInfo[iIndex][FamilySkins][2],
			FamilyInfo[iIndex][FamilySkins][3],
			FamilyInfo[iIndex][FamilySkins][4],
			FamilyInfo[iIndex][FamilySkins][5],
			FamilyInfo[iIndex][FamilySkins][6],
			FamilyInfo[iIndex][FamilySkins][7],
			FamilyInfo[iIndex][FamilyColor],
			FamilyInfo[iIndex][FamilyTurfTokens],
			FamilyInfo[iIndex][FamilyGuns][0],
			FamilyInfo[iIndex][FamilyGuns][1],
			FamilyInfo[iIndex][FamilyGuns][2],
			FamilyInfo[iIndex][FamilyGuns][3],
			FamilyInfo[iIndex][FamilyGuns][4],
			FamilyInfo[iIndex][FamilyGuns][5],
			FamilyInfo[iIndex][FamilyGuns][6],
			FamilyInfo[iIndex][FamilyGuns][7],
			FamilyInfo[iIndex][FamilyGuns][8],
			FamilyInfo[iIndex][FamilyGuns][9]
		);
		++iIndex;
	}
	printf("[LoadFamilies] %i families loaded.", iIndex);
	return fclose(iFileHandle);
}

stock SaveFamilies()
{
	new idx;
	new File: file2;
	while (idx < sizeof(FamilyInfo))
	{
		new coordsstring[512];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%d|%d|%d|%f|%f|%f|%d|%d|%d|%s|%s|%s|%s|%s|%s|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d\n",
		FamilyInfo[idx][FamilyTaken],
		FamilyInfo[idx][FamilyName],
		FamilyInfo[idx][FamilyMOTD],
		FamilyInfo[idx][FamilyLeader],
		FamilyInfo[idx][FamilyBank],
		FamilyInfo[idx][FamilyCash],
		FamilyInfo[idx][FamilyUSafe],
		FamilyInfo[idx][FamilySafe][0],
		FamilyInfo[idx][FamilySafe][1],
		FamilyInfo[idx][FamilySafe][2],
		FamilyInfo[idx][FamilyPot],
		FamilyInfo[idx][FamilyCrack],
		FamilyInfo[idx][FamilyMats],
		FamilyInfo[idx][FamilyRank1],
		FamilyInfo[idx][FamilyRank2],
		FamilyInfo[idx][FamilyRank3],
		FamilyInfo[idx][FamilyRank4],
		FamilyInfo[idx][FamilyRank5],
		FamilyInfo[idx][FamilyRank6],
		FamilyInfo[idx][FamilyMembers],
		FamilyInfo[idx][FamilyMaxSkins],
		FamilyInfo[idx][FamilySkins][0],
		FamilyInfo[idx][FamilySkins][1],
		FamilyInfo[idx][FamilySkins][2],
		FamilyInfo[idx][FamilySkins][3],
		FamilyInfo[idx][FamilySkins][4],
		FamilyInfo[idx][FamilySkins][5],
		FamilyInfo[idx][FamilySkins][6],
		FamilyInfo[idx][FamilySkins][7],
		FamilyInfo[idx][FamilyColor],
		FamilyInfo[idx][FamilyTurfTokens],
		FamilyInfo[idx][FamilyGuns][0],
		FamilyInfo[idx][FamilyGuns][1],
		FamilyInfo[idx][FamilyGuns][2],
		FamilyInfo[idx][FamilyGuns][3],
		FamilyInfo[idx][FamilyGuns][4],
		FamilyInfo[idx][FamilyGuns][5],
		FamilyInfo[idx][FamilyGuns][6],
		FamilyInfo[idx][FamilyGuns][7],
		FamilyInfo[idx][FamilyGuns][8],
		FamilyInfo[idx][FamilyGuns][9]);
		if(idx == 0)
		{
			file2 = fopen("families.cfg", io_write);
		}
		else
		{
			file2 = fopen("families.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

stock LoadFamiliesHQ()
{
    if(!fexist("familieshq.ini")) return 1;
    new string2[64];
	format(string2, sizeof(string2), "familieshq.ini");
	new File: GangFile = fopen(string2, io_read);
	if ( GangFile )
	{
	    //print("[DEBUG] LoadFamiliesHQ: GangFile exists, the handle parsed.");
		new key[ 256 ] , val[ 256 ];
		new Data[ 256 ];
		//print("[DEBUG] Starting while ( fread( GangFile , Data , sizeof( Data ) ) )");
		while ( fread( GangFile , Data , sizeof( Data ) ) )
		{
		    new string[128];
		    for(new f = 0; f < MAX_FAMILY; f++)
    		{
				key = ini_GetKey( Data );
				format(string, 128, "Family%dEntranceX",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyEntrance][0] = floatstr( val ); }
				format(string, 128, "Family%dEntranceY",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyEntrance][1] = floatstr( val ); }
				format(string, 128, "Family%dEntranceZ",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyEntrance][2] = floatstr( val ); }
				format(string, 128, "Family%dEntranceA",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyEntrance][3] = floatstr( val ); }
				format(string, 128, "Family%dExitX",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyExit][0] = floatstr( val ); }
				format(string, 128, "Family%dExitY",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyExit][1] = floatstr( val ); }
				format(string, 128, "Family%dExitZ",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyExit][2] = floatstr( val ); }
				format(string, 128, "Family%dExitA",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyExit][3] = floatstr( val ); }
				format(string, 128, "Family%dInterior",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyInterior] = strval( val ); }
				format(string, 128, "Family%dCustomMap",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyCustomMap] = strval( val ); }
				format(string, 128, "Family%dVirtualWorld",f);
				if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyInfo[f][FamilyVirtualWorld] = strval( val ); }
				for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    			{
    			    format(string, 128, "Family%dVeh%dModelId",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvModelId] = strval( val ); }
					format(string, 128, "Family%dVeh%dSpawnx",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvSpawnx] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawny",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvSpawny] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawnz",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvSpawnz] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dSpawna",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvSpawna] = floatstr( val ); }
					format(string, 128, "Family%dVeh%dLock",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvLock] = strval( val ); }
					format(string, 128, "Family%dVeh%dLocked",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvLocked] = strval( val ); }
					format(string, 128, "Family%dVeh%dPaintJob",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvPaintJob] = strval( val ); }
					format(string, 128, "Family%dVeh%dColor1",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvColor1] = strval( val ); }
					format(string, 128, "Family%dVeh%dColor2",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvColor2] = strval( val ); }
					format(string, 128, "Family%dVeh%dFuel",f, fv);
					if( strcmp( key , string , true ) == 0 ) { val = Ini_Value( Data ); FamilyVehicleInfo[f][fv][fvFuel] = floatstr( val ); }
    			}
    			//printf("Family %d loaded [DEBUG] FamilyEntranceX: %.1f FamilyEntranceY: %.1f FamilyEntranceZ: %.1f", f, FamilyInfo[f][FamilyEntrance][0], FamilyInfo[f][FamilyEntrance][1], FamilyInfo[f][FamilyEntrance][2]);
			}
		}
		fclose(GangFile);
	}
	return 1;
}

stock SaveFamiliesHQ()
{
	new File: hFile = fopen("familieshq.ini", io_write);
	if (hFile)
	{
		new var[32];
		for(new f = 0; f < MAX_FAMILY; f++)
   		{
			format(var, 32, "Family%dEntranceX=%.1f\n",f, FamilyInfo[f][FamilyEntrance][0]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceY=%.1f\n",f, FamilyInfo[f][FamilyEntrance][1]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceZ=%.1f\n",f, FamilyInfo[f][FamilyEntrance][2]); fwrite(hFile, var);
			format(var, 32, "Family%dEntranceA=%.1f\n",f, FamilyInfo[f][FamilyEntrance][3]); fwrite(hFile, var);
			format(var, 32, "Family%dExitX=%.1f\n",f, FamilyInfo[f][FamilyExit][0]); fwrite(hFile, var);
			format(var, 32, "Family%dExitY=%.1f\n",f, FamilyInfo[f][FamilyExit][1]); fwrite(hFile, var);
			format(var, 32, "Family%dExitZ=%.1f\n",f, FamilyInfo[f][FamilyExit][2]); fwrite(hFile, var);
			format(var, 32, "Family%dExitA=%.1f\n",f, FamilyInfo[f][FamilyExit][3]); fwrite(hFile, var);
			format(var, 32, "Family%dInterior=%d\n",f, FamilyInfo[f][FamilyInterior]); fwrite(hFile, var);
			format(var, 32, "Family%dCustomMap=%d\n",f, FamilyInfo[f][FamilyCustomMap]); fwrite(hFile, var);
			format(var, 32, "Family%dVirtualWorld=%d\n",f, FamilyInfo[f][FamilyVirtualWorld]); fwrite(hFile, var);

			for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
   			{
   			    format(var, 32, "Family%dVeh%dModelId=%d\n",f, fv, FamilyVehicleInfo[f][fv][fvModelId]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnx=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnx]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawny=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawny]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawnz=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawnz]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dSpawna=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvSpawna]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLock=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLock]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dLocked=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvLocked]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dPaintJob=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvPaintJob]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor1=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor1]); fwrite(hFile, var);
				format(var, 32, "Family%dVeh%dColor2=%d\n",f, fv,FamilyVehicleInfo[f][fv][fvColor2]); fwrite(hFile, var);
				if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID) FamilyVehicleInfo[f][fv][fvFuel] = VehicleFuel[FamilyVehicleInfo[f][fv][fvId]];
				format(var, 32, "Family%dVeh%dFuel=%.1f\n",f, fv,FamilyVehicleInfo[f][fv][fvFuel]); fwrite(hFile, var);
    		}
  		}
		fclose(hFile);
	}
	return 1;
}

stock LoadcDealerships()
{
	new idx, idx2;
	new string[128];
	new owner[MAX_PLAYER_NAME];
	new message[128];
	djAutocommit(false);
	while (idx < sizeof(CarDealershipInfo))
	{
        format(string, sizeof(string), "%d/owned", idx);
		CarDealershipInfo[idx][cdOwned] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/owner", idx);
		format(owner, sizeof(owner), "%s", dj("cardealerships.json", string));
		strmid(CarDealershipInfo[idx][cdOwner], owner, 0, strlen(owner), 255);
		format(string, sizeof(string), "%d/entrance/x", idx);
		CarDealershipInfo[idx][cdEntranceX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/y", idx);
		CarDealershipInfo[idx][cdEntranceY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/entrance/z", idx);
		CarDealershipInfo[idx][cdEntranceZ] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/x", idx);
		CarDealershipInfo[idx][cdExitX] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/y", idx);
		CarDealershipInfo[idx][cdExitY] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/exit/z", idx);
	    CarDealershipInfo[idx][cdExitZ] = djFloat("cardealerships.json", string);
	    format(string, sizeof(string), "%d/message", idx);
		format(message, sizeof(message), "%s", dj("cardealerships.json", string));
		strmid(CarDealershipInfo[idx][cdMessage], message, 0, strlen(message), 255);
		format(string, sizeof(string), "%d/till", idx);
		CarDealershipInfo[idx][cdTill] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/interior", idx);
		CarDealershipInfo[idx][cdInterior] = djInt("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/x", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][0] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/y", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][1] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/z", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][2] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/vehiclespawn/a", idx);
		CarDealershipInfo[idx][cdVehicleSpawn][3] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/radius", idx);
		CarDealershipInfo[idx][cdRadius] = djFloat("cardealerships.json", string);
		format(string, sizeof(string), "%d/price", idx);
		CarDealershipInfo[idx][cdPrice] = djInt("cardealerships.json", string);
		while (idx2 < MAX_DEALERSHIPVEHICLES)
		{
            format(string, sizeof(string), "%d/vehicleangle/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnAngle][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnx/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnX][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawny/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnY][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclespawnz/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleSpawnZ][idx2] = djFloat("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehiclecost/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleCost][idx2] = djInt("cardealerships.json", string);
		    format(string, sizeof(string), "%d/vehicletypes/%d", idx, idx2);
		    CarDealershipInfo[idx][cdVehicleModel][idx2] = djInt("cardealerships.json", string);
		    idx2++;
		}
		idx2 = 0;
		idx++;
	}
	djAutocommit(true);
	printf("[LoadCDealerships] %i dealerships loaded.", idx);
	return 1;
}

stock SavecDealership(id)
{
	new idx2;
	new string[128];
	//djAutocommit(false);
    format(string, sizeof(string), "%d/owned", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdOwned]);
	format(string, sizeof(string), "%d/owner", id);
	djSet("cardealerships.json", string, CarDealershipInfo[id][cdOwner]);
	format(string, sizeof(string), "%d/entrance/x", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdEntranceX]);
	format(string, sizeof(string), "%d/entrance/y", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdEntranceY]);
	format(string, sizeof(string), "%d/entrance/z", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdEntranceZ]);
	format(string, sizeof(string), "%d/exit/x", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdExitX]);
	format(string, sizeof(string), "%d/exit/y", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdExitY]);
	format(string, sizeof(string), "%d/exit/z", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdExitZ]);
	format(string, sizeof(string), "%d/message", id);
	djSet("cardealerships.json", string, CarDealershipInfo[id][cdMessage]);
	format(string, sizeof(string), "%d/till", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdTill]);
	format(string, sizeof(string), "%d/interior", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdInterior]);
	format(string, sizeof(string), "%d/vehiclespawn/x", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][0]);
	format(string, sizeof(string), "%d/vehiclespawn/y", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][1]);
	format(string, sizeof(string), "%d/vehiclespawn/z", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][2]);
	format(string, sizeof(string), "%d/vehiclespawn/a", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawn][3]);
	format(string, sizeof(string), "%d/radius", id);
	djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdRadius]);
	format(string, sizeof(string), "%d/price", id);
	djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdPrice]);
	while (idx2 < MAX_DEALERSHIPVEHICLES)
	{
        format(string, sizeof(string), "%d/vehicleangle/%d", id, idx2);
        djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnAngle][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnx/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnX][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawny/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnY][idx2]);
	    format(string, sizeof(string), "%d/vehiclespawnz/%d", id, idx2);
	    djSetFloat("cardealerships.json", string, CarDealershipInfo[id][cdVehicleSpawnZ][idx2]);
	    format(string, sizeof(string), "%d/vehiclecost/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdVehicleCost][idx2]);
	    format(string, sizeof(string), "%d/vehicletypes/%d", id, idx2);
	    djSetInt("cardealerships.json", string, CarDealershipInfo[id][cdVehicleModel][idx2]);
	    idx2++;
	}
    //djAutocommit(true);
	return 1;
}

stock FMemberCounter()
{

	new
		arrCounts[sizeof(FamilyInfo)],
		szFileStr[128],
		arrTimeStamp[2][3],
		File: iFileHandle;
	if(!fexist("logs/fmembercount.log")) {
		iFileHandle = fopen("logs/fmembercount.log", io_write);
	}
	else {
		iFileHandle = fopen("logs/fmembercount.log", io_append);
	}
	if(iFileHandle)
	{
		gettime(arrTimeStamp[0][0], arrTimeStamp[0][1], arrTimeStamp[0][2]);
		getdate(arrTimeStamp[1][0], arrTimeStamp[1][1], arrTimeStamp[1][2]);
		foreach(new i: Player) if(PlayerInfo[i][pAdmin] < 2 && playerTabbed[i] == 0 && PlayerInfo[i][pFMember] != 255) ++arrCounts[PlayerInfo[i][pFMember]];

		format(szFileStr, sizeof(szFileStr), "----------------------------------------\r\nDate: %d/%d/%d - Time: %d:%d\r\n", arrTimeStamp[1][1], arrTimeStamp[1][2], arrTimeStamp[1][0], arrTimeStamp[0][0], arrTimeStamp[0][1]);
		fwrite(iFileHandle, szFileStr);

		for(new iFam; iFam < sizeof(FamilyInfo); ++iFam) format(szFileStr, sizeof(szFileStr), "(%i) %s: %i\r\n", iFam+1, FamilyInfo[iFam][FamilyName], arrCounts[iFam]), fwrite(iFileHandle, szFileStr);
		return fclose(iFileHandle);
	}
	return 0;
}

forward HelpTimer(playerid);
public HelpTimer(playerid)
{
	if(GetPVarInt(playerid, "HelpTime") > 0)
 	{
  		SetPVarInt(playerid, "HelpTime", GetPVarInt(playerid, "HelpTime")-1);
    	if(GetPVarInt(playerid, "HelpTime") == 0)
     	{
      		SendClientMessageEx(playerid, COLOR_GREY, "Your help request has expired. Its recommended you seek help on the forums.");
        	DeletePVar(playerid, "COMMUNITY_ADVISOR_REQUEST");
         	return 1;
        }
		SetTimerEx("HelpTimer", 60000, 0, "d", playerid);
	}
	return 1;
}

forward ReportTimer(reportid);
public ReportTimer(reportid)
{
	if(Reports[reportid][BeingUsed] == 1)
	{
	    if(Reports[reportid][TimeToExpire] >= 0)
	    {
	        Reports[reportid][TimeToExpire]--;
	        if(Reports[reportid][TimeToExpire] == 0)
	        {
	            SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_YELLOW, "Your report has expired, if you still require Administrator Assitance you may report again.");
	            Reports[reportid][BeingUsed] = 0;
				Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
	            return 1;
	        }
  			Reports[reportid][ReportExpireTimer] = SetTimerEx("ReportTimer", 60000, 0, "d", reportid);
		}
	}
	return 1;
}

forward CaptureTimer(point);
public CaptureTimer(point)
{
	new string[128];
	new fam;
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
		new claimer = Points[point][ClaimerId];
		new Float: x, Float: y, Float: z;
		GetPlayerPos(claimer, x, y, z);
		if (Points[point][Capturex] != x || Points[point][Capturey] != y || Points[point][Capturez] != z || GetPVarInt(Points[point][ClaimerId],"Injured") == 1)
		{
			SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "You failed to capture. You either moved or died while attempting to capture.");
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][TimeToClaim] = 0;
		}
		else
		{
			if(Points[point][Vulnerable] > 0)
			{
			    SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "You failed to capture. The point was already captured.");
				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
				return 1;
			}
			if(playerTabbed[claimer] != 0)
			{
			    SendClientMessageEx(Points[point][ClaimerId], COLOR_LIGHTBLUE, "You failed to capture. You were alt-tabbed.");
			    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may have possibly alt tabbed to capture a point.", GetPlayerNameEx(claimer), claimer);
				ABroadCast( COLOR_YELLOW, string, 2 );
   				Points[point][ClaimerId] = INVALID_PLAYER_ID;
				Points[point][TimeToClaim] = 0;
			    return 1;
			}
			fam = PlayerInfo[claimer][pFMember];
            Points[point][PlayerNameCapping] = GetPlayerNameEx(claimer);
		   	format(string, sizeof(string), "%s has attempted to take control of the %s for %s, it will be theirs in %d minutes.", Points[point][PlayerNameCapping], Points[point][Name], FamilyInfo[fam][FamilyName], TIME_TO_TAKEOVER);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			if(Points[point][CaptureProccessEx] >= 1)
			{
				UpdateDynamic3DTextLabelText(Points[point][CaptureProccess], COLOR_YELLOW, string);
				Points[point][CaptureProccessEx] = 2;
			}
			Points[point][TakeOverTimerStarted] = 1;
			Points[point][TakeOverTimer] = 10;
			Points[point][ClaimerId] = INVALID_PLAYER_ID;
			Points[point][ClaimerTeam] = fam;
			Points[point][TimeToClaim] = 0;
			if(Points[point][CaptureTimerEx2] != -1) KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = SetTimerEx("CaptureTimerEx", 60000, 1, "d", point);
		}
	}
	return 1;
}

forward ProgressTimer(point);
public ProgressTimer(point)
{
	if (Points[point][ClaimerId] != INVALID_PLAYER_ID && Points[point][TimeToClaim])
	{
	    new string[128];
		Points[point][TimeLeft]--;
		format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%d seconds left", Points[point][TimeLeft]);
		GameTextForPlayer(Points[point][ClaimerId], string, 1100, 3);
		if(Points[point][TimeLeft] >= 1) SetTimerEx("ProgressTimer", 1000, 0, "d", point);
		format(string, sizeof(string), "%s is attempting to capture the point, time left: %d", GetPlayerNameEx(Points[point][ClaimerId]), Points[point][TimeLeft]);
		if(Points[point][TimeLeft] == 9) Points[point][CaptureProgress] = CreateDynamic3DTextLabel(string, COLOR_RED, Points[point][Pointx], Points[point][Pointy], Points[point][Pointz]+1.0, 10.0);
				else if(Points[point][TimeLeft] < 9 && Points[point][TimeLeft] >= 0) UpdateDynamic3DTextLabelText(Points[point][CaptureProgress], COLOR_RED, string);
	}
	else
	{
	    DestroyDynamic3DTextLabel(Points[point][CaptureProgress]);
	    Points[point][ClaimerId] = INVALID_PLAYER_ID;
		Points[point][TimeToClaim] = 0;
	}

	if(Points[point][TimeLeft] <= 0)
	{
	    CaptureTimer(point);
	    Points[point][TimeLeft] = 0;
	}
	return 1;
}

forward ReplyTimer(reportid);
public ReplyTimer(reportid)
{
    Reports[reportid][ReportPriority] = 0;
    Reports[reportid][ReportLevel] = 0;
    Reports[reportid][BeingUsed] = 0;
	Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
    Reports[reportid][CheckingReport] = INVALID_PLAYER_ID;
}

forward CaptureTimerEx(point);
public CaptureTimerEx(point)
{
	new string[128];
	new fam;
	if (Points[point][TakeOverTimerStarted])
	{
		fam = Points[point][ClaimerTeam];
		if (Points[point][TakeOverTimer] > 0)
		{
			Points[point][TakeOverTimer]--;
			format(string, sizeof(string), "%s has successfully attempted to take over of %s for %s, it will be theirs in %d minutes!",
			Points[point][PlayerNameCapping], Points[point][Name], FamilyInfo[fam][FamilyName], Points[point][TakeOverTimer]);
			UpdateDynamic3DTextLabelText(Points[point][CaptureProccess], COLOR_YELLOW, string);
		}
		else
		{
			Points[point][ClaimerTeam] = INVALID_PLAYER_ID;
			Points[point][TakeOverTimer] = 0;
			Points[point][TakeOverTimerStarted] = 0;
			Points[point][Announced] = 0;
			Points[point][Vulnerable] = NEW_VULNERABLE;
			DestroyDynamic3DTextLabel(Points[point][CaptureProccess]);
			Points[point][CaptureProccessEx] = 0;
			strmid(Points[point][Owner], FamilyInfo[fam][FamilyName], 0, 32, 32);
			strmid(Points[point][CapperName], Points[point][PlayerNameCapping], 0, 32, 32);
			format(string, sizeof(string), "%s has successfully taken control of the %s for %s.", Points[point][CapperName], Points[point][Name], Points[point][Owner]);
			SendClientMessageToAllEx(COLOR_YELLOW, string);
			UpdatePoints();
			KillTimer(Points[point][CaptureTimerEx2]);
			Points[point][CaptureTimerEx2] = -1;
		}
	}
}

stock SavePaintballArenas() {

	new
		szFileStr[2048],
		File: fHandle = fopen("arenas.cfg", io_write);

	if(fHandle)
	{
		for(new iIndex; iIndex < MAX_ARENAS; ++iIndex) {
		    format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f\r\n",
				PaintBallArena[iIndex][pbArenaName],
				PaintBallArena[iIndex][pbVirtual],
				PaintBallArena[iIndex][pbInterior],
				PaintBallArena[iIndex][pbDeathmatch1][0],
				PaintBallArena[iIndex][pbDeathmatch1][1],
				PaintBallArena[iIndex][pbDeathmatch1][2],
				PaintBallArena[iIndex][pbDeathmatch1][3],
				PaintBallArena[iIndex][pbDeathmatch2][0],
				PaintBallArena[iIndex][pbDeathmatch2][1],
				PaintBallArena[iIndex][pbDeathmatch2][2],
				PaintBallArena[iIndex][pbDeathmatch2][3],
				PaintBallArena[iIndex][pbDeathmatch3][0],
				PaintBallArena[iIndex][pbDeathmatch3][1],
				PaintBallArena[iIndex][pbDeathmatch3][2],
				PaintBallArena[iIndex][pbDeathmatch3][3],
				PaintBallArena[iIndex][pbDeathmatch4][0],
				PaintBallArena[iIndex][pbDeathmatch4][1],
				PaintBallArena[iIndex][pbDeathmatch4][2],
				PaintBallArena[iIndex][pbDeathmatch4][3],
				PaintBallArena[iIndex][pbTeamRed1][0],
				PaintBallArena[iIndex][pbTeamRed1][1],
				PaintBallArena[iIndex][pbTeamRed1][2],
				PaintBallArena[iIndex][pbTeamRed1][3],
				PaintBallArena[iIndex][pbTeamRed2][0],
				PaintBallArena[iIndex][pbTeamRed2][1],
				PaintBallArena[iIndex][pbTeamRed2][2],
				PaintBallArena[iIndex][pbTeamRed2][3],
				PaintBallArena[iIndex][pbTeamRed3][0],
				PaintBallArena[iIndex][pbTeamRed3][1],
				PaintBallArena[iIndex][pbTeamRed3][2],
				PaintBallArena[iIndex][pbTeamRed3][3],
				PaintBallArena[iIndex][pbTeamBlue1][0],
				PaintBallArena[iIndex][pbTeamBlue1][1],
				PaintBallArena[iIndex][pbTeamBlue1][2],
				PaintBallArena[iIndex][pbTeamBlue1][3],
				PaintBallArena[iIndex][pbTeamBlue2][0],
				PaintBallArena[iIndex][pbTeamBlue2][1],
				PaintBallArena[iIndex][pbTeamBlue2][2],
				PaintBallArena[iIndex][pbTeamBlue2][3],
				PaintBallArena[iIndex][pbTeamBlue3][0],
				PaintBallArena[iIndex][pbTeamBlue3][1],
				PaintBallArena[iIndex][pbTeamBlue3][2],
				PaintBallArena[iIndex][pbTeamBlue3][3],
				PaintBallArena[iIndex][pbFlagRedSpawn][0],
				PaintBallArena[iIndex][pbFlagRedSpawn][1],
				PaintBallArena[iIndex][pbFlagRedSpawn][2],
				PaintBallArena[iIndex][pbFlagBlueSpawn][0],
				PaintBallArena[iIndex][pbFlagBlueSpawn][1],
				PaintBallArena[iIndex][pbFlagBlueSpawn][2],
				PaintBallArena[iIndex][pbHillX],
				PaintBallArena[iIndex][pbHillY],
				PaintBallArena[iIndex][pbHillZ],
				PaintBallArena[iIndex][pbHillRadius]
			);
			fwrite(fHandle, szFileStr);
		}
		return fclose(fHandle);
	}
	return 0;
}
/*
stock LoadGates()  {

	if(!fexist("gates.cfg")) return 1;

	new
		szFileStr[512], // Accept all inputs!
		iArrayIndex,
		File: fHandle = fopen("gates.cfg", io_read);

	while(iArrayIndex < sizeof(GateInfo) && fread(fHandle, szFileStr)) {
		if(!sscanf(szFileStr, "p<|>dfdddds[24]ffffffffffffd",
			GateInfo[iArrayIndex][gHID],
			GateInfo[iArrayIndex][gSpeed],
			GateInfo[iArrayIndex][gRange],
			GateInfo[iArrayIndex][gModel],
			GateInfo[iArrayIndex][gVW],
			GateInfo[iArrayIndex][gInt],
			GateInfo[iArrayIndex][gPass],
			GateInfo[iArrayIndex][gPosX],
			GateInfo[iArrayIndex][gPosY],
			GateInfo[iArrayIndex][gPosZ],
			GateInfo[iArrayIndex][gRotX],
			GateInfo[iArrayIndex][gRotY],
			GateInfo[iArrayIndex][gRotZ],
			GateInfo[iArrayIndex][gPosXM],
			GateInfo[iArrayIndex][gPosYM],
			GateInfo[iArrayIndex][gPosZM],
			GateInfo[iArrayIndex][gRotXM],
			GateInfo[iArrayIndex][gRotYM],
			GateInfo[iArrayIndex][gRotZM],
			GateInfo[iArrayIndex][gRenderHQ]
		)) CreateGate(iArrayIndex++);
	}
	printf("[LoadGates] %i gates loaded.", iArrayIndex);
	return fclose(fHandle);
}
*/

stock UpdatePoints() {

	new
		szFileStr[256],
		File: fHandle = fopen("points.cfg", io_write);

	if(fHandle)
	{
		for(new iIndex; iIndex < MAX_POINTS; iIndex++) {
			format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%d|%d|%s|%s|%s|%d\r\n",
				Points[iIndex][Pointx],
				Points[iIndex][Pointy],
				Points[iIndex][Pointz],
				Points[iIndex][Type],
				Points[iIndex][Vulnerable],
				Points[iIndex][Owner],
				Points[iIndex][CapperName],
				Points[iIndex][Name],
				Points[iIndex][MatPoint]
			);
			fwrite(fHandle, szFileStr);
		}
		return fclose(fHandle);
	}
	return 0;
}

stock LoadPoints() {

	if(!fexist("points.cfg"))
		return 1;

	new
		szFileStr[256],
		File: fHandle = fopen("points.cfg", io_read),
		iIndex;

	while(iIndex < MAX_POINTS && fread(fHandle, szFileStr)) {
		if(!sscanf(szFileStr, "p<|>fffiis[32]s[24]s[32]i",
			Points[iIndex][Pointx],
			Points[iIndex][Pointy],
			Points[iIndex][Pointz],
			Points[iIndex][Type],
			Points[iIndex][Vulnerable],
			Points[iIndex][Owner],
			Points[iIndex][CapperName],
			Points[iIndex][Name],
			Points[iIndex][MatPoint]
		)) {
			Points[iIndex][CaptureTimerEx2] = -1;
			Points[iIndex][ClaimerId] = INVALID_PLAYER_ID;
			Points[iIndex][PointPickupID] = CreatePickupEx(1239, 23, Points[iIndex][Pointx], Points[iIndex][Pointy], Points[iIndex][Pointz]);
			++iIndex;
		}
	}
	printf("[LoadPoints] %i points loaded.", iIndex);
	return fclose(fHandle);
}

stock SaveTurfWars()
{

	new
		szFileStr[1024],
		File: fHandle = fopen("turfwars.cfg", io_write);
	if(fHandle)
	{
		for(new iIndex; iIndex < MAX_TURFS; ++iIndex) {
		    format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%f|%f|%f|%f\r\n",
				TurfWars[iIndex][twName],
				TurfWars[iIndex][twOwnerId],
				TurfWars[iIndex][twLocked],
				TurfWars[iIndex][twSpecial],
				TurfWars[iIndex][twVulnerable],
				TurfWars[iIndex][twMinX],
				TurfWars[iIndex][twMinY],
				TurfWars[iIndex][twMaxX],
				TurfWars[iIndex][twMaxY]
			);
			fwrite(fHandle, szFileStr);
		}
		return fclose(fHandle);
	}
	return 0;
}

stock LoadTurfWars() {

	if(!fexist("turfwars.cfg"))
		return 1;

	new
		szFileStr[1024],
		File: fHandle = fopen("turfwars.cfg", io_read),
		iIndex;

	while(iIndex < MAX_TURFS && fread(fHandle, szFileStr)) {
		if(!sscanf(szFileStr, "p<|>s[64]iiiiffff",
			TurfWars[iIndex][twName],
			TurfWars[iIndex][twOwnerId],
			TurfWars[iIndex][twLocked],
			TurfWars[iIndex][twSpecial],
			TurfWars[iIndex][twVulnerable],
			TurfWars[iIndex][twMinX],
			TurfWars[iIndex][twMinY],
			TurfWars[iIndex][twMaxX],
			TurfWars[iIndex][twMaxY]
		)) CreateTurfWarsZone(0, iIndex++);
	}
	printf("[LoadTurfWars] %i turfs loaded.", iIndex);
	return fclose(fHandle);
}

stock LoadMOTDs()
{
	new arrCoords[5][128];
	new strFromFile2[512];
	new File: file = fopen("motd.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		strmid(GlobalMOTD, arrCoords[0], 0, strlen(arrCoords[0]), 255);
		strmid(AdminMOTD, arrCoords[1], 0, strlen(arrCoords[1]), 255);
		strmid(VIPMOTD, arrCoords[2], 0, strlen(arrCoords[2]), 255);
		strmid(CAMOTD, arrCoords[3], 0, strlen(arrCoords[3]), 255);
		strmid(pMOTD, arrCoords[4], 0, strlen(arrCoords[4]), 255);
//		strmid(ShopTechPay, arrCoords[5], 0, strlen(arrCoords[5]), 255);
		fclose(file);
	}
	else
	{
		fcreate("motd.ini");
		print("motd.ini doesn't exit, setting the default MOTDs");
		format(GlobalMOTD, sizeof(GlobalMOTD), "HE-RP Defualt MOTD.");
		format(AdminMOTD, sizeof(AdminMOTD), "Admin MOTD: None.");
		format(VIPMOTD, sizeof(VIPMOTD), "VIP MOTD: None.");
		format(CAMOTD, sizeof(CAMOTD), "Helpers MOTD: None.");
		format(pMOTD, sizeof(pMOTD), "Default Box Message. (Change me)!");
		//format(ShopTechPay, sizeof(ShopTechPay), 1);
  		SaveMOTDs();
	}
	return 1;
}

stock SaveMOTDs()
{
	new coordsstring[512];
	format(coordsstring, sizeof(coordsstring), "%s|%s|%s|%s|%s", GlobalMOTD,AdminMOTD,VIPMOTD,CAMOTD,pMOTD);
	new File: file2 = fopen("motd.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return 1;
}

/*stock LoadDynamicDoors()
{
	new arrCoords[25][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicdoors.cfg", io_read);
	if (file)
	{
		new iIndex;
		while (iIndex < sizeof(DDoorsInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			strmid(DDoorsInfo[iIndex][ddDescription], arrCoords[0], 0, strlen(arrCoords[0]), 128);
	  		DDoorsInfo[iIndex][ddCustomInterior] = strval(arrCoords[1]);
	  		DDoorsInfo[iIndex][ddExteriorVW] = strval(arrCoords[2]);
	  		DDoorsInfo[iIndex][ddExteriorInt] = strval(arrCoords[3]);
	  		DDoorsInfo[iIndex][ddInteriorVW] = strval(arrCoords[4]);
	  		DDoorsInfo[iIndex][ddInteriorInt] = strval(arrCoords[5]);
	  		DDoorsInfo[iIndex][ddExteriorX] = floatstr(arrCoords[6]);
	  		DDoorsInfo[iIndex][ddExteriorY] = floatstr(arrCoords[7]);
	  		DDoorsInfo[iIndex][ddExteriorZ] = floatstr(arrCoords[8]);
	  		DDoorsInfo[iIndex][ddExteriorA] = floatstr(arrCoords[9]);
	  		DDoorsInfo[iIndex][ddInteriorX] = floatstr(arrCoords[10]);
	  		DDoorsInfo[iIndex][ddInteriorY] = floatstr(arrCoords[11]);
	  		DDoorsInfo[iIndex][ddInteriorZ] = floatstr(arrCoords[12]);
	  		DDoorsInfo[iIndex][ddInteriorA] = floatstr(arrCoords[13]);
	  		DDoorsInfo[iIndex][ddCustomExterior] = strval(arrCoords[14]);
	  		DDoorsInfo[iIndex][ddVIP] = strval(arrCoords[15]);
	  		DDoorsInfo[iIndex][ddFamily] = strval(arrCoords[16]);
	  		DDoorsInfo[iIndex][ddFaction] = strval(arrCoords[17]);
	  		DDoorsInfo[iIndex][ddAdmin] = strval(arrCoords[18]);
	  		DDoorsInfo[iIndex][ddWanted] = strval(arrCoords[19]);
	  		DDoorsInfo[iIndex][ddVehicleAble] = strval(arrCoords[20]);
	  		DDoorsInfo[iIndex][ddColor] = strval(arrCoords[21]);
	  		DDoorsInfo[iIndex][ddPickupModel] = strval(arrCoords[22]);
	  		strmid(DDoorsInfo[iIndex][dPass], arrCoords[23], 0, strlen(arrCoords[23]), 24);
	  		DDoorsInfo[iIndex][dLocked] = strval(arrCoords[24]);

	  		if(!IsNull(DDoorsInfo[iIndex][ddDescription]))
	  		{
	  		    CreateDynamicDoor(iIndex);
			}
			iIndex++;
		}
		printf("[Dynamic Doors] %i loaded.", iIndex);
		fclose(file);
	}
	return 1;
}*/

/*stock LoadDynamicMapIcons()
{
	new arrCoords[7][64];
	new strFromFile2[256];
	new File: file = fopen("dynamicmapicons.cfg", io_read);
	if (file)
	{
		new iIndex;
		while (iIndex < sizeof(DMPInfo))
		{
			fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
	  		DMPInfo[iIndex][dmpMarkerType] = strval(arrCoords[0]);
	  		DMPInfo[iIndex][dmpColor] = strval(arrCoords[1]);
	  		DMPInfo[iIndex][dmpVW] = strval(arrCoords[2]);
	  		DMPInfo[iIndex][dmpInt] = strval(arrCoords[3]);
	  		DMPInfo[iIndex][dmpPosX] = floatstr(arrCoords[4]);
	  		DMPInfo[iIndex][dmpPosY] = floatstr(arrCoords[5]);
	  		DMPInfo[iIndex][dmpPosZ] = floatstr(arrCoords[6]);

	  		if(DMPInfo[iIndex][dmpMarkerType] != 0)
	  		{
    			DMPInfo[iIndex][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[iIndex][dmpPosX], DMPInfo[iIndex][dmpPosY], DMPInfo[iIndex][dmpPosZ], DMPInfo[iIndex][dmpMarkerType], DMPInfo[iIndex][dmpColor], DMPInfo[iIndex][dmpVW], DMPInfo[iIndex][dmpInt], -1, 500.0);
			}

			iIndex++;
		}
		printf("[Map Icons] %i Dynamic Map Icons loaded.", iIndex);
		fclose(file);
	}
	return 1;
}*/

stock LoadPaintballArenas() {

	if(!fexist("arenas.cfg"))
		return 1;

	new
		szFileStr[1024],
		File: fHandle = fopen("arenas.cfg", io_read),
		iIndex;

	while(iIndex < MAX_ARENAS && fread(fHandle, szFileStr)) {
	    if(!sscanf(szFileStr, "p<|>s[64]iiffffffffffffffffffffffffffffffffffffffffffffffffff",
			PaintBallArena[iIndex][pbArenaName],
			PaintBallArena[iIndex][pbVirtual],
			PaintBallArena[iIndex][pbInterior],
			PaintBallArena[iIndex][pbDeathmatch1][0],
			PaintBallArena[iIndex][pbDeathmatch1][1],
			PaintBallArena[iIndex][pbDeathmatch1][2],
			PaintBallArena[iIndex][pbDeathmatch1][3],
			PaintBallArena[iIndex][pbDeathmatch2][0],
			PaintBallArena[iIndex][pbDeathmatch2][1],
			PaintBallArena[iIndex][pbDeathmatch2][2],
			PaintBallArena[iIndex][pbDeathmatch2][3],
			PaintBallArena[iIndex][pbDeathmatch3][0],
			PaintBallArena[iIndex][pbDeathmatch3][1],
			PaintBallArena[iIndex][pbDeathmatch3][2],
			PaintBallArena[iIndex][pbDeathmatch3][3],
			PaintBallArena[iIndex][pbDeathmatch4][0],
			PaintBallArena[iIndex][pbDeathmatch4][1],
			PaintBallArena[iIndex][pbDeathmatch4][2],
			PaintBallArena[iIndex][pbDeathmatch4][3],
			PaintBallArena[iIndex][pbTeamRed1][0],
			PaintBallArena[iIndex][pbTeamRed1][1],
			PaintBallArena[iIndex][pbTeamRed1][2],
			PaintBallArena[iIndex][pbTeamRed1][3],
			PaintBallArena[iIndex][pbTeamRed2][0],
			PaintBallArena[iIndex][pbTeamRed2][1],
			PaintBallArena[iIndex][pbTeamRed2][2],
			PaintBallArena[iIndex][pbTeamRed2][3],
			PaintBallArena[iIndex][pbTeamRed3][0],
			PaintBallArena[iIndex][pbTeamRed3][1],
			PaintBallArena[iIndex][pbTeamRed3][2],
			PaintBallArena[iIndex][pbTeamRed3][3],
			PaintBallArena[iIndex][pbTeamBlue1][0],
			PaintBallArena[iIndex][pbTeamBlue1][1],
			PaintBallArena[iIndex][pbTeamBlue1][2],
			PaintBallArena[iIndex][pbTeamBlue1][3],
			PaintBallArena[iIndex][pbTeamBlue2][0],
			PaintBallArena[iIndex][pbTeamBlue2][1],
			PaintBallArena[iIndex][pbTeamBlue2][2],
			PaintBallArena[iIndex][pbTeamBlue2][3],
			PaintBallArena[iIndex][pbTeamBlue3][0],
			PaintBallArena[iIndex][pbTeamBlue3][1],
			PaintBallArena[iIndex][pbTeamBlue3][2],
			PaintBallArena[iIndex][pbTeamBlue3][3],
			PaintBallArena[iIndex][pbFlagRedSpawn][0],
			PaintBallArena[iIndex][pbFlagRedSpawn][1],
			PaintBallArena[iIndex][pbFlagRedSpawn][2],
			PaintBallArena[iIndex][pbFlagBlueSpawn][0],
			PaintBallArena[iIndex][pbFlagBlueSpawn][1],
			PaintBallArena[iIndex][pbFlagBlueSpawn][2],
			PaintBallArena[iIndex][pbHillX],
			PaintBallArena[iIndex][pbHillY],
			PaintBallArena[iIndex][pbHillZ],
			PaintBallArena[iIndex][pbHillRadius]
		)) ++iIndex;
	}
	printf("[LoadPaintballArenas] %i paintball arenas loaded.", iIndex);
	return fclose(fHandle);
}

CreateGate(gateid) {
    switch(GateInfo[gateid][gRenderHQ]) {
		case 1: GateInfo[gateid][gGATE] = CreateDynamicObject(GateInfo[gateid][gModel], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt], -1, 100.0);
		case 2: GateInfo[gateid][gGATE] = CreateDynamicObject(GateInfo[gateid][gModel], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt], -1, 150.0);
		case 3: GateInfo[gateid][gGATE] = CreateDynamicObject(GateInfo[gateid][gModel], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt], -1, 200.0);
		default: GateInfo[gateid][gGATE] = CreateDynamicObject(GateInfo[gateid][gModel], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt], -1, 60.0);
	}
}

stock LoadEventPoints() {

	if(!fexist("eventpoints.cfg"))
		return 1;

	new
		szFileStr[256],
		File: fHandle = fopen("eventpoints.cfg", io_read),
		iIndex;

	while(iIndex < MAX_EVENTPOINTS && fread(fHandle, szFileStr)) {
		if(!sscanf(szFileStr, "p<|>fffiis[64]i",
			EventPoints[iIndex][epPosX],
			EventPoints[iIndex][epPosY],
			EventPoints[iIndex][epPosZ],
			EventPoints[iIndex][epVW],
			EventPoints[iIndex][epInt],
			EventPoints[iIndex][epPrize],
			EventPoints[iIndex][epFlagable]
		) && EventPoints[iIndex][epPosX] != 0.0) {
			EventPoints[iIndex][epObjectID] = CreatePickupEx(1274, 1, EventPoints[iIndex][epPosX], EventPoints[iIndex][epPosY], EventPoints[iIndex][epPosZ], EventPoints[iIndex][epVW]);
			format(szFileStr,sizeof(szFileStr),"Event Point (ID: %d)\nPrize: %s\nType /claimpoint to claim your prize!", iIndex, EventPoints[iIndex][epPrize]);
			EventPoints[iIndex][epText3dID] = CreateDynamic3DTextLabel(szFileStr, COLOR_YELLOW, EventPoints[iIndex][epPosX], EventPoints[iIndex][epPosY], EventPoints[iIndex][epPosZ]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EventPoints[iIndex][epVW], EventPoints[iIndex][epInt]);
			++iIndex;
		}
	}
	printf("[LoadEventPoints] %i event points loaded.", iIndex);
	return fclose(fHandle);
}

stock SaveDynamicMapIcon(mapiconid)
{
	new string[512];

	format(string, sizeof(string), "UPDATE `dmapicons` SET \
		`MarkerType`=%d, \
		`Color`=%d, \
		`VW`=%d, \
		`Int`=%d, \
		`PosX`=%f, \
		`PosY`=%f, \
		`PosZ`=%f WHERE `id`=%d",
		DMPInfo[mapiconid][dmpMarkerType],
		DMPInfo[mapiconid][dmpColor],
		DMPInfo[mapiconid][dmpVW],
		DMPInfo[mapiconid][dmpInt],
		DMPInfo[mapiconid][dmpPosX],
		DMPInfo[mapiconid][dmpPosY],
		DMPInfo[mapiconid][dmpPosZ],
		mapiconid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

stock SaveDynamicMapIcons()
{
	for(new i = 0; i < MAX_DMAPICONS; i++)
	{
		SaveDynamicMapIcon(i);
	}
	return 1;
}

/*stock SaveDynamicMapIcons() {

	new
		szFileStr[326],
		File: fHandle = fopen("dynamicmapicons.cfg", io_write);

	for(new iIndex; iIndex < MAX_DMAPICONS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%d|%f|%f|%f\r\n",
			DMPInfo[iIndex][dmpMarkerType],
			DMPInfo[iIndex][dmpColor],
			DMPInfo[iIndex][dmpVW],
			DMPInfo[iIndex][dmpInt],
			DMPInfo[iIndex][dmpPosX],
			DMPInfo[iIndex][dmpPosY],
			DMPInfo[iIndex][dmpPosZ]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}*/

stock RehashDynamicMapIcon(mapiconid)
{
	printf("[RehashDynamicMapIcon] Deleting MapIconID %d from server...", mapiconid);
	if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
	DMPInfo[mapiconid][dmpMarkerType] = 0;
	DMPInfo[mapiconid][dmpColor] = 0;
	DMPInfo[mapiconid][dmpVW] = 0;
	DMPInfo[mapiconid][dmpInt] = 0;
	DMPInfo[mapiconid][dmpPosX] = 0.0;
	DMPInfo[mapiconid][dmpPosY] = 0.0;
	DMPInfo[mapiconid][dmpPosZ] = 0.0;
	LoadDynamicMapIcon(mapiconid);
}

stock RehashDynamicMapIcons()
{
	printf("[RehashDynamicMapIcons] Deleting map icons from server...");
	for(new i = 0; i < MAX_DMAPICONS; i++)
	{
		if(IsValidDynamicMapIcon(DMPInfo[i][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[i][dmpMapIconID]);
		DMPInfo[i][dmpMarkerType] = 0;
		DMPInfo[i][dmpColor] = 0;
		DMPInfo[i][dmpVW] = 0;
		DMPInfo[i][dmpInt] = 0;
		DMPInfo[i][dmpPosX] = 0.0;
		DMPInfo[i][dmpPosY] = 0.0;
		DMPInfo[i][dmpPosZ] = 0.0;
	}
	LoadDynamicMapIcons();
}

stock LoadDynamicMapIcon(mapiconid)
{
	new string[128];
	printf("[LoadDynamicMapIcon] Loading MapIconID %d's data from database...", mapiconid);
	format(string, sizeof(string), "SELECT * FROM `dmapicons` WHERE `id`=%d", mapiconid);
	mysql_function_query(MainPipeline, string, true, "OnLoadDynamicMapIcon", "i", mapiconid);
}

forward OnLoadDynamicMapIcon(index);
public OnLoadDynamicMapIcon(index)
{
	new string[256];
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
 	for(new field;field<fields;field++)
	{
  		cache_get_row(index, field, string, MainPipeline);
		switch(field)
		{
			case 0: DMPInfo[index][dmpSQLId] = strval(string);
			case 1: DMPInfo[index][dmpMarkerType] = strval(string);
			case 2: DMPInfo[index][dmpColor] = strval(string);
			case 3: DMPInfo[index][dmpVW] = strval(string);
			case 4: DMPInfo[index][dmpInt] = strval(string);
			case 5: DMPInfo[index][dmpPosX] = floatstr(string);
			case 6: DMPInfo[index][dmpPosY] = floatstr(string);
			case 7: DMPInfo[index][dmpPosZ] = floatstr(string);
		}
	}
  	if(DMPInfo[index][dmpMarkerType] != 0) DMPInfo[index][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[index][dmpPosX], DMPInfo[index][dmpPosY], DMPInfo[index][dmpPosZ], DMPInfo[index][dmpMarkerType], DMPInfo[index][dmpColor], DMPInfo[index][dmpVW], DMPInfo[index][dmpInt], -1, 500.0);
  	return 1;
}

stock LoadDynamicMapIcons()
{
	printf("[LoadDynamicMapIcons] Loading data from database...");
	mysql_function_query(MainPipeline, "SELECT * FROM `dmapicons`", true, "OnLoadDynamicMapIcons", "");
}

forward OnLoadDynamicMapIcons();
public OnLoadDynamicMapIcons()
{
	new string[256], iIndex = 0;
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	while(iIndex<rows)
	{
		for(new field;field<fields;field++)
		{
		    cache_get_row(iIndex, field, string, MainPipeline);
			switch(field)
			{
				case 0: DMPInfo[iIndex][dmpSQLId] = strval(string);
				case 1: DMPInfo[iIndex][dmpMarkerType] = strval(string);
				case 2: DMPInfo[iIndex][dmpColor] = strval(string);
				case 3: DMPInfo[iIndex][dmpVW] = strval(string);
				case 4: DMPInfo[iIndex][dmpInt] = strval(string);
				case 5: DMPInfo[iIndex][dmpPosX] = floatstr(string);
				case 6: DMPInfo[iIndex][dmpPosY] = floatstr(string);
				case 7: DMPInfo[iIndex][dmpPosZ] = floatstr(string);
			}
		}
        if(DMPInfo[iIndex][dmpMarkerType] != 0) DMPInfo[iIndex][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[iIndex][dmpPosX], DMPInfo[iIndex][dmpPosY], DMPInfo[iIndex][dmpPosZ], DMPInfo[iIndex][dmpMarkerType], DMPInfo[iIndex][dmpColor], DMPInfo[iIndex][dmpVW], DMPInfo[iIndex][dmpInt], -1, 500.0);
		iIndex++;
	}
	if(iIndex > 0) printf("[LoadDynamicMapIcons] %d map icons rehashed/loaded.", iIndex);
	else printf("[LoadDynamicMapIcons] Failed to load any map icons.");
	return 1;
}
/*
stock CreateDynamicDoor(doorid)
{
	new string[128];
	format(string, sizeof(string), "%s\nID: %d",DDoorsInfo[doorid][ddDescription],doorid);

	switch(DDoorsInfo[doorid][ddColor])
	{
	    case -1:{  Disable 3d Textdraw  }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	}

	switch(DDoorsInfo[doorid][ddPickupModel])
	{
	    case -1: {  Disable Pickup  }
		case 1:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 2:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 26:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19132, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 27:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19130, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 28:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19131, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 29:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19133, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 30:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(18872, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
	    default:
	    {
			DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
	    }
	}
}

stock SaveDynamicDoor(doorid)
{
	new string[1024];
	format(string, sizeof(string), "UPDATE `ddoors` SET \
		`Description`='%s', \
		`CustomInterior`=%d, \
		`ExteriorVW`=%d, \
		`ExteriorInt`=%d, \
		`InteriorVW`=%d, \
		`InteriorInt`=%d, \
		`ExteriorX`=%f, \
		`ExteriorY`=%f, \
		`ExteriorZ`=%f, \
		`ExteriorA`=%f, \
		`InteriorX`=%f, \
		`InteriorY`=%f, \
		`InteriorZ`=%f, \
		`InteriorA`=%f,",
		g_mysql_ReturnEscaped(DDoorsInfo[doorid][ddDescription], MainPipeline),
		DDoorsInfo[doorid][ddCustomInterior],
		DDoorsInfo[doorid][ddExteriorVW],
		DDoorsInfo[doorid][ddExteriorInt],
		DDoorsInfo[doorid][ddInteriorVW],
		DDoorsInfo[doorid][ddInteriorInt],
		DDoorsInfo[doorid][ddExteriorX],
		DDoorsInfo[doorid][ddExteriorY],
		DDoorsInfo[doorid][ddExteriorZ],
		DDoorsInfo[doorid][ddExteriorA],
		DDoorsInfo[doorid][ddInteriorX],
		DDoorsInfo[doorid][ddInteriorY],
		DDoorsInfo[doorid][ddInteriorZ],
		DDoorsInfo[doorid][ddInteriorA]
	);

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

	format(string, sizeof(string), "%s \
		`CustomExterior`=%d, \
		`VIP`=%d, \
		`Family`=%d, \
		`Faction`=%d, \
		`Admin`=%d, \
		`Wanted`=%d, \
		`VehicleAble`=%d, \
		`Color`=%d, \
		`PickupModel`=%d, \
		`Pass`='%s', \
		`Locked`=%d WHERE `id`=%d",
		string,
		DDoorsInfo[doorid][ddCustomExterior],
		DDoorsInfo[doorid][ddVIP],
		DDoorsInfo[doorid][ddFamily],
		DDoorsInfo[doorid][ddFaction],
		DDoorsInfo[doorid][ddAdmin],
		DDoorsInfo[doorid][ddWanted],
		DDoorsInfo[doorid][ddVehicleAble],
		DDoorsInfo[doorid][ddColor],
		DDoorsInfo[doorid][ddPickupModel],
		g_mysql_ReturnEscaped(DDoorsInfo[doorid][dPass], MainPipeline),
		DDoorsInfo[doorid][dLocked],
		doorid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	//mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD);
}*/

/*stock SaveDynamicDoors()
{
	for(new i = 0; i < MAX_DDOORS; i++)
	{
		SaveDynamicDoor(i);
	}
	return 1;
}*/
/*
stock SaveDynamicDoors() {

	new
		szFileStr[512],
		File: fHandle = fopen("dynamicdoors.cfg", io_write);

	for(new iIndex; iIndex < MAX_DDOORS; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%s|%d|%d|%d|%d|%d|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%s|%d\r\n",
			DDoorsInfo[iIndex][ddDescription],
			DDoorsInfo[iIndex][ddCustomInterior],
			DDoorsInfo[iIndex][ddExteriorVW],
			DDoorsInfo[iIndex][ddExteriorInt],
			DDoorsInfo[iIndex][ddInteriorVW],
			DDoorsInfo[iIndex][ddInteriorInt],
			DDoorsInfo[iIndex][ddExteriorX],
			DDoorsInfo[iIndex][ddExteriorY],
			DDoorsInfo[iIndex][ddExteriorZ],
			DDoorsInfo[iIndex][ddExteriorA],
			DDoorsInfo[iIndex][ddInteriorX],
			DDoorsInfo[iIndex][ddInteriorY],
			DDoorsInfo[iIndex][ddInteriorZ],
			DDoorsInfo[iIndex][ddInteriorA],
			DDoorsInfo[iIndex][ddCustomExterior],
			DDoorsInfo[iIndex][ddVIP],
	  		DDoorsInfo[iIndex][ddFamily],
	  		DDoorsInfo[iIndex][ddFaction],
	  		DDoorsInfo[iIndex][ddAdmin],
	  		DDoorsInfo[iIndex][ddWanted],
	  		DDoorsInfo[iIndex][ddVehicleAble],
	  		DDoorsInfo[iIndex][ddColor],
	  		DDoorsInfo[iIndex][ddPickupModel],
	  		DDoorsInfo[iIndex][dPass],
	  		DDoorsInfo[iIndex][dLocked]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}

stock RehashDynamicDoor(doorid)
{
	printf("[RehashDynamicDoor] Deleting DDoorID %d from server...", doorid);
	DestroyPickupEx(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	DDoorsInfo[doorid][ddSQLId] = -1;
	DDoorsInfo[doorid][ddCustomInterior] = 0;
	DDoorsInfo[doorid][ddExteriorVW] = 0;
	DDoorsInfo[doorid][ddExteriorInt] = 0;
	DDoorsInfo[doorid][ddInteriorVW] = 0;
	DDoorsInfo[doorid][ddInteriorInt] = 0;
	DDoorsInfo[doorid][ddExteriorX] = 0.0;
	DDoorsInfo[doorid][ddExteriorY] = 0.0;
	DDoorsInfo[doorid][ddExteriorZ] = 0.0;
	DDoorsInfo[doorid][ddExteriorA] = 0.0;
	DDoorsInfo[doorid][ddInteriorX] = 0.0;
	DDoorsInfo[doorid][ddInteriorY] = 0.0;
	DDoorsInfo[doorid][ddInteriorZ] = 0.0;
	DDoorsInfo[doorid][ddInteriorA] = 0.0;
	DDoorsInfo[doorid][ddCustomExterior] = 0;
	DDoorsInfo[doorid][ddVIP] = 0;
	DDoorsInfo[doorid][ddFamily] = 0;
	DDoorsInfo[doorid][ddFaction] = 0;
	DDoorsInfo[doorid][ddAdmin] = 0;
	DDoorsInfo[doorid][ddWanted] = 0;
	DDoorsInfo[doorid][ddVehicleAble] = 0;
	DDoorsInfo[doorid][ddColor] = 0;
	DDoorsInfo[doorid][ddPickupModel] = 0;
	DDoorsInfo[doorid][dLocked] = 0;
	LoadDynamicDoor(doorid);
}

stock RehashDynamicDoors()
{
	printf("[RehashDynamicDoors] Deleting dynamic doors from server...");
	for(new i = 0; i < MAX_DDOORS; i++)
	{
		DestroyPickupEx(DDoorsInfo[i][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[i][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[i][ddTextID]);
		DDoorsInfo[i][ddSQLId] = -1;
		DDoorsInfo[i][ddCustomInterior] = 0;
		DDoorsInfo[i][ddExteriorVW] = 0;
		DDoorsInfo[i][ddExteriorInt] = 0;
		DDoorsInfo[i][ddInteriorVW] = 0;
		DDoorsInfo[i][ddInteriorInt] = 0;
		DDoorsInfo[i][ddExteriorX] = 0.0;
		DDoorsInfo[i][ddExteriorY] = 0.0;
		DDoorsInfo[i][ddExteriorZ] = 0.0;
		DDoorsInfo[i][ddExteriorA] = 0.0;
		DDoorsInfo[i][ddInteriorX] = 0.0;
		DDoorsInfo[i][ddInteriorY] = 0.0;
		DDoorsInfo[i][ddInteriorZ] = 0.0;
		DDoorsInfo[i][ddInteriorA] = 0.0;
		DDoorsInfo[i][ddCustomExterior] = 0;
		DDoorsInfo[i][ddVIP] = 0;
		DDoorsInfo[i][ddFamily] = 0;
		DDoorsInfo[i][ddFaction] = 0;
		DDoorsInfo[i][ddAdmin] = 0;
		DDoorsInfo[i][ddWanted] = 0;
		DDoorsInfo[i][ddVehicleAble] = 0;
		DDoorsInfo[i][ddColor] = 0;
		DDoorsInfo[i][ddPickupModel] = 0;
		DDoorsInfo[i][dLocked] = 0;
	}
	LoadDynamicDoors();
}

stock LoadDynamicDoor(doorid)
{
	new string[128];
	printf("[LoadDynamicDoor] Loading DDoorID %d's data from database...", doorid);
	format(string, sizeof(string), "SELECT * FROM `ddoors` WHERE `id`=%d", doorid+1); // Array starts at zero, MySQL starts at 1.
	mysql_function_query(MainPipeline, string, true, "OnLoadDynamicDoor", "i", doorid);
}

forward OnLoadDynamicDoor(index);
public OnLoadDynamicDoor(index)
{
	new string[512];
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	for(new field;field<fields;field++)
	{
		cache_get_row(index, field, string, MainPipeline);
		switch(field)
		{
			case 0: DDoorsInfo[index][ddSQLId] = strval(string);
			case 1: format(DDoorsInfo[index][ddDescription], 128, "%s", string);
			case 2: DDoorsInfo[index][ddCustomInterior] = strval(string);
			case 3: DDoorsInfo[index][ddExteriorVW] = strval(string);
			case 4: DDoorsInfo[index][ddExteriorInt] = strval(string);
			case 5: DDoorsInfo[index][ddInteriorVW] = strval(string);
			case 6: DDoorsInfo[index][ddInteriorInt] = strval(string);
			case 7: DDoorsInfo[index][ddExteriorX] = floatstr(string);
			case 8: DDoorsInfo[index][ddExteriorY] = floatstr(string);
			case 9: DDoorsInfo[index][ddExteriorZ] = floatstr(string);
			case 10: DDoorsInfo[index][ddExteriorA] = floatstr(string);
			case 11: DDoorsInfo[index][ddInteriorX] = floatstr(string);
			case 12: DDoorsInfo[index][ddInteriorY] = floatstr(string);
			case 13: DDoorsInfo[index][ddInteriorZ] = floatstr(string);
			case 14: DDoorsInfo[index][ddInteriorA] = floatstr(string);
			case 15: DDoorsInfo[index][ddCustomExterior] = strval(string);
			case 16: DDoorsInfo[index][ddVIP] = strval(string);
			case 17: DDoorsInfo[index][ddFamily] = strval(string);
			case 18: DDoorsInfo[index][ddFaction] = strval(string);
			case 19: DDoorsInfo[index][ddAdmin] = strval(string);
			case 20: DDoorsInfo[index][ddWanted] = strval(string);
			case 21: DDoorsInfo[index][ddVehicleAble] = strval(string);
			case 22: DDoorsInfo[index][ddColor] = strval(string);
			case 23: DDoorsInfo[index][ddPickupModel] = strval(string);
			case 24: format(DDoorsInfo[index][dPass], 24, "%s", string);
			case 25: DDoorsInfo[index][dLocked] = strval(string);
		}
	}
	if(!isnull(DDoorsInfo[index][ddDescription])) CreateDynamicDoor(index);
	return 1;
}*/

/*stock LoadDynamicDoors()
{
	printf("[LoadDynamicDoors] Loading data from database...");
	mysql_function_query(MainPipeline, "SELECT * FROM `ddoors`", true, "OnLoadDynamicDoors", "");
}*/

/*forward OnLoadDynamicDoors();
public OnLoadDynamicDoors()
{
	new string[512], iIndex = 0;
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	while(iIndex<rows)
	{
		for(new field;field<fields;field++)
		{
		    cache_get_row(iIndex, field, string, MainPipeline);
	   		switch(field)
			{
				case 0: DDoorsInfo[iIndex][ddSQLId] = strval(string);
				case 1: format(DDoorsInfo[iIndex][ddDescription], 128, "%s", string);
				case 2: DDoorsInfo[iIndex][ddCustomInterior] = strval(string);
				case 3: DDoorsInfo[iIndex][ddExteriorVW] = strval(string);
				case 4: DDoorsInfo[iIndex][ddExteriorInt] = strval(string);
				case 5: DDoorsInfo[iIndex][ddInteriorVW] = strval(string);
				case 6: DDoorsInfo[iIndex][ddInteriorInt] = strval(string);
				case 7: DDoorsInfo[iIndex][ddExteriorX] = floatstr(string);
				case 8: DDoorsInfo[iIndex][ddExteriorY] = floatstr(string);
				case 9: DDoorsInfo[iIndex][ddExteriorZ] = floatstr(string);
				case 10: DDoorsInfo[iIndex][ddExteriorA] = floatstr(string);
				case 11: DDoorsInfo[iIndex][ddInteriorX] = floatstr(string);
				case 12: DDoorsInfo[iIndex][ddInteriorY] = floatstr(string);
				case 13: DDoorsInfo[iIndex][ddInteriorZ] = floatstr(string);
				case 14: DDoorsInfo[iIndex][ddInteriorA] = floatstr(string);
				case 15: DDoorsInfo[iIndex][ddCustomExterior] = strval(string);
				case 16: DDoorsInfo[iIndex][ddVIP] = strval(string);
				case 17: DDoorsInfo[iIndex][ddFamily] = strval(string);
				case 18: DDoorsInfo[iIndex][ddFaction] = strval(string);
				case 19: DDoorsInfo[iIndex][ddAdmin] = strval(string);
				case 20: DDoorsInfo[iIndex][ddWanted] = strval(string);
				case 21: DDoorsInfo[iIndex][ddVehicleAble] = strval(string);
				case 22: DDoorsInfo[iIndex][ddColor] = strval(string);
				case 23: DDoorsInfo[iIndex][ddPickupModel] = strval(string);
				case 24: format(DDoorsInfo[iIndex][dPass], 24, "%s", string);
				case 25: DDoorsInfo[iIndex][dLocked] = strval(string);
			}
		}
		if(!isnull(DDoorsInfo[iIndex][ddDescription])) CreateDynamicDoor(iIndex);
		iIndex++;
	}
	if(iIndex > 0) printf("[LoadDynamicDoors] %d doors rehashed/loaded.", iIndex);
	else printf("[LoadDynamicDoors] Failed to load any doors.");
	return 1;
}*/

stock CreateDynamicDoor(doorid)
{
	new string[128];
	format(string, sizeof(string), "%s\nID: %d",DDoorsInfo[doorid][ddDescription],doorid);

	switch(DDoorsInfo[doorid][ddColor])
	{
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 2:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 3:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 4:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 5:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 6:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 7:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 8:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 9:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 10:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 11:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	    case 12:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
		default:{DDoorsInfo[doorid][ddTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]+1,10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], -1);}
	}

	switch(DDoorsInfo[doorid][ddPickupModel])
	{
	    case -1: { /* Disable Pickup */ }
		case 1:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1210, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 2:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1212, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 3:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1239, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 4:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1240, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 5:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1241, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 6:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1242, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 7:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1247, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 8:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1248, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 9:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1252, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 10:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1253, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 11:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1254, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 12:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1313, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 13:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1272, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 14:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1273, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 15:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1274, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 16:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1275, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 17:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1276, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 18:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1277, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 19:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1279, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 20:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1314, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 21:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1316, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 22:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1317, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 23:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1559, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 24:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1582, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 25:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(2894, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 26:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19132, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 27:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19130, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 28:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19131, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 29:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(19133, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
		case 30:{DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(18872, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);}
	    default:
	    {
			DDoorsInfo[doorid][ddPickupID] = CreatePickupEx(1318, 23, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddExteriorVW]);
	    }
	}
}

stock SaveDynamicDoor(doorid)
{
	new string[1024];
	format(string, sizeof(string), "UPDATE `ddoors` SET \
		`Description`='%s', \
		`CustomInterior`=%d, \
		`ExteriorVW`=%d, \
		`ExteriorInt`=%d, \
		`InteriorVW`=%d, \
		`InteriorInt`=%d, \
		`ExteriorX`=%f, \
		`ExteriorY`=%f, \
		`ExteriorZ`=%f, \
		`ExteriorA`=%f, \
		`InteriorX`=%f, \
		`InteriorY`=%f, \
		`InteriorZ`=%f, \
		`InteriorA`=%f,",
		g_mysql_ReturnEscaped(DDoorsInfo[doorid][ddDescription], MainPipeline),
		DDoorsInfo[doorid][ddCustomInterior],
		DDoorsInfo[doorid][ddExteriorVW],
		DDoorsInfo[doorid][ddExteriorInt],
		DDoorsInfo[doorid][ddInteriorVW],
		DDoorsInfo[doorid][ddInteriorInt],
		DDoorsInfo[doorid][ddExteriorX],
		DDoorsInfo[doorid][ddExteriorY],
		DDoorsInfo[doorid][ddExteriorZ],
		DDoorsInfo[doorid][ddExteriorA],
		DDoorsInfo[doorid][ddInteriorX],
		DDoorsInfo[doorid][ddInteriorY],
		DDoorsInfo[doorid][ddInteriorZ],
		DDoorsInfo[doorid][ddInteriorA]
	);

	format(string, sizeof(string), "%s \
		`CustomExterior`=%d, \
		`VIP`=%d, \
		`Family`=%d, \
		`Faction`=%d, \
		`Admin`=%d, \
		`Wanted`=%d, \
		`VehicleAble`=%d, \
		`Color`=%d, \
		`PickupModel`=%d, \
		`Pass`='%s', \
		`Locked`=%d WHERE `id`=%d",
		string,
		DDoorsInfo[doorid][ddCustomExterior],
		DDoorsInfo[doorid][ddVIP],
		DDoorsInfo[doorid][ddFamily],
		DDoorsInfo[doorid][ddFaction],
		DDoorsInfo[doorid][ddAdmin],
		DDoorsInfo[doorid][ddWanted],
		DDoorsInfo[doorid][ddVehicleAble],
		DDoorsInfo[doorid][ddColor],
		DDoorsInfo[doorid][ddPickupModel],
		g_mysql_ReturnEscaped(DDoorsInfo[doorid][dPass], MainPipeline),
		DDoorsInfo[doorid][dLocked],
		doorid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

stock SaveDynamicDoors()
{
	for(new i = 0; i < MAX_DDOORS; i++)
	{
		SaveDynamicDoor(i);
	}
	return 1;
}

stock RehashDynamicDoor(doorid)
{
	printf("[RehashDynamicDoor] Deleting DDoorID %d from server...", doorid);
	DestroyPickupEx(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	DDoorsInfo[doorid][ddSQLId] = -1;
	DDoorsInfo[doorid][ddCustomInterior] = 0;
	DDoorsInfo[doorid][ddExteriorVW] = 0;
	DDoorsInfo[doorid][ddExteriorInt] = 0;
	DDoorsInfo[doorid][ddInteriorVW] = 0;
	DDoorsInfo[doorid][ddInteriorInt] = 0;
	DDoorsInfo[doorid][ddExteriorX] = 0.0;
	DDoorsInfo[doorid][ddExteriorY] = 0.0;
	DDoorsInfo[doorid][ddExteriorZ] = 0.0;
	DDoorsInfo[doorid][ddExteriorA] = 0.0;
	DDoorsInfo[doorid][ddInteriorX] = 0.0;
	DDoorsInfo[doorid][ddInteriorY] = 0.0;
	DDoorsInfo[doorid][ddInteriorZ] = 0.0;
	DDoorsInfo[doorid][ddInteriorA] = 0.0;
	DDoorsInfo[doorid][ddCustomExterior] = 0;
	DDoorsInfo[doorid][ddVIP] = 0;
	DDoorsInfo[doorid][ddFamily] = 0;
	DDoorsInfo[doorid][ddFaction] = 0;
	DDoorsInfo[doorid][ddAdmin] = 0;
	DDoorsInfo[doorid][ddWanted] = 0;
	DDoorsInfo[doorid][ddVehicleAble] = 0;
	DDoorsInfo[doorid][ddColor] = 0;
	DDoorsInfo[doorid][ddPickupModel] = 0;
	DDoorsInfo[doorid][dLocked] = 0;
	LoadDynamicDoor(doorid);
}

stock RehashDynamicDoors()
{
	printf("[RehashDynamicDoors] Deleting dynamic doors from server...");
	for(new i = 0; i < MAX_DDOORS; i++)
	{
		DestroyPickupEx(DDoorsInfo[i][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[i][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[i][ddTextID]);
		DDoorsInfo[i][ddSQLId] = -1;
		DDoorsInfo[i][ddCustomInterior] = 0;
		DDoorsInfo[i][ddExteriorVW] = 0;
		DDoorsInfo[i][ddExteriorInt] = 0;
		DDoorsInfo[i][ddInteriorVW] = 0;
		DDoorsInfo[i][ddInteriorInt] = 0;
		DDoorsInfo[i][ddExteriorX] = 0.0;
		DDoorsInfo[i][ddExteriorY] = 0.0;
		DDoorsInfo[i][ddExteriorZ] = 0.0;
		DDoorsInfo[i][ddExteriorA] = 0.0;
		DDoorsInfo[i][ddInteriorX] = 0.0;
		DDoorsInfo[i][ddInteriorY] = 0.0;
		DDoorsInfo[i][ddInteriorZ] = 0.0;
		DDoorsInfo[i][ddInteriorA] = 0.0;
		DDoorsInfo[i][ddCustomExterior] = 0;
		DDoorsInfo[i][ddVIP] = 0;
		DDoorsInfo[i][ddFamily] = 0;
		DDoorsInfo[i][ddFaction] = 0;
		DDoorsInfo[i][ddAdmin] = 0;
		DDoorsInfo[i][ddWanted] = 0;
		DDoorsInfo[i][ddVehicleAble] = 0;
		DDoorsInfo[i][ddColor] = 0;
		DDoorsInfo[i][ddPickupModel] = 0;
		DDoorsInfo[i][dLocked] = 0;
	}
	LoadDynamicDoors();
}

stock LoadDynamicDoor(doorid)
{
	new string[128];
	printf("[LoadDynamicDoor] Loading DDoorID %d's data from database...", doorid);
	format(string, sizeof(string), "SELECT * FROM `ddoors` WHERE `id`=%d", doorid+1); // Array starts at zero, MySQL starts at 1.
	mysql_function_query(MainPipeline, string, true, "OnLoadDynamicDoor", "i", doorid);
}

forward OnLoadDynamicDoor(index);
public OnLoadDynamicDoor(index)
{
	new string[512];
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	for(new field;field<fields;field++)
	{
		cache_get_row(index, field, string, MainPipeline);
		switch(field)
		{
			case 0: DDoorsInfo[index][ddSQLId] = strval(string);
			case 1: format(DDoorsInfo[index][ddDescription], 128, "%s", string);
			case 2: DDoorsInfo[index][ddCustomInterior] = strval(string);
			case 3: DDoorsInfo[index][ddExteriorVW] = strval(string);
			case 4: DDoorsInfo[index][ddExteriorInt] = strval(string);
			case 5: DDoorsInfo[index][ddInteriorVW] = strval(string);
			case 6: DDoorsInfo[index][ddInteriorInt] = strval(string);
			case 7: DDoorsInfo[index][ddExteriorX] = floatstr(string);
			case 8: DDoorsInfo[index][ddExteriorY] = floatstr(string);
			case 9: DDoorsInfo[index][ddExteriorZ] = floatstr(string);
			case 10: DDoorsInfo[index][ddExteriorA] = floatstr(string);
			case 11: DDoorsInfo[index][ddInteriorX] = floatstr(string);
			case 12: DDoorsInfo[index][ddInteriorY] = floatstr(string);
			case 13: DDoorsInfo[index][ddInteriorZ] = floatstr(string);
			case 14: DDoorsInfo[index][ddInteriorA] = floatstr(string);
			case 15: DDoorsInfo[index][ddCustomExterior] = strval(string);
			case 16: DDoorsInfo[index][ddVIP] = strval(string);
			case 17: DDoorsInfo[index][ddFamily] = strval(string);
			case 18: DDoorsInfo[index][ddFaction] = strval(string);
			case 19: DDoorsInfo[index][ddAdmin] = strval(string);
			case 20: DDoorsInfo[index][ddWanted] = strval(string);
			case 21: DDoorsInfo[index][ddVehicleAble] = strval(string);
			case 22: DDoorsInfo[index][ddColor] = strval(string);
			case 23: DDoorsInfo[index][ddPickupModel] = strval(string);
			case 24: format(DDoorsInfo[index][dPass], 24, "%s", string);
			case 25: DDoorsInfo[index][dLocked] = strval(string);
		}
	}
	if(!isnull(DDoorsInfo[index][ddDescription])) CreateDynamicDoor(index);
	return 1;
}

stock LoadDynamicDoors()
{
	printf("[LoadDynamicDoors] Loading data from database...");
	mysql_function_query(MainPipeline, "SELECT * FROM `ddoors`", true, "OnLoadDynamicDoors", "");
}

forward OnLoadDynamicDoors();
public OnLoadDynamicDoors()
{
	new string[512], iIndex = 0;
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	while(iIndex<rows)
	{
		for(new field;field<fields;field++)
		{
		    cache_get_row(iIndex, field, string, MainPipeline);
	   		switch(field)
			{
				case 0: DDoorsInfo[iIndex][ddSQLId] = strval(string);
				case 1: format(DDoorsInfo[iIndex][ddDescription], 128, "%s", string);
				case 2: DDoorsInfo[iIndex][ddCustomInterior] = strval(string);
				case 3: DDoorsInfo[iIndex][ddExteriorVW] = strval(string);
				case 4: DDoorsInfo[iIndex][ddExteriorInt] = strval(string);
				case 5: DDoorsInfo[iIndex][ddInteriorVW] = strval(string);
				case 6: DDoorsInfo[iIndex][ddInteriorInt] = strval(string);
				case 7: DDoorsInfo[iIndex][ddExteriorX] = floatstr(string);
				case 8: DDoorsInfo[iIndex][ddExteriorY] = floatstr(string);
				case 9: DDoorsInfo[iIndex][ddExteriorZ] = floatstr(string);
				case 10: DDoorsInfo[iIndex][ddExteriorA] = floatstr(string);
				case 11: DDoorsInfo[iIndex][ddInteriorX] = floatstr(string);
				case 12: DDoorsInfo[iIndex][ddInteriorY] = floatstr(string);
				case 13: DDoorsInfo[iIndex][ddInteriorZ] = floatstr(string);
				case 14: DDoorsInfo[iIndex][ddInteriorA] = floatstr(string);
				case 15: DDoorsInfo[iIndex][ddCustomExterior] = strval(string);
				case 16: DDoorsInfo[iIndex][ddVIP] = strval(string);
				case 17: DDoorsInfo[iIndex][ddFamily] = strval(string);
				case 18: DDoorsInfo[iIndex][ddFaction] = strval(string);
				case 19: DDoorsInfo[iIndex][ddAdmin] = strval(string);
				case 20: DDoorsInfo[iIndex][ddWanted] = strval(string);
				case 21: DDoorsInfo[iIndex][ddVehicleAble] = strval(string);
				case 22: DDoorsInfo[iIndex][ddColor] = strval(string);
				case 23: DDoorsInfo[iIndex][ddPickupModel] = strval(string);
				case 24: format(DDoorsInfo[iIndex][dPass], 24, "%s", string);
				case 25: DDoorsInfo[iIndex][dLocked] = strval(string);
			}
		}
		if(!isnull(DDoorsInfo[iIndex][ddDescription])) CreateDynamicDoor(iIndex);
		iIndex++;
	}
	if(iIndex > 0) printf("[LoadDynamicDoors] %d doors rehashed/loaded.", iIndex);
	else printf("[LoadDynamicDoors] Failed to load any doors.");
	return 1;
}

// Text Lables

stock SaveDynamicText(textid)
{
	new string[1024];
	format(string, sizeof(string), "UPDATE `dtexts` SET \
		`Description`='%s', \
		`ExteriorVW`=%d, \
		`ExteriorInt`=%d, \
		`ExteriorX`=%f, \
		`ExteriorY`=%f, \
		`ExteriorZ`=%f, \
		`Color`=%d,",
		g_mysql_ReturnEscaped(DTextInfo[textid][dtDescription], MainPipeline),
		DTextInfo[textid][dtExteriorVW],
		DTextInfo[textid][dtExteriorInt],
		DTextInfo[textid][dtExteriorX],
		DTextInfo[textid][dtExteriorY],
		DTextInfo[textid][dtExteriorZ],
		DTextInfo[textid][dtColor]
	);

	format(string, sizeof(string), "%s \
		`Model`=%d WHERE `id`=%d",
		string,
		DTextInfo[textid][dtModel],
		textid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

stock SaveDynamicTexts()
{
	for(new i = 0; i < MAX_TEXT; i++)
	{
		SaveDynamicText(i);
	}
	return 1;
}

stock CreateDynamicText(textid)
{
	new string[128];
	format(string, sizeof(string), "%s\nLable ID: %d",DTextInfo[textid][dtDescription],textid);

	switch(DTextInfo[textid][dtColor])
	{
	    case -1:{ /* Disable 3d Textdraw */ }
	    case 1:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWWHITE, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 2:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPINK, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 3:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWRED, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 4:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBROWN, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 5:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGRAY, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 6:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWOLIVE, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 7:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWPURPLE, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 8:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWORANGE, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 9:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWAZURE, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 10:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWGREEN, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 11:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLUE, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	    case 12:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_TWBLACK, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
		default:{DTextInfo[textid][dtTextID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]+1,15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, DTextInfo[textid][dtExteriorVW], DTextInfo[textid][dtExteriorInt], -1);}
	}

	switch(DTextInfo[textid][dtModel])
	{
	    case -1: { /* Disable Pickup */ }
	    default:
	    {
			DTextInfo[textid][dtPickupID] = CreatePickupEx(1239, 23, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ], DTextInfo[textid][dtExteriorVW]);
	    }
	}
}

stock RehashTextLabel(textid)
{
	printf("[RehashDynamicText] Deleting TextID %d from server...", textid);
	DestroyPickupEx(DTextInfo[textid][dtPickupID]);
	if(IsValidDynamic3DTextLabel(DTextInfo[textid][dtTextID])) DestroyDynamic3DTextLabel(DTextInfo[textid][dtTextID]);
	DTextInfo[textid][dtSQLId] = -1;
	DTextInfo[textid][dtExteriorVW] = 0;
	DTextInfo[textid][dtExteriorInt] = 0;
	DTextInfo[textid][dtExteriorX] = 0.0;
	DTextInfo[textid][dtExteriorY] = 0.0;
	DTextInfo[textid][dtExteriorZ] = 0.0;
	DTextInfo[textid][dtColor] = 0;
	DTextInfo[textid][dtModel] = 0;
	LoadDynamicDoor(textid);
}

stock RehashDynamicText()
{
	printf("[RehashDynamicTexts] Deleting dynamic texts from server...");
	for(new i = 0; i < MAX_TEXT; i++)
	{
		DestroyPickupEx(DTextInfo[i][dtPickupID]);
		if(IsValidDynamic3DTextLabel(DTextInfo[i][dtTextID])) DestroyDynamic3DTextLabel(DTextInfo[i][dtTextID]);
		DTextInfo[i][dtSQLId] = -1;
		DTextInfo[i][dtExteriorVW] = 0;
		DTextInfo[i][dtExteriorInt] = 0;
		DTextInfo[i][dtExteriorX] = 0.0;
		DTextInfo[i][dtExteriorY] = 0.0;
		DTextInfo[i][dtExteriorZ] = 0.0;
		DTextInfo[i][dtColor] = 0;
		DTextInfo[i][dtModel] = 0;
	}
	LoadDynamicTexts();
}

stock LoadDynamicText(textid)
{
	new string[128];
	printf("[LoadDynamicText] Loading TextID %d's data from database...", textid);
	format(string, sizeof(string), "SELECT * FROM `dtexts` WHERE `id`=%d", textid+1); // Array starts at zero, MySQL starts at 1.
	mysql_function_query(MainPipeline, string, true, "OnLoadDynamicText", "i", textid);
}

forward OnLoadDynamicText(index);
public OnLoadDynamicText(index)
{
	new string[512];
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	for(new field;field<fields;field++)
	{
		cache_get_row(index, field, string, MainPipeline);
		switch(field)
		{
			case 0: DTextInfo[index][dtSQLId] = strval(string);
			case 1: format(DTextInfo[index][dtDescription], 128, "%s", string);
			case 2: DTextInfo[index][dtExteriorVW] = strval(string);
			case 3: DTextInfo[index][dtExteriorInt] = strval(string);
			case 4: DTextInfo[index][dtExteriorX] = floatstr(string);
			case 5: DTextInfo[index][dtExteriorY] = floatstr(string);
			case 6: DTextInfo[index][dtExteriorZ] = floatstr(string);
			case 7: DTextInfo[index][dtColor] = strval(string);
			case 8: DTextInfo[index][dtModel] = strval(string);
		}
	}
	if(!isnull(DTextInfo[index][dtDescription])) CreateDynamicText(index);
	return 1;
}

stock LoadDynamicTexts()
{
	printf("[LoadDynamicTexts] Loading data from database...");
	mysql_function_query(MainPipeline, "SELECT * FROM `dtexts`", true, "OnLoadDynamicTexts", "");
}

forward OnLoadDynamicTexts();
public OnLoadDynamicTexts()
{
	new string[512], iIndex = 0;
    new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	while(iIndex<rows)
	{
		for(new field;field<fields;field++)
		{
		    cache_get_row(iIndex, field, string, MainPipeline);
	   		switch(field)
			{
				case 0: DTextInfo[iIndex][dtSQLId] = strval(string);
				case 1: format(DTextInfo[iIndex][dtDescription], 128, "%s", string);
				case 2: DTextInfo[iIndex][dtExteriorVW] = strval(string);
				case 3: DTextInfo[iIndex][dtExteriorInt] = strval(string);
				case 4: DTextInfo[iIndex][dtExteriorX] = floatstr(string);
				case 5: DTextInfo[iIndex][dtExteriorY] = floatstr(string);
				case 6: DTextInfo[iIndex][dtExteriorZ] = floatstr(string);
				case 7: DTextInfo[iIndex][dtColor] = strval(string);
				case 8: DTextInfo[iIndex][dtModel] = strval(string);
			}
		}
		if(!isnull(DTextInfo[iIndex][dtDescription])) CreateDynamicText(iIndex);
		iIndex++;
	}
	if(iIndex > 0) printf("[LoadDynamicTexts] %d Texts Lables rehashed/loaded.", iIndex);
	else printf("[LoadDynamicTexts] Failed to load any Text Lables.");
	return 1;
}


// End Text Lables
stock LoadBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new binfo[12][32];
	new string[256];
	new File:file = fopen("biz.cfg", io_read);
	if(file)
	{
	    new idx = 1;
		while(idx < MAX_BIZ)
		{
		    fread(file, string);
		    splits(string, binfo, '|');
		    BizInfo[idx][bType] = strval(binfo[0]);
		    BizInfo[idx][bStatus] = strval(binfo[1]);
		    format(BizInfo[idx][bOwner], 32, "%s", binfo[2]);
		    BizInfo[idx][bX] = floatstr(binfo[3]);
		    BizInfo[idx][bY] = floatstr(binfo[4]);
		    BizInfo[idx][bZ] = floatstr(binfo[5]);
		    BizInfo[idx][bMoney] = strval(binfo[6]);
		    BizInfo[idx][bProducts] = strval(binfo[7]);
		    BizInfo[idx][bSold] = strval(binfo[8]);
		    BizInfo[idx][bLevel] = strval(binfo[9]);
		    BizInfo[idx][bPrice] = strval(binfo[10]);
		    BizInfo[idx][bAP] = strval(binfo[11]);
		    if(BizInfo[idx][bType] == 1)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1274, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
    	    if(BizInfo[idx][bType] == 2)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1275, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
    	    if(BizInfo[idx][bType] == 3)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1242, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
    	    if(BizInfo[idx][bType] == 4)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1582, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
    	    if(BizInfo[idx][bType] == 5)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1650, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
    	    if(BizInfo[idx][bType] == 6)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(19094, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
    	    if(BizInfo[idx][bType] == 7)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(321, 1, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], 0);
    	    }
     	    if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nFor Sale\nPrice: $%d\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice], idx);
    		else format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], idx);
    	    BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]+0.8, 4);
			idx++;
	    }
	}
	print("Businesses loaded successfully.");
	return 1;
}

stock SaveBiz()
{
    if(!fexist("biz.cfg")) fcreate("biz.cfg");
	new idx = 1, File:file;
	new string[256];
	while(idx < MAX_BIZ)
	{
	    format(string, sizeof(string), "%d|%d|%s|%f|%f|%f|%d|%d|%d|%d|%d|%d\r\n", BizInfo[idx][bType], BizInfo[idx][bStatus], BizInfo[idx][bOwner], BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ], BizInfo[idx][bMoney], BizInfo[idx][bProducts], BizInfo[idx][bSold], BizInfo[idx][bLevel], BizInfo[idx][bPrice], BizInfo[idx][bAP]);
	    if(idx == 1)
	    {
	        file = fopen("biz.cfg", io_write);
	    }
	    else
	    {
	    	file = fopen("biz.cfg", io_append);
	    }
		fwrite(file, string);
		fclose(file);
		idx++;
	}
	print("Businesses saved successfully.");
}

stock SaveHouse(houseid)
{
	new string[2048];
	format(string, sizeof(string), "UPDATE `houses` SET \
		`Owned`=%d, \
		`Level`=%d, \
		`HInteriorWorld`=%d, \
		`Description`='%s', \
		`Owner`='%s', \
		`ExteriorX`=%f, \
		`ExteriorY`=%f, \
		`ExteriorZ`=%f, \
		`ExteriorR`=%f, \
		`InteriorX`=%f, \
		`InteriorY`=%f, \
		`InteriorZ`=%f, \
		`InteriorR`=%f,",
		HouseInfo[houseid][hOwned],
		HouseInfo[houseid][hLevel],
		HouseInfo[houseid][hHInteriorWorld],
		HouseInfo[houseid][hDescription],
		HouseInfo[houseid][hOwner],
		HouseInfo[houseid][hExteriorX],
		HouseInfo[houseid][hExteriorY],
		HouseInfo[houseid][hExteriorZ],
		HouseInfo[houseid][hExteriorR],
		HouseInfo[houseid][hInteriorX],
		HouseInfo[houseid][hInteriorY],
		HouseInfo[houseid][hInteriorZ],
		HouseInfo[houseid][hInteriorR]
	);

	format(string, sizeof(string), "%s \
		`Lock`=%d, \
		`Rentable`=%d, \
		`RentFee`=%d, \
		`Value`=%d, \
		`SafeMoney`=%d, \
		`Pot`=%d, \
		`Crack`=%d, \
		`Materials`=%d, \
		`Weapons0`=%d, \
		`Weapons1`=%d, \
		`Weapons2`=%d, \
		`Weapons3`=%d, \
		`Weapons4`=%d, \
		`GLUpgrade`=%d, \
		`CustomInterior`=%d, \
		`CustomExterior`=%d, \
		`ExteriorA`=%f, \
		`InteriorA`=%f WHERE `id`=%d",
		string,
		HouseInfo[houseid][hLock],
		HouseInfo[houseid][hRentable],
		HouseInfo[houseid][hRentFee],
		HouseInfo[houseid][hValue],
   		HouseInfo[houseid][hSafeMoney],
		HouseInfo[houseid][hPot],
		HouseInfo[houseid][hCrack],
		HouseInfo[houseid][hMaterials],
		HouseInfo[houseid][hWeapons][0],
		HouseInfo[houseid][hWeapons][1],
		HouseInfo[houseid][hWeapons][2],
		HouseInfo[houseid][hWeapons][3],
		HouseInfo[houseid][hWeapons][4],
		HouseInfo[houseid][hGLUpgrade],
		HouseInfo[houseid][hCustomInterior],
		HouseInfo[houseid][hCustomExterior],
		HouseInfo[houseid][hExteriorA],
		HouseInfo[houseid][hInteriorA],
		houseid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

stock CreateHouse(houseid)
{
	new string[2048];
	format(string, sizeof(string), "INSERT INTO `houses` VALUES \
		`Owned`=%d, \
		`Level`=%d, \
		`HInteriorWorld`=%d, \
		`Description`='%s', \
		`Owner`='%s', \
		`ExteriorX`=%f, \
		`ExteriorY`=%f, \
		`ExteriorZ`=%f, \
		`ExteriorR`=%f, \
		`InteriorX`=%f, \
		`InteriorY`=%f, \
		`InteriorZ`=%f, \
		`InteriorR`=%f,",
		HouseInfo[houseid][hOwned],
		HouseInfo[houseid][hLevel],
		HouseInfo[houseid][hHInteriorWorld],
		HouseInfo[houseid][hDescription],
		HouseInfo[houseid][hOwner],
		HouseInfo[houseid][hExteriorX],
		HouseInfo[houseid][hExteriorY],
		HouseInfo[houseid][hExteriorZ],
		HouseInfo[houseid][hExteriorR],
		HouseInfo[houseid][hInteriorX],
		HouseInfo[houseid][hInteriorY],
		HouseInfo[houseid][hInteriorZ],
		HouseInfo[houseid][hInteriorR]
	);

	format(string, sizeof(string), "%s \
		`Lock`=%d, \
		`Rentable`=%d, \
		`RentFee`=%d, \
		`Value`=%d, \
		`SafeMoney`=%d, \
		`Pot`=%d, \
		`Crack`=%d, \
		`Materials`=%d, \
		`Weapons0`=%d, \
		`Weapons1`=%d, \
		`Weapons2`=%d, \
		`Weapons3`=%d, \
		`Weapons4`=%d, \
		`GLUpgrade`=%d, \
		`CustomInterior`=%d, \
		`CustomExterior`=%d, \
		`ExteriorA`=%f, \
		`InteriorA`=%f WHERE `id`=%d",
		string,
		HouseInfo[houseid][hLock],
		HouseInfo[houseid][hRentable],
		HouseInfo[houseid][hRentFee],
		HouseInfo[houseid][hValue],
   		HouseInfo[houseid][hSafeMoney],
		HouseInfo[houseid][hPot],
		HouseInfo[houseid][hCrack],
		HouseInfo[houseid][hMaterials],
		HouseInfo[houseid][hWeapons][0],
		HouseInfo[houseid][hWeapons][1],
		HouseInfo[houseid][hWeapons][2],
		HouseInfo[houseid][hWeapons][3],
		HouseInfo[houseid][hWeapons][4],
		HouseInfo[houseid][hGLUpgrade],
		HouseInfo[houseid][hCustomInterior],
		HouseInfo[houseid][hCustomExterior],
		HouseInfo[houseid][hExteriorA],
		HouseInfo[houseid][hInteriorA],
		houseid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

stock SaveGate(gateid)
{
	new string[2048];
	format(string, sizeof(string), "UPDATE `gates` SET \
		`HID`=%d, \
		`Speed`=%f, \
		`Range`=%d, \
		`Model`='%d', \
		`VW`='%d', \
		`Int`=%d, \
		`Pass`='%s', \
		`PosX`=%f, \
		`PosY`=%f, \
		`RotX`=%f, \
		`RotY`=%f, \
		`RotZ`=%f, \
		`PosXM`=%f,",
		GateInfo[gateid][gHID],
		GateInfo[gateid][gSpeed],
		GateInfo[gateid][gRange],
		GateInfo[gateid][gModel],
		GateInfo[gateid][gVW],
		GateInfo[gateid][gInt],
		g_mysql_ReturnEscaped(GateInfo[gateid][gPass], MainPipeline),
		GateInfo[gateid][gPosX],
		GateInfo[gateid][gPosY],
		GateInfo[gateid][gPosZ],
		GateInfo[gateid][gRotX],
		GateInfo[gateid][gRotY],
		GateInfo[gateid][gRotZ],
		GateInfo[gateid][gPosXM]
	);

	format(string, sizeof(string), "%s \
		`PosYM`=%f, \
		`PosZM`=%f, \
		`RotXM`=%f, \
		`RotYM`=%f, \
		`RotZM`=%f, \
		`RenderHQ`=%d WHERE `ID`=%d",
		string,
		GateInfo[gateid][gPosYM],
		GateInfo[gateid][gPosZM],
		GateInfo[gateid][gRotXM],
		GateInfo[gateid][gRotYM],
		GateInfo[gateid][gRotZM],
		GateInfo[gateid][gRenderHQ],
		gateid+1
	); // Array starts from zero, MySQL starts at 1 (this is why we are adding one).

	mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);
}

stock SaveGates()
{
	for(new i = 0; i < MAX_GATES; i++)
	{
		SaveGate(i);
	}
	return 1;
}

stock SaveHouses()
{
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		SaveHouse(i);
	}
	return 1;
}

/*
stock SaveHouses() {

	new
		szFileStr[1024],
		File: fHandle = fopen("apartments.cfg", io_write);

	for(new iIndex; iIndex < MAX_HOUSES; iIndex++) {
		format(szFileStr, sizeof(szFileStr), "%d|%d|%d|%s|%s|%f|%f|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%f|%f\r\n",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
   			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);
		fwrite(fHandle, szFileStr);
	}
	return fclose(fHandle);
}
*/


stock RehashHouse(houseid)
{
	printf("[RehashHouse] Deleting HouseID %d from server...", houseid);
	DestroyPickupEx(HouseInfo[houseid][hPickupID]);
	if(IsValidDynamic3DTextLabel(HouseInfo[houseid][hTextID])) DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
	HouseInfo[houseid][hSQLId] = -1;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLevel] = 0;
	HouseInfo[houseid][hHInteriorWorld] = 0;
	HouseInfo[houseid][hExteriorX] = 0.0;
	HouseInfo[houseid][hExteriorY] = 0.0;
	HouseInfo[houseid][hExteriorZ] = 0.0;
	HouseInfo[houseid][hExteriorR] = 0.0;
	HouseInfo[houseid][hInteriorX] = 0.0;
	HouseInfo[houseid][hInteriorY] = 0.0;
	HouseInfo[houseid][hInteriorZ] = 0.0;
	HouseInfo[houseid][hInteriorR] = 0.0;
	HouseInfo[houseid][hLock] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hRentFee] = 0;
	HouseInfo[houseid][hValue] = 0;
	HouseInfo[houseid][hSafeMoney] = 0;
	HouseInfo[houseid][hPot] = 0;
	HouseInfo[houseid][hCrack] = 0;
	HouseInfo[houseid][hMaterials] = 0;
	HouseInfo[houseid][hWeapons][0] = 0;
	HouseInfo[houseid][hWeapons][1] = 0;
	HouseInfo[houseid][hWeapons][2] = 0;
	HouseInfo[houseid][hWeapons][3] = 0;
	HouseInfo[houseid][hWeapons][4] = 0;
	HouseInfo[houseid][hGLUpgrade] = 0;
	HouseInfo[houseid][hCustomInterior] = 0;
	HouseInfo[houseid][hCustomExterior] = 0;
	HouseInfo[houseid][hExteriorA] = 0;
	HouseInfo[houseid][hInteriorA] = 0;
	LoadHouse(houseid);
}

stock RehashHouses()
{
	printf("[RehashHouses] Deleting houses from server...");
	for(new i = 0; i < MAX_HOUSES; i++)
	{
		DestroyPickupEx(HouseInfo[i][hPickupID]);
		if(IsValidDynamic3DTextLabel(HouseInfo[i][hTextID])) DestroyDynamic3DTextLabel(HouseInfo[i][hTextID]);
		HouseInfo[i][hSQLId] = -1;
		HouseInfo[i][hOwned] = 0;
		HouseInfo[i][hLevel] = 0;
		HouseInfo[i][hHInteriorWorld] = 0;
		HouseInfo[i][hExteriorX] = 0.0;
		HouseInfo[i][hExteriorY] = 0.0;
		HouseInfo[i][hExteriorZ] = 0.0;
		HouseInfo[i][hExteriorR] = 0.0;
		HouseInfo[i][hInteriorX] = 0.0;
		HouseInfo[i][hInteriorY] = 0.0;
		HouseInfo[i][hInteriorZ] = 0.0;
		HouseInfo[i][hInteriorR] = 0.0;
		HouseInfo[i][hLock] = 0;
		HouseInfo[i][hRentable] = 0;
		HouseInfo[i][hRentFee] = 0;
		HouseInfo[i][hValue] = 0;
		HouseInfo[i][hSafeMoney] = 0;
		HouseInfo[i][hPot] = 0;
		HouseInfo[i][hCrack] = 0;
		HouseInfo[i][hMaterials] = 0;
		HouseInfo[i][hWeapons][0] = 0;
		HouseInfo[i][hWeapons][1] = 0;
	    HouseInfo[i][hWeapons][2] = 0;
	    HouseInfo[i][hWeapons][3] = 0;
	    HouseInfo[i][hWeapons][4] = 0;
		HouseInfo[i][hGLUpgrade] = 0;
		HouseInfo[i][hCustomInterior] = 0;
		HouseInfo[i][hCustomExterior] = 0;
		HouseInfo[i][hExteriorA] = 0;
		HouseInfo[i][hInteriorA] = 0;
	}
	LoadHouses();
}


stock LoadHouse(houseid)
{
	new string[128];
	printf("[LoadHouse] Loading HouseID %d's data from database...", houseid);
	format(string, sizeof(string), "SELECT * FROM `houses` WHERE `id`=%d",houseid+1); // Array starts at zero, MySQL starts at one.
	mysql_function_query(MainPipeline, string, true, "OnLoadHouse", "i", houseid);
}


stock LoadGate(gateid)
{
	new string[128];
	printf("[LoadGate] Loading GateID %d's data from database...", gateid);
	format(string, sizeof(string), "SELECT * FROM `gates` WHERE `id`=%d",gateid+1); // Array starts at zero, MySQL starts at one.
	mysql_function_query(MainPipeline, string, true, "OnLoadGate", "i", gateid);
}

/*
stock LoadHouses() {

	if(!fexist("apartments.cfg")) return 1;

	new
		szFileStr[1024],
		File: iFileHandle = fopen("apartments.cfg", io_read),
		iIndex;

	while(iIndex < sizeof(HouseInfo) && fread(iFileHandle, szFileStr)) {
		sscanf(szFileStr, "p<|>iiis[128]s[24]ffffffffiiiiiiiiiiiiiiiiiff",
			HouseInfo[iIndex][hOwned],
			HouseInfo[iIndex][hLevel],
			HouseInfo[iIndex][hHInteriorWorld],
			HouseInfo[iIndex][hDescription],
			HouseInfo[iIndex][hOwner],
			HouseInfo[iIndex][hExteriorX],
			HouseInfo[iIndex][hExteriorY],
			HouseInfo[iIndex][hExteriorZ],
			HouseInfo[iIndex][hExteriorR],
			HouseInfo[iIndex][hInteriorX],
			HouseInfo[iIndex][hInteriorY],
			HouseInfo[iIndex][hInteriorZ],
			HouseInfo[iIndex][hInteriorR],
			HouseInfo[iIndex][hLock],
			HouseInfo[iIndex][hRentable],
			HouseInfo[iIndex][hRentFee],
			HouseInfo[iIndex][hValue],
			HouseInfo[iIndex][hSafeMoney],
			HouseInfo[iIndex][hPot],
			HouseInfo[iIndex][hCrack],
			HouseInfo[iIndex][hMaterials],
			HouseInfo[iIndex][hWeapons][0],
			HouseInfo[iIndex][hWeapons][1],
			HouseInfo[iIndex][hWeapons][2],
			HouseInfo[iIndex][hWeapons][3],
			HouseInfo[iIndex][hWeapons][4],
			HouseInfo[iIndex][hGLUpgrade],
			HouseInfo[iIndex][hPickupID],
			HouseInfo[iIndex][hCustomInterior],
			HouseInfo[iIndex][hCustomExterior],
			HouseInfo[iIndex][hExteriorA],
			HouseInfo[iIndex][hInteriorA]
		);

		if(HouseInfo[iIndex][hOwned]) {
			if(HouseInfo[iIndex][hRentable] == 0) format(szFileStr, sizeof(szFileStr), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hLevel],iIndex);
			else format(szFileStr, sizeof(szFileStr), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[iIndex][hOwner],HouseInfo[iIndex][hRentFee],HouseInfo[iIndex][hLevel],iIndex);
		}
		else format(szFileStr, sizeof(szFileStr), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[iIndex][hDescription],HouseInfo[iIndex][hValue],HouseInfo[iIndex][hLevel],iIndex);

		HouseInfo[iIndex][hPickupID] = CreateDynamicPickup(1273, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]);
		//HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_GREEN, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,30.0, .testlos = 1, .streamdistance = 30.0);
		HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(szFileStr, COLOR_GREEN, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,30.0, .testlos = 1, .streamdistance = 30.0);
		++iIndex;
	}
	printf("[Houses] %i loaded.", iIndex);
	return fclose(iFileHandle);
}*/

forward OnLoadGate(index);
public OnLoadGate(index)
{
	new string[64];
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	for(new field;field<fields;field++)
	{
	    cache_get_row(index, field, string, MainPipeline);
		switch(field)
		{
			case 0: GateInfo[index][gHID] = strval(string);
			case 2: GateInfo[index][gSpeed] = strval(string);
			case 3: GateInfo[index][gRange] = strval(string);
			case 4: GateInfo[index][gModel] = strval(string);
			case 5: GateInfo[index][gVW] = strval(string);
			case 6: GateInfo[index][gInt] = strval(string);
			case 7: format(GateInfo[index][gPass], 24, "%s", string);
			case 8: GateInfo[index][gPosX] = floatstr(string);
			case 9: GateInfo[index][gPosY] = floatstr(string);
			case 10: GateInfo[index][gPosZ] = floatstr(string);
			case 11: GateInfo[index][gRotX] = floatstr(string);
			case 12: GateInfo[index][gRotY] = floatstr(string);
			case 13: GateInfo[index][gRotZ] = floatstr(string);
			case 14: GateInfo[index][gPosXM] = floatstr(string);
			case 15: GateInfo[index][gPosYM] = floatstr(string);
			case 16: GateInfo[index][gPosZM] = floatstr(string);
			case 17: GateInfo[index][gRotXM] = floatstr(string);
			case 18: GateInfo[index][gRotYM] = floatstr(string);
			case 19: GateInfo[index][gRotZM] = floatstr(string);
			case 20: GateInfo[index][gRenderHQ] = strval(string);
		}
	}
	if(GateInfo[index][gModel] != 0)
	{
	    CreateGate(index);

	}
	return 1;
}

stock LoadGates()
{
	printf("[LoadGates] Loading data from database...");
	mysql_function_query(MainPipeline, "SELECT * FROM `gates`", true, "OnLoadGates", "");
}

forward OnLoadGates();
public OnLoadGates()
{
	new string[512], iIndex;
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	while(iIndex<rows)
	{
	    for(new field;field<fields;field++)
	    {
 		    cache_get_row(iIndex, field, string, MainPipeline);
			switch(field)
			{
				case 0: GateInfo[iIndex][gHID] = strval(string);
				case 2: GateInfo[iIndex][gSpeed] = floatstr(string);
				case 3: GateInfo[iIndex][gRange] = strval(string);
				case 4: GateInfo[iIndex][gModel] = strval(string);
				case 5: GateInfo[iIndex][gVW] = strval(string);
				case 6: GateInfo[iIndex][gInt] = strval(string);
				case 7: format(GateInfo[iIndex][gPass], 24, "%s", string);
				case 8: GateInfo[iIndex][gPosX] = floatstr(string);
				case 9: GateInfo[iIndex][gPosY] = floatstr(string);
				case 10: GateInfo[iIndex][gPosZ] = floatstr(string);
				case 11: GateInfo[iIndex][gRotX] = floatstr(string);
				case 12: GateInfo[iIndex][gRotY] = floatstr(string);
				case 13: GateInfo[iIndex][gRotZ] = floatstr(string);
				case 14: GateInfo[iIndex][gPosXM] = floatstr(string);
				case 15: GateInfo[iIndex][gPosYM] = floatstr(string);
				case 16: GateInfo[iIndex][gPosZM] = floatstr(string);
				case 17: GateInfo[iIndex][gRotXM] = floatstr(string);
				case 18: GateInfo[iIndex][gRotYM] = floatstr(string);
				case 19: GateInfo[iIndex][gRotZM] = floatstr(string);
				case 20: GateInfo[iIndex][gRenderHQ] = strval(string);
			}
		}
		if(GateInfo[iIndex][gModel] != 0)
		{
		    CreateGate(iIndex);

		}
		iIndex++;
 	}
	if(iIndex > 0) printf("[LoadGates] %d gates rehashed/loaded.", iIndex), TotalGates = iIndex; // Fixed this line -Phazd <3
	else printf("[LoadGates] Failed to load any gates.");
	return 1;
}

// HOUSES -Phazd <3
forward OnLoadHouse(index);
public OnLoadHouse(index)
{
	new string[64];
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);

	for(new field;field<fields;field++)
	{
	    cache_get_row(index, field, string, MainPipeline);
		switch(field)
		{
		   	case 0:  HouseInfo[index][hSQLId] = strval(string);
			case 1:  HouseInfo[index][hOwned] = strval(string);
			case 2:  HouseInfo[index][hLevel] = strval(string);
			case 3:  HouseInfo[index][hHInteriorWorld] = strval(string);
			case 4:  format(HouseInfo[index][hDescription], 16, "%s", string);
			case 5:  format(HouseInfo[index][hOwner], 24, "%s", string);
			case 6:  HouseInfo[index][hExteriorX] = floatstr(string);
			case 7:  HouseInfo[index][hExteriorY] = floatstr(string);
			case 8:  HouseInfo[index][hExteriorZ] = floatstr(string);
			case 9:  HouseInfo[index][hExteriorR] = floatstr(string);
			case 10: HouseInfo[index][hInteriorX] = floatstr(string);
			case 11: HouseInfo[index][hInteriorY] = floatstr(string);
			case 12: HouseInfo[index][hInteriorZ] = floatstr(string);
			case 13: HouseInfo[index][hInteriorR] = floatstr(string);
			case 14: HouseInfo[index][hLock] = strval(string);
			case 15: HouseInfo[index][hRentable] = strval(string);
			case 16: HouseInfo[index][hRentFee] = strval(string);
			case 17: HouseInfo[index][hValue] = strval(string);
			case 18: HouseInfo[index][hSafeMoney] = strval(string);
			case 19: HouseInfo[index][hPot] = strval(string);
			case 20: HouseInfo[index][hCrack] = strval(string);
			case 21: HouseInfo[index][hMaterials] = strval(string);
			case 22: HouseInfo[index][hWeapons][0] = strval(string);
			case 23: HouseInfo[index][hWeapons][1] = strval(string);
			case 24: HouseInfo[index][hWeapons][2] = strval(string);
			case 25: HouseInfo[index][hWeapons][3] = strval(string);
			case 26: HouseInfo[index][hWeapons][4] = strval(string);
			case 27: HouseInfo[index][hGLUpgrade] = strval(string);
			case 28: HouseInfo[index][hPickupID] = strval(string);
			case 29: HouseInfo[index][hCustomInterior] = strval(string);
			case 30: HouseInfo[index][hCustomExterior] = strval(string);
			case 31: HouseInfo[index][hExteriorA] = floatstr(string);
			case 32: HouseInfo[index][hInteriorA] = floatstr(string);
		}
	}
	if(HouseInfo[index][hOwned]) {
		if(!HouseInfo[index][hRentable]) format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[index][hOwner], HouseInfo[index][hLevel], index);
		else format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room", HouseInfo[index][hOwner], HouseInfo[index][hRentFee], HouseInfo[index][hLevel], index);
	}
	else format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[index][hDescription],HouseInfo[index][hValue],HouseInfo[index][hLevel],index);

	HouseInfo[index][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[index][hExteriorX], HouseInfo[index][hExteriorY], HouseInfo[index][hExteriorZ]);
	HouseInfo[index][hTextID] = CreateDynamic3DTextLabel(string, COLOR_GREEN, HouseInfo[index][hExteriorX], HouseInfo[index][hExteriorY], HouseInfo[index][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
	return 1;
}

stock LoadHouses()
{
	printf("[LoadHouses] Loading data from database...");
	mysql_function_query(MainPipeline, "SELECT * FROM `houses`", true, "OnLoadHouses", "");
}

forward OnLoadHouses();
public OnLoadHouses()
{
	new string[512], iIndex;
	new rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	while(iIndex<rows)
	{
	    for(new field;field<fields;field++)
	    {
 		    cache_get_row(iIndex, field, string, MainPipeline);
			switch(field)
			{
			    case 0:  HouseInfo[iIndex][hSQLId] = strval(string);
				case 1:  HouseInfo[iIndex][hOwned] = strval(string);
				case 2:  HouseInfo[iIndex][hLevel] = strval(string);
				case 3:  HouseInfo[iIndex][hHInteriorWorld] = strval(string);
				case 4:  format(HouseInfo[iIndex][hDescription], 16, "%s", string);
				case 5:  format(HouseInfo[iIndex][hOwner], 24, "%s", string);
				case 6:  HouseInfo[iIndex][hExteriorX] = floatstr(string);
				case 7:  HouseInfo[iIndex][hExteriorY] = floatstr(string);
				case 8:  HouseInfo[iIndex][hExteriorZ] = floatstr(string);
				case 9:  HouseInfo[iIndex][hExteriorR] = floatstr(string);
				case 10:  HouseInfo[iIndex][hInteriorX] = floatstr(string);
				case 11: HouseInfo[iIndex][hInteriorY] = floatstr(string);
				case 12: HouseInfo[iIndex][hInteriorZ] = floatstr(string);
				case 13: HouseInfo[iIndex][hInteriorR] = floatstr(string);
				case 14: HouseInfo[iIndex][hLock] = strval(string);
				case 15: HouseInfo[iIndex][hRentable] = strval(string);
				case 16: HouseInfo[iIndex][hRentFee] = strval(string);
				case 17: HouseInfo[iIndex][hValue] = strval(string);
				case 18: HouseInfo[iIndex][hSafeMoney] = strval(string);
				case 19: HouseInfo[iIndex][hPot] = strval(string);
				case 20: HouseInfo[iIndex][hCrack] = strval(string);
				case 21: HouseInfo[iIndex][hMaterials] = strval(string);
				case 22: HouseInfo[iIndex][hWeapons][0] = strval(string);
				case 23: HouseInfo[iIndex][hWeapons][1] = strval(string);
				case 24: HouseInfo[iIndex][hWeapons][2] = strval(string);
				case 25: HouseInfo[iIndex][hWeapons][3] = strval(string);
				case 26: HouseInfo[iIndex][hWeapons][4] = strval(string);
				case 27: HouseInfo[iIndex][hGLUpgrade] = strval(string);
				case 28: HouseInfo[iIndex][hPickupID] = strval(string);
				case 29: HouseInfo[iIndex][hCustomInterior] = strval(string);
				case 30: HouseInfo[iIndex][hCustomExterior] = strval(string);
				case 31: HouseInfo[iIndex][hExteriorA] = floatstr(string);
				case 32: HouseInfo[iIndex][hInteriorA] = floatstr(string);
			}
		}
		if(HouseInfo[iIndex][hOwned]) {

		if(!HouseInfo[iIndex][hRentable]) format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[iIndex][hOwner], HouseInfo[iIndex][hLevel], iIndex);
			else format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room", HouseInfo[iIndex][hOwner], HouseInfo[iIndex][hRentFee], HouseInfo[iIndex][hLevel], iIndex);
		}
		else format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[iIndex][hDescription],HouseInfo[iIndex][hValue],HouseInfo[iIndex][hLevel],iIndex);

		HouseInfo[iIndex][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]);
		HouseInfo[iIndex][hTextID] = CreateDynamic3DTextLabel(string, COLOR_GREEN, HouseInfo[iIndex][hExteriorX], HouseInfo[iIndex][hExteriorY], HouseInfo[iIndex][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
  		iIndex++;
 	}
	if(iIndex > 0) printf("[LoadHouses] %d houses rehashed/loaded.", iIndex), TotalHouses = iIndex; // Fixed this line -Phazd <3
	else printf("[LoadHouses] Failed to load any houses.");
	return 1;
}

AntiDeAMX()
{
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

public OnGameModeInit() {
	new
		string[42];

	//mysql_debug(1);

	AntiDeAMX();
	Streamer_TickRate(125);

	g_mysql_Init();
	djson_GameModeInit();

	EnableStuntBonusForAll(0);

	SetGameModeText(SERVER_GM_TEXT);

	ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
	DisableInteriorEnterExits();
    SGcheckUsed = 1;
	// Remote Configs
 	g_mysql_LoadMOTD();
 	g_mysql_AccountOnlineReset();
	LoadHouses();
	LoadDynamicDoors();
	LoadDynamicMapIcons();
	LoadDynamicTexts();
	loadFactions();
	loadFacVehicles();
	//LoadFactions();

	// Local Configs
	InitTurfWars();
	LoadTurfWars();
	InitPaintballArenas();
	LoadPaintballArenas();
	InitEventPoints();
	LoadEventPoints();
	LoadGates();
	LoadElevatorStuff();
	LoadThePay();
	LoadFamilies();
	LoadPoints();
	LoadcDealerships();
	LoadMOTDs();
	Misc_Load();
	//LoadHouses();
	Tax_Load();

	ResetElevatorQueue();
	Elevator_Initialize();

	if(Jackpot < 0) Jackpot = 0;
	if(TaxValue < 0) TaxValue = 0;
	for(new f = 0; f < sizeof(FamilyInfo); f++)
	{
		for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
		{
		    FamilyVehicleInfo[f][fv][fvModelId] = 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
			FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
			FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
			FamilyVehicleInfo[f][fv][fvColor1] = 126;
			FamilyVehicleInfo[f][fv][fvColor2] = 126;
			FamilyVehicleInfo[f][fv][fvPrice] = 0;
			//FamilyVehicleInfo[f][fv][fvSpawned] = 0;
			FamilyVehicleInfo[f][fv][fvFuel] = 100.00;
	    	FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
		}
	}

	for(new i = 0; i < MAX_VEHICLES; ++i) {
		VehicleFuel[i] = 100.0;
	}
	for(new i = 0; i < sizeof(CreatedCars); ++i) {
		CreatedCars[i] = INVALID_VEHICLE_ID;
	}

	AddPlayerClass(0, 1958.33, 1343.12, 15.36, 269.15, 0, 0, 0, 0, 0, 0);

	LoadFamiliesHQ();
	ClearReports();



	SetNameTagDrawDistance(40.0);

	GiftAllowed = 1;
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	strcat(News[hAdd1], "Nothing");
	strcat(News[hAdd2], "Nothing");
	strcat(News[hAdd3], "Nothing");
	strcat(News[hAdd4], "Nothing");
	strcat(News[hAdd5], "Nothing");
	strcat(News[hContact1], "No-one");
	strcat(News[hContact2], "No-one");
	strcat(News[hContact3], "No-one");
	strcat(News[hContact4], "No-one");
	strcat(News[hContact5], "No-one");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;

	AllowInteriorWeapons(1);
	UsePlayerPedAnims();

	// Load New Speed Cameras
	for(new c=0; c<MAX_SPEEDCAMS; c++) {
	    CreateDynamicObject(1622, SpeedCams[c][SCamX], SpeedCams[c][SCamY], SpeedCams[c][SCamZ], 0.0, 0.0, 10.0);
	}

	/* Textdraw Templates */

	// Blindfold
	BFText = TextDrawCreate(0.000000, -3.000000, " ");
	TextDrawBackgroundColor(BFText, 255);
	TextDrawFont(BFText, 1);
	TextDrawLetterSize(BFText, 50.000000, 50.000000);
	TextDrawColor(BFText, 0x000000FF);
	TextDrawSetOutline(BFText, 0);
	TextDrawSetProportional(BFText, 1);
	TextDrawSetShadow(BFText, 1);
	TextDrawUseBox(BFText, 1);
	TextDrawBoxColor(BFText, 0x000000FF);
	TextDrawTextSize(BFText, 689.000000, -53.000000);

	// WristWatch
	WristWatch = TextDrawCreate(577.000000, 50.000000, " ");
	TextDrawAlignment(WristWatch, 2);
	TextDrawBackgroundColor(WristWatch, 255);
	TextDrawFont(WristWatch, 3);
	TextDrawLetterSize(WristWatch, 0.709998, 2.100001);
	TextDrawColor(WristWatch, -1);
	TextDrawSetOutline(WristWatch, 1);
	TextDrawSetProportional(WristWatch, 0);
	textdrawscount++;

	// Notice Box
	NoticeTxtdraw[0] = TextDrawCreate(176.000000, 183.000000, "Box");
	TextDrawBackgroundColor(NoticeTxtdraw[0], 0);
	TextDrawFont(NoticeTxtdraw[0], 1);
	TextDrawLetterSize(NoticeTxtdraw[0], 1.590000, 7.700005);
	TextDrawColor(NoticeTxtdraw[0], 0);
	TextDrawSetOutline(NoticeTxtdraw[0], 0);
	TextDrawSetProportional(NoticeTxtdraw[0], 1);
	TextDrawSetShadow(NoticeTxtdraw[0], 1);
	TextDrawUseBox(NoticeTxtdraw[0], 1);
	TextDrawBoxColor(NoticeTxtdraw[0], 100);
	TextDrawTextSize(NoticeTxtdraw[0], 454.000000, 18.000000);

	NoticeTxtdraw[1] = TextDrawCreate(313.000000, 193.000000, "Evolution RP");
	TextDrawAlignment(NoticeTxtdraw[1], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[1], 255);
	TextDrawFont(NoticeTxtdraw[1], 2);
	TextDrawLetterSize(NoticeTxtdraw[1], 0.529999, 2.800000);
	TextDrawColor(NoticeTxtdraw[1], -1);
	TextDrawSetOutline(NoticeTxtdraw[1], 1);
	TextDrawSetProportional(NoticeTxtdraw[1], 1);

	NoticeTxtdraw[2] = TextDrawCreate(309.000000, 222.000000, "Looking up your account, Please Wait!");
	TextDrawAlignment(NoticeTxtdraw[2], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[2], 255);
	TextDrawFont(NoticeTxtdraw[2], 2);
	TextDrawLetterSize(NoticeTxtdraw[2], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[2], -1);
	TextDrawSetOutline(NoticeTxtdraw[2], 1);
	TextDrawSetProportional(NoticeTxtdraw[2], 1);

	NoticeTxtdraw[3] = TextDrawCreate(309.000000, 222.000000, "Comparing passwords with database, Please Wait!");
	TextDrawAlignment(NoticeTxtdraw[3], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[3], 255);
	TextDrawFont(NoticeTxtdraw[3], 2);
	TextDrawLetterSize(NoticeTxtdraw[3], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[3], -1);
	TextDrawSetOutline(NoticeTxtdraw[3], 1);
	TextDrawSetProportional(NoticeTxtdraw[3], 1);

	NoticeTxtdraw[4] = TextDrawCreate(309.000000, 222.000000, "Fetching & Loading your account, Please Wait!");
	TextDrawAlignment(NoticeTxtdraw[4], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[4], 255);
	TextDrawFont(NoticeTxtdraw[4], 2);
	TextDrawLetterSize(NoticeTxtdraw[4], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[4], -1);
	TextDrawSetOutline(NoticeTxtdraw[4], 1);
	TextDrawSetProportional(NoticeTxtdraw[4], 1);

	NoticeTxtdraw[5] = TextDrawCreate(309.000000, 222.000000, "Streaming Objects within area, Please Wait!");
	TextDrawAlignment(NoticeTxtdraw[5], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[5], 255);
	TextDrawFont(NoticeTxtdraw[5], 2);
	TextDrawLetterSize(NoticeTxtdraw[5], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[5], -1);
	TextDrawSetOutline(NoticeTxtdraw[5], 1);
	TextDrawSetProportional(NoticeTxtdraw[5], 1);

	NoticeTxtdraw[6] = TextDrawCreate(309.000000, 222.000000, "MySQL server is currently busy, Please Wait!");
	TextDrawAlignment(NoticeTxtdraw[6], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[6], 255);
	TextDrawFont(NoticeTxtdraw[6], 2);
	TextDrawLetterSize(NoticeTxtdraw[6], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[6], -1);
	TextDrawSetOutline(NoticeTxtdraw[6], 1);
	TextDrawSetProportional(NoticeTxtdraw[6], 1);

	NoticeTxtdraw[7] = TextDrawCreate(309.000000, 222.000000, "Loading, Please Wait!");
	TextDrawAlignment(NoticeTxtdraw[7], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[7], 255);
	TextDrawFont(NoticeTxtdraw[7], 2);
	TextDrawLetterSize(NoticeTxtdraw[7], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[7], -1);
	TextDrawSetOutline(NoticeTxtdraw[7], 1);
	TextDrawSetProportional(NoticeTxtdraw[7], 1);

	NoticeTxtdraw[8] = TextDrawCreate(309.000000, 222.000000, "Loading the Event information, Please wait!");
	TextDrawAlignment(NoticeTxtdraw[8], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[8], 255);
	TextDrawFont(NoticeTxtdraw[8], 2);
	TextDrawLetterSize(NoticeTxtdraw[8], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[8], -1);
	TextDrawSetOutline(NoticeTxtdraw[8], 1);
	TextDrawSetProportional(NoticeTxtdraw[8], 1);

	NoticeTxtdraw[9] = TextDrawCreate(309.000000, 222.000000, "Leaving Event to your last Location, Please wait!");
	TextDrawAlignment(NoticeTxtdraw[9], 2);
	TextDrawBackgroundColor(NoticeTxtdraw[9], 255);
	TextDrawFont(NoticeTxtdraw[9], 2);
	TextDrawLetterSize(NoticeTxtdraw[9], 0.189999, 1.200000);
	TextDrawColor(NoticeTxtdraw[9], -1);
	TextDrawSetOutline(NoticeTxtdraw[9], 1);
	TextDrawSetProportional(NoticeTxtdraw[9], 1);

	// MOTD
	MainMenuTxtdraw[0] = TextDrawCreate(319.000000, 364.000000, " ");
	TextDrawAlignment(MainMenuTxtdraw[0], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[0], 255);
	TextDrawFont(MainMenuTxtdraw[0], 1);
	TextDrawLetterSize(MainMenuTxtdraw[0], 0.229999, 1.400000);
	TextDrawColor(MainMenuTxtdraw[0], -1);
	TextDrawSetOutline(MainMenuTxtdraw[0], 0);
	TextDrawSetProportional(MainMenuTxtdraw[0], 1);
	TextDrawSetShadow(MainMenuTxtdraw[0], 1);
	textdrawscount++;

	// Double XP label
	MainMenuTxtdraw[1] = TextDrawCreate(230.000000, 62.000000, " ");
	TextDrawAlignment(MainMenuTxtdraw[1], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[1], 255);
	TextDrawFont(MainMenuTxtdraw[1], 1);
	TextDrawLetterSize(MainMenuTxtdraw[1], 0.189999, 1.200000);
	TextDrawColor(MainMenuTxtdraw[1], -1);
	TextDrawSetOutline(MainMenuTxtdraw[1], 1);
	TextDrawSetProportional(MainMenuTxtdraw[1], 1);
	textdrawscount++;

	MainMenuTxtdraw[2] = TextDrawCreate(174.000000, 50.000000, "Box");
	TextDrawBackgroundColor(MainMenuTxtdraw[2], 0);
	TextDrawFont(MainMenuTxtdraw[2], 1);
	TextDrawLetterSize(MainMenuTxtdraw[2], 1.590000, 7.700005);
	TextDrawColor(MainMenuTxtdraw[2], 0);
	TextDrawSetOutline(MainMenuTxtdraw[2], 0);
	TextDrawSetProportional(MainMenuTxtdraw[2], 1);
	TextDrawSetShadow(MainMenuTxtdraw[2], 1);
	TextDrawUseBox(MainMenuTxtdraw[2], 1);
	TextDrawBoxColor(MainMenuTxtdraw[2], 150);
	TextDrawTextSize(MainMenuTxtdraw[2], 454.000000, 18.000000);

	MainMenuTxtdraw[3] = TextDrawCreate(315.000000, 43.000000, "Evolution Roleplay Information");
	TextDrawAlignment(MainMenuTxtdraw[3], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[3], 255);
	TextDrawFont(MainMenuTxtdraw[3], 2);
	TextDrawLetterSize(MainMenuTxtdraw[3], 0.189999, 1.200000);
	TextDrawColor(MainMenuTxtdraw[3], -1);
	TextDrawSetOutline(MainMenuTxtdraw[3], 1);
	TextDrawSetProportional(MainMenuTxtdraw[3], 1);

	// Reward Play Label
	MainMenuTxtdraw[4] = TextDrawCreate(230.000000, 72.000000, " ");
	TextDrawAlignment(MainMenuTxtdraw[4], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[4], 255);
	TextDrawFont(MainMenuTxtdraw[4], 1);
	TextDrawLetterSize(MainMenuTxtdraw[4], 0.189999, 1.200000);
	TextDrawColor(MainMenuTxtdraw[4], -1);
	TextDrawSetOutline(MainMenuTxtdraw[4], 1);
	TextDrawSetProportional(MainMenuTxtdraw[4], 1);

	MainMenuTxtdraw[5] = TextDrawCreate(365.000000, 62.000000, "~y~Website: ~w~http://www.evolution-rp.net");
	TextDrawAlignment(MainMenuTxtdraw[5], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[5], 255);
	TextDrawFont(MainMenuTxtdraw[5], 1);
	TextDrawLetterSize(MainMenuTxtdraw[5], 0.189999, 1.200000);
	TextDrawColor(MainMenuTxtdraw[5], -1);
	TextDrawSetOutline(MainMenuTxtdraw[5], 1);
	TextDrawSetProportional(MainMenuTxtdraw[5], 1);

	MainMenuTxtdraw[6] = TextDrawCreate(365.000000, 72.000000, "~y~Teamspeak: ~w~ts.evolution-rp.net");
	TextDrawAlignment(MainMenuTxtdraw[6], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[6], 255);
	TextDrawFont(MainMenuTxtdraw[6], 1);
	TextDrawLetterSize(MainMenuTxtdraw[6], 0.189999, 1.200000);
	TextDrawColor(MainMenuTxtdraw[6], -1);
	TextDrawSetOutline(MainMenuTxtdraw[6], 1);
	TextDrawSetProportional(MainMenuTxtdraw[6], 1);
																																											   // end here
	MainMenuTxtdraw[7] = TextDrawCreate(315.000000, 90.000000, " ");
	TextDrawAlignment(MainMenuTxtdraw[7], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[7], 255);
	TextDrawFont(MainMenuTxtdraw[7], 1);
	TextDrawLetterSize(MainMenuTxtdraw[7], 0.189999, 1.200000);
	TextDrawColor(MainMenuTxtdraw[7], -1);
	TextDrawSetOutline(MainMenuTxtdraw[7], 1);
	TextDrawSetProportional(MainMenuTxtdraw[7], 1);

/*	MainMenuTxtdraw[8] = TextDrawCreate(474.000000, 50.000000, "Box");
	TextDrawBackgroundColor(MainMenuTxtdraw[8], 0);
	TextDrawFont(MainMenuTxtdraw[8], 1);
	TextDrawLetterSize(MainMenuTxtdraw[8], 1.590000, 7.700005);
	TextDrawColor(MainMenuTxtdraw[8], 0);
	TextDrawSetOutline(MainMenuTxtdraw[8], 0);
	TextDrawSetProportional(MainMenuTxtdraw[8], 1);
	TextDrawSetShadow(MainMenuTxtdraw[8], 1);
	TextDrawUseBox(MainMenuTxtdraw[8], 1);
	TextDrawBoxColor(MainMenuTxtdraw[8], 150);
	TextDrawTextSize(MainMenuTxtdraw[8], 150.000000, 18.000000);*/

	// Server Stats Bar
	MainMenuTxtdraw[8] = TextDrawCreate(319.000000, 421.000000, " ");
	TextDrawAlignment(MainMenuTxtdraw[8], 2);
	TextDrawBackgroundColor(MainMenuTxtdraw[8], 255);
	TextDrawFont(MainMenuTxtdraw[8], 1);
	TextDrawLetterSize(MainMenuTxtdraw[8], 0.189998, 1.100000);
	TextDrawColor(MainMenuTxtdraw[8], -1);
	TextDrawSetOutline(MainMenuTxtdraw[8], 0);
	TextDrawSetProportional(MainMenuTxtdraw[8], 1);
	TextDrawSetShadow(MainMenuTxtdraw[8], 1);
	textdrawscount++;
	/* End Textdraw Templates */

	//LSPD vehicles below
	LSPDVehicles[0] = AddStaticVehicleEx(598, 1601.7000, -1683.9000, 5.7000, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[1] = AddStaticVehicleEx(598, 1601.7000, -1687.9000, 5.7000, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[2] = AddStaticVehicleEx(598, 1601.7000, -1691.9000, 5.7000, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[3] = AddStaticVehicleEx(598, 1601.7000, -1695.9000, 5.7000, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[4] = AddStaticVehicleEx(598, 1601.7000, -1699.9000, 5.7000, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[5] = AddStaticVehicleEx(598, 1601.7000, -1703.9000, 5.7000, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[6] = AddStaticVehicleEx(596, 1595.7000, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[7] = AddStaticVehicleEx(596, 1591.3994, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[8] = AddStaticVehicleEx(596, 1587.7000, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[9] = AddStaticVehicleEx(596, 1583.7000, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[10] = AddStaticVehicleEx(596, 1578.7000, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[11] = AddStaticVehicleEx(596, 1574.3000, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[12] = AddStaticVehicleEx(596, 1570.3000, -1710.7000, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car (LSPD) HQ
	LSPDVehicles[13] = AddStaticVehicleEx(599, 1566.4594, -1710.9276, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Police SUV (LSPD) HQ
	LSPDVehicles[14] = AddStaticVehicleEx(599, 1562.4594, -1710.9276, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Police SUV (LSPD) HQ
	LSPDVehicles[15] = AddStaticVehicleEx(599, 1558.8594, -1710.9276, 5.7000, 0.0000, 0, 1, VEHICLE_RESPAWN); //Police SUV (LSPD) HQ
	LSPDVehicles[16] = AddStaticVehicleEx(597, 1543.87, -1659.00, 6.0994, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car Sup (LSPD) HQ
	LSPDVehicles[17] = AddStaticVehicleEx(597, 1543.87, -1663.00, 6.0994, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car Sup (LSPD) HQ
	LSPDVehicles[18] = AddStaticVehicleEx(597, 1543.87, -1667.50, 6.0994, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car Sup (LSPD) HQ
	LSPDVehicles[19] = AddStaticVehicleEx(597, 1543.87, -1671.80, 6.0994, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car Sup (LSPD) HQ
	LSPDVehicles[20] = AddStaticVehicleEx(597, 1543.87, -1675.90, 6.0994, 90.0000, 0, 1, VEHICLE_RESPAWN); //Patrol Car Sup (LSPD) HQ
	LSPDVehicles[21] = AddStaticVehicleEx(482, 1529.289, -1680.225, 5.897, 270.0000, 0, 1, VEHICLE_RESPAWN); //Jail VAN (LSPD) HQ
	LSPDVehicles[22] = AddStaticVehicleEx(490, 1534.5004, -1645.0000, 5.8253, 180.0000, 0, 1, VEHICLE_RESPAWN); //Unmarked Expedition (LSPD) HQ
	LSPDVehicles[23] = AddStaticVehicleEx(490, 1538.4000, -1645.0000, 5.8253, 180.0000, 0, 1, VEHICLE_RESPAWN); //Unmarked Expedition (LSPD) HQ
	LSPDVehicles[24] = AddStaticVehicleEx(426, 1544.0000, -1651.5000, 5.9388, 90.0000, 0, 1, VEHICLE_RESPAWN); //Unmarked CVPI (LSPD) HQ
	LSPDVehicles[25] = AddStaticVehicleEx(426, 1544.0000, -1655.0031, 5.9388, 90.0000, 0, 1, VEHICLE_RESPAWN); //Unmarked CVPI (LSPD) HQ
	LSPDVehicles[26] = AddStaticVehicleEx(523, 1584.9591, -1680.9000, 5.3952, 290.0000, 0, 1, VEHICLE_RESPAWN); //Police Motorcycle (LSPD) HQ
	LSPDVehicles[27] = AddStaticVehicleEx(523, 1585.0000, -1679.0000, 5.3952, 290.0000, 0, 1, VEHICLE_RESPAWN); //Police Motorcycle (LSPD) HQ
	LSPDVehicles[28] = AddStaticVehicleEx(523, 1584.9814, -1677.0076, 5.3952, 290.0000, 0, 1, VEHICLE_RESPAWN); //Police Motorcycle (LSPD) HQ
	LSPDVehicles[29] = AddStaticVehicleEx(523, 1585.0000, -1675.0000, 5.3952, 290.0000, 0, 1, VEHICLE_RESPAWN); //Police Motorcycle (LSPD) HQ
	LSPDVehicles[30] = AddStaticVehicleEx(510, 1557.0000, -1692.0000, 5.4876, 180.0000, 1, 1, VEHICLE_RESPAWN); //Cop Pedal Bike (LSPD) HQ
	LSPDVehicles[31] = AddStaticVehicleEx(510, 1559.0000, -1692.0000, 5.4876, 180.0000, 1, 1, VEHICLE_RESPAWN); //Cop Pedal Bike (LSPD) HQ
	LSPDVehicles[32] = AddStaticVehicleEx(510, 1561.0000, -1692.0000, 5.4876, 180.0000, 1, 1, VEHICLE_RESPAWN); //Cop Pedal Bike (LSPD) HQ
	LSPDVehicles[33] = AddStaticVehicleEx(510, 1563.0000, -1692.0000, 5.4876, 180.0000, 1, 1, VEHICLE_RESPAWN); //Cop Pedal Bike (LSPD) HQ
	LSPDVehicles[34] = AddStaticVehicleEx(596, 1779.0294, -2072.7610, 13.2000, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation PatrolCar
	LSPDVehicles[35] = AddStaticVehicleEx(596, 1775.3472, -2072.8110, 13.2000, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation PatrolCar
	LSPDVehicles[36] = AddStaticVehicleEx(596, 1771.7262, -2072.8428, 13.2000, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation PatrolCar
	LSPDVehicles[37] = AddStaticVehicleEx(596, 1768.3392, -2072.6675, 13.2000, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation PatrolCar
	LSPDVehicles[38] = AddStaticVehicleEx(597, 1761.8284, -2072.6936, 13.2673, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Patrol Sup SUV
	LSPDVehicles[39] = AddStaticVehicleEx(597, 1765.0416, -2072.7246, 13.2673, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Patrol Sup SUV
	LSPDVehicles[40] = AddStaticVehicleEx(597, 1757.6761, -2072.4946, 13.3703, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Patrol Sup SUV
	LSPDVehicles[41] = AddStaticVehicleEx(597, 1754.8075, -2072.6155, 13.2703, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Patrol Sup SUV
	LSPDVehicles[42] = AddStaticVehicleEx(599, 1750.9103, -2071.4873, 13.5702, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Patrol SUV
	LSPDVehicles[43] = AddStaticVehicleEx(599, 1747.3365, -2071.4585, 13.5702, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Patrol SUV
	LSPDVehicles[44] = AddStaticVehicleEx(497, 1715.9839, -2036.5911, 23.4322, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Helo
	LSPDVehicles[45] = AddStaticVehicleEx(487, 1748.2849, -2037.5928, 23.3832, 0.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation Helo
	LSPDVehicles[46] = AddStaticVehicleEx(525,1530.851,-1644.384,6.142,180,1,0,VEHICLE_RESPAWN); //LSPD CopTow
	LSPDVehicles[47] = AddStaticVehicleEx(560,1528.6908,-1688.0449,5.7707,268.7665,1,0,VEHICLE_RESPAWN); //LSPD SubStation Sultan
	LSPDVehicles[48] = AddStaticVehicleEx(503,1528.6982,-1683.9956,5.7727,270.1160,1,0,VEHICLE_RESPAWN); //LSPD Hotring B
	LSPDVehicles[49] = AddStaticVehicleEx(427, 1763.2986, -2055.1750, 13.9601, 270.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation SWAT Cmd Truck
	LSPDVehicles[50] = AddStaticVehicleEx(528, 1769.691, -2042.633, 13.806, 270.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation SWAT APC
	LSPDVehicles[51] = AddStaticVehicleEx(601, 1769.066, -2038.670, 13.280, 270.0000, 0, 1,VEHICLE_RESPAWN); //LSPD SubStation SWAT


	for(new x;x<sizeof(LSPDVehicles);x++)
	{
	    format(string, sizeof(string), "LSPD %d", LSPDVehicles[x]);
	    SetVehicleNumberPlate(LSPDVehicles[x], string);
	}

	FBIVehicles[0] = AddStaticVehicleEx(426,1295.5708,-987.9573,32.4441,88.9562,0,0, VEHICLE_RESPAWN); // LS
	FBIVehicles[1] = AddStaticVehicleEx(490,1295.3726,-991.4832,32.7856,86.0377,0,0, VEHICLE_RESPAWN); // LS
	FBIVehicles[2] = AddStaticVehicleEx(426,1295.4843,-982.9670,32.4517,86.9747,0,0, VEHICLE_RESPAWN); // LS
	FBIVehicles[3] = AddStaticVehicleEx(490,1295.2662,-979.1212,32.7472,89.6892,0,0, VEHICLE_RESPAWN); // LS

    for(new x;x<sizeof(FBIVehicles);x++) {
	    format(string, sizeof(string), "FBI %d", FBIVehicles[x]);
	    SetVehicleNumberPlate(FBIVehicles[x], string);
	    SetVehicleToRespawn(FBIVehicles[x]);
	}

	OPGVehicles[1] = AddStaticVehicleEx(525, 2026.2651, -1873.9890, 14.1952, -45.0000, 1, 0,VEHICLE_RESPAWN); //TowTruck
	OPGVehicles[2] = AddStaticVehicleEx(525, 2031.6411, -1879.4596, 14.1952, -45.0000, 1, 0,VEHICLE_RESPAWN); //TowTruck
	OPGVehicles[3] = AddStaticVehicleEx(525, 2020.7544, -1868.5468, 14.1952, -45.0000, 1, 0,VEHICLE_RESPAWN); //TowTruck
	OPGVehicles[4] = AddStaticVehicleEx(525, 2014.9707, -1863.1212, 14.1952, -45.0000, 1, 0,VEHICLE_RESPAWN); //TowTruck
	OPGVehicles[5] = AddStaticVehicleEx(525, 1996.1577, -1842.5155, 13.8617, -120.0000, 4, 4,VEHICLE_RESPAWN); //BatteryTruck
	OPGVehicles[6] = AddStaticVehicleEx(525, 1996.1577, -1845.9456, 13.8617, -120.0000, 4, 4,VEHICLE_RESPAWN); //BatteryTruck
	OPGVehicles[7] = AddStaticVehicleEx(525, 1996.1577, -1849.3756, 13.8617, -120.0000, 4, 4,VEHICLE_RESPAWN); //BatteryTruck
	OPGVehicles[8] = AddStaticVehicleEx(525, 1996.1577, -1852.8055, 13.8617, -120.0000, 4, 4,VEHICLE_RESPAWN); //BatteryTruck
	OPGVehicles[9] = AddStaticVehicleEx(578, 2003.1395, -1865.1232, 14.6683, -45.0000, 1, 0,VEHICLE_RESPAWN); //FlatbedTruck
	OPGVehicles[10] = AddStaticVehicleEx(578, 1999.4213, -1861.4012, 14.5720, -45.0000, 1, 0,VEHICLE_RESPAWN); //FlatbedTruck

    for(new x;x<sizeof(OPGVehicles);x++) {
	    format(string, sizeof(string), "Rapid %d", OPGVehicles[x]);
	    SetVehicleNumberPlate(OPGVehicles[x], string);
	    SetVehicleToRespawn(OPGVehicles[x]);
	}

    FDSAVehicles[0] = AddStaticVehicleEx(416,597.0666,-1520.7396,14.9968,269.6997,1,3,VEHICLE_RESPAWN); //Rodeo HQ
    FDSAVehicles[1] = AddStaticVehicleEx(416,610.1384,-1520.8335,14.9995,268.7316,1,3,VEHICLE_RESPAWN); //Rodeo HQ
    FDSAVehicles[2] = AddStaticVehicleEx(544,608.6476,-1516.6274,15.1664,272.0061,1,3,VEHICLE_RESPAWN); //Rodeo HQ
    FDSAVehicles[3] = AddStaticVehicleEx(433,606.4371,-1511.6417,15.3586,270.1569,1,3,VEHICLE_RESPAWN); //Rodeo HQ
    FDSAVehicles[4] = AddStaticVehicleEx(407,600.0796,-1506.7792,15.2807,268.1844,1,3,VEHICLE_RESPAWN); //Rodeo HQ
    FDSAVehicles[5] = AddStaticVehicleEx(407,609.1354,-1506.7229,15.1450,269.8043,1,3,VEHICLE_RESPAWN); //Rodeo HQ
    FDSAVehicles[6] = AddStaticVehicleEx(490,607.2193,-1502.4985,15.0055,271.5140,1,3,VEHICLE_RESPAWN); //Rodeo HQ

    for(new x;x<sizeof(FDSAVehicles);x++) {
	    format(string, sizeof(string), "FDSA %d", FDSAVehicles[x]);
	    SetVehicleNumberPlate(FDSAVehicles[x], string);
	    SetVehicleToRespawn(FDSAVehicles[x]);
	}

	SASDVehicles[0] = AddStaticVehicleEx(417,948.4827,1788.4233,15.8816,268.8473,40,61, VEHICLE_RESPAWN); // Leviation
	SASDVehicles[1] = AddStaticVehicleEx(447,944.2326,1683.6626,15.8084,271.0209,40,61, VEHICLE_RESPAWN); // Seasparrow
	SASDVehicles[2] = AddStaticVehicleEx(490,952.5228,1726.0911,8.4714,270.6948,40,61, VEHICLE_RESPAWN); // FBI Rancher-Command
	SASDVehicles[3] = AddStaticVehicleEx(490,952.5497,1719.9783,8.4733,268.9456,40,61, VEHICLE_RESPAWN); // FBI Rancher-Command
	SASDVehicles[4] = AddStaticVehicleEx(490,952.3305,1714.0759,8.4705,267.1686,40,61, VEHICLE_RESPAWN); // FBI Rancher-Command
	SASDVehicles[5] = AddStaticVehicleEx(598,952.4407,1743.4341,8.4437,269.2933,40,61, VEHICLE_RESPAWN); // LVPD-Command
	SASDVehicles[6] = AddStaticVehicleEx(598,952.7244,1749.2418,8.4463,268.4196,40,61, VEHICLE_RESPAWN); // LVPD-Command
	SASDVehicles[7] = AddStaticVehicleEx(598,952.7109,1754.9315,8.4445,271.1592,40,61, VEHICLE_RESPAWN); // LVPD-Command
	SASDVehicles[8] = AddStaticVehicleEx(598,982.6,1745.5088,8.4,94.4695,40,61, VEHICLE_RESPAWN); // LVPD-Command
	SASDVehicles[9] = AddStaticVehicleEx(598,982.6,1739.7042,8.4,89.0823,40,61, VEHICLE_RESPAWN); // LVPD-Command
	SASDVehicles[10] = AddStaticVehicleEx(598,982.6,1733.8996,8.4,90.1936,40,61, VEHICLE_RESPAWN); // LVPD-Command
	SASDVehicles[11] = AddStaticVehicleEx(599,954.9536,1651.2251,8.5837,269.3386,40,61, VEHICLE_RESPAWN); // PDRanger-Command
	SASDVehicles[12] = AddStaticVehicleEx(599,942.4269,1651.0996,8.5846,270.0868,40,61, VEHICLE_RESPAWN); // PDRanger-Command
	SASDVehicles[13] = AddStaticVehicleEx(599,930.1168,1651.0464,8.5869,270.9800,40,61, VEHICLE_RESPAWN); // PDRanger-Command
	SASDVehicles[14] = AddStaticVehicleEx(598,620.3888,-610.3494,17.0275,357.8247,40,61, VEHICLE_RESPAWN);
	SASDVehicles[15] = AddStaticVehicleEx(598,623.8402,-610.3732,16.8151,356.4993,40,61, VEHICLE_RESPAWN);
	SASDVehicles[16] = AddStaticVehicleEx(598,627.0840,-610.3593,16.4444,353.0931,40,61, VEHICLE_RESPAWN);
	SASDVehicles[17] = AddStaticVehicleEx(598,630.2728,-610.3563,16.1523,352.9555,40,61, VEHICLE_RESPAWN);
	SASDVehicles[18] = AddStaticVehicleEx(598,633.3627,-610.1895,16.1309,353.6647,40,61, VEHICLE_RESPAWN);
	SASDVehicles[19] = AddStaticVehicleEx(599,610.2451,-609.6633,17.4153,1.0461,40,61, VEHICLE_RESPAWN);
	SASDVehicles[20] = AddStaticVehicleEx(599,615.6458,-609.5631,17.4188,0.6659,40,61, VEHICLE_RESPAWN);
	SASDVehicles[21] = AddStaticVehicleEx(490,614.0351,-596.9487,17.2887,269.9419,40,61, VEHICLE_RESPAWN);
	SASDVehicles[22] = AddStaticVehicleEx(490,613.5406,-601.3843,17.2824,269.7121,40,61, VEHICLE_RESPAWN);

    for(new x;x<sizeof(SASDVehicles);x++) {
	    format(string, sizeof(string), "SASD %d", SASDVehicles[x]);
	    SetVehicleNumberPlate(SASDVehicles[x], string);
	    SetVehicleToRespawn(SASDVehicles[x]);
	}

	TruckerVehicles[0] = AddStaticVehicleEx(414,2469.6541,-2115.8701,14.5679,359.1924,-1,-1,500); //Mule LS
	TruckerVehicles[1] = AddStaticVehicleEx(414,2464.5518,-2115.9133,14.5723,359.6575,-1,-1,500); //Mule LS
	TruckerVehicles[2] = AddStaticVehicleEx(414,2459.5898,-2115.9968,14.5570,1.3945,-1,-1,500); //Mule LS
	TruckerVehicles[3] = AddStaticVehicleEx(414,-1581.52319336,119.51720428,3.69948244,99225.00000000,-1,-1,500); //Mule
	TruckerVehicles[4] = AddStaticVehicleEx(414,-1584.36132812,116.68750000,3.69948244,99225.00000000,-1,-1,500); //Mule
	TruckerVehicles[5] = AddStaticVehicleEx(414,-1569.55114746,131.97119141,3.69948244,99225.00000000,-1,-1,500); //Mule
	TruckerVehicles[6] = AddStaticVehicleEx(456,2468.1138,-2078.8052,14.5693,180.9714,-1,-1,500); //Yankee LS
	TruckerVehicles[7] = AddStaticVehicleEx(456,2458.3372,-2079.0039,14.5742,180.5767,-1,-1,500); //Yankee LS
	TruckerVehicles[8] = AddStaticVehicleEx(456,2447.0710,-2116.1702,14.5641,1.5674,-1,-1,500); //Yankee LS
	TruckerVehicles[9] = AddStaticVehicleEx(456,-1599.55334473,102.00447845,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[10] = AddStaticVehicleEx(456,-1603.49829102,98.16529083,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[11] = AddStaticVehicleEx(456,-1606.95983887,94.76251984,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[12] = AddStaticVehicleEx(456,-1610.01025391,91.14582062,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[13] = AddStaticVehicleEx(456,-1614.05834961,87.06182861,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[14] = AddStaticVehicleEx(456,-1617.96765137,83.13320160,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[15] = AddStaticVehicleEx(456,-1621.37426758,79.81375122,3.79948235,99225.00000000,-1,-1,500); //Yankee
	TruckerVehicles[16] = AddStaticVehicleEx(414,-1625.06359863,75.71626282,3.69948244,99225.00000000,-1,-1,500); //Mule
	TruckerVehicles[17] = AddStaticVehicleEx(414,-1628.41735840,72.35322571,3.69948244,99225.00000000,-1,-1,500); //Mule
	TruckerVehicles[18] = AddStaticVehicleEx(414,-1631.25317383,69.12777710,3.69948244,99225.00000000,-1,-1,500); //Mule

	/*PizzaVehicles[0] = AddStaticVehicleEx(448,2122.8818,-1784.8313,12.9865,357.3705,3,6,200); //Pizzaboy
	PizzaVehicles[1] =	AddStaticVehicleEx(448,2121.8069,-1784.8348,12.9868,359.6706,3,6,200); //Pizzaboy
	PizzaVehicles[2] =	AddStaticVehicleEx(448,2120.8711,-1784.7803,12.9865,1.9413,3,6,200); //Pizzaboy
	PizzaVehicles[3] =	AddStaticVehicleEx(448,2119.9238,-1784.7810,12.9867,2.1237,3,6,200); //Pizzaboy
	PizzaVehicles[4] =	AddStaticVehicleEx(448,2118.8479,-1784.7194,12.9847,0.2240,3,6,200); //Pizzaboy
	PizzaVehicles[5] =	AddStaticVehicleEx(448,2115.3745,-1784.7493,12.9872,2.3877,3,6,200); //Pizzaboy
	PizzaVehicles[6] =	AddStaticVehicleEx(448,2114.2935,-1784.7489,12.9858,0.3588,3,6,200); //Pizzaboy
	PizzaVehicles[7] =	AddStaticVehicleEx(448,2113.1179,-1784.7390,12.9866,0.3676,3,6,200); //Pizzaboy
	PizzaVehicles[8] =	AddStaticVehicleEx(448,2112.0313,-1784.7681,12.9854,0.3948,3,6,200); //Pizzaboy
	PizzaVehicles[9] =	AddStaticVehicleEx(448,2110.9023,-1784.7622,12.9869,2.4935,3,6,200); //Pizzaboy
	PizzaVehicles[10] =	AddStaticVehicleEx(448,-1713.02709961,1367.94238281,6.85771942,45.00000000,3,6,200); //Pizzaboy
	PizzaVehicles[11] =	AddStaticVehicleEx(448,-1713.83740234,1367.19580078,6.85771942,45.00000000,3,6,200); //Pizzaboy

	SFPDVehicles[0] = AddStaticVehicleEx(597,-1616.7,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[1] = AddStaticVehicleEx(597,-1612.65,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[2] = AddStaticVehicleEx(597,-1608.5,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[3] = AddStaticVehicleEx(597,-1604.4,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[4] = AddStaticVehicleEx(597,-1600.44,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[5] = AddStaticVehicleEx(597,-1596.3,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[6] = AddStaticVehicleEx(597,-1592.2,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[7] = AddStaticVehicleEx(597,-1588.25,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[8] = AddStaticVehicleEx(597,-1584.05,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[9] = AddStaticVehicleEx(597,-1580.65,749.5,-4.5,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[10] = AddStaticVehicleEx(597,-1573,742.6,-4.5,90.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[11] = AddStaticVehicleEx(597,-1573,738.75,-4.5,90.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[12] = AddStaticVehicleEx(597,-1573,734.74,-4.5,90.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[13] = AddStaticVehicleEx(597,-1573,730.75,-4.5,90.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[14] = AddStaticVehicleEx(597,-1573,726.6,-4.5,90.00000000,79,1,VEHICLE_RESPAWN); //SFPD Cruiser (Garage)
	SFPDVehicles[15] = AddStaticVehicleEx(599,-1616.5,692,-4,180.00000000,79,1,VEHICLE_RESPAWN); //SFPD Ranger (Garage)
	SFPDVehicles[16] = AddStaticVehicleEx(490,-1624.75,692.7,-4,180.00000000,0,0,VEHICLE_RESPAWN); //SFPD FBI Rancher Black (Garage)
	SFPDVehicles[17] = AddStaticVehicleEx(490,-1628.8,692.7,-4,180.00000000,0,0,VEHICLE_RESPAWN); //SFPD FBI Rancher Black (Garage)
	SFPDVehicles[28] = AddStaticVehicleEx(427,-1639,686.3,-4,270,79,1,VEHICLE_RESPAWN); //SFPD Enforcer (Garage)
	SFPDVehicles[19] = AddStaticVehicleEx(427,-1639,682.3,-4,270,79,1,VEHICLE_RESPAWN); //SFPD Enforcer (Garage)
	SFPDVehicles[20] = AddStaticVehicleEx(490,-1639,678.1,-4,270.00000000,79,1,VEHICLE_RESPAWN); //SFPD FBI Rancher Blue (Garage)
	SFPDVehicles[21] = AddStaticVehicleEx(490,-1639,674.2,-4,270.00000000,79,1,VEHICLE_RESPAWN); //SFPD FBI Rancher Blue (Garage)
	SFPDVehicles[22] = AddStaticVehicleEx(601,-1639,669.99,-4.5,270.00000000,79,79,VEHICLE_RESPAWN); //SFPD SWAT Riot Vehicle (Garage)
	SFPDVehicles[23] = AddStaticVehicleEx(601,-1639,665.95,-4.5,270.00000000,79,79,VEHICLE_RESPAWN); //SFPD SWAT Riot Vehicle (Garage)
	SFPDVehicles[24] = AddStaticVehicleEx(402,-1639,657.8,-4.5,270,79,1,VEHICLE_RESPAWN); //SFPD Buffalo (Garage)
	SFPDVehicles[25] = AddStaticVehicleEx(402,-1639,653.7,-4.5,270,79,1,VEHICLE_RESPAWN); //SFPD Buffalo (Garage)
	SFPDVehicles[26] = AddStaticVehicleEx(411,-1639,649.6,-4.5,270,79,1,VEHICLE_RESPAWN); //SFPD Infernus (Garage)

    for(new x;x<sizeof(SFPDVehicles);x++) {
	    format(string, sizeof(string), "SFPD %d", SFPDVehicles[x]);
	    SetVehicleNumberPlate(SFPDVehicles[x], string);
	    SetVehicleToRespawn(SFPDVehicles[x]);
	}

    PrisonVehicles[0] = AddStaticVehicleEx(431,-2060.50000000,-109.59960938,35.57512283,180.00000000,51,16,VEHICLE_RESPAWN); //Bus
	PrisonVehicles[1] = AddStaticVehicleEx(497,-2085.00000000,-257.00000000,45.14619064,0.00000000,16,1,VEHICLE_RESPAWN); //Police Maverick
	PrisonVehicles[2] = AddStaticVehicleEx(497,-2072.00000000,-257.00000000,45.18785858,0.00000000,79,1,VEHICLE_RESPAWN); //Police Maverick
	PrisonVehicles[3] = AddStaticVehicleEx(597,-2047.79980469,-125.00000000,15.69999981,180.00000000,16,1,VEHICLE_RESPAWN); //Police Car (SFPD)
	PrisonVehicles[4] = AddStaticVehicleEx(597,-2043.89941406,-125.00000000,15.69999981,180.00000000,16,1,VEHICLE_RESPAWN); //Police Car (SFPD)
	PrisonVehicles[5] = AddStaticVehicleEx(597,-2039.85937500,-125.00000000,15.69999981,180.00000000,16,1,VEHICLE_RESPAWN); //Police Car (SFPD)
	PrisonVehicles[6] = AddStaticVehicleEx(490,-2035.69921875,-125.00000000,15.69999981,180.00000000,44,1,VEHICLE_RESPAWN); //FBI Rancher
	PrisonVehicles[7] = AddStaticVehicleEx(490,-2031.59960938,-125.00000000,15.69999981,180.00000000,44,1,VEHICLE_RESPAWN); //FBI Rancher
	PrisonVehicles[8] = AddStaticVehicleEx(490,-2027.69921875,-125.00000000,15.69999981,180.00000000,44,1,VEHICLE_RESPAWN); //FBI Rancher
	PrisonVehicles[9] = AddStaticVehicleEx(427,-2021.00000000,-131.89941406,15.69999981,90.00000000,16,1,VEHICLE_RESPAWN); //Enforcer
	PrisonVehicles[10] = AddStaticVehicleEx(427,-2021.00000000,-135.79980469,15.69999981,90.00000000,16,1,VEHICLE_RESPAWN); //Enforcer
	PrisonVehicles[11] = AddStaticVehicleEx(599,-2060.00000000,-142.00000000,15.69999981,0.00000000,16,1,VEHICLE_RESPAWN); //Police Ranger
	PrisonVehicles[12] = AddStaticVehicleEx(599,-2064.00000000,-142.00000000,15.69999981,0.00000000,16,1,VEHICLE_RESPAWN); //Police Ranger
	PrisonVehicles[13] = AddStaticVehicleEx(416,-2051.50000000,-141.50000000,15.69999981,0.00000000,16,1,VEHICLE_RESPAWN); //Ambulance
	PrisonVehicles[14] = AddStaticVehicleEx(525,-2055.69995117,-142.00000000,15.69999981,0.00000000,16,16,VEHICLE_RESPAWN); //Tow Truck
	PrisonVehicles[15] = AddStaticVehicleEx(601,-2075.00000000,-109.59960938,35.25760269,180.00000000,16,16,VEHICLE_RESPAWN); //S.W.A.T. Van
	PrisonVehicles[16] = AddStaticVehicleEx(601,-2070.50000000,-109.59960938,35.26112747,180.00000000,16,16,VEHICLE_RESPAWN); //S.W.A.T. Van
	PrisonVehicles[17] = AddStaticVehicleEx(431,-2066.00000000,-109.59960938,35.57845688,180.00000000,51,16,VEHICLE_RESPAWN); //Bus
	PrisonVehicles[18] = AddStaticVehicleEx(599,-2024.00000000,-208.00000000,35.70544052,270.00000000,16,1,VEHICLE_RESPAWN); //Police Ranger
	PrisonVehicles[19] = AddStaticVehicleEx(471,-2013.00000000,-157.00000000,34.89531326,90.00000000,16,1,VEHICLE_RESPAWN); //Quad
	PrisonVehicles[20] = AddStaticVehicleEx(471,-2013.00000000,-160.00000000,34.89531326,90.00000000,16,1,VEHICLE_RESPAWN); //Quad
	PrisonVehicles[21] = AddStaticVehicleEx(471,-2013.00000000,-163.00000000,34.89531326,90.00000000,16,1,VEHICLE_RESPAWN); //Quad
	PrisonVehicles[22] = AddStaticVehicleEx(471,-2013.00000000,-166.00000000,34.89531326,90.00000000,16,1,VEHICLE_RESPAWN); //Quad
	PrisonVehicles[23] = AddStaticVehicleEx(471,-2013.00000000,-169.00000000,34.89531326,90.00000000,16,1,VEHICLE_RESPAWN); //Quad
	PrisonVehicles[24] = AddStaticVehicleEx(601,-2080.00000000,-109.59960938,35.25052261,180.00000000,16,16,VEHICLE_RESPAWN); //S.W.A.T. Van
	PrisonVehicles[25] = AddStaticVehicleEx(599,-2024.00000000,-202.79980469,35.70544052,270.00000000,16,1,VEHICLE_RESPAWN); //Police Ranger

	for(new x;x<sizeof(PrisonVehicles);x++) {
	    format(string, sizeof(string), "Prison %d", PrisonVehicles[x]);
	    SetVehicleNumberPlate(PrisonVehicles[x], string);
	    SetVehicleToRespawn(PrisonVehicles[x]);
	}

	ShaftVehicles[0] = AddStaticVehicleEx(426,-607.1436,443.9922,1345.7347,270.0116,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[1] = AddStaticVehicleEx(426,-607.0757,439.0056,1345.7369,271.3294,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[2] = AddStaticVehicleEx(426,-606.9856,434.5569,1345.7318,268.6385,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[3] = AddStaticVehicleEx(426,-607.0202,430.0899,1345.7271,269.2265,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[4] = AddStaticVehicleEx(490,-616.7628,430.4828,1346.1156,269.2690,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[5] = AddStaticVehicleEx(490,-616.6678,434.8142,1346.1150,270.6092,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[6] = AddStaticVehicleEx(490,-616.5742,439.5150,1346.1152,269.9034,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[7] = AddStaticVehicleEx(490,-616.5819,444.0349,1346.1208,269.3470,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[8] = AddStaticVehicleEx(482,-633.6890,443.9737,1346.1086,269.8835,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[9] = AddStaticVehicleEx(482,-633.6570,439.5644,1346.1075,270.7440,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[10] = AddStaticVehicleEx(428,-633.4365,435.0248,1346.1132,270.5195,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[11] = AddStaticVehicleEx(427,-632.5638,430.3882,1346.3511,269.8842,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[12] = AddStaticVehicleEx(427,-632.4847,425.7755,1346.4375,269.2855,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES
	ShaftVehicles[13] = AddStaticVehicleEx(525,-616.6829,425.8592,1345.8699,269.5824,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES TOW
	ShaftVehicles[14] = AddStaticVehicleEx(525,-606.7596,425.7411,1345.8641,269.1855,0,106, VEHICLE_RESPAWN); // SHAFT VEHICLES TOW
	ShaftVehicles[15] = AddStaticVehicleEx(497,1475.1663,-1340.0800,164.0265,89.8153,0,106, VEHICLE_RESPAWN); // SHAFT AIR VEHICLES
	ShaftVehicles[16] = AddStaticVehicleEx(497,1475.8525,-1360.4033,164.0265,91.0258,0,106, VEHICLE_RESPAWN); // SHAFT AIR VEHICLES

	for(new x;x<sizeof(ShaftVehicles);x++) {
	    format(string, sizeof(string), "SHAFT %d", ShaftVehicles[x]);
	    SetVehicleNumberPlate(ShaftVehicles[x], string);
	    SetVehicleToRespawn(ShaftVehicles[x]);
	}*/

	// VIP garage
	VIPVehicles[0] = AddStaticVehicleEx(411,-4365.93212891,839.28680420,986.18029785,0.00000000,-1,-1,180); //Infernus
	VIPVehicles[1] = AddStaticVehicleEx(429,-4370.52832031,840.57843018,986.13031006,0.00000000,-1,-1,180); //Banshee
	VIPVehicles[2] = AddStaticVehicleEx(451,-4374.41894531,840.36810303,986.14465332,0.00000000,-1,-1,180); //Turismo
	VIPVehicles[3] = AddStaticVehicleEx(541,-4378.48046875,840.84783936,986.08032227,0.00000000,-1,-1,180); //Bullet
	VIPVehicles[4] = AddStaticVehicleEx(559,-4382.43701172,840.60235596,986.13439941,0.00000000,-1,-1,180); //Jester
	VIPVehicles[5] = AddStaticVehicleEx(560,-4386.68066406,841.29382324,986.18530273,0.00000000,-1,-1,180); //Sultan
	VIPVehicles[6] = AddStaticVehicleEx(603,-4390.54345703,841.60748291,986.38299561,0.00000000,-1,-1,180); //Phoenix
	VIPVehicles[7] = AddStaticVehicleEx(480,-4394.61035156,841.88873291,986.23028564,0.00000000,-1,-1,180); //Comet
	VIPVehicles[8] = AddStaticVehicleEx(506,-4399.16455078,842.31146240,986.17242432,0.00000000,-1,-1,180); //Super GT
	VIPVehicles[9] = AddStaticVehicleEx(587,-4402.89990234,842.34979248,986.19030762,0.00000000,-1,-1,180); //Euros
	VIPVehicles[10] = AddStaticVehicleEx(411,-4407.21337891,842.98492432,986.18029785,0.00000000,-1,-1,180); //Infernus
	VIPVehicles[11] = AddStaticVehicleEx(429,-4410.96923828,843.07391357,986.13031006,0.00000000,-1,-1,180); //Banshee
	VIPVehicles[12] = AddStaticVehicleEx(451,-4415.64257812,843.46972656,986.14465332,0.00000000,-1,-1,180); //Turismo
	VIPVehicles[13] = AddStaticVehicleEx(541,-4419.40478516,843.48645020,986.08032227,0.00000000,-1,-1,180); //Bullet
	VIPVehicles[14] = AddStaticVehicleEx(559,-4423.40332031,843.19854736,986.13439941,0.00000000,-1,-1,180); //Jester
	VIPVehicles[15] = AddStaticVehicleEx(560,-4427.88232422,843.82849121,986.18530273,0.00000000,-1,-1,180); //Sultan
	VIPVehicles[16] = AddStaticVehicleEx(603,-4431.95849609,844.09509277,986.38299561,0.00000000,-1,-1,180); //Phoenix
	VIPVehicles[17] = AddStaticVehicleEx(480,-4436.15429688,844.76721191,986.23028564,0.00000000,-1,-1,180); //Comet
	VIPVehicles[18] = AddStaticVehicleEx(506,-4441.21337891,850.94598389,986.17242432,270.00000000,-1,-1,180); //Super GT
	VIPVehicles[19] = AddStaticVehicleEx(587,-4441.05224609,854.70550537,986.19030762,270.00000000,-1,-1,180); //Euros
	VIPVehicles[20] = AddStaticVehicleEx(522,-4418.77490234,858.65576172,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[21] = AddStaticVehicleEx(522,-4414.77441406,858.50390625,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[22] = AddStaticVehicleEx(522,-4410.77441406,858.35253906,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[23] = AddStaticVehicleEx(522,-4406.30957031,857.78234863,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[24] = AddStaticVehicleEx(522,-4394.11425781,856.77416992,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[25] = AddStaticVehicleEx(522,-4390.35644531,856.70147705,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[26] = AddStaticVehicleEx(522,-4386.21923828,856.22369385,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[27] = AddStaticVehicleEx(522,-4382.18164062,855.81323242,986.04071045,180.00000000,-1,-1,180); //NRG-500
	VIPVehicles[28] = AddStaticVehicleEx(522,-4417.77832031,876.99304199,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[29] = AddStaticVehicleEx(522,-4414.06494141,876.46301270,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[30] = AddStaticVehicleEx(522,-4409.78320312,876.41296387,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[31] = AddStaticVehicleEx(522,-4405.26074219,876.33081055,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[32] = AddStaticVehicleEx(522,-4393.28417969,875.69360352,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[33] = AddStaticVehicleEx(522,-4389.04248047,875.41735840,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[34] = AddStaticVehicleEx(522,-4385.04980469,875.21435547,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[35] = AddStaticVehicleEx(522,-4381.05761719,875.00488281,986.04071045,0.00000000,-1,-1,180); //NRG-500
	VIPVehicles[36] = AddStaticVehicleEx(411,-4407.94287109,891.34375000,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[37] = AddStaticVehicleEx(411,-4403.66748047,891.17761230,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[38] = AddStaticVehicleEx(411,-4399.91601562,891.28747559,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[39] = AddStaticVehicleEx(411,-4395.91601562,891.31347656,986.18029785,180.00000000,-1,-1,180); //Infernus
	VIPVehicles[40] = AddStaticVehicleEx(451,-4391.23242188,891.03985596,986.14465332,180.00000000,-1,-1,180); //Turismo
	VIPVehicles[41] = AddStaticVehicleEx(451,-4387.48339844,891.00421143,986.14465332,180.00000000,-1,-1,180); //Turismo
	VIPVehicles[42] = AddStaticVehicleEx(451,-4383.49218750,890.44665527,986.14465332,180.00000000,-1,-1,180); //Turismo
	VIPVehicles[43] = AddStaticVehicleEx(429,-4374.92187500,890.17211914,986.13031006,180.00000000,-1,-1,180); //Banshee
	VIPVehicles[44] = AddStaticVehicleEx(429,-4370.80273438,889.91503906,986.13031006,180.00000000,-1,-1,180); //Banshee
	VIPVehicles[45] = AddStaticVehicleEx(429,-4379.33349609,890.09112549,986.13031006,180.00000000,-1,-1,180); //Banshee
	VIPVehicles[46] = AddStaticVehicleEx(560,-4366.63867188,889.44537354,986.18530273,180.00000000,-1,-1,180); //Sultan
	VIPVehicles[47] = AddStaticVehicleEx(560,-4358.66015625,888.96386719,986.18530273,180.00000000,-1,-1,180); //Sultan
	VIPVehicles[48] = AddStaticVehicleEx(560,-4354.67675781,888.44500732,986.18530273,180.00000000,-1,-1,180); //Sultan
	VIPVehicles[49] = AddStaticVehicleEx(560,-4362.83789062,889.30908203,986.18530273,180.00000000,-1,-1,180); //Sultan

	for(new x;x<sizeof(VIPVehicles);x++) {
	    format(string, sizeof(string), "VIP %d", VIPVehicles[x]);
	    SetVehicleNumberPlate(VIPVehicles[x], string);
	    SetVehicleToRespawn(VIPVehicles[x]);
	}

 	//Palomino Creek Docks
	/*AddStaticVehicleEx(452,2185.99658203,-149.95848083,0.00000000,276.54052734,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2186.97680664,-158.20143127,0.00000000,276.53686523,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2187.71826172,-166.46507263,0.00000000,276.34887695,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2192.13793945,-200.85733032,0.00000000,276.53259277,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2193.27734375,-208.95735168,0.00000000,276.53137207,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2194.16015625,-217.30232239,0.00000000,276.53137207,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2194.73437500,-225.24971008,0.00000000,276.53137207,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2195.46508789,-233.01260376,0.00000000,276.53137207,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2196.51562500,-240.20898438,0.00000000,276.53137207,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2248.83911133,-236.78352356,0.00000000,274.83947754,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2248.34790039,-228.59799194,0.00000000,274.83947754,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2247.91552734,-219.05198669,0.00000000,274.83947754,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2247.09057617,-210.72824097,0.00000000,274.83947754,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2245.94946289,-202.20306396,0.00000000,274.08752441,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2245.44799805,-194.00953674,0.00000000,273.41845703,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2244.83129883,-185.67364502,0.00000000,273.89953613,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2244.21508789,-177.24726868,0.00000000,274.83947754,-1,-1,15); //Speeder
	AddStaticVehicleEx(452,2243.78955078,-168.67892456,0.00000000,274.83947754,-1,-1,15); //Speeder

    for(new v = 0; v < sizeof(House275Vehicles); v++)
	{
        AddVehicleComponent(House275Vehicles[v],1008);
	}*/

	for(new h = 0; h < sizeof(FamilyInfo); h++)
	{
		if(FamilyInfo[h][FamilyUSafe] > 0)
		{
			FamilyInfo[h][FamilyPickup] = CreatePickupEx(1239, 23, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2]);
		}
		if(FamilyInfo[h][FamilyEntrance][0] != 0.0 && FamilyInfo[h][FamilyEntrance][1] != 0.0)
		{
		    FamilyInfo[h][FamilyEntrancePickup] = CreatePickupEx(1318, 23, FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2]);
			format(string, sizeof(string), "%s", FamilyInfo[h][FamilyName]);
			FamilyInfo[h][FamilyEntranceText] = CreateDynamic3DTextLabel(string,COLOR_YELLOW,FamilyInfo[h][FamilyEntrance][0], FamilyInfo[h][FamilyEntrance][1], FamilyInfo[h][FamilyEntrance][2]+0.6,4.0);
		}
		LoadGangVehicles(h);
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(Points[h][Type] == 3)
		{
			format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 1;
		}
		else if(Points[h][Type] == 4)
		{
			format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[h][Stock]);
			Points[h][TextLabel] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz], 4.0);
			Points[h][CratePoint] = 2;
		}
		CreatePickupEx(1239, 23, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]);
	}
	new text_info[128];
	for(new d = 0; d < sizeof(CarDealershipInfo); d++)
	{
		if(CarDealershipInfo[d][cdEntranceX] != 0.0 && CarDealershipInfo[d][cdEntranceY] != 0.0)
		{
			CarDealershipInfo[d][cdPickupID] = CreatePickupEx(1239, 1, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]);
			if(CarDealershipInfo[d][cdOwned])
			{
	            format(text_info, sizeof(text_info),"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], CarDealershipInfo[d][cdRadius], d);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_GREEN,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
			else
			{
	            format(text_info, sizeof(text_info),"Car Dealership %s For Sale\nPrice: %d\nRadius: %.1f\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdPrice], CarDealershipInfo[d][cdRadius], d);
	            CarDealershipInfo[d][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_RED,CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
			}
		}
		for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	    {
			if (CarDealershipInfo[d][cdVehicleModel][v] != 0)
			{
		        new carcreated = CreateVehicleEx(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		        format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
                CarDealershipInfo[d][cdVehicleId][v] = carcreated;
			}
		}
	}

	// Pickups
	CreatePickupEx(1239, 23, 301.042633, 178.700408, 1007.171875, -1); // Detective job (SF)
	CreatePickupEx(1239, 23, -2089.344970, 87.800231, 35.320312, -1); // Drug Dealer job (SF)
	//CreatePickupEx(1239, 23, 2099.2761,-1804.8387,13.5547, -1); // Pizza Boy job (SF)
	CreatePickupEx(1239, 23, 833.60, 3.23, 1004.17, -1); // /paymytickets point
	CreatePickupEx(1239, 23, -4429.944824, 905.032470, 987.078186, -1); // VIP Garage Travel
	CreatePickupEx(1239, 23, 2102.71,-103.97,2.28, -1); // Matrun 3
	CreatePickupEx(1239, 23, -1816.528686, -179.502624, 9.398437, -1); // Matrun 4 (pickup)
	CreatePickupEx(1239, 23, -1872.879760, 1416.312500, 7.180089, -1); // Matrun 4 (dropoff)
	CreatePickupEx(1239, 23, -1522.7351, 2587.2612, 55.8359, -1); //Matrun TR (Pickup)
	CreatePickupEx(1239, 23, -688.7897,966.1434,12.1627, -1); //Matrun TR (DropOff)
  	CreatePickupEx(1239, 23, 701.7953,-519.8322,16.3348, -1); //Rental Icon


	CreatePickupEx(1239, 23, 757.3734,5.7227,1000.7012, -1); // Train Pos
	CreatePickupEx(1239, 23, 758.43,-78.0,1000.65, -1); // Train Pos (MALL GYM)
	CreatePickupEx(1239, 23, 293.6505,188.3670,1007.1719, -1); //FBI
	CreatePickupEx(1239, 23, 2354.2808,-1169.2959,28.0066, -1); //Drug Smuggler
	CreatePickupEx(1240, 23, 1179.4012451172,-1331.5632324219,2423.0461425781, -1);// /healme//Old Healme: 2103.4998,2824.2568,-16.1672
	CreatePickupEx(1239, 23, 1169.7209472656,-1348.3218994141,2423.0461425781, -1);// /Old Insurance: 2086.4915,2826.7122,-16.1744
    CreatePickupEx(1247, 23, -1606.307861, 673.740539, -5.242187, -1); // SFPD Arrest
    CreatePickupEx(1247, 23, 1528.4888,-1677.7632,5.8906, -1); // LSPD Arrest
    CreatePickupEx(1247, 23, 1566.4901,-1653.9076,28.3956, -1); // LSPD Arrest
    CreatePickupEx(1247, 23, 680.2208,-1546.9856,14.8516, -1); // LSPD Arrest
    CreatePickupEx(1247, 23, 1991.7953,-2321.2532,13.5469, -1); // Deliver Arrest
    CreatePickupEx(1210, 23, -71.419654846191,1360.4097900391,1080.2185058594, -1); //Hitman Pickup
    CreatePickupEx(1247, 23, -228.4971 ,985.1687 ,19.6088, -1); // SFPD Arrest
	//CreatePickupEx(1247, 23, -591.0120,440.0535,1345.9948, -1); // SHAFT /arrest
    CreatePickupEx(1247, 23, 2226.8472,2458.2598,-7.4531, -1); // SASD Arrest LV
    CreatePickupEx(1240, 23, -1528.814331, 2540.706054, 55.835937, -1);// Deliverpt (TIERRA ROBADA)
	CreatePickupEx(1240, 23, 1142.4733,-1326.3633,13.6259, -1);// Deliverpt
	CreatePickupEx(1240, 23, 2027.0599,-1410.6870,16.9922, -1);// Deliverpt
	CreatePickupEx(1240, 23, 1227.2339,306.4730,19.7028, -1);// Deliverpt
	CreatePickupEx(1240, 23, -339.2989,1055.8138,19.7392, -1);// Deliverpt
	CreatePickupEx(1240, 23, -2695.5725,639.4147,14.4531, -1); // Deliverpt
	CreatePickupEx(1240, 23, 1165.1564,-1368.8240,26.6502, -1);// Deliverpt
	CreatePickupEx(1240, 23, 2024.5742,-1382.7844,48.3359, -1);// Deliverpt
	CreatePickupEx(1240, 23, 1233.3384,316.4022,24.7578, -1);// Deliverpt
	CreatePickupEx(1240, 23, -334.1560,1051.4434,26.0125, -1);// Deliverpt
	CreatePickupEx(1240, 23, -2656.0339,615.2567,66.0938, -1);// Deliverpt
	CreatePickupEx(1239, 23, 366.54, 159.09, 1008.38, -1); // LICENSES @ CITY HALL
	CreatePickupEx(1247, 23, -2079.6550,-111.7833,982.4117, -1); // Docarrest point
	CreatePickupEx(1247, 23, -2053.8149,-198.9500,15.0703, -1); // Docarrest Point

	// Set in virtual worlds
	CreateDynamic3DTextLabel("/SE \nTo open your locker.", COLOR_DBLUE, 354.37, 173.91, 1008.38+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 20041, 3, -1);
	CreateDynamic3DTextLabel("/SE \nTo open your locker.", COLOR_DBLUE, 1060, 2121.2, 1533.7+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2345, 6, -1); // Government Mansion
	CreateDynamic3DTextLabel("/SASD\nTo open your locker.", COLOR_DBLUE, 327.232757, 306.817230, 999.148437+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 5, -1); // SASD in Fort Carson
//	CreateDynamic3DTextLabel("/arrest\nSAAS Arrest Point", COLOR_DBLUE, 205.5576,1861.6444,13.1406, 20.0, _, _, 1, 0, 0, _, 20.0);

	CreateDynamic3DTextLabel("{FF8000}/loadforklift\nTo load the crate onto your forklift", COLOR_YELLOW, -1107.9978,4244.9966,3.40000010, 20.0, _, _, 1, 0, 0, _, 20.0);

	// SA:PA lables for lockers
	CreateDynamic3DTextLabel("/SAPA\nTo open your locker.", COLOR_DBLUE, 1894.334350,-2292.476562, 1999.371582+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 1, -1); // Hospital

	// FDSA text label for different virtual worlds
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 1, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 3, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 4, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 5, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 6, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 7, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 8, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 9, 1, -1); // Hospital
	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.", COLOR_DBLUE, 1188.5157470703,-1350.9741210938, 2423.2648925781+0.6, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 10, 1, -1); // Hospital

	// SHAFT lockers
	CreateDynamic3DTextLabel("/shaft\nTo open your locker.",0x0B61A4AA,-562.5217,478.1677,1369.4100+0.6,4.0);

	// General text labels
    CreateDynamic3DTextLabel("To pay your tickets or\nrelease your cars, type /dmvmenu",COLOR_YELLOW,833.60, 3.23, 1004.17+0.6,4.0);//
    CreateDynamic3DTextLabel("To change your number type /vipnum",COLOR_YELLOW,2549.548095, 1404.047729, 7699.584472+0.6,4.0);//
    CreateDynamic3DTextLabel("Type /travel\nTo exit the VIP garage with your vehicle",COLOR_YELLOW,-4429.944824, 905.032470, 987.078186+0.5,13.0);// VIP garage travel
    CreateDynamic3DTextLabel("/viplocker\nTo open the VIP locker.",COLOR_YELLOW,2555.747314, 1404.106079, 7699.584472+0.6,4.0);/// VIP locker room
	CreateDynamic3DTextLabel("/getgift\nTo reach inside.",COLOR_YELLOW,2546.611572, 1403.323608, 7700.768066,8.0);/// VIP Lounge
	CreateDynamic3DTextLabel("/doc\nTo open your locker.",COLOR_DBLUE,298.1291809082,-74.630012512207,1001.515625+0.6,4.0);///ng
   	CreateDynamic3DTextLabel("/FBI\nTo open your locker.",COLOR_DBLUE,310.3679,-1537.5204,-45.1338+0.6,4.0);///fbi
   	CreateDynamic3DTextLabel("/FDSA\nTo open your locker.",COLOR_DBLUE,413.79, 2536.79, 10.00+0.6,4.0);///FDSA Sub Station
    CreateDynamic3DTextLabel("/SFPD\nTo open your locker.",COLOR_DBLUE,293.675415, 188.238296, 1007.171875+0.6,4.0);///SFPD (SF)
    CreateDynamic3DTextLabel("/SFPD\nTo open your locker.",COLOR_DBLUE,-1625.9365, 719.1707, 19995.8594+0.6,4.0);///SFPD (SF)
   	CreateDynamic3DTextLabel("/SASD\nTo open your locker.",COLOR_DBLUE,2525.9009,-1655.4312,562.8000+0.6,4.0);///SASD
	CreateDynamic3DTextLabel("/arrest",COLOR_DBLUE,-1606.307861, 673.740539, -5.242187+0.6,4.0);///arrest(SFPD)
   	//CreateDynamic3DTextLabel("/arrest",COLOR_DBLUE,1528.4888,-1677.7632,5.8906+0.6,4.0);///arrest(LSPD)
   	CreateDynamic3DTextLabel("/arrest",COLOR_DBLUE,-228.4971,985.1687,19.6088+0.6,4.0);///arrest(SFPD)
   	CreateDynamic3DTextLabel("/arrest",COLOR_DBLUE,2182.20, 530.32, 1.19+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/arrest",COLOR_DBLUE,598.5661,-607.9127,-14.9744+0.6,4.0);///Arrest(SASD)
	CreateDynamic3DTextLabel("/arrest",COLOR_DBLUE,2226.8472,2458.2598,-7.4531+0.6,4.0);///Arrest(SASD)
	CreateDynamic3DTextLabel("/docarrest",COLOR_DBLUE,-2090.0583,-135.3540,40.1016+0.6,4.0);///Doc Arrest
	CreateDynamic3DTextLabel("/docarrest",COLOR_DBLUE,-2079.6550,-111.7833,982.4117+0.6,4.0);///docarrest /siren
	CreateDynamic3DTextLabel("Factions Duty Point", COLOR_DBLUE, -2043.527832, -189.208435, 985.183105+0.6, 4.0); //
	CreateDynamic3DTextLabel("Factions Duty Point", COLOR_DBLUE, 1112.7, -2055.8, 1409.7+0.6, 4.0); //
	CreateDynamic3DTextLabel("Factions Duty Point", COLOR_DBLUE, 321.43, 303.96, 999.14+0.6, 4.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 2112, 5, -1); //
	CreateDynamic3DTextLabel("/docarrest",COLOR_DBLUE, -2053.8149,-198.9500,15.0703+0.6, 4.0); // DocArrest

   	//CreateDynamic3DTextLabel("/warrantarrest",COLOR_DBLUE,1384.0507,-1688.8254,13.5341+0.6,4.0);///Arrest(warrant)
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,-1528.814331, 2540.706054, 55.835937+0.6,4.0);///Deliverpt (TIERRA ROBADA)
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,1142.4733,-1326.3633,13.6259+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,2027.0599,-1410.6870,16.9922+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,1227.2339,306.4730,19.7028+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,-339.2989,1055.8138,19.7392+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,1165.1564,-1368.8240,26.6502+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,2024.5742,-1382.7844,48.3359+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,1233.3384,316.4022,24.7578+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,-334.1560,1051.4434,26.0125+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliverpt",COLOR_LIGHTRED,-2656.0339,615.2567,66.0938+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("Emergency Room\n/deliverpt",COLOR_DBLUE,-2695.5725,639.4147,14.4531+0.6,4.0);///Deliverpt
   	CreateDynamic3DTextLabel("/deliver",COLOR_DBLUE,1991.7953,-2321.2532,13.5469+0.6,4.0);// Deliver
   	CreateDynamic3DTextLabel("/healme \nTo cure your disease",COLOR_DBLUE,1179.4012451172,-1331.5632324219,2423.0461425781+0.6,4.0);// /healme
   	CreateDynamic3DTextLabel("/buyinsurance \n To buy insurance",COLOR_DBLUE,1169.7209472656,-1348.3218994141,2423.0461425781+0.6,4.0);// Insurance
   	CreateDynamic3DTextLabel("/buyinsurance \n To buy insurance",COLOR_DBLUE,2785.586914, 2400.224853, 1240.531127+0.6,8.0);// Insurance
	CreateDynamic3DTextLabel("Type /getmats from a boat \nto obtain Materials Packages",COLOR_YELLOW,2102.71,-103.97,2.28+0.5,8.0);// Deliver
    //CreateDynamic3DTextLabel("Type /getpizza from a Pizzaboy \nto get pizzas for delivery!",COLOR_YELLOW,2099.2761,-1804.8387,13.5547, 4.0); //getpizza
	CreateDynamic3DTextLabel("Type /getlicense to \nacquire a license.",COLOR_YELLOW,366.54,159.09,1008.38+0.5,8.0);// Licenses.
	//CreateDynamic3DTextLabel("Type /registerplate to\nchange your license plate.",COLOR_YELLOW,366.54,159.09,1008.38+1,8.0);// Licenses.
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,208.8970,-100.3289,1005.2578,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,206.5429,-41.2313,1001.8047,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,209.3064,-8.3033,1005.2109,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,159.6771,-83.2866,1001.8120,8.0);
    CreateDynamic3DTextLabel("/buyclothes\n To change your skin.",COLOR_YELLOW,206.4552,-163.0903,1000.5234,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,206.3253,-100.3268,1005.2578,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,201.0413,-40.1616,1001.8047,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,206.3963,-8.2122,1001.2109,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,162.7706,-83.2726,1001.8047,8.0);
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,2787.095947, 2390.353027, 1240.531127+0.6,4.0); // Gold+ VIP Room
    CreateDynamic3DTextLabel("/buytoys\n To buy some accessories.",COLOR_YELLOW,202.6777,-163.0623,1000.5306,8.0);

    CreateDynamic3DTextLabel("Tank Spawn\nZone",COLOR_YELLOW,286.7334, 2024.3762, 17.6406,10.0);
    CreateDynamic3DTextLabel("Air Vehicle Spawn\nZone", COLOR_YELLOW, 326.2754,1887.7212,17.6566, 10.0);

	// Paintball Arena
	CreateDynamic3DTextLabel("Paintball Rooms\n\nType /joinarena to choose rooms",COLOR_YELLOW,1294.5062,-1445.0599,0.4403+0.5,6.0);

    CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,-1577.085937, 682.506225, 7.187500+0.6,5.0); //SFPD IMPOUND
	CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,797.7496,-617.0283,16.3359+0.6,5.0); //MPS IMPOUND
    CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,2412.3098,-1425.6677,23.9836+0.6,5.0);
    CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,1602.8927,-1608.4335,13.7085+0.6,5.0);
    CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,1354.5469,363.1523,19.8893+0.6,5.0);
	CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,-639.2586,-1240.2565,21.4865+0.6,5.0);
	CreateDynamic3DTextLabel("Impound Yard \nType /impound to impound a vehicle",COLOR_YELLOW,2059.7659,-1856.2783,13.5459+0.6,5.0);
    CreateDynamic3DTextLabel("Type /getmats to purchase material packages",COLOR_YELLOW,-1816.528686, -179.502624, 9.398437+0.6,5.0);
    CreateDynamic3DTextLabel("Type /getmats to purchase material packages",COLOR_YELLOW,-1522.7351, 2587.2612, 55.8359+0.6, 5.0);
	CreateDynamic3DTextLabel("Name Change Point \nType /changename to change your name",COLOR_YELLOW,1154.7295,-1440.2323,15.7969+0.6,18.0); // Namechange at mall

	/* Job's 3D Text */
	CreateDynamic3DTextLabel("Detective Job \nType /join to become one",COLOR_RED,251.99, 117.36, 1003.22+0.5,4.0);// Detective Job (LS)
    CreateDynamic3DTextLabel("Detective Job \nType /join to become one",COLOR_RED,301.042633, 178.700408, 1007.171875+0.5,4.0);// Detective Job (SF)
	//CreateDynamic3DTextLabel("Arms Dealer Job \nType /join to become one",COLOR_RED,1366.4325,-1275.2096,13.5469+0.5,4.0);// Gun Job
    //CreateDynamic3DTextLabel("Arms Dealer Job \nType /join to become one",COLOR_RED,-2623.333984, 209.235931, 4.684767+0.5,4.0);// Gun Job
 	CreateDynamic3DTextLabel("Drug Dealer Job \nType /join to become one",COLOR_RED,2166.3772,-1675.3829,15.0859+0.5,4.0);// Drug Dealer (LS)
    CreateDynamic3DTextLabel("Drug Dealer Job \nType /join to become one",COLOR_RED,-2089.344970, 87.800231, 35.320312+0.5,4.0);// Drug Dealer (SF)
	CreateDynamic3DTextLabel("Bodyguard Job \nType /join to become one",COLOR_RED,2226.1716,-1718.1792,13.5165+0.5,4.0);// Bodyguard (LS)
    CreateDynamic3DTextLabel("Bodyguard Job \nType /join to become one",COLOR_RED,-2269.256103, -158.054321, 35.320312+0.5,4.0);// Bodyguard (SF)
	CreateDynamic3DTextLabel("Lawyer Job \nType /join to become one",COLOR_RED,1380.8955,-1088.6808,27.3844+0.5,4.0);// Lawyer
    //CreateDynamic3DTextLabel("Taxi Job \nType /join to become one",COLOR_RED,1741.6218,-1863.6486,13.5748+0.5,4.0);// Taxi Driver (LS)
    //CreateDynamic3DTextLabel("Taxi Job \nType /join to become one",COLOR_RED,-1981.144775, 133.063293, 27.687500+0.5,4.0);// Taxi Driver (SF)
    CreateDynamic3DTextLabel("Bodyguard Job \nType /join to become one",COLOR_RED,1224.13, 267.98, 19.55+0.5,4.0);// Bodyguard (Montgomery)
    CreateDynamic3DTextLabel("Mechanic Job \nType /join to become one",COLOR_RED,1919.834838,-1788.422973,13.390598+0.5,4.0);// Mechanic (Blueberry)
    CreateDynamic3DTextLabel("Mechanic Job \nType /join to become one",COLOR_RED,-2032.601928, 143.866592, 28.835937+0.5,4.0);// Mechanic (SF)
	CreateDynamic3DTextLabel("Whore Job \nType /join to become one",COLOR_RED,1215.1304,-11.8431,1000.9219+0.5,4.0);// Whore
    CreateDynamic3DTextLabel("Boxer Job \nType /join to become one",COLOR_RED,766.0804,14.5133,1000.7004+0.5,4.0);// Boxer
    CreateDynamic3DTextLabel("Boxer Job \nType /join to become one",COLOR_RED,758.98,-60.32,1000.78+0.5,4.0);// Boxer2
    CreateDynamic3DTextLabel("Drug Smuggler Job \nType /join to become one",COLOR_RED,2354.2808,-1169.2959,28.0066+0.5,4.0);// Drug Smuggler
    CreateDynamic3DTextLabel("Bodyguard Job \nType /join to become one",COLOR_RED,1099.73,-1504.67,15.800+0.5,4.0);// Bodyguard (MALL GYM)
    CreateDynamic3DTextLabel("Craftsman Job \nType /join to become one",COLOR_RED,2195.8335,-1973.0638,13.5589+0.5,4.0);// Craftsman (JUNKYARD LS)
	CreateDynamic3DTextLabel("Bartender Job \nType /join to become one",COLOR_RED,502.6696,-11.6603,1000.6797+0.5,4.0);// Bartender (Alhambra)
    CreateDynamic3DTextLabel("Trucker Job \nType /join to become one",COLOR_RED,2453.7036,-2117.8679,13.5469+0.5,4.0);// Trucker Job (SF)
    //CreateDynamic3DTextLabel("Pizza Boy Job \nType /join to become one",COLOR_RED,2107.5869,-1785.0497,13.3870+0.5,4.0);// Pizza Boy Job (SF)
	//CreateDynamic3DTextLabel("Street Cleaner Job \nType /join to become one",COLOR_RED,1626.4592, -1883.0827, 13.5523+0.5,4.0);// Street Cleaner Job (LS)

    //-----------------------BEGIN OBJECTS-----------------------------------//
    // Cage offsets for attaching to the main wheel
	new Float:gFerrisCageOffsets[10][3] = {
	{0.0699, 0.0600, -11.7500},
	{-6.9100, -0.0899, -9.5000},
	{11.1600, 0.0000, -3.6300},
	{-11.1600, -0.0399, 3.6499},
	{-6.9100, -0.0899, 9.4799},
	{0.0699, 0.0600, 11.7500},
	{6.9599, 0.0100, -9.5000},
	{-11.1600, -0.0399, -3.6300},
	{11.1600, 0.0000, 3.6499},
	{7.0399, -0.0200, 9.3600}
	};

	gFerrisWheel = CreateObject( 18877, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2],
	  							 0.0, 0.0, -270.0, 300.0 );
	CreateObject( 18878, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2],
	  							 0.0, 0.0, -270.0, 300.0 );
 	for(new x;x<10;x++)
    {
        gFerrisCages[x] = CreateObject( 19316, gFerrisOrigin[0], gFerrisOrigin[1], gFerrisOrigin[2],
	  							 0.0, 0.0, -270.0, 300.0 );

        AttachObjectToObject( gFerrisCages[x], gFerrisWheel,
							  gFerrisCageOffsets[x][0],
							  gFerrisCageOffsets[x][1],
	  						  gFerrisCageOffsets[x][2],
							  0.0, 0.0, -270.0, 0 );
	}

	SetTimer("RotateWheel",3*1000,0);

	SFPDGate1 = CreateDynamicObject(968,-1572.19482422,658.81811523,6.83125353,0.00000000,270.00000000,269.99444580); //CLOSE
	SFPDGate2 = CreateDynamicObject(968,-1701.42626953,687.55645752,24.58090591,0.00000000,270.00000000,89.98718262); //CLOSE
	SFPDGate3 = CreateDynamicObject(10184,-1631.58496094,688.43847656,8.70806313,0.00000000,0.00000000,90.00000000); //CLOSE
	nationalGATE = CreateDynamicObject(2927,211.86804199,1875.72998047,13.93899250,0.00000000,0.00000000,179.95495605); //object(a51_blastdoorr) (1)
	nationalGATE2 = CreateDynamicObject(2929,215.96099854,1875.70983887,13.93899250,0.00000000,0.00000000,179.85498047); //object(a51_blastdoorl) (1)
    SASDGate1 = CreateDynamicObject(968, 2238.19, 2450.39, 10.6, 0, 90, 90); //CLOSED
    SASDGate2 = CreateDynamicObject(16775, 2335, 2443.45, 6, 0, 0, 60); //CLOSED
    SASDGate3 = CreateDynamicObject(16775, 2294, 2502, 3.26, 0, 0, 90); //CLOSED
	eastlobby1 = CreateDynamicObject(1536,253.14941406,110.59960938,1002.21502686,0.00000000,0.00000000,270.00000000,-1,10,-1,100.0); // East lobby door (moves north)
	eastlobby2 = CreateDynamicObject(1536,253.18457031,107.59960938,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0); // East lobby door (moves south)
	westlobby1 = CreateDynamicObject(1536,239.71582031,116.09179688,1002.21502686,0.00000000,0.00000000,90.00000000,-1,10,-1,100.0); // West lobby door (moves north)
	westlobby2 = CreateDynamicObject(1536,239.67968750,119.09960938,1002.21502686,0.00000000,0.00000000,269.98901367,-1,10,-1,100.0); // West lobby door (moves south)
	locker1 = CreateDynamicObject(1536,267.29980469,112.56640625,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0); // Locker door (moves east)
	locker2 = CreateDynamicObject(1536,264.29980469,112.52929688,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0); // Locker door (moves west)
	cctv1 = CreateDynamicObject(1536,264.44921875,115.79980469,1003.61718750,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0); // CCTV door (moves west)
	cctv2 = CreateDynamicObject(1536,267.46875000,115.83691406,1003.61718750,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0); // CCTV door (moves east)
	chief1 = CreateDynamicObject(1536,229.59960938,119.50000000,1009.21875000,0.00000000,0.00000000,0.00000000,-1,10,-1,100.0); // innermost chief's door
	chief2 = CreateDynamicObject(1536,232.59960938,119.53515625,1009.21875000,0.00000000,0.00000000,179.99450684,-1,10,-1,100.0); // outermost chief's door (both move west)
	eastin = CreateButton(253.44921875,110.59960938,1003.79998779,90.00000000); //object(fire_break) (1)
	westout = CreateButton(239.79492188,116.18457031,1003.87286377,90.00000000); //object(fire_break) (2)
	westin = CreateButton(239.32031250,116.27441406,1003.87286377,270.00000000); //object(fire_break) (3)
	eastout = CreateButton(253.00000000,110.59960938,1003.79998779,270.00000000); //
	elevator = CreateButton(275.83984375,120.94921875,1005.12280273,90.00000000); //object(kmb_keypad) (1)
	cctvin = CreateButton(264.55566406,115.97949219,1005.12280273,179.99450684); //object(kmb_keypad) (2)
	cctvout = CreateButton(264.55566406,115.69531250,1005.12280273,0.00000000); //object(kmb_keypad) (3)
	lockerin = CreateButton(267.21679688,112.40917969,1005.12280273,0.00000000); //object(kmb_keypad) (4)
	lockerout = CreateButton(267.21679688,112.66992188,1005.12280273,179.99450684); //object(kmb_keypad) (5)
	chiefout = CreateButton(232.50000000,119.38476562,1010.81384277,0.00000000); //object(sec_keypad) (2)
	chiefin = CreateButton(229.67089844,119.66992188,1010.81384277,179.99450684); //object(sec_keypad) (1)
	roofkey = CreateButton(1565.93652344,-1667.35058594,28.85165977,179.99450684); //object(sec_keypad) (3)
	garagekey = CreateButton(1567.14550781,-1689.62011719,6.69999981,0.00000000); //object(sec_keypad) (4)
 	sasdbtn1 = CreateButton(2514.59179688,-1697.05761719,563.19116211,0.00000000); //SASD West
	sasdbtn2 = CreateButton(2522.82299805,-1660.15917969,563.15893555,0.00000000); //SASD East
	sasdbtn3 = CreateButton(2525.09863281,-1697.05761719,563.16284180,0.00000000); //SASD R4
	sasdbtn4 = CreateButton(2519.84375000,-1697.00659180,563.20904541,0.00000000); //SASD R5
	sasdbtn5 = CreateButton(2514.77880859,-1660.15917969,563.16925049); //SASD R6
	PrisonButtons[0] = CreateButton(-2097, -191.100006, 996.299987, 90); // Control Room
	PrisonButtons[1] = CreateButton(-2092.550048, -204, 996.099975, 0); // Control Room Door 2
	PrisonButtons[2] = CreateButton(-2088.530029, -213, 996, 90); //Control Room Door 1
	PrisonButtons[3] = CreateButton(-2037, -191, 992.200012, 270); // Security Room
	PrisonButtons[4] = CreateButton(-2050.5, -205.880004, 985.599975, 0); // Staff Lounge
	PrisonButtons[5] = CreateButton(-2046.599975, -194, 985.700012, 270); // Duty Room
	PrisonButtons[6] = CreateButton(-2092.772949, -193.570007, 979.299987, 0); // Security Room 2
 	PrisonButtons[7] = CreateButton( -2054.699951, -84, 35.7, 270);
 	PrisonButtons[8] = CreateButton(-2058, -146.75, 988.7,270);
	SFPDButton[0] = CreateButton(-1635.12597656,708.45117188,19996.32812500, 180.0);
	SFPDButton[1] = CreateButton(-1635.18176270,687.56250000,19996.32812500, 180.0);
	SFPDButton[2] = CreateButton(-1636.74023438,687.56250000,19996.32812500, 180.0);
	SFPDButton[3] = CreateButton(-1636.29687500,708.36035156,19996.32812500, 270.0);
	SFPDButton[4] = CreateButton(-1627.03222656,712.46093750,19996.32812500, 0.0);
	SFPDButton[5] = CreateButton(-1627.03295898,712.63281250,19996.32812500, 180.0);
	SFPDButton[6] = CreateButton(-1614.06738281,683.54052734,19990.56250000, 270.0);
	SFPDButton[7] = CreateButton(-1612.91674805,683.60369873,19990.56250000, 0.0);
	SFPDButton[8] = CreateButton(-1632.86157227,712.62530518,19996.32812500, 180.0);
	SFPDButton[9] = CreateButton(-1632.861328125, 712.47210693359, 19996.328125, 0.0);
	ngeveryone = CreateButton(-313.20410156,1874.78515625,34.50402832, 270.26916504);
	NGGate = CreateDynamicObject(988, 96.810302, 1920.160156, 17.299999, 0.000000, 0.000000, 270.000000); // NG GATE (CLOSED)
	FBIGate1 = CreateDynamicObject(971, 320.40628051758, -1487.9129638672, 26.900407791138, 0.000000, 0.000000, 144.85501098633); //
    FBIGate2 = CreateDynamicObject(971, 283.96463012695, -1543.154296875, 27.167940139771, 0.000000, 0.000000, 326.25500488281); //
	LSPDGate = CreateDynamicObject(968, 1544.6943359375, -1630.73046875, 13.27956199646, 0.000000, 90, 90); //
 	LSPDGate2 = CreateDynamicObject(971, 1588.6428222656, -1638.02734375, 15.240161895752, 0, 0, 181.03271484375);
	TRIGate = CreateDynamicObject(969, 1627.21875, -1852.6630859375, 12.535882949829, 0.000000, 0.000000, 179.99450683594); //
	lspddoor1 = CreateDynamicObject(1569, 246.35150146484, 72.547714233398, 1002.640625, 0.000000, 0.000000, 0.000000); //
	lspddoor2 = CreateDynamicObject(1569, 245.03300476074, 72.568511962891, 1002.640625, 0.000000, 0.000000, 0.000000); //
 	NGGate1 = CreateDynamicObject(14464,-292.82714844,1872.89453125,30.15856934,0.00000000,0.00000000,0.00000000); //object(gs_cages) (1)
	FBILobbyLeftBTN[0] = CreateButton(297.66613770,-1498.67749023,-44.59006119,0.79565430); //Lobby Button Left
	FBILobbyLeftBTN[1] = CreateButton(297.24850464,-1498.23107910,-44.59006119,180); //Lobby Button Left
	FBILobbyRightBTN[0] = CreateButton(300.05300903,-1521.40747070,-44.59006119,180); //Lobby Button Right
	FBILobbyRightBTN[1] = CreateButton(300.16033936,-1521.84387207,-44.59006119,0); //Lobby Button Right
	FBIPrivateBTN[0] = CreateButton(298.87384033,-1495.87316895,-27.32773209,270); //Private Office Button
	FBIPrivateBTN[1] = CreateButton(300.49453735,-1495.33837891,-27.28091812,180.49487305); //Private Office Button
	FBIPrivate[0] = CreateDynamicObject(1536,299.29986572,-1492.82666016,-28.73300552,0.00000000,0.00000000,270.00000000,1324123, .interiorid = 1); //Private Office Door Left
	FBIPrivate[1] = CreateDynamicObject(1536,299.33737183,-1495.83911133,-28.73300552,0.00000000,0.00000000,90.00000000,1324123, .interiorid = 1); //Private Office Door Right
	FBILobbyLeft = CreateDynamicObject(1536,295.40136719,-1498.43457031,-46.13965225,0.00000000,0.00000000,0.00000000,1324123, .interiorid = 1); //Lobby Door Left
	FBILobbyRight = CreateDynamicObject(1536,302.39355469,-1521.62988281,-46.13965225,0.00000000,0.00000000,179.99450684,1324123, .interiorid = 1); //Lobby Door Right
    CellGates[0] = CreateDynamicObject(10252,-2080.28613281,-193.01757812,992.19836426,0.00000000,0.00000000,179.99450684, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[2] = CreateDynamicObject(10252,-2068.00195312,-193.01757812,992.19836426,0.00000000,0.00000000,179.99450684, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[3] = CreateDynamicObject(10252,-2063.56738281,-191.64550781,992.19836426,0.00000000,0.00000000,0.00000000, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[4] = CreateDynamicObject(10252,-2055.99511719,-193.01757812,992.19836426,0.00000000,0.00000000,179.99450684, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[5] = CreateDynamicObject(10252,-2052.22460938,-191.64550781,992.19836426,0.00000000,0.00000000,0.00000000, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[11] = CreateDynamicObject(10252,-2084.99902344,-207.03710938,992.19836426,0.00000000,0.00000000,179.99450684, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[10] = CreateDynamicObject(10252,-2081.52539062,-205.66894531,992.19836426,0.00000000,0.00000000,0.00000000, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[8] = CreateDynamicObject(10252,-2069.53710938,-205.66894531,992.19836426,0.00000000,0.00000000,0.00000000, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[9] = CreateDynamicObject(10252,-2074.00585938,-207.03710938,992.19836426,0.00000000,0.00000000,179.99450684, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[6] = CreateDynamicObject(10252,-2057.59765625,-205.66894531,992.19836426,0.00000000,0.00000000,0.00000000, .interiorid = 10); //object(china_town_gateb)(3)
    CellGates[7] = CreateDynamicObject(10252,-2061.96289062,-207.03710938,992.19836426,0.00000000,0.00000000,179.99450684, .interiorid = 10); //object(china_town_gateb)(3)
    BlastDoors[1] = CreateDynamicObject(2952,-2088.76562500,-211.33984375,994.66918945,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[6] = CreateDynamicObject(2952,-2088.76562500,-209.21093750,994.66918945,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(2)
    BlastDoors[0] = CreateDynamicObject(2952,-2095.10156250,-203.91210938,994.66918945,0.00000000,0.00000000,90.00000000); //prisongate1
    BlastDoors[2] = CreateDynamicObject(2952,-2048.29296875,-205.54394531,990.45825195,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[7] = CreateDynamicObject(2952,-2048.29296875,-207.67382812,990.45825195,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[3] = CreateDynamicObject(2952,-2041.79785156,-195.64550781,990.45825195,0.00000000,0.00000000,179.99450684); //object(kmb_gimpdoor)(1)
    BlastDoors[8] = CreateDynamicObject(2952,-2041.79687500,-197.77246094,990.45825195,0.00000000,0.00000000,179.99450684); //object(kmb_gimpdoor)(1)
    BlastDoors[4] = CreateDynamicObject(2952,-2041.78613281,-211.28515625,984.02539062,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[9] = CreateDynamicObject(2952,-2041.78808594,-209.15917969,984.02539062,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[5] = CreateDynamicObject(2952,-2053.92187500,-205.46679688,977.75732422,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[10] = CreateDynamicObject(2952,-2053.92187500,-207.59570312,977.75732422,0.00000000,0.00000000,0.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[11] = CreateDynamicObject(2952,-2050.50097656,-205.82617188,984.02539062,0.00000000,0.00000000,90.00000000); //object(kmb_gimpdoor)(1)
    BlastDoors[12] = CreateDynamicObject(971,-2084.14086914,-189.68321228,997.97924805,0.00000000,0.00000000,0.00000000); //object(fence-closed)
    BlastDoors[13] = CreateDynamicObject(971,-2070.31152344,-111.42968750,984.64465332,0.00000000,0.00000000,90.00000000); //object(subwaygate)(3)
    BlastDoors[14] = CreateDynamicObject(971, -2052.199218, -138.100006, 36.90001, 0.00000000, 0.00000000, 180.0000000); //object(cj_phone_kiosk)(1)
    BlastDoors[15] = CreateDynamicObject(971, -2052.199218, -118.800003, 36.900001, 0.00000000, 0.00000000, 180.000000); //object(cj_phone_kiosk)(1)
    BlastDoors[16] = CreateDynamicObject(1569, -2057.9, -144.905, 987.24 ,0, 0.00000000, 270.0);
	SFPDObject[0] =	CreateDynamicObject(976,-1636.02539062,701.49707031,19994.54101562,0.00000000,0.00000000,90.00000000, .interiorid = 3); //object(phils_compnd_gate) (1)
	SFPDObject[1] =	CreateDynamicObject(976,-1635.99414062,696.53320312,19994.55078125,0.00000000,0.00000000,270.00000000, .interiorid = 3); //object(phils_compnd_gate) (2)
	SFPDObject[2] =	CreateDynamicObject(1569,-1625.28808594,712.56250000,19994.85937500,0.00000000,0.00000000,179.99450684, .interiorid = 3); //object(adam_v_door) (2)
	SFPDObject[3] =	CreateDynamicObject(1569,-1613.92871094,681.78125000,19989.05468750,0.00000000,0.00000000,90.00000000, .interiorid = 3); //object(adam_v_door) (4)
	SFPDObject[4] =	CreateDynamicObject(1569,-1634.79492188,712.56250000,19994.85937500,0.00000000,0.00000000,0.00000000, .interiorid = 3); //object(adam_v_door) (7)

    CreatePickupEx(1239, 23, 2453.7036,-2117.8679,13.5469); //Trucker registration
    CreatePickupEx(1239, 23, 2107.5869,-1785.0497,13.3870); //Pizza job registration
	CreatePickupEx(1239, 23, 251.99, 117.36, 1003.22); //Detective Registration
	CreatePickupEx(1239, 23, 1380.8955,-1088.6808,27.3844); //Lawyer Registration
	CreatePickupEx(1239, 23, 1215.1304,-11.8431,1000.9219); //Whore Registration
	CreatePickupEx(1239, 23, 2166.3772,-1675.3829,15.0859); //DrugDealer Registration
	CreatePickupEx(1239, 23, 2226.1716,-1718.1792,13.5165); //BodyGuard Registration (LS)
	CreatePickupEx(1239, 23, -2269.256103, -158.054321, 35.320312); //BodyGuard Registration (SF)
	CreatePickupEx(1239, 23, 1224.13, 267.98, 19.55); //Bodyguard (Montgomery) Registration
	CreatePickupEx(1239, 23, 1919.834838, -1788.422973, 13.390598); //CarMechanic (Blueberry) Registration
	CreatePickupEx(1239, 23, -2032.601928, 143.866592, 28.835937); //CarMechanic (SF) Registration
	CreatePickupEx(1239, 23, 1099.73,-1504.67,15.800); // BodyGuard Registration (MALL GYM)
	CreatePickupEx(1239, 23, 1366.4325,-1275.2096,13.5469); //ArmsDealer Registration (LS)
	CreatePickupEx(1239, 23, -2623.333984, 209.235931, 4.684767); //ArmsDealer Registration (SF)
	CreatePickupEx(1239, 23, 2195.8335,-1973.0638,13.5589); //Craftsman Registration
	CreatePickupEx(1239, 23, 502.6696,-11.6603,1000.6797); //Bartender Registration
	CreatePickupEx(1239, 23, 766.0804,14.5133,1000.7004); //Boxer Registration
	CreatePickupEx(1239, 23, 758.98,-60.32,1000.78); //Boxer Registration2
	CreatePickupEx(1239, 23, 1741.6218,-1863.6486,13.5748); //TaxiDriver Registration (LS)
	CreatePickupEx(1239, 23, -1981.144775, 133.063293, 27.687500); //TaxiDriver Registration (SF)
	CreatePickupEx(371, 23, 1544.2,-1353.4,329.4); //LS towertop
	CreatePickupEx(371, 23, 1536.0, -1360.0, 1150.0); //LS towertop
	CreatePickupEx(1242, 23, 1527.5,-12.1,1002.0); //binco armor
	CreatePickupEx(1240, 23, 279.3000,1853.5619,8.7649); //area51 health

	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	SetWorldTime(tmphour);

	EventKernel[EventRequest] = INVALID_PLAYER_ID;
	EventKernel[EventCreator] = INVALID_PLAYER_ID;
	for(new x; x < sizeof(EventKernel[EventStaff]); x++) {
		EventKernel[EventStaff][x] = INVALID_PLAYER_ID;
	}

	//SetTimer("SyncTurfWarsMiniMap", 2500, 1);


	gWeather = random(19) + 1;
	if(gWeather == 1) gWeather=10;
	SetWeather(gWeather);
    ManualVehicleEngineAndLights();

//	SetTimer("WarmupLock", 15000, 0);
	//SetTimer("MailDeliveryTimer", 60000, 1);
	printf("Evolution Roleplay Server has fully loaded.");
	return true;
}

stock GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(new x: Player)
	{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
	}
	return player;
}

forward SyncPlayerTime(playerid);
public SyncPlayerTime(playerid)
{
	SetPlayerTime(playerid, hour, minuite);
	return 1;
}

forward SyncMinTime();
public SyncMinTime()
{
	foreach(new i: Player)
	{
	    if(GetPlayerVirtualWorld(i) == 133769)
		{
		    SetPlayerWeather(i, 45);
			SetPlayerTime(i, 0, 0);
		}
		else
		{
			SetPlayerTime(i, hour, minuite);
		}
	}
	return 1;
}

forward SyncTime();
public SyncTime()
{
	new string[128];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
	    switch(tmphour) {
	        case 0..2: NextDrawing = 3;
	        case 3..5: NextDrawing = 6;
	        case 6..8: NextDrawing = 9;
	        case 9..11: NextDrawing = 12;
	        case 12..14: NextDrawing = 15;
	        case 15..17: NextDrawing = 18;
	        case 18..20: NextDrawing = 21;
	        case 21..23: NextDrawing = 0;
	    }
	    if(tmphour == 3 || tmphour == 6 || tmphour == 9 || tmphour == 12 || tmphour == 15 || tmphour == 18 || tmphour == 21 || tmphour == 0)
		{
			PrepareLotto();
		}
		else
		{
		    if(SpecLotto) {
		        format(string, sizeof(string), "Special Lottery: Remember to buy a lottery ticket at a 24/7. Next drawing is at %i:00, tickets sold %i, and total jackpot is %i", NextDrawing, TicketsSold, Jackpot);
				SendClientMessageToAllEx(COLOR_WHITE, string);
		        format(string, sizeof(string), "Special Prize: %s", LottoPrize);
				SendClientMessageToAllEx(COLOR_WHITE, string);
		    }
		    else {
		    	format(string, sizeof(string), "Lottery: Remember to buy a lottery ticket at a 24/7. Next drawing is at %i:00, tickets sold %i, and total jackpot is %i (/lottoinfo)", NextDrawing, TicketsSold, Jackpot);
				SendClientMessageToAllEx(COLOR_WHITE, string);
			}
		}
		WeatherCalling += random(5) + 1;
		if(WeatherCalling > 20)
		{
		    WeatherCalling = 0;
		    gWeather = random(19) + 1;
		    if(gWeather == 1) gWeather=10;
		    SetWeather(gWeather);
		}
		format(string, sizeof(string), "The time is now %d:00.",tmphour);
		SendClientMessageToAllEx(COLOR_WHITE,string);


		ghour = tmphour;
		TotalUptime += 1;
		GiftAllowed = 1;

		foreach(new i: Player) if(PlayerInfo[i][pLevel] <= 5) {
			SendClientMessageEx(i,COLOR_LIGHTBLUE,"Need help or some information doing something? use '/requesthelp' to call an Junior Administrator!");
		}

		SetWorldTime(tmphour);

		for (new x = 0; x < MAX_POINTS; x++)
		{
			Points[x][Announced] = 0;
			if (Points[x][Vulnerable] > 0)
			{
				Points[x][Vulnerable]--;
				UpdatePoints();
			}
			if (Points[x][Vulnerable] == 0 && Points[x][Type] >= 0 && Points[x][Announced] == 0 && Points[x][ClaimerId] == INVALID_PLAYER_ID)
			{
				format(string, sizeof(string), "%s has become available for capture.", Points[x][Name]);
				SendClientMessageToAllEx(COLOR_YELLOW, string);
				//SetPlayerCheckpoint(i, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz], 3);
				ReadyToCapture(x);
				Points[x][Announced] = 1;
			}
		}
		Misc_Save();
		FMemberCounter(); // Family member counter (requested by game affairs to track gang activity)

		for(new i = 0; i < MAX_TURFS; i++)
		{
			if(TurfWars[i][twVulnerable] > 0)
			{
			    TurfWars[i][twVulnerable]--;
			    if(TurfWars[i][twVulnerable] == 0)
			    {
			    	if(TurfWars[i][twOwnerId] != -1)
			    	{
			        	format(string,sizeof(string),"%s that you currently own is vulnerable for capture!",TurfWars[i][twName]);
			        	SendNewFamilyMessage(i, COLOR_YELLOW, string);
			    	}
				}
			}
		}

		for(new i = 0; i < MAX_FAMILY; i++)
		{
		    if(FamilyInfo[i][FamilyTurfTokens] < 24)
		    {
		        FamilyInfo[i][FamilyTurfTokens]++;
		        switch(FamilyInfo[i][FamilyTurfTokens])
		        {
					case 12:
					{
		        		SendNewFamilyMessage(i, COLOR_WHITE, "Your family/gang now has 1 Turf Token, you may /claim to use it.");
					}
					case 24:
					{
					    SendNewFamilyMessage(i, COLOR_WHITE, "Your family/gang now has 2 Turf Tokens, you may /claim to use them.");
					}
		        }
		    }
		}
		SaveFamilies();
	}
}

PayDay(i) {

	new
		string[128],
		interest;

 	if(PlayerInfo[i][pLevel] > 0) {
		if(GetPVarType(i, "debtMsg")) {
			if(GetPlayerCash(i) < 0 && PlayerInfo[i][pJailTime] < 1 && !IsACop(i) && PlayerInfo[i][pWantedLevel] < 6) {
				format(string,sizeof(string),"You're failing to pay your debt of $%d - now the police are on the look out for you.",GetPlayerCash(i));
				SendClientMessageEx(i, COLOR_LIGHTRED, string);
				PlayerInfo[i][pCrimes]++;
				SetPlayerWantedLevel(i, ++PlayerInfo[i][pWantedLevel]);
			}
			else DeletePVar(i, "debtMsg");
		}

		if(0 <= PlayerInfo[i][pRenting] < sizeof HouseInfo) {
			if(HouseInfo[PlayerInfo[i][pRenting]][hRentFee] > PlayerInfo[i][pAccount]) {
				PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
				SendClientMessageEx(i, COLOR_WHITE, "You have been evicted from your residence for failing to pay rent fees.");
			}
			else {
				HouseInfo[PlayerInfo[i][pRenting]][hSafeMoney] += HouseInfo[PlayerInfo[i][pRenting]][hRentFee];
				PlayerInfo[i][pAccount] -= HouseInfo[PlayerInfo[i][pRenting]][hRentFee];
			}
		}
		if(PlayerInfo[i][pConnectSeconds] >= 3600) {
			/* PlayerInfo[i][pHours]++;

			if(PlayerInfo[i][pHours] == 5) {
	    		SendClientMessageEx(i, COLOR_WHITE, "Congratulations you have played 5 hours today and have been awarded a free object of your choosing.");
	    		SendClientMessageEx(i, COLOR_WHITE, "You must claim this prize now by placing it into an empty slot or overwriting another toy. You forfeit the prize if you cancel.");
        		ShowPlayerDialog(i, DIALOG_TOYREWARDS, DIALOG_STYLE_LIST, "Toy Rewards", "Walking Cane\nMonocle\nMustache\nScarf\nGas Mask", "OK", "Cancel");
			}
			else if(PlayerInfo[i][pHours] > 5) {
	    		SendClientMessageEx(i, COLOR_RED, "You have already played 5 hours today. You are allowed one free object on Saturday and Sunday (5 hours each day).");
	    		format(string, sizeof(string), "You have played %f hours this month, remember once you reach 150 hours you will become a member of the Dedicated Player Circle!", PlayerInfo[i][pRewardHours]);
				SendClientMessageEx(i, COLOR_RED, string);
			}*/

			if(GetPVarType(i, "AdvisorDuty")) {
				PlayerInfo[i][pDutyHours]++;
			}
			if(SpecTimer) AddSpecialToken(i);
			SendClientMessageEx(i, COLOR_WHITE, "________ BANK STATEMENT ________");
			format(string, sizeof(string), "  Paycheck: $%d  |  Tax: $%d (%d percent)", PlayerInfo[i][pPayCheck], (PlayerInfo[i][pPayCheck] / 100) * TaxValue, TaxValue);
			SendClientMessageEx(i, COLOR_GRAD1, string);
			interest = (PlayerInfo[i][pAccount] + 1) / 1000;

			switch(PlayerInfo[i][pDonateRank]) {
				case 0: {
					if(interest > 50000) interest = 50000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent (50k max)", PlayerInfo[i][pAccount]);
					SendClientMessageEx(i, COLOR_GRAD1, string);
				}
				case 1: {
					if(interest > 100000) interest = 100000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Bronze VIP: 100k max)", PlayerInfo[i][pAccount]);
					SendClientMessageEx(i, COLOR_GRAD1, string);
				}
				case 2:	{
					if(interest > 150000) interest = 150000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Silver VIP: 150k max)", PlayerInfo[i][pAccount]);
					SendClientMessageEx(i, COLOR_GRAD1, string);
				}
				case 3: {
					if(interest > 200000) interest = 200000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Gold VIP: 200k max)", PlayerInfo[i][pAccount]);
					SendClientMessageEx(i, COLOR_GRAD1, string);
				}
				case 4, 5: {
					if(interest > 250000) interest = 250000;
					format(string, sizeof(string), "  Balance: $%d  |  Interest rate: 0.1 percent {FFFF00}(Platinum VIP: 250k max)", PlayerInfo[i][pAccount]);
					SendClientMessageEx(i, COLOR_GRAD1, string);
				}
			}
			if(PlayerInfo[i][pTaxiLicense] == 1) {
				PlayerInfo[i][pAccount] -= (PlayerInfo[i][pPayCheck] / 100) * 5;
				Tax += (PlayerInfo[i][pPayCheck] / 100) * 5;
				format(string, sizeof(string), "  Taxi licensing fee (5 percent): $%d", (PlayerInfo[i][pPayCheck] / 100) * 5);
				SendClientMessageEx(i, COLOR_GRAD2, string);
			}
			PlayerInfo[i][pAccount] -= (PlayerInfo[i][pPayCheck] / 100) * TaxValue;
			Tax += (PlayerInfo[i][pPayCheck] / 100) * TaxValue;
			PlayerInfo[i][pAccount] += interest;
			format(string, sizeof(string), "  Interest gained: $%d", interest);
			SendClientMessageEx(i, COLOR_GRAD3, string);
			SendClientMessageEx(i, COLOR_GRAD4, "______________________________________");
			format(string, sizeof(string), "  New balance: $%d  |  Rent paid: $%d", PlayerInfo[i][pAccount], (0 <= PlayerInfo[i][pRenting] < sizeof HouseInfo) ? (HouseInfo[PlayerInfo[i][pRenting]][hRentFee]) : (0));
			SendClientMessageEx(i, COLOR_GRAD5, string);

			GivePlayerCash(i, PlayerInfo[i][pPayCheck]);
			if((1 <= PlayerInfo[i][pMember] <= 12 || PlayerInfo[i][pMember] == 16 || PlayerInfo[i][pMember] == 17) && PlayerInfo[i][pMember] != 8 && 0 <= PlayerInfo[i][pRank] <= 6) {
				if(Tax > 0) {
					Tax -= FactionPay[PlayerInfo[i][pMember] - 1][PlayerInfo[i][pRank]];
					GivePlayerCash(i, FactionPay[PlayerInfo[i][pMember] - 1][PlayerInfo[i][pRank]]);
					format(string,sizeof(string),"  Government pay: $%d", FactionPay[PlayerInfo[i][pMember] - 1][PlayerInfo[i][pRank]]);
					SendClientMessageEx(i, COLOR_GRAD2, string);
				}
				else SendClientMessageEx(i,COLOR_RED,"The government is in debt; no money is available for pay.");
			}
			if(PlayerInfo[i][pDonateRank] == 4 || PlayerInfo[i][pDonateRank] == 5)
		    {
				PlayerInfo[i][pTokens] += 2;
				SendClientMessageEx(i, COLOR_YELLOW, "  VIP: You have received 2 tokens.");
			}
			if(PlayerInfo[i][pDonateRank] == 1 || PlayerInfo[i][pDonateRank] == 2 || PlayerInfo[i][pDonateRank] == 3)
			   {
				PlayerInfo[i][pTokens] += 1;
				SendClientMessageEx(i, COLOR_YELLOW, "VIP: You have received 1 token.");
			}

			GameTextForPlayer(i, "~y~PayDay~n~~w~Paycheck", 5000, 1);
			//SendAudioToPlayer(i, 63, 100);
			PlayerInfo[i][pConnectSeconds] = 0;
			PlayerInfo[i][pPayCheck] = 0;
			if(++PlayerInfo[i][pConnectHours] == 2) {
				SendClientMessageEx(i, COLOR_LIGHTRED, "You may now possess/use weapons!");
			}
			if(PlayerInfo[i][pDonateRank] > 0 && ++PlayerInfo[i][pPayDayHad] >= 5) {
				PlayerInfo[i][pExp]++;
				PlayerInfo[i][pPayDayHad] = 0;
			}
			if(iRewardPlay) {
			    new
					szFileStr[32],
					iPos,
					iTime = gettime() - 5184000,
					File: fDedicated = fopen("RewardDedicated.cfg", io_read);

				while(fread(fDedicated, szFileStr)) {
					iPos = strfind(szFileStr, "|");
					if(strval(szFileStr[iPos + 1]) < iTime && strcmp(szFileStr, GetPlayerNameEx(i), false, strlen(GetPlayerNameEx(i)))==0) {
						szFileStr[iPos] = 0;
                        SetPVarInt(i, "DeleteDedicated", 1);
					}
				}
				fclose(fDedicated);
				if(GetPVarType(i, "DeleteDedicated"))
				{
				    new File:handle, File:ftmp;
   					handle = fopen("RewardDedicated.cfg",io_read);
   					ftmp = fopen("RewardDedicated.temp",io_write);
   					while(fread(handle,string))
   					if(strfind(string,GetPlayerNameEx(i)) == -1)
    					fwrite(ftmp,string);
					fclose(handle);
					fclose(ftmp);
					handle = fopen("RewardDedicated.cfg",io_write);
					ftmp = fopen("RewardDedicated.temp",io_read);
					while(fread(ftmp,string))
						fwrite(handle,string);
 					fclose(handle);
 					fclose(ftmp);
 					fremove("RewardDedicated.temp");
 					DeletePVar(i, "DeleteDedicated");
				}
				switch(floatround(++PlayerInfo[i][pRewardHours])) {
					case 10, 20, 40, 50: {
						GiftPlayer(MAX_PLAYERS, i);
					}
					case 30: {
						++PlayerInfo[i][pGoldBoxTokens];
						SendClientMessageEx(i, COLOR_YELLOW, "Reward Play: you have received 1 Reward Token.");
					}
					case 60, 70, 80, 90, 100, 110, 120, 130, 140, 160, 170, 180, 190, 200, 210, 220, 230, 240, 250, 260, 270, 280, 290, 300: {
						++PlayerInfo[i][pGoldBoxTokens];
						SendClientMessageEx(i, COLOR_YELLOW, "Reward Play: you have received 1 Reward Token.");
					}
					case 150: {

						fDedicated = fopen("RewardDedicated.cfg", io_append);

						format(string, sizeof string, "%s|%i\r\n", GetPlayerNameEx(i), gettime());
						fwrite(fDedicated, string);
						fclose(fDedicated);
						SendClientMessageEx(i, COLOR_YELLOW, "Reward Playing: You have been added to the Dedicated Player list, for earning 150 hours!");
						++PlayerInfo[i][pGoldBoxTokens];
						SendClientMessageEx(i, COLOR_YELLOW, "Reward Play: you have received 1 Reward Token.");
					}
				}
				format(string, sizeof(string), "You currently have %d Reward Hours, please check /rewards for more information.", floatround(PlayerInfo[i][pRewardHours]));
				SendClientMessageEx(i, COLOR_YELLOW, string);
			}

			if(DoubleXP) {
				SendClientMessageEx(i, COLOR_YELLOW, "You have gained 2 respect points instead of 1. (Double XP Active)");
				PlayerInfo[i][pExp] += 2;
			}
			else
			if(PlayerInfo[i][pDoubleEXP] > 0 && !DoubleXP) {
				PlayerInfo[i][pDoubleEXP]--;
				format(string, sizeof(string), "You have gained 2 respect points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[i][pDoubleEXP]);
				SendClientMessageEx(i, COLOR_YELLOW, string);
				PlayerInfo[i][pExp] += 2;
			}
			else PlayerInfo[i][pExp]++;

			if(PlayerInfo[i][pWRestricted] > 0 && --PlayerInfo[i][pWRestricted] == 0) {
				SendClientMessageEx(i, COLOR_LIGHTRED, "Your weapons are no longer restricted!");
			}

		}
		else SendClientMessageEx(i, COLOR_LIGHTRED, "* You haven't played long enough to obtain a paycheck.");
	}
}
stock splits(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
		if(strsrc[i]==delimiter || i==strlen(strsrc)){
			len = strmid(strdest[aNum], strsrc, li, i, 128);
			strdest[aNum][len] = 0;
			li = i+1;
			aNum++;
		}
		i++;
	}
	return 1;
}

stock OnPlayerStatsUpdate(playerid) {
	if(gPlayerLogged{playerid}) {
		if(!GetPVarType(playerid, "TempName") && !GetPVarInt(playerid, "EventToken") && GetPVarInt(playerid, "IsInArena") == -1) {
			GetPlayerHealth(playerid, PlayerInfo[playerid][pHealth]);
			GetPlayerArmour(playerid, PlayerInfo[playerid][pArmor]);
			PlayerInfo[playerid][pInt] = GetPlayerInterior(playerid);
			PlayerInfo[playerid][pVW] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
			GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pPos_r]);
		}
		g_mysql_SaveAccount(playerid);
	}
	return 1;
}

public OnPlayerLoad(playerid)
{
	new string[128];
	if(PlayerInfo[playerid][pOnline] != 0)
	{
	    if(PlayerInfo[playerid][pOnline] != servernumber)
	    {
		    SendClientMessage(playerid, COLOR_WHITE, "{FF8000}Error:{FFFFFF}: This account is already online!");
			KickWithMessage(playerid);
			return 1;
		}
	}

	GetPlayerIp(playerid, PlayerInfo[playerid][pIP], 16);
	if( PlayerInfo[playerid][pPermaBanned] == 3 || PlayerInfo[playerid][pBanned] >= 1 )
	{
		format(string, sizeof(string), "WARNING: %s (IP:%s) tried to login whilst banned and has been auto-banned.", GetPlayerNameEx( playerid ), PlayerInfo[playerid][pIP] );
		ABroadCast(COLOR_YELLOW, string, 2);
		SendClientMessage( playerid, COLOR_LIGHTRED, "{FF8000}Error:{FFFFFF}: You're banned from this server." );
		AddBan(PlayerInfo[playerid][pIP]);
		Log("logs/ban.log", string);
		KickWithMessage(playerid);
		return 1;
	}

	if(PlayerInfo[playerid][pAdmin] > 2 && !fexist("NoWhitelist.h")) { // Beta server.
		if(isnull(PlayerInfo[playerid][pSecureIP]) || strcmp(PlayerInfo[playerid][pIP], PlayerInfo[playerid][pSecureIP], false, strlen(PlayerInfo[playerid][pSecureIP])) != 0) {
			if(strcmp(PlayerInfo[playerid][pIP], "127.0.0.1", false, 16) != 0) {
				SendClientMessage(playerid, COLOR_WHITE, "{FF8000}Error:{FFFFFF}: Your IP does not match the whitelisted IP of that account.");
				SendClientMessage(playerid, COLOR_WHITE, "{FF8000}Error:{FFFFFF}: Please login into the Control Panel to request to be whitelisted.");
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has been auto kicked for logging in with a non-whitelisted IP.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW, string, 2);
				KickWithMessage(playerid);
				return 1;
			}
		}
	}

	if(PlayerInfo[playerid][pDisabled] != 0)
	{
		if( PlayerInfo[playerid][pBanAppealer] > 1) PlayerInfo[playerid][pBanAppealer] = 0;
		if( PlayerInfo[playerid][pShopTech] > 1) PlayerInfo[playerid][pShopTech] = 0;
		if( PlayerInfo[playerid][pUndercover] > 1) PlayerInfo[playerid][pUndercover] = 0;
		if( PlayerInfo[playerid][pFactionModerator] > 1) PlayerInfo[playerid][pFactionModerator] = 0;
		if( PlayerInfo[playerid][pGangModerator] > 1) PlayerInfo[playerid][pGangModerator] = 0;
		if( PlayerInfo[playerid][pPR] > 1) PlayerInfo[playerid][pPR] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "{FF8000}Error{FFFFFF}: This account is disabled!");
		KickWithMessage(playerid);
		return 1;
	}
	TotalLogin++;

	SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
	if(PlayerInfo[playerid][pReg] == 0)
	{
		for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
		{
			PlayerVehicleInfo[playerid][v][pvModelId] = 0;
			PlayerVehicleInfo[playerid][v][pvPosX] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosY] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosZ] = 0.0;
			PlayerVehicleInfo[playerid][v][pvPosAngle] = 0.0;
			PlayerVehicleInfo[playerid][v][pvLock] = 0;
			PlayerVehicleInfo[playerid][v][pvLocked] = 0;
			PlayerVehicleInfo[playerid][v][pvPaintJob] = -1;
			PlayerVehicleInfo[playerid][v][pvColor1] = 0;
			PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
			PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			PlayerVehicleInfo[playerid][v][pvColor2] = 0;
			PlayerVehicleInfo[playerid][v][pvPrice] = 0;
			PlayerVehicleInfo[playerid][v][pvTicket] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][0] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][1] = 0;
			PlayerVehicleInfo[playerid][v][pvWeapons][2] = 0;
			PlayerVehicleInfo[playerid][v][pvWepUpgrade] = 0;
			PlayerVehicleInfo[playerid][v][pvFuel] = 100.0;
			PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
			PlayerVehicleInfo[playerid][v][pvPark] = 0;
			ListItemReleaseId[playerid][v] = -1;
			PlayerVehicleInfo[playerid][v][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][v][pvPlate] = 0;
			ListItemTrackId[playerid][v] = -1;
			for(new m = 0; m < MAX_MODS; m++)
			{
				PlayerVehicleInfo[playerid][v][pvMods][m] = 0;
			}
		}
		for(new v = 0; v < MAX_PLAYERTOYS; v++)
		{
			PlayerToyInfo[playerid][v][ptModelID] = 0;
			PlayerToyInfo[playerid][v][ptBone] = 0;
			PlayerToyInfo[playerid][v][ptPosX] = 0.0;
			PlayerToyInfo[playerid][v][ptPosY] = 0.0;
			PlayerToyInfo[playerid][v][ptPosZ] = 0.0;
			PlayerToyInfo[playerid][v][ptRotX] = 0.0;
			PlayerToyInfo[playerid][v][ptRotY] = 0.0;
			PlayerToyInfo[playerid][v][ptRotZ] = 0.0;
			PlayerToyInfo[playerid][v][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][v][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][v][ptScaleZ] = 1.0;
		}
		PlayerInfo[playerid][pSmslog] = 0;

		strcpy(PlayerInfo[playerid][pSmslog0], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog1], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog2], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog3], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog4], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog5], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog6], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog7], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog8], "Empty", 64);
		strcpy(PlayerInfo[playerid][pSmslog9], "Empty", 64);

		strcpy(PlayerInfo[playerid][pKillLog0], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog1], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog2], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog3], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog4], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog5], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog6], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog7], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog8], "Empty", 64);
		strcpy(PlayerInfo[playerid][pKillLog9], "Empty", 64);


		PlayerInfo[playerid][pTokens] = 0;
		PlayerInfo[playerid][pSecureIP][0] = 0;
		PlayerInfo[playerid][pFlag][0] = 0;
		PlayerInfo[playerid][pCrates] = 0;
		PlayerInfo[playerid][pOrder] = 0;
		PlayerInfo[playerid][pOrderConfirmed] = 0;
		PlayerInfo[playerid][pRacePlayerLaps] = 0;
		PlayerInfo[playerid][pSprunk] = 0;
		PlayerInfo[playerid][pSpraycan] = 0;
		PlayerInfo[playerid][pCigar] = 0;
		PlayerInfo[playerid][pConnectSeconds] = 0;
		PlayerInfo[playerid][pPayDayHad] = 0;
		PlayerInfo[playerid][pCDPlayer] = 0;
		PlayerInfo[playerid][pWins] = 0;
		PlayerInfo[playerid][pLoses] = 0;
		PlayerInfo[playerid][pTut] = 0;
		PlayerInfo[playerid][pWarns] = 0;
		PlayerInfo[playerid][pRope] = 0;
		PlayerInfo[playerid][pDice] = 0;
		PlayerInfo[playerid][pScrewdriver] = 0;
		PlayerInfo[playerid][pWantedLevel] = 0;
		PlayerInfo[playerid][pInsurance] = 0;
		PlayerInfo[playerid][pDutyHours] = 0;
		PlayerInfo[playerid][pAcceptedHelp] = 0;
		PlayerInfo[playerid][pAcceptReport] = 0;
		PlayerInfo[playerid][pShopTechOrders] = 0;
		PlayerInfo[playerid][pTrashReport] = 0;
		PlayerInfo[playerid][pGiftTime] = 0;
		PlayerInfo[playerid][pTicketTime] = 0;
		PlayerInfo[playerid][pServiceTime] = 0;
		PlayerInfo[playerid][pFirework] = 0;
		PlayerInfo[playerid][pBoombox] = 0;
		PlayerInfo[playerid][pCash] = 50000;

		PlayerInfo[playerid][pLevel] = 1;
		PlayerInfo[playerid][pAdmin] = 0;
		PlayerInfo[playerid][pHelper] = 0;
		PlayerInfo[playerid][pSMod] = 0;
		PlayerInfo[playerid][pWatchdog] = 0;
		PlayerInfo[playerid][pBanned] = 0;
		PlayerInfo[playerid][pDisabled] = 0;
		PlayerInfo[playerid][pMuted] = 0;
		PlayerInfo[playerid][pRMuted] = 0;
		PlayerInfo[playerid][pRMutedTotal] = 0;
		PlayerInfo[playerid][pRMutedTime] = 0;
		PlayerInfo[playerid][pDMRMuted] = 0;
		PlayerInfo[playerid][pNMute] = 0;
		PlayerInfo[playerid][pNMuteTotal] = 0;
		PlayerInfo[playerid][pADMute] = 0;
		PlayerInfo[playerid][pADMuteTotal] = 0;
		PlayerInfo[playerid][pHelpMute] = 0;
		PlayerInfo[playerid][pVMutedTime] = 0;
		PlayerInfo[playerid][pVMuted] = 0;
		PlayerInfo[playerid][pRadio] = 0;
		PlayerInfo[playerid][pRadioFreq] = 0;
		PlayerInfo[playerid][pPermaBanned] = 0;
		PlayerInfo[playerid][gPupgrade] = 0;
		PlayerInfo[playerid][pConnectHours] = 2;
		PlayerInfo[playerid][pReg] = 0;
		PlayerInfo[playerid][pSex] = 0;
		PlayerInfo[playerid][pAge] = 0;
		PlayerInfo[playerid][pRingtone] = 0;
		PlayerInfo[playerid][pOrigin] = 0;
		PlayerInfo[playerid][pHydration] = 100;
		PlayerInfo[playerid][pDoubleEXP] = 0;
		PlayerInfo[playerid][pEXPToken] = 0;
		PlayerInfo[playerid][pExp] = 0;
		PlayerInfo[playerid][pAccount] = 0;
		PlayerInfo[playerid][pCrimes] = 0;
		PlayerInfo[playerid][pDeaths] = 0;
		PlayerInfo[playerid][pArrested] = 0;
		PlayerInfo[playerid][pPhoneBook] = 0;
		PlayerInfo[playerid][pLottoNr] = 0;
		PlayerInfo[playerid][pFishes] = 0;
		PlayerInfo[playerid][pBiggestFish] = 0;
		PlayerInfo[playerid][pJob] = 0;
		PlayerInfo[playerid][pJob2] = 0;
		PlayerInfo[playerid][pPayCheck] = 0;
		PlayerInfo[playerid][pHeadValue] = 0;
		PlayerInfo[playerid][pJailTime] = 0;
		PlayerInfo[playerid][pWRestricted] = 0;
		PlayerInfo[playerid][pMats] = 1000;
		PlayerInfo[playerid][pLeader] = 0;
		PlayerInfo[playerid][pMember] = 0;
		PlayerInfo[playerid][pDivision] = 0;
		PlayerInfo[playerid][pFMember] = 255;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
		PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
		PlayerInfo[playerid][pDetSkill] = 200;
		PlayerInfo[playerid][pSexSkill] = 0;
		PlayerInfo[playerid][pBoxSkill] = 0;
		PlayerInfo[playerid][pLawSkill] = 0;
		PlayerInfo[playerid][pMechSkill] = 0;
		PlayerInfo[playerid][pTruckSkill] = 0;
		PlayerInfo[playerid][pDrugsSkill] = 0;
		PlayerInfo[playerid][pArmsSkill] = 300;
		PlayerInfo[playerid][pSmugSkill] = 0;
		PlayerInfo[playerid][pFishSkill] = 0;
		PlayerInfo[playerid][pSHealth] = 0.0;
		PlayerInfo[playerid][pHealth] = 50.0;

		PlayerInfo[playerid][pCheckCash] = 0;
		PlayerInfo[playerid][pChecks] = 0;
		PlayerInfo[playerid][pWeedObject] = 0;
		PlayerInfo[playerid][pWeedPos][0] = 0;
		PlayerInfo[playerid][pWeedPos][1] = 0;
		PlayerInfo[playerid][pWeedPos][2] = 0;
		PlayerInfo[playerid][pWeedVW] = 0;
		PlayerInfo[playerid][pWeedInt] = 0;
		PlayerInfo[playerid][pWeedGrowth] = -1;
		PlayerInfo[playerid][pWSeeds] = 0;
		PlayerInfo[playerid][pWarrant][0] = 0;
		PlayerInfo[playerid][pContractBy][0] = 0;
		PlayerInfo[playerid][pContractDetail] = 0;
		PlayerInfo[playerid][pJudgeJailTime] = 0;
		PlayerInfo[playerid][pJudgeJailType] = 0;
		PlayerInfo[playerid][pBeingSentenced] = 0;
		PlayerInfo[playerid][pProbationTime] = 0;
		PlayerInfo[playerid][pModel] = 299;
		PlayerInfo[playerid][pPnumber] = 0;
		PlayerInfo[playerid][pCarLic] = 1;
		PlayerInfo[playerid][pFlyLic] = 1;
		PlayerInfo[playerid][pBoatLic] = 1;
		PlayerInfo[playerid][pFishLic] = 1;
		PlayerInfo[playerid][pGunLic] = 1;
		PlayerInfo[playerid][pTaxiLicense] = 0;
		PlayerInfo[playerid][pBugged] = 0;
		PlayerInfo[playerid][pCallsAccepted] = 0;
		PlayerInfo[playerid][pPatientsDelivered] = 0;
		PlayerInfo[playerid][pLiveBanned] = 0;
		PlayerInfo[playerid][pFreezeBank] = 0;
		PlayerInfo[playerid][pFreezeHouse] = 0;
		PlayerInfo[playerid][pFreezeCar] = 0;
		strcpy(PlayerInfo[playerid][pAutoTextReply], "Nothing", 64);
		PlayerInfo[playerid][pLevel] = 1;
		PlayerInfo[playerid][pSHealth] = 0.0;

		PlayerInfo[playerid][pPnumber] = 0;
		PlayerInfo[playerid][pAccount] = 0;
		PlayerInfo[playerid][pGangWarn] = 0;
		PlayerInfo[playerid][pPaintTokens] = 0;
		PlayerInfo[playerid][pTogReports] = 0;
		PlayerInfo[playerid][pCHits] = 0;
		PlayerInfo[playerid][pFHits] = 0;
		PlayerInfo[playerid][pAccent] = 1;
		PlayerInfo[playerid][pFactionBanned] = 0;
		PlayerInfo[playerid][pCSFBanned] = 0;
		PlayerInfo[playerid][pWristwatch] = 0;
		PlayerInfo[playerid][pSurveillance] = 0;
		PlayerInfo[playerid][pTire] = 0;
		PlayerInfo[playerid][pFirstaid] = 0;
		PlayerInfo[playerid][pRccam] = 0;
		PlayerInfo[playerid][pReceiver] = 0;
		PlayerInfo[playerid][pGPS] = 0;
		PlayerInfo[playerid][pSweep] = 0;
		PlayerInfo[playerid][pSweepLeft] = 0;
		PlayerInfo[playerid][pPot] = 0;
		PlayerInfo[playerid][pCrack] = 0;
		PlayerInfo[playerid][pVIPM] = 0;
		PlayerInfo[playerid][pVIPMO] = 0;
		PlayerInfo[playerid][pVIPExpire] = 0;
		PlayerInfo[playerid][pGVip] = 0;//Now set on setup, not here.
		PlayerInfo[playerid][pReg] = 1;
	}

	if(PlayerInfo[playerid][pHospital] == 1)
	{
		PlayerInfo[playerid][pHospital] = 0;
		SetPVarInt(playerid, "MedicBill", 1);
	}

	if( PlayerInfo[playerid][pBanAppealer] >= 1 && PlayerInfo[playerid][pAdmin] < 1) PlayerInfo[playerid][pBanAppealer] = 0;

	if( PlayerInfo[playerid][pPR] >= 1 && PlayerInfo[playerid][pAdmin] < 1) PlayerInfo[playerid][pPR] = 0;

	if( PlayerInfo[playerid][pShopTech] >= 1 && PlayerInfo[playerid][pAdmin] < 1) PlayerInfo[playerid][pShopTech] = 0;

	if( PlayerInfo[playerid][pUndercover] >= 1 && PlayerInfo[playerid][pAdmin] < 1) PlayerInfo[playerid][pUndercover] = 0;

	if( PlayerInfo[playerid][pFactionModerator] >= 1 && PlayerInfo[playerid][pAdmin] < 1) PlayerInfo[playerid][pFactionModerator] = 0;

	if( PlayerInfo[playerid][pGangModerator] >= 1 && PlayerInfo[playerid][pAdmin] < 1) PlayerInfo[playerid][pGangModerator] = 0;

	if( PlayerInfo[playerid][pBanAppealer] > 1) PlayerInfo[playerid][pBanAppealer] = 0;

	if( PlayerInfo[playerid][pPR] > 1) PlayerInfo[playerid][pPR] = 0;

	if( PlayerInfo[playerid][pShopTech] > 1) PlayerInfo[playerid][pShopTech] = 0;

	if( PlayerInfo[playerid][pUndercover] > 1) PlayerInfo[playerid][pUndercover] = 0;

	if( PlayerInfo[playerid][pFactionModerator] > 1) PlayerInfo[playerid][pFactionModerator] = 0;

	if( PlayerInfo[playerid][pGangModerator] > 1) PlayerInfo[playerid][pGangModerator] = 0;

	if( PlayerInfo[playerid][pHelper] == 1 && PlayerInfo[playerid][pAdmin] >= 1) PlayerInfo[playerid][pHelper] = 0;

	if(PlayerInfo[playerid][pWarns] >= 3)
	{
		format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned (had 3 Warnings)", GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
		Log("logs/ban.log", string);
		format(string, sizeof(string), "AdmCmd: %s was banned (had 3 Warnings)", GetPlayerNameEx(playerid));
		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
		PlayerInfo[playerid][pBanned] = 1;
		AddBan(GetPlayerIpEx(playerid));
		KickWithMessage(playerid);
		//MySQLBan(GetPlayerSQLId(playerid),ip,"had 3 warnings",-1);
		return 1;
	}

	HideMainMenuGUI(playerid);
	HideNoticeGUIFrame(playerid);

	if(PlayerInfo[playerid][pVIPExpire] > 0 && (1 <= PlayerInfo[playerid][pDonateRank] <= 3) && (PlayerInfo[playerid][pVIPExpire] < gettime()) && PlayerInfo[playerid][pAdmin] < 2)
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    format(string, sizeof(string), "[DEBUG] %s (%s) VIP removed (VIP Expire: %d | Level: %d)", name, GetPlayerIpEx(playerid), PlayerInfo[playerid][pVIPExpire], PlayerInfo[playerid][pDonateRank]);
	    Log("logs/vipremove.log", string);
	    //format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: Please check player %s as their VIP may have expired.", GetPlayerNameEx(playerid));
		//ABroadCast(COLOR_YELLOW, string, 4);
	    //PlayerInfo[playerid][pDonateRank] = 0;
	    //SendClientMessageEx(playerid, COLOR_YELLOW, "Your VIP has been removed as it has expired");
	}
	if(PlayerInfo[playerid][pJob2] >= 1 && PlayerInfo[playerid][pDonateRank] < 1)
	{
		PlayerInfo[playerid][pJob2] = 0;
		SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have lost your secondary job due to the fact that you are longer a VIP.");
	}
	if(PlayerInfo[playerid][pDonateRank] >= 4 && PlayerInfo[playerid][pArmsSkill] < 400)
	{
		PlayerInfo[playerid][pArmsSkill] = 401;
		SendClientMessageEx(playerid, COLOR_YELLOW, "Platinum VIP Feature: You have been given Level 5 Arms Dealer.");
	}
	if (PlayerInfo[playerid][pLevel] < 6 || PlayerInfo[playerid][pAdmin] > 0 || PlayerInfo[playerid][pHelper] > 0)
	{
		gNewbie[playerid] = 0;
	}
	if (PlayerInfo[playerid][pHelper] == 1)
	{
		gHelp[playerid] = 0;
	}
	if(PlayerInfo[playerid][pAdmin] != 0 && PlayerInfo[playerid][pAdmin] != 1 && PlayerInfo[playerid][pAdmin] != 2 && PlayerInfo[playerid][pAdmin] != 3 && PlayerInfo[playerid][pAdmin] != 4 &&PlayerInfo[playerid][pAdmin] != 1337 && PlayerInfo[playerid][pAdmin] != 1338 && PlayerInfo[playerid][pAdmin] != 13338 && PlayerInfo[playerid][pAdmin] != 99998 && PlayerInfo[playerid][pAdmin] != 99999)
	{
		new name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has attempted to log in with Admin Level %d.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pAdmin]);
		ABroadCast( COLOR_YELLOW, string, 4 );
		format(string, sizeof(string), "%s has attempted to log in with Admin Level %d.", name, PlayerInfo[playerid][pAdmin]);
		Log("logs/security.log", string);
		PlayerInfo[playerid][pAdmin] = 0;
	}
	if (PlayerInfo[playerid][pAdmin] > 0)
	{
		if(PlayerInfo[playerid][pAdmin] == 1)
		{
			if(PlayerInfo[playerid][pSMod] == 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE,"{FF8000}Notice{FFFFFF}: You are logged in as a {FF8000}Senior Moderator{FFFFFF}.");
				format( string, sizeof( string ), "{FF8000}Notice{FFFFFF}: %s (%d) has logged in as a {FF8000}Senior Moderator{FFFFFF}.", GetPlayerNameEx( playerid ),playerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE,"{FF8000}Notice{FFFFFF}: You are logged in as a {FF8000}Moderator{FFFFFF}.");
				format( string, sizeof( string ), "{FF8000}Notice{FFFFFF}: %s (%d) has logged in as a {FF8000}Moderator{FFFFFF}.", GetPlayerNameEx( playerid ),playerid);
			}
		}
		else
		{
		    PriorityReport[playerid] = TextDrawCreate(261.000000, 373.000000, "New Report");
			TextDrawBackgroundColor(PriorityReport[playerid], 255);
			TextDrawFont(PriorityReport[playerid], 2);
			TextDrawLetterSize(PriorityReport[playerid], 0.460000, 1.800000);
			TextDrawColor(PriorityReport[playerid], -65281);
			TextDrawSetOutline(PriorityReport[playerid], 0);
			TextDrawSetProportional(PriorityReport[playerid], 1);
			TextDrawSetShadow(PriorityReport[playerid], 1);

			format(string, sizeof(string), "{FF8000}Notice{FFFFFF}: You are logged in as {FF8000}%s{FFFFFF} and you are {FF8000}%s{FFFFFF}.",AdminNameLogin(PlayerInfo[playerid][pAdmin]), AdminDuty(PlayerInfo[playerid][pAdminDuty]));
			SendClientMessageEx(playerid, COLOR_WHITE,string);
			format( string, sizeof( string ), "{FF8000}Notice{FFFFFF}: %s (%d) has logged in as {FF8000}%s{FFFFFF} and is {FF8000}%s{FFFFFF}.", GetPlayerNameEx( playerid ),playerid, AdminNameLogin(PlayerInfo[playerid][pAdmin]), AdminDuty(PlayerInfo[playerid][pAdminDuty]));
		}

		foreach(new i: Player) if(PlayerInfo[i][pAdmin] >= 1337 >= PlayerInfo[playerid][pAdmin]) SendClientMessageEx(i, COLOR_WHITE, string);
	}

	printf("%s has logged in.", GetPlayerNameEx(playerid));
	format(string, sizeof(string), "Welcome, {FF8000}%s{FFFFFF}.", GetPlayerNameEx(playerid));
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SetSpawnInfo(playerid, 0, PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
	SkinDelay(playerid);
	gPlayerLogged{playerid} = 1;
	g_mysql_AccountOnline(playerid, servernumber);
	TogglePlayerSpectating(playerid, 0);
	//SpawnPlayer(playerid);
	format(string, sizeof(string), "~w~Welcome,~n~~y~%s!", GetPlayerNameEx(playerid));
	GameTextForPlayer(playerid, string, 5000, 1);
	SendClientMessageEx(playerid, COLOR_YELLOW, GlobalMOTD);

	if(PlayerInfo[playerid][pAdmin] > 0) {
		if(PlayerInfo[playerid][pAdmin] >= 2) SendClientMessageEx(playerid, COLOR_YELLOW, AdminMOTD);
		SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, CAMOTD);
	}

	if(PlayerInfo[playerid][pDonateRank] >= 1)
	SendClientMessageEx(playerid, COLOR_VIP, VIPMOTD);

	if(PlayerInfo[playerid][pHelper] >= 1) {
		SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR, CAMOTD);
		if(PlayerInfo[playerid][pHelper] >= 2) {
			SetPVarInt(playerid, "AdvisorDuty", 1);
			++Advisors;
		}
	}

	if(PlayerInfo[playerid][pInt] > 0 || PlayerInfo[playerid][pVW] > 0)
	{
		Player_StreamPrep(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], FREEZE_TIME);
	}

	SetPlayerFightingStyle(playerid, PlayerInfo[playerid][pFightStyle]);
	LoadPlayerVehicles(playerid);
	SetPlayerToTeamColor(playerid);
	if(PlayerInfo[playerid][pLottoNr] > 0)
	{
	    CountTickets(playerid);
	    LoadTickets(playerid);
	}
	if(PlayerInfo[playerid][pFMember] == -1) { PlayerInfo[playerid][pFMember] = 255; }
	if(PlayerInfo[playerid][pFMember] >= 0 && PlayerInfo[playerid][pFMember] < 255)
	{
		format(string, sizeof(string), "Family MOTD: %s.", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMOTD]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	CountFlags(playerid);
	if(PlayerInfo[playerid][pFlagged] > 0)
	{
		format(string, sizeof(string), "{FF8000}Flag System{FFFFFF}: %s has %d outstanding flags.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pFlagged]);
		ABroadCast(COLOR_WHITE, string, 2);
	}
	if(PlayerInfo[playerid][pOrder] > 0)
	{
		if(PlayerInfo[playerid][pOrderConfirmed] == 1)
		{
			format(string, sizeof(string), "{FF8000}Shop System{FFFFFF}: %s has an outstanding shop order.", GetPlayerNameEx(playerid));
			ShopTechBroadCast(COLOR_WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "{FF8000}Shop System{FFFFFF}: %s has an outstanding shop order.", GetPlayerNameEx(playerid));
			ShopTechBroadCast(COLOR_WHITE, string);
		}
	}

	new
	iCheckOne = INVALID_HOUSE_ID,
	iCheckTwo = INVALID_HOUSE_ID,
	szPlayerName[MAX_PLAYER_NAME];

	GetPlayerName(playerid, szPlayerName, sizeof(szPlayerName));



// Modified by Phazd <3
	for(new i = 0; i < TotalHouses; ++i) if(strcmp(szPlayerName, HouseInfo[i][hOwner], false) == 0) {
		if(iCheckOne != INVALID_HOUSE_ID) iCheckTwo = i;
		else if(iCheckTwo == INVALID_HOUSE_ID) iCheckOne = i;
		else break;
	}
	if(iCheckOne != INVALID_HOUSE_ID) PlayerInfo[playerid][pPhousekey] = iCheckOne;
	else PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;

	if(iCheckTwo != INVALID_HOUSE_ID) PlayerInfo[playerid][pPhousekey2] = iCheckTwo;
	else PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;

	if(PlayerInfo[playerid][pWeedObject] != 0) {
		PlayerInfo[playerid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2], 0.0, 0.0, 0.0, PlayerInfo[playerid][pWeedVW], PlayerInfo[playerid][pWeedInt]);
	}
	if(PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID && (PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID || PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID)) {
		PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
	}

	if(iRewardPlay)
    {
		format(string, sizeof(string), "Reward Play is Active!");
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	    format(string, sizeof(string), "You have played %d Reward Hours total, /rewards for more information.", floatround(PlayerInfo[playerid][pRewardHours]));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
    }
	if(1 <= PlayerInfo[playerid][pDonateRank] <= 3  && PlayerInfo[playerid][pVIPExpire] > 0 && (PlayerInfo[playerid][pVIPExpire] - 259200 < gettime()) )
    {
		SendClientMessageEx(playerid, COLOR_RED, "Your VIP expires in less than three days! Type /vipdate for more information.");
    }
	if(PlayerInfo[playerid][pRVehWarns] != 0 && PlayerInfo[playerid][pLastRVehWarn] + 2592000 < gettime()) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Your restricted vehicle warnings have expired!");
		PlayerInfo[playerid][pLastRVehWarn] = 0;
		PlayerInfo[playerid][pRVehWarns] = 0;
	}
    if(!isnull(PlayerInfo[playerid][pFlag]))
	{
        AddFlag(playerid, INVALID_PLAYER_ID, PlayerInfo[playerid][pFlag]);
		format(string, sizeof(string), "{FF8000}Flag Move{FFFFFF}:  %s's old flag %s has been moved to the new system automatically", GetPlayerNameEx(playerid), PlayerInfo[playerid][pFlag]);
		Log("logs/flagmove.log", string);
  		ABroadCast(COLOR_YELLOW, string, 1337);
  		PlayerInfo[playerid][pFlag][0] = 0;
    }
	if(PlayerInfo[playerid][pDoubleEXP] > 0 && DoubleXP)
	{
		format(string, sizeof(string), "Double XP is active and your remaing %d hours from the XP Token has been frozen till end of Double XP.", PlayerInfo[playerid][pDoubleEXP]);
		SendClientMessageEx(playerid, COLOR_RED, string);
	}
	if(pMOTD[0]) { ShowPlayerDialog(playerid, PMOTDNOTICE, DIALOG_STYLE_MSGBOX, "Notice", pMOTD, "Dismiss", ""); }
	else if(GetPVarInt(playerid, "NullEmail")) {
			ShowPlayerDialog(playerid, NULLEMAIL, DIALOG_STYLE_INPUT, "{3399FF}E-mail Registration", "{FFFFFF}Please enter a valid e-mail address to associate with your account.\n\nNotice: Providing an invalid address may result in never being able\nto Recover your Account if you forget your Password or get Hacked.", "Submit", "Skip");
	}
	return 1;
}

stock ini_GetKey( line[] )
{
	new keyRes[64];
	keyRes[0] = 0;
	if ( strfindex( line , "=" , true ) == -1 ) return keyRes;
	strmid( keyRes , line , 0 , strfindex( line , "=" , true ) , sizeof( keyRes) );
	return keyRes;
}

stock Ini_Value( line[] )
{
	new valRes[156];
	valRes[0]=0;
	if ( strfindex( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfindex( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

stock LoadCarrier()
{
    if(!fexist("carrier.ini")) return 0;
	new arrCoords[3][64];
	new strFromFile2[256];
	new File: file = fopen("carrier.ini", io_read);
	if (file)
	{
	    fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		SetDynamicObjectPos(sidelift, floatstr(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]));

		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		SetDynamicObjectPos(backhatch, floatstr(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]));

		fread(file, strFromFile2);
		splits(strFromFile2, arrCoords, '|');
		SetDynamicObjectPos(backlift, floatstr(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]));

		new idx;
		while (idx < sizeof(Carrier))
		{
		    fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			SetDynamicObjectPos(Carrier[idx], floatstr(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]));
            idx++;
		}
		idx = 0;
		while (idx < sizeof(CarrierS))
		{
		    fread(file, strFromFile2);
			splits(strFromFile2, arrCoords, '|');
			SetDynamicObjectPos(CarrierS[idx], floatstr(arrCoords[0]), floatstr(arrCoords[1]), floatstr(arrCoords[2]));
            idx++;
		}
	}
	fclose(file);
	return 1;
}

stock SaveCarrier()
{
	new idx;
	new Float:X, Float:Y, Float:Z;
	new File: file2;

	new coordsstringf[326];
	GetDynamicObjectPos(sidelift, X, Y, Z);
	format(coordsstringf, sizeof(coordsstringf), "%.5f|%.5f|%.5f\n",
		X, Y, Z
	);
	file2 = fopen("carrier.ini", io_write);
	if(file2)
	{
		fwrite(file2, coordsstringf);
		fclose(file2);

		GetDynamicObjectPos(backhatch, X, Y, Z);
		format(coordsstringf, sizeof(coordsstringf), "%.5f|%.5f|%.5f\n",
			X, Y, Z
		);
		file2 = fopen("carrier.ini", io_append);
		fwrite(file2, coordsstringf);
		fclose(file2);

		GetDynamicObjectPos(backlift, X, Y, Z);
		format(coordsstringf, sizeof(coordsstringf), "%.5f|%.5f|%.5f\n",
			X, Y, Z
		);
		file2 = fopen("carrier.ini", io_append);
		fwrite(file2, coordsstringf);
		fclose(file2);

		while (idx < sizeof(Carrier))
		{
			GetDynamicObjectPos(Carrier[idx], X, Y, Z);
			format(coordsstringf, sizeof(coordsstringf), "%.5f|%.5f|%.5f\n",
				X, Y, Z
			);
			file2 = fopen("carrier.ini", io_append);
			fwrite(file2, coordsstringf);
			idx++;
			fclose(file2);
		}

		idx=0;
		while (idx < sizeof(CarrierS))
		{
			GetDynamicObjectPos(CarrierS[idx], X, Y, Z);
			format(coordsstringf, sizeof(coordsstringf), "%.5f|%.5f|%.5f\n",
				X, Y, Z
			);
			file2 = fopen("carrier.ini", io_append);
			fwrite(file2, coordsstringf);
			idx++;
			fclose(file2);
		}
	}
	return 1;
}

/*stock SaveGates()  {

	new
		szFileStr[512],
		File: fHandle = fopen("gates.cfg", io_write);
	if(fHandle)
	{
		for(new iIndex; iIndex < MAX_GATES; iIndex++) {
			format(szFileStr, sizeof(szFileStr), "%d|%f|%d|%d|%d|%d|%s|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%f|%d\r\n",
				GateInfo[iIndex][gHID],
				GateInfo[iIndex][gSpeed],
				GateInfo[iIndex][gRange],
				GateInfo[iIndex][gModel],
				GateInfo[iIndex][gVW],
				GateInfo[iIndex][gInt],
				GateInfo[iIndex][gPass],
				GateInfo[iIndex][gPosX],
				GateInfo[iIndex][gPosY],
				GateInfo[iIndex][gPosZ],
				GateInfo[iIndex][gRotX],
				GateInfo[iIndex][gRotY],
				GateInfo[iIndex][gRotZ],
				GateInfo[iIndex][gPosXM],
				GateInfo[iIndex][gPosYM],
				GateInfo[iIndex][gPosZM],
				GateInfo[iIndex][gRotXM],
				GateInfo[iIndex][gRotYM],
				GateInfo[iIndex][gRotZM],
				GateInfo[iIndex][gRenderHQ]
			);
			fwrite(fHandle, szFileStr);
		}
		return fclose(fHandle);
	}
	return 0;
}
*/
stock SaveEventPoints() {

	new
		szFileStr[256],
		File: fHandle = fopen("eventpoints.cfg", io_write);

	if(fHandle)
	{
		for(new iIndex; iIndex < MAX_EVENTPOINTS; iIndex++) {
			format(szFileStr, sizeof(szFileStr), "%f|%f|%f|%d|%d|%s|%d\r\n",
				EventPoints[iIndex][epPosX],
				EventPoints[iIndex][epPosY],
				EventPoints[iIndex][epPosZ],
				EventPoints[iIndex][epVW],
				EventPoints[iIndex][epInt],
				EventPoints[iIndex][epPrize],
				EventPoints[iIndex][epFlagable]
			);
			fwrite(fHandle, szFileStr);
		}
		return fclose(fHandle);
	}
	return 0;
}
stock ShopTechBroadCast(color,string[])
{
	foreach(new i: Player)
	{
		if ((PlayerInfo[i][pShopTech] >= 1 || PlayerInfo[i][pAdmin] >= 1338) && PlayerInfo[i][pTogReports] == 0)
		{
			SendClientMessageEx(i, color, string);
		}
	}
	return 1;
}

stock ABroadCast(hColor, szMessage[], iLevel, bool: bUndercover = false) {
	foreach(new i: Player) if(PlayerInfo[i][pAdmin] >= iLevel && (bUndercover || !PlayerInfo[i][pTogReports])) {
		SendClientMessageEx(i, hColor, szMessage);
	}
	return 1;
}

stock DmgCheckRead(hColor, szMessage[], iLevel, bool: bUndercover = false) {
	foreach(new i: Player) if(PlayerInfo[i][pAdmin] >= iLevel && (bUndercover || !PlayerInfo[i][pTogReports])) {
		SendClientMessageEx(i, hColor, szMessage);
	}
	return 1;
}

stock CBroadCast(color,string[],level)
{
	foreach(new i: Player)
	{
		if (PlayerInfo[i][pHelper] >= level)
		{
			SendClientMessageEx(i, color, string);
			//printf("%s", string);
		}
	}
	return 1;
}

stock OOCOff(color,string[])
{
	foreach(new i: Player) {
		if(!gOoc[i]) {
			SendClientMessageEx(i, color, string);
		}
	}
}

stock OOCNews(color,string[])
{
	foreach(new i: Player) {
		if(!gNews[i]) {
			SendClientMessageEx(i, color, string);
		}
	}
}

stock SendDivisionMessage(member, division, color, string[])
{
	foreach(new i: Player) {
		if(PlayerInfo[i][pMember] == member && PlayerInfo[i][pDivision] == division) {
			SendClientMessageEx(i, color, string);
		}
	}
}

stock SendJobMessage(job, color, string[])
{
	foreach(new i: Player) {
		if((PlayerInfo[i][pJob] == job || PlayerInfo[i][pJob2] == job) && JobDuty[i] == 1) {
			SendClientMessageEx(i, color, string);
		}
	}
}

stock SendNewFamilyMessage(family, color, string[])
{
	foreach(new i: Player) {
		if(PlayerInfo[i][pFMember] == family) {
			if(!gFam[i]) {
				SendClientMessageEx(i, color, string);
			}
		}
		if(PlayerInfo[i][pAdmin] > 1 && BigEarFamily[i] == family && BigEar[i] == 5) {
			new szAntiprivacy[128];
			format(szAntiprivacy, sizeof(szAntiprivacy), "(BE) %s", string);
			SendClientMessageEx(i, color, szAntiprivacy);
		}
	}
}

stock SendFamilyMessage(family, color, string[])
{
	foreach(new i: Player) {
		if(PlayerInfo[i][pMember] == family || PlayerInfo[i][pLeader] == family) {
			if(!gFam[i]) {
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock SendTaxiMessage(color, string[])
{
	foreach(new i: Player) {
 		if((PlayerInfo[i][pMember] == 10 || PlayerInfo[i][pLeader] == 10) && PlayerInfo[i][pDuty] > 0) {
 		    SendClientMessageEx(i, color, string);
		}

		if(TransportDuty[i] > 0 && (PlayerInfo[i][pJob] == 17 || PlayerInfo[i][pJob2] == 17 || PlayerInfo[i][pTaxiLicense] == 1)) {
		    if(PlayerInfo[i][pMember] != 10 && PlayerInfo[i][pLeader] != 10) {
		    	SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock RadioBroadCast(playerid, string[])
{
	new MiscString[128], Float: aaaPositions[3];
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pRadioFreq] == PlayerInfo[playerid][pRadioFreq] && PlayerInfo[i][pRadio] >= 1 && gRadio{i} != 0)
		{
			GetPlayerPos(i, aaaPositions[0], aaaPositions[1], aaaPositions[2]);
			format(MiscString, sizeof(MiscString), "** Radio (%d khz) ** %s: %s", PlayerInfo[playerid][pRadioFreq], GetPlayerNameEx(playerid), string);
			SendClientMessageEx(i, PUBLICRADIO_COLOR, MiscString);
			format(MiscString, sizeof(MiscString), "(radio) %s", string);
			SetPlayerChatBubble(playerid,MiscString,COLOR_WHITE,15.0,5000);
		}
	}
}

stock SendTeamBeepMessage(color, string[])
{
	foreach(new i: Player)
	{
		if(IsACop(i))
		{
			SendClientMessageEx(i, color, string);
			RingTone[i] = 20;
		}
	}
}

stock SendVIPMessage(color, string[])
{
	foreach(new i: Player) {
		if((PlayerInfo[i][pDonateRank] >= 1 || PlayerInfo[i][pAdmin] >= 2) && GetPVarType(i, "togVIP")) {
			SendClientMessageEx(i, color, string);
		}
	}
}

stock SendAdvisorMessage(color, string[])
{
	foreach(new i: Player)
	{
		if((PlayerInfo[i][pHelper] >= 2 || PlayerInfo[i][pDonateRank] == 5) && advisorchat[i])
		{
			SendClientMessageEx(i, color, string);
		}
		else
		{
			if(PlayerInfo[i][pAdmin] >= 1 && advisorchat[i])
			{
				SendClientMessageEx(i, color, string);
			}
		}
	}
}

stock SendDutyAdvisorMessage(color, string[])
{
	foreach(new i: Player) {
			if(PlayerInfo[i][pHelper] >= 2 && GetPVarInt(i, "AdvisorDuty") == 1) {
				SendClientMessageEx(i, color, string);
			}
	}
}

stock PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

forward StopMusic();
public StopMusic()
{
	foreach(new i: Player)
	{
		PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
	}
}

stock PlayerFixRadio(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

forward PlayerFixRadio2();
public PlayerFixRadio2()
{
	foreach(new i: Player)
	{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
	}
}

forward WateringStation(playerid);
public WateringStation(playerid)
{
    if(GetPVarInt(playerid, "EventToken") == 1 && GetPVarInt(playerid, "InWaterStationRCP") == 1)
	{
	    if(PlayerInfo[playerid][pHydration] < 100) {
	    	PlayerInfo[playerid][pHydration] += 4;
		} else {
			KillTimer(GetPVarInt(playerid, "WSRCPTimerId"));
	    	SetPVarInt(playerid, "WSRCPTimerId", 0);
     		SetPVarInt(playerid, "InWaterStationRCP", 0);
     		RCPIdCurrent[playerid]++;
     		if(EventRCPT[RCPIdCurrent[playerid]] == 1) {
	    	    DisablePlayerCheckpoint(playerid);
				SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
			}
			else if(EventRCPT[RCPIdCurrent[playerid]] == 4) {
		   		DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
			} else {
			    DisablePlayerCheckpoint(playerid);
			    SetPlayerCheckpoint(playerid, EventRCPX[RCPIdCurrent[playerid]], EventRCPY[RCPIdCurrent[playerid]], EventRCPZ[RCPIdCurrent[playerid]], EventRCPS[RCPIdCurrent[playerid]]);
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "You are now fully rehydrated you can continue to your next checkpoint.");
		}
	} else {
        KillTimer(GetPVarInt(playerid, "WSRCPTimerId"));
	}
}

stock CountCrates()
{
	new count;
	for(new i = 0; i < sizeof(CrateInfo); i++)
	{
	    if(CrateInfo[i][crActive]) count++;
	}
	return count;
}

forward HideCrate(); public HideCrate()
{
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, CrateLoad, E_STREAMER_WORLD_ID, 1);
    return 1;
}

forward ShowCrate(); public ShowCrate()
{
    Streamer_SetIntData(STREAMER_TYPE_OBJECT, CrateLoad, E_STREAMER_WORLD_ID, 0);
    return 1;
}

CMD:disarm(playerid, params[])
{
	new giveplayerid;
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, 0xFFFFFF, "USAGE: /disarm [playerid]");
	    if(IsPlayerConnected(giveplayerid))
	    {
			ResetPlayerWeapons(giveplayerid);
			SendClientMessageEx(playerid, 0xFFFFFF, "Weapons taken.");
			return 1;
	    }
	    else SendClientMessageEx(playerid, 0xFFFFFF, "Player is not connected.");
	}
	else SendClientMessageEx(playerid, 0xFFFFFF, "You are not authorized to use this command!");
	return 1;
}

CMD:igps(playerid, params[]) {
	return cmd_islandgps(playerid, params);
}

CMD:islandgps(playerid, params[]) {
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid == CrateIslandVehicles[0] || vehicleid == CrateIslandVehicles[1] || IsACop(playerid))
	{
	    SetPVarInt(playerid,"igps", 1);
		DisablePlayerCheckpoint(playerid);
		SetPlayerCheckpoint(playerid, -1173.3702,4491.6836,4.4765, 15.0);
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD2, " You do not have access to the GPS co-ordinates");
	}
	return 1;
}

CMD:interiors(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4) {
		ShowInteriorDialog(playerid);
	}
	else {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}

CMD:houseinteriors(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4) {
		ShowHouseInteriorDialog(playerid);
	}
	else {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}

CMD:viewflags(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128];

		SendClientMessageEx(playerid, COLOR_YELLOW, "Player Flag Count List (/viewflag [player] to view):");
		new fCounter;
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pFlagged] > 0)
			{
				format(string, sizeof(string), "%s(%d) Flag Count: %d.",GetPlayerNameEx(i),i,PlayerInfo[i][pFlagged]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				fCounter += 1;
			}
		}
		if(fCounter <= 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "None.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:viewflag(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /viewflag [player]");
	    if(IsPlayerConnected(giveplayerid))
	    {
			DisplayFlags(playerid, giveplayerid);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:vipdate(playerid, params[]) {
	new giveplayerid;
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
	    giveplayerid = playerid;
	}
	else
	{
	    if(sscanf(params, "u", giveplayerid)) giveplayerid = playerid;
	}
	if(1 <= PlayerInfo[giveplayerid][pDonateRank] <= 3 && !PlayerInfo[giveplayerid][pBuddyInvited])
	{
	    new string[128];
	    new drank[20];
		switch(PlayerInfo[giveplayerid][pDonateRank])
		{
			case 1: drank = "Bronze";
			case 2: drank = "Silver";
			case 3: drank = "Gold";
		}
	    new datestring[32];
		datestring = date(PlayerInfo[giveplayerid][pVIPExpire], 4);
		if(PlayerInfo[giveplayerid][pVIPExpire] == 0) format(string, sizeof(string), "* Your %s VIP subscription is not set to expire.", drank);
		else format(string, sizeof(string), "* Your %s VIP subscription expires on %s.", drank, datestring);
	    SendClientMessageEx(playerid, COLOR_VIP, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a VIP subscription.");
	return 1;
}

CMD:rewards(playerid, params[]) {
	if(iRewardPlay)
	{
		new string[128], dedicated;
		SendClientMessageEx(playerid, COLOR_GREEN, "Reward Information:");
		format(string, sizeof(string), "Total Reward Hours: %d", floatround(PlayerInfo[playerid][pRewardHours]));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Rewards Tokens: %d", PlayerInfo[playerid][pGoldBoxTokens]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		if(PlayerInfo[playerid][pRewardHours] < 150)
		{
			dedicated = (150)-floatround(PlayerInfo[playerid][pRewardHours]);
			format(string, sizeof(string), "Hours until Dedicated Player: %d", dedicated);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
		if(!iRewardBox)
		{
		    SendClientMessageEx(playerid, COLOR_RED, "Note: The Reward Gift Box is currently disabled.");
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_RED, "The Reward Play isn't Active! (When it's active you will be notified when you log in).");
	}
	return 1;
}

CMD:toglapcount(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
		if(toglapcount == 0) {
   			toglapcount = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Lap counting has been turned off, new laps completed by players will not be counted.");
		} else {
		    toglapcount = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Lap counting has been turned on, new laps completed by players will now be counted.");
		}
	}
	return 1;
}

CMD:setlapcount(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        new totallaps;
		if(sscanf(params, "i", totallaps)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setlapcount [totallaps]");
    	RaceTotalLaps = totallaps;
		new string[52];
    	format(string, sizeof(string), "You have changed the Total Laps Completed to: %d", RaceTotalLaps);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:eventstats(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {
		new string[50];
		format(string, sizeof(string), "Total Laps Completed: %d | Total Players: %d", RaceTotalLaps, TotalJoinsRace);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:hhc(playerid, params[]) {
	return cmd_hhcheck(playerid, params);
}

CMD:sgc(playerid, params[]) {
	return cmd_sgcheck(playerid, params);
}

CMD:sgcd(playerid, params[]) {
	return cmd_sgcheckdemo(playerid, params);
}

CMD:hhcheck(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hhcheck [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
		    if(HHcheckFloats[giveplayerid][0] != 0)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently being checked for health hacks!");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && giveplayerid != playerid)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
			if(HHcheckUsed != 0)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check is being used by another admin, please try again in a moment!");
		        return 1;
		    }

   			HHcheckUsed = 1;

        	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated a health hack check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 2);

  			format(string, sizeof(string), "Checking %s for health hacks, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);

			GetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
			GetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
			GetPlayerPos(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
			GetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
			HHcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			HHcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);

			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);

            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
            SetPlayerVirtualWorld(giveplayerid, 0);
		    SetPlayerInterior(giveplayerid, 1);
		    SetPlayerHealth(giveplayerid, 100);
		    SetPlayerArmour(giveplayerid, 0);
			SetPlayerPosEx(giveplayerid, -1400.994873, 106.899650, 1032.273437);
			SetPlayerFacingAngle(giveplayerid, 90.66);
			CreateExplosion(-1400.994873, 106.899650 , 1032.273437, 8, 20);

			SetTimerEx("HealthHackCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

forward HealthHackCheck(playerid, giveplayerid);
public HealthHackCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessageEx(playerid, COLOR_YELLOW, "The health hack check result could not be made, the player logged off.");
        HHcheckUsed = 0;
        return 1;
    }
	if(playerTabbed[giveplayerid] != 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check result could not be made, the player alt-tabbed.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPosEx(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

		HHcheckUsed = 0;
  		return 1;
	}
    if(!IsPlayerInRangeOfPoint(giveplayerid,20,-1400.994873, 106.899650, 1032.273437))
    {
        SendClientMessageEx(playerid, COLOR_WHITE, "The health hack check result could not be made, the player was probably desynced/lagging.");

		SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
		SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
		SetPlayerPosEx(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
		SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  		for(new i = 0; i < 6; i++)
		{
			HHcheckFloats[giveplayerid][i] = 0;
		}
		HHcheckVW[giveplayerid] = 0;
		HHcheckInt[giveplayerid] = 0;

        HHcheckUsed = 0;
		return 1;
    }

    new Float:health;
    GetPlayerHealth(giveplayerid, health);
    if(health == 100)
	{
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(string, sizeof(string), "The health hack check on %s was {00F70C}positive{FFFFFF}. The player may be health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________________________");
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ HEALTH HACK CHECK RESULT_______________");
        format(string, sizeof(string), "The health hack check on %s was {FF0606}negative{FFFFFF}. The player was not health hacking.", GetPlayerNameEx(giveplayerid));
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_WHITE, "Health before check: 100.0");
        format(string, sizeof(string), "Health after check: %.1f", health);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________________________");
    }

	SetPlayerHealth(giveplayerid, HHcheckFloats[giveplayerid][0]);
	SetPlayerArmour(giveplayerid, HHcheckFloats[giveplayerid][1]);
	SetPlayerPosEx(giveplayerid, HHcheckFloats[giveplayerid][2], HHcheckFloats[giveplayerid][3], HHcheckFloats[giveplayerid][4]);
	SetPlayerFacingAngle(giveplayerid, HHcheckFloats[giveplayerid][5]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, HHcheckVW[giveplayerid]);
 	SetPlayerInterior(giveplayerid, HHcheckInt[giveplayerid]);

  	for(new i = 0; i < 6; i++)
	{
		HHcheckFloats[giveplayerid][i] = 0;
	}
	HHcheckVW[giveplayerid] = 0;
	HHcheckInt[giveplayerid] = 0;

    HHcheckUsed = 0;
    return 1;
}


CMD:sgcheck(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sgcheck [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
      		if(GetPVarInt(giveplayerid, "sgcheck") == 1)
      		{
      		    SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently being checked for sprunk guard!");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
            SetPVarInt(giveplayerid, "sgcheck", 1);
   			SGcheckUsed++;

        	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated SprunkGuard Check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 2);
  			format(string, sizeof(string), "V-World and Interior Used: %i", SGcheckUsed);
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			format(string, sizeof(string), "Checking %s for SprunkGuard, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);
		    

			GetPlayerPos(giveplayerid, SGcheckPos[giveplayerid][0], SGcheckPos[giveplayerid][1], SGcheckPos[giveplayerid][2]);
			GetPlayerFacingAngle(giveplayerid, SGcheckPos[giveplayerid][3]);
			SGcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			SGcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
			SGcar[giveplayerid] = CreateVehicleEx(593,1756.2932,-2668.3655,14.0089,274.7839, 233, 333, -1, giveplayerid);
			Vehicle_ResetData(SGcar[giveplayerid]);
			VehicleFuel[SGcar[giveplayerid]] = 0.0;
			SetPVarInt(giveplayerid, "sgcheckveh", SGcar[giveplayerid]);
  			format(string, sizeof(string), "VehicleID: %i", GetPVarInt(giveplayerid, "sgcheckveh"));
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SetPlayerVirtualWorld(giveplayerid, SGcheckUsed);
			SetVehicleVirtualWorld(GetPVarInt(giveplayerid, "sgcheckveh"), SGcheckUsed);
			LinkVehicleToInterior(GetPVarInt(giveplayerid, "sgcheckveh"), SGcheckUsed);
		    SetPlayerInterior(giveplayerid, SGcheckUsed);
		    SetVehicleHealth(GetPVarInt(giveplayerid, "sgcheckveh"), 5000);
			PutPlayerInVehicle(giveplayerid, GetPVarInt(giveplayerid, "sgcheckveh"), 0);
            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
			//SetPVarInt(giveplayerid, "sgcheckveh", vehicleid);
			SetTimerEx("SprunkGuardCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:sgcheckdemo(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sgcheck [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 3)
		{
      		if(GetPVarInt(giveplayerid, "sgcheck") == 1)
      		{
      		    SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently being checked for sprunk guard!");
				return 1;
			}
   			if(playerTabbed[giveplayerid] != 0)
   			{
      			SendClientMessageEx(playerid, COLOR_WHITE, "That player is currently alt-tabbed!");
		        return 1;
   			}
            SetPVarInt(giveplayerid, "sgcheck", 1);
   			SGcheckUsed++;

        	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated SprunkGuard Check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
        	ABroadCast(COLOR_YELLOW, string, 2);
  			format(string, sizeof(string), "V-World and Interior Used: %i", SGcheckUsed);
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);
  			format(string, sizeof(string), "Checking %s for SprunkGuard, please wait....", GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);


			GetPlayerPos(giveplayerid, SGcheckPos[giveplayerid][0], SGcheckPos[giveplayerid][1], SGcheckPos[giveplayerid][2]);
			GetPlayerFacingAngle(giveplayerid, SGcheckPos[giveplayerid][3]);
			SGcheckVW[giveplayerid] = GetPlayerVirtualWorld(giveplayerid);
			SGcheckInt[giveplayerid] = GetPlayerInterior(giveplayerid);
			DeletePVar(giveplayerid, "IsFrozen");
			TogglePlayerControllable(giveplayerid, 1);
            SetPlayerCameraPos(giveplayerid, 785.1896,1692.6887,5.2813);
			SetPlayerCameraLookAt(giveplayerid, 785.1896,1692.6887,0);
			SGcar[giveplayerid] = CreateVehicleEx(593,1756.2932,-2668.3655,14.0089,274.7839, 233, 333, -1, giveplayerid);
			Vehicle_ResetData(SGcar[giveplayerid]);
			VehicleFuel[SGcar[giveplayerid]] = 0.0;
			SetPVarInt(giveplayerid, "sgcheckveh", SGcar[giveplayerid]);
  			format(string, sizeof(string), "VehicleID: %i", GetPVarInt(giveplayerid, "sgcheckveh"));
		    SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SetPlayerVirtualWorld(giveplayerid, SGcheckUsed);
			SetVehicleVirtualWorld(GetPVarInt(giveplayerid, "sgcheckveh"), SGcheckUsed);
			LinkVehicleToInterior(GetPVarInt(giveplayerid, "sgcheckveh"), SGcheckUsed);
		    SetPlayerInterior(giveplayerid, SGcheckUsed);
		    SetVehicleHealth(GetPVarInt(giveplayerid, "sgcheckveh"), 5000);
			PutPlayerInVehicle(giveplayerid, GetPVarInt(giveplayerid, "sgcheckveh"), 0);
			//SetPVarInt(giveplayerid, "sgcheckveh", vehicleid);
			SetTimerEx("SprunkGuardCheck", 1250, 0, "dd", playerid, giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

forward SprunkGuardCheck(playerid, giveplayerid);
public SprunkGuardCheck(playerid, giveplayerid)
{
	new string[128];
 	if(giveplayerid == INVALID_PLAYER_ID)
    {
        SendClientMessageEx(playerid, COLOR_YELLOW, "The SprunkGuard Check result could not be made, the player logged off.");
        HHcheckUsed = 0;
        return 1;
    }
	if(playerTabbed[giveplayerid] != 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "The SprunkGuard Check result could not be made, the player alt-tabbed.");

		SetPlayerPosEx(giveplayerid, SGcheckPos[giveplayerid][0], SGcheckPos[giveplayerid][1], SGcheckPos[giveplayerid][2]);
		SetPlayerFacingAngle(giveplayerid, SGcheckPos[giveplayerid][3]);
		SetCameraBehindPlayer(giveplayerid);
		SetPlayerVirtualWorld(giveplayerid, SGcheckVW[giveplayerid]);
 		SetPlayerInterior(giveplayerid, SGcheckInt[giveplayerid]);

		SGcheckVW[giveplayerid] = 0;
		SGcheckInt[giveplayerid] = 0;

  		return 1;
	}

    new Float:health;
    GetVehicleHealth(GetPVarInt(giveplayerid, "sgcheckveh"), health);
    if(health != 5000)
	{
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ SPRUNK GUARD CHECK RESULT_______________");
        format(string, sizeof(string), "The SprunkGuard Check on %s was {00F70C}positive{FFFFFF}. The player has SprunkGuard!", GetPlayerNameEx(giveplayerid));
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle Health before check: 5000.0");
        format(string, sizeof(string), "Vehicle Health after check: %.1f", health);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________________________");
		format(string, sizeof(string), "%s sgchecked %s and returned %.1f HP", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), health);
		Log("logs/blowup.log", string);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ SPRUNK GUARD CHECK RESULT_______________");
        format(string, sizeof(string), "The SprunkGuard Check on %s was {FF0606}negative{FFFFFF}. The player was not using SprunkGuard.", GetPlayerNameEx(giveplayerid));
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle Health before check: 5000.0");
        format(string, sizeof(string), "Vehicle Health after check: %.1f", health);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________________________");
		format(string, sizeof(string), "%s sgchecked %s and returned negative", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		Log("logs/blowup.log", string);
    }

	SetPlayerPosEx(giveplayerid, SGcheckPos[giveplayerid][0], SGcheckPos[giveplayerid][1], SGcheckPos[giveplayerid][2]);
	SetPlayerFacingAngle(giveplayerid, SGcheckPos[giveplayerid][3]);
	SetCameraBehindPlayer(giveplayerid);
	SetPlayerVirtualWorld(giveplayerid, SGcheckVW[giveplayerid]);
	SetPlayerInterior(giveplayerid, SGcheckInt[giveplayerid]);

	SGcheckVW[giveplayerid] = 0;
	SGcheckInt[giveplayerid] = 0;
	DestroyVehicle(GetPVarInt(giveplayerid, "sgcheckveh"));
	DeletePVar(giveplayerid, "sgcheck");
	DeletePVar(giveplayerid, "sgcheckveh");
	SGcar[giveplayerid] = -1;
    return 1;
}

CMD:setboombox(playerid, params[])
{
	if(GetPVarType(playerid, "pBoomBox"))
	{
		ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Select a Station\nTurn Radio Off","Select", "Close");
    }
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "You don't have a boombox out!");
	}
	return 1;
}

CMD:setstation(playerid, params[]) {
    if(!IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be in a car to use a car radio.");
	}
	ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nTurn radio off","Select", "Close");
    return 1;
}


CMD:audiostopurl(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4) {
    	if(IsValidDynamicArea(audiourlid))
    	{
	        new string[128];

	        foreach(new i: Player) {
	            if(IsPlayerInRangeOfPoint(i, audiourlparams[3], audiourlparams[0], audiourlparams[1], audiourlparams[2]))
	            {
	        		StopAudioStreamForPlayerEx(i);
				}
	        }
	        DestroyDynamicArea(audiourlid);
	        format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has stopped the audiourl",GetPlayerNameEx(playerid));
	        ABroadCast(COLOR_YELLOW, string, 4);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "There is no audiourl to stop");
		}
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
        return 1;
    }
    return 1;
}



CMD:id(playerid, params[]) {
	if(isnull(params)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /id [player name]");
	}

	new
		szMessage[64],
		szPlayerName[MAX_PLAYER_NAME],
		iTargetID = strval(params);

	if(IsNumeric(params) && IsPlayerConnected(strval(params))) {
	    format(szMessage, sizeof szMessage, "(ID: %d) - (Name: %s) - (Level: %d) - (Ping: %d)", iTargetID, GetPlayerNameEx(iTargetID), PlayerInfo[iTargetID][pLevel], GetPlayerPing(iTargetID));
		return SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	}
	else if(strlen(params) < 3) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Input at least 3 characters to search.");
	}
	else foreach(new i: Player) {
		GetPlayerName(i, szPlayerName, sizeof szPlayerName);
		if(strfind(szPlayerName, params, true) != -1) {
			format(szMessage, sizeof szMessage, "(ID: %d) - (Name: %s) - (Level: %d) - (Ping: %d)", i, GetPlayerNameEx(i), PlayerInfo[i][pLevel], GetPlayerPing(i));
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		}
	}
	return 1;
}

CMD:givegun(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 4) {
		if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
        new sstring[128], playa, gun;

        if(sscanf(params, "ud", playa, gun)) {
            SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givegun [player] [weaponid]");
            SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
            SendClientMessageEx(playerid, COLOR_GRAD4, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
            SendClientMessageEx(playerid, COLOR_GRAD4, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
            SendClientMessageEx(playerid, COLOR_GRAD3, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle");
            SendClientMessageEx(playerid, COLOR_GRAD4, "26: Sawnoff Shotgun 27: Combat Shotgun 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
            SendClientMessageEx(playerid, COLOR_GRAD4, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
            SendClientMessageEx(playerid, COLOR_GRAD4, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
            SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
            return 1;
        }

        format(sstring, sizeof(sstring), "You have given %s gun ID %d!",GetPlayerNameEx(playa),gun);
        if(gun < 1||gun > 47)
            { SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid weapon ID!"); return 1; }
        if(IsPlayerConnected(playa)) {
            if((PlayerInfo[playa][pConnectHours] < 2 || PlayerInfo[playa][pWRestricted] > 0) && gun != 46 && gun != 43) return SendClientMessageEx(playerid, COLOR_GRAD2, "That player is currently restricted from carrying weapons");
            if(playa != INVALID_PLAYER_ID && gun <= 20 || gun >= 22) {
                PlayerInfo[playa][pAGuns][GetWeaponSlot(gun)] = gun;
                GivePlayerValidWeapon(playa, gun, 60000);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
            else if(playa != INVALID_PLAYER_ID && gun == 21) {
                JetPack[playa] = 1;
                SetPlayerSpecialAction(playa, SPECIAL_ACTION_USEJETPACK);
                SendClientMessageEx(playerid, COLOR_GRAD1, sstring);
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}


CMD:jetpack(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 4) {
        JetPack[playerid] = 1;
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
        return 1;
    }
    new string[128], plo;
    if(sscanf(params, "u", plo)) {
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /jetpack [player]");
        return 1;
    }
    if (IsPlayerConnected(plo)) {
        if(plo != INVALID_PLAYER_ID) {
            if (PlayerInfo[playerid][pAdmin] >= 4) {
                SendClientMessageEx(plo, COLOR_GRAD1, "Enjoy your new jetpack!");
                JetPack[plo] = 1;
                SetPlayerSpecialAction(plo, SPECIAL_ACTION_USEJETPACK);
                format(string, sizeof(string), "AdmCmd: %s has received a jetpack from %s %s", GetPlayerNameEx(plo),ARank(playerid), GetPlayerNameEx(playerid));
                SendClientMessageToAllEx(COLOR_LIGHTRED, string);
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
            }
        }
    }
    else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
    return 1;
}



CMD:sethp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sethp [player] [health]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 4) {
        if(IsPlayerConnected(playa)) {
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerHealth(playa, health);
                format(string, sizeof(string), "You have set %s's health to %d.", GetPlayerNameEx(playa), health);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
        }
        else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:setmyhp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pUndercover] == 0 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    new string[128], health;
    if(sscanf(params, "d", health)) {
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmyhp [health]");
        return 1;
    }
    if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] == 1) {
        SetPlayerHealth(playerid, health);
        format(string, sizeof(string), "You have set your health to %d.", health);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:setarmor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    new string[128], playa, health;
    if(sscanf(params, "ud", playa, health))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setarmor [player] [armor]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 4)
	{
        if(IsPlayerConnected(playa))
		{
            if(playa != INVALID_PLAYER_ID)
			{
                SetPlayerArmour(playa, health);
                format(string, sizeof(string), "You have set %s's armor to %d.", GetPlayerNameEx(playa), health);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:setmyarmor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pUndercover] == 0 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    new string[128], armor;
    if(sscanf(params, "d", armor))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmyarmor [health]");
        return 1;
    }
    if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] == 1)
	{
        SetPlayerArmour(playerid, armor);
        format(string, sizeof(string), "You have set your armor to %d.", armor);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:setarmorall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    new armor;
    if(sscanf(params, "d", armor)) {
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setarmorall [armor]");
        return 1;
    }

    if (PlayerInfo[playerid][pAdmin] >= 1337) {
        foreach(new i: Player) {
            SetPlayerArmour(i, armor);
        }
    }

    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:fix(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
    	new string[32 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "You can not repair while inside the vehicle.");
		    return 1;
		}

  		if( PlayerInfo[playerid][pMechTime] > 0 )
		{
  			format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]);
     		SendClientMessageEx(playerid, COLOR_GRAD1,string);
     	}
		else if(GetPVarInt(playerid, "EventToken"))
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this while in an event.");
		}
  		else
		{
			new closestcar = GetClosestCar(playerid);

  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 10.0))
  			{
				if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
					if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle hood must be opened in order to repair it.");
						return 1;
					}
				}
  				PlayerInfo[playerid][pMechTime] = 60;
   				SetVehicleHealth(closestcar, 1000.0);
				Vehicle_Armor(closestcar);
				Vehicle_DArmor(closestcar);
    			format(string, sizeof(string), "* %s (%d) has repaired the vehicle.", GetPlayerNameEx(playerid),playerid);
    			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not close enough to any vehicle.");
  		}
    }
    else return SendClientMessageEx(playerid, COLOR_WHITE, "You are not a Mechanic!" );
    return 1;
}

CMD:turfinfo(playerid, params[])
{
    if(GetPlayerTurfWarsZone(playerid) != -1) {
        new string[128];
        new tw = GetPlayerTurfWarsZone(playerid);
        format(string,sizeof(string),"|___________ (ID: %d) %s ___________|",tw,TurfWars[tw][twName]);
        SendClientMessageEx(playerid, COLOR_GREEN, string);
        if(TurfWars[tw][twOwnerId] != -1) {
            format(string,sizeof(string),"Owner: %s.",FamilyInfo[TurfWars[tw][twOwnerId]][FamilyName]);
        }
        else {
            format(string,sizeof(string),"Owner: Vacant.");
        }
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string,sizeof(string),"Vulnerable: %d Hours.",TurfWars[tw][twVulnerable]);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string,sizeof(string),"Locked: %d.",TurfWars[tw][twLocked]);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string,sizeof(string),"Active: %d.",TurfWars[tw][twActive]);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        if(TurfWars[tw][twActive] != 0) {
            format(string,sizeof(string),"Time Left: %d Secs.",TurfWars[tw][twTimeLeft]);
            SendClientMessageEx(playerid, COLOR_WHITE, string);
            if(TurfWars[tw][twAttemptId] == -1) {
                format(string,sizeof(string),"Takeover Faction: Law Enforcement.");
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
            else {
                format(string,sizeof(string),"Takeover Family: %s.",FamilyInfo[TurfWars[tw][twAttemptId]][FamilyName]);
                SendClientMessageEx(playerid, COLOR_WHITE, string);
            }
        }
        switch(TurfWars[tw][twSpecial]) {
            case 1:
            {
                format(string,sizeof(string),"Special Perks: Extortion.");
            }
            default:
            {
                format(string,sizeof(string),"Special Perks: None.");
            }
        }
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a turf!");
    }
    return 1;
}

CMD:unlockarenas(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }
    for(new i = 0; i < MAX_ARENAS; i++) {
        if(PaintBallArena[i][pbLocked] == 2) {
            ResetPaintballArena(i);
        }
    }
    new string[128];
    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (%d) has unlocked all Paintball Arenas.", GetPlayerNameEx(playerid),playerid);
    ABroadCast(COLOR_YELLOW, string, 2);
    format(string, sizeof(string), "* %s %s (%d) has unlocked all Paintball Arenas, you may join/create them now.",ARank(playerid), GetPlayerNameEx(playerid),playerid);
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
    return 1;
}

CMD:lockarenas(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }
    new string[128];
    for(new i = 0; i < MAX_ARENAS; i++) {
        foreach(new p: Player) {
            new arenaid = GetPVarInt(p, "IsInArena");
            if(arenaid == i) {
                if(PaintBallArena[arenaid][pbBidMoney] > 0) {
                    GivePlayerCash(p,PaintBallArena[GetPVarInt(p, "IsInArena")][pbBidMoney]);
                    format(string,sizeof(string),"You have been refunded a total of $%d because of premature closure.",PaintBallArena[GetPVarInt(p, "IsInArena")][pbBidMoney]);
                    SendClientMessageEx(p, COLOR_WHITE, string);
                }
                if(arenaid == GetPVarInt(p, "ArenaNumber")) {
                    switch(PaintBallArena[arenaid][pbGameType]) {
                        case 1:
                        {
                            if(PlayerInfo[p][pDonateRank] < 3) {
                                PlayerInfo[p][pPaintTokens] += 3;
                                format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",3);
                                SendClientMessageEx(p, COLOR_WHITE, string);
                            }
                        }
                        case 2:
                        {
                            if(PlayerInfo[p][pDonateRank] < 3) {
                                PlayerInfo[p][pPaintTokens] += 4;
                                format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",4);
                                SendClientMessageEx(p, COLOR_WHITE, string);
                            }
                        }
                        case 3:
                        {
                            if(PlayerInfo[p][pDonateRank] < 3) {
                                PlayerInfo[p][pPaintTokens] += 5;
                                format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
                                SendClientMessageEx(p, COLOR_WHITE, string);
                            }
                        }
                        case 4:
                        {
                            if(PlayerInfo[p][pDonateRank] < 3) {
                                PlayerInfo[p][pPaintTokens] += 5;
                                format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
                                SendClientMessageEx(p, COLOR_WHITE, string);
                            }
                        }
                        case 5:
                        {
                            if(PlayerInfo[p][pDonateRank] < 3) {
                                PlayerInfo[p][pPaintTokens] += 6;
                                format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",6);
                                SendClientMessageEx(p, COLOR_WHITE, string);
                            }
                        }
                    }
                }
                LeavePaintballArena(p, arenaid);
            }
        }
        ResetPaintballArena(i);
        PaintBallArena[i][pbLocked] = 2;
    }
    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has locked all Paintball Arenas.", GetPlayerNameEx(playerid));
    ABroadCast(COLOR_YELLOW, string, 2);
    format(string, sizeof(string), "* Admin %s has locked all Paintball Arenas for some short maintenance.", GetPlayerNameEx(playerid));
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
    return 1;
}

CMD:savetwpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] == 1) {
        new string[128];
        new tw = GetPVarInt(playerid, "EditingTurfs");
        new stage = GetPVarInt(playerid, "EditingTurfsStage");
        new Float:x, Float: y, Float: z;
        new Float:tminx, Float: tminy, Float: tmaxx, Float: tmaxy;
        GetPlayerPos(playerid, x, y, z);
        if(stage == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are not editing any Turf Dimensions right now!");
            return 1;
        }
        else {
            switch(stage) {
                case 1:
                {
                    SetPVarFloat(playerid, "EditingTurfsMinX", x);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf West Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the South Wall.");
                    SetPVarInt(playerid, "EditingTurfsStage", 2);
                }
                case 2:
                {
                    SetPVarFloat(playerid, "EditingTurfsMinY", y);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf South Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the East Wall.");
                    SetPVarInt(playerid, "EditingTurfsStage", 3);
                }
                case 3:
                {
                    SetPVarFloat(playerid, "EditingTurfsMaxX", x);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf East Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the North Wall.");
                    SetPVarInt(playerid, "EditingTurfsStage", 4);
                }
                case 4:
                {
                    SetPVarFloat(playerid, "EditingTurfsMaxY", y);
                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Turf North Wall.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    format(string,sizeof(string),"You have successfully re-created (TurfID: %d) %s.",tw,TurfWars[tw][twName]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    SetPVarInt(playerid, "EditingTurfsStage", -1);

                    DestroyTurfWarsZone(tw);

                    tminx = GetPVarFloat(playerid, "EditingTurfsMinX");
                    tminy = GetPVarFloat(playerid, "EditingTurfsMinY");
                    tmaxx = GetPVarFloat(playerid, "EditingTurfsMaxX");
                    tmaxy = GetPVarFloat(playerid, "EditingTurfsMaxY");

                    TurfWars[tw][twMinX] = tminx;
                    TurfWars[tw][twMinY] = tminy;
                    TurfWars[tw][twMaxX] = tmaxx;
                    TurfWars[tw][twMaxY] = tmaxy;

                    SetPVarFloat(playerid, "EditingTurfsMinX", 0.0);
                    SetPVarFloat(playerid, "EditingTurfsMinY", 0.0);
                    SetPVarFloat(playerid, "EditingTurfsMaxX", 0.0);
                    SetPVarFloat(playerid, "EditingTurfsMaxY", 0.0);

                    CreateTurfWarsZone(1,tw);
                    ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
                }
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
    }
    return 1;
}

CMD:savedmpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "EditingDMPos") == 0) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any spawn positions.");
            return 1;
        }
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new dmposid = GetPVarInt(playerid, "EditingDMPos");
        new Float:x, Float: y, Float: z, Float: angle;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        switch(dmposid) {
            case 1:
            {
                PaintBallArena[arenaid][pbDeathmatch1][0] = x;
                PaintBallArena[arenaid][pbDeathmatch1][1] = y;
                PaintBallArena[arenaid][pbDeathmatch1][2] = z;
                PaintBallArena[arenaid][pbDeathmatch1][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 1.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
            case 2:
            {
                PaintBallArena[arenaid][pbDeathmatch2][0] = x;
                PaintBallArena[arenaid][pbDeathmatch2][1] = y;
                PaintBallArena[arenaid][pbDeathmatch2][2] = z;
                PaintBallArena[arenaid][pbDeathmatch2][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 2.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
            case 3:
            {
                PaintBallArena[arenaid][pbDeathmatch3][0] = x;
                PaintBallArena[arenaid][pbDeathmatch3][1] = y;
                PaintBallArena[arenaid][pbDeathmatch3][2] = z;
                PaintBallArena[arenaid][pbDeathmatch3][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 3.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
            case 4:
            {
                PaintBallArena[arenaid][pbDeathmatch4][0] = x;
                PaintBallArena[arenaid][pbDeathmatch4][1] = y;
                PaintBallArena[arenaid][pbDeathmatch4][2] = z;
                PaintBallArena[arenaid][pbDeathmatch4][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited DM Spawn Position 4.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingDMPos", 0);
                PaintballEditArenaDMSpawns(playerid);
            }
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:saveteampos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "EditingTeamPos") == 0) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any spawn positions.");
            return 1;
        }
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new teamposid = GetPVarInt(playerid, "EditingTeamPos");
        new Float:x, Float: y, Float: z, Float: angle;
        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        switch(teamposid) {
            case 1:
            {
                PaintBallArena[arenaid][pbTeamRed1][0] = x;
                PaintBallArena[arenaid][pbTeamRed1][1] = y;
                PaintBallArena[arenaid][pbTeamRed1][2] = z;
                PaintBallArena[arenaid][pbTeamRed1][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Spawn Position 1.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 2:
            {
                PaintBallArena[arenaid][pbTeamRed2][0] = x;
                PaintBallArena[arenaid][pbTeamRed2][1] = y;
                PaintBallArena[arenaid][pbTeamRed2][2] = z;
                PaintBallArena[arenaid][pbTeamRed2][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Spawn Position 2.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 3:
            {
                PaintBallArena[arenaid][pbTeamRed3][0] = x;
                PaintBallArena[arenaid][pbTeamRed3][1] = y;
                PaintBallArena[arenaid][pbTeamRed3][2] = z;
                PaintBallArena[arenaid][pbTeamRed3][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Spawn Position 3.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 4:
            {
                PaintBallArena[arenaid][pbTeamBlue1][0] = x;
                PaintBallArena[arenaid][pbTeamBlue1][1] = y;
                PaintBallArena[arenaid][pbTeamBlue1][2] = z;
                PaintBallArena[arenaid][pbTeamBlue1][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Spawn Position 1.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 5:
            {
                PaintBallArena[arenaid][pbTeamBlue2][0] = x;
                PaintBallArena[arenaid][pbTeamBlue2][1] = y;
                PaintBallArena[arenaid][pbTeamBlue2][2] = z;
                PaintBallArena[arenaid][pbTeamBlue2][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Spawn Position 2.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
            case 6:
            {
                PaintBallArena[arenaid][pbTeamBlue3][0] = x;
                PaintBallArena[arenaid][pbTeamBlue3][1] = y;
                PaintBallArena[arenaid][pbTeamBlue3][2] = z;
                PaintBallArena[arenaid][pbTeamBlue3][3] = angle;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f, Angle=%f",x,y,z,angle);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Spawn Position 3.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingTeamPos", 0);
                PaintballEditArenaTeamSpawns(playerid);
            }
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:saveflagpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "EditingFlagPos") == 0) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any flag positions.");
            return 1;
        }
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new flagposid = GetPVarInt(playerid, "EditingFlagPos");
        new Float:x, Float: y, Float: z;
        GetPlayerPos(playerid, x, y, z);

        switch(flagposid) {
            case 1:                               // Red Flag Spawn Position
            {
                PaintBallArena[arenaid][pbFlagRedSpawn][0] = x;
                PaintBallArena[arenaid][pbFlagRedSpawn][1] = y;
                PaintBallArena[arenaid][pbFlagRedSpawn][2] = z;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Red Team Flag Position.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingFlagPos", 0);
                PaintballEditArenaFlagSpawns(playerid);
            }
            case 2:                               // Blue Flag Spawn Position
            {
                PaintBallArena[arenaid][pbFlagBlueSpawn][0] = x;
                PaintBallArena[arenaid][pbFlagBlueSpawn][1] = y;
                PaintBallArena[arenaid][pbFlagBlueSpawn][2] = z;

                format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited Blue Team Flag Position.");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);

                SetPVarInt(playerid, "EditingFlagPos", 0);
                PaintballEditArenaFlagSpawns(playerid);
            }
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:savehillpos(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337) {
        if(GetPVarInt(playerid, "ArenaNumber") == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are currently not editing any arenas.");
            return 1;
        }
        new string[128];
        new arenaid = GetPVarInt(playerid, "ArenaNumber");
        new stage = GetPVarInt(playerid, "EditingHillStage");
        new Float:x, Float: y, Float: z;
        GetPlayerPos(playerid, x, y, z);

        if(stage == -1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You are not editing any Hill Positions right now!");
            return 1;
        }
        else {
            switch(stage) {
                case 1:
                {
                    PaintBallArena[arenaid][pbHillX] = x;
                    PaintBallArena[arenaid][pbHillY] = y;
                    PaintBallArena[arenaid][pbHillZ] = z;

                    format(string,sizeof(string),"X=%f, Y=%f, Z=%f",x,y,z);
                    SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully edited the Hill Position.");
                    SendClientMessageEx(playerid, COLOR_GRAD2, string);

                    SetPVarInt(playerid, "EditingHillStage", -1);
                    PaintballEditArenaMenu(playerid);
                }
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
    }
    return 1;
}

CMD:twmenu(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] == 1)
	{
        ShowPlayerDialog(playerid,TWADMINMENU,DIALOG_STYLE_LIST,"Turf Wars - Admin Menu:","Edit Turfs...\nEdit Family Colors...","Select","Exit");
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
    }
    return 1;
}

CMD:switchteam(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == -1) {
        SendClientMessageEx(playerid,COLOR_WHITE,"You are not in a arena, you can not switch teams!");
        return 1;
    }
    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1) {
        SendClientMessageEx(playerid,COLOR_WHITE,"You can not switch teams while holding the flag!");
        return 1;
    }

    new arenaid = GetPVarInt(playerid, "IsInArena");
    if(PaintBallArena[arenaid][pbGameType] == 2 || PaintBallArena[arenaid][pbGameType] == 3 || PaintBallArena[arenaid][pbGameType] == 5) {
        PaintballSwitchTeam(playerid);
    }
    else {
        SendClientMessageEx(playerid,COLOR_WHITE,"You can not switch teams in this gamemode!");
    }
    return 1;
}

CMD:joinarena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") == -1) {
        if(PlayerInfo[playerid][pConnectHours] < 2) {
            SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to join a Paintball Match due to your weapon restriction.");
            return 1;
        }
        if(GetPVarInt(playerid, "Packages") >= 1 || TaxiAccepted[playerid] != INVALID_PLAYER_ID || EMSAccepted[playerid] != INVALID_PLAYER_ID || BusAccepted[playerid] != INVALID_PLAYER_ID || MedicAccepted[playerid] != INVALID_PLAYER_ID || MechanicCallTime[playerid] >= 1) {
            SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
            return 1;
        }
        if(PlayerInfo[playerid][pAdmin] > 2) {
            ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
            return 1;
        }
        if(IsPlayerInRangeOfPoint(playerid,10.0,1294.5062,-1445.0599,0.4403)) {
            ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "You are not near the Paintball Arena!");
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are already in a arena!");
    }
    return 1;
}

CheckPointCheck(iTargetID)  {
	if(GetPVarType(iTargetID, "TrackCar") > 0 || GetPVarType(iTargetID, "Packages") > 0 || TaxiAccepted[iTargetID] != INVALID_PLAYER_ID || EMSAccepted[iTargetID] != INVALID_PLAYER_ID || BusAccepted[iTargetID] != INVALID_PLAYER_ID || gPlayerCheckpointStatus[iTargetID] != CHECKPOINT_NONE || MedicAccepted[iTargetID] != INVALID_PLAYER_ID || MechanicCallTime[iTargetID] >= 1) {
		return 1;
	}
	return 0;
}

CMD:killcheckpoint(playerid, params[])
{
	TaxiAccepted[playerid] = INVALID_PLAYER_ID;
	EMSAccepted[playerid] = INVALID_PLAYER_ID;
	BusAccepted[playerid] = INVALID_PLAYER_ID;
	MedicAccepted[playerid] = INVALID_PLAYER_ID;
	MechanicCallTime[playerid] = 0;

    DeletePVar(playerid, "TrackCar");
    DisablePlayerCheckpoint(playerid);
	gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 	TaxiCallTime[playerid] = 0;
  	BusCallTime[playerid] = 0;
  	DeletePVar(playerid, "Pizza");
	DeletePVar(playerid, "Packages");
	SendClientMessageEx(playerid,COLOR_WHITE,"All current checkpoints, trackers and accepted fares have been reset.");
	return 1;
}

CMD:exitarena(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        if(GetPlayerState(playerid) == PLAYER_STATE_WASTED) {
            SendClientMessageEx(playerid, COLOR_WHITE, "You cannot do that at this time.");
            return 1;
        }
        if(PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbTimeLeft] <= 30) {
            SendClientMessageEx(playerid, COLOR_WHITE, "You cannot leave when there is less than 30 seconds left!");
            return 1;
        }
        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a arena!");
    }
    return 1;
}

CMD:savecfgs(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
        return 1;
    }
    SendClientMessageEx(playerid, COLOR_WHITE, "* Saving CFG Files..");
    SaveTurfWars();
    SaveFamilies();
    SendClientMessageEx(playerid, COLOR_WHITE, "* Done");
    return 1;
}


CMD:loadcfgs(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
        return 1;
    }
    SendClientMessageEx(playerid, COLOR_WHITE, "* Reloading CFG Files..");
    g_mysql_LoadMOTD();
	// Local Configs
	Misc_Load();
	Tax_Load();
    SendClientMessageEx(playerid, COLOR_WHITE, "* Done");
    return 1;
}

CMD:mods(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2) {

        new
			string[12 + MAX_PLAYER_NAME];

        SendClientMessageEx(playerid, COLOR_GRAD1, "Moderators Online:");
        foreach(new i: Player) if(PlayerInfo[i][pAdmin] == 1) format(string, sizeof(string), "* %s (ID %i)", GetPlayerNameEx(i), i), SendClientMessageEx(playerid, COLOR_GRAD2, string);
    }
    return 1;
}

CMD:admins(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "Admins Online:");
        foreach(new i: Player) {
            if(PlayerInfo[i][pAdmin] >= 2/* && PlayerInfo[i][pAdmin] <= PlayerInfo[playerid][pAdmin]*/) {
                new string[128], sstring[128], rtoken;
                new strFromFile[128];
                new month, day, year;
                new playern[MAX_PLAYER_NAME];
                GetPlayerName(i, playern, sizeof(playern));
                getdate(year, month, day);
                format(sstring,sizeof(sstring),"admins/rtokens/%s[%d'%d'%d]",playern,month,day,year);
                if(fexist(sstring)) {
                    new File: file = fopen(sstring, io_read);
                    if(file) {
                        fread(file, strFromFile);
                        fclose(file);
                        rtoken = strval(strFromFile);
                    }
                }

                if(PlayerInfo[playerid][pAdmin] >= 1337) {
                    if(PlayerInfo[i][pAdmin] == 2) {
                        format(string, sizeof(string), "*Junior Admin: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 3) {
                        format(string, sizeof(string), "*General Admin: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 4) {
                        format(string, sizeof(string), "*Senior Admin: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 1337) {
                        format(string, sizeof(string), "*Head Admin: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 1338) {
                        format(string, sizeof(string), "*Admin Director: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 13338) {
                        format(string, sizeof(string), "*Co-Executive Admin: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 99998) {
                        format(string, sizeof(string), "*Lead Developer: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else if(PlayerInfo[i][pAdmin] == 99999) {
                        format(string, sizeof(string), "*Executive Admin: %s (%d) (Reports Today: %d)", GetPlayerNameEx(i),i, rtoken);
                    }
                    else {
                        format(string, sizeof(string), "*Undefined Admin (%d): %s", PlayerInfo[i][pAdmin], GetPlayerNameEx(i));
                    }
                }
                else {
                    if(PlayerInfo[i][pAdmin] == 2) {
                        format(string, sizeof(string), "*Junior Admin: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 3) {
                        format(string, sizeof(string), "*General Admin: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 4) {
                        format(string, sizeof(string), "*Senior Admin: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 1337) {
                        format(string, sizeof(string), "*Head Admin: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 1338) {
                        format(string, sizeof(string), "*Admin Director: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 13338) {
                        format(string, sizeof(string), "*Co-Executive Admin: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 99998) {
                        format(string, sizeof(string), "*Lead Developer: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else if(PlayerInfo[i][pAdmin] == 99999) {
                        format(string, sizeof(string), "*Executive Admin: %s (%d)", GetPlayerNameEx(i),i);
                    }
                    else {
                        format(string, sizeof(string), "*Undefined Admin (%d): %s", PlayerInfo[i][pAdmin], GetPlayerNameEx(i));
                    }
                }

                if(PlayerInfo[i][pBanAppealer]) strcat(string, " [BA]");
                if(PlayerInfo[i][pShopTech]) strcat(string, " [ST]");
                if(PlayerInfo[i][pUndercover]) strcat(string, " [UC]");
                if(PlayerInfo[i][pFactionModerator]) strcat(string, " [FMOD]");
                if(PlayerInfo[i][pGangModerator]) strcat(string, " [GMOD]");
                if(PlayerInfo[i][pTogReports]) strcat(string, " [SPEC MODE]");
                if(PlayerInfo[i][pPR]) strcat(string, " [PR]");
                SendClientMessageEx(playerid, COLOR_GRAD2, string);
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you have questions regarding gameplay, or the server use /newb.");
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you see suspicious happenings/players /report [id] [reason].");
    }
    return 1;
}

CMD:juniorAdmins(playerid, params[])
{
    new string[128];
    if(PlayerInfo[playerid][pHelper] >= 1) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "Junior Administrators Online:");
        foreach(new i: Player) {
            new sstring[128], rtokens = 0;
            new strFromFile[128];
            new month, day, year;
            new playern[MAX_PLAYER_NAME];
            GetPlayerName(i, playern, sizeof(playern));
            getdate(year, month, day);
            format(sstring,sizeof(sstring),"admins/catokens/%s[%d'%d'%d]",playern,month,day,year);
            if(fexist(sstring)) {
                new File: file = fopen(sstring, io_read);
                if(file) {
                    fread(file, strFromFile);
                    fclose(file);
                    rtokens = strval(strFromFile);
                }
            }
            if(PlayerInfo[i][pHelper] != 0 && PlayerInfo[i][pHelper] <= PlayerInfo[playerid][pHelper]) {
                if(PlayerInfo[i][pHelper] == 1&&PlayerInfo[i][pAdmin]<2) {
                    format(string, sizeof(string), "** Helper: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                }
                if(PlayerInfo[i][pHelper] == 2&&PlayerInfo[i][pAdmin]<2) {
                    format(string, sizeof(string), "** Junior Administrator: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                }
                if(PlayerInfo[i][pHelper] == 3&&PlayerInfo[i][pAdmin]<2) {
                    format(string, sizeof(string), "** Senior Advisor: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                }
                if(PlayerInfo[i][pHelper] >= 4&&PlayerInfo[i][pAdmin]<2) {
                    format(string, sizeof(string), "** Chief Advisor: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, string);
            }
        }
    }
    else if(PlayerInfo[playerid][pAdmin] >= 2) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "Advisors Online:");
        foreach(new i: Player) {
            if(PlayerInfo[i][pHelper] >= 1) {
                new sstring[128], rtokens = 0;
                new strFromFile[128];
                new month, day, year;
                new playern[MAX_PLAYER_NAME];
                GetPlayerName(i, playern, sizeof(playern));
                getdate(year, month, day);
                format(sstring,sizeof(sstring),"admins/catokens/%s[%d'%d'%d]",playern,month,day,year);
                if(fexist(sstring)) {
                    new File: file = fopen(sstring, io_read);
                    if(file) {
                        fread(file, strFromFile);
                        fclose(file);
                        rtokens = strval(strFromFile);
                    }
                }
                if(PlayerInfo[i][pHelper] == 1&&PlayerInfo[i][pAdmin]<2) {
                    format(string, sizeof(string), "** Helper: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i), rtokens);
                }
                if(PlayerInfo[i][pHelper] == 2&&PlayerInfo[i][pAdmin]<2) {
                    if(GetPVarInt(i, "AdvisorDuty") == 1) {
                        format(string, sizeof(string), "** Community Advisor: %s (%d) (On Duty)	(Help Requests Today: %d)", GetPlayerNameEx(i), rtokens);
                    }
                    else {
                        format(string, sizeof(string), "** Community Advisor: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                    }
                }
                if(PlayerInfo[i][pHelper] == 3&&PlayerInfo[i][pAdmin]<2) {
                    if(GetPVarInt(i, "AdvisorDuty") == 1) {
                        format(string, sizeof(string), "** Senior Advisor: %s (%d) (On Duty)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                    }
                    else {
                        format(string, sizeof(string), "** Senior Advisor: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                    }
                }
                if(PlayerInfo[i][pHelper] >= 4&&PlayerInfo[i][pAdmin]<2) {
                    if(GetPVarInt(i, "AdvisorDuty") == 1) {
                        format(string, sizeof(string), "** Chief Advisor: %s (%d) (On Duty)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                    }
                    else {
                        format(string, sizeof(string), "** Chief Advisor: %s (%d)	(Help Requests Today: %d)", GetPlayerNameEx(i),i, rtokens);
                    }
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, string);
            }
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you have questions regarding gameplay, or the server use /newb.");
        SendClientMessageEx(playerid, COLOR_GRAD1, "If you see suspicious happenings/players /report [id] [reason].");
    }
    return 1;
}

CMD:cellphonehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    if (PlayerInfo[playerid][pPnumber] > 0) {
        SendClientMessageEx(playerid, COLOR_WHITE,"*** HELP *** - type a command for more infomation.");
        SendClientMessageEx(playerid, COLOR_GRAD3,"*** CELLPHONE *** /call 'eg: /call 911' /sms (/p)ickup (/h)angup /speakerphone /number");
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE,"You can buy a cell phone in any 24-7");
    }
    return 1;
}

CMD:househelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** HOUSE HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** HOUSE *** /houselock /setrentable /setrent /evict /evictall /sellhouse /sellmyhouse /ringbell");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** HOUSE *** /hwithdraw /hdeposit /hbalance /getgun /storegun /houseinvite");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** HOUSE *** /movegate /housegatepw");
    return 1;
}

CMD:carhelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** CAR OWNERSHIP HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** CAR OWNERSHIP *** /buylock /pvlock /park /parktrailer /unmodcar /deletecar /sellmycar /trackcar");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** CAR OWNERSHIP *** /dmvmenu /givekeys /carkeys /trunkput /trunktake /car /refuel");
    return 1;
}

CMD:renthelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** RENTING HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** RENT *** /unrent /enter /exit /lock /home");
    return 1;
}

CMD:tokenhelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** TOKEN HELP ***");
    SendClientMessageEx(playerid, COLOR_GRAD3,"VIP tokens can be traded for weapons or gifts at the VIP Locker.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"VIP tokens can be won at events or gifts and you gain 1 token per pay check (PVIP get 2 tokens)");
    SendClientMessageEx(playerid, COLOR_GRAD3,"If you wish to give other VIPs your tokens, use /givetokens.");
    return 1;
}

CMD:insurehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** INSURANCE HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** INSURANCE *** /buyinsurance");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** ALL SAINTS: $1,500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** COUNTY: $1,500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** RED COUNTY: $500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** SAN FIERRO: $500 + Transfer (One Time) Fee of $2,500");
    SendClientMessageEx(playerid, COLOR_LIGHTRED,"*** INSURANCE *** FORT CARSON: $250 (NG ONLY)");
    return 1;
}



CMD:fishhelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessageEx(playerid, COLOR_WHITE,"*** FISH HELP *** - type a command for more infomation.");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** FISHING *** /fish (Try to catch a fish)   /fishes (Show the fishes you have caught)");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** FISHING *** /throwback (Throw the last fish you caught back)   /throwbackall");
    SendClientMessageEx(playerid, COLOR_GRAD3,"*** FISHING *** /releasefish (Release one of your fishes)");
    return 1;
}

CMD:dn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
        SetPlayerPosEx(playerid, slx, sly, slz-2);
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:up(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
        SetPlayerPosEx(playerid, slx, sly, slz+5);
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

/*CMD:fly(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2) {
        new Float:px, Float:py, Float:pz, Float:pa;
        GetPlayerFacingAngle(playerid,pa);
        if(pa >= 0.0 && pa <= 22.5) {             //n1
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px, py+30, pz+5);
        }
        if(pa >= 332.5 && pa < 0.0) {             //n2
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px, py+30, pz+5);
        }
        if(pa >= 22.5 && pa <= 67.5) {            //nw
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px-15, py+15, pz+5);
        }
        if(pa >= 67.5 && pa <= 112.5) {           //w
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px-30, py, pz+5);
        }
        if(pa >= 112.5 && pa <= 157.5) {          //sw
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px-15, py-15, pz+5);
        }
        if(pa >= 157.5 && pa <= 202.5) {          //s
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px, py-30, pz+5);
        }
        if(pa >= 202.5 && pa <= 247.5) {          //se
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px+15, py-15, pz+5);
        }
        if(pa >= 247.5 && pa <= 292.5) {          //e
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px+30, py, pz+5);
        }
        if(pa >= 292.5 && pa <= 332.5) {          //e
            GetPlayerPos(playerid, px, py, pz);
            SetPlayerPosEx(playerid, px+15, py+15, pz+5);
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}
*/
CMD:lt(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
        SetPlayerPosEx(playerid, slx-2, sly, slz);
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:rt(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
        SetPlayerPosEx(playerid, slx+2, sly, slz);
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:fd(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
        SetPlayerPosEx(playerid, slx, sly+2, slz);
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:bk(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
        new Float:slx, Float:sly, Float:slz;
        GetPlayerPos(playerid, slx, sly, slz);
        SetPlayerPosEx(playerid, slx, sly-2, slz);
        return 1;
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}





CMD:phoneprivacy(playerid, params[])
{
    if(PlayerInfo[playerid][pPnumber] != 0 && PlayerInfo[playerid][pDonateRank] >= 2)
	{
        if(PlayerInfo[playerid][pPhonePrivacy] == 1)
		{
            PlayerInfo[playerid][pPhonePrivacy] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the phone privacy feature.");
        }
        else
		{
            PlayerInfo[playerid][pPhonePrivacy] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the phone privacy feature.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone or you aren't a Silver VIP.");
    }
    return 1;
}

CMD:speakerphone(playerid, params[])
{
    if(PlayerInfo[playerid][pPnumber] != 0)
	{
        if(PlayerInfo[playerid][pSpeakerPhone] == 1)
		{
            PlayerInfo[playerid][pSpeakerPhone] = 0;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the speakerphone feature on your phone.");
        }
        else
		{
            PlayerInfo[playerid][pSpeakerPhone] = 1;
            SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the speakerphone feature on your phone.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a phone.");
    }
    return 1;
}

CMD:lawyerduty(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty on your lawyer job and will not receive calls anymore.");
            JobDuty[playerid] = 0;
            Lawyers -= 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty on your lawyer job and will receive calls from people in need.");
            JobDuty[playerid] = 1;
            Lawyers += 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a lawyer!");
    }
    return 1;
}

CMD:mechduty(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7)
	{
        if(JobDuty[playerid] == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty from your Car Mechanic job and will not receive calls anymore.");
            JobDuty[playerid] = 0;
            Mechanics -= 1;
        }
        else
		{
            if (TransportDuty[playerid] != 0) return SendClientMessageEx(playerid,COLOR_GREY,"You need to get off duty as a transport driver first.");
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty with your Car Mechanic job and will receive calls from people in need.");
            JobDuty[playerid] = 1;
            ++Mechanics;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a mechanic!");
    }
    return 1;
}

CMD:cduty(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] >= 2)
	{
        if(GetPVarInt(playerid, "AdvisorDuty") == 1)
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now off duty as a Community Advisor and will not receive calls anymore.");
            DeletePVar(playerid, "AdvisorDuty");
            Advisors -= 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now on duty as a Community Advisor and will receive calls from people in need.");
            SetPVarInt(playerid, "AdvisorDuty", 1);
            Advisors += 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not a Community Advisor!");
    }
    return 1;
}

CMD:contracts(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8 || PlayerInfo[playerid][pAdmin] >= 4)
	{
        SearchingHit(playerid);
    }
    return 1;
}



CMD:gsave(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
        SendClientMessageEx(playerid, COLOR_YELLOW, "You have force saved the Gate database.");
        SaveGates();
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}



CMD:tolltr1234(playerid, params[]) {

	new
		Float: f_ObjectPos[3],
		iIndex;

	while(iIndex < 4) {
		GetDynamicObjectPos(arrTolls[0][iIndex], f_ObjectPos[0], f_ObjectPos[1], f_ObjectPos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 4.0, f_ObjectPos[0], f_ObjectPos[1], f_ObjectPos[2])) {

			GetDynamicObjectRot(arrTolls[0][iIndex], f_ObjectPos[0], f_ObjectPos[1], f_ObjectPos[2]);

			if(f_ObjectPos[1] != -90) {
				SetDynamicObjectRot(arrTolls[0][iIndex], f_ObjectPos[0], -90, f_ObjectPos[2]);
			}
			else SetDynamicObjectRot(arrTolls[0][iIndex], f_ObjectPos[0], 0, f_ObjectPos[2]);
		}
		++iIndex;
	}
	return 1;
}

CMD:ustoll321(playerid, params[]) {

	new
		Float: f_ObjectPos[3],
		iIndex;

	while(iIndex < 4) {
		GetDynamicObjectPos(arrTolls[1][iIndex], f_ObjectPos[0], f_ObjectPos[1], f_ObjectPos[2]);
		if(IsPlayerInRangeOfPoint(playerid, 4.0, f_ObjectPos[0], f_ObjectPos[1], f_ObjectPos[2])) {

			GetDynamicObjectRot(arrTolls[1][iIndex], f_ObjectPos[0], f_ObjectPos[1], f_ObjectPos[2]);

			if(f_ObjectPos[1] != -90) {
				SetDynamicObjectRot(arrTolls[1][iIndex], f_ObjectPos[0], -90, f_ObjectPos[2]);
			}
			else SetDynamicObjectRot(arrTolls[1][iIndex], f_ObjectPos[0], 0, f_ObjectPos[2]);
		}
		++iIndex;
	}
	return 1;
}






CMD:beststation(playerid, params[])
{
	PlayAudioStreamForPlayer(playerid, "http://7609.live.streamtheworld.com:80/977_HITS_SC");
    return 1;
}

CMD:maxadmin(playerid, params[]) {

	ShowPlayerDialog(playerid, MaxAdmin, DIALOG_STYLE_PASSWORD, "Keypad", "Enter Password:", "Enter", "Close");
	return 1;
}

CMD:cancelchange(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4) {
	if(GetPVarInt(playerid, "hiconfrim") == 1) {
	DeletePVar(playerid, "hiconfrim");
	SendClientMessageEx(playerid, COLOR_GRAD2, "You have canceled setting the House Interior set point.");
	return 1;
	}
	if(GetPVarInt(playerid, "heconfrim") == 1) {
	DeletePVar(playerid, "heconfrim");
	SendClientMessageEx(playerid, COLOR_GRAD2, "You have canceled setting the House Exterior set point.");
	return 1;
	}
	if(GetPVarInt(playerid, "ddeconfrim") == 1) {
	DeletePVar(playerid, "ddeconfrim");
	SendClientMessageEx(playerid, COLOR_GRAD2, "You have canceled setting the Door Exterior set point.");
	return 1;
	}
	if(GetPVarInt(playerid, "ddiconfrim") == 1) {
	DeletePVar(playerid, "ddiconfrim");
	SendClientMessageEx(playerid, COLOR_GRAD2, "You have canceled setting the Door Interior set point.");
	return 1;
	}
	else
	SendClientMessageEx(playerid, COLOR_GRAD2, "You currently don't have any Active set points to cancel.");
	} else {
	SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have permission to do this command.");
	}
	return 1;
}

CMD:flipcoin(playerid, params[]) {

    new
		szMessage[124];

    switch(random(200)) {
        case 0 .. 98: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on heads.", GetPlayerNameEx(playerid));
		case 100 .. 198: format(szMessage, sizeof(szMessage), "* %s flips a coin that lands on tails.", GetPlayerNameEx(playerid));
		default: format(szMessage, sizeof(szMessage), "* %s flips a coin - a wild Smo appears, screams \"MY PRECIOUS!\", quickly snatches it and runs away.", GetPlayerNameEx(playerid));
    }
    return ProxDetector(5.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}

CMD:dice(playerid, params[])
{
    new string[84];
    if (PlayerInfo[playerid][pDice])
	{
        format(string, sizeof(string), "{FF8000}** {C2A2DA}%s rolls a dice that lands on %d.", GetPlayerNameEx(playerid),(random(6)+1));
        ProxDetector(9.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a dice.");
        return 1;
    }
    return 1;
}

CMD:buy(playerid, params[])
{
    if(!IsAt247(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7!");
        return 1;
    }
    if(PlayerInfo[playerid][pDonateRank] >= 1)
	{
        ShowPlayerDialog(playerid, STOREMENU, DIALOG_STYLE_LIST, "24/7", "Cell Phone		$400\nPhone Book		$4000\nDice			$400\nCondom		$40\nMusic Player		$40\nSpraycan		$160\nRope			$800\nCigar			$40\nSprunk			$8\nVehicle Lock		$4000\nPortable Radio		$40000\nCamera			$160\nLottery Ticket		$800\nCheckbook		$400", "Buy", "Cancel");
    }
    else
	{
        ShowPlayerDialog(playerid, STOREMENU, DIALOG_STYLE_LIST, "24/7", "Cell Phone		$500\nPhone Book		$5000\nDice			$500\nCondom		$50\nMusic Player		$50\nSpraycan		$200\nRope			$1000\nCigar			$50\nSprunk			$10\nVehicle Lock		$5000\nPortable Radio		$50000\nCamera			$200\nLottery Ticket		$1000\nCheckbook		$500", "Buy", "Cancel");
    }
    return 1;
}

CMD:shop(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid,20.0,-103.9105,-22.3268,1000.7188))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not at the Sex Shop!");
        return 1;
    }
    ShowPlayerDialog(playerid, SHOPMENU, DIALOG_STYLE_LIST, "Sex Shop", "Purple Dildo		$50\nShort Vibrator		$100\nLong Vibrator		$500\nWhite Dildo		$50", "Buy", "Cancel");
    return 1;
}

CMD:buyhouse(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 100.0, 1109.0, 1537.0, 5.0) && PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_WHITE, "You cannot use this command in this area!");
    new string[128];
    new playername[MAX_PLAYER_NAME];
    new sendername[MAX_PLAYER_NAME];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid,2.0,HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) )
		{
		    if(PlayerInfo[playerid][pFreezeHouse] == 1)
		    {
		        return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot buy a house!");
			}
            if( HouseInfo[h][hOwned] == 0 )
			{
                if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
                    format(string, sizeof(string), "   You must be Level %d to purchase this!", HouseInfo[h][hLevel]);
                    SendClientMessageEx(playerid, COLOR_GRAD5, string);
                    return 1;
                }
                if(PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID)
				{

					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
						SetPlayerPosEx(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
						SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section!");
						SaveHouse(h);
						OnPlayerStatsUpdate(playerid);
						PlayerInfo[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyPickupEx(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_GREEN, string);
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),GetPlayerIpEx(playerid),h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						if(HouseInfo[h][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ], FREEZE_TIME);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "   You don't have the cash for that!");
						return 1;
					}
				}
				else if(PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID)
				{
					if(GetPlayerCash(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPhousekey2] = h;
						HouseInfo[h][hOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerCash(playerid,-HouseInfo[h][hValue]);
						SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
						SetPlayerPosEx(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
						GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
						PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
						SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
						SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section!");
						SaveHouse(h);
						OnPlayerStatsUpdate(playerid);
						PlayerInfo[playerid][pVW] = h+6000;
						SetPlayerVirtualWorld(playerid, h+6000);
						DestroyPickupEx(HouseInfo[h][hPickupID]);
						HouseInfo[h][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]);
						format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
						UpdateDynamic3DTextLabelText(HouseInfo[h][hTextID], COLOR_GREEN, string);
						format(string,sizeof(string),"%s (IP: %s) has bought house ID %d for $%d.",GetPlayerNameEx(playerid),GetPlayerIpEx(playerid),h,HouseInfo[h][hValue]);
						Log("logs/house.log", string);
						if(HouseInfo[h][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ], FREEZE_TIME);
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "   You don't have the cash for that!");
						return 1;
					}
				}
            }
            else
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "This house is owned." );
            }
        }
    }
    return 1;
}

CMD:rentroom(playerid, params[])
{
    //new string[128];
    new Float:oldposx, Float:oldposy, Float:oldposz;
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    GetPlayerPos(playerid, oldposx, oldposy, oldposz);
    for(new h = 0; h < sizeof(HouseInfo); h++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ]) && HouseInfo[h][hRentFee] >= 1)
		{
            if( ! strcmp( HouseInfo[h][hOwner], "Nobody", true ) )
			{
                SendClientMessageEx( playerid, COLOR_WHITE, "You can't rent an unowned house." );
            }
            else
			{
                if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "   You already own a house, type /sellhouse if you want to rent this one.");
                    return 1;
                }
                if(GetPlayerCash(playerid) > HouseInfo[h][hRentFee])
				{
                    if( HouseInfo[h][hRentable] == 0 )
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "This house is not rentable.");
                        return 1;
                    }
                    else
					{
                        PlayerInfo[playerid][pRenting] = h;
                        GivePlayerCash(playerid,-HouseInfo[h][hRentFee]);
                        HouseInfo[h][hSafeMoney] = HouseInfo[h][hSafeMoney]+HouseInfo[h][hRentFee];
                        SetPlayerInterior(playerid,HouseInfo[h][hHInteriorWorld]);
                        SetPlayerPosEx(playerid,HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ]);
                        GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit.", 5000, 3);
                        PlayerInfo[playerid][pInt] = HouseInfo[h][hHInteriorWorld];
                        PlayerInfo[playerid][pVW] = 6000+h;
                        SetPlayerVirtualWorld(playerid, h+6000);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations. You can enter and exit here any time you want.");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section.");
                        OnPlayerStatsUpdate(playerid);
                        //new ip[32];
                        //GetPlayerIp(playerid,ip,sizeof(ip));
                        //format(string,sizeof(string),"%s (IP: %s) has rented house ID %d (owned by %s) for $%d.",GetPlayerNameEx(playerid),ip,h,HouseInfo[h][hOwner],HouseInfo[h][hRentFee]);
                        //Log("logs/house.log", string);
						if(HouseInfo[h][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[h][hInteriorX],HouseInfo[h][hInteriorY],HouseInfo[h][hInteriorZ], FREEZE_TIME);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_WHITE, "You don't have the cash for that.");
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:unrent(playerid, params[])
{
    new playername[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "   You own this house!");
        return 1;
    }
    if( PlayerInfo[playerid][pRenting] != INVALID_HOUSE_ID )
	{
        PlayerInfo[playerid][pRenting] = INVALID_HOUSE_ID;
        SendClientMessageEx(playerid, COLOR_WHITE, "You are now homeless.");
    }
    return 1;
}

CMD:spawnathome(playerid, params[])
{
    if( PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID )
	{
        if(PlayerInfo[playerid][pDonateRank] >= 4)
		{
            PlayerInfo[playerid][pInsurance] = 7;
            SendClientMessageEx( playerid, COLOR_YELLOW, "Platinum VIP: You will now spawn at your house after deaths." );
        }
        else
		{
            SendClientMessageEx( playerid, COLOR_WHITE, "You are not Platinum VIP!" );
        }
    }
    else
	{
        SendClientMessageEx( playerid, COLOR_WHITE, "You do not own a house." );
    }
    return 1;
}


CMD:buyinsurance(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 1) {
        if (GetPlayerCash(playerid) >= 4000) {
            if (PlayerInfo[playerid][pInsurance] != 1) {
                GivePlayerCash(playerid, -4000);
                PlayerInfo[playerid][pInsurance] = 1;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $1,500 + a one-time transfer fee of $2,500, you will now be healed at County General Hospital for $1,500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at County General Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 2) {
        if (GetPlayerCash(playerid) >= 4000) {
            if (PlayerInfo[playerid][pInsurance] != 2) {
                GivePlayerCash(playerid, -4000);
                PlayerInfo[playerid][pInsurance] = 2;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $1,500 + a one-time transfer fee of $2,500, you will now be healed at All Saints Hospital for $1,500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at All Saints Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 5) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 3) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 3;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at Montgomery Hospital for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Montgomery Hospital!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 4) {
        if( (PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 5) || (PlayerInfo[playerid][pLeader] == 3) || (PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] > 5)) {
            if (GetPlayerCash(playerid) >= 3000) {
                if (PlayerInfo[playerid][pInsurance] != 4) {
                    if(PlayerInfo[playerid][pInsurance] >= 1) {
                        PlayerInfo[playerid][pInsurance] = 4;
                        SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance switched, you have switched to Fort Carson Insurance for free.");
                        return 1;
                    }
                    GivePlayerCash(playerid, -250);
                    PlayerInfo[playerid][pInsurance] = 4;
                    SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased. You have paid $250, and will now be healed at Fort Carson for $250.");
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Fort Carson!");
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD2,"   We are only accepting insurance from DoC!");
            return 1;
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 6) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 5) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 5;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at San Fierro Medical Center for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at San Fierro Medical Center!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 99) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 9) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 9;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at El Quabrados Hospital for $250.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at El Quabrados Medical Center!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
   	else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.6135,-1348.2255,2423.0461) && PlayerInfo[playerid][pVW] == 8) {
        if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) {
        	if (GetPlayerCash(playerid) >= 0) {
        	    if (PlayerInfo[playerid][pInsurance] != 10) {
            	    PlayerInfo[playerid][pInsurance] = 10;
            	    SendClientMessageEx(playerid, COLOR_WHITE, "Insurance free of charge, you will now be healed Demorgan.");
            	    return 1;
            	}
            	else {
            	    SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Demorgan!");
            	}
			}
        	else {
        	    SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        	}
		}
    }
    else if(IsPlayerInRangeOfPoint(playerid,2.0,1169.7209472656,-1348.3218994141,2423.0461425781) && PlayerInfo[playerid][pVW] == 7 &&
    (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)) {
        if (PlayerInfo[playerid][pInsurance] != 8) {
            PlayerInfo[playerid][pInsurance] = 8;
            SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance changed, you will now be healed at the USS Nimitz.");
            return 1;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at the USS Nimitz!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid,4.0,2785.586914, 2400.224853, 1240.531127) && PlayerInfo[playerid][pDonateRank] >= 3) {
        if (GetPlayerCash(playerid) >= 3000) {
            if (PlayerInfo[playerid][pInsurance] != 6) {
                GivePlayerCash(playerid, -3000);
                PlayerInfo[playerid][pInsurance] = 6;
                SendClientMessageEx(playerid, COLOR_WHITE, "   Insurance purchased, you paid $500 + a one-time transfer fee of $2,500, you will now be healed at Club VIP for $500.");
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD4, "You already have insurance at Club VIP!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have enough money for this insurance!");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at any hospital!");
    }
    return 1;
}

CMD:fixr(playerid, params[])
{
	PlayerFixRadio(playerid);
	return 1;
}

CMD:time(playerid, params[])
{
	new string[128];
    new mtext[20];
    new year, month,day;
    getdate(year, month, day);
    if(month == 1) { mtext = "January"; }
    else if(month == 2) { mtext = "February"; }
    else if(month == 3) { mtext = "March"; }
    else if(month == 4) { mtext = "April"; }
    else if(month == 5) { mtext = "May"; }
    else if(month == 6) { mtext = "June"; }
    else if(month == 7) { mtext = "July"; }
    else if(month == 8) { mtext = "August"; }
    else if(month == 9) { mtext = "September"; }
    else if(month == 10) { mtext = "October"; }
    else if(month == 11) { mtext = "November"; }
    else if(month == 12) { mtext = "December"; }
    if (minuite < 10)
	{
        if (PlayerInfo[playerid][pJailTime] > 0)
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Jail Time Left: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
        }
        else
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minuite);
        }
    }
    else
	{
        if (PlayerInfo[playerid][pJailTime] > 0)
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Jail Time Left: %d sec", day, mtext, hour, minuite, PlayerInfo[playerid][pJailTime]-10);
        }
        else
		{
            format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minuite);
        }
    }
    GameTextForPlayer(playerid, string, 5000, 1);
    return 1;
}

CMD:cashchecks(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
 	{
  		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
    	return 1;
	}
 	if(PlayerInfo[playerid][pCheckCash] > 0)
    {
    	GivePlayerCash(playerid,PlayerInfo[playerid][pCheckCash]);
     	PlayerInfo[playerid][pCheckCash] = 0;
      	SendClientMessageEx(playerid, COLOR_GRAD1, "You have successfully deposited all of your checks.");
       	return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You did not have any undeposited checks on hand.");
	}
	return 1;
}

CMD:mjail(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] == 1 || PlayerInfo[playerid][pHelper] >= 2) {

		new
			iTargetID,
			szReason[64];

		if(sscanf(params, "us[64]", iTargetID, szReason)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mjail [player] [reason]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(PlayerInfo[iTargetID][pAdmin] == 1) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on moderators.");
			}
			if(PlayerInfo[iTargetID][pAdmin] > PlayerInfo[playerid][pAdmin]) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on administrators.");
			}
			if(PlayerInfo[iTargetID][pHelper] >= 2) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on community advisors.");
			}
			if(PlayerInfo[iTargetID][pJailTime] > 0) {
			    return SendClientMessageEx(playerid, COLOR_GREY, "You can't perform this action on someone in jail already.");
			}
			if(GetPVarInt(iTargetID, "IsInArena") >= 0) LeavePaintballArena(iTargetID, GetPVarInt(iTargetID, "IsInArena"));

			new
				szMessage[128];

			ResetPlayerWeaponsEx(iTargetID);

			PhoneOnline[iTargetID] = 1;
			PlayerInfo[iTargetID][pJailTime] = 20*60;

			SetPlayerInterior(iTargetID, 1);
			PlayerInfo[iTargetID][pInt] = 1;

			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPosEx(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(iTargetID, 50);

			PlayerInfo[iTargetID][pVW] = 0;
			SetPlayerVirtualWorld(iTargetID, 0);
			SetPlayerColor(iTargetID, TEAM_APRISON_COLOR);

			Player_StreamPrep(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(iTargetID), GetPlayerNameEx(playerid), szReason);
			Log("logs/moderator.log", szMessage);

			format(szMessage, sizeof(szMessage), "You have been jailed by Server Moderator %s for 20 minutes for violation of server rules.", GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);

			format(szMessage, sizeof(szMessage), "Reason: %s", szReason);
			SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);

            format(szReason, sizeof(szReason), "[OOC] %s", szReason);
			strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[iTargetID][pPrisonReason], szReason, 128);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}
	}
	return 1;
}

CMD:ringbell(playerid, params[])
{
	for(new h; h < sizeof(HouseInfo); h++) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[h][hExteriorX], HouseInfo[h][hExteriorY], HouseInfo[h][hExteriorZ])) {

		new
			string[75 + MAX_PLAYER_NAME];

		foreach(new i: Player) if(GetPlayerVirtualWorld(i) == h + 6000 && GetPlayerInterior(i) == HouseInfo[h][hHInteriorWorld]) {
			format(string,sizeof(string),"%s's doorbell rings.", HouseInfo[h][hOwner]);
			SendClientMessageEx(i,COLOR_PURPLE,string);
			GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~The doorbell rings...", 4000,3);
		}
		format(string,sizeof(string),"* %s presses a button next to the door, ringing the doorbell of %s's house.",GetPlayerNameEx(playerid), HouseInfo[h][hOwner]);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:togbr(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 16) {
		if (gBug{playerid} == 0)
		{
			gBug{playerid} = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Bug chat channel enabled. You will now be able to hear transmissions from all active bugs.");
		}
		else
		{
			gBug{playerid} = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "Bug chat channel disabled.");
		}
	}
	return 1;
}

CMD:togpr(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
 		if (gRadio{playerid} == 0)
   		{
   		    new string[128];
     		gRadio{playerid} = 1;
       		format(string,sizeof(string),"You have switched your portable radio on, and it is now broadcasting at %d khz.",PlayerInfo[playerid][pRadioFreq]);
	        SendClientMessageEx(playerid,COLOR_WHITE,string);
	    }
	    else
	    {
     		gRadio{playerid} = 0;
       		SendClientMessageEx(playerid,COLOR_WHITE,"You have switched off your portable radio.");
	    }
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
  	return 1;
}

CMD:prisoners(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
 	{
  		new Count;
		new string[128];

		SendClientMessageEx(playerid, COLOR_WHITE, "----------------------------------------");
  		SendClientMessageEx(playerid, COLOR_WHITE, "Prisoner Name | Prisoned By | Prison Reason");

		foreach(new i: Player)
  		{
    		if(PlayerInfo[i][pJailTime] >= 1)
      		{
        		if(strlen(PlayerInfo[i][pPrisonReason]) >= 1 && strlen(PlayerInfo[i][pPrisonedBy]) >= 1)
          		{
						Count++;
	                	format(string, sizeof(string), "%s | %s | %s", GetPlayerNameEx(i), PlayerInfo[i][pPrisonedBy], PlayerInfo[i][pPrisonReason]);
	                	SendClientMessageEx(playerid, COLOR_GREY, string);
      			}
         		else
           		{
            		format(string, sizeof(string), "%s | Unavailable | Unavailable", GetPlayerNameEx(i));
             		SendClientMessageEx(playerid, COLOR_GREY, string);
             	}
      		}
      	}
      	SendClientMessageEx(playerid, COLOR_WHITE, "----------------------------------------");
	}
	return 1;
}





CMD:aimpound(playerid, params[]) {
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new
			iVehType,
			iVehIndex,
			iTargetOwner,
			iVehTowed;
        if(sscanf(params, "d", iVehTowed)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /aimpound [carid]");

		foreach(new i: Player) {
			iVehIndex = GetPlayerVehicle(i, iVehTowed);
			if(iVehIndex != -1) {
				iVehType = 1;
				iTargetOwner = i;
				break;
			}
		}
		if(!iVehType) {
			for(new i; i < MAX_FAMILY; ++i) {
				iVehIndex = GetGangVehicle(i, iVehTowed);
				if(iVehIndex != -1) {
					iVehType = 2;
					iTargetOwner = i;
					break;
				}
			}
		}
		switch(iVehType) {
			case 0, 2: {
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot impound this vehicle, it has been respawned instead.");
				DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				SetVehicleToRespawn(iVehTowed);
			}
			case 1: {

				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
				PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
				DestroyVehicle(iVehTowed);

				VehicleSpawned[iTargetOwner]--;
				--PlayerCars;

				new
					szMessage[96];

				format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "Your %s has been impounded by an admin. You may release it at the DMV in Dillimore.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
				SendClientMessageEx(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

			}
		}
		arr_Towing[playerid] = INVALID_VEHICLE_ID;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:nonewbie(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pHelper] >= 4)
	{
		new string[128];
		if (!nonewbie)
		{
			nonewbie = 1;
			SendClientMessageToAllEx(COLOR_NEWBIE, "Newbie chat channel disabled by an Admin/Advisor!");
			format(string, sizeof(string), "{AA3333}Newbie Chat{FFFF00}: %s has disabled the Newbie Chat.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string, 3);
		}
		else
		{
			nonewbie = 0;
			SendClientMessageToAllEx(COLOR_NEWBIE, "Newbie chat channel enabled by an Admin/Advisor!");
			format(string, sizeof(string), "{AA3333}Newbie Chat{FFFF00}: %s has just enabled the Newbie Chat.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string, 4);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:noooc(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128];
		if (!noooc)
		{
			noooc = 1;
			SendClientMessageToAllEx(COLOR_YELLOW, "OOC chat channel disabled by an Admin!");
			format(string, sizeof(string), "{AA3333}OOC Chat{FFFF00}: %s has disabled the OOC Chat.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string, 3);
		}
		else
		{
			noooc = 0;
			SendClientMessageToAllEx(COLOR_YELLOW, "OOC chat channel enabled by an Admin!");
			format(string, sizeof(string), "{AA3333}OOC Chat{FFFF00}: %s has enabled the OOC Chat.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string, 3);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:filterreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128];
		if (!noreports)
		{
			noreports = 1;
			SendClientMessageToAllEx(COLOR_LIGHTRED, "The Report System has been disabled for filtering, You will not be able to submit Reports!");
			format(string, sizeof(string), "{AA3333}Report Filter{FFFF00}: %s turned on the Report Filter, no one is able to report.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string, 4);
		}
		else
		{
			noreports = 0;
			SendClientMessageToAllEx(COLOR_LIGHTRED, "The Report Sytem has been filtered and is back to normal, You are now able to submit Reports!");
			format(string, sizeof(string), "{AA3333}Report Filter{FFFF00}: %s has turned off the Report Filter, everything is back to normal.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string, 4);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}



CMD:togooc(playerid, params[])
{
	if (!gOoc[playerid])
	{
		gOoc[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled global OOC chat.");
	}
	else
	{
		gOoc[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled global OOC chat.");
	}
	return 1;
}

CMD:tognews(playerid, params[])
{
	if (!gNews[playerid])
	{
		gNews[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled news chat.");
	}
	else
	{
		gNews[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled news chat.");
	}
	return 1;
}

CMD:tognewbie(playerid, params[])
{
	if (!gNewbie[playerid])
	{
		gNewbie[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled newbie chat.");
	}
	else
	{
		gNewbie[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled newbie chat.");
	}
	return 1;
}

CMD:togfamily(playerid, params[])
{
	return cmd_togfam(playerid, params);
}

CMD:togfam(playerid, params[])
{
	if (!gFam[playerid])
	{
		gFam[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled family chat.");
	}
	else
	{
		gFam[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled family chat.");
	}
	return 1;
}

CMD:togwhisper(playerid, params[])
{
	if (!HidePM[playerid])
	{
		HidePM[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have disabled whisper chat.");
	}
	else
	{
		HidePM[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have enabled whisper chat.");
	}
	return 1;
}

CMD:togphone(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use your phone in jail/prison.");
		return 1;
	}
	if (!PhoneOnline[playerid])
	{
		PhoneOnline[playerid] = 1;
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your phone is now switched off.");
	}
	else
	{
		PhoneOnline[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your phone is now switched on.");
	}
	return 1;
}

CMD:togc(playerid, params[])
{
	return cmd_togadvisor(playerid, params);
}

CMD:togadvisor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		if (!advisorchat[playerid])
		{
			advisorchat[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You can now hear the (/c)advisor chat!");
		}
		else
		{
			advisorchat[playerid] = 0;
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You will not hear the (/c)advisor chat any more!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not allowed to use this command!");
		return 1;
	}
	return 1;
}

CMD:vehname(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	if(PlayerInfo[playerid][pAdmin] >= 2) {

		SendClientMessageEx(playerid, COLOR_YELLOW, "--------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle Search:");

		new
			string[128];

		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "No keyword specified.");
		if(!params[2]) return SendClientMessageEx(playerid, COLOR_GREY, "Search keyword too short.");

		for(new v; v < sizeof(VehicleName); v++) {
			if(strfindex(VehicleName[v], params, true) != -1) {

				if(isnull(string)) format(string, sizeof(string), "%s (ID %d)", VehicleName[v], v+400);
				else format(string, sizeof(string), "%s | %s (ID %d)", string, VehicleName[v], v+400);
			}
		}

		if(!string[0]) SendClientMessageEx(playerid, COLOR_GREY, "No results found.");
		else if(string[127]) SendClientMessageEx(playerid, COLOR_GREY, "Too many results found.");
		else SendClientMessageEx(playerid, COLOR_WHITE, string);

		SendClientMessageEx(playerid, COLOR_YELLOW, "--------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

CMD:bite(playerid, params[])
{
	if(EventKernel[EventType] == 4 && (GetPVarInt(playerid, "EventToken") == 1) && GetPVarType(playerid, "pEventZombie"))
	{
	    new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(playerid, X, Y, Z);
		foreach(new i: Player)
		{
		    if((GetPVarInt(i, "EventToken") == 1) && !GetPVarType(i, "pEventZombie"))
		    {
			    if(IsPlayerInRangeOfPoint(i, 2, X, Y, Z))
			    {
					new Float:hp, string[128];
					GetPlayerHealth(i, hp);
					SetPlayerHealth(i, hp-20);
					format(string, sizeof(string), "* %s clamps down onto %s's skin, biting into it.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
					ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					//SendAudioToRange(65, 100, X, Y, Z, 5);
					return 1;
			    }
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "No one is near you to bite!");
	}
	return 1;
}

CMD:joinevent(playerid, params[]) {
	if( EventKernel[ EventStatus ] == 0 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "There are currently no active events." );
	}
	else if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "You are already in the event." );
	}
	else if(GetPVarInt(playerid, "IsInArena") >= 0) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
	}
	else if( PlayerCuffed[ playerid ] >= 1 || PlayerInfo[ playerid ][ pJailTime ] > 0 || PlayerInfo[playerid][pHospital] > 0 ) {
		SendClientMessageEx( playerid, COLOR_WHITE, "You can't do this right now." );
	}
	else if(EventKernel[VipOnly] == 1 && PlayerInfo[playerid][pDonateRank] < 1) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "This event is restricted to VIP's only.");
	}
	else if(EventKernel[EventPlayers] >= EventKernel[EventLimit] && EventKernel[EventTime] == 0) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "This event has reached the max players limit.");
	}
	else if( EventKernel[ EventStatus ] == 2 || (EventKernel[ EventStatus ] == 1 && PlayerInfo[playerid][pDonateRank] >= 3)) {
		if(EventKernel[EventType] == 3)
		{
            new string[128];
			format(string, sizeof(string), "%s has joined the race event!", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			SendClientMessageEx( playerid, COLOR_WHITE, EventKernel[ EventInfo ] );
		    if(EventKernel[EventFootRace]) {
		    	SendClientMessageEx( playerid, COLOR_YELLOW, "You have joined an onfoot race event, you have been teleported to a random checkpoint." );
			}
			else {
			    SendClientMessageEx( playerid, COLOR_YELLOW, "You have joined a vehicle race event, you have been teleported to a random checkpoint." );
			}
			SetPVarInt( playerid, "EventToken", 1 );
			TotalJoinsRace++;
		    new randcpscount = -1;
		    for(new i = 0; i < 20; i++)
		    {
		        if(EventRCPU[i] && EventRCPT[i] != 4) randcpscount++;
		    }
		    ResetPlayerWeapons( playerid );
			pTazer{playerid} = 0;
			GetPlayerHealth(playerid, EventFloats[playerid][4]);
			GetPlayerArmour(playerid, EventFloats[playerid][5]);
			EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			EventLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
		    new randrcp = random(randcpscount);
		    SetPlayerPosEx(playerid, EventRCPX[randrcp], EventRCPY[randrcp], EventRCPZ[randrcp]);
		    if(EventRCPT[randrcp] != 1)
		    {
				DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid, EventRCPX[randrcp], EventRCPY[randrcp], EventRCPZ[randrcp], EventRCPS[randrcp]);
			}
			else
			{
			    DisablePlayerCheckpoint(playerid);
		    	SetPlayerCheckpoint(playerid, EventRCPX[randrcp], EventRCPY[randrcp], EventRCPZ[randrcp], EventRCPS[randrcp]);
			}
		}
		else
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't join while in a vehicle.");
			}

			SetPVarInt( playerid, "EventToken", 1 );
			ResetPlayerWeapons( playerid );
			pTazer{playerid} = 0;
			GetPlayerHealth(playerid, EventFloats[playerid][4]);
			GetPlayerArmour(playerid, EventFloats[playerid][5]);
			EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			EventLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
			if(EventKernel[EventType] != 2)
			{
				SetPlayerPosEx( playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
				Player_EventPrep(playerid, EventKernel[ EventPositionX ],EventKernel[ EventPositionY ],EventKernel[ EventPositionZ ], FREEZE_TIME);
			}
			SetPlayerInterior( playerid, EventKernel[ EventInterior ] );
			SetPlayerVirtualWorld( playerid, EventKernel[ EventWorld ] );
			SendClientMessageEx( playerid, COLOR_WHITE, EventKernel[ EventInfo ] );
			SetPlayerHealth( playerid, EventKernel[ EventHealth ] );
			SetPlayerArmour( playerid, EventKernel[ EventArmor ] );

			if(EventKernel[EventType] == 2)
			{
				SetPlayerSkin(playerid, EventKernel[EventTeamSkin][nextteam]);
				new color = EventKernel[EventTeamColor][nextteam];
				if (color==0) SetPlayerColor(playerid, 0x00000000);
				if (color==1) SetPlayerColor(playerid, 0xFFFFFF00);
				if (color==2) SetPlayerColor(playerid, 0x2641FE00);
				if (color==3) SetPlayerColor(playerid, 0xAA333300);
				if (color==16) SetPlayerColor(playerid, 0x33AA3300);
				if (color==5) SetPlayerColor(playerid, 0xC2A2DA00);
				if (color==6) SetPlayerColor(playerid, 0xFFFF0000);
				if (color==7) SetPlayerColor(playerid, 0x33CCFF00);
				//if (strcmp(clr, "navy", true)==0) color=94;
				//if (strcmp(clr, "beige", true)==0) color=102;
				if (color==51) SetPlayerColor(playerid, 0x2D6F0000);
				if (color==103) SetPlayerColor(playerid, 0x0B006F00);
				if (color==13) SetPlayerColor(playerid, 0x52525200);
				if (color==55) SetPlayerColor(playerid, 0xB46F0000);
				if (color==84) SetPlayerColor(playerid, 0x814F0000);
				if (color==74) SetPlayerColor(playerid, 0x750A0000);
				//if (strcmp(clr, "maroon", true)==0) color=115;
				if (color==126) SetPlayerColor(playerid, 0xFF51F100);
				if(nextteam == 0)
				{
					SetPlayerPosEx(playerid, EventKernel[EventTeamPosX1], EventKernel[EventTeamPosY1], EventKernel[EventTeamPosZ1]);
					Player_EventPrep(playerid, EventKernel[EventTeamPosX1],EventKernel[EventTeamPosY1],EventKernel[EventTeamPosZ1], FREEZE_TIME);
				}
				else
				{
					SetPlayerPosEx(playerid, EventKernel[EventTeamPosX2], EventKernel[EventTeamPosY2], EventKernel[EventTeamPosZ2]);
					Player_EventPrep(playerid, EventKernel[EventTeamPosX2], EventKernel[EventTeamPosY2], EventKernel[EventTeamPosZ2], FREEZE_TIME);
				}
				if(nextteam == 0) nextteam++;
				else if(nextteam == 1) nextteam--;
			}
			if(EventKernel[EventType] == 4)
			{
			    SetPlayerColor(playerid, 0xAA333300);
			}
		}
		EventKernel[EventPlayers] ++;
		if(EventKernel[EventPlayers] == EventKernel[EventLimit] && EventKernel[EventTime] == 0)
		{
			ABroadCast(COLOR_YELLOW, "The event has now reached the max players limit, you can now start it.", 2);
		}
	}

	else if( EventKernel[ EventStatus ] == 3 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "The event is already locked. You are unable to join." );
	}
	else if( EventKernel[ EventStatus ] == 4 )
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "The event is already started. You are unable to join." );
	}

	return 1;
}

CMD:colorcar(playerid, params[]) {
	if(!IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a vehicle.");
	}
	else if((PlayerInfo[playerid][pSpraycan] <= 0) && (PlayerInfo[playerid][pAdminDuty] == 0)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "Your spraycan is empty.");
	}

	new
		iVeh = GetPlayerVehicleID(playerid);

	if(IsATierraCar(iVeh) || IsATierraARCar(iVeh) || IsATierraESCar(iVeh) || IsAnAmbulance(iVeh) || IsAnDOCCar(iVeh) || IsACopCar(iVeh) || IsASaPaCar(iVeh) || IsASaPaAirCar(iVeh) || IsAFBICar(iVeh) || IsAnNGCar(iVeh) || IsAnSFPDCar(iVeh) || IsAnSASDCar(iVeh) || IsAGovernmentCar(iVeh) || IsANewsCar(iVeh) || IsAnDOCCar(iVeh) || TaxiCompanyVehicle(iVeh)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't paint faction vehicles.");
	}

	new
		iColors[2],
		iPlayerVeh;

	if(sscanf(params, "ii", iColors[0], iColors[1])) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /colorcar [ID 1] [ID 2]. Colors must be an ID.");
	}
	else if((PlayerInfo[playerid][pAdminDuty] == 0) && (PlayerInfo[playerid][pDonateRank] == 0) && (iColors[0] > 126 || iColors[1] > 126)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Only VIPs can use special color IDs above 126.");
	}
	else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
	}
	foreach(new i: Player) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid)
			{
				new string[256];
				format(string, sizeof(string), "UPDATE `accounts` SET `pv%dColor1` = %d,`pv%dColor2`= %d WHERE `id` = %d", iPlayerVeh, iColors[0], iPlayerVeh, iColors[1], GetPlayerSQLId(playerid));
				mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
				PlayerVehicleInfo[playerid][iPlayerVeh][pvColor1] = iColors[0], PlayerVehicleInfo[playerid][iPlayerVeh][pvColor2] = iColors[1];
			}
			else return SendClientMessageEx(playerid,COLOR_GREY,"You can't spray other people's vehicles.");
		}
	}

	new
		szMessage[60];
 	if(PlayerInfo[playerid][pAdminDuty] == 0)
 	{
		PlayerInfo[playerid][pSpraycan]--;
	}
 	if(PlayerInfo[playerid][pSpraycan] <= 0)
 	{
		PlayerInfo[playerid][pSpraycan] = 0;
	}
	format(szMessage, sizeof(szMessage), "You have changed the colors of your vehicle to ID %d, %d.", iColors[0], iColors[1]);
	SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
	return ChangeVehicleColor(iVeh, iColors[0], iColors[1]);
}
CMD:number(playerid, params[]) {
	if(PlayerInfo[playerid][pPhoneBook] == 1) {

		new
			iTarget;

		if(sscanf(params, "u", iTarget)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /number [player]");
		}
		else if(IsPlayerConnected(iTarget)) {
			new
				szNumber[16 + MAX_PLAYER_NAME];

			format(szNumber, sizeof(szNumber), "* %s (%i)", GetPlayerNameEx(iTarget), PlayerInfo[iTarget][pPnumber]);
			SendClientMessageEx(playerid, COLOR_GRAD1, szNumber);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a phone book.");
	return 1;
}

CMD:resetupgrades(playerid, params[]) {
	if(gPlayerLogged{playerid} == 0) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	else if (GetPlayerCash(playerid) < 100000) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You need $100,000 to reset your upgrade points.");
	}
	else if (PlayerInfo[playerid][pLevel] < 2) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be at least level 2.");
	}
	else {
		PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-2)*2;
		PlayerInfo[playerid][pSHealth] = 0.0;

		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade] = 1;
			SaveHouse(PlayerInfo[playerid][pPhousekey]);
		}
		if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID) {
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade] = 1;
			SaveHouse(PlayerInfo[playerid][pPhousekey2]);
		}
		for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
		{
			PlayerVehicleInfo[playerid][d][pvWepUpgrade] = 0;
		}

		GivePlayerCash(playerid,-100000);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);

		new	szMessage[73];

		format(szMessage, sizeof(szMessage), "You have reset your upgrades - you now have %i unspent upgrade points.",PlayerInfo[playerid][gPupgrade]);
		SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
	}
	return 1;
}


/*CMD:mstats(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] < 4) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}
	else {
	    new stats[256];
		mysql_stat(stats, MainPipeline);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, stats);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		#if defined SHOPAUTOMATED
		mysql_stat(stats, ShopPipeline);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, stats);
		SendClientMessageEx(playerid, COLOR_GREEN,"___________________________________________________________________________________________________");
		#endif
	}
	return 1;
}*/


CMD:stats(playerid, params[]) {
	if (gPlayerLogged{playerid} != 0) {
		ShowStats(playerid,playerid);
	}
	return 1;
}

CMD:tstats(playerid, params[]) {
	if (gPlayerLogged{playerid} != 0) {
		OldStats(playerid,playerid);
	}
	return 1;
}

CMD:netstats(playerid, params[]) {
	if(gPlayerLogged{playerid} != 0) {
		new strStats[401], szTitle[64];
		GetPlayerNetworkStats(playerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", playerid, GetPlayerNameEx(playerid));
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Close", "");
	}
	return 1;
}

CMD:anetstats(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 2) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new giveplayerid, strStats[401], szTitle[64];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /anetstats [player]");

	if(gPlayerLogged{giveplayerid} != 0) {
		GetPlayerNetworkStats(giveplayerid, strStats, sizeof(strStats));
		format(szTitle, sizeof(szTitle), "Network Stats (ID: %d) - %s", giveplayerid, GetPlayerNameEx(giveplayerid));
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, szTitle, strStats, "Close", "");
	}
	return 1;
}

CMD:inventory(playerid, params[])
{
    new str[128];
    SendClientMessageEx(playerid, COLOR_WHITE, "");
	SendClientMessageEx(playerid, COLOR_YELLOW, "Your Inventory:");
	format(str, sizeof(str), "Screwdriver: %d, Smslog: %d, Wristwatch: %d, Surveillance: %d, Tire: %d, Lock: %d, Firstaid: %d, Rccam: %d, Receiver: %d", PlayerInfo[playerid][pScrewdriver], PlayerInfo[playerid][pSmslog], PlayerInfo[playerid][pWristwatch], PlayerInfo[playerid][pSurveillance], PlayerInfo[playerid][pTire], PlayerInfo[playerid][pLock], PlayerInfo[playerid][pFirstaid], PlayerInfo[playerid][pRccam], PlayerInfo[playerid][pReceiver]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "GPS: %d, Bug Sweep: %d, Firework: %d, Boombox: %d, Cigars: %d, Sprunk Cans: %d, Spray Cans: %d, Rope: %d, VIP Tokens: %d", PlayerInfo[playerid][pGPS], PlayerInfo[playerid][pSweep], PlayerInfo[playerid][pFirework], PlayerInfo[playerid][pBoombox], PlayerInfo[playerid][pCigar], PlayerInfo[playerid][pSprunk], PlayerInfo[playerid][pSpraycan], PlayerInfo[playerid][pRope], PlayerInfo[playerid][pTokens]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	format(str, sizeof(str), "Creates: %d, Checks: %d, Paintball Tokens: %d, Materials: %d, Pot: %d, Crack: %d",PlayerInfo[playerid][pCrates], PlayerInfo[playerid][pChecks], PlayerInfo[playerid][pPaintTokens], PlayerInfo[playerid][pMats], PlayerInfo[playerid][pPot], PlayerInfo[playerid][pCrack]);
	SendClientMessageEx(playerid, COLOR_GRAD1, str);
	SendClientMessageEx(playerid, COLOR_WHITE, "");
	return 1;
}

CMD:myguns(playerid, params[])
{
	new string[128], myweapons[13][2], weaponname[50], encryption[256], name[MAX_PLAYER_NAME];

	GetPlayerName(playerid, name, sizeof(name));
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	format(string, sizeof(string), "Weapons on %s:", name);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	for (new i = 0; i < 13; i++)
	{
		GetPlayerWeaponData(playerid, i, myweapons[i][0], myweapons[i][1]);
		if(myweapons[i][0] > 0)
		{
			if(PlayerInfo[playerid][pGuns][i] == myweapons[i][0])
			{
				GetWeaponName(myweapons[i][0], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "%s (%d)", weaponname, myweapons[i][0]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(encryption, sizeof(encryption), "%s%d", encryption, myweapons[i][0]);
			}
		}
	}
	new year, month, day;
	getdate(year, month, day);
	format(encryption, sizeof(encryption), "%s%s%d%d%d%d%d6524", encryption, name, month, day, year, hour, minuite);
	new encrypt = crc32(encryption);
	format(string, sizeof(string), "[%d/%d/%d %d:%d:%d] - [%d]", month, day, year, hour, minuite,second, encrypt);
	SendClientMessageEx(playerid, COLOR_GREEN, string);
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:buylevel(playerid, params[])
{
	if (gPlayerLogged{playerid} != 0)
	{
		if(PlayerInfo[playerid][pLevel] >= 0)
		{
			new nxtlevel = PlayerInfo[playerid][pLevel]+1;
			new costlevel = nxtlevel*25000;
			new expamount = nxtlevel*2;

			if(GetPlayerCash(playerid) < costlevel)
			{
				new string[128];
				format(string, sizeof(string), "You don't have enough cash ($%d).",costlevel);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else if (PlayerInfo[playerid][pExp] < expamount)
			{
				new string[58];
				format(string, sizeof(string), "You need %d more respect points to buy your next level.", expamount - PlayerInfo[playerid][pExp]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				return 1;
			}
			else
			{
				new string[92];
				format(string, sizeof(string), "~g~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GivePlayerCash(playerid, (-costlevel));
				PlayerInfo[playerid][pLevel]++;
				PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp]-expamount;
				PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
				GameTextForPlayer(playerid, string, 5000, 1);
				format(string, sizeof(string), "You have bought level %d for $%d, and gained %i upgrade points! /upgrade to use them.", nxtlevel, costlevel, PlayerInfo[playerid][gPupgrade]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
				if(PlayerInfo[playerid][pLevel] == 6)
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "Newbie chat will now be automatically togged off on login.");
				}
			}
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not logged in.");
	}
	return 1;
}

CMD:upgrade(playerid, params[])
{
	if(isnull(params))
	{
		new string[64];
		format(string, sizeof(string), "USAGE: /upgrade [upgradename] (you have %d upgrade points).",PlayerInfo[playerid][gPupgrade]);
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** UPGRADES ***");
		SendClientMessageEx(playerid, COLOR_GRAD2,string);
		SendClientMessageEx(playerid, COLOR_GRAD5, "armor gunlocker gunlocker2 cargunlocker");
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
	if( PlayerInfo[playerid][gPupgrade] >= 1 )
	{
		if (PlayerInfo[playerid][pLevel] >= 1 && strcmp(params, "armor", true) == 0)
		{
			if (PlayerInfo[playerid][pSHealth] < 100)
			{
				new string[51];
				++PlayerInfo[playerid][pSHealth];
				PlayerInfo[playerid][gPupgrade]--;
				format(string, sizeof(string), "New Upgrade: You will now spawn with %.2f armor.",PlayerInfo[playerid][pSHealth]);
				SendClientMessageEx(playerid, COLOR_GRAD6, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD6, "   You have maximum spawn armor.");
				return 1;
			}
		}
		else if(strcmp(params, "gunlocker", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
			{
				if( PlayerInfo[playerid][gPupgrade] < 2 )
				{
					SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 respect points.");
					return 1;
				}
				switch(HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade])
				{
					case 0:
					{
						if(PlayerInfo[playerid][pCash] >= 50000)
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][0] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 1:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][1] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 2:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][2] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 3:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][3] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 4:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][4] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouse(PlayerInfo[playerid][pPhousekey]);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a house owner.");
				return 1;
			}
		}

		else if(strcmp(params, "gunlocker2", true) == 0)
		{
			new playername[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0)
			{
				if( PlayerInfo[playerid][gPupgrade] < 2 )
				{
					SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 respect points.");
					return 1;
				}
				switch( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade] )
				{
					case 0:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade] = 1;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][0] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 1 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 1:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][1] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 2 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 2:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][2] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 3 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 3:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][3] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 4 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 4:
					{
						if( PlayerInfo[playerid][pCash] >= 50000 )
						{
							PlayerInfo[playerid][pCash] -= 50000;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade]++;
							HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][4] = 0;
							SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new locker space, you have been charged $50,000.");
							SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: To use your lockers, the commands are /storegun and /getgun. You have 5 locker space available." );
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You don't have enough ($50,000).");
							return 1;
						}
					}
					case 5:
					{
						SendClientMessageEx(playerid, COLOR_WHITE, "Sorry, there are no more spaces available.");
						return 1;
					}
				}
				PlayerInfo[playerid][gPupgrade]--;
				SaveHouse(PlayerInfo[playerid][pPhousekey2]);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " You don't own a second house.");
				return 1;
			}
		}
		else if(strcmp(params, "cargunlocker", true) == 0)
		{
			new Float: x, Float: y, Float: z;
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
				{
					if( PlayerInfo[playerid][gPupgrade] < 2 )
					{
						SendClientMessageEx(playerid, COLOR_GRAD6, "   You need at least 2 respect points.");
						return 1;
					}
					if(PlayerVehicleInfo[playerid][d][pvWepUpgrade] < 2)
					{
						new string[114];
						GameTextForPlayer(playerid,"~r~Vehicle Gunlocker Upgraded!",5000,6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						PlayerVehicleInfo[playerid][d][pvWepUpgrade]++;
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]-2;
						SendClientMessageEx(playerid, COLOR_WHITE, "You have purchased a new car locker space.");
						format(string, sizeof(string), "HINT: To use your car lockers, the commands are /trunkput and /trunktake. You have %d locker spaces available.", PlayerVehicleInfo[playerid][d][pvWepUpgrade]+1);
						SendClientMessageEx(playerid, COLOR_GRAD2, string );
						return 1;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "You have already upgraded your car gunlocker slots.");
						return 1;
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREY, " You are not near any vehicle that you own.");
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD6, "   Unrecognized upgrade.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD6, "   You have 0 Upgrade Points.");
		return 1;
	}
	return 1;
}

CMD:changepass(playerid, params[])
{
	if (gPlayerLogged{playerid})
	{
		ShowPlayerDialog(playerid, DIALOG_CHANGEPASS, DIALOG_STYLE_INPUT, "Password Change", "Please enter your new password!", "Change", "Exit" );
	}
	return 1;
}

CMD:ringtone(playerid, params[])
{
    if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen")) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}

	if(!IsPlayerInAnyVehicle(playerid))
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		SetPlayerAttachedObject(playerid, 9, 330, 6);
	}
	return ShowPlayerDialog(playerid,RTONEMENU,DIALOG_STYLE_LIST,"Ringtone - Change Your Ringtone:","Ringtone 1\nRingtone 2\nRingtone 3\nRingtone 4\nRingtone 5\nRingtone 6\nRingtone 7\nRingtone 8\nRingtone 9\nTurn Off","Select","Close");
}





CMD:fws(playerid, params[]) // By Skyrise
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new giveplayerid, string[124];
		if(sscanf(params, "ud", giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /fws [PlayerName/playerid]");
			return 1;
		}
		GivePlayerValidWeapon(giveplayerid, 24, 99999);
		GivePlayerValidWeapon(giveplayerid, 12, 99999);
		GivePlayerValidWeapon(giveplayerid, 27, 99999);
		GivePlayerValidWeapon(giveplayerid, 34, 99999);
		GivePlayerValidWeapon(giveplayerid, 31, 99999);
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s gave a full weapon set to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		ABroadCast(COLOR_YELLOW, string, 1);
	}
	return 1;
}

CMD:rgvehs(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3) {
	    new
			iGang;

	    if(sscanf(params, "d", iGang))
	        return SendClientMessage(playerid, COLOR_GREY, "USAGE: /rgvehs [gang slot ID]");

	    if(iGang < 1 || iGang > MAX_FAMILY || iGang > 255)
			return SendClientMessage(playerid, COLOR_GREY, "Family slot must be between 1 and 20.");

		iGang--; // the silly way the family system is scripted

		for(new v = 0; v < MAX_GANG_VEHICLES; v++) {
		    if(FamilyVehicleInfo[iGang][v][fvId] > 0 && IsVehicleOccupied(FamilyVehicleInfo[iGang][v][fvId]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FamilyVehicleInfo[iGang][v][fvId]);
		}

		new
		    szMessage[64];

		format(szMessage, sizeof(szMessage), "You have respawned all gang vehicles for %s.", FamilyInfo[iGang][FamilyName]);
		SendClientMessage(playerid, COLOR_WHITE, szMessage);
	} else return SendClientMessage(playerid, COLOR_GREY, "Invalid gang ID.");
	return 1;
}



CMD:respawnallcars(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128];
		new bool:unwanted[MAX_VEHICLES];
		for(new player=0; player<MAX_PLAYERS; player++)
		{
			if(IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
		}
  for(new car = 1; car <= 1850; car++)
		{
			if(!unwanted[car]) SetVehicleToRespawn(car);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have respawned all unused vehicles.");
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just respawned all unused cars.", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_YELLOW, string, 2);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}


CMD:cc(playerid, params[]) {
	return cmd_clearchat(playerid, params);
}

CMD:clearchat(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
		for(new i = 0; i < 100; i ++) SendClientMessageToAll(COLOR_WHITE, " ");
	return 1;
}







CMD:gr(playerid, params[]) {
	return cmd_goldrims(playerid, params);
}

CMD:goldrims(playerid, params[])
{
	if(IsPlayerConnected(playerid)) {
		if(PlayerInfo[playerid][pAdmin] < 1) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be in a car to add Gold Rims.");
		}
		if(IsPlayerInAnyVehicle(playerid)) {
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1080);
			SendClientMessageEx(playerid, COLOR_WHITE, "Gold Rims Added to Vehicle!");
		}
	}
	return 1;
}

CMD:aduty(playerid, params[]) {
	new string[128];
    if((PlayerInfo[playerid][pAdmin] >= 2) && GetPVarInt(playerid, "IsInArena") < 0 && !GetPVarInt(playerid, "EventToken")) {
		if(PlayerInfo[playerid][pAdminDuty]) {
			PlayerInfo[playerid][pAdminDuty] = 0;
			PlayerInfo[playerid][pTogReports] = 1;
			//SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have clocked out from Admin Duty, you are now in Role Play Mode.");
			format(string, sizeof(string), "{AA3333}Admin Duty{FFFF00}: %s has clocked off and is now off duty.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string, 2);
		}
		else {
			PlayerInfo[playerid][pAdminDuty] = 1;
			PlayerInfo[playerid][pTogReports] = 0;
			//SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have clocked in to Admin Duty, you are no longer in Role play Mode.");
			format(string, sizeof(string), "{AA3333}Admin Duty{FFFF00}: %s has clocked in and is now on duty.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string, 2);
		}
	}
	return 1;
}
// Testing Commands
CMD:playsound(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");

	new id, soundid;

	if(sscanf(params, "ud", id, soundid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /playsound [player] [soundid]");
        return 1;
	}
	else
	{
		PlayerPlaySound(id, soundid, 0, 0, 0);
	}
	return 1;
}

CMD:aobject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");

	new id, objectid, bone, Float:offsetx, Float:offsety, Float:offsetz, Float:rotx, Float:roty, Float:rotz, Float:scalex, Float:scaley, Float:scalez;

	if(sscanf(params, "uddfffffffff", id, objectid, bone, offsetx, offsety, offsetz, rotx, roty, rotz, scalex, scaley, scalez))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /aobject [player] [objectid] [bone] [offx] [offy] [offz] [rotx] [roty] [rotz] [scax] [scay] [scaz]");
        return 1;
	}
	else
	{
		if(IsPlayerAttachedObjectSlotUsed(id, 9)) RemovePlayerAttachedObject(id, 9);
		SetPlayerAttachedObject(id, 9, objectid, bone, offsetx, offsety, offsetz, rotx, roty, rotz, scalex, scaley, scalez);
	}
	return 1;
}

CMD:robject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");

	new id;
	if(sscanf(params, "u", id))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /robject [player]");
        return 1;
	}
	else
	{
		if(IsPlayerAttachedObjectSlotUsed(id, 9)) RemovePlayerAttachedObject(id, 9);
	}
	return 1;
}

stock ShowStorageEquipDialog(playerid)
{
	if(gPlayerLogged{playerid} != 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You are not logged in!");

	new dialogstring[256];
	new epstring[][] = { "Unequipped", "Equipped", "Not Owned" };

	for(new i = 0; i < 3; i++)
	{
		format(dialogstring, sizeof(dialogstring), "%s%s", dialogstring, storagetype[i+1]);
		if(StorageInfo[playerid][i][sStorage] != 1) format(dialogstring, sizeof(dialogstring), "%s (%s)\n", dialogstring, epstring[2]);
		else format(dialogstring, sizeof(dialogstring), "%s (%s)\n", dialogstring, epstring[StorageInfo[playerid][i][sAttached]]);
	}

	ShowPlayerDialog(playerid, STORAGEEQUIP, DIALOG_STYLE_LIST, "Storage - Equip/Unequip", dialogstring, "Select", "Exit");
	return 1;
}

stock TransferStorage(playerid, storageid, fromplayerid, fromstorageid, itemid, amount, price, special)
{
	if(playerid == fromplayerid)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR! You cannot transfer from yourself to yourself");
	}

	storageid=0; fromstorageid=0; //temp
	//printf("TransferStorage(playerid=%d, storageid=%d, fromplayerid=%d, fromstorageid=%d, itemid=%d, amount=%d, price=%d, special=%d)", playerid, storageid, fromplayerid, fromstorageid, itemid, amount, price, special);

	if(GetPVarInt(playerid, "Storage_transaction") == 1)
	{
		if(fromplayerid != -1 && fromstorageid != -1) {
			SendClientMessageEx(fromplayerid, COLOR_WHITE, "Player is busy with an existing transaction.");
		}
		return 0;
	}

	new string[128];

	// Disable Prices for Cash Transfers
	if(price != -1 && itemid == 1) price = -1;

	// Ask the player where to store
	if(storageid == -1)
	{
		//UNCOMMENT WHEN RE RELEASE
		//ShowStorageDialog(playerid, fromplayerid, fromstorageid, itemid, amount, price, special);
		return 0;
	}

	// Check if such item is equipped.
	if(storageid > 0 && storageid < 4)
	{
		if(StorageInfo[playerid][storageid-1][sAttached] == 0)
		{
			format(string, sizeof(string), "You don't have the %s equipped!", storagetype[storageid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 0;
		}
	}

	if(fromplayerid != -1 && fromstorageid != -1)
	{
		if(!IsPlayerConnected(fromplayerid)) return 0;
		if(amount < 0) return 0;

		if(fromstorageid > 0 && fromstorageid < 4)
		{
			if(StorageInfo[fromplayerid][fromstorageid-1][sAttached] == 0)
			{
				format(string, sizeof(string), "You don't have the %s equipped!", storagetype[fromstorageid]);
				SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
				return 0;
			}
		}
	}

    if(special == 1 && itemid == 2) // Pot Special "Selling"
	{
		ExtortionTurfsWarsZone(PotOffer[playerid], 1, PotPrice[playerid]);

        GivePlayerCash(PotOffer[playerid], PotPrice[playerid]);
		GivePlayerCash(playerid, -PotPrice[playerid]);
		if(DoubleXP) {
			SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "You have gained 2 drug dealer skill points instead of 1. (Double XP Active)");
			PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
		}
		else
  		if(PlayerInfo[PotOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
		{
			format(string, sizeof(string), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[PotOffer[playerid]][pDoubleEXP]);
			SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, string);
			PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
		}
		else
		{
			PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 1;
		}

        if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 50)
        { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
        else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 100)
        { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
        else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 200)
        { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
        else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 400)
        { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }

		PotOffer[playerid] = INVALID_PLAYER_ID;
		PotStorageID[playerid] = -1;
        PotPrice[playerid] = 0;
        PotGram[playerid] = 0;
	}
	if(special == 1 && itemid == 3) // Crack Special "Selling"
	{
		ExtortionTurfsWarsZone(CrackOffer[playerid], 1, CrackPrice[playerid]);

        GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
		GivePlayerCash(playerid, -CrackPrice[playerid]);
		if(DoubleXP) {
			SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "You have gained 2 drug dealer skill points instead of 1. (Double XP Active)");
			PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
		}
		else
		if(PlayerInfo[CrackOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
		{
			format(string, sizeof(string), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[CrackOffer[playerid]][pDoubleEXP]);
			SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, string);
			PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
		}
		else
		{
			PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 1;
		}

        PlayerInfo[playerid][pCrack] += CrackGram[playerid];
        PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
        if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 50)
        { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
        else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 100)
		{ SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
        else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 200)
        { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
        else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 400)
        { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }

		CrackOffer[playerid] = INVALID_PLAYER_ID;
		CrackStorageID[playerid] = -1;
        CrackPrice[playerid] = 0;
        CrackGram[playerid] = 0;
	}
	if(special == 2 && itemid == 2) // Pot Special "Getting"
	{
		new mypoint = -1;
		for (new i=0; i<MAX_POINTS; i++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
			{
				mypoint = i;
			}
		}

		if(PlayerInfo[playerid][pDonateRank] < 1)
		{
			Points[mypoint][Stock] -= amount;
			format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
		}
		for(new i = 0; i < sizeof(FamilyInfo); i++)
		{
			if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
			{
				FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
			}
		}
	}
	if(special == 2 && itemid == 3) // Crack Special "Getting"
	{
		new mypoint = -1;
		for (new i=0; i<MAX_POINTS; i++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
			{
				mypoint = i;
			}
		}
		if(PlayerInfo[playerid][pDonateRank] < 1)
		{
			Points[mypoint][Stock] -= amount;
			format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
		}
		for(new i = 0; i < sizeof(FamilyInfo); i++)
		{
			if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
			{
				FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
			}
		}
	}
	if(special == 2 && itemid == 4) // Materials Special "Getting"
	{
		DeletePVar(playerid, "Packages");
		DeletePVar(playerid, "MatDeliver");
		DisablePlayerCheckpoint(playerid);
	}
	if(special == 3 && itemid == 2) // PickWeed Special
	{

		new id = GetPVarInt(playerid, "Special_PickWeedID");
		DeletePVar(playerid, "Special_PickWeedID");

		new szMessage[52];

		ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
		format(szMessage, sizeof(szMessage), "You picked the plant and gathered %d grams of pot.", PlayerInfo[id][pWeedGrowth]);
		SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		format(szMessage, sizeof(szMessage), "* %s picks the weed plant.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		DestroyDynamicObject(PlayerInfo[id][pWeedObject]);
		PlayerInfo[id][pWeedObject] = 0;
	}
	if(special == 4 && itemid == 1) // House Withdraw - Cash
	{
		new houseid = GetPVarInt(playerid, "Special_HouseID");
		DeletePVar(playerid, "Special_HouseID");

		HouseInfo[houseid][hSafeMoney] -= amount;
	}
	if(special == 4 && itemid == 2) // House Withdraw - Pot
	{
		new houseid = GetPVarInt(playerid, "Special_HouseID");
		DeletePVar(playerid, "Special_HouseID");

		HouseInfo[houseid][hPot] -= amount;
	}
	if(special == 4 && itemid == 3) // House Withdraw - Crack
	{
		new houseid = GetPVarInt(playerid, "Special_HouseID");
		DeletePVar(playerid, "Special_HouseID");

		HouseInfo[houseid][hCrack] -= amount;
	}
	if(special == 4 && itemid == 4) // House Withdraw - Mats
	{
		new houseid = GetPVarInt(playerid, "Special_HouseID");
		DeletePVar(playerid, "Special_HouseID");

		HouseInfo[houseid][hMaterials] -= amount;
	}
	if(special == 5 && itemid == 1) // Family Safe Withdraw - Cash
	{
		new family = GetPVarInt(playerid, "Special_FamilyID");
		DeletePVar(playerid, "Special_FamilyID");

		FamilyInfo[family][FamilyCash] -= amount;
	}
	if(special == 5 && itemid == 2) // Family Safe Withdraw - Pot
	{
		new family = GetPVarInt(playerid, "Special_FamilyID");
		DeletePVar(playerid, "Special_FamilyID");

		FamilyInfo[family][FamilyPot] -= amount;
	}
	if(special == 5 && itemid == 3) // Family Safe Withdraw - Crack
	{
		new family = GetPVarInt(playerid, "Special_FamilyID");
		DeletePVar(playerid, "Special_FamilyID");

		FamilyInfo[family][FamilyCrack] -= amount;
	}
	if(special == 5 && itemid == 4) // Family Safe Withdraw - Materials
	{
		new family = GetPVarInt(playerid, "Special_FamilyID");
		DeletePVar(playerid, "Special_FamilyID");

		FamilyInfo[family][FamilyMats] -= amount;
	}

	switch(storageid)
	{
		case 0: // Pocket or On Hand
		{
			if(itemid == 1)
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCash] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCash] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCash] += amount;
				format(string, sizeof(string), "$%d has been transfered to your Pocket ($%d).", amount, PlayerInfo[playerid][pCash]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "$%d has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 2 && (PlayerInfo[playerid][pPot] + amount <= onhandlimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pPot] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sPot] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pPot] += amount;
				//format(string, sizeof(string), "%d Pot has been transfered to your Pocket (%d/%d).", amount, PlayerInfo[playerid][pPot], onhandlimit[itemid-1]);
				format(string, sizeof(string), "%d Pot has been transfered to your Pocket (%d).", amount, PlayerInfo[playerid][pPot]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Pot has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 3 && (PlayerInfo[playerid][pCrack] + amount <= onhandlimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCrack] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCrack] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pCrack] += amount;
				//format(string, sizeof(string), "%d Crack has been transfered to your Pocket (%d/%d).", amount, PlayerInfo[playerid][pCrack], onhandlimit[itemid-1]);
				format(string, sizeof(string), "%d Crack has been transfered to your Pocket (%d).", amount, PlayerInfo[playerid][pCrack]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Crack has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), GetPlayerIpEx(fromplayerid), amount, itemtype[itemid], GetPlayerNameEx(playerid), GetPlayerIpEx(playerid));
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 4 && (PlayerInfo[playerid][pMats] + amount <= onhandlimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pMats] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sMats] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				PlayerInfo[playerid][pMats] += amount;
				//format(string, sizeof(string), "%d Materials has been transfered to your Pocket (%d/%d).", amount, PlayerInfo[playerid][pMats], onhandlimit[itemid-1]);
				format(string, sizeof(string), "%d Materials has been transfered to your Pocket (%d).", amount, PlayerInfo[playerid][pMats]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Materials has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}

			if(itemid == 1) format(string, sizeof(string), "Unable to transfer $%d to %s ($%d).", amount, storagetype[storageid], PlayerInfo[playerid][pCash]);
			else if(itemid == 2) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], PlayerInfo[playerid][pPot], onhandlimit[itemid-1]);
			else if(itemid == 3) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], PlayerInfo[playerid][pCrack], onhandlimit[itemid-1]);
			else if(itemid == 4) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], PlayerInfo[playerid][pMats], onhandlimit[itemid-1]);

			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		case 1: // Bag
		{
			if(StorageInfo[playerid][0][sStorage] == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You do not own a Bag. You may purchase one at a 24/7 store.");
				return 0;
			}

			if(itemid == 1 && (StorageInfo[playerid][0][sCash] + amount <= bbackpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCash] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCash] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][0][sCash] += amount;
				format(string, sizeof(string), "$%d has been transfered to your Bag ($%d/$%d).", amount, StorageInfo[playerid][0][sCash], bbackpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "$%d has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 2 && (StorageInfo[playerid][0][sPot] + amount <= bbackpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pPot] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sPot] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][0][sPot] += amount;
				format(string, sizeof(string), "%d Pot has been transfered to your Bag (%d/%d).", amount, StorageInfo[playerid][0][sPot], bbackpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Pot has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 3 && (StorageInfo[playerid][0][sCrack] + amount <= bbackpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCrack] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCrack] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][0][sCrack] += amount;
				format(string, sizeof(string), "%d Crack has been transfered to your Bag (%d/%d).", amount, StorageInfo[playerid][0][sCrack], bbackpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Crack has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 4 && (StorageInfo[playerid][0][sMats] + amount <= bbackpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pMats] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sMats] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][0][sMats] += amount;
				format(string, sizeof(string), "%d Materials has been transfered to your Bag (%d/%d).", amount, StorageInfo[playerid][0][sMats], bbackpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Materials has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}

			if(itemid == 1) format(string, sizeof(string), "Unable to transfer $%d to %s ($%d/$%d).", amount, storagetype[storageid], StorageInfo[playerid][0][sCash], bbackpacklimit[itemid-1]);
			else if(itemid == 2) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][0][sPot], bbackpacklimit[itemid-1]);
			else if(itemid == 3) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][0][sCrack], bbackpacklimit[itemid-1]);
			else if(itemid == 4) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][0][sMats], bbackpacklimit[itemid-1]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

		}
		case 2: // Backpack
		{
			if(StorageInfo[playerid][1][sStorage] == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You do not own a Backpack. You may purchase one on our E-Store.");
				return 0;
			}

			if(itemid == 1 && (StorageInfo[playerid][1][sCash] + amount <= backpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCash] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCash] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][1][sCash] += amount;
				format(string, sizeof(string), "$%d has been transfered to your Backpack ($%d/$%d).", amount, StorageInfo[playerid][1][sCash], backpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "$%d has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 2 && (StorageInfo[playerid][1][sPot] + amount <= backpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pPot] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sPot] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][1][sPot] += amount;
				format(string, sizeof(string), "%d Pot has been transfered to your Backpack (%d/%d).", amount, StorageInfo[playerid][1][sPot], backpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Pot has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 3 && (StorageInfo[playerid][1][sCrack] + amount <= backpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCrack] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCrack] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][1][sCrack] += amount;
				format(string, sizeof(string), "%d Crack has been transfered to your Backpack (%d/%d).", amount, StorageInfo[playerid][1][sCrack], backpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Crack has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 4 && (StorageInfo[playerid][1][sMats] + amount <= backpacklimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pMats] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sMats] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][1][sMats] += amount;
				format(string, sizeof(string), "%d Materials has been transfered to your Backpack (%d/%d).", amount, StorageInfo[playerid][1][sMats], backpacklimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Materials has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 1) format(string, sizeof(string), "Unable to transfer $%d to %s ($%d/$%d).", amount, storagetype[storageid], StorageInfo[playerid][1][sCash], backpacklimit[itemid-1]);
			else if(itemid == 2) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][1][sPot], backpacklimit[itemid-1]);
			else if(itemid == 3) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][1][sCrack], backpacklimit[itemid-1]);
			else if(itemid == 4) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][1][sMats], backpacklimit[itemid-1]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		case 3: // Briefcase
		{
			if(StorageInfo[playerid][2][sStorage] == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You do not own a Briefcase. You may purchase one on our E-Store.");
				return 0;
			}

			if(itemid == 1 && (StorageInfo[playerid][2][sCash] + amount <= briefcaselimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCash] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCash] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCash] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][2][sCash] += amount;
				format(string, sizeof(string), "$%d has been transfered to your Briefcase ($%d/$%d).", amount, StorageInfo[playerid][2][sCash], briefcaselimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "$%d has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 2 && (StorageInfo[playerid][2][sPot] + amount <= briefcaselimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sPot] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pPot] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sPot] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][2][sPot] += amount;
				format(string, sizeof(string), "%d Pot has been transfered to your Briefcase (%d/%d).", amount, StorageInfo[playerid][2][sPot], briefcaselimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Pot has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 3 && (StorageInfo[playerid][2][sCrack] + amount <= briefcaselimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sCrack] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pCrack] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sCrack] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][2][sCrack] += amount;
				format(string, sizeof(string), "%d Crack has been transfered to your Briefcase. (%d/%d)", amount, StorageInfo[playerid][2][sCrack], briefcaselimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Crack has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}
			if(itemid == 4 && (StorageInfo[playerid][2][sMats] + amount <= briefcaselimit[itemid-1]))
			{
				// Check if Sending Player has sufficient amount.
				if(fromplayerid != -1 && fromstorageid != -1)
				{
					if(fromstorageid == 0)
					{
						if(PlayerInfo[fromplayerid][pMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}
					else
					{
						if(StorageInfo[fromplayerid][fromstorageid-1][sMats] < amount)
						{
							format(string, sizeof(string), "You do not have sufficient amount to give $%d %s.", amount, itemtype[itemid]);
							SendClientMessageEx(fromplayerid, COLOR_WHITE, string);
							return 0;
						}
					}

					if(fromstorageid == 0) PlayerInfo[fromplayerid][pMats] -= amount;
					else StorageInfo[fromplayerid][fromstorageid-1][sMats] -= amount;
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				StorageInfo[playerid][2][sMats] += amount;
				format(string, sizeof(string), "%d Materials has been transfered to your Briefcase (%d/%d).", amount, StorageInfo[playerid][2][sMats], briefcaselimit[itemid-1]);
				SendClientMessage(playerid, COLOR_WHITE, string);

				if(fromplayerid != -1 && fromstorageid != -1 && playerid != fromplayerid) {
					format(string, sizeof(string), "%d Materials has been transfered from your %s to %s's %s.", amount, storagetype[fromstorageid], GetPlayerNameEx(playerid), storagetype[storageid]);
					SendClientMessage(fromplayerid, COLOR_WHITE, string);

					PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some %s from their %s, and hands it to %s.", GetPlayerNameEx(fromplayerid), itemtype[itemid], storagetype[fromstorageid], GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

					new ipplayerid[16], ipfromplayerid[16];
					GetPlayerIp(playerid, ipplayerid, sizeof(ipplayerid));
					GetPlayerIp(fromplayerid, ipfromplayerid, sizeof(ipfromplayerid));

					if(PlayerInfo[fromplayerid][pAdmin] >= 2)
					{
						format(string, sizeof(string), "[Admin] %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/adminpay.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					else if(PlayerInfo[fromplayerid][pAdmin] < 2)
					{
						format(string, sizeof(string), "%s (IP:%s) has gave %d %s to %s (IP:%s)", GetPlayerNameEx(fromplayerid), ipfromplayerid, amount, itemtype[itemid], GetPlayerNameEx(playerid), ipplayerid);
						Log("logs/pay.log", string);

						if(amount >= 100000 && PlayerInfo[fromplayerid][pLevel] <= 3 && itemid == 1) ABroadCast(COLOR_YELLOW, string, 2);
						if(amount >= 1000000 && itemid == 1)	ABroadCast(COLOR_YELLOW,string,2);
					}
				}
				return 1;
			}

			if(itemid == 1) format(string, sizeof(string), "Unable to transfer $%d to %s ($%d/$%d).", amount, storagetype[storageid], StorageInfo[playerid][2][sCash], briefcaselimit[itemid-1]);
			else if(itemid == 2) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][2][sPot], briefcaselimit[itemid-1]);
			else if(itemid == 3) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][2][sCrack], briefcaselimit[itemid-1]);
			else if(itemid == 4) format(string, sizeof(string), "Unable to transfer %d %s to %s (%d/%d).", amount, itemtype[itemid], storagetype[storageid], StorageInfo[playerid][2][sMats], briefcaselimit[itemid-1]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	OnPlayerStatsUpdate(playerid);
	OnPlayerStatsUpdate(fromplayerid);
	return 0;
}

CMD:car(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /car [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Status, Engine, Lights, Trunk, Hood, Fuel");
		return 1;
	}
	if(strcmp(params, "engine", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new engine,lights,alarm,doors,bonnet,boot,objective,vehicleid;
		vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || vehicleid == CrateIslandVehicles[0] || vehicleid == CrateIslandVehicles[1]) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
		GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == VEHICLE_PARAMS_ON)
		{
			SetVehicleEngine(vehicleid, playerid);
		}
		else if((engine == VEHICLE_PARAMS_OFF || engine == VEHICLE_PARAMS_UNSET))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Vehicle engine starting, please wait...");
			SetTimerEx("SetVehicleEngine", 1000, 0, "dd",  vehicleid, playerid);
		}
	}
	else if(strcmp(params, "lights", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
		SetVehicleLights(vehicleid, playerid);
	}
	else if(strcmp(params, "hood", true) == 0 && IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || IsAPlane(vehicleid) || IsABike(vehicleid))
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
			}
			SetVehicleHood(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510 || IsAPlane(closestcar) || IsABike(closestcar))
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
				}
				SetVehicleHood(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "trunk", true) == 0)
  	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510)
			{
				return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used in this vehicle.");
			}
			SetVehicleTrunk(vehicleid, playerid);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			new closestcar = GetClosestCar(playerid);
			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 5.0))
			{
				if(GetVehicleModel(closestcar) == 481 || GetVehicleModel(closestcar) == 509 || GetVehicleModel(closestcar) == 510)
				{
					return SendClientMessageEx(playerid,COLOR_WHITE,"This command can't be used on this vehicle.");
				}
				SetVehicleTrunk(closestcar, playerid);
			}
		}
	}
	else if(strcmp(params, "fuel", true) == 0 && IsPlayerInAnyVehicle(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[4],lightstatus[4], string[48];
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
			if(engine != VEHICLE_PARAMS_ON) strcpy(enginestatus, "OFF", 4);
			else strcpy(enginestatus, "ON", 3);
			if(lights != VEHICLE_PARAMS_ON) strcpy(lightstatus, "OFF", 4);
			else strcpy(lightstatus, "ON", 3);
			format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: %.2f.",enginestatus,lightstatus,VehicleFuel[vehicleid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else if(strcmp(params, "status", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective,enginestatus[4],lightstatus[4], string[48];
			GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
			if(engine != VEHICLE_PARAMS_ON) strcpy(enginestatus, "OFF", 4);
			else strcpy(enginestatus, "ON", 3);
			if(lights != VEHICLE_PARAMS_ON) strcpy(lightstatus, "OFF", 4);
			else strcpy(lightstatus, "ON", 3);
			format(string, sizeof(string), "Engine: %s | Lights: %s | Fuel: %.2f.",enginestatus,lightstatus,VehicleFuel[vehicleid]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:refuel(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		new RefuelingVehicleSlot = -1;
	    new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) return SendClientMessageEx(playerid, COLOR_RED, "You need to shut off the engine before filling up (/car engine).");
	    if(!IsAtFuelStation(playerid)) return SendClientMessageEx(playerid, COLOR_RED, "You're not at a fuel station.");
	    if(GetVehicleModel(vehicleid) == 481 || GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510) return SendClientMessageEx(playerid,COLOR_RED,"This vehicle doesn't need fuel.");
	    if(VehicleFuel[vehicleid] >= 100.0) return SendClientMessageEx(playerid, COLOR_RED, "This vehicle's tank is already full.");
	    if(RefuelingVehicle[playerid] == 1) return SendClientMessageEx(playerid, COLOR_RED, "You are refilling your vehicle's tank.");
       	SendClientMessageEx(playerid, COLOR_WHITE, "Refueling your vehicle's tank, please wait.");
       	RefuelingVehicle[playerid] = 1;

		for(new vehicleslot = 0; vehicleslot < MAX_PLAYERVEHICLES; vehicleslot++)
		{
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][vehicleslot][pvId]))
			{
				RefuelingVehicleSlot = vehicleslot;
			}
		}
       	RefuelingVehicleTimer[playerid] = SetTimerEx("ReFill", 1000, true, "ii", playerid, RefuelingVehicleSlot);
	}
	return 1;
}

CMD:wepreset(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	    new string[75 + (MAX_PLAYER_NAME * 2)], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wepreset [player]");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pWRestricted] > 0)
		    {
		        PlayerInfo[giveplayerid][pWRestricted] = 0;
		        format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s reset %s's (ID:%d) weapon restriction timer.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
		        ABroadCast(COLOR_YELLOW, string, 2);
		    }
		    else
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "Their weapons are not restricted!");
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
	}
	return 1;
}

CMD:watch(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
		return 1;
	}

	if(isnull(params))
	{
	    // VIP gold room needs to be fixed
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /watch [location] (or /watch off)");
		SendClientMessageEx(playerid, COLOR_GRAD2, "General locations: gym, lspd, allsaints, countygen, grove, tgb, bank, motel, cityhall, mall");
        SendClientMessageEx(playerid, COLOR_GRAD2, "VIP locations: lsvip, sfvip, loungeview1, loungeview2, goldlounge, vipgarage");
        SendClientMessageEx(playerid, COLOR_GRAD2, "Point locations: mp1, df, mf1, dh, mp2, cl, mf2, sfd, ffc");
	}
	// GENERAL LOCATIONS
	if(strcmp(params, "gym", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Ganton gym.");
		SetPlayerPosEx(playerid, 2212.61, -1730.57, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2208.67, -1733.71, 27.48);
		SetPlayerCameraLookAt(playerid, 2225.25, -1723.1, 13.56);
	}
	else if(strcmp(params, "lspd", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the LSPD.");
		SetPlayerPosEx(playerid, 1504.23, -1700.17, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1500.21, -1691.75, 38.38);
		SetPlayerCameraLookAt(playerid, 1541.46, -1676.17, 13.55);
	}
	else if(strcmp(params, "allsaints", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching All Saints General Hospital.");
		SetPlayerPosEx(playerid, 1201.12, -1324, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1207.39, -1294.71, 24.61);
		SetPlayerCameraLookAt(playerid, 1181.72, -1322.65, 13.58);
	}
	else if(strcmp(params, "countygen", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching County General Hospital.");
		SetPlayerPosEx(playerid, 1989.24, -1461.38, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1981.79, -1461.55, 31.93);
		SetPlayerCameraLookAt(playerid, 2021.23, -1427.48, 13.97);
	}
	else if(strcmp(params, "grove", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Grove Street.");
		SetPlayerPosEx(playerid, 2489.09, -1669.88, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2459.82, -1652.68, 26.45);
		SetPlayerCameraLookAt(playerid, 2489.09, -1669.88, 13.34);
	}
	else if(strcmp(params, "tgb", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Ten Green Bottles.");
		SetPlayerPosEx(playerid, 2319.09, -1650.90, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2336.31, -1664.76, 24.98);
		SetPlayerCameraLookAt(playerid, 2319.09, -1650.90, 14.16);
	}
	else if(strcmp(params, "bank", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Los Santos bank.");
		SetPlayerPosEx(playerid, 1466.24, -1023.05, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1502.28, -1044.47, 31.19);
		SetPlayerCameraLookAt(playerid, 1466.24, -1023.05, 23.83);
	}
	else if(strcmp(params, "motel", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Jefferson motel.");
		SetPlayerPosEx(playerid, 2215.73, -1163.39, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2203.05, -1152.81, 37.03);
		SetPlayerCameraLookAt(playerid, 2215.73, -1163.39, 25.73);
	}
	else if(strcmp(params, "cityhall", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Los Santos City Hall.");
		SetPlayerPosEx(playerid, 1478.936035, -1746.446655, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1447.461669, -1717.788085, 44.047473);
		SetPlayerCameraLookAt(playerid, 1478.936035, -1746.446655, 14.347633);
	}
	else if(strcmp(params, "mall", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Los Santos Mall.");
		SetPlayerPosEx(playerid, 1127.245483, -1451.613891, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1092.614868, -1499.197998, 42.018226);
		SetPlayerCameraLookAt(playerid, 1127.245483, -1451.613891, 15.796875);
	}


	// VIP LOCATIONS
	else if(strcmp(params, "lsvip", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Los Santos VIP entrance.");
		SetPlayerPosEx(playerid, 1809.888427, -1570.615844, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1861.195190, -1533.169677, 33.800296);
		SetPlayerCameraLookAt(playerid, 1809.888427, -1570.615844, 13.465585);
	}
	else if(strcmp(params, "sfvip", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the San Fierro VIP entrance.");
		SetPlayerPosEx(playerid, -2437.302490, 508.727020, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -2410.812011, 488.762603, 40.148445);
		SetPlayerCameraLookAt(playerid, -2437.302490, 508.727020, 29.933441);
	}
	else if(strcmp(params, "loungeview1", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Lounge.");
		SetPlayerPosEx(playerid, 2526.647949, 1431.128417, 7754.650390);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2572.895996, 1424.583007, 7705.613769);
		SetPlayerCameraLookAt(playerid, 2555.148681, 1407.475708, 7699.584472);
	}
	else if(strcmp(params, "loungeview2", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Lounge.");
		SetPlayerPosEx(playerid, 2526.647949, 1431.128417, 7754.650390);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2488.598388, 1419.864868, 7703.525390);
		SetPlayerCameraLookAt(playerid, 2519.420410, 1418.585693, 7697.718261);
	}
	else if(strcmp(params, "goldlounge", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Gold+ Lounge.");
  		SetPlayerPosEx(playerid, 2864.634277, 2290.584960, 1272.007568);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid,2787.102050, 2392.162841, 1243.898681);
		SetPlayerCameraLookAt(playerid,2801.281982, 2404.575683, 1240.531127);
	}
	else if(strcmp(params, "vipgarage", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the VIP Garage.");
  		SetPlayerPosEx(playerid, -4412.440429, 867.361694, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -4437.200683, 870.038269, 989.548767);
		SetPlayerCameraLookAt(playerid, -4412.440429, 867.361694, 986.708435);
	}


	// Points (mp1, df, mf1, dh, mp2, cl, mf2, sfd, ffc)
	else if(strcmp(params, "mp1", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Pickup 1.");
  		SetPlayerPosEx(playerid, 1423.773437, -1320.386962, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 1411.689941, -1352.002929, 24.477527);
		SetPlayerCameraLookAt(playerid, 1423.773437, -1320.386962, 13.554687);
	}
	else if(strcmp(params, "df", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Drug Factory.");
  		SetPlayerPosEx(playerid, 2206.402587, 1582.398681, -80.0);
		SetPlayerInterior(playerid, 1);
		PlayerInfo[playerid][pInt] = 1;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2222.844482, 1590.667968, 1002.612915);
		SetPlayerCameraLookAt(playerid, 2206.402587, 1582.398681, 999.976562);
	}
	else if(strcmp(params, "mf1", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Factory 1.");
  		SetPlayerPosEx(playerid, 2172.315185, -2263.781250, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2206.363769, -2262.568359, 24.240808);
		SetPlayerCameraLookAt(playerid, 2172.315185, -2263.781250, 13.335824);
	}
	else if(strcmp(params, "dh", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Drug House.");
  		SetPlayerPosEx(playerid, 323.577026, 1118.344116, -80.0);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 371);
		PlayerInfo[playerid][pVW] = 371;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 316.387817, 1123.946289, 1085.046020);
		SetPlayerCameraLookAt(playerid, 323.577026, 1118.344116, 1083.882812);
	}
	else if(strcmp(params, "mp2", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Pickup 2.");
  		SetPlayerPosEx(playerid, 2390.212402, -2008.328491, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2410.285644, -2013.919433, 21.716161);
		SetPlayerCameraLookAt(playerid, 2390.212402, -2008.328491, 13.553703);
	}
	else if(strcmp(params, "cl", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Crack Lab.");
  		SetPlayerPosEx(playerid, 2346.013916, -1185.367065, -80.0);
		SetPlayerInterior(playerid, 5);
		PlayerInfo[playerid][pInt] = 5;
		SetPlayerVirtualWorld(playerid, 371);
		PlayerInfo[playerid][pVW] = 371;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2342.012207, -1180.969848, 1029.412353);
		SetPlayerCameraLookAt(playerid, 2346.013916, -1185.367065, 1027.976562);
	}
	else if(strcmp(params, "mf2", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Materials Factory 2.");
  		SetPlayerPosEx(playerid, 2282.298828, -1110.143798, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, 2306.088623, -1133.968627, 52.929584);
		SetPlayerCameraLookAt(playerid, 2282.298828, -1110.143798, 37.976562);
	}
	else if(strcmp(params, "sfd", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching the Los Santos Docks.");
  		SetPlayerPosEx(playerid, -1576.488159, 50.301193, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -1569.082153, 96.206344, 34.091339);
		SetPlayerCameraLookAt(playerid, -1576.488159, 50.301193, 17.328125);
	}
	else if(strcmp(params, "ffc", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are now watching Fossil Fuel Company.");
  		SetPlayerPosEx(playerid, -2139.215087, -248.235076, -80.0);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		TogglePlayerControllable(playerid,0);
		SetPlayerCameraPos(playerid, -2170.527832, -246.948257, 40.965312);
		SetPlayerCameraLookAt(playerid, -2139.215087, -248.235076, 36.515625);
	}


	// OFF
	else if(strcmp(params, "off", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer watching any area.");
		SetPlayerPosEx(playerid, 1520.50, -1674.70, 13.55);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerFacingAngle(playerid, 270.0);
		SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid,1);
	}
	return 1;
}

CMD:goto(playerid, params[])
{
    if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not on Duty!");
			return 1;
		}
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goto [location]");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Locations 1: LS,SF,LV");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Locations 2: stadium1,stadium2,stadium3,stadium4,int1,mall,elque,bayside");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Locations 3: bank,allsaints,countygen,gym,fbi,prison,rc,lsvip,sfvip,mark,mark2");
			return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
			return 1;
		}
		if(strcmp(params,"ls",true) == 0)
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"sf",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -1417.0,-295.8,14.1);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"lv",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"bank",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1487.91, -1030.60, 23.66);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1487.91, -1030.60, 23.66);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"allsaints",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1192.78, -1292.68, 13.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1192.78, -1292.68, 13.38);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"countygen",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2000.05, -1409.36, 16.99);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 2000.05, -1409.36, 16.99);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"gym",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 2227.60, -1674.89, 14.62);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 2227.60, -1674.89, 14.62);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

   		}
		else if(strcmp(params,"fbi",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 344.77,-1526.08,33.28);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 344.77,-1526.08,33.28);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
  		else if(strcmp(params,"rc",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1253.70, 343.73, 19.41);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

   		}
     	else if(strcmp(params,"lsvip",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1814.42, -1575.05, 13.54);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1814.42, -1575.05, 13.54);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
     	else if(strcmp(params,"sfvip",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2433.63, 511.45, 30.38);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -2433.63, 511.45, 30.38);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
		}
		else if(strcmp(params,"prison",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 112.67, 1917.55, 18.72);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 112.67, 1917.55, 18.72);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium1",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1424.93, -664.59, 1059.86);
				LinkVehicleToInterior(tmpcar, 4);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -1424.93, -664.59, 1059.86);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,4);
			PlayerInfo[playerid][pInt] = 4;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium2",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
				LinkVehicleToInterior(tmpcar, 7);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -1395.96, -208.20, 1051.28);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,7);
			PlayerInfo[playerid][pInt] = 7;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium3",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1410.72, 1591.16, 1052.53);
				LinkVehicleToInterior(tmpcar, 14);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -1410.72, 1591.16, 1052.53);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,14);
			PlayerInfo[playerid][pInt] = 14;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"stadium4",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1394.20, 987.62, 1023.96);
				LinkVehicleToInterior(tmpcar, 15);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
    		}
			else
			{
				SetPlayerPosEx(playerid, -1394.20, 987.62, 1023.96);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,15);
			PlayerInfo[playerid][pInt] = 15;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"int1",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
				LinkVehicleToInterior(tmpcar, 1);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"mark",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt1"));
			}
			else
			{
				SetPlayerPosEx(playerid, GetPVarFloat(playerid, "tpPosX1"), GetPVarFloat(playerid, "tpPosY1"), GetPVarFloat(playerid, "tpPosZ1"));
			}
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt1"));
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"mark2",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
				LinkVehicleToInterior(tmpcar, GetPVarInt(playerid, "tpInt2"));
			}
			else
			{
				SetPlayerPosEx(playerid, GetPVarFloat(playerid, "tpPosX2"), GetPVarFloat(playerid, "tpPosY2"), GetPVarFloat(playerid, "tpPosZ2"));
			}
			SetPlayerInterior(playerid, GetPVarInt(playerid, "tpInt2"));
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else if(strcmp(params,"mall",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1133.71,-1464.52,15.77);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, 1133.71,-1464.52,15.77);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"elque",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1446.5997,2608.4478,55.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -1446.5997,2608.4478,55.8359);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
		else if(strcmp(params,"bayside",true) == 0)
		{
		 	if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -2465.1348,2333.6572,4.8359);
				LinkVehicleToInterior(tmpcar, 0);
				SetVehicleVirtualWorld(tmpcar, 0);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid, -2465.1348,2333.6572,4.8359);
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:accept(playerid, params[])
{
	new string[128];
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new giveplayerid;
    if(IsPlayerConnected(playerid)) {
        if(isnull(params)) {
            SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accept [name]");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Sex, Mats, Crack, Pot, Weapon, Craft, Repair, Lawyer, Bodyguard, Job, Live, Refill");
            SendClientMessageEx(playerid, COLOR_GREY, "Available names: Firework, Faction, Family, Bus, Boxing, Medic, Mechanic, Ticket, Car, Supcall, Death");
            return 1;
        }
        if(strcmp(params,"drink",true) == 0) {
            if((DrinkOffer[playerid] != INVALID_PLAYER_ID) && (IsPlayerConnected(DrinkOffer[playerid]))) {
                if (ProxDetectorS(8.0, playerid, DrinkOffer[playerid])) {
                    ShowPlayerDialog(playerid, DRINKLISTDIALOG, DIALOG_STYLE_LIST, "Available Drinks", "Beer ($60)\nVodka ($100)\nWhiskey ($100)\nWater ($20)\nSoda($20)", "Purchase", "Cancel");
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, " You're too far away from the bartender.");
                    DrinkOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, " No-one has offered you a drink.");
                return 1;
            }
        }
        if(strcmp(params,"death",true) == 0) {
            if(GetPVarInt(playerid, "Injured") == 1) {
                SendClientMessageEx(playerid, COLOR_WHITE, "You gave up hope and fell unconscious, you were immediately sent to the hospital.");
                KillEMSQueue(playerid);
                ResetPlayerWeaponsEx(playerid);
                SpawnPlayer(playerid);
            }
            else {  SendClientMessageEx(playerid, COLOR_GREY, "   You are not injured, you can't do this right now !"); }
        }
        if(strcmp(params,"car",true) == 0) {
            if(VehicleOffer[playerid] < 999) {
                if(IsPlayerConnected(VehicleOffer[playerid])) {
                    if(GetPlayerCash(playerid) > VehiclePrice[playerid]) {
                        if(IsPlayerInVehicle(VehicleOffer[playerid], PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId])) {
                            if(!ProxDetectorS(8.0, VehicleOffer[playerid], playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You are not near the car dealer");
                            new playervehicleid = GetPlayerFreeVehicleId(playerid);

			 				if(!vehicleCountCheck(playerid)) {
								return SendClientMessage(playerid, COLOR_GRAD2, "You can't own any more vehicles.");
							}
   							if(!vehicleSpawnCountCheck(playerid)) {
								return SendClientMessage(playerid, COLOR_GRAD2, "You have too many vehicles spawned - store one first.");
							}

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(VehicleOffer[playerid], ipex, sizeof(ipex));
                            format(string, sizeof(string), "[CAR] %s (IP: %s) has paid $%d to %s for the %s (IP: %s)", GetPlayerNameEx(playerid), ip, VehiclePrice[playerid], GetPlayerNameEx(VehicleOffer[playerid]), GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), ipex);
                            Log("logs/pay.log", string);
                            GetPlayerName(VehicleOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You bought the %s for $%d, from %s. (Check /carhelp for more help)", GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), VehiclePrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* You sold your %s to %s for $%d.",GetVehicleName(PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId]), sendername,VehiclePrice[playerid]);
                            SendClientMessageEx(VehicleOffer[playerid], COLOR_LIGHTBLUE, string);
                            GivePlayerCash( VehicleOffer[playerid], VehiclePrice[playerid] );
                            GivePlayerCash(playerid, -VehiclePrice[playerid]);
                            RemovePlayerFromVehicle(VehicleOffer[playerid]);
                            new Float:slx, Float:sly, Float:slz;
                            GetPlayerPos(VehicleOffer[playerid], slx, sly, slz);
                            SetPlayerPosEx(VehicleOffer[playerid], slx, sly, slz+2);
                            PlayerVehicleInfo[playerid][playervehicleid][pvId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLock] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock];
                            PlayerVehicleInfo[playerid][playervehicleid][pvLocked] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1];
                            PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2];
                            PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId];
                            PlayerVehicleInfo[playerid][playervehicleid][pvPark] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark];
                            PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
                            VehicleSpawned[playerid]++;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m];
                            }
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvModelId] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosX] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosY] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosZ] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPosAngle] = 0.0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLock] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvLocked] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPaintJob] = -1;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor1] = 0;
							PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvImpounded] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvColor2] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvAllowedPlayerId] = INVALID_PLAYER_ID;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvPark] = 0;
                            PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvSpawned] = 0;
                            VehicleSpawned[VehicleOffer[playerid]]--;
                            for(new m = 0; m < MAX_MODS; m++) {
                                PlayerVehicleInfo[VehicleOffer[playerid]][VehicleId[playerid]][pvMods][m] = 0;
                            }

						    g_mysql_SaveVehicle(playerid, playervehicleid);
							g_mysql_SaveVehicle(VehicleOffer[playerid], VehicleId[playerid]);

                            VehicleOffer[playerid] = INVALID_PLAYER_ID;
                            VehiclePrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GREY, "   The Car Dealer is not in the offered car!");
                            return 1;
                        }
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the car!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody offered to buy a car!");
                return 1;
            }
        }
        if(strcmp(params,"house",true) == 0) {
            if(HouseOffer[playerid] < 999) {
                if(IsPlayerConnected(HouseOffer[playerid])) {
                    if(PlayerInfo[HouseOffer[playerid]][pPhousekey] == INVALID_HOUSE_ID) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "They don't own that house.");
                        return 1;
                    }
                    if(GetPlayerCash(playerid) > HousePrice[playerid]) {

                        new house;
                        if(House[playerid] == 1) house = PlayerInfo[HouseOffer[playerid]][pPhousekey];
                        else if(House[playerid] == 2) house = PlayerInfo[HouseOffer[playerid]][pPhousekey2];
                        else return SendClientMessageEx(playerid, COLOR_RED, "Error: No house specified.");

                        ClearHouse(house);
                        HouseInfo[house][hLock] = 1;
                        format( HouseInfo[house][hOwner], 128, "Nobody" );
                        sendername = GetPlayerNameEx(HouseOffer[playerid]);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", HousePrice[playerid]);
                        GameTextForPlayer(HouseOffer[playerid], string, 4000, 3);
                        if(House[playerid] == 1) PlayerInfo[HouseOffer[playerid]][pPhousekey] = INVALID_HOUSE_ID;
                        else PlayerInfo[HouseOffer[playerid]][pPhousekey2] = INVALID_HOUSE_ID;
                        OnPlayerStatsUpdate(HouseOffer[playerid]);
                        DestroyPickupEx(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
                        GivePlayerCash(HouseOffer[playerid],HousePrice[playerid]);

                        PlayerInfo[playerid][pPhousekey] = house;
                        HouseInfo[house][hOwned] = 1;
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        strmid(HouseInfo[house][hOwner], sendername, 0, strlen(sendername), 255);
                        GivePlayerCash(playerid,-HousePrice[playerid]);
                        SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations on your new purchase!");
                        SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the property help section!");
                        SaveHouse(house);
                        OnPlayerStatsUpdate(playerid);
                        DestroyPickupEx(HouseInfo[house][hPickupID]);
                        HouseInfo[house][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
                        format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[house][hOwner],HouseInfo[house][hLevel],house);
                        UpdateDynamic3DTextLabelText(HouseInfo[house][hTextID], COLOR_GREEN, string);

                        new ip[32], ipex[32];
                        GetPlayerIp(HouseOffer[playerid],ip,sizeof(ip));
                        GetPlayerIp(playerid,ipex,sizeof(ipex));
                        format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) to %s (IP: %s) for $%d.",GetPlayerNameEx(HouseOffer[playerid]),ip,house,GetPlayerNameEx(playerid),ipex,HousePrice[playerid]);
                        Log("logs/house.log", string);

                        HouseOffer[playerid] = INVALID_PLAYER_ID;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the house!");
                        HouseOffer[playerid] = INVALID_PLAYER_ID;
                        HousePrice[playerid] = 0;
                        House[playerid] = 0;
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody offered to buy a house!");
                return 1;
            }
        }
        else if(strcmp(params, "handshake",true) == 0) {
            new
                Count;

            foreach(new i: Player) {
                if(GetPVarType(i, "shrequest") && GetPVarInt(i, "shrequest") == playerid) {
                    new
                        Float: ppFloats[3];

                    GetPlayerPos(i, ppFloats[0], ppFloats[1], ppFloats[2]);

                    if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]) || Spectating[i] > 0) {
                        Count++;
                        SendClientMessageEx(playerid, COLOR_WHITE, "You're too far away. You can't accept the handshake right now.");
                    }
                    else {
                        switch(GetPVarInt(i, "shstyle")) {
                            case 1:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 2:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 3:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
								DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 4:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 5:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000 );
                                ApplyAnimation( i, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 6:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600 );
                                ApplyAnimation( i, "GANGS","hndshkfa_swt", 4.0, 1, 1, 1, 0, 2600 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 7:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250 );
                                ApplyAnimation( i, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1250 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                            case 8:
                            {
                                Count++;
                                PlayerFacePlayer( playerid, i );
                                ApplyAnimation( playerid, "GANGS", "prtial_hndshk_biz_01", 3.7, 1, 1, 1, 0, 2200 );
                                ApplyAnimation( i, "GANGS", "prtial_hndshk_biz_01", 3.5, 1, 1, 1, 0, 2200 );
                                DeletePVar(i, "shrequest");
                                format(string, sizeof(string), "* %s has shook hands with %s.", GetPlayerNameEx(i), GetPlayerNameEx(playerid));
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                DeletePVar(i, "shstyle");
                            }
                        }
                    }
                }
            }
            if(Count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any pending handshake requests.");
            return 1;
        }
        else if(strcmp(params,"invite",true) == 0)
		{
            if(hInviteOffer[playerid] < 999)
			{
                if(IsPlayerConnected(hInviteOffer[playerid]))
				{
					hInviteHouse[playerid] = (hInviteSlot[playerid] == 1) ? (PlayerInfo[hInviteOffer[playerid]][pPhousekey]) : (PlayerInfo[hInviteOffer[playerid]][pPhousekey2]);
                    format(string, sizeof(string), "* You have accepted %s's house invite, a checkpoint has been set to their house.", GetPlayerNameEx(hInviteOffer[playerid]));
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s has accepted your house invite.", GetPlayerNameEx(playerid));
                    SendClientMessageEx(hInviteOffer[playerid], COLOR_LIGHTBLUE, string);
					DisablePlayerCheckpoint(playerid);
                    SetPlayerCheckpoint(playerid,HouseInfo[hInviteHouse[playerid]][hExteriorX], HouseInfo[hInviteHouse[playerid]][hExteriorY], HouseInfo[hInviteHouse[playerid]][hExteriorZ], 4.0);
                    gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
					hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
                else
				{
					hInviteSlot[playerid] = 0;
                    hInviteOffer[playerid] = INVALID_PLAYER_ID;
                    hInviteHouse[playerid] = INVALID_HOUSE_ID;
                    SendClientMessageEx(playerid, COLOR_GREY, "The player who sent you a house invite has disconnected.");
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "Nobody sent you a house invite.");
                return 1;
            }
            return 1;
        }
        else if(strcmp(params,"divorce",true) == 0) {
            if(DivorceOffer[playerid] < 999) {
                if(IsPlayerConnected(DivorceOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid])) {
                        GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* You have signed the divorce papers from %s, you are now single again.", giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s has signed the divorce papers, you are now single again.", sendername);
                        SendClientMessageEx(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
                        ClearMarriage(playerid);
                        ClearMarriage(DivorceOffer[playerid]);
                        PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The player that sent you the Divorce Papers is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "Nobody sent you any divorce papers.");
                return 1;
            }
        }
        else if(strcmp(params,"faction",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if( PlayerInfo[playerid][pFactionBanned] >= 1 && PlayerInfo[playerid][pFactionBanned] == InviteFaction[playerid] ) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to accept this faction invite, as you're banned from this faction. Contact a Head Admin.");
                        return 1;
                    }

                    if(GetPVarInt(playerid, "IsInArena") >= 0) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "Please wait until your Paintball Arena match is over.");
                        return 1;
                    }

                    if( PlayerInfo[playerid][pCSFBanned] >= 1 ) {
                        switch( InviteFaction[ playerid ] ) {
                            case 1, 2, 3, 4, 5, 6, 7, 11, 12: return SendClientMessageEx(playerid, COLOR_WHITE, "You are unable to accept this faction invite, as you're banned from Civil Service Factions. Contact a Head Admin.");
                        }
                    }

                    if(InviteFaction[playerid] > 0 && InviteFamily[playerid] == 255) {
						PlayerInfo[playerid][pMember] = InviteFaction[playerid];
                        PlayerInfo[playerid][pRank] = 0;
                        PlayerInfo[playerid][pDivision] = 0;
                        PlayerInfo[playerid][pCallsAccepted] = 0;

						format(string, sizeof(string), "%s has accepted %s's invite to join the %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(InviteOffer[playerid]), factionName(InviteFaction[playerid]));
						Log("logs/faction.log", string);
                        format(string, sizeof(string), "   You have accepted the invitation and joined the %s, you were invited by %s.", factionName(InviteFaction[playerid]), GetPlayerNameEx(InviteOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "   %s has accepted the invitation and joined the %s.", GetPlayerNameEx(playerid), factionName(InviteFaction[playerid]));
                        SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
                        InviteOffer[playerid] = INVALID_PLAYER_ID;
                        InviteFaction[playerid] = 0;
                        InviteFamily[playerid] = 255;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
        else if(strcmp(params,"family",true) == 0) {
            if(InviteOffer[playerid] < 999) {
                if(IsPlayerConnected(InviteOffer[playerid])) {
                    if(InviteFaction[playerid] == 0 && InviteFamily[playerid] != 255) {
                        if(GetPVarInt(playerid, "IsInArena") >= 0) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "Please wait until your Paintball Arena match is over.");
                            return 1;
                        }

                        if(PlayerInfo[playerid][pJailTime] > 1) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "Please wait until you are released from jail/prison before you accept the invite.");
                            return 1;
                        }

                        if( PlayerInfo[playerid][pMember] >= 3 || PlayerInfo[playerid][pFMember] != 255 || PlayerInfo[playerid][pLeader] >= 3 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pDivision] >= 3 || PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pDivision] == 1) {
                            SendClientMessageEx(playerid, COLOR_WHITE, "You can't accept this invite as you're already in a family/faction.");
                        }
                        else {
                            PlayerInfo[playerid][pFMember] = InviteFamily[playerid];
                            PlayerInfo[playerid][pRank] = 1;
                            FamilyInfo[InviteFamily[playerid]][FamilyMembers] ++;
                            SaveFamilies();
                            format(string, sizeof(string), "   You have accepted the invitation and joined the %s, you were invited by %s.", FamilyInfo[InviteFamily[playerid]][FamilyName], GetPlayerNameEx(InviteOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "   %s has accepted the invitation and joined the %s.", GetPlayerNameEx(playerid),FamilyInfo[InviteFamily[playerid]][FamilyName]);
                            SendClientMessageEx(InviteOffer[playerid], COLOR_LIGHTBLUE, string);
                            SendClientMessageEx(playerid, COLOR_WHITE, "Use (/f)amily to talk in family chat. If you wish to acquire a family skin, type /clothes inside a clothes store.");
                            InviteOffer[playerid] = INVALID_PLAYER_ID;
                            InviteFaction[playerid] = 0;
                            InviteFamily[playerid] = 255;
                        }
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No one has invited you to join an organisation/family!");
                return 1;
            }
        }
        else if(strcmp(params,"witness",true) == 0) {
            if(MarryWitnessOffer[playerid] < 999) {
                if(IsPlayerConnected(MarryWitnessOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid])) {
                        GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* You have accepted %s's request to be their marriage witness.", giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s has accepted your request to be your marriage witness.", sendername);
                        SendClientMessageEx(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
                        MarryWitness[MarryWitnessOffer[playerid]] = playerid;
                        MarryWitnessOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The player that requested you to be their marriage witness is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one asked you to be their marriage witness!");
                return 1;
            }
        }
        else if(strcmp(params,"marriage",true) == 0) {
            if(ProposeOffer[playerid] < 999) {
                if(IsPlayerConnected(ProposeOffer[playerid])) {
                    if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid])) {
                        if(MarryWitness[ProposeOffer[playerid]] == INVALID_PLAYER_ID) {
                            SendClientMessageEx(playerid, COLOR_GREY, "   The proposer doesn't have a marriage witness!");
                            return 1;
                        }
                        if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]])) {
                            if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]])) {
                                if(IsPlayerInRangeOfPoint(playerid, 10.0, 1963.9612, -369.1851, 1093.7289)) {
                                    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
                                    GetPlayerName(playerid, sendername, sizeof(sendername));
                                    format(string, sizeof(string), "* You have accepted %s's request to be your husband.", giveplayer);
                                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "* %s has accepted your request to be your wife.", sendername);
                                    SendClientMessageEx(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
                                    format(string, sizeof(string), "Priest: %s, do you take %s as your lovely husband? (Type 'yes', as anything else will reject the marriage.)", sendername, giveplayer);
                                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                                    MarriageCeremoney[playerid] = 1;
                                    ProposedTo[ProposeOffer[playerid]] = playerid;
                                    GotProposedBy[playerid] = ProposeOffer[playerid];
                                    MarryWitness[ProposeOffer[playerid]] = INVALID_PLAYER_ID;
                                    ProposeOffer[playerid] = INVALID_PLAYER_ID;
                                    return 1;
                                }
                                else {
                                    SendClientMessageEx(playerid, COLOR_GREY, "   You are not at the church!");
                                    return 1;
                                }
                            }
                            else {
                                SendClientMessageEx(playerid, COLOR_GREY, "   The marriage witness is not near your proposer!");
                                return 1;
                            }
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The player that proposed to you is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   Nobody proposed to you!");
                return 1;
            }
        }
        else if(strcmp(params,"ticket",true) == 0) {
            if(TicketOffer[playerid] < 999) {
                if(IsPlayerConnected(TicketOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, TicketOffer[playerid])) {
                        if(GetPlayerCash(playerid) >= TicketMoney[playerid]) {
                            //new ip[32], ipex[32];
                            //GetPlayerIp(playerid, ip, sizeof(ip));
                            //GetPlayerIp(TicketOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[FACTION TICKET] %s (IP: %s) has paid $%d to %s (IP: %s)", GetPlayerNameEx(playerid), ip, TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);
                            format(string, sizeof(string), "* You have paid the ticket of $%d to %s.", TicketMoney[playerid], GetPlayerNameEx(TicketOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has paid your ticket of $%d.", GetPlayerNameEx(playerid), TicketMoney[playerid]);
                            SendClientMessageEx(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has paid the ticket.", GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            GivePlayerCash(playerid, - TicketMoney[playerid]);
                            Tax += TicketMoney[playerid];
                            TicketOffer[playerid] = INVALID_PLAYER_ID;
                            TicketMoney[playerid] = 0;
                            if(GetPlayerCash(playerid) < 1) GivePlayerCash(playerid, 0);
                            return 1;
                        }
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   The officer is not near you!");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a ticket!");
                return 1;
            }
        }
        else if(strcmp(params,"boxing",true) == 0) {
            if(BoxOffer[playerid] < 999) {
                if(IsPlayerConnected(BoxOffer[playerid])) {
                    new points;
                    new mypoints;
                    GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
                    if(level >= 0 && level <= 50) { points = 40; }
                    else if(level >= 51 && level <= 100) { points = 50; }
                    else if(level >= 101 && level <= 200) { points = 60; }
                    else if(level >= 201 && level <= 400) { points = 70; }
                    else if(level >= 401) { points = 80; }
                    if(PlayerInfo[playerid][pJob] == 12 || PlayerInfo[playerid][pJob2] == 12) {
                        new clevel = PlayerInfo[playerid][pBoxSkill];
                        if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
                        else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
                        else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
                        else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
                        else if(clevel >= 401) { mypoints = 80; }
                    }
                    else {
                        mypoints = 30;
                    }
                    format(string, sizeof(string), "* You have accepted the Boxing Challenge from %s, and will fight with %d Health.",giveplayer,mypoints);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s has accepted your Boxing Challenge Request, you will fight with %d Health.",sendername,points);
                    SendClientMessageEx(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
                    if(IsPlayerInRangeOfPoint(playerid,20.0,758.98, -60.32, 1000.78) || IsPlayerInRangeOfPoint(BoxOffer[playerid],20.0,758.98, -60.32, 1000.78)) {
                        ResetPlayerWeapons(playerid);
                        ResetPlayerWeapons(BoxOffer[playerid]);
                        SetPlayerHealth(playerid, mypoints);
                        SetPlayerHealth(BoxOffer[playerid], points);
                        SetPlayerInterior(playerid, 7); SetPlayerInterior(BoxOffer[playerid], 7);
                        SetPlayerPosEx(playerid, 768.94, -70.87, 1001.56); SetPlayerFacingAngle(playerid, 131.8632);
                        SetPlayerPosEx(BoxOffer[playerid], 764.35, -66.48, 1001.56); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
                        TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
                        GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
                        new name[MAX_PLAYER_NAME];
                        new dstring[MAX_PLAYER_NAME];
                        new wstring[MAX_PLAYER_NAME];
                        GetPlayerName(playerid, name, sizeof(name));
                        format(dstring, sizeof(dstring), "%s", name);
                        strmid(wstring, dstring, 0, strlen(dstring), 255);
                        if(strcmp(Titel[TitelName] ,wstring, true ) == 0 ) {
                            format(string, sizeof(string), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  sendername, giveplayer);
                            ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                            TBoxer = playerid;
                            BoxDelay = 60;
                        }
                        GetPlayerName(BoxOffer[playerid], name, sizeof(name));
                        format(dstring, sizeof(dstring), "%s", name);
                        strmid(wstring, dstring, 0, strlen(dstring), 255);
                        if(strcmp(Titel[TitelName] ,wstring, true ) == 0 ) {
                            format(string, sizeof(string), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  giveplayer, sendername);
                            ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                            TBoxer = BoxOffer[playerid];
                            BoxDelay = 60;
                        }
                        BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
                        if(BoxDelay < 1) { BoxDelay = 20; }
                        InRing = 1;
                        Boxer1 = BoxOffer[playerid];
                        Boxer2 = playerid;
                        PlayerBoxing[playerid] = 1;
                        PlayerBoxing[BoxOffer[playerid]] = 1;
                        BoxOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    ResetPlayerWeapons(playerid);
                    ResetPlayerWeapons(BoxOffer[playerid]);
                    SetPlayerHealth(playerid, mypoints);
                    SetPlayerHealth(BoxOffer[playerid], points);
                    SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
                    SetPlayerPosEx(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
                    SetPlayerPosEx(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
                    TogglePlayerControllable(playerid, 0); TogglePlayerControllable(BoxOffer[playerid], 0);
                    GameTextForPlayer(playerid, "~r~Waiting", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Waiting", 3000, 1);
                    new name[MAX_PLAYER_NAME];
                    new dstring[MAX_PLAYER_NAME];
                    new wstring[MAX_PLAYER_NAME];
                    GetPlayerName(playerid, name, sizeof(name));
                    format(dstring, sizeof(dstring), "%s", name);
                    strmid(wstring, dstring, 0, strlen(dstring), 255);
                    if(strcmp(Titel[TitelName] ,wstring, true ) == 0 ) {
                        format(string, sizeof(string), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  sendername, giveplayer);
                        ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                        TBoxer = playerid;
                        BoxDelay = 60;
                    }
                    GetPlayerName(BoxOffer[playerid], name, sizeof(name));
                    format(dstring, sizeof(dstring), "%s", name);
                    strmid(wstring, dstring, 0, strlen(dstring), 255);
                    if(strcmp(Titel[TitelName] ,wstring, true ) == 0 ) {
                        format(string, sizeof(string), "Boxing News: Boxing Champion %s will fight VS %s, in 60 seconds (Grove Street Gym).",  giveplayer, sendername);
                        ProxDetector(30.0, playerid, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
                        TBoxer = BoxOffer[playerid];
                        BoxDelay = 60;
                    }
                    BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
                    if(BoxDelay < 1) { BoxDelay = 20; }
                    InRing = 1;
                    Boxer1 = BoxOffer[playerid];
                    Boxer2 = playerid;
                    PlayerBoxing[playerid] = 1;
                    PlayerBoxing[BoxOffer[playerid]] = 1;
                    BoxOffer[playerid] = INVALID_PLAYER_ID;
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a Boxing Challenge!");
                return 1;
            }
        }
        else if(strcmp(params,"bus",true) == 0) {
            if(TransportDuty[playerid] != 2) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a bus driver!");
                return 1;
            }
            if(BusCallTime[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a bus call!");
                return 1;
            }
            if(BusCall < 999) {
                if(IsPlayerConnected(BusCall)) {
                    if(CheckPointCheck(playerid)) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                        return 1;
                    }
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* You have accepted the Bus Call from %s, you will see the marker untill you have reached it.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    new zone[MAX_ZONE_NAME];
					GetPlayer3DZone(BusCall, zone, sizeof(zone));
					format(string, sizeof(string), "* %s can be found at %s.", GetPlayerNameEx(BusCall), zone);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* Bus Driver %s has accepted your bus call; please wait at your current position.",sendername);
                    SendClientMessageEx(BusCall, COLOR_LIGHTBLUE, string);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(BusCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Bus Caller~n~~r~Goto redmarker", 5000, 1);
                    BusCallTime[playerid] = 1;
                    BusAccepted[playerid] = BusCall;
                    BusCall = INVALID_PLAYER_ID;
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Bus yet!");
                return 1;
            }
        }
        else if(strcmp(params,"medic",true) == 0) {
            if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4) {
                if(MedicCallTime[playerid] > 0) {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a Medic Call!");
                    return 1;
                }
                if(CheckPointCheck(playerid)) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                    return 1;
                }
                if(MedicCall < 999) {
                    if(IsPlayerConnected(MedicCall)) {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
                        format(string, sizeof(string), "* You have accepted the Medic Call from %s.",giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* After the 45 Seconds the red marker will dissapear.");
                        format(string, sizeof(string), "* Medic %s has accepted your Medic Call please wait at your current Position.",sendername);
                        SendClientMessageEx(MedicCall, COLOR_LIGHTBLUE, string);
                        new Float:X,Float:Y,Float:Z;
                        GetPlayerPos(MedicCall, X, Y, Z);
                        SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                        new zone[MAX_ZONE_NAME];
                        GetPlayer3DZone(MedicCall, zone, sizeof(zone));
                        format(string, sizeof(string), "HINT: %s is located in %s", GetPlayerNameEx(MedicCall), zone);
                        SendClientMessageEx(playerid, COLOR_WHITE, string);
                        MedicCallTime[playerid] = 1;
                        MedicAccepted[playerid] = MedicCall;
                        MedicCall = INVALID_PLAYER_ID;
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Medic yet!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Medic!");
                return 1;
            }
        }
        else if(strcmp(params,"mechanic",true) == 0) {
            if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Car Mechanic!");
                return 1;
            }
            if(MechanicCallTime[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_GREY, "   You have already accepted a Mechanic Call!");
                return 1;
            }
            if(CheckPointCheck(playerid)) {
                SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                return 1;
            }
            if(MechanicCall < 999) {
                if(IsPlayerConnected(MechanicCall)) {
                    if(playerid == MechanicCall) return 1;
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
                    format(string, sizeof(string), "* You have accepted the Mechanic Call from %s, you have 30 seconds to get there.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* After the 30 Seconds the red marker will dissapear.");
                    format(string, sizeof(string), "* Car Mechanic %s has accepted your Mechanic Call, please wait at your current position.",sendername);
                    SendClientMessageEx(MechanicCall, COLOR_LIGHTBLUE, string);
                    new Float:X,Float:Y,Float:Z;
                    GetPlayerPos(MechanicCall, X, Y, Z);
                    SetPlayerCheckpoint(playerid, X, Y, Z, 5);
                    GameTextForPlayer(playerid, "~w~Mechanic Caller~n~~r~Go to the red marker", 5000, 1);
                    MechanicCallTime[playerid] = 1;
                    MechanicCall = INVALID_PLAYER_ID;
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one called for a Car Mechanic yet!");
                return 1;
            }
        }
        else if(strcmp(params,"job",true) == 0) {
            if(GettingJob[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                if(GettingJob[playerid] == 14) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You can find drug crates in blueberry. ( Goto checkpoint )");
                    if(CheckPointCheck(playerid)) {
                        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
                        return 1;
                    }
                    SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
                }
                if(GettingJob[playerid] == 21) {
                	SendClientMessageEx(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
					PlayerInfo[playerid][pModel] = 155;
					SetPlayerSkin(playerid, 155);
                }
                PlayerInfo[playerid][pJob] = GettingJob[playerid];
                GettingJob[playerid] = 0;
                return 1;
            }
            if(GettingJob2[playerid] > 0) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Congratulations with your new Job, type /help to see your new command.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have taken this as a secondary job.");
                if(GettingJob2[playerid] == 14) {
                    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You can find drug crates in blueberry. ( Goto checkpoint )");
                    SetPlayerCheckpoint(playerid, 51.9720,-292.6349,1.7031, 3);
                }
                if(GettingJob2[playerid] == 21) {
                	SendClientMessageEx(playerid, COLOR_WHITE, "You have been given a Pizza Stack uniform!");
					PlayerInfo[playerid][pModel] = 155;
					SetPlayerSkin(playerid, 155);
                }
                PlayerInfo[playerid][pJob2] = GettingJob2[playerid];
                GettingJob2[playerid] = 0;
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   You haven't even been at a job place yet!");
                return 1;
            }
        }
        else if(strcmp(params,"live",true) == 0) {
            if(LiveOffer[playerid] < 999) {
                if(IsPlayerConnected(LiveOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, LiveOffer[playerid])) {
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends.");
                        SendClientMessageEx(LiveOffer[playerid], COLOR_LIGHTBLUE, "* You are frozen till the Live Conversation ends (use /live again).");
                        TogglePlayerControllable(playerid, 0);
                        TogglePlayerControllable(LiveOffer[playerid], 0);
                        TalkingLive[playerid] = LiveOffer[playerid];
                        TalkingLive[LiveOffer[playerid]] = playerid;
                        LiveOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are to far away from the News Reporter!");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one gave you a Live Conversation offer!");
                return 1;
            }
        }
        else if(strcmp(params,"lawyer",true) == 0) {
            if(sscanf(params, "{s[6]}u", giveplayerid))
            {
                SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accept lawyer [player]");
                return 1;
            }
            if (IsACop(playerid)) {
                if(IsPlayerConnected(giveplayerid)) {
                    if(giveplayerid != INVALID_PLAYER_ID) {
                        if(PlayerInfo[giveplayerid][pJob] == 2 || PlayerInfo[giveplayerid][pJob2] == 2) {
                            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You allowed %s to free a Jailed Person.", giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE,string);
                            format(string, sizeof(string), "* Officer %s approved (allowed) you to free a Jailed Person. (use /free)", sendername);
                            SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,string);
                            ApprovedLawyer[giveplayerid] = 1;
                            return 1;
                        }
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "Invalid action! (You are no cop / Player is not a Lawyer / Bad ID)");
                return 1;
            }
        }
        else if(strcmp(params,"bodyguard",true) == 0) {
            if(GuardOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > GuardPrice[playerid]) {
                    if(IsPlayerConnected(GuardOffer[playerid])) {
                        if(ProxDetectorS(6.0, playerid, GuardOffer[playerid])) {
                            new Float:armour;
                            GetPlayerArmour(playerid, armour);
                            if(armour >= 50) {
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You already have a vest!");
                                return 1;
                            }
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(GuardOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[BODYGUARD] %s (IP:%s) has paid $%d to %s (IP:%s)", GetPlayerNameEx(playerid), ip, GuardPrice[playerid], GetPlayerNameEx(GuardOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);

                            if(GuardPrice[playerid] >= 25000 && (PlayerInfo[GuardOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has guarded %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(GuardOffer[playerid]), ipex, GuardPrice[playerid]);
                                // Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 2);
                            }

                            SetPlayerArmour(playerid, 50);
                            GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You accepted the protection for $%d from %s.",GuardPrice[playerid],GetPlayerNameEx(GuardOffer[playerid]));
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s accepted your protection, and the $%d was added to your money.",GetPlayerNameEx(playerid),GuardPrice[playerid]);
                            SendClientMessageEx(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
                            GivePlayerCash(GuardOffer[playerid], GuardPrice[playerid]);
                            GivePlayerCash(playerid, -GuardPrice[playerid]);
                            ExtortionTurfsWarsZone(GuardOffer[playerid], 2, GuardPrice[playerid]);
                            GuardOffer[playerid] = INVALID_PLAYER_ID;
                            GuardPrice[playerid] = 0;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near the person offering you guard!");
                            return 1;
                        }
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Protection!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params,"defense",true) == 0) {
            if(DefendOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > DefendPrice[playerid]) {
                    if(IsPlayerConnected(DefendOffer[playerid])) {
                        PlayerInfo[playerid][pWantedLevel]--;
                        SetPlayerWantedLevel(playerid, PlayerInfo[playerid][pWantedLevel]);
                        SetPlayerToTeamColor(playerid);
                        giveplayer = GetPlayerNameEx(DefendOffer[playerid]);
                        sendername = GetPlayerNameEx(playerid);
                        format(string, sizeof(string), "* You accepted the Defense for $%d from Lawyer %s.",DefendPrice[playerid],giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s accepted your Defense, and the $%d was added to your money.",sendername,DefendPrice[playerid]);
                        SendClientMessageEx(DefendOffer[playerid], COLOR_LIGHTBLUE, string);
                        GivePlayerCash( DefendOffer[playerid],DefendPrice[playerid]);
                        GivePlayerCash(playerid, -DefendPrice[playerid]);
                        DefendOffer[playerid] = INVALID_PLAYER_ID;
                        DefendPrice[playerid] = 0;
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Protection!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params,"appeal",true) == 0) {
            if(AppealOffer[playerid] < 999) {
                if(IsPlayerConnected(AppealOffer[playerid])) {
                    AppealOfferAccepted[playerid] = 1;
                    giveplayer = GetPlayerNameEx(AppealOffer[playerid]);
                    sendername = GetPlayerNameEx(playerid);
                    format(string, sizeof(string), "* You accepted the appeal from Lawyer %s.",giveplayer);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s accepted your appeal, a message to the Judicial System has been sent, please wait at the courtroom.",sendername);
                    SendClientMessageEx(AppealOffer[playerid], COLOR_LIGHTBLUE, string);
                    return 1;
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Protection!");
                return 1;
            }
        }
        else if(strcmp(params,"mats",true) == 0)
		{
            if(MatsOffer[playerid] < 999)
			{
                if(GetPlayerCash(playerid) >= MatsPrice[playerid])
                {
                	if(IsPlayerConnected(MatsOffer[playerid]))
					{
    					if(GetPVarInt(playerid, "SellMatsTimer") > 0)
						{
							format(string, sizeof(string), "You must wait %d seconds before accepting materials.", GetPVarInt(playerid, "SellMatsTimer"));
							SendClientMessageEx(playerid,COLOR_GREY,string);
							return 1;
						}
						new iTargetName[MAX_PLAYER_NAME];
						GetPVarString(playerid, "MatsOfferName", iTargetName, sizeof(iTargetName));
						if(strcmp(iTargetName, GetPlayerNameEx(MatsOffer[playerid])) != 0) {
			                return SendClientMessageEx(playerid, COLOR_GREY, "The other player has disconnected.");
						}
						if(PlayerInfo[MatsOffer[playerid]][pMats] < MatsAmount[playerid])
						{
						    SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that amount of materials anymore!");
						    return 1;
						}
     					new ip[32], ipex[32];
          				GetPlayerIp(playerid, ip, sizeof(ip));
              			GetPlayerIp(MatsOffer[playerid], ipex, sizeof(ipex));
                 		format(string, sizeof(string), "[MATERIALS (%d)] %s (IP:%s) has paid $%d to %s (IP:%s)", MatsAmount[playerid], GetPlayerNameEx(playerid), ip, MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]), ipex);
                   		Log("logs/pay.log", string);

         				format(string, sizeof(string), "* You bought %d materials for $%d from %s.", MatsAmount[playerid], MatsPrice[playerid], GetPlayerNameEx(MatsOffer[playerid]));
            			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
              			format(string, sizeof(string), "* %s has bought your %d materials, the $%d was added to your money.", GetPlayerNameEx(playerid), MatsAmount[playerid], MatsPrice[playerid]);
                		SendClientMessageEx(MatsOffer[playerid], COLOR_LIGHTBLUE, string);

                  		GivePlayerCash(MatsOffer[playerid], MatsPrice[playerid]);
						GivePlayerCash(playerid, -MatsPrice[playerid]);
                    	PlayerInfo[playerid][pMats] += MatsAmount[playerid];
                    	PlayerInfo[MatsOffer[playerid]][pMats] -= MatsAmount[playerid];

                    	MatsOffer[playerid] = INVALID_PLAYER_ID;
                    	MatsPrice[playerid] = 0;
                    	MatsAmount[playerid] = 0;
					}
				}
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "You can't afford those materials!");
                    return 1;
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "No-one offered you any materials!");
                return 1;
            }
        }
        else if(strcmp(params,"firework",true) == 0) {
            if(FireworkOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > FireworkPrice[playerid]) {
                	if(IsPlayerConnected(FireworkOffer[playerid])) {
 						if(PlayerInfo[FireworkOffer[playerid]][pFirework] < FireworkCount[playerid])	{
							SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that number of fireworks anymore!");
							return 1;
						}
                        GivePlayerCash(playerid, -FireworkPrice[playerid]);
                        GivePlayerCash(FireworkOffer[playerid], FireworkPrice[playerid]);
                        GetPlayerName(FireworkOffer[playerid], giveplayer, sizeof(giveplayer));
                        GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* You bought %d fireworks for $%d from %s.",FireworkCount[playerid],FireworkPrice[playerid],giveplayer);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* %s has bought your %d fireworks, $%d was added to your money.",sendername,FireworkCount[playerid],FireworkPrice[playerid]);
                        SendClientMessageEx(FireworkOffer[playerid], COLOR_LIGHTBLUE, string);
                        ExtortionTurfsWarsZone(FireworkOffer[playerid], 5, FireworkPrice[playerid]);
                        PlayerInfo[FireworkOffer[playerid]][pFirework] -= FireworkCount[playerid];
                        PlayerInfo[playerid][pFirework] += FireworkCount[playerid];
						FireworkOffer[playerid] = INVALID_PLAYER_ID;
                        FireworkPrice[playerid] = 0;
                        FireworkCount[playerid] = 0;
                        return 1;
      				}
         		}
          		else {
                	SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford that firework!");
	                return 1;
            	}
       	    }
		    else {
        		SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any fireworks!");
            	return 1;
          	}
 	    }
        else if(strcmp(params,"pot",true) == 0) {
            if(PotOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > PotPrice[playerid]) {
                    if(PlayerInfo[playerid][pPot] < 25) {
                        if(IsPlayerConnected(PotOffer[playerid])) {
							if(PlayerInfo[PotOffer[playerid]][pPot] < PotGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that amount of pot anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(PotOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[POT (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", PotGram[playerid], GetPlayerNameEx(playerid), ip, PotPrice[playerid], GetPlayerNameEx(PotOffer[playerid]), ipex);
                            //Log("logs/pay.log", string);*/


                            GetPlayerName(PotOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You bought %d gram for $%d from Drug Dealer %s.",PotGram[playerid],PotPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has bought your %d gram, the $%d was added to your money.",sendername,PotGram[playerid],PotPrice[playerid]);
                            SendClientMessageEx(PotOffer[playerid], COLOR_LIGHTBLUE, string);
                            ExtortionTurfsWarsZone(PotOffer[playerid], 1, PotPrice[playerid]);
                            PlayerInfo[PotOffer[playerid]][pCash] += PotPrice[playerid];
							if(DoubleXP) {
								SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "You have gained 2 drug dealer skill points instead of 1. (Double XP Active)");
								PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
							}
							else
							if(PlayerInfo[PotOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
							{
								format(string, sizeof(string), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[PotOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, string);
   								PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
							}
							else
							{
  								PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 1;
							}

                            GivePlayerCash(playerid, -PotPrice[playerid]);
                            PlayerInfo[playerid][pPot] += PotGram[playerid];
                            PlayerInfo[PotOffer[playerid]][pPot] -= PotGram[playerid];
                            if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
                            PotOffer[playerid] = INVALID_PLAYER_ID;
                            PotPrice[playerid] = 0;
                            PotGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are fully loaded with Drugs, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford those Pot!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Pot!");
                return 1;
            }
        }
        else if(strcmp(params,"crack",true) == 0) {
            if(CrackOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > CrackPrice[playerid]) {
                    if(PlayerInfo[playerid][pCrack] < 25) {
                        if(IsPlayerConnected(CrackOffer[playerid])) {
 							if(PlayerInfo[CrackOffer[playerid]][pCrack] < CrackGram[playerid])
							{
						    	SendClientMessageEx(playerid,COLOR_GREY, "That player does not have that amount of crack anymore!");
						    	return 1;
							}
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(CrackOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[CRACK DEAL (%d GRAMS)] %s (IP:%s) has paid $%d to %s (IP:%s)", CrackGram[playerid], GetPlayerNameEx(playerid), ip, CrackPrice[playerid], GetPlayerNameEx(CrackOffer[playerid]), ipex);
                            // Log("logs/pay.log", string);

                            GivePlayerCash(playerid, -CrackPrice[playerid]);
                            GivePlayerCash(CrackOffer[playerid], CrackPrice[playerid]);
                            GetPlayerName(CrackOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You bought %d gram for $%d from Drug Dealer %s.",CrackGram[playerid],CrackPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s has bought your %d gram, the $%d was added to your money.",sendername,CrackGram[playerid],CrackPrice[playerid]);
                            SendClientMessageEx(CrackOffer[playerid], COLOR_LIGHTBLUE, string);
                            ExtortionTurfsWarsZone(CrackOffer[playerid], 1, CrackPrice[playerid]);
//SetPVarInt(CrackOffer[playerid], "Cash", GetPVarInt(CrackOffer[playerid], "Cash")+CrackOffer[playerid]);
							if(DoubleXP) {
								SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "You have gained 2 drug dealer skill points instead of 1. (Double XP Active)");
								PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
							}
							else
							if(PlayerInfo[CrackOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
							{
								format(string, sizeof(string), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[CrackOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, string);
   								PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
							}
							else
							{
  								PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 1;
							}

                            PlayerInfo[playerid][pCrack] += CrackGram[playerid];
                            PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
                            if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 50)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 100)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 200)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                            else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 400)
                            { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }
							CrackOffer[playerid] = INVALID_PLAYER_ID;
                            CrackPrice[playerid] = 0;
                            CrackGram[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GREY, "   You are fully loaded with Crack, use them first!");
                        return 1;
                    }
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford that Crack!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you any Crack!");
                return 1;
            }
        }
        else if(strcmp(params,"weapon",true) == 0) {
            if(GunOffer[playerid] < 999) {
                if(IsPlayerConnected(GunOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, GunOffer[playerid])) {
                        if(PlayerInfo[playerid][pHospital] == 1 || PlayerInfo[playerid][pHospital] == 2 || PlayerInfo[playerid][pHospital] == 3 || PlayerInfo[playerid][pHospital] == 4 || PlayerInfo[playerid][pHospital] == 5) {
                            SendClientMessageEx(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
                            return 1;
                        }
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
                        new weaponname[32];
                        GetWeaponName(GunId[playerid], weaponname, sizeof(weaponname));
                        format(string, sizeof(string), "   You have given %s, a %s.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessageEx(GunOffer[playerid], COLOR_GRAD1, string);
                        format(string, sizeof(string), "   You have recieved a %s from %s.", weaponname, GetPlayerNameEx(GunOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to %s.", GetPlayerNameEx(GunOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ExtortionTurfsWarsZone(GunOffer[playerid], 3, 1000);
                        GivePlayerValidWeapon(playerid,GunId[playerid],50000);
                        //new ip[32], ipex[32];
                        //GetPlayerIp(playerid, ip, sizeof(ip));
                        //GetPlayerIp(GunOffer[playerid], ipex, sizeof(ipex));
                        //format(string, sizeof(string), "[WEAPON DEAL] %s(IP:%s) has bought a %s from %s(IP:%s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(GunOffer[playerid]), ipex);
                        //Log("logs/pay.log", string);
                        PlayerInfo[GunOffer[playerid]][pMats] -= GunMats[playerid];

						StorageInfo[GunOffer[playerid]][GunStorageID[playerid]][sMats] -= GunMats[playerid];
                        if(GunId[playerid] > 15)
						{
							if(DoubleXP) {
								SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "You have gained 2 arms skill points instead of 1. (Double XP Active)");
								PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
							}
							else
   							if(PlayerInfo[GunOffer[playerid]][pDonateRank] == 2 || PlayerInfo[GunOffer[playerid]][pDonateRank] == 3 && !DoubleXP)
			    			{
			        			PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
			    			}
			    			else if(PlayerInfo[GunOffer[playerid]][pDoubleEXP] > 0 && PlayerInfo[GunOffer[playerid]][pDonateRank] < 2 && !DoubleXP)
							{
								format(string, sizeof(string), "You have gained 2 arms skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[GunOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, string);
   								PlayerInfo[GunOffer[playerid]][pArmsSkill] += 2;
							}
			    			else
			    			{
                				PlayerInfo[GunOffer[playerid]][pArmsSkill]++;
                			}
                        }
                        if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 50)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 2, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 100)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 3, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 200)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 4, more weapons are available to sell."); }
                        else if(PlayerInfo[GunOffer[playerid]][pArmsSkill] == 400)
                        { SendClientMessageEx(GunOffer[playerid], COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 5, more weapons are available to sell."); }
                        GunOffer[playerid] = INVALID_PLAYER_ID;
						GunStorageID[playerid] = -1;
                        GunId[playerid] = 0;
                        GunMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be the near the player that is selling you the weapon !");
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a Weapon!");
                return 1;
            }
        }
        else if(strcmp(params,"craft",true) == 0) {
            if(CraftOffer[playerid] < 999) {
                if(IsPlayerConnected(CraftOffer[playerid])) {
                    if (ProxDetectorS(5.0, playerid, CraftOffer[playerid])) {
                        if(PlayerInfo[playerid][pHospital] == 1 || PlayerInfo[playerid][pHospital] == 2 || PlayerInfo[playerid][pHospital] == 3 || PlayerInfo[playerid][pHospital] == 4 || PlayerInfo[playerid][pHospital] == 5) {
                            SendClientMessageEx(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
                            return 1;
                        }
                        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
                        new weaponname[50];
                        format(weaponname, 50, "%s", CraftName[playerid]);
                        switch(CraftId[playerid]) {
                            case 1:
                            {
                                PlayerInfo[playerid][pScrewdriver]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/sellgun");
                            }
                            case 2:
                            {
                                PlayerInfo[playerid][pSmslog]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/smslog");
                            }
                            case 3:
                            {
                                PlayerInfo[playerid][pWristwatch]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/wristwatch");
                            }
                            case 4:
                            {
                                PlayerInfo[playerid][pSurveillance]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/(p)lace(c)amera /(s)ee(c)amera /(d)estroy(c)amera");
                            }
                            case 5:
                            {
                                PlayerInfo[playerid][pTire]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/repair");
                            }
                            case 6:
                            {
                                PlayerInfo[playerid][pLock]=1;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/lock");
                            }
                            case 7:
                            {
                                PlayerInfo[playerid][pFirstaid]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/firstaid");
                            }
                            case 8:
                            {
                                GivePlayerValidWeapon(playerid, 43, 50);
                            }
                            case 9:
                            {
                                PlayerInfo[playerid][pRccam]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/rccam");
                            }
                            case 10:
                            {
                                PlayerInfo[playerid][pReceiver]++;
                                SetPVarInt(playerid, "pReceiverMLeft", 4);
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
                            }
                            case 11:
                            {
                                PlayerInfo[playerid][pGPS]++;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/gps");
                            }
                            case 12:
                            {
                                PlayerInfo[playerid][pSweep]++;
                                PlayerInfo[playerid][pSweepLeft] = 3;
                                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/sweep");
                            }
                            case 13:
                            {
                                GivePlayerValidWeapon(playerid, 46, 99999);
                            }
							case 14:
							{
								StorageInfo[playerid][0][sStorage] = 1;
								SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "/storagehelp");
							}
                        }
                        format(string, sizeof(string), "   You have given %s, a %s.", GetPlayerNameEx(playerid),weaponname);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        SendClientMessageEx(CraftOffer[playerid], COLOR_GRAD1, string);
                        format(string, sizeof(string), "   You have recieved a %s from %s.", weaponname, GetPlayerNameEx(CraftOffer[playerid]));
                        SendClientMessageEx(playerid, COLOR_GRAD1, string);
                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                        format(string, sizeof(string), "* %s created something from Materials, and hands it to %s.", GetPlayerNameEx(CraftOffer[playerid]), GetPlayerNameEx(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        //new ip[32], ipex[32];
                        //GetPlayerIp(playerid, ip, sizeof(ip));
                        //GetPlayerIp(CraftOffer[playerid], ipex, sizeof(ipex));
                        //format(string, sizeof(string), "[CRAFTSMAN DEAL] %s (IP: %s) has bought a %s from %s (IP: %s)", GetPlayerNameEx(playerid), ip, weaponname, GetPlayerNameEx(CraftOffer[playerid]), ipex);
                        //Log("logs/pay.log", string);
                        PlayerInfo[CraftOffer[playerid]][pMats] -= CraftMats[playerid];
                        PlayerInfo[CraftOffer[playerid]][pArmsSkill]++;
                        CraftOffer[playerid] = INVALID_PLAYER_ID;
                        CraftId[playerid] = 0;
                        CraftMats[playerid] = 0;
                        return 1;
                    }
                    else {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be the near the player that is selling you the weapon !");
                        return 1;
                    }
                }
                return 1;
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a Weapon!");
                return 1;
            }
        }
        else if(strcmp(params,"contract",true) == 0) {
            if(HitOffer[playerid] < 999) {
                if(HitToGet[playerid] < 999) {
                    if(IsPlayerConnected(HitToGet[playerid])) {
                        format(string, sizeof(string), "* %s has accepted the contract to kill %s.", GetPlayerNameEx(playerid),GetPlayerNameEx(HitToGet[playerid]));
                        SendClientMessageEx(HitOffer[playerid], COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* You have accepted the contract to kill %s, you will recieve $%d when completed.", GetPlayerNameEx(HitToGet[playerid]), (PlayerInfo[HitToGet[playerid]][pHeadValue] / 4) * 2);
                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "%s has been assigned to the contract on %s, for $%d.", GetPlayerNameEx(playerid), GetPlayerNameEx(HitToGet[playerid]),  (PlayerInfo[HitToGet[playerid]][pHeadValue] / 4) * 2);
                        SendFamilyMessage(8, COLOR_YELLOW, string);
                        GoChase[playerid] = HitToGet[playerid];
                        GetChased[HitToGet[playerid]] = playerid;
                        GotHit[HitToGet[playerid]] = 1;
                        HitToGet[playerid] = INVALID_PLAYER_ID;
                        HitOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                    else {
                        HitToGet[playerid] = INVALID_PLAYER_ID;
                        HitOffer[playerid] = INVALID_PLAYER_ID;
                        return 1;
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you a contract!");
                return 1;
            }
        }
        else if(strcmp(params,"sex",true) == 0) {
            if(SexOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > SexPrice[playerid]) {
                    if (IsPlayerConnected(SexOffer[playerid])) {
                        new Car = GetPlayerVehicleID(playerid);
                        if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car)) {
                            GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            format(string, sizeof(string), "* You had sex with Whore %s, for $%d.", giveplayer, SexPrice[playerid]);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* %s had sex with you. You have earned $%d.", sendername, SexPrice[playerid]);
                            SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, string);

                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(SexOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "[SEX] %s (IP:%s) had sex with %s (IP:%s) for %d.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexPrice[playerid]);
                            //Log("logs/pay.log", string);

                            if(SexPrice[playerid] >= 25000 && (PlayerInfo[SexOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has guarded %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(SexOffer[playerid]), ipex, SexPrice[playerid]);
                                Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 2);
                            }

                            ExtortionTurfsWarsZone(SexOffer[playerid], 4, SexPrice[playerid]);
                            GivePlayerCash(SexOffer[playerid], SexPrice[playerid]);
                            GivePlayerCash(playerid, -SexPrice[playerid]);
							if(DoubleXP) {
								SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "You have gained 2 whore skill points instead of 1. (Double XP Active)");
								PlayerInfo[SexOffer[playerid]][pSexSkill] += 2;
							}
							else
  							if(PlayerInfo[SexOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
							{
								format(string, sizeof(string), "You have gained 2 whore skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[SexOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, string);
   								PlayerInfo[SexOffer[playerid]][pSexSkill] += 2;
							}
							else
							{
  								PlayerInfo[SexOffer[playerid]][pSexSkill] += 1;
							}

                            if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 2, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 3, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 4, you offer better Sex (health) and less chance on STI.");
                            }
                            else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400) {
                                SendClientMessageEx(SexOffer[playerid], COLOR_YELLOW, "* Your Sex Skill is now Level 5, you offer better Sex (health) and less chance on STI.");
                            }

                            if(!GetPVarType(playerid, "STD")) {
                                if(Condom[playerid] < 1) {
                                    new Float:health;
                                    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
                                    if(level >= 0 && level <= 50) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 90) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 10.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD1));
                                        SetPVarInt(playerid, "STD", STD1[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD1[rand]);
                                        if(STD1[rand] == 0) {
                                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + no STI while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex.");
                                        }
                                        else if(STD1[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + a Chlamydia because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD1[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + a Gonorrhea because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD1[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 10 Health + a Syphilis because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 51 && level <= 100) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 80) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 20.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD2));
                                        SetPVarInt(playerid, "STD", STD2[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD2[rand]);
                                        if(STD2[rand] == 0) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + no STD while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex."); }
                                        else if(STD2[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + a Chlamydia because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD2[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + a Gonorrhea because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD2[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 20 Health + a Syphilis because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 101 && level <= 200) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 70) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 30.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD3));
                                        SetPVarInt(playerid, "STD", STD3[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD3[rand]);
                                        if(STD3[rand] == 0) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + no STI while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex."); }
                                        else if(STD3[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Chlamydia because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD3[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Gonorrhea because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD3[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 30 Health + a Syphilis because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 201 && level <= 400) {
                                        GetPlayerHealth(playerid, health);
                                        if(health < 100) {
                                            if(health > 60) {
                                                SetPlayerHealth(playerid, 100);
                                            }
                                            else {
                                                SetPlayerHealth(playerid, health + 40.0);
                                            }
                                        }
                                        new rand = random(sizeof(STD4));
                                        SetPVarInt(playerid, "STD", STD4[rand]);
                                        SetPVarInt(SexOffer[playerid], "STD", STD4[rand]);
                                        if(STD4[rand] == 0) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + no STI while having Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You haven't got a STI while having Sex."); }
                                        else if(STD4[rand] == 1) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + a Chlamydia because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Chlamydia because of the Sex."); }
                                        else if(STD4[rand] == 2) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + a Gonorrhea because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Gonorrhea because of the Sex."); }
                                        else if(STD4[rand] == 3) { SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You got 40 Health + a Syphilis because of the Sex."); SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* You got a Syphilis because of the Sex."); }
                                    }
                                    else if(level >= 401) {
                                        GetPlayerHealth(playerid, health);
                                        if(health > 50) {
                                            SetPlayerHealth(playerid, 100);
                                        }
                                        else {
                                            SetPlayerHealth(playerid, health + 50.0);
                                        }
                                        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Your Sex Skill Level is so high you gave high health and No STD.");
                                        SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* The Whore's Sex Skill Level is so high you got high health and No STD.");
                                    }
                                }
                                else {
                                    SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* The player used a Condom.");
                                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You used a Condom.");
                                    Condom[playerid] --;
                                }
                            }
                            else {
                                SendClientMessageEx(SexOffer[playerid], COLOR_LIGHTBLUE, "* That player was already infected with a STI, can't get another one.");
                                return 1;
                            }
                            SexOffer[playerid] = INVALID_PLAYER_ID;
                            return 1;
                        }
                        else {
                            SendClientMessageEx(playerid, COLOR_GREY, "   You or the Whore are not both in a Car!");
                            return 1;
                        }
                    }                             //Connected or not
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Sex!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have any Sex Offered by a Whore!");
                return 1;
            }
        }
        else if(strcmp(params,"repair",true) == 0) {
            if(RepairOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > RepairPrice[playerid]) {
                    if(IsPlayerInAnyVehicle(playerid)) {
                        if(IsPlayerConnected(RepairOffer[playerid])) {
                            GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            RepairCar[playerid] = GetPlayerVehicleID(playerid);
                            RepairVehicle(RepairCar[playerid]);
							Vehicle_Armor(RepairCar[playerid]);
							Vehicle_DArmor(RepairCar[playerid]);
                            PlayerInfo[RepairOffer[playerid]][pTire]--;

                            GivePlayerCash(RepairOffer[playerid], RepairPrice[playerid]);
                            GivePlayerCash(playerid, -RepairPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RepairOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "%s(IP:%s) has repaired the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
                            //Log("logs/pay.log", string);
                            format(string, sizeof(string), "* %s has repaired %s's vehicle.", giveplayer, GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(string, sizeof(string), "* You repaired your car for $%d by Car Mechanic %s.",RepairPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

                            if(RepairPrice[playerid] >= 25000 && (PlayerInfo[RepairOffer[playerid]][pLevel] <= 3 || PlayerInfo[RepairOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has repaired %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RepairOffer[playerid]), ipex, RepairPrice[playerid]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 2);
                            }

                            format(string, sizeof(string), "* You fixed %s's car, the $%d has been added to your money on hand!",sendername,RepairPrice[playerid]);
                            SendClientMessageEx(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
							if(DoubleXP) {
								SendClientMessageEx(RepairOffer[playerid], COLOR_YELLOW, "You have gained 2 mechanic skill points instead of 1. (Double XP Active)");
								PlayerInfo[RepairOffer[playerid]][pMechSkill] += 2;
							}
							else
   							if(PlayerInfo[RepairOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
							{
								format(string, sizeof(string), "You have gained 2 mechanic skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[RepairOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(RepairOffer[playerid], COLOR_YELLOW, string);
   								PlayerInfo[RepairOffer[playerid]][pMechSkill] += 2;
							}
							else
							{
								PlayerInfo[RepairOffer[playerid]][pMechSkill] += 1;
							}

                            RepairOffer[playerid] = INVALID_PLAYER_ID;
                            RepairPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the Repair!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you to Repair your Car!");
                return 1;
            }
        }
        else if(strcmp(params,"refill",true) == 0) {
            if(RefillOffer[playerid] < 999) {
                if(GetPlayerCash(playerid) > RefillPrice[playerid]) {
                    if(IsPlayerInAnyVehicle(playerid)) {
                        if(IsPlayerConnected(RefillOffer[playerid])) {
                            new Float:fueltogive;
                            new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
                            if(level >= 0 && level < 50) { fueltogive = 10.0; }
                            else if(level >= 50 && level < 100) { fueltogive = 20.0; }
                            else if(level >= 100 && level < 200) { fueltogive = 30.0; }
                            else if(level >= 200 && level < 400) { fueltogive = 40.0; }
                            else if(level >= 400) { fueltogive = 50.0; }
                            GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
                            GetPlayerName(playerid, sendername, sizeof(sendername));
                            new vehicleid = GetPlayerVehicleID(playerid);
                            VehicleFuel[vehicleid] = floatadd(VehicleFuel[vehicleid], fueltogive);
                            if(VehicleFuel[vehicleid] > 100.0) VehicleFuel[vehicleid] = 100.0;
                            for(new vehicleslot = 0; vehicleslot < MAX_PLAYERVEHICLES; vehicleslot++)
							{
								if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][vehicleslot][pvId]))
								{
									if(vehicleslot != -1) {
										format(string, sizeof(string), "UPDATE `accounts` SET `pv%dFuel` = %f WHERE `id` = '%d'", vehicleslot, VehicleFuel[PlayerVehicleInfo[playerid][vehicleslot][pvId]], GetPlayerSQLId(playerid));
										mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
									}
								}
							}
                            GivePlayerCash(RefillOffer[playerid], RefillPrice[playerid]);
                            GivePlayerCash(playerid, -RefillPrice[playerid]);
                            new ip[32], ipex[32];
                            GetPlayerIp(playerid, ip, sizeof(ip));
                            GetPlayerIp(RefillOffer[playerid], ipex, sizeof(ipex));
                            //format(string, sizeof(string), "%s(IP:%s) has refilled the vehicle from %s(IP:%s) for $%d", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
                            //Log("logs/pay.log", string);
                            format(string, sizeof(string), "* %s has refilled %s's vehicle.", giveplayer, GetPlayerNameEx(playerid));
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                            format(string, sizeof(string), "* You have added %.2f fuel to your car for $%d by Car Mechanic %s.",fueltogive,RefillPrice[playerid],giveplayer);
                            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                            format(string, sizeof(string), "* You added %.2f fuel to %s's car, the $%d has been added to your money on hand!",fueltogive,sendername,RefillPrice[playerid]);
                            SendClientMessageEx(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
							if(DoubleXP) {
								SendClientMessageEx(RefillOffer[playerid], COLOR_YELLOW, "You have gained 2 mechanic skill points instead of 1. (Double XP Active)");
								PlayerInfo[RefillOffer[playerid]][pMechSkill] += 2;
							}
							else
 							if(PlayerInfo[RefillOffer[playerid]][pDoubleEXP] > 0 && !DoubleXP)
							{
								format(string, sizeof(string), "You have gained 2 mechanic skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[RefillOffer[playerid]][pDoubleEXP]);
								SendClientMessageEx(RefillOffer[playerid], COLOR_YELLOW, string);
   								PlayerInfo[RefillOffer[playerid]][pMechSkill] += 2;
							}
							else
							{
								PlayerInfo[RefillOffer[playerid]][pMechSkill] += 1;
							}

                            if(RefillPrice[playerid] >= 30000 && (PlayerInfo[playerid][pLevel] <= 3 || PlayerInfo[RefillOffer[playerid]][pLevel] <= 3)) {
                                format(string, sizeof(string), "%s (IP:%s) has refueled %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(RefillOffer[playerid]), ipex, RefillPrice[playerid]);
                                //Log("logs/pay.log", string);
                                ABroadCast(COLOR_YELLOW, string, 2);
                            }

                            RefillOffer[playerid] = INVALID_PLAYER_ID;
                            RefillPrice[playerid] = 0;
                            return 1;
                        }
                        return 1;
                    }
                    return 1;
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GREY, "   You can't afford the refill!");
                    return 1;
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "   No-one offered you to refill your Car!");
                return 1;
            }
        }
        else { return 1; }
    }                                             //not connected
    return 1;
}

CMD:join(playerid, params[])
{
    if(PlayerInfo[playerid][pDonateRank] > 0) {
        if(PlayerInfo[playerid][pJob] == 0 || PlayerInfo[playerid][pJob2] == 0) {
            if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,251.99, 117.36, 1003.22)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
                GettingJob[playerid] = 1;
                return 1;
            }
            if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,301.042633, 178.700408, 1007.171875)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
                GettingJob[playerid] = 1;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Lawyer, type /accept job.");
                GettingJob[playerid] = 2;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Whore, type /accept job.");
                GettingJob[playerid] = 3;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drugs Dealer, type /accept job.");
                GettingJob[playerid] = 4;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2089.344970, 87.800231, 35.320312)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drugs Dealer, type /accept job.");
                GettingJob[playerid] = 4;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1224.13, 267.98, 19.55)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                GettingJob[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2269.256103, -158.054321, 35.320312)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                GettingJob[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,161.92, -25.70, 1.57)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Mechanic, type /accept job.");
                GettingJob[playerid] = 7;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2032.601928, 143.866592, 28.835937)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Mechanic, type /accept job.");
                GettingJob[playerid] = 7;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                GettingJob[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                GettingJob[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Arms Dealer, type /accept job.");
                GettingJob[playerid] = 9;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2623.333984, 209.235931, 4.684767)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Arms Dealer, type /accept job.");
                GettingJob[playerid] = 9;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
                GettingJob[playerid] = 12;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
                GettingJob[playerid] = 12;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-77.7288,-1136.3896,1.0781)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
                GettingJob[playerid] = 16;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Smuggler, type /accept job.");
                GettingJob[playerid] = 14;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1741.5199,-1863.4615,13.5750)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
                GettingJob[playerid] = 17;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1981.144775, 133.063293, 27.687500)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
                GettingJob[playerid] = 17;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Craftsman, type /accept job.");
                GettingJob[playerid] = 18;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bartender, type /accept job.");
                GettingJob[playerid] = 19;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2107.5869,-1785.0497,13.3870)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Pizza Boy, type /accept job.");
                GettingJob[playerid] = 21;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2453.7036,-2117.8679,13.5469)) {
				if(PlayerInfo[playerid][pLevel] >= 2)
				{
  					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
    				GettingJob[playerid] = 20;
      				return 1;
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You must be atleast level 2 to become a Trucker.");
			}
            if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,251.99, 117.36, 1003.22)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 1;
                return 1;
            }
            if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,301.042633, 178.700408, 1007.171875)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 1;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Lawyer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 2;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Whore, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 3;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drugs Dealer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 4;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2089.344970, 87.800231, 35.320312)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drugs Dealer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 4;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1224.13, 267.98, 19.55)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2269.256103, -158.054321, 35.320312)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,161.92, -25.70, 1.57)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Mechanic, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 7;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, -2032.601928, 143.866592, 28.835937)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Mechanic, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 7;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2226.1716,-1718.1792,13.5165)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 1099.73,-1504.67,15.800)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 8;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 1366.4325,-1275.2096,13.5469)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Arms Dealer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 9;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, -2623.333984, 209.235931, 4.684767)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Arms Dealer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 9;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 766.0804,14.5133,1000.7004)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 12;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 758.98, -60.32, 1000.78)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 12;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, -77.7288,-1136.3896,1.0781)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 16;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2354.2808,-1169.2959,28.0066)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Smuggler, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 14;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 1741.5199,-1863.4615,13.5750)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 17;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, -1981.144775, 133.063293, 27.687500)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 17;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2195.8335,-1973.0638,13.5589)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Craftsman, type /accept job.");
                SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You are getting a secondary job. Only VIPs can do this.");
                GettingJob2[playerid] = 18;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 502.6696,-11.6603,1000.6797)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bartender, type /accept job.");
                GettingJob2[playerid] = 19;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2107.5869,-1785.0497,13.3870)) {
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Pizza Boy, type /accept job.");
                GettingJob2[playerid] = 21;
                return 1;
            }
            else if (PlayerInfo[playerid][pJob2] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 2453.7036,-2117.8679,13.5469)) {
				if(PlayerInfo[playerid][pLevel] >= 2)
				{
  					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
    				GettingJob2[playerid] = 20;
      				return 1;
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You must be atleast level 2 to become a Trucker.");
            }
            else {
                SendClientMessageEx(playerid, COLOR_GREY, "You are not even near a place to get a Job!");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You already have 2 Jobs, use /quitjob first!");
        }
    }
    else {
        if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, 251.99, 117.36, 1003.22)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
            GettingJob[playerid] = 1;
            return 1;
        }
        if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,301.042633, 178.700408, 1007.171875)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Detective, type /accept job.");
            GettingJob[playerid] = 1;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1380.8955,-1088.6808,27.3844)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Lawyer, type /accept job.");
            GettingJob[playerid] = 2;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1215.1304,-11.8431,1000.9219)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Whore, type /accept job.");
            GettingJob[playerid] = 3;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2166.3772,-1675.3829,15.0859)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drugs Dealer, type /accept job.");
            GettingJob[playerid] = 4;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2089.344970, 87.800231, 35.320312)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drugs Dealer, type /accept job.");
            GettingJob[playerid] = 4;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1224.13, 267.98, 19.55)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
            GettingJob[playerid] = 8;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2269.256103, -158.054321, 35.320312)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
            GettingJob[playerid] = 8;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,161.92, -25.70, 1.57)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Mechanic, type /accept job.");
            GettingJob[playerid] = 7;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2032.601928, 143.866592, 28.835937)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Mechanic, type /accept job.");
            GettingJob[playerid] = 7;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2226.1716,-1718.1792,13.5165)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
            GettingJob[playerid] = 8;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1099.73,-1504.67,15.800)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bodyguard, type /accept job.");
            GettingJob[playerid] = 8;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1366.4325,-1275.2096,13.5469)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Arms Dealer, type /accept job.");
            GettingJob[playerid] = 9;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2623.333984, 209.235931, 4.684767)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Arms Dealer, type /accept job.");
            GettingJob[playerid] = 9;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,531.7930,-1292.4044,17.2422)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Car Dealer, type /accept job.");
            GettingJob[playerid] = 10;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,766.0804,14.5133,1000.7004)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
            GettingJob[playerid] = 12;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,758.98, -60.32, 1000.78)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Boxer, type /accept job.");
            GettingJob[playerid] = 12;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-2040.9436,456.2395,35.1719)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Paper Boy, type /accept job.");
            GettingJob[playerid] = 15;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-77.7288,-1136.3896,1.0781)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
            GettingJob[playerid] = 16;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2354.2808,-1169.2959,28.0066)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Drug Smuggler, type /accept job.");
            GettingJob[playerid] = 14;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,1741.5199,-1863.4615,13.5750)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
            GettingJob[playerid] = 17;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,-1981.144775, 133.063293, 27.687500)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Taxi Driver, type /accept job.");
            GettingJob[playerid] = 17;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2195.8335,-1973.0638,13.5589)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Craftsman, type /accept job.");
            GettingJob[playerid] = 18;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,502.6696,-11.6603,1000.6797)) {
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Bartender, type /accept job.");
            GettingJob[playerid] = 19;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2107.5869,-1785.0497,13.3870)) {
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Pizza Boy, type /accept job.");
            GettingJob[playerid] = 21;
            return 1;
        }
        else if (PlayerInfo[playerid][pJob] == 0 && GetPlayerState(playerid) == 1 && IsPlayerInRangeOfPoint(playerid,3.0,2453.7036,-2117.8679,13.5469)) {
			if(PlayerInfo[playerid][pLevel] >= 2)
			{
  				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* If you are sure to become a Trucker, type /accept job.");
    			GettingJob[playerid] = 20;
      			return 1;
			}
			else return SendClientMessageEx(playerid, COLOR_GREY, "You must be atleast level 2 to become a Trucker.");
        }
        else if (PlayerInfo[playerid][pJob] > 0) {
            SendClientMessageEx(playerid, COLOR_GREY, "You already have a Job, use /quitjob first!");
            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: Only VIPs can get two jobs!");
        }
    }
    return 1;
}

CMD:sellgun(playerid, params[])
{
    new string[128];
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You cannot do this while being in a arena!");
        return 1;
    }
   	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
    if (PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Arms Dealer!");
        return 1;
    }
    if(WatchingTV[playerid] != 0) {
        SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
        return 1;
    }
    if (PlayerInfo[playerid][pScrewdriver] == 0) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You need a screwdriver from a craftsman to make a weapon!");
        return 1;
    }
    if (PlayerInfo[playerid][pJailTime] > 0) {
        SendClientMessageEx(playerid,COLOR_GREY,"   You can not make guns while in jail or prison!");
        return 1;
    }
    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");

    if (GetPVarInt(playerid, "ArmsTimer") > 0) {
        format(string, sizeof(string), "   You must wait %d seconds before selling another weapon.", GetPVarInt(playerid, "ArmsTimer"));
        SendClientMessageEx(playerid,COLOR_GREY,string);
        return 1;
    }
    if(PlayerInfo[playerid][pHospital] == 1 || PlayerInfo[playerid][pHospital] == 2 || PlayerInfo[playerid][pHospital] == 3 || PlayerInfo[playerid][pHospital] == 4 || PlayerInfo[playerid][pHospital] == 5) {
        SendClientMessageEx(playerid, COLOR_GREY, "You can't spawn a weapon whilst in Hospital.");
        return 1;
    }

    new giveplayerid,x_weapon[20],weapon,price,storageid;

    if(sscanf(params, "us[20]", giveplayerid, x_weapon)) {
        SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessageEx(playerid, COLOR_YELLOW, "<< Available weapons >>");
        new level = PlayerInfo[playerid][pArmsSkill];
        if(level >= 0 && level < 50) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
        }
        else if(level >= 50 && level < 100) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
        }
        else if(level >= 100 && level < 200) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "deagle(2000)	 shovel(25)");
        }
        else if(level >= 200 && level < 400) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "deagle(2000)	 shovel(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "ak47(4500)	   poolcue(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "m4(6000)		 golfclub(25)");
        }
        else if(level >= 400) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "sdpistol(100)	flowers(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "9mm(150)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "shotgun(200)	 knuckles(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "mp5(400)		 baseballbat(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "rifle(1000)	  cane(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "deagle(2000)	 shovel(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "ak47(4500)	   poolcue(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "m4(6000)		 golfclub(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "sniper(10000)	 katana(25)");
            SendClientMessageEx(playerid, COLOR_GRAD1, "spas12(12500)	 dildo(25)");
        }
        if(PlayerInfo[playerid][pDonateRank] >= 3)
        {
       		SendClientMessageEx(playerid, COLOR_YELLOW, "Gold+ VIP Feature: uzi(1250)	tec9(1250)");
        }
        SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
        SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellgun [player] [weaponname]");
        return 1;
    }

	if(!IsPlayerConnected(giveplayerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
    if(strcmp(x_weapon,"dildo",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 10; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"katana",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 8; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"golfclub",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 2; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"poolcue",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 7; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shovel",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 6; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"cane",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 15; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"baseballbat",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 5; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"knuckles",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 1; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sdpistol",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 99) {
            weapon = 23; price = 100;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"flowers",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 24) {
            weapon = 14; price = 25;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"deagle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 100) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 1999) {
            weapon = 24; price = 2000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"mp5",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 399) {
            weapon = 29; price = 400;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"uzi",true) == 0) {
        if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Gold+ VIP!");
        if(PlayerInfo[playerid][pMats] > 1249) {
            weapon = 28; price = 1250;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"tec9",true) == 0) {
        if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Gold+ VIP!");
        if(PlayerInfo[playerid][pMats] > 1249) {
            weapon = 32; price = 1250;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"shotgun",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 199) {
            weapon = 25; price = 200;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"9mm",true) == 0) {
        if(PlayerInfo[playerid][pMats] > 149) {
            weapon = 22; price = 150;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"spas12",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 12499) {
            weapon = 27; price = 12500;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"sniper",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 400) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 9999) {
            weapon = 34; price = 10000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"ak47",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 4499) {
            weapon = 30; price = 4500;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"m4",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 200) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 5999) {
            weapon = 31; price = 6000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else if(strcmp(x_weapon,"rifle",true) == 0) {
        if(PlayerInfo[playerid][pArmsSkill] < 50) return SendClientMessageEx(playerid, COLOR_GREY, " You are not the required level to create that!");
        if(PlayerInfo[playerid][pMats] > 999) {
            weapon = 33; price = 1000;
        }
        else {
            SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that Weapon!");
            return 1;
        }
    }

    else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid Weapon name!"); return 1; }
    if (ProxDetectorS(5.0, playerid, giveplayerid)) {
        if(PlayerInfo[giveplayerid][pConnectHours] < 2 || PlayerInfo[giveplayerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "That player is currently restricted from possessing weapons!");

        if(giveplayerid == playerid) {
            format(string, sizeof(string), "   You have given yourself a %s.", x_weapon);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            SendClientMessageEx(playerid, COLOR_GRAD1, string);
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
            switch( PlayerInfo[playerid][pSex] ) {
                case 1: format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to himself.", GetPlayerNameEx(playerid));
                case 2: format(string, sizeof(string), "* %s created a Gun from Materials, and hands it to herself.", GetPlayerNameEx(playerid));
            }
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            GivePlayerValidWeapon(playerid,weapon,50000);
            PlayerInfo[playerid][pMats] -= price;
            if(weapon > 15)
			{
				if(DoubleXP) {
					SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 arms skill points instead of 1. (Double XP Active)");
					PlayerInfo[playerid][pArmsSkill] += 2;
				}
				else
				if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3 && !DoubleXP)
 				{
  					PlayerInfo[playerid][pArmsSkill] += 2;
 				}
  				else if(PlayerInfo[playerid][pDoubleEXP] > 0 && PlayerInfo[playerid][pDonateRank] < 2 && !DoubleXP)
				{
					format(string, sizeof(string), "You have gained 2 arms skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					PlayerInfo[playerid][pArmsSkill] += 2;
				}
 				else
  				{
  					PlayerInfo[playerid][pArmsSkill]++;
   				}
            }
            if(PlayerInfo[playerid][pAdmin] < 3) {
                SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
            }
            if(PlayerInfo[playerid][pArmsSkill] == 50)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 2, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 100)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 3, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 200)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 4, more weapons are available to sell."); }
            else if(PlayerInfo[playerid][pArmsSkill] == 400)
            { SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Arms Dealer Skill is now Level 5, more weapons are available to sell."); }
            return 1;
        }

        format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(giveplayerid), x_weapon);
        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
        format(string, sizeof(string), "* Arms Dealer %s wants to sell you a %s, (type /accept weapon) to buy.", GetPlayerNameEx(playerid), x_weapon);
        SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
        GunOffer[giveplayerid] = playerid;
		GunStorageID[giveplayerid] = storageid;
        GunId[giveplayerid] = weapon;
        GunMats[giveplayerid] = price;
        if(PlayerInfo[playerid][pAdmin] < 3) {
            SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
        return 1;
    }
	return 1;
}

CMD:window(playerid, params[])
{
	new string[128];
    if(InsidePlane[playerid] != INVALID_VEHICLE_ID)
	{
        if(GetPlayerInterior(playerid) != 0)
		{
            new
                Float: fSpecPos[6];

            GetPlayerPos(playerid, fSpecPos[0], fSpecPos[1], fSpecPos[2]);
            GetPlayerFacingAngle(playerid, fSpecPos[3]);
            GetPlayerHealth(playerid, fSpecPos[4]);
            GetPlayerArmour(playerid, fSpecPos[5]);

            SetPVarFloat(playerid, "air_Xpos", fSpecPos[0]);
            SetPVarFloat(playerid, "air_Ypos", fSpecPos[1]);
            SetPVarFloat(playerid, "air_Zpos", fSpecPos[2]);
            SetPVarFloat(playerid, "air_Rpos", fSpecPos[3]);
            SetPVarFloat(playerid, "air_HP", fSpecPos[4]);
            SetPVarFloat(playerid, "air_Arm", fSpecPos[5]);

            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            TogglePlayerSpectating(playerid, 1);
            PlayerSpectateVehicle(playerid, InsidePlane[playerid]);

            format(string, sizeof(string), "* %s glances out the window.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else TogglePlayerSpectating(playerid, 0);
    }
    return 1;
}

CMD:lockdoor(playerid, params[])
{
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] || IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
        	if(DDoorsInfo[i][dPass] < 1)
                return SendClientMessageEx(playerid, COLOR_GREY, "This door isn't allowed to be locked");
         	if(strcmp(DDoorsInfo[i][dPass], "None", true) == 0)
                return SendClientMessageEx(playerid, COLOR_GREY, "This door isn't allowed to be locked");

			ShowPlayerDialog(playerid, DOORLOCK, DIALOG_STYLE_INPUT, "Door Security","Enter the password for this door","Login","Cancel");
			SetPVarInt(playerid, "Door", i);
		}
	}
	return 1;
}

CMD:enter(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
        return 1;
    }
	if(GetPVarType(playerid, "StreamPrep")) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now. Wait for streaming to finish.");
	}
    if( PlayerCuffed[playerid] >= 1 ) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }
	new cCar = GetClosestCar(playerid);
    for(new i = 0; i < sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW]) {
            if(DDoorsInfo[i][ddVIP] > 0 && PlayerInfo[playerid][pDonateRank] < DDoorsInfo[i][ddVIP]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a high enough VIP level.");
                return 1;
            }

            if(DDoorsInfo[i][ddFamily] > 0) {
                if(PlayerInfo[playerid][pFMember] != DDoorsInfo[i][ddFamily]-1) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is family restricted.");
                    return 1;
                }
            }

            if(DDoorsInfo[i][ddFaction] > 0) {
				if(DDoorsInfo[i][ddFaction] >= 32) {
					if(!IsACop(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is restricted to law enforcement officers.");
				}
				else if(DDoorsInfo[i][ddFaction] < 32 && PlayerInfo[playerid][pMember] != DDoorsInfo[i][ddFaction]) {
					SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door is faction restricted.");
					return 1;
				}
            }

            if(DDoorsInfo[i][ddAdmin] > 0 && PlayerInfo[playerid][pAdmin] < DDoorsInfo[i][ddAdmin]) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, you are not a high enough admin level.");
                return 1;
            }

            if(DDoorsInfo[i][ddWanted] > 0 && PlayerInfo[playerid][pWantedLevel] != 0) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "You can not enter, this door restricts those with wanted levels.");
                return 1;
            }

			if(DDoorsInfo[i][dLocked] == 1) {
			    return SendClientMessageEx(playerid, COLOR_GRAD2, "This door is currently locked.");
			}

            SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
            }
            else {
                SetPlayerPosEx(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
                SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			if(DDoorsInfo[i][ddCustomInterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ], FREEZE_TIME);
            return 1;
        }
    }
    for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    new string[128];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		{
		    if(!BizInfo[idx][bStatus] && PlayerInfo[playerid][pBiz] != idx && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "This business is closed.");
		    if(BizInfo[idx][bType] == 1) // 24/7 Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, -25.884498,-185.868988,1003.546875);
		        SetPlayerFacingAngle(playerid, 357.5915);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 17);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        format(string, sizeof(string), "** Welcome to %s's 24/7 Market (( /buy )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 2) // Clothes Shop Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the clothes shop.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
		        SetPlayerFacingAngle(playerid, 356.3849);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        format(string, sizeof(string), "** Welcome to %s's Clothes Shop (( /buyclothes & /buytoys )) **", BizInfo[idx][bOwner]);
		        SendClientMessage(playerid, COLOR_ORANGE, string);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 3) // Ammunation Business
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the ammunation.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, 314.820983,-141.431991,999.601562);
		        SetPlayerFacingAngle(playerid, 358.9898);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 7);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 4) // Well stacked pizza
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the well stacked pizza.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, 373.825653,-117.270904,1001.499511);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 5);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 5) // Gas Station
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the gas station.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, -30.946699,-89.609596,1003.546875);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 18);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        return 1;
		    }
		    else if(BizInfo[idx][bType] == 6) // Burger Shot
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the burger shot.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, 375.962463,-65.816848,1001.507812);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 10);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        return 1;
		    }
		     else if(BizInfo[idx][bType] == 7) // Sex Shop
		    {
		        format(string, sizeof(string), "* %s pushes the door and enters the shop.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		        SetPlayerPos(playerid, -103.559165,-24.225606,1000.718750);
		        SetPlayerFacingAngle(playerid, 0.4216);
		        SetCameraBehindPlayer(playerid);
		        SetPlayerInterior(playerid, 3);
		        SetPlayerVirtualWorld(playerid, idx+6000);
		        return 1;
		    }
		}
	}
    for(new i = 0; i < sizeof(FamilyInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,FamilyInfo[i][FamilyEntrance][0], FamilyInfo[i][FamilyEntrance][1], FamilyInfo[i][FamilyEntrance][2])) {
            SetPlayerInterior(playerid,FamilyInfo[i][FamilyInterior]);
            PlayerInfo[playerid][pInt] = FamilyInfo[i][FamilyInterior];
            PlayerInfo[playerid][pVW] = FamilyInfo[i][FamilyVirtualWorld];
            SetPlayerVirtualWorld(playerid, FamilyInfo[i][FamilyVirtualWorld]);
            SetPlayerPosEx(playerid,FamilyInfo[i][FamilyExit][0],FamilyInfo[i][FamilyExit][1],FamilyInfo[i][FamilyExit][2]);
            SetPlayerFacingAngle(playerid,FamilyInfo[i][FamilyExit][3]);
			if(FamilyInfo[i][FamilyCustomMap]) Player_StreamPrep(playerid, FamilyInfo[i][FamilyExit][0],FamilyInfo[i][FamilyExit][1],FamilyInfo[i][FamilyExit][2], FREEZE_TIME);
            return 1;
        }
    }
    for(new i = 0; i < sizeof(HouseInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ])) {
			if (HouseInfo[i][hInteriorX] && HouseInfo[i][hInteriorY] && HouseInfo[i][hInteriorZ] == 0) {
			new string[128];
			format(string, sizeof(string), "You can't enter a house that has no Interior!");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			GameTextForPlayer(playerid, "~w~Error: ~r~No Interior Set~w~!", 5000, 1);
			} else
            if(PlayerInfo[playerid][pPhousekey] == i || PlayerInfo[playerid][pPhousekey2] == i || HouseInfo[i][hLock] == 0 || PlayerInfo[playerid][pRenting] == i) {
                SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
                PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
                PlayerInfo[playerid][pVW] = i+6000;
                SetPlayerVirtualWorld(playerid, i+6000);
                SetPlayerPosEx(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
                SetPlayerFacingAngle(playerid,HouseInfo[i][hInteriorA]);
                SetCameraBehindPlayer(playerid);
                GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
				if(HouseInfo[i][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ], FREEZE_TIME);
            }
            else GameTextForPlayer(playerid, "~r~Locked", 5000, 1);
            return 1;
        }
    }
    new Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(Carrier[0], X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-0.377671),(Y-10.917018),11.6986)) {
		//Battle Carrier
        SetPlayerInterior(playerid, 1);
        SetPlayerVirtualWorld(playerid, 7);
        PlayerInfo[playerid][pVW] = 7;
        Streamer_UpdateEx(playerid, 1170.0106201172,-1355.0770263672,2423.0461425781);
        //Old Hospital: 2087.4626,2806.0630,-16.1744
        SetPlayerPosEx(playerid,1170.0106201172,-1355.0770263672,2423.0461425781);
        PlayerInfo[playerid][pInt] = 1;
        Player_StreamPrep(playerid, 1170.0106201172,-1355.0770263672,2423.0461425781, FREEZE_TIME);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-6.422671),(Y-10.898918),11.6986)) {
                                                  //Battle Carrier Armoury
        SetPlayerInterior(playerid, 6);
        SetPlayerVirtualWorld(playerid, 1337);
        SetPlayerPosEx(playerid, 316.4553,-170.2923,999.5938);
        PlayerInfo[playerid][pVW] = 1337;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 306.4042,-159.0768,999.5938)) {
                                                  //Battle Carrier Armoury
        SetPlayerPosEx(playerid, 305.6966,-159.1586,999.5938);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-5.560629),(Y-3.860818),11.6986)) {
                                                  //Engine Room Entrance
        SetPlayerInterior(playerid, 17);
        SetPlayerVirtualWorld(playerid, 1337);
        SetPlayerPosEx(playerid, -959.6347,1956.4598,9.0000);
        PlayerInfo[playerid][pVW] = 1337;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, (X-15.382171),(Y-2.272918),11.6986)) {
                                                  //Briefing Room Entrance
        SetPlayerInterior(playerid, 3);
        SetPlayerVirtualWorld(playerid, 1337);
        SetPlayerPosEx(playerid, 1494.3763,1303.5875,1093.2891);
        PlayerInfo[playerid][pVW] = 1337;
    }
//NG/LEO Only Entrance

                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -418.95, -1759.26, 6.22 )) {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
            SetPlayerVirtualWorld(playerid, 666420);
            PlayerInfo[playerid][pVW] = 666420;
            SetPlayerInterior(playerid, 6);
            PlayerInfo[playerid][pInt] = 6;
            SetPlayerPosEx(playerid, -68.8239,1351.4331,1080.6257);
            SetPlayerFacingAngle(playerid, 160);
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, -68.8239,1351.4331,1080.6257, FREEZE_TIME);
        }
    }
                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2323.3135, 7.6760, 26.5640)) {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
            SetPlayerVirtualWorld(playerid, 666421);
            PlayerInfo[playerid][pVW] = 666421;
            SetPlayerInterior(playerid, 6);
            PlayerInfo[playerid][pInt] = 6;
            SetPlayerPosEx(playerid, -68.8239,1351.4331,1080.6257);
            SetPlayerFacingAngle(playerid, 160);
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, -68.8239,1351.4331,1080.6257, FREEZE_TIME);
        }
    }
                                                  //Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,1547.1947,29.8561,24.1406)) {
        GameTextForPlayer(playerid, "~w~GARAGE", 5000, 1);
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), -1790.378295,1436.949829,7.187500);
        }
        else {
            SetPlayerPosEx(playerid,-1790.378295,1436.949829,7.187500);
        }
    }
                                                  // LSPD Panel
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1575.9766845703, -1636.4899902344, 13.555115699768)) {
        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) {
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerPosEx(playerid,1579.0098876953, -1636.2879638672, 13.554491043091);
            SetPlayerFacingAngle(playerid, 190.0520);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = 0;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (LSPD restricted access)!");
        }
    }
     // DoC Exterior Entrance
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2033.7502, -154.8784, 35.3203)) {
        if(BackEntrance) {
            SetPlayerInterior(playerid, 10);
            PlayerInfo[playerid][pInt] = 10;
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerPosEx(playerid,-2045.0183, -211.6728, 991.5364);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pVW] = 0;
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, -2045.0183, -211.6728, 991.5364, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (locked)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2088.4797, -199.6259, 978.8315)) {
        if(PlayerInfo[playerid][pMember] == 3) {
            SetPlayerPosEx(playerid,-2091.0200,-199.8031,978.8315);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (SFPD restricted)!");
        }
    }
                                                  //SASD - Elevator
    else if (IsPlayerInRangeOfPoint(playerid,3.0,2530.3774,-1689.9998,562.7922)) {
        if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7) {
            SetPlayerFacingAngle(playerid, 359);
            GameTextForPlayer(playerid, "~w~GARAGE", 5000, 1);
            SetPlayerPosEx(playerid,612.6414,-629.8659,-4.0447);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
			Player_StreamPrep(playerid, 612.6414,-629.8659,-4.0447, FREEZE_TIME);
        }
        else {
            return SendClientMessageEx(playerid, COLOR_GRAD2, "Access Denied.");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 971.75524902344, 1.949291229248, 1012.8675537109)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPosEx(playerid, 971.70568847656, 0.73652172088623, 1013.0336914063);
            SetCameraBehindPlayer(playerid);
			Player_StreamPrep(playerid, 971.70568847656, 0.73652172088623, 1013.0336914063, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -230.57353210449, 1409.3792724609, -5.2974662780762)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPosEx(playerid, -265.52786254883, 1409.2824707031, -2.2975430488586);
            SetPlayerVirtualWorld(playerid, 6141572412);
            PlayerInfo[playerid][pVW] = 6141572412;
            SetCameraBehindPlayer(playerid);
			Player_StreamPrep(playerid, -265.52786254883, 1409.2824707031, -2.2975430488586, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 255.84442138672, -158.21658325195, 1.677818775177)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            Streamer_UpdateEx(playerid, -270.8628,1417.2441,-2.2902);
            SetPlayerPosEx(playerid, -270.8628,1417.2441,-2.2902);
            SetPlayerVirtualWorld(playerid, 6141572412);
            PlayerInfo[playerid][pVW] = 6141572412;
            SetCameraBehindPlayer(playerid);
			Player_StreamPrep(playerid, -270.8628,1417.2441,-2.2902, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
	                                //SASD Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,624.5196,-596.8649,16.9396)) {
        if(IsACop(playerid)) {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), 643.8234,-608.0292,-4.2479);
            }
            else {
                SetPlayerPosEx(playerid,643.8234,-608.0292,-4.2479);
            }
        }
    }
                                                  //Gym Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,2273.6787,-1728.9022,13.5039)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  2240.7332,-1695.9648,-0.0826 + 1100);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  180);
        }
        else {
            Streamer_UpdateEx(playerid, 2240.7332,-1695.9648,-0.0826 + 1100);
            SetPlayerPosEx(playerid,2240.7332,-1695.9648,-0.0826 + 1100);
            SetPlayerFacingAngle(playerid, 180);
        }
    }
                                                  // LAOfficeBuilding Roof Entrance
    else if (IsPlayerInRangeOfPoint(playerid,3.0,1771.0253,-1302.8596,125.7209)) {
        SetPlayerPosEx(playerid,1779.0928,-1302.7775,131.7344);
        SetPlayerFacingAngle(playerid, 280);
    }
                                                  // Gold/Plat VIP
    else if (IsPlayerInRangeOfPoint(playerid,3.0,902.2482,1419.8180,-80.9308)) {
        if(PlayerInfo[playerid][pDonateRank] < 3) {
            SendClientMessageEx(playerid, COLOR_WHITE, "* You are not Gold or Platinum VIP!");
        }
        else {
            SetPlayerPosEx(playerid,911.6200,1426.2729,-81.1762);
            SetPlayerFacingAngle(playerid, 270);
        }
    }

	else if (cCar != INVALID_VEHICLE_ID && (GetVehicleModel(cCar) == 519 || GetVehicleModel(cCar) == 553) && IsPlayerInRangeOfVehicle(playerid, cCar, 5.0) && GetPlayerVehicleID(playerid) != cCar)
	{
	    if(VehicleStatus{cCar} == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to enter this plane as it's been damaged!");
	    new string[47 + MAX_PLAYER_NAME];
   		format(string, sizeof(string), "* %s enters the airplane as a passenger.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		switch(GetVehicleModel(cCar)) {
			case 519: { // Shamal
				SetPlayerPosEx(playerid, 2.509036, 23.118730, 1199.593750);
				SetPlayerFacingAngle(playerid, 82.14);
				PlayerInfo[playerid][pInt] = 1;
				SetPlayerInterior(playerid, 1);
			}
			case 553: { // Nevada
				SetPlayerPosEx(playerid, 315.9396, 973.2628, 1961.5985);
				SetPlayerFacingAngle(playerid, 2.7);
				PlayerInfo[playerid][pInt] = 9;
				SetPlayerInterior(playerid, 9);
			}
		}


        SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pVW] = cCar;
		SetPlayerVirtualWorld(playerid, cCar);
		InsidePlane[playerid] = cCar;
		SendClientMessageEx(playerid, COLOR_WHITE, "Type /exit near the door to exit the vehicle, or /window to look outside.");
	}
    return 1;
}

CMD:exit(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
        return 1;
    }
	if(GetPVarType(playerid, "StreamPrep")) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now. Wait for streaming to finish.");
	}
    if( PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pBeingSentenced] != 0 ) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
        return 1;
    }
    for(new i = 0; i <  sizeof(DDoorsInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddInteriorVW]) {
            SetPlayerInterior(playerid,DDoorsInfo[i][ddExteriorInt]);
            PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddExteriorInt];
            SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddExteriorVW]);
            PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddExteriorVW];
            SetPlayerToTeamColor(playerid);
            if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorA]);
                SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorVW]);
                LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddExteriorInt]);
            }
            else {
                SetPlayerPosEx(playerid,DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ]);
                SetPlayerFacingAngle(playerid, DDoorsInfo[i][ddExteriorA]);
                SetCameraBehindPlayer(playerid);
            }
			if(DDoorsInfo[i][ddCustomExterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddExteriorX],DDoorsInfo[i][ddExteriorY],DDoorsInfo[i][ddExteriorZ], FREEZE_TIME);
            return 1;
        }
    }
    new done;
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 2, -25.884498,-185.868988,1003.546875) || IsPlayerInRangeOfPoint(playerid, 2, 226.293991,-7.431529,1002.210937) || IsPlayerInRangeOfPoint(playerid, 2, 314.820983,-141.431991,999.601562) || IsPlayerInRangeOfPoint(playerid, 2, 373.825653,-117.270904,1001.499511)
	    || IsPlayerInRangeOfPoint(playerid, 2, -30.946699,-89.609596,1003.546875) || IsPlayerInRangeOfPoint(playerid, 2, 375.962463,-65.816848,1001.507812) || IsPlayerInRangeOfPoint(playerid, 2, -103.559165,-24.225606,1000.718750))
        {
            idx = GetPlayerVirtualWorld(playerid)-6000;
		    if(!done && idx < MAX_BIZ)// && BizInfo[idx][bType])
	        {
	            SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	            SetPlayerInterior(playerid, 0);
	            SetCameraBehindPlayer(playerid);
                SetPlayerVirtualWorld(playerid, 0);
                return 1;
            }
	    }
        done = 1;
	}
    for(new i = 0; i < sizeof(FamilyInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,FamilyInfo[i][FamilyExit][0], FamilyInfo[i][FamilyExit][1], FamilyInfo[i][FamilyExit][2]) && PlayerInfo[playerid][pVW] == FamilyInfo[i][FamilyVirtualWorld]) {
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            SetPlayerInterior(playerid,0);
            Streamer_UpdateEx(playerid, FamilyInfo[i][FamilyEntrance][0],FamilyInfo[i][FamilyEntrance][1],FamilyInfo[i][FamilyEntrance][2]);
            SetPlayerPosEx(playerid,FamilyInfo[i][FamilyEntrance][0],FamilyInfo[i][FamilyEntrance][1],FamilyInfo[i][FamilyEntrance][2]);
            SetPlayerFacingAngle(playerid,FamilyInfo[i][FamilyEntrance][3]);
            return 1;
        }
    }
    for(new i = 0; i <  sizeof(HouseInfo); i++) {
        if (IsPlayerInRangeOfPoint(playerid,3.0,HouseInfo[i][hInteriorX], HouseInfo[i][hInteriorY], HouseInfo[i][hInteriorZ]) && PlayerInfo[playerid][pVW] == i+6000) {
			SetPlayerInterior(playerid,0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPosEx(playerid,HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ]);
            SetPlayerFacingAngle(playerid, HouseInfo[i][hExteriorA]);
            SetCameraBehindPlayer(playerid);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
			if(HouseInfo[i][hCustomExterior]) Player_StreamPrep(playerid, HouseInfo[i][hExteriorX],HouseInfo[i][hExteriorY],HouseInfo[i][hExteriorZ], FREEZE_TIME);
            return 1;
        }
    }
    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1753.6423,-1586.9365,13.2424)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), 1753.4561,-1595.1804,13.5381);
            SetVehicleZAngle(GetPlayerVehicleID(playerid), 347.7918);
        }
        else {
            SetPlayerPosEx(playerid,1753.4561,-1595.1804,13.5381);
        }
    }
    else if(InsidePlane[playerid] != INVALID_VEHICLE_ID)
	{
	    new string[64];
        format(string, sizeof(string), "* %s exits the airplane.", GetPlayerNameEx(playerid));
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

        if(!IsAPlane(InsidePlane[playerid])) {
            PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
            GivePlayerValidWeapon(playerid, 46, 60000);
            SetPlayerPosEx(playerid, 0.000000, 0.000000, 420.000000); // lol nick
        }
        else {
            new Float:X, Float:Y, Float:Z;
            GetVehiclePos(InsidePlane[playerid], X, Y, Z);
            SetPlayerPosEx(playerid, X-2.7912, Y+3.2304, Z);
			Player_StreamPrep(playerid, X-2.7912,Y+3.2304,Z, FREEZE_TIME);
            if(Z > 50.0) {
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(46)] = 46;
                GivePlayerValidWeapon(playerid, 46, 60000);
            }
        }

        PlayerInfo[playerid][pVW] = 0;
        SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pInt] = 0;
        SetPlayerInterior(playerid, 0);
        InsidePlane[playerid] = INVALID_VEHICLE_ID;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2045.0183,-211.6728,991.5364)) {
        if(BackEntrance) {
         	SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);
	        SetPlayerPosEx(playerid, -2033.7502,-154.8784,35.3203);
		 }
		 else return SendClientMessageEx(playerid, COLOR_GREY, "You don't have the keys for that door (locked) !");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, -2091.0200,-199.8031,978.8315)) {
        if(PlayerInfo[playerid][pMember] == 3) {
	        SetPlayerPosEx(playerid, -2088.4797,-199.6259,978.8315);
		 }
		 else return SendClientMessageEx(playerid, COLOR_GREY, "You don't have the keys for that door (SFPD restricted) !");
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1169.67, -1356.32, 2423.04) && GetPlayerVirtualWorld(playerid) == 7) {
                                                  //Battle Carrier
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        SetPlayerFacingAngle(playerid, 180);
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPosEx(playerid, (X-0.377671),(Y-10.917018),11.6986);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 316.4553,-170.2923,999.5938) && GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Battle Carrier Armoury
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        PlayerInfo[playerid][pVW] = 0;
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPosEx(playerid, (X-6.422671),(Y-10.898918),11.6986);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 305.6966,-159.1586,999.5938)&& GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Battle Carrier Armoury
        SetPlayerPosEx(playerid, 306.4042,-159.0768,999.5938);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -959.6347,1956.4598,9.0000) && GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Engine Room Exit
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPosEx(playerid, (X-5.560629),(Y-3.853518),11.6986);
        PlayerInfo[playerid][pVW] = 0;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1494.3763,1303.5875,1093.2891) && GetPlayerVirtualWorld(playerid) == 1337) {
                                                  //Briefing Room Exit
        SetPlayerInterior(playerid, 0);
        SetPlayerVirtualWorld(playerid, 0);
        new Float:X, Float:Y, Float:Z;
        GetDynamicObjectPos(Carrier[0], X, Y, Z);
        SetPlayerPosEx(playerid, (X-15.382171),(Y-2.272918),11.6986);
        PlayerInfo[playerid][pVW] = 0;
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, 971.70568847656, 0.73652172088623, 1013.0336914063)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPosEx(playerid, 971.75524902344, 1.949291229248, 1012.8675537109);
            SetCameraBehindPlayer(playerid);
            Player_StreamPrep(playerid, 971.75524902344, 1.949291229248, 1012.8675537109, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -265.52786254883, 1409.2824707031, -2.2975430488586)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPosEx(playerid, -230.57353210449, 1409.3792724609, -5.2974662780762);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
			Player_StreamPrep(playerid, -230.57353210449, 1409.3792724609, -5.2974662780762, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -270.8628,1417.2441,-2.2902)) {
        if(PlayerInfo[playerid][pFMember] == 1) {
            SetPlayerPosEx(playerid, 255.84442138672, -158.21658325195, 1.677818775177);
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetCameraBehindPlayer(playerid);
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
			Player_StreamPrep(playerid, 255.84442138672, -158.21658325195, 1.677818775177, FREEZE_TIME);
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (Hades' Children MC Members only)!");
        }
    }
                                                  //Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,-1790.378295,1436.949829,7.187500)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid), 1551.8052,31.0254,24.1446);
        }
        else {
            SetPlayerPosEx(playerid,1551.8052,31.0254,24.1446);
        }
    }
                                                        //VIP Garage
    else if (IsPlayerInRangeOfPoint(playerid,8.0,2425.9028,-1640.0483,1015.3889)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1819.3533,-1560.3534,13.5469);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  253);
        }
        else {
            SetPlayerPosEx(playerid,1819.3533,-1560.3534,13.5469);
            SetPlayerFacingAngle(playerid,253);
        }
	}
                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -68.845336914063, 1351.3386230469, 1079.2109375 ) && (GetPlayerVirtualWorld(playerid) == 666420)) {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPosEx(playerid, -418.95, -1759.26, 6.22);
            SetCameraBehindPlayer(playerid);
        }
    }
                                                  // Hitman HQ
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, -68.845336914063, 1351.3386230469, 1079.2109375 ) && (GetPlayerVirtualWorld(playerid) == 666421)) {
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPosEx(playerid, 2323.3135, 7.6760, 26.5640);
            SetPlayerFacingAngle(playerid, 265.11);
            SetCameraBehindPlayer(playerid);
        }
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3.0, 301.228820, 191.181884, 1007.171875)) {
                                                  //SFPD Exit to garage
        if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3) {
            SetPlayerInterior(playerid, 0);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerPosEx(playerid,-1591.450195, 716.007141, -5.242187);
            SetPlayerFacingAngle(playerid, 271.00);
            SetCameraBehindPlayer(playerid);
        }
        else {
            return SendClientMessageEx(playerid, COLOR_GRAD2, "Access Denied.");
        }
    }
                                                  //SASD - Elevator
    else if (IsPlayerInRangeOfPoint(playerid,3.0,612.6414,-629.8659,-4.0447)) {
        if(IsACop(playerid)) {
            SetPlayerFacingAngle(playerid, 268);
            GameTextForPlayer(playerid, "~w~SASD HQ", 5000, 1);
            SetPlayerPosEx(playerid,2530.3774,-1689.9998,562.7922);
            SetPlayerVirtualWorld(playerid, 1699);
            PlayerInfo[playerid][pVW] = 1699;
			Player_StreamPrep(playerid, 2530.3774,-1689.9998,562.7922, FREEZE_TIME);
        }
        else {
            return SendClientMessageEx(playerid, COLOR_GRAD2, "Access Denied.");
        }
    }
                                                  // FBI garage exit
    else if(IsPlayerInRangeOfPoint(playerid, 3,310.8672,-1484.7493,-33.5292 )) {
        if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) {
            SetPlayerInterior(playerid,0);
            SetPlayerPosEx(playerid, 314.30,-1512.07,24.92);
            SetPlayerFacingAngle(playerid, 55.76);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (FBI restricted access)!");
        }
    }
    else if (IsPlayerInRangeOfPoint(playerid, 3, 291.8773,-1481.0674,-33.5308)) {
        if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) {
            SetPlayerInterior(playerid,0);
            SetPlayerPosEx(playerid,298.26, -1544.53, 76.53);
            SetCameraBehindPlayer(playerid);
            PlayerInfo[playerid][pInt] = 0;
            SetPlayerVirtualWorld(playerid, 0);
            PlayerInfo[playerid][pVW] = 0;
        }
        else {
            SendClientMessageEx(playerid, COLOR_GREY, "You do not have the keys for that door (FBI restricted access)!");
        }
    }
                                                  // NG exit
    else if (IsPlayerInRangeOfPoint(playerid,4.0,-273.884765625,1875.1552734375,29.817853927612)) {
        if (PlayerInfo[playerid][pJailTime] == 0) {
            SetPlayerInterior(playerid,0);
            SetPlayerPosEx(playerid,200.2569,1869.5732,13.1470);
        }
        else {
            SetPlayerHealth(playerid, 0);
            SendClientMessageEx(playerid, COLOR_WHITE, "You can not escape admin prison!");
        }

    }
                                                  //SASD Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,643.8234,-608.0292,-4.2479)) {
        if(IsACop(playerid)) {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
                SetVehiclePos(GetPlayerVehicleID(playerid), 624.5196,-596.8649,16.9396);
            }
            else {
                SetPlayerPosEx(playerid,624.5196,-596.8649,16.9396);
            }
        }
    }
                                                  //Courthouse Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,1381.7274,-1676.4248,-13.2229+1100.00)) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1423.0443,-1664.5244,13.5810);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  270);
        }
        else {
            SetPlayerPosEx(playerid,1423.0443,-1664.5244,13.5810);
            SetPlayerFacingAngle(playerid,270);
        }
    }
                                                  //Gym Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,2240.7332,-1695.9648,(-0.0826+1100.00))) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  2273.6787,-1728.9022,13.5039);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  180);
        }
        else {
            SetPlayerPosEx(playerid,2273.6787,-1728.9022,13.5039);
            SetPlayerFacingAngle(playerid,180);
        }
    }
                                                  //PB Garage
    else if (IsPlayerInRangeOfPoint(playerid,20.0,1218.60,-1451.69,(-46.85+1100.00))) {
        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            SetVehiclePos(GetPlayerVehicleID(playerid),  1218.6017,-1421.5887,13.9084);
            SetVehicleZAngle(GetPlayerVehicleID(playerid),  360);
        }
        else {
            SetPlayerPosEx(playerid,1218.6017,-1421.5887,13.9084);
        }
    }
                                           // Gold/Plat VIP
    else if (IsPlayerInRangeOfPoint(playerid,3.0, 911.6200,1426.2729,-81.1762)) {
        SetPlayerPosEx(playerid,902.2482,1419.8180,-80.9308);
        SetPlayerFacingAngle(playerid, 90);
    }
    return 1;
}

CMD:home(playerid, params[])
{
    if(CheckPointCheck(playerid))
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
	{
        SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ], 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~Home", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
    }
    else
	{
        GameTextForPlayer(playerid, "~w~You are homeless", 5000, 1);
    }
    return 1;
}


CMD:bigears(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if( PlayerInfo[playerid][pAdmin] >= 3) {
        ShowPlayerDialog(playerid, BIGEARS, DIALOG_STYLE_LIST, "Please choose an item to proceed", "Global Chat\nOOC Chat\nIC Chat\nFaction Chat\nFamily Chat\nPlayer\nDisable Bigears", "Select", "Cancel");
    }
    return 1;
}

CMD:clearall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 4) {
        foreach(new i: Player) {
            PlayerInfo[i][pWantedLevel] = 0;
            SetPlayerToTeamColor(i);
            SetPlayerWantedLevel(i, 0);
            ClearCrimes(i);
        }
        SendClientMessageEx(playerid,COLOR_GRAD1, "You have cleared everyone's Wanted Level.");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:dmgcheck(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new giveplayerid;
		new szMessage[128];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmgcheck [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "dmgcheck") == 0)
			{
				format(szMessage, sizeof(szMessage), "You are now damage checking %s", GetPlayerNameEx(giveplayerid));
				SendClientMessage(playerid, COLOR_WHITE, szMessage);
				SetPVarInt(giveplayerid, "dmgcheck", 1);
				SetPVarInt(giveplayerid, "dmgcheckID", playerid);

			}
			else
			{
                SendClientMessage(playerid, COLOR_WHITE, "No Longer Damage Checking");
				DeletePVar(giveplayerid, "dmgcheck");
				DeletePVar(giveplayerid, "dmgcheckID");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not an administrator.");
	}
	return 1;
}

CMD:clearallreports(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 1337) {
        new string[128];
        ClearReports();
        SendClientMessageEx(playerid,COLOR_GRAD1, "You have cleared all the active reports.");
        format(string, sizeof(string), "AdmCmd: %s has cleared all the pending reports.", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_LIGHTRED, string, 2);
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:savechars(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 4) {
        SaveEventPoints();
        SaveHouses();
        SendClientMessageEx(playerid, COLOR_YELLOW, "All Business's updated sucessfully.");
        SaveBiz();
        SendClientMessageEx(playerid, COLOR_YELLOW, "All houses updated sucessfully.");
        SaveAllAccountsUpdate();
		//g_mysql_DumpAccounts();
        SendClientMessageEx(playerid, COLOR_YELLOW, "All player accounts updated successfully.");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:lottoinfo(playerid, params[])
{
	new szMessage[128];
	format(szMessage, sizeof(szMessage), "Next drawing is at %i:00, tickets sold %i, and total jackpot is %i.", NextDrawing, TicketsSold, Jackpot);
	SendClientMessage(playerid, COLOR_WHITE, szMessage);
	return 1;
}

CMD:speclotto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) {
	    SendClientMessage(playerid, COLOR_GREY, "You don't have access to this command.");
	}
	else if(SpecLotto) {
	    SendClientMessage(playerid, COLOR_GREY, "A special lottery has already been started.");
	}
	else {

	    new
	        prize[64],
	        string[128];

	    if(sscanf(params, "s[64]", prize)) {
	        SendClientMessage(playerid, COLOR_GREY, "USAGE: /speclotto [text]");
		}
		else {
		    SpecLotto = 1;
		    LottoPrize = prize;
		    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has started a special lottery. (Prize: %s)", GetPlayerNameEx(playerid), prize);
			ABroadCast(COLOR_YELLOW, string, 4);
			return 1;
		}
	}
	return 1;
}

CMD:cancelspeclotto(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) {
	    SendClientMessage(playerid, COLOR_GREY, "You don't have access to this command.");
	}
	else if(!SpecLotto) {
	    SendClientMessage(playerid, COLOR_GREY, "No special lottery.");
	}
	else {
	    SpecLotto = 0;
	    LottoPrize = "";
	}
	return 1;
}

CMD:myangle(playerid, params[])
{
    new myString[128], Float:a;
    GetPlayerFacingAngle(playerid, a);

    format(myString, sizeof(myString), "Your angle is: %0.2f", a);
    SendClientMessageEx(playerid, 0xFFFFFFFF, myString);

    new myString2[128], Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);

    format(myString2, sizeof(myString), "Your position is: %f, %f, %f", x, y, z);
    SendClientMessageEx(playerid, 0xFFFFFFFF, myString2);
    return 1;
}

CMD:setcolor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
        ShowPlayerDialog(playerid, COLORMENU, DIALOG_STYLE_LIST, "Color Menu", "Blue\nBlack\nRed\nOrange\nPink\nPurple\nGreen\nYellow\nWhite", "Select", "Cancel");
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:mark(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2) {

		new
			Float: f_PlayerPos[3];

		GetPlayerPos(playerid, f_PlayerPos[0], f_PlayerPos[1], f_PlayerPos[2]);
		SetPVarFloat(playerid, "tpPosX1", f_PlayerPos[0]);
		SetPVarFloat(playerid, "tpPosY1", f_PlayerPos[1]);
		SetPVarFloat(playerid, "tpPosZ1", f_PlayerPos[2]);

		SetPVarInt(playerid, "tpInt1", GetPlayerInterior(playerid));
        SendClientMessageEx(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:mark2(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2) {

		new
			Float: f_PlayerPos[3];

		GetPlayerPos(playerid, f_PlayerPos[0], f_PlayerPos[1], f_PlayerPos[2]);
		SetPVarFloat(playerid, "tpPosX2", f_PlayerPos[0]);
		SetPVarFloat(playerid, "tpPosY2", f_PlayerPos[1]);
		SetPVarFloat(playerid, "tpPosZ2", f_PlayerPos[2]);

		SetPVarInt(playerid, "tpInt2", GetPlayerInterior(playerid));
        SendClientMessageEx(playerid, COLOR_GRAD1, "Teleporter destination set!");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:gotojet(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 3) {
        if (GetPlayerState(playerid) == 2) {
            new tmpcar = GetPlayerVehicleID(playerid);
            SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
        }
        else {
            SetPlayerPosEx(playerid, 1.71875, 30.4062, 1200.34);
        }
        SetPlayerInterior(playerid,1);
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
    }
    return 1;
}

CMD:eventstaff(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 1 || PlayerInfo[playerid][pHelper] >= 2 ) {
        if(EventKernel[EventJoinStaff] == 1) {
            for(new i; i < sizeof(EventKernel[EventStaff]); i++) if(EventKernel[EventStaff][i] == INVALID_PLAYER_ID) {
                SetPVarInt( playerid, "EventToken", 1 );
                GetPlayerHealth(playerid, EventFloats[playerid][4]);
                GetPlayerArmour(playerid, EventFloats[playerid][5]);
                EventLastVW[playerid] = GetPlayerVirtualWorld(playerid);
                EventLastInt[playerid] = GetPlayerInterior(playerid);
                GetPlayerPos(playerid, EventFloats[playerid][1], EventFloats[playerid][2], EventFloats[playerid][3]);
                GetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
                SetPlayerPosEx( playerid, EventKernel[ EventPositionX ], EventKernel[ EventPositionY ], EventKernel[ EventPositionZ ] );
                SetPlayerInterior( playerid, EventKernel[ EventInterior ] );
                SetPlayerVirtualWorld( playerid, EventKernel[ EventWorld ] );
                PlayerInfo[playerid][pAGuns][GetWeaponSlot(38)] = 38;
                GivePlayerValidWeapon(playerid, 38, 60000);
                EventKernel[EventStaff][i] = playerid;
                return SendClientMessageEx( playerid, COLOR_WHITE, "You have joined the event staff." );
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "Unable to join the event staff, max is 5.");
        }
    }
    return 1;
}

CMD:quitevent(playerid, params[])
{
    if( GetPVarInt( playerid, "EventToken" ) == 1 ) {
        if( EventKernel[ EventStatus ] == 1 || EventKernel[ EventStatus ] == 2 ) {
       		if(EventKernel[EventType] == 3) {
            	    ResetPlayerWeapons( playerid );
        			DeletePVar(playerid, "EventToken");
        			SetPlayerWeapons(playerid);
       				SetPlayerToTeamColor(playerid);
        			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
        			SetPlayerPosEx(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
        			SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
        			SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
        			SetPlayerInterior(playerid,EventLastInt[playerid]);
        			SetPlayerHealth(playerid, EventFloats[playerid][4]);
        			SetPlayerArmour(playerid, EventFloats[playerid][5]);
        			//Player_StreamPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
					Player_LeaveEventPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
        			for(new i = 0; i < 6; i++) {
        	   			EventFloats[playerid][i] = 0.0;
    	   			}
       		}
       		EventLastVW[playerid] = 0;
       		EventLastInt[playerid] = 0;
      		SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event." );
       		SendClientMessageEx( playerid, COLOR_WHITE, "You can not quit the event at this stage of the event." );
       		return 1;
		}
		for(new s = 0; s < 12; s++)
		{
			if(PlayerInfo[playerid][pAGuns][s] != 0)
			{
				RemovePlayerWeapon(playerid, PlayerInfo[playerid][pAGuns][s]);
			}
		}
      	ResetPlayerWeapons( playerid );
       	DeletePVar(playerid, "EventToken");
       	SetPlayerWeapons(playerid);
       	SetPlayerToTeamColor(playerid);
       	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
       	SetPlayerPosEx(playerid,EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3]);
      	SetPlayerVirtualWorld(playerid, EventLastVW[playerid]);
       	SetPlayerFacingAngle(playerid, EventFloats[playerid][0]);
       	SetPlayerInterior(playerid,EventLastInt[playerid]);
       	SetPlayerHealth(playerid, EventFloats[playerid][4]);
       	SetPlayerArmour(playerid, EventFloats[playerid][5]);
       	//Player_StreamPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
		Player_LeaveEventPrep(playerid, EventFloats[playerid][1],EventFloats[playerid][2],EventFloats[playerid][3], FREEZE_TIME);
       	if(EventKernel[EventType] == 4)
		{
			if(GetPVarType(playerid, "pEventZombie")) DeletePVar(playerid, "pEventZombie");
 			SetPlayerToTeamColor(playerid);
		}
       	for(new i = 0; i < 6; i++) {
        	EventFloats[playerid][i] = 0.0;
        }
        EventLastVW[playerid] = 0;
        EventLastInt[playerid] = 0;
        SendClientMessageEx( playerid, COLOR_LIGHTBLUE, "* You have quit the event." );
    }
    return 1;
}

CMD:eventreset(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 1337 ) {
        new string[128];
        if( EventKernel[EventAdvisor] >= 1 ) {
            EventKernel[EventAdvisor] = 0;
            KillTimer( EventTimerHandle );
            format( string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has reset the event timer.", GetPlayerNameEx( playerid ) );
            ABroadCast( COLOR_YELLOW, string, 4 );
        }
        else {
            SendClientMessageEx( playerid, COLOR_GREY, "The timeout expired before you attempted to use this command. You can set-up an event." );
        }
    }
    return 1;
}

CMD:requestevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4 ) {
        new string[128];
        if( EventKernel[ EventStatus ] == 0 ) {
            if(EventKernel[EventRequest] != INVALID_PLAYER_ID || EventKernel[EventCreator] != INVALID_PLAYER_ID) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "There's already someone requesting/making an event.");
                return 1;
            }
            if(EventKernel[EventAdvisor] == 1) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "Another admin/advisor already requested/made an event within the last three hours, please try again later!");
                return 1;
            }
            if(PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4) {
                EventKernel[ EventRequest ] = playerid;
                SendClientMessageEx( playerid, COLOR_GRAD2, "You have requested to set up an event, please wait until a Senior Admin approves it." );
                format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s would like to set up an event, do you approve? /acceptevent or /denyevent.", GetPlayerNameEx(playerid) );
                ABroadCast( COLOR_YELLOW, string, 4 );
                EventKernel[EventAdvisor] = 1;
                EventTimerHandle = SetTimer("ERequested", 9600000, false);
            }
        }
        else {
            SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
        }
    }
    return 1;
}

CMD:vipparty(playerid, params[])
{
    if( PlayerInfo[playerid][pDonateRank] == 5 )
	{
        new string[128];
        if( EventKernel[ EventStatus ] == 0 )
		{
            if(EventKernel[EventRequest] != INVALID_PLAYER_ID || EventKernel[EventCreator] != INVALID_PLAYER_ID)
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "There's already someone requesting/making an event.");
                return 1;
            }
            if(EventKernel[EventAdvisor] == 1)
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "Another admin/advisor already requested/made an event within the last three hours, please try again later!");
                return 1;
            }
            if(PlayerInfo[ playerid ][ pAdmin ] >= 4 || PlayerInfo[playerid][pDonateRank] == 5) {
                EventKernel[ EventRequest ] = playerid;
                SendClientMessageEx( playerid, COLOR_GRAD2, "You have requested to set up an event, please wait until a Senior Admin approves it." );
                format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: VIP Moderator %s would like to set up a VIP Only event, do you approve? /acceptevent or /denyevent.", GetPlayerNameEx(playerid) );
                ABroadCast( COLOR_YELLOW, string, 4 );
                EventKernel[EventAdvisor] = 1;
                EventKernel[VipOnly] = 1;
                EventTimerHandle = SetTimer("ERequested", 9600000, false);
            }
        }
        else
		{
            SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
        }
    }
    return 1;
}

CMD:denyevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 4 ) {
        new string[128];
        SendClientMessageEx( EventKernel[EventRequest], COLOR_GRAD2, "Your request was denied." );
        EventKernel[EventRequest] = INVALID_PLAYER_ID;
        EventKernel[EventCreator] = INVALID_PLAYER_ID;
        format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has denied the event request.", GetPlayerNameEx(playerid) );
        ABroadCast( COLOR_YELLOW, string, 4 );
        for(new i; i < sizeof(EventKernel[EventStaff]); i++) {
            if(EventKernel[EventStaff][i] != INVALID_PLAYER_ID) {
                SetPlayerWeapons(EventKernel[EventStaff][i]);
                SetPlayerPosEx(EventKernel[EventStaff][i],EventFloats[EventKernel[EventStaff][i]][1],EventFloats[EventKernel[EventStaff][i]][2],EventFloats[EventKernel[EventStaff][i]][3]);
                SetPlayerVirtualWorld(EventKernel[EventStaff][i], EventLastVW[EventKernel[EventStaff][i]]);
                SetPlayerFacingAngle(EventKernel[EventStaff][i], EventFloats[EventKernel[EventStaff][i]][0]);
                SetPlayerInterior(EventKernel[EventStaff][i],EventLastInt[EventKernel[EventStaff][i]]);
                SetPlayerHealth(EventKernel[EventStaff][i], EventFloats[EventKernel[EventStaff][i]][4]);
                SetPlayerArmour(EventKernel[EventStaff][i], EventFloats[EventKernel[EventStaff][i]][5]);
                for(new d = 0; d < 6; d++) {
                    EventFloats[EventKernel[EventStaff][i]][d] = 0.0;
                }
                EventLastVW[EventKernel[EventStaff][i]] = 0;
                EventLastInt[EventKernel[EventStaff][i]] = 0;
                EventKernel[EventStaff][i] = INVALID_PLAYER_ID;
                ResetPlayerWeapons( i );
            }
        }

        EventKernel[ EventStatus ] = 0;
        EventKernel[ EventType ] = 0;
        EventKernel[ EventLimit ] = 0;
        EventKernel[ EventPlayers ] = 0;
        EventKernel[ EventWeapons ][0] = 0;
        EventKernel[ EventWeapons ][1] = 0;
        EventKernel[ EventWeapons ][2] = 0;
        EventKernel[ EventWeapons ][3] = 0;
        EventKernel[ EventWeapons ][4] = 0;
        EventKernel[EventCreator] = INVALID_PLAYER_ID;
        EventKernel[VipOnly] = 0;
        EventKernel[EventJoinStaff] = 0;
    }

    return 1;
}

CMD:acceptevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 4 ) {
        if( EventKernel[ EventStatus ] == 0 ) {
            if(EventKernel[EventRequest] != INVALID_PLAYER_ID) {
                if(IsPlayerConnected(EventKernel[EventRequest])) {
                    if(EventKernel[EventCreator] != INVALID_PLAYER_ID) {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "There's already someone making an event.");
                        return 1;
                    }
                    new string[128];
                    EventKernel[EventCreator] = EventKernel[EventRequest];
                    EventKernel[EventRequest] = INVALID_PLAYER_ID;
                    SetPVarInt( EventKernel[EventCreator], "EventToken", 1 );
                    SendClientMessageEx( EventKernel[EventCreator], COLOR_GRAD2, "Your event request has been accepted, use /seteventpos to change the event position, once you do it people will be able to /eventstaff." );
                    if(PlayerInfo[playerid][pHelper] >= 2) {
                        SendClientMessageEx( EventKernel[EventCreator], COLOR_GRAD2, "You now have temporary access to (/o)oc and /goto." );
                    }
                    format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has approved the event request from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(EventKernel[EventCreator]) );
                    ABroadCast( COLOR_YELLOW, string, 4 );
                    return 1;
                }
            }
        }
    }
    return 1;
}

CMD:approveevent(playerid, params[])
{
    if( PlayerInfo[ playerid ][ pAdmin ] >= 4 ) {
        if( EventKernel[ EventStartRequest ] == 1 ) {
            new string[128];
            EventKernel[ EventStatus ] = 1;
            EventKernel[EventStartRequest] = 0;
            SendClientMessageEx( EventKernel[EventCreator], COLOR_GRAD2, "Your event start request has been accepted, you can now use /announceevent to announce it to the server." );
            format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has approved the event start request from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(EventKernel[EventCreator]) );
            ABroadCast( COLOR_YELLOW, string, 4 );
            foreach(new i: Player) {
                if(PlayerInfo[i][pDonateRank] >= 3) {
                    SendClientMessageEx(i, COLOR_YELLOW, "* Gold+ VIP Feature: An event has been started! /joinevent to join early");
                }
            }
            return 1;
        }
    }
    return 1;
}

CMD:god(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
	    if(GetPVarType(playerid, "pGodMode"))
	    {
			DeletePVar(playerid, "pGodMode");
			SetPlayerHealth(playerid, 100.0);
			SetPlayerArmour(playerid, 100.0);
			SendClientMessage(playerid, COLOR_WHITE, "God mode disabled");
		}
		else
		{
		    SetPlayerHealth(playerid, 9999.9);
		    SetPlayerArmour(playerid, 9999.9);
		    SetPVarInt(playerid, "pGodMode", 1);
		    SendClientMessage(playerid, COLOR_WHITE, "God mode enabled");
		}
    }
	return 1;
}

CMD:fly(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if (PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if (FlyingGod[playerid] == 0)
		{
        	FlyingGod[playerid] = 1;
        	StartFly(playerid);
        	SendClientMessageEx(playerid, COLOR_WHITE, "Fly Mode On!");

 		}
 		else
 		{
        	FlyingGod[playerid] = 0;
        	StopFly(playerid);
        	SendClientMessageEx(playerid, COLOR_GRAD2, "Fly Mode Off!");
        }

    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not an Admin!");
    }
    return 1;
}

CMD:healnear(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    if(PlayerInfo[playerid][pAdmin] >= 4) {
        new string[128];
        new count;
        foreach(new i: Player) {
            if(ProxDetectorS(12.0, playerid, i)) {
                SetPlayerHealth(i, 100);
                SetPlayerArmour(i, 100);
                count++;
            }
        }
        format(string, sizeof(string), "You have healed everyone (%d) nearby.", count);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:nos(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) {
        if(IsPlayerInAnyVehicle(playerid)) {
			if(GetPVarInt(playerid, "EventToken")) {
				return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this while in an event.");
			}
            if( ! IsPlayerInInvalidNosVehicle( playerid ) ) {
                new string[128];
                new nostogive;
                new level = PlayerInfo[playerid][pMechSkill];
                if(level >= 0 && level < 50) { nostogive = 1009; }
                else if(level >= 50 && level < 100) { nostogive = 1009; }
                else if(level >= 100 && level < 200) { nostogive = 1008; }
                else if(level >= 200 && level < 400) { nostogive = 1008; }
                else if(level >= 400) { nostogive = 1010; }
                AddVehicleComponent(GetPlayerVehicleID(playerid),nostogive);
                                                  //NOS
                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                format(string, sizeof(string), "* %s added nitrous injection to the vehicle.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
            else {
                SendClientMessageEx(playerid, COLOR_WHITE, "Nitrous injection cannot be installed on this vehicle.");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "You're not in a vehicle.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not a Mechanic!" );
    }
    return 1;
}

CMD:hyd(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 7 || PlayerInfo[playerid][pJob2] == 7) {
        if(IsPlayerInAnyVehicle(playerid)) {
            if( ! IsPlayerInInvalidNosVehicle( playerid ) ) {
				if(PlayerInfo[playerid][pServiceTime] > 0)
					return SendClientMessage(playerid, COLOR_GREY, "You must wait 20 seconds before using this command again. " );

                new string[128];
                PlayerPlaySound(playerid,1133,0.0,0.0,0.0);
                AddVehicleComponent(GetPlayerVehicleID(playerid), 1087);
                format(string, sizeof(string), "* %s added hydraulics to the vehicle.", GetPlayerNameEx(playerid));
                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                PlayerInfo[playerid][pServiceTime] = 20;
            }
            else {
                SendClientMessageEx( playerid, COLOR_WHITE, "Hydraulics cannot be installed in this vehicle." );
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_WHITE, "You're not in a vehicle.");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not a Mechanic!" );
    }
    return 1;
}

CMD:fixveh(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 4) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
            return 1;
        }
		if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
	 	}
		new vehicleid;
		if(!sscanf(params, "i", vehicleid))
		{
			new Float:x, Float:y, Float:z, Float: zAng;
			GetVehicleZAngle(vehicleid, zAng );
			GetVehiclePos(vehicleid, x, y, z);
			SetVehiclePos(vehicleid, x, y, z+2);
			SetVehicleZAngle(vehicleid, zAng );
		}
		else if(IsPlayerInAnyVehicle(playerid))
		{
            new Float:x, Float:y, Float:z,Float: zAng;
			GetVehicleZAngle( GetPlayerVehicleID( playerid ), zAng );
			GetVehiclePos( GetPlayerVehicleID( playerid ), x, y, z);
			SetVehiclePos( GetPlayerVehicleID( playerid ), x, y, z+2);
			SetVehicleZAngle( GetPlayerVehicleID( playerid ), zAng );
        }
        if(IsPlayerInAnyVehicle(playerid)) {
            RepairVehicle(GetPlayerVehicleID(playerid));
			Vehicle_Armor(GetPlayerVehicleID(playerid));
			Vehicle_DArmor(GetPlayerVehicleID(playerid));
            SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Fixed!");
        }
    }
    return 1;
}

CMD:fixvehall(playerid, params[])
{
    if(IsPlayerConnected(playerid)) {
        if(PlayerInfo[playerid][pAdmin] < 4) {
            SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
            return 1;
        }
		if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
        for(new v = 0; v < MAX_VEHICLES; v++) {
            RepairVehicle(v);
			Vehicle_Armor(v);
			Vehicle_DArmor(v);
        }
        SendClientMessageEx(playerid, COLOR_GREY, "   All vehicles fixed!");
    }
    return 1;
}

CMD:turfs(playerid, params[])
{
    if(turfWarsRadar[playerid] == 0) {
        SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled the Turf Minimap Radar.");
        ShowTurfWarsRadar(playerid);
    }
    else {
        SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled the Turf Minimap Radar.");
        HideTurfWarsRadar(playerid);
    }
    return 1;
}




CMD:claim(playerid, params[])
{
	if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
    new string[128];
    new tw = GetPlayerTurfWarsZone(playerid);
    new family = PlayerInfo[playerid][pFMember];
    new rank = PlayerInfo[playerid][pRank];
    if(family == 255) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a family/gang, you can not claim turfs!");
        return 1;
    }
    if(rank < 5) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be at least Rank 5 to claim turfs!");
        return 1;
    }
    if(FamilyInfo[family][FamilyTurfTokens] < 12) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "Your family/gang does not have any turf claim tokens, please wait at least 12 hours.");
        return 1;
    }
    if(tw != -1) {
        if(TurfWars[tw][twLocked] == 1) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "The turf is currently locked by a admin, you can not claim it!");
            return 1;
        }
        if(TurfWars[tw][twVulnerable] == 0) {
            if(TurfWars[tw][twActive] == 0) {
                if(TurfWars[tw][twOwnerId] == family) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "Your family/gang already owns this turf, you are unable to claim it!");
                    return 1;
                }
                new count = 0;
                foreach(new i: Player) {
                    if(family == PlayerInfo[i][pFMember]) {
                        if(GetPlayerTurfWarsZone(i) == tw) {
                            count++;
                        }
                    }
                }

                if(count > 2) {
                    FamilyInfo[family][FamilyTurfTokens] -= 12;
                    TakeoverTurfWarsZone(family, tw);
                }
                else {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "You need at least 3 of your family/gang members on the turf, to be able to claim it!");
                }
            }
            else {
                new count = 0;
                new leocount = 0;
                if(TurfWars[tw][twAttemptId] == family) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "You are already attempting to capture this turf!");
                    return 1;
                }

                foreach(new i: Player) {
                    if(TurfWars[tw][twAttemptId] == PlayerInfo[i][pFMember]) {
                        if(GetPlayerTurfWarsZone(i) == tw) {
                            count++;
                        }
                    }
                    if(TurfWars[tw][twAttemptId] == -1) {
                        if(IsACop(i)) {
                            if(GetPlayerTurfWarsZone(i) == tw) {
                                leocount++;
                            }
                        }
                    }
                }

                if(count == 0 && leocount == 0) {
                    if(family != TurfWars[tw][twOwnerId]) {
                        FamilyInfo[family][FamilyTurfTokens] -= 12;
                    }
                    foreach(new i: Player) {
                        if(PlayerInfo[i][pGangModerator] == 1) {
                            format(string,sizeof(string),"%s has attempted to takeover turf %d for family %s",GetPlayerNameEx(playerid),tw,FamilyInfo[family][FamilyName]);
                            SendClientMessageEx(i,COLOR_YELLOW,string);
                        }
                    }
                    TakeoverTurfWarsZone(family, tw);
                }
                else {
                    if(leocount == 0) {
                        format(string,sizeof(string),"There is still %d Attacking Members on the Turf, you must get rid of them before reclaiming!",count);
                        SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    }
                    else {
                        format(string,sizeof(string),"There is still %d Officers on the Turf, you must get rid of them before reclaiming!",leocount);
                        SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    }
                }
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD2, "This turf is currently not vulnerable, you are unable to claim it!");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be in a turf to be able to claim turfs!");
    }

    if(turfWarsRadar[playerid] == 0) {
        ShowTurfWarsRadar(playerid);
    }
    return 1;
}

CMD:scores(playerid, params[])
{
    if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
        PaintballScoreboard(playerid, GetPVarInt(playerid, "IsInArena"));
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a arena!");
    }
    return 1;
}

CMD:announcem(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }

    SetTimer( "Maintenance", 30000, false );
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The server will be going down in 30 seconds for Scheduled Maintenance.");
    foreach(new i: Player) {
        GameTextForPlayer(i, "~y~Scheduled Maintenance Alert", 5000, 6);
    }
    return 1;
}

/*CMD:announcem(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 1337) {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
        return 1;
    }

    SetTimer( "Maintenance", 30000, false );
    SendClientMessageToAllEx(COLOR_LIGHTBLUE, "* The server will be going down in 30 seconds for Scheduled Maintenance.");
    foreach(new i: Player) {
        //GameTextForPlayer(i, "~y~Scheduled Maintenance Alert", 5000, 6);
		GameTextForPlayer(i, "~y~Evolution Roleplay Scheduled~n~~g~Maintenance ~y~Alert!", 6000, 4);
    }
    return 1;
}*/

CMD:dm(playerid, params[])
{
    if( PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pSMod] == 1)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dm [player]");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[playerid][pAdmin] < 3 && GetPVarInt(playerid, "pWatchdogWatching") != giveplayerid)
		    {
		        return SendClientMessageEx(playerid, COLOR_WHITE, "You can only use this command on the person you are watchdog watching!");
		    }
		    if(PlayerInfo[giveplayerid][pAdmin] > 1)
		    {
		        return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot do this to other administrators!");
			}

			foreach(new i: Player) if(GetPVarInt(i, "pWatchdogWatching") == giveplayerid) {
				SendClientMessage(i, COLOR_WHITE, "You have stopped DM Watching.");
				GettingSpectated[Spectate[i]] = INVALID_PLAYER_ID;
				Spectating[i] = 0;
				Spectate[i] = INVALID_PLAYER_ID;
				SetPVarInt(i, "SpecOff", 1 );
				TogglePlayerSpectating(i, false);
				SetCameraBehindPlayer(i);
				DeletePVar(i, "pWatchdogWatching");
			}

			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(ip);
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,"/DM",GetPlayerSQLId(playerid));
				return 1;
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
   			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
	   		}
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: DM ", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
    		SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 60*20;
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/DM]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			PlayerInfo[giveplayerid][pWRestricted] = 4;
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You have been prisoned for Death Matching - you will be prisoned for two hours, warned and your weapons restricted for 4 hours.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
	}
	return 1;
}

CMD:sdm(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] == 1)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sdm [player]");
		if(IsPlayerConnected(giveplayerid))
	 	{
		    if(PlayerInfo[giveplayerid][pAdmin] > 1)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You cannot do this to other administrators!");
		        return 1;
			}

			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid));
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED, string, 2);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(ip);
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,"/DM",GetPlayerSQLId(playerid));
				return 1;
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
    		{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
	   		}
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been silent prisoned (/sdm) by %s, reason: DM ", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been silent prisoned (/sdm) by %s, reason: DM", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
   			ABroadCast(COLOR_LIGHTRED, string, 2);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 60*20;
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "[OOC][PRISON][/SDM]", 128);
			strcpy(PlayerInfo[giveplayerid][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);

			PlayerInfo[giveplayerid][pWRestricted] = 4;
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You have been prisoned for Death Matching - you will be prisoned for two hours, warned and your weapons restricted for 4 hours.");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
	}
	return 1;
}



CMD:offerappeal(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /offerappeal [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pBeingSentenced] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "That player isn't pending a sentence!");
		    if(AppealOfferAccepted[giveplayerid] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "That player has already accepted a lawyer to appeal for him!");
			AppealOffer[giveplayerid] = playerid;
		    format(string, sizeof(string), "You have offered your lawyer services to %s.",GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    format(string, sizeof(string), "%s has offered their lawyer services (use /accept appeal to accept them).", GetPlayerNameEx(playerid));
		    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a Lawyer!");
	}
	return 1;
}


CMD:finishappeal(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2)
	{
	    new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /finishappeal [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(AppealOffer[giveplayerid] != playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not offering your services to this player!");
		    format(string, sizeof(string), "You have finished your Lawyer services to %s.",GetPlayerNameEx(giveplayerid));
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    format(string, sizeof(string), "%s has finished offering their Lawyer services.", GetPlayerNameEx(playerid));
		    SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		    AppealOffer[giveplayerid] = INVALID_PLAYER_ID;
			AppealOfferAccepted[giveplayerid] = 0;
		}
	}
	else
	{
       	return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a Lawyer!");
	}
	return 1;
}


CMD:mywarrants(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 361.8299,173.7117,1008.3828))
    {
		if(!isnull(PlayerInfo[playerid][pWarrant]))
  		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You do have active warrants for your arrest. Please considering calling 911 to turn yourself in.");
   		}
     	else
      	{
       		SendClientMessageEx(playerid, COLOR_WHITE, "You do not have active warrants.");
      	}
   	}
    else
    {
    	SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be at the point in City Hall to check if you have active warrants.");
    }
	return 1;
}





CMD:me(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /me [action]");
	new string[128];
	format(string, sizeof(string), "* %s (%d) %s", GetPlayerNameEx(playerid),playerid, params);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:try(playerid, params[])
{
 	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GRAD2, "USAGE: /try [action]");
	new rand = random(100)+1;
	if(rand <= 49) format(string, sizeof(string), "*** %s tries %s and succeeds", GetPlayerNameEx(playerid), params);
	else format(string, sizeof(string), "*** %s tries %s, but fails", GetPlayerNameEx(playerid), params);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:w(playerid, params[])
{
	new giveplayerid, whisper[128];

	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(sscanf(params, "us[128]", giveplayerid, whisper))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/w)hisper [player] [text]");
		return 1;
	}
	if(WatchingTV[playerid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this while watching TV.");
		return 1;
	}
	if (IsPlayerConnected(giveplayerid))
	{
		if(HidePM[giveplayerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player is blocking whispers!");
			return 1;
		}
		new giveplayer[MAX_PLAYER_NAME], sendername[MAX_PLAYER_NAME], string[128];
		sendername = GetPlayerNameEx(playerid);
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid == playerid)
		{
			if(PlayerInfo[playerid][pSex] == 1) format(string, sizeof(string), "* %s mutters something to himself.", GetPlayerNameEx(playerid));
			else format(string, sizeof(string), "* %s mutters something to herself.", GetPlayerNameEx(playerid));
			return ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		if(ProxDetectorS(5.0, playerid, giveplayerid) || PlayerInfo[playerid][pAdmin] >= 2)
		{
		    foreach(new i: Player)
		    {
		        if(BigEar[i] == 6 && (BigEarPlayer[i] == playerid || BigEarPlayer[i] == giveplayerid))
		        {
					format(string, sizeof(string), "(BE)%s(ID %d) whispers to %s(ID %d): %s", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, whisper);
					if(strlen(string) > 92)
					{
						new firstline[128], secondline[128];
						strmid(firstline, string, 0, 88);
						strmid(secondline, string, 88, 128);
						format(firstline, sizeof(firstline), "%s ...", firstline);
						SendClientMessageEx(i, COLOR_YELLOW, firstline);
						SendClientMessageEx(i, COLOR_YELLOW, secondline);
					}
					else SendClientMessageEx(i,COLOR_YELLOW, string);
				}
			}
			format(string, sizeof(string), "%s (ID %d) whispers to you: %s", GetPlayerNameEx(playerid), playerid, whisper);

			if(strlen(string) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, string, 0, 88);
				strmid(secondline, string, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessageEx(giveplayerid, COLOR_YELLOW, firstline);
				SendClientMessageEx(giveplayerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessageEx(giveplayerid,COLOR_YELLOW, string);

			format(string, sizeof(string), "You whispered to %s: %s", GetPlayerNameEx(giveplayerid),whisper);
			if(strlen(string) > 92)
			{
				new firstline[128], secondline[128];
				strmid(firstline, string, 0, 88);
				strmid(secondline, string, 88, 128);
				format(firstline, sizeof(firstline), "%s ...", firstline);
				SendClientMessageEx(playerid, COLOR_YELLOW, firstline);
				SendClientMessageEx(playerid, COLOR_YELLOW, secondline);
			}
			else SendClientMessageEx(playerid,COLOR_YELLOW, string);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:do(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /do [action]");
	else if(strlen(params) >= 100) return SendClientMessageEx(playerid, COLOR_GREY, "The specified message must not be longer than 99 characters in length.");
	new string[128];
	format(string, sizeof(string), "* %s (( %s (%d) ))", params, GetPlayerNameEx(playerid),playerid);
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:o(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if ((noooc) && PlayerInfo[playerid][pAdmin] < 2 && EventKernel[EventCreator] != playerid)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   The OOC channel has been disabled by an Admin!");
		return 1;
	}
	if(gOoc[playerid])
	{
		SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "   You have disabled OOC Chat, re-enable with /togooc!");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/o)oc [ooc chat]");
	else if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128];
		format(string, sizeof(string), "(( %s %s (%d): %s ))",ARank(playerid), GetPlayerNameEx(playerid),playerid, params);
		OOCOff(COLOR_OOC,string);
	}
	else if(PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128];
		format(string, sizeof(string), "(( Community Advisor %s (%d): %s ))", GetPlayerNameEx(playerid),playerid, params);
		OOCOff(COLOR_OOC,string);
		return 1;
	}
	else if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[playerid][pHelper] <= 2)
	{
		new string[128];
		format(string, sizeof(string), "(( %s (%d): %s ))", GetPlayerNameEx(playerid),playerid, params);
		OOCOff(COLOR_OOC,string);
		return 1;
	}
	return 1;
}

CMD:shout(playerid, params[]) {
	return cmd_s(playerid, params);
}

CMD:s(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/s)hout [shout chat]");
	new string[128];
	format(string, sizeof(string), "(shouts) %s!", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,60.0,5000);
	format(string, sizeof(string), "%s (%d) shouts: %s!", GetPlayerNameEx(playerid),playerid, params);
	ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2, 1);
	return 1;
}

CMD:low(playerid, params[]) {
	return cmd_l(playerid, params);
}

CMD:l(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/l)ow [close chat]");

	new string[128];
	format(string, sizeof(string), "%s (%d) says quietly: %s", GetPlayerNameEx(playerid), playerid, params);
	ProxDetector(5.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, 1);
	format(string, sizeof(string), "(quietly) %s", params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,5.0,5000);
	return 1;
}

CMD:b(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /b [local ooc chat]");
	new string[128];
	format(string, sizeof(string), "%s (%d): (( %s ))", GetPlayerNameEx(playerid),playerid, params);
	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);

	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pAdmin] > 1 && BigEar[i] == 2)
	    {
			new szAntiprivacy[128];
			format(szAntiprivacy, sizeof(szAntiprivacy), "(BE) %s: %s", GetPlayerNameEx(playerid), params);
			SendClientMessageEx(i, COLOR_FADE1, szAntiprivacy);
		}
	}
	return 1;
}

CMD:pay(playerid, params[])
{
	new id, storageid, amount;

	if(sscanf(params, "ud", id, amount)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pay [player] [amount]");
	}
	else if(!IsPlayerConnected(id)) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else if(id == playerid) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");
	}
	else if(amount > 1000 && PlayerInfo[playerid][pLevel] < 3) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be level 3 to pay over $1,000 at a time.");
	}
	else if(!(1 <= amount <= 100000)) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "Don't go below $1, or above $100,000 at once.");
	}
	else if(ProxDetectorS(5.0, playerid, id)) {
		TransferStorage(id, -1, playerid, storageid, 1, amount, -1, -1);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
	return 1;
}


CMD:rehashall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	RehashHouses();
	RehashDynamicDoors();
	RehashDynamicMapIcons();
	return 1;
}

CMD:kill(playerid, params[])
{
    if(GetPVarInt( playerid, "EventToken" ) == 1 || GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0||PlayerInfo[playerid][pJailTime]!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	}
	else
	{
		if( GetPVarInt( playerid, "EventToken" ) >= 1 || GetPVarInt(playerid, "IsInArena") >= 0 )
		{
		    if(GetPVarInt(playerid, "IsInArena") >= 0)
		    {
				if(PaintBallArena[GetPVarInt(playerid, "IsInArena")][pbGameType] == 3)
				{
				    if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
				    {
				        SendClientMessageEx(playerid, COLOR_WHITE, "You can not kill yourself while holding a flag.");
				        return 1;
				    }
				}
		    }
			ResetPlayerWeapons(playerid);
		}
		SetPlayerHealth( playerid, 0 );
	}
	return 1;
}

CMD:stopani(playerid, params[])
{
	if(StopaniFloats[playerid][0] != 0)
	{
	    SendClientMessageEx (playerid, COLOR_GREY, "You are already attempting to clear your animations!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0||PlayerInfo[playerid][pBeingSentenced]!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
	}
	else
	{
	    GetPlayerPos(playerid, StopaniFloats[playerid][0], StopaniFloats[playerid][1], StopaniFloats[playerid][2]);
		SetTimerEx("StopaniTimer", 10000, 0, "d", playerid);
		SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move for 10 seconds to have your animations cleared!");
	}
	return 1;
}

forward StopaniTimer(playerid);
public StopaniTimer(playerid)
{
	new Float:posX, Float:posY, Float:posZ;
    GetPlayerPos(playerid, posX, posY, posZ);

    if(StopaniFloats[playerid][0] != posX || StopaniFloats[playerid][1] != posY || StopaniFloats[playerid][2] != posZ)
	{
	    SendClientMessageEx (playerid, COLOR_YELLOW, "Failed to clear animations because you moved!");
    	for(new i = 0; i < 3; i++)
		{
			StopaniFloats[playerid][i] = 0;
		}
	    return 1;
	}
	SendClientMessageEx (playerid, COLOR_YELLOW, "Your animations were cleared!");
	ClearAnimations(playerid);
	SetPlayerSkin(playerid, GetPlayerSkin(playerid));
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	for(new i = 0; i < 3; i++)
	{
		StopaniFloats[playerid][i] = 0;
	}
	return 1;
}

CMD:eventhelp(playerid, params[])
{
	if (EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessageEx(playerid, COLOR_GRAD4,"*** EVENT HELP *** type a command for more information");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** EVENT HELP *** /seteventpos /seteventinfo /startevent /lockevent /endevent /announceevent /beginevent /quitevent");
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	}
	return 1;
}

CMD:skill(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /skill [number]");
		SendClientMessageEx(playerid, COLOR_GREY, "| 1: Detective																	 6: Arms Dealer");
		SendClientMessageEx(playerid, COLOR_GREY, "| 2: Lawyer						   											 7: Car Mechanic");
		SendClientMessageEx(playerid, COLOR_GREY, "| 3: Whore											  	 						 8: Boxer");
		SendClientMessageEx(playerid, COLOR_GREY, "| 4: Drugs Dealer										  9: Fishing");
		SendClientMessageEx(playerid, COLOR_GREY, "| 5: Drug Smuggler								10: Trucker");
		return 1;
	}
	else switch(strval(params)) {
		case 1: //Detective
		{
			new level = PlayerInfo[playerid][pDetSkill], string[48];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 1."); format(string, sizeof(string), "You need to find %d more people to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 2."); format(string, sizeof(string), "You need to find %d more people to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 3."); format(string, sizeof(string), "You need to find %d more people to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 4."); format(string, sizeof(string), "You need to find %d more people to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Detective Skill Level = 5."); }
		}
		case 2://Lawyer
		{
			new level = PlayerInfo[playerid][pLawSkill], string[48];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 1."); format(string, sizeof(string), "You need to free %d more people to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 2."); format(string, sizeof(string), "You need to free %d more people to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 3."); format(string, sizeof(string), "You need to free %d more people to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 4."); format(string, sizeof(string), "You need to free %d more people to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Lawyer Skill Level = 5."); }
		}
		case 3://Whore
		{
			new level = PlayerInfo[playerid][pSexSkill], string[48];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 1."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 2."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 3."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 4."); format(string, sizeof(string), "You need to have sex %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Whore Skill Level = 5."); }
		}
		case 4://Drugs Dealer
		{
			new level = PlayerInfo[playerid][pDrugsSkill], string[50];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell drugs %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Dealer Skill Level = 5."); }
		}
		case 5://Drug Smuggling
		{
			new level = PlayerInfo[playerid][pSmugSkill], string[53];
			if(level >= 0 && level <= 20) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 1."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 20 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 21 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 2."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 3."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 4."); format(string, sizeof(string), "You need to smuggle %d more drug crates to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Drug Smuggling Skill Level = 5."); }
		}
		case 6://Arms Dealer
		{
			new level = PlayerInfo[playerid][pArmsSkill], string[48];
			if(level >= 0 && level < 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 1."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 50 && level < 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 2."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 100 && level < 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 3."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 200 && level < 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 4."); format(string, sizeof(string), "You need to sell %d more guns to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Arms Dealer Skill Level = 5."); }
		}
		case 7://Car Mechanic
		{
			new level = PlayerInfo[playerid][pMechSkill], string[60];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 1."); format(string, sizeof(string), "You need to fix/refill a car for %d times more to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 2."); format(string, sizeof(string), "You need to fix/refill a car for %d times more to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 3."); format(string, sizeof(string), "You need to fix/refill a car for %d times more to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 4."); format(string, sizeof(string), "You need to fix/refill a car for %d times more to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Car Mechanic Skill Level = 5."); }
		}
		case 8://Boxer
		{
			new level = PlayerInfo[playerid][pBoxSkill], string[48];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 1."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 2."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 3."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 4."); format(string, sizeof(string), "You need to Win %d more Matches to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Boxing Skill Level = 5."); }
		}
		case 9://Fishing
		{
			new level = PlayerInfo[playerid][pFishSkill], string[48];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 1."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 50 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 2."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 100 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 3."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 200 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 4."); format(string, sizeof(string), "You need to Fish %d more Fishes to level up.", 400 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Fishing Skill Level = 5."); }
		}
		case 10://Trucker
		{
			new level = PlayerInfo[playerid][pTruckSkill], string[50];
			if(level >= 0 && level <= 50) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 1."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 51 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 51 && level <= 100) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 2."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 101 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 101 && level <= 200) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 3."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 201 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 201 && level <= 400) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 4."); format(string, sizeof(string), "You need to transport goods %d times to level up.", 401 - level); SendClientMessageEx(playerid, COLOR_YELLOW, string); }
			else if(level >= 401) { SendClientMessageEx(playerid, COLOR_YELLOW, "Your Trucker Skill Level = 5."); }
		}
		default:
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid skill number specified.");
		}
	}
	return 1;
}

CMD:tlaws(playerid, params[]) {
	SendClientMessage(playerid, COLOR_RED, "Traffic Laws");
	SendClientMessage(playerid, COLOR_ORANGE, "Drive on the RIGHT side of the road at all times.");
	SendClientMessage(playerid, COLOR_ORANGE, "Yeld to emergency vehicles.");
	SendClientMessage(playerid, COLOR_ORANGE, "Drive at speeds that are posted in /speedlaws");
	SendClientMessage(playerid, COLOR_ORANGE, "Traffic lights are synced RED=STOP YELLOW=SLOW DOWN GREEN=GO");
	SendClientMessage(playerid, COLOR_ORANGE, "Only follow traffic lights above a junction. (Marked with a solid white line)");
	SendClientMessage(playerid, COLOR_ORANGE, "Remain at a safe distance from other vehicles when driving, atleast 3 car lengths");
	SendClientMessage(playerid, COLOR_ORANGE, "Pedistrians always have the right of way, regardless of the situation.");
	SendClientMessage(playerid, COLOR_ORANGE, "Drive how you would in real life, dont be a moron.");
	SendClientMessage(playerid, COLOR_ORANGE, "If you fail at driving you will be jailed or banned");
	return 1;
}

CMD:speedlaws(playerid, params[]) {
	SendClientMessage(playerid, COLOR_RED, "Speed Enforcement Laws");
	SendClientMessage(playerid, COLOR_ORANGE, "50mph in the City of Los Santos");
	SendClientMessage(playerid, COLOR_ORANGE, "70mph on the country roads, or outer ring of Los Santos");
	SendClientMessage(playerid, COLOR_ORANGE, "90mph on the Highways of Los Santos");
	SendClientMessage(playerid, COLOR_ORANGE, "[ THERE ARE POLICE AND SPEED CAMERAS THAT ENFORCE THESE LAWS ]");
	return 1;
}

/*CMD:hijacktruck(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
     		if(!CheckPointCheck(playerid))
	        {
         		if(GetPVarInt(playerid, "LoadTruckTime") > 0)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are currently loading your Truck!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are already on another delivery, type /cancel truck to cancel that delivery.");
					return 1;
	            }
				if(TruckContents{vehicleid} == 0)
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "This Truck is empty, it does not contain any goods!");
				    return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid, 65, 2439.6140,-2116.7917,13.5469))
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "You can not hijack when that close to the Los Santos Docks!");
					return 1;
				}

				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You are now attempting to hijack the truck, please wait....");

				TogglePlayerControllable(playerid, 0);
				SetPVarInt(playerid, "IsFrozen", 1);

				SetPVarInt(playerid, "LoadTruckTime", 10);
				SetTimerEx("HijackTruck", 1000, 0, "dd", playerid);
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not driving a Los Santos Docks Truck!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Trucker!");
	return 1;
}


forward HijackTruck(playerid);
public HijackTruck(playerid)
{
    new vehicleid = GetPlayerVehicleID(playerid);

	SetPVarInt(playerid, "LoadTruckTime", GetPVarInt(playerid, "LoadTruckTime")-1);
	new string[128];
	format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%d seconds left", GetPVarInt(playerid, "LoadTruckTime"));
	GameTextForPlayer(playerid, string, 1100, 3);
	if(GetPVarInt(playerid, "LoadTruckTime") > 0) SetTimerEx("HijackTruck", 1000, 0, "d", playerid);

	if(GetPVarInt(playerid, "LoadTruckTime") <= 0)
	{
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);
  		DeletePVar(playerid, "LoadTruckTime");

        if(!IsPlayerInVehicle(playerid, vehicleid))
        {
			DeletePVar(playerid, "TruckDeliver");
			TruckUsed[playerid] = INVALID_VEHICLE_ID;
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 			DisablePlayerCheckpoint(playerid);
            SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You failed to hijack the truck.");
			return 1;
        }


		foreach(new i: Player)
		{
  			if(TruckUsed[i] == vehicleid)
  			{
				DeletePVar(i, "LoadTruckTime");
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessageEx(i, COLOR_WHITE, "Your Truck delivery has failed. Your Truck was hijacked.");
			}
		}

  		SetPVarInt(playerid, "TruckDeliver", TruckContents{vehicleid});
  		TruckUsed[playerid] = vehicleid;

		switch(TruckContents{vehicleid}) {
			case 1: {
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with food & beverages.");
				SetPlayerCheckpoint(playerid, 920.421142, -1361.637084, 13.003659, 5);
			}
			case 2:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with food & beverages.");
				SetPlayerCheckpoint(playerid, 1197.744384, -886.373901, 42.819854, 5);
			}
			case 3:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with food & beverages.");
				SetPlayerCheckpoint(playerid, 2111.115722, -1783.749877, 13.188007, 5);
			}
			case 4:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with clothing.");
				SetPlayerCheckpoint(playerid, 2236.051757, -1690.114990, 13.744861, 5);
			}
			case 5:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with clothing.");
				SetPlayerCheckpoint(playerid, 454.168640, -1501.456909, 30.757781, 5);
			}
			case 6:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with clothing.");
				SetPlayerCheckpoint(playerid, 2111.877929, -1218.093139, 23.604995, 5);
			}
			case 7:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with materials.");
				SetPlayerCheckpoint(playerid, 2197.721923, -1975.567260, 13.359717, 5);
			}
			case 8:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with 24/7 items.");
				SetPlayerCheckpoint(playerid, 1339.484497, -1763.289916, 13.332603, 5);
			}
			case 9:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with 24/7 items.");
				SetPlayerCheckpoint(playerid, 1003.885925, -906.400634, 41.986915, 5);
			}
			case 10:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You hijacked a Truck filled with stolen 24/7 items - watch out for law enforcement!");
				SetPlayerCheckpoint(playerid, 653.9890,1690.1085,6.9922, 5);
			}
			case 11 .. 15:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You hijacked a truck filled with weapons - watch out for law enforcement!");
				SetPlayerCheckpoint(playerid, 2781.596435, -2494.261230, 13.457942, 5);

				switch(PlayerInfo[playerid][pTruckSkill]) {
					case 0 .. 50: SetPVarInt(playerid, "TruckDeliver", 11);
					case 51 .. 100: SetPVarInt(playerid, "TruckDeliver", 12);
					case 101 .. 200: SetPVarInt(playerid, "TruckDeliver", 13);
					case 201 .. 400:  SetPVarInt(playerid, "TruckDeliver", 14);
					default: SetPVarInt(playerid, "TruckDeliver", 15);
				}
			}
			case 16 .. 20:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with drugs - watch out for law enforcement!");
				SetPlayerCheckpoint(playerid, 2443.682373, -1426.901489, 23.796508, 5);

				switch(PlayerInfo[playerid][pTruckSkill]) {
					case 0 .. 50: SetPVarInt(playerid, "TruckDeliver", 16);
					case 51 .. 100: SetPVarInt(playerid, "TruckDeliver", 17);
					case 101 .. 200: SetPVarInt(playerid, "TruckDeliver", 18);
					case 201 .. 400:  SetPVarInt(playerid, "TruckDeliver", 19);
					default: SetPVarInt(playerid, "TruckDeliver", 20);
				}
			}
			case 21 .. 25:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You hijacked a truck filled with illegal materials - watch out for law enforcement!");
				SetPlayerCheckpoint(playerid, 2166.486083, -2273.158935, 13.166786, 5);

				switch(PlayerInfo[playerid][pTruckSkill]) {
					case 0 .. 50: SetPVarInt(playerid, "TruckDeliver", 21);
					case 51 .. 100: SetPVarInt(playerid, "TruckDeliver", 22);
					case 101 .. 200: SetPVarInt(playerid, "TruckDeliver", 23);
					case 201 .. 400:  SetPVarInt(playerid, "TruckDeliver", 24);
					default: SetPVarInt(playerid, "TruckDeliver", 25);
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Deliver the goods to the specified location (see checkpoint on radar).");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Watch out for truck hijackers - they can hijack your truck and get away with the goods!");
	}
	return 1;
}*/

CMD:loadtruck(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    if(IsATruckerCar(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        if(!CheckPointCheck(playerid))
	        {
	            if(GetPVarInt(playerid, "LoadTruckTime") > 0)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are currently loading your Truck!");
					return 1;
	            }
	            if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You are already on another delivery, type /cancel truck to cancel that delivery.");
					return 1;
	            }
	            gPlayerCheckpointStatus[playerid] = CHECKPOINT_LOADTRUCK;
	            SetPlayerCheckpoint(playerid,2439.6140,-2116.7917,13.5469, 4);
	            GameTextForPlayer(playerid, "~w~Waypoint set ~r~Los Santos Docks", 5000, 1);
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Pick up some goods to transport with your Truck at Los Santos Docks (see checkpoint on radar).");
	        }
	        else return SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not driving a Los Santos Docks Truck!");
	}
	else return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Trucker!");
	return 1;
}

forward LoadTruck(playerid);
public LoadTruck(playerid)
{
    SetPVarInt(playerid, "LoadTruckTime", GetPVarInt(playerid, "LoadTruckTime")-1);
	new string[128];
	format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%d seconds left", GetPVarInt(playerid, "LoadTruckTime"));
	GameTextForPlayer(playerid, string, 1100, 3);

	if(GetPVarInt(playerid, "LoadTruckTime") > 0) SetTimerEx("LoadTruck", 1000, 0, "d", playerid);

	if(GetPVarInt(playerid, "LoadTruckTime") <= 0)
	{
		DeletePVar(playerid, "LoadTruckTime");
		DeletePVar(playerid, "IsFrozen");
		TogglePlayerControllable(playerid, 1);

  		new vehicleid = GetPlayerVehicleID(playerid);
  		new truckdeliver = GetPVarInt(playerid, "TruckDeliver");
  		TruckContents{vehicleid} = truckdeliver;
  		TruckUsed[playerid] = vehicleid;

		if(truckdeliver == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 812.287231, -1623.678222, 13.546875, 5);
		}
		else if(truckdeliver == 2)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 1204.510375, -920.674499, 43.074016, 5);
		}
		else if(truckdeliver == 3)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with food & beverages.");
			SetPlayerCheckpoint(playerid, 2402.169677, -1502.789306, 23.834865, 5);
		}
		else if(truckdeliver == 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with clothing.");
			SetPlayerCheckpoint(playerid, 2110.254394, -1214.892578, 23.485479, 5);
		}
		else if(truckdeliver == 5)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with clothing.");
			SetPlayerCheckpoint(playerid, 1458.425292, -1140.346069, 23.938444, 5);
		}
		else if(truckdeliver == 6)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with clothing.");
			SetPlayerCheckpoint(playerid, 500.889678, -1352.339843, 15.463395, 5);
		}
		else if(truckdeliver == 7)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with materials.");
			SetPlayerCheckpoint(playerid, 334.012207, -1373.775146, 14.230167, 5);
		}
		else if(truckdeliver == 8)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 1317.785522, -870.413818, 39.089378, 5);
		}
		else if(truckdeliver == 9)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 1342.577026, -1748.498535, 12.934987, 5);
		}
		else if(truckdeliver == 10)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with 24/7 items.");
			SetPlayerCheckpoint(playerid, 653.629699, -579.503051, 15.889705, 5);
		}
		else if(truckdeliver >= 11 && truckdeliver <= 15)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with weapons.");
			SetPlayerCheckpoint(playerid, 1634.834716, 757.830017, 10.820312, 5);
		}
		else if(truckdeliver >= 16 && truckdeliver <= 20)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with drugs.");
			SetPlayerCheckpoint(playerid, 2833.109375, 893.754699, 10.757797, 5);
		}
		else if(truckdeliver >= 21 && truckdeliver <= 25)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"* Your Truck was filled with illegal materials.");
			SetPlayerCheckpoint(playerid, -510.522918, -501.250030, 25.523437, 5);
		}

		SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Deliver the goods to the specified location (see checkpoint on radar).");
		SendClientMessageEx(playerid, COLOR_REALRED, "WARNING: Watch out for truck hijackers, they can hijack your truck and get away with the goods.");
		if(truckdeliver >= 11)
		{
			SendClientMessageEx(playerid, COLOR_REALRED, "WARNING #2: You are transporting illegal goods so watch out for law enforcement.");
		}
		SetPVarInt(playerid, "tpTruckRunTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPTRUCKRUNTIMER);
	}
	return 1;
}

CMD:plantseeds(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4) {
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
	}
 	else if(PlayerInfo[playerid][pWSeeds] > 0) {
		if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]))
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "You already have a plant growing." );
		    return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_PASSENGER) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot plant seeds while inside a vehicle!");

		new
			szMessage[48];

		GetPlayerPos(playerid, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2]);
		PlayerInfo[playerid][pWeedPos][2] -= 1.5;

        ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
		SendClientMessageEx(playerid, COLOR_GREEN, "You have planted some weed. It will take around 20-45 minutes to grow.");

		PlayerInfo[playerid][pWeedInt] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pWeedVW] = GetPlayerVirtualWorld(playerid);
		PlayerInfo[playerid][pWeedGrowth] = 0;
		PlayerInfo[playerid][pWSeeds]--;
		PlayerInfo[playerid][pWeedObject] = CreateDynamicObject(3409, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2], 0.0, 0.0, 0.0, PlayerInfo[playerid][pWeedVW], PlayerInfo[playerid][pWeedInt]);
		format(szMessage, sizeof(szMessage), "* %s plants some weed.", GetPlayerNameEx(playerid));
		ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough seeds to plant weed - head to the drug house and pick up some seeds (/getseeds).");
	return 1;
}

CMD:getseeds(playerid, params[])
{
    if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	if(PlayerInfo[playerid][pWSeeds] > 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You already have a bag of seeds, use them first.");
	    return 1;
	}
	if(GetPlayerCash(playerid) < 10000)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, " You do not have $10,000.");
	    return 1;
	}
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
  	{
	   	if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
	   	{
			mypoint = i;
		}
   	}
   	if (mypoint == -1)
   	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Drug House!");
		return 1;
   	}
	if(Points[mypoint][Stock] < 1 && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This drug house doesn't have any seeds.");
	if(PlayerInfo[playerid][pDonateRank] < 1)
	{
		new string[32];
		Points[mypoint][Stock] -= 1;
		format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[mypoint][Stock]);
		UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
	}
	PlayerInfo[playerid][pWSeeds] += 3;
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " You have purchased a bag of Pot Seeds from the Drug House. ");
	GivePlayerCash(playerid, -10000);
	GameTextForPlayer(playerid, "~r~-$10000", 3000, 1 );
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] += 2500;
		}
	}
	return 1;
}

CMD:adestroyplant(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adestroyplant [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				szMessage[47 + MAX_PLAYER_NAME];

			format(szMessage, sizeof(szMessage), "You have destroyed %s's weed plant (%i grams).", GetPlayerNameEx(iTargetID), PlayerInfo[iTargetID][pWeedGrowth]);
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);

			format(szMessage, sizeof(szMessage), "Administrator %s has destroyed your weed plant (%i grams).", GetPlayerNameEx(playerid), PlayerInfo[iTargetID][pWeedGrowth]);
			SendClientMessageEx(iTargetID, COLOR_GREY, szMessage);

			if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject])) {
				DestroyDynamicObject(PlayerInfo[playerid][pWeedObject]);
				PlayerInfo[playerid][pWeedObject] = 0;
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorized to use this command.");
	return 1;
}

CMD:destroyplant(playerid, params[]) {
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5) {
		foreach(new i: Player) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 2.5, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
			if(GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {

				new
					szMessage[128];

				ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
				format(szMessage, sizeof(szMessage), "* You seized a marijuana plant weighing %d grams.", PlayerInfo[i][pWeedGrowth]);
				SendClientMessageEx(playerid, COLOR_GREY, szMessage);
				format(szMessage, sizeof(szMessage), "* %s seizes the weed plant.", GetPlayerNameEx(playerid), GetPlayerNameEx(i));
				ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				DestroyDynamicObject(PlayerInfo[i][pWeedObject]);
				PlayerInfo[i][pWeedObject] = 0;
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at a plant.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:checkweed(playerid, params[]) {
	if(IsValidDynamicObject(PlayerInfo[playerid][pWeedObject]) && GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[playerid][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, PlayerInfo[playerid][pWeedPos][0], PlayerInfo[playerid][pWeedPos][1], PlayerInfo[playerid][pWeedPos][2])) {
			if(PlayerInfo[playerid][pWeedGrowth] > 10) {

				new
					szMessage[66 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage), "Your plant currently carries %i grams - use /pickweed to claim it.", PlayerInfo[playerid][pWeedGrowth]);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
			else SendClientMessageEx(playerid, COLOR_YELLOW, "Your plant isn't ready to be picked yet.");
			return 1;
		}
	}
	foreach(new i: Player) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt]) {
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2])) {
			if(PlayerInfo[i][pWeedGrowth] > 10) {

				new
					szMessage[66 + MAX_PLAYER_NAME];

				format(szMessage, sizeof(szMessage), "This plant currently carries %i grams - use /pickweed to claim it.", PlayerInfo[i][pWeedGrowth]);
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
			else SendClientMessageEx(playerid, COLOR_YELLOW, "This plant isn't ready to be picked yet.");
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_GREY, "You are not at a plant.");
}

CMD:pickweed(playerid, params[])
{
	foreach(new i: Player) if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && IsPlayerInRangeOfPoint(playerid, 2.5, PlayerInfo[i][pWeedPos][0], PlayerInfo[i][pWeedPos][1], PlayerInfo[i][pWeedPos][2]))
	{
	    if(GetPlayerVirtualWorld(playerid) == PlayerInfo[i][pWeedVW] && GetPlayerInterior(playerid) == PlayerInfo[i][pWeedInt])
		{
			if(PlayerInfo[i][pWeedGrowth] > 10)
			{
				SetPVarInt(playerid, "Special_PickWeedID", i);
				TransferStorage(playerid, -1, -1, -1, 2, PlayerInfo[i][pWeedGrowth], -1, 3);
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "This plant is not ready to be picked yet.");
			return 1;
		}
	}
	return SendClientMessageEx(playerid, COLOR_GREY, "You are not at a plant.");
}

CMD:levelones(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
   		SendClientMessageEx(playerid,COLOR_WHITE,"Listing all level ones...");

		new
			szNoobs[14 + MAX_PLAYER_NAME];

    	foreach(new i: Player) if(PlayerInfo[i][pLevel] == 1) {
			format(szNoobs, sizeof(szNoobs), "* %s (ID %i)", GetPlayerNameEx(i), i);
			SendClientMessageEx(playerid, COLOR_WHITE, szNoobs);
		}
	}
	return 1;
}

CMD:paused(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

    	new
			szMessage[42 + MAX_PLAYER_NAME];

	    SendClientMessageEx(playerid,COLOR_WHITE,"Listing all paused players...");
	    foreach(new i: Player) if(playerTabbed[i] != 0) {

			if(playerTabbed[i] > 60) format(szMessage, sizeof(szMessage), "* %s (ID %d), tabbed for %d minutes.", GetPlayerNameEx(i), i, playerTabbed[i] / 60);
			else format(szMessage, sizeof(szMessage), "* %s (ID %d), tabbed for %d seconds.", GetPlayerNameEx(i), i, playerTabbed[i]);

			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessageEx(playerid,COLOR_RED, szMessage);
			else SendClientMessageEx(playerid,COLOR_GREY, szMessage);
  		}
   	}
    else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:afk(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

    	new
			szMessage[36 + MAX_PLAYER_NAME];

	    SendClientMessageEx(playerid,COLOR_WHITE,"Listing all AFK players...");
	    foreach(new i: Player) if(playerAFK[i] != 0 && playerAFK[i] > 60) {
			format(szMessage,sizeof(szMessage),"* %s (ID %d), AFK for %d minutes.", GetPlayerNameEx(i), i, playerAFK[i] / 60);
			if(PlayerInfo[i][pAdmin] >= 2) SendClientMessageEx(playerid,COLOR_RED,szMessage);
			else SendClientMessageEx(playerid,COLOR_GREY,szMessage);
  		}
   	}
    else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:vipnum(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2549.548095, 1404.047729, 7699.584472 ))
    {
    	SendClientMessageEx(playerid, COLOR_GREY, "You are not at the VIP phone number changing station!");
     	return 1;
   	}
    if(PlayerInfo[playerid][pDonateRank] < 2)
    {
    	SendClientMessageEx(playerid, COLOR_GRAD1, "You must be a Silver VIP or higher to use this function.");
     	return 1;
	}
 	ShowPlayerDialog(playerid, VIPNUMMENU, DIALOG_STYLE_LIST, "VIP Phone Number Changes","-2 digit - 30 percent of wealth or 300k$\n-3 digit - 20 percent of wealth or 200k$\n-4 Digit - 10 percent of wealth or 50k$", "Purchase", "Cancel");
	return 1;
}

CMD:safebalance(playerid, params[]) {
	if(PlayerInfo[playerid][pFMember] < 255) {
		if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyUSafe] < 1) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Your family doesn't have a safe.");
		}
		else
		{
			new string[128];

			new weaponsinlocker;
			for(new s = 0; s < 10; s++)
			{
				if(FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyGuns][s] != 0)
				{
					weaponsinlocker++;
				}
			}

			format(string, sizeof(string), " Safe: %s | Gunlockers: %d/10 | Cash: $%d | Pot: %d | Crack: %d | Materials: %d", FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyName], weaponsinlocker, FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCash], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyPot], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyCrack], FamilyInfo[PlayerInfo[playerid][pFMember]][FamilyMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	return 1;
}

CMD:safehelp(playerid, params[])
{
    SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE, "SAFE HELP: Type a command for more information.");
	SendClientMessageEx(playerid, COLOR_WHITE, "SAFE: /safebalance /safedeposit /safewithdraw /fstoregun /fgetgun.");
	return 1;
}

CMD:shopplate(playerid, params[])
{
    if(PlayerInfo[playerid][pShopTech])
	{
		new iVehType, iVehIndex, iTargetOwner, carid, orderid, plate[32];
        if(sscanf(params, "dds[32]", carid, orderid, plate))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopplate [carid] [orderid] [plate/remove]");
		    SendClientMessageEx(playerid, COLOR_GREY, "COLORS: (black/white/blue/red/green/purple/yellow/lightblue/navy/beige/darkgreen/darkblue/darkgrey/gold/brown/darkbrown/darkred");
			SendClientMessageEx(playerid, COLOR_GREY, "/maroon/pink) USAGE: (red)Hi(white)how are you? NOTE: Each color counts for 8 characters");
			return 1;
		}

		foreach(new i: Player)
		{
			iVehIndex = GetPlayerVehicle(i, carid);
			if(iVehIndex != -1)
			{
				iVehType = 1;
				iTargetOwner = i;
				break;
			}
		}
		if(iVehType == 1)
		{
		    format(plate, sizeof(plate), "%s", str_replace("(black)", "{000000}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(white)", "{FFFFFF}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(blue)", "{0000FF}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(red)", "{FF0000}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(green)", "{008000}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(purple)", "{800080}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(yellow)", "{FFFF00}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(lightblue)", "{ADD8E6}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(navy)", "{000080}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(beige)", "{F5F5DC}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkgreen)", "{006400}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkblue)", "{00008B}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkgrey)", "{A9A9A9}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(gold)", "{FFD700}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(brown)", "{A52A2A}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkbrown)", "{5C4033}", plate));
		    format(plate, sizeof(plate), "%s", str_replace("(darkred)", "{8B0000}", plate));

		    new string[128], Float:X, Float:Y, Float:Z;
		    GetVehiclePos(carid, X, Y, Z);
		    if(strcmp(plate, "remove", true) == 0)
		    {
		        PlayerVehicleInfo[iTargetOwner][iVehIndex][pvPlate] = 0;
		    }
		    else
		    {
				format(PlayerVehicleInfo[iTargetOwner][iVehIndex][pvPlate], 32, "%s", plate);
				SetVehicleToRespawn(carid);
				SetVehiclePos(carid, X, Y, Z);
			}

			g_mysql_SaveVehicle(iTargetOwner, iVehIndex);

			format(string, sizeof(string), "Plate set on %s (ID: %d) %s (ID: %d)", GetPlayerNameEx(iTargetOwner), iTargetOwner, GetVehicleName(carid), carid);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "(OrderID: %d) Plate: %s", orderid, plate);
			SendClientMessage(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s set %s %s (Slot %d) plate to %s (order %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), GetVehicleName(carid), iVehIndex, plate, orderid);
			Log("logs/shoplog.log", string);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "This is not a player owned vehicle, you cannot give it a custom plate.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:shopcar(playerid, params[]) {
	if(PlayerInfo[playerid][pShopTech]) {

		new
			szInvoice[32],
			iColors[2],
			iTargetID,
			iModelID;

		if(sscanf(params, "uiiis[32]", iTargetID, iModelID, iColors[0], iColors[1], szInvoice)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopcar [player] [model] [color 1] [color 2] [invoice #]");
		}
		else if(!(400 <= iModelID <= 611)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
		else if(IsATrain(iModelID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		}
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		}
		else if(!vehicleCountCheck(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "That player can't have more vehicles - they own too many.");
		}
		else if(!vehicleSpawnCountCheck(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "That player has too many vehicles spawned - they must store one first.");
		}
		else {

			new
				Float: arr_fPlayerPos[4],
				szMessage[84];

			GetPlayerPos(iTargetID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2]);
			GetPlayerFacingAngle(iTargetID, arr_fPlayerPos[3]);
			CreatePlayerVehicle(iTargetID, GetPlayerFreeVehicleId(iTargetID), iModelID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2], arr_fPlayerPos[3], iColors[0], iColors[1], 2000000);

			format(szMessage, sizeof(szMessage), "You have successfully created a %s for %s (invoice %s).", VehicleName[iModelID - 400], GetPlayerNameEx(iTargetID), szInvoice);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

			format(szMessage, sizeof(szMessage), "%s created a %s (%i) for %s (invoice %s).", GetPlayerNameEx(playerid), VehicleName[iModelID - 400], iModelID, GetPlayerNameEx(iTargetID), szInvoice);
			Log("logs/shoplog.log", szMessage);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
    return 1;
}

CMD:destroypvehicle(playerid, params[])
{
	new string[128], giveplayerid, vehicleid;
	if(sscanf(params, "ud", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroypvehicle [player] [vehicleid]");

    if (PlayerInfo[playerid][pAdmin] < 4)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
   	}

	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has destroyed %s's %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetVehicleName(vehicleid));
	ABroadCast(COLOR_LIGHTRED,string, 4);

	format(string, sizeof(string), "%s has destroyed %s's %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), GetVehicleName(vehicleid));
	Log("logs/playervehicle.log", string);

	new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That player doesn't own that vehicle.");
	DestroyPlayerVehicle(giveplayerid, playervehicleid);
	return 1;
}

CMD:shopcardel(playerid, params[])
{
	new string[128], invoicenum[32], giveplayerid, vehicleid;
	if(sscanf(params, "uds[32]", giveplayerid, vehicleid, invoicenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopcardel [player] [vehicleid] [invoice #]");

    if (PlayerInfo[playerid][pShopTech] < 1)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
    }
	new playervehicleid = GetPlayerVehicle(giveplayerid, vehicleid);
	if(playervehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That player doesn't own that vehicle.");

	DestroyPlayerVehicle(giveplayerid, playervehicleid);
	format(string, sizeof(string), "[SHOPCARDEL] %s deleted vehicle ID %d - Invoice %s for %s", GetPlayerNameEx(playerid), playervehicleid, invoicenum, GetPlayerNameEx(giveplayerid));
 	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:creategvehicle(playerid, params[])
{
	new string[128], family, modelid, color1, color2;
	if(sscanf(params, "dddd", family, modelid, color1, color2)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /creategvehicle [familyid] [modelid] [color 1] [color 2]");

    if (PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] != 1)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
    }
   	if(family < 1 || family > MAX_FAMILY) {
		format(string, sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
  		SendClientMessageEx(playerid, COLOR_GREY, string);
  		return 1;
    }
	family -= 1;
	if(FamilyInfo[family][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   That FamilyNr hasn't been Taken yet!");
		return 1;
	}
	if(color1 < 0 || color1 > 126) { SendClientMessageEx(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 126 !"); return 1; }
	if(color2 < 0 || color2 > 126) { SendClientMessageEx(playerid, COLOR_GREY, "   Color Number can't be below 0 or above 126 !"); return 1; }
	if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
	new gangvehicleid = GetGangFreeVehicleId(family);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That family can't have more cars.");
	new Float:X,Float:Y,Float:Z;
 	GetPlayerPos(playerid,X,Y,Z);
  	new Float:Angle;
   	GetPlayerFacingAngle(playerid,Angle);
   	new car = CreateGangVehicle(family, gangvehicleid, modelid, X, Y, Z, Angle, color1, color2, 0);
   	if(car == INVALID_VEHICLE_ID)
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Something went wrong and the car didn't got created.");
	}
 	else
  	{
   		format(string, sizeof(string), " Vehicle successfully created with ID %d.", car);
    	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	    SaveFamiliesHQ();
	}
	return 1;
}

CMD:destroygvehicle(playerid, params[])
{
	new family, vehicleid, string[128];
	if(sscanf(params, "dd", family, vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroygvehicle [familyid] [vehicleid]");

    if (PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pGangModerator] != 1)
    {
    	SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
     	return 1;
    }
    if(family < 1 || family > MAX_FAMILY) {
		format(string, sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}
	family -= 1;
	new gangvehicleid = GetGangVehicle(family, vehicleid);
	if(gangvehicleid == -1) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: That family doesn't own that vehicle.");
	DestroyGangVehicle(family, gangvehicleid);
	SaveFamiliesHQ();
	return 1;
}

CMD:buylock(playerid, params[])
{
    if(IsAt247(playerid))
	{
	    ShowPlayerDialog(playerid, DIALOG_CDLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Lock		$10000\nElectric Lock		$500000\nIndustrial Lock		$50000", "Buy", "Cancel");
		return 1;
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7 !");
	}
	return 1;
}

CMD:gbuylock(playerid, params[])
{
    if(!IsAt247(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7 !");
		return 1;
	}
	if(PlayerInfo[playerid][pFMember] != 255 && PlayerInfo[playerid][pRank] >= 6)
	{
		ShowPlayerDialog(playerid, DIALOG_CDGLOCKBUY, DIALOG_STYLE_LIST, "24/7", "Alarm Lock		$10000\nElectric Lock		$500000\nIndustrial Lock		$50000", "Buy", "Cancel");
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be in a family and have rank 6 to use this command.");
	}
	return 1;
}

CMD:random(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1338) {

		new
			iHours,
			iBroadcast;

		if(sscanf(params, "dd", iHours, iBroadcast)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /random [hours] [broadcast]");
		}

		new
			arr_Winners[MAX_PLAYERS],
			iWinCount;

		foreach(new i: Player) {
			if(SeeSpecialTokens(i, iHours)) arr_Winners[iWinCount++] = i;
		}
		if(iWinCount > 0) {

			new
				iWinrar = arr_Winners[random(iWinCount)],
				szMessage[48 + MAX_PLAYER_NAME];

			if(iBroadcast == 1) {
				format(szMessage, sizeof(szMessage), "%s was just randomly selected! Congratulations!", GetPlayerNameEx(iWinrar));
				SendClientMessageToAllEx(COLOR_WHITE, szMessage);
			}
			else {
				format(szMessage, sizeof(szMessage), "%s (ID %d) was randomly selected.", GetPlayerNameEx(iWinrar), iWinrar);
				ABroadCast(COLOR_YELLOW, szMessage, 1338);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Nobody online can win!");
	}
	return 1;
}

CMD:vrandom(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 1338) {

		new
			iHours,
			iBroadcast;

		if(sscanf(params, "dd", iHours, iBroadcast)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vrandom [hours] [broadcast]");
		}

		new
			arr_Winners[MAX_PLAYERS],
			iWinCount;

		foreach(new i: Player) {
			if(SeeSpecialTokens(i, iHours) && PlayerInfo[i][pDonateRank] > 0) arr_Winners[iWinCount++] = i;
		}
		if(iWinCount > 0) {

			new
				iWinrar = arr_Winners[random(iWinCount)],
				szMessage[48 + MAX_PLAYER_NAME];

			if(iBroadcast == 1) {
				format(szMessage, sizeof(szMessage), "%s was just randomly selected! Congratulations!", GetPlayerNameEx(iWinrar));
				SendClientMessageToAllEx(COLOR_WHITE, szMessage);
			}
			else {
				format(szMessage, sizeof(szMessage), "%s (ID %d) was randomly selected.", GetPlayerNameEx(iWinrar), iWinrar);
				ABroadCast(COLOR_YELLOW, szMessage, 1338);
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "Nobody online can win!");
	}
	return 1;
}

CMD:specreset(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
		SendClientMessageEx(playerid, COLOR_GRAD2, "Resetting the special timer must be done through FTP, delete all the files in /stokens/ folder");
	}
	return 1;
}

CMD:pausespec(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
    	if(SpecTimer == 1)
     	{
     		SpecTimer = 0;
      		new sString[41 + MAX_PLAYER_NAME];
			format( sString, sizeof( sString ), "AdmCmd: %s has paused the special timer.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1338 );
		}
		else
		{
  			SpecTimer = 1;
	    	new sString[41 + MAX_PLAYER_NAME];
    		format( sString, sizeof( sString ), "AdmCmd: %s has enabled the special timer.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1338);
		}
	}
	return 1;
}

CMD:gifts(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
     	if(Gifts == 0)
     	{
           	Gifts = 1;
           	new sString[41 + MAX_PLAYER_NAME];
			format( sString, sizeof( sString ), "AdmCmd: %s has enabled the /gift command.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
		}
		else
		{
		    Gifts = 0;
		    new sString[41 + MAX_PLAYER_NAME];
	   		format( sString, sizeof( sString ), "AdmCmd: %s has disabled the /gift command.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
		}
	}
	return 1;
}

CMD:vipgifts(playerid, params[])
{
	new string[128];

    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
     	if(VIPGifts == 0)
     	{
           	VIPGifts = 1;
           	new sString[128];
			format( sString, sizeof( sString ), "%s would like for you to come to Club VIP for free gifts and great times [20 minutes remains]", GetPlayerNameEx(playerid));
			SendVIPMessage(COLOR_LIGHTGREEN, sString);
			VIPGiftsTimeLeft = 20;
			format(VIPGiftsName, sizeof(VIPGiftsName), "%s", GetPlayerNameEx(playerid));
		}
		else
		{
		    VIPGifts = 0;
		    new sString[128];
	   		format( sString, sizeof( sString ), "AdmCmd: %s has disabled the /getgift command early", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, sString, 1337 );
			format(string, sizeof(string), "Club VIP is no longer giving away free gifts. Thanks for coming!", VIPGiftsName, VIPGiftsTimeLeft);
			SendVIPMessage(COLOR_LIGHTGREEN, string);
			VIPGiftsTimeLeft = 0;
		}
	}
	return 1;
}

CMD:xmas(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1338)
   	{
    	if(XMASGifts == 0)
     	{
     		XMASGifts = 1;
			new string[128];
			format( string, sizeof( string ), "%s would like for you to come to Pershing Square for free gifts and great times", GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTGREEN, string);
		}
		else
		{
  			XMASGifts = 0;
			new string[128];
   			format( string, sizeof( string ), "AdmCmd: %s has disabled the /getgift command", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 1337 );
			format(string, sizeof(string), "Pershing Square is no longer giving away free gifts. Thanks for coming!", VIPGiftsName, VIPGiftsTimeLeft);
			SendClientMessageToAllEx(COLOR_LIGHTGREEN, string);
		}
	}
	return 1;
}

CMD:resetgift(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /resetgift [player]");

    if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(IsPlayerConnected(giveplayerid))
		{
	   		if(PlayerInfo[giveplayerid][pGiftTime] > 0)
    		{
				new string[128];
	    	    PlayerInfo[giveplayerid][pGiftTime] = 0;
	     	    format(string, sizeof(string), "%s's gift timer has been reset", GetPlayerNameEx(giveplayerid));
	     	    SendClientMessageEx(playerid, COLOR_YELLOW, string);
   			}
   			else
   			{
	   		    SendClientMessageEx(playerid, COLOR_GRAD2, "That players gift timer is already on 0!");
			}
		}
		else
		{
   			SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
		}
	}
	return 1;
}

CMD:giftnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
       	new range;
		if(sscanf(params, "d", range)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giftnear [range]");

		if(range < 1)
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "The range can not be lower than 1.");
			return 1;
		}

        new string[128];
        new count;
        foreach(new i: Player)
		{
            if(ProxDetectorS(range, playerid, i))
			{
 			    if(PlayerInfo[i][pGiftTime] <= 0)
 			    {
					GiftPlayer(playerid, i);
                	count++;
				}
            }
        }
        format(string, sizeof(string), "You have gifted everyone (%d) nearby.", count);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    }
    return 1;
}

CMD:resetgiftall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128];
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has reset everyone's gift timer.", GetPlayerNameEx(playerid));
		ABroadCast(COLOR_YELLOW, string, 2);
		foreach(new i: Player)
		{
  			PlayerInfo[i][pGiftTime] = 0;
		}
	}
	return 1;
}

CMD:gift(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gift [player]");

    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
 		if(Gifts == 1 || PlayerInfo[playerid][pAdmin] >= 1337)
   		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    if(PlayerInfo[giveplayerid][pGiftTime] > 0)
	           	{
	               	SendClientMessageEx(playerid, COLOR_GRAD2, "The player has already got a gift in the last 5 hours !");
					return 1;
	           	}
			    GiftPlayer(playerid, giveplayerid);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
			}
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, "This command is not activated!");
		}
	}
	return 1;
}

CMD:setstpay(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    new string[128];
		if(sscanf(params, "f", ShopTechPay))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Usage: /setstpay [value]");
			format(string, sizeof(string), "Current Pay: $%.2f", ShopTechPay);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		format(string, sizeof(string), "UPDATE `misc` SET `ShopTechPay` = '%.2f'", ShopTechPay);
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "i", SENDDATA_THREAD);

		format(string, sizeof(string), "Shop Tech Pay set to $%.2f", ShopTechPay);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:setst(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /setst [playerid]");
	    if(PlayerInfo[giveplayerid][pAdmin] > 2)
	    {
		    if(PlayerInfo[giveplayerid][pShopTech] == 0)
		    {
		        PlayerInfo[giveplayerid][pShopTech] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "You have made them a Shop Tech");
		    }
		    else
		    {
		        PlayerInfo[giveplayerid][pShopTech] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have taken their Shop Tech");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "They are not an admin!");
		}
	}
	return 1;
}

CMD:setba(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /setba [playerid]");
	    if(PlayerInfo[giveplayerid][pAdmin] > 2)
	    {
		    if(PlayerInfo[giveplayerid][pBanAppealer] == 0)
		    {
		        PlayerInfo[giveplayerid][pBanAppealer] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "You have made them a Ban Appealer");
		    }
		    else
		    {
		        PlayerInfo[giveplayerid][pBanAppealer] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have taken their Ban Appealer");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "They are not an admin!");
		}
	}
	return 1;
}

CMD:setgmod(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /setgmod [playerid]");
	    if(PlayerInfo[giveplayerid][pAdmin] > 2)
	    {
		    if(PlayerInfo[giveplayerid][pGangModerator] == 0)
		    {
		        PlayerInfo[giveplayerid][pGangModerator] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "You have made them a Gang Mod.");
		    }
		    else
		    {
		        PlayerInfo[giveplayerid][pGangModerator] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have taken their Gang Mod.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "They are not an admin!");
		}
	}
	return 1;
}

CMD:setfacmod(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    new giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessage(playerid, COLOR_GREY, "USAGE: /setfacmod [playerid]");
	    if(PlayerInfo[giveplayerid][pAdmin] > 2)
	    {
		    if(PlayerInfo[giveplayerid][pFactionModerator] == 0)
		    {
		        PlayerInfo[giveplayerid][pFactionModerator] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "You have made them a Faction Mod.");
		    }
		    else
		    {
		        PlayerInfo[giveplayerid][pFactionModerator] = 0;
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have taken their Faction Mod.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "They are not an admin!");
		}
	}
	return 1;
}

CMD:resetstpay(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    if(GetPVarInt(playerid, "resetstpay"))
	    {
	        mysql_function_query(MainPipeline, "UPDATE `shoptech` SET `total` = 0, dtotal = 0", false, "OnQueryFinish", "i", SENDDATA_THREAD);
            SendClientMessage(playerid, COLOR_WHITE, "Shop Tech Payments Reset");
	        DeletePVar(playerid, "resetstpay");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "WARNING: This command will reset the shop tech payment counters");
		    SendClientMessage(playerid, COLOR_WHITE, "This action cannot be undone, ARE YOU SURE YOU WISH TO CONTINUE?");
		    SendClientMessage(playerid, COLOR_WHITE, "Type this command again to proceed");
		    SetPVarInt(playerid, "resetstpay", 1);
		}
	}
	return 1;
}

CMD:giftall(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
    	if(GiftAllowed || PlayerInfo[playerid][pAdmin] >= 99999)
     	{
			new string[128];
      		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just sent a gift to all players.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW, string, 2);
			GiftAllowed = 0;
			foreach(new i: Player)
			{
			    GiftPlayer(playerid, i);
			}
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GRAD2, "This command has already been used, wait until the next paycheck!");
		}
	}
	return 1;
}

CMD:giftreset(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giftreset [player]");

    if(PlayerInfo[playerid][pAdmin] >= 1338)
    {
		if(giveplayerid != INVALID_PLAYER_ID)
		{
		    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has reset %s's gift timer.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 2);
		    if(PlayerInfo[giveplayerid][pGiftTime] > 0)
           	{
            	PlayerInfo[giveplayerid][pGiftTime] = 0;
				return 1;
   			}
		}
		else
		{
  			SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected.");
		}
	}
	return 1;
}

CMD:jobhelp(playerid, params[]) {
    return ShowPlayerDialog(playerid, JOBHELPMENU, DIALOG_STYLE_LIST, "Which job do you need help with?","Detective\nLawyer\nWhore\nDrug Dealer\nMechanic\nBodyguard\nArms Dealer\nBoxer\nTaxi Driver\nDrug Smuggling\nCraftsman\nBartender\nTrucker\nPizza Boy", "Select", "Cancel");
}


CMD:lock(playerid, params[])
{
   	if(PlayerInfo[playerid][pLock] == 1)
	{
 		if(IsPlayerInAnyVehicle(playerid))
   		{
			if(PlayerInfo[playerid][pLockCar] != GetPlayerVehicleID(playerid) && PlayerInfo[playerid][pLockCar] != INVALID_VEHICLE_ID) return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a lock for this vehicle!");
   			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Can't lock vehicles as a passenger!");
			if(GetCarDealershipVehicleId(GetPlayerVehicleID(playerid)) != -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Can't lock dealership vehicles!");
   			new v = -1;
   			foreach(new i: Player)
   			{
	    		v = GetPlayerVehicle(i, GetPlayerVehicleID(playerid));
		    	if(v != -1) return SendClientMessageEx(playerid, COLOR_GRAD2, "Can't lock player-owned vehicles!");
			}
   			if(PlayerInfo[playerid][pLockCar] == INVALID_VEHICLE_ID) PlayerInfo[playerid][pLockCar] = GetPlayerVehicleID(playerid);
      		if(LockStatus{GetPlayerVehicleID(playerid)} == 0)
        	{
				LockStatus{GetPlayerVehicleID(playerid)} = 1;
    			GameTextForPlayer(playerid, "~r~locked", 1000, 6);
       			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
          		vehicle_lock_doors(PlayerInfo[playerid][pLockCar]);
      		}
        	else
	        {
				LockStatus{GetPlayerVehicleID(playerid)} = 0;
   				vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
      			GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
        		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
 	        }
   		}
	    else
	    {
     		new Float: x, Float: y, Float: z;
       		GetVehiclePos(PlayerInfo[playerid][pLockCar], x, y, z);
        	if(IsPlayerInRangeOfPoint(playerid, 4.0, x, y, z))
        	{
         		if(LockStatus{PlayerInfo[playerid][pLockCar]} == 0)
           		{
            		vehicle_lock_doors(PlayerInfo[playerid][pLockCar]);
            		GameTextForPlayer(playerid, "~r~locked", 1000, 6);
	            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
 	            }
 	            else
 	            {
	            	vehicle_unlock_doors(PlayerInfo[playerid][pLockCar]);
	            	GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
	            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
          		}
   	        }
   	        else
   	        {
            	SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near your vehicle!");
	            return 1;
   	        }
       	}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You do not have a lock!");
		return 1;
 	}
	return 1;
}


CMD:vstorage(playerid, params[])
{
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
				format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s (spawned)", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nEmpty");
	}
	ShowPlayerDialog(playerid, VEHICLESTORAGE, DIALOG_STYLE_LIST, "Vehicle storage", vstring, "(De)spawn", "Cancel");
	return 1;
}

CMD:removepvehicle(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /removepvehicle [player]");
			return 1;
		}
		new vstring[1024];
		for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
			if((iModelID = PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400) >= 0) {
				if(PlayerVehicleInfo[giveplayerid][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
				}
				else if(PlayerVehicleInfo[giveplayerid][i][pvDisabled]) {
					format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
				}
				else if(!PlayerVehicleInfo[giveplayerid][i][pvSpawned]) {
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
				}
				else format(vstring, sizeof(vstring), "%s\n%s (spawned)", vstring, VehicleName[iModelID]);
			}
			else strcat(vstring, "\nEmpty");
		}
		new string[64];
		SetPVarInt(playerid, "vehcheck_giveplayerid", giveplayerid);
		format(string, sizeof(string), "%s's Vehicle List", GetPlayerNameEx(giveplayerid));
		ShowPlayerDialog(playerid, ADMIN_VEHCHECK, DIALOG_STYLE_LIST, string, vstring, "Delete Car", "Cancel");
	}
	return 1;
}

CMD:rpv(playerid, params[]) {
	return cmd_removepvehicle(playerid, params);
}

CMD:trackcar(playerid, params[])
{
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
				format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nEmpty");
	}
	ShowPlayerDialog(playerid, TRACKCAR, DIALOG_STYLE_LIST, "Vehicle GPS Tracking", vstring, "Track", "Cancel");
	return 1;
}

CMD:gtrackcar(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255) return SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be in a family for this command.");
	new vstring[1024];
	for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	{
		if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
		{
		    if(PlayerInfo[playerid][pAdmin] >= 2)
		    {
		        format(vstring, sizeof(vstring), "%s\n%s (ID: %d)", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvModelId] - 400], FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId]);
		    }
		    else
		    {
				format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvModelId] - 400]);
			}
		}
		else if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvImpounded] == 1) {
			format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvModelId] - 400]);
		}
		else
		{
			format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
		}
	}
	return ShowPlayerDialog(playerid, GTRACKCAR, DIALOG_STYLE_LIST, "OnStar Vehicle GPS Tracking", vstring, "Track", "Cancel");
}

CMD:makeadmin(playerid, params[])  {
	if(PlayerInfo[playerid][pAdmin] >= 1338) {

		new
			iAdminValue,
			iTargetID;

		if(sscanf(params, "ui", iTargetID, iAdminValue)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makeadmin [player] [level]");
		}
		else if(IsPlayerConnected(iTargetID)) {
			if(PlayerInfo[iTargetID][pHelper] >= 1) {
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make community advisors admins!");
			}
				if(iAdminValue < 0 || iAdminValue > 1338 && PlayerInfo[playerid][pAdmin] <= 13338) {
				new
					szMessage[47 + (MAX_PLAYER_NAME * 2)];
					new szlogmessage[512];
					format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has tried to give %s (%d), for %s.", GetPlayerNameEx(playerid), AdminNameLogin(iAdminValue), iAdminValue, GetPlayerNameEx(iTargetID));
					ABroadCast(COLOR_LIGHTRED,szMessage, 2);
					format(szlogmessage, sizeof(szlogmessage), "%s Attempted to give %s %s (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), AdminNameLogin(iAdminValue), iAdminValue);
					Log("logs/adminranks.log", szlogmessage);
					format(szMessage, sizeof(szMessage), "ERROR: You were unable to set %s (%d) for %s", AdminNameLogin(iAdminValue),iAdminValue,GetPlayerNameEx(iTargetID));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
					PlayerInfo[playerid][pInfractions] += 1;
					format(szlogmessage, sizeof(szlogmessage), "AdmCmd: %s has been auto Infracted, reason: Tried to give %s (%d), for %s.", GetPlayerNameEx(playerid), AdminNameLogin(iAdminValue), iAdminValue, GetPlayerNameEx(iTargetID));
					Log("logs/infract.log", szlogmessage);
					}
			if(PlayerInfo[iTargetID][pMainOwner] >= 100) {
				new
					szMessage[47 + (MAX_PLAYER_NAME * 2)];
					new szlogmessage[512];
				format(szMessage, sizeof(szMessage), "You are unable to change %s's Rank.", GetPlayerNameEx(iTargetID),iAdminValue);
				SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
				format(szlogmessage, sizeof(szlogmessage), "%s Attempted to change %s's rank to %s (%d) but was prevent by the Protection System.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), AdminNameLogin(iAdminValue), iAdminValue);
				Log("logs/adminranks.log", szlogmessage);
				PlayerInfo[playerid][pInfractions] += 1;
				format(szlogmessage, sizeof(szlogmessage), "AdmCmd: %s has been auto Infracted, reason: Tried to change someones Administrator Rank while under Protection.", GetPlayerNameEx(playerid), AdminNameLogin(iAdminValue), iAdminValue, GetPlayerNameEx(iTargetID));
				Log("logs/infract.log", szlogmessage);
			}
			else {

				new
					szMessage[47 + (MAX_PLAYER_NAME * 2)];

                PriorityReport[iTargetID] = TextDrawCreate(261.000000, 373.000000, "New Report");
				TextDrawBackgroundColor(PriorityReport[iTargetID], 255);
				TextDrawFont(PriorityReport[iTargetID], 2);
				TextDrawLetterSize(PriorityReport[iTargetID], 0.460000, 1.800000);
				TextDrawColor(PriorityReport[iTargetID], -65281);
				TextDrawSetOutline(PriorityReport[iTargetID], 0);
				TextDrawSetProportional(PriorityReport[iTargetID], 1);
				TextDrawSetShadow(PriorityReport[iTargetID], 1);

				PlayerInfo[iTargetID][pAdmin] = iAdminValue;
				format(szMessage, sizeof(szMessage), "AdmCmd: %s has promoted %s to a %s (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), AdminNameLogin(iAdminValue), iAdminValue);
				ABroadCast(COLOR_LIGHTRED,szMessage, 2);
				Log("logs/adminranks.log", szMessage);
				format(szMessage, sizeof(szMessage), "You have been promoted to a %s by %s.", AdminNameLogin(iAdminValue), GetPlayerNameEx(playerid));
				SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);
				format(szMessage, sizeof(szMessage), "You have promoted %s to a level %d admin.", GetPlayerNameEx(iTargetID),iAdminValue);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);
			}
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:unmodcar(playerid, params[]) {
	for(new d = 0; d < MAX_PLAYERVEHICLES; d++) if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId])) {
		new modList[512], string[16];
		new count = 0;
		for(new f = 0; f < MAX_MODS; f++) if(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f) != 0) {
			if(f != 9 && f != 7 && f != 8) {
				format(modList, sizeof(modList), "%s\n%s - %s", modList, partType(f), partName(GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f)));
			}
			else format(modList, sizeof(modList), "%s\n%s", modList, partType(f));

			format(string, sizeof(string), "partList%d", count);
			SetPVarInt(playerid, string, GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
			count++;
		}
		if (count == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, " This vehicle does not have any modifications.");
			return 1;
		}
		format(modList, sizeof(modList), "%s\nAll", modList);
		format(string, sizeof(string), "partList%d", count);
		SetPVarInt(playerid, string, 999);
		count++;
		SetPVarInt(playerid, "modCount", count);
		return ShowPlayerDialog(playerid, UNMODCARMENU, DIALOG_STYLE_LIST, "Remove Modifications", modList, "Select", "Cancel");
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
 	return 1;
}

CMD:deletecar(playerid, params[])
{
	new vstring[1024];
	for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
		if((iModelID = PlayerVehicleInfo[playerid][i][pvModelId] - 400) >= 0) {
			if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[iModelID]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvDisabled]) {
				format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[iModelID]);
			}
			else if(!PlayerVehicleInfo[playerid][i][pvSpawned]) {
				format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[iModelID]);
			}
			else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[iModelID]);
		}
		else strcat(vstring, "\nEmpty");
	}
	return ShowPlayerDialog(playerid, DIALOG_DELETECAR, DIALOG_STYLE_LIST, "Delete Vehicle", vstring, "Delete", "Cancel");
}

CMD:parktrailer(playerid, params[]) {
	for(new i = 0, Float: fVehiclePos[4], iVehicleID; i != MAX_PLAYERVEHICLES; ++i) switch(GetVehicleModel((iVehicleID = PlayerVehicleInfo[playerid][i][pvId]))) {
		case 435, 450, 584, 591, 606, 607, 608, 610, 611: {
			GetVehiclePos(iVehicleID, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 10.0, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2])) {

				new
					szMessage[64];

				GetVehicleZAngle(iVehicleID, fVehiclePos[3]);
				UpdatePlayerVehicleParkPosition(playerid, i, fVehiclePos[0], fVehiclePos[1], fVehiclePos[2], fVehiclePos[3], 1000.0);

				format(szMessage, sizeof szMessage, "* %s has parked their trailer.", GetPlayerNameEx(playerid));
				return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
			}
		}
	}
	return 1;
}

forward ParkVehicle(playerid, ownerid, vehicleid, d, Float:X, Float:Y, Float:Z);
public ParkVehicle(playerid, ownerid, vehicleid, d, Float:X, Float:Y, Float:Z)
{
	if(IsPlayerInRangeOfPoint(playerid, 1.0, X, Y, Z))
	{
	    new Float:x, Float:y, Float:z, Float:angle, Float:health, string[29 + (MAX_PLAYER_NAME * 2)];
	    GetVehicleHealth(vehicleid, health);
     	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
     	if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
		if(ownerid != INVALID_PLAYER_ID)
	    {
			GetVehiclePos(vehicleid, x, y, z);
			GetVehicleZAngle(vehicleid, angle);
			SurfingCheck(vehicleid);
			UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, vehicleid, 0);
			SetPlayerArmedWeapon(playerid, 0);
			format(string, sizeof(string), "* %s has parked %s's vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(ownerid));
		}
		else
		{
		    GetVehiclePos(vehicleid, x, y, z);
			GetVehicleZAngle(vehicleid, angle);
			SurfingCheck(vehicleid);
			UpdatePlayerVehicleParkPosition(playerid, d, x, y, z, angle, health);
			PutPlayerInVehicle(playerid, vehicleid, 0);
			SetPlayerArmedWeapon(playerid, 0);
			format(string, sizeof(string), "* %s has parked their vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(ownerid));
		}
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Vehicle did not park because you moved!");
	}
	return 1;
}

CMD:park(playerid, params[])
{
	if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
		new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
		if(IsPlayerConnected(ownerid))
		{
			new d = PlayerInfo[playerid][pVehicleKeys];
			if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
			{
			    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
				new Float:x, Float:y, Float:z, Float:health;
				GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
				if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
				if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;

                GetPlayerPos(playerid, x, y, z);
                SetTimerEx("ParkVehicle", 1000, false, "iiiifff", playerid, ownerid, PlayerVehicleInfo[playerid][d][pvId], d, x, y, z);
                SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move to have your vehicle parked!");
				return 1;
			}
		}
	}
	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
		{
			new Float:x, Float:y, Float:z, Float:health;
			GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
			if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to park it.");
			if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
			GetPlayerPos(playerid, x, y, z);

   			SetTimerEx("ParkVehicle", 1000, false, "iiiifff", playerid, INVALID_PLAYER_ID, PlayerVehicleInfo[playerid][d][pvId], d, x, y, z);
      		SendClientMessageEx (playerid, COLOR_YELLOW, "Do not move to have your vehicle parked!");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "You need to be inside a vehicle that you own.");
	return 1;
}

CMD:apark(playerid, params[]) {
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
        foreach(new ownerid: Player)
        {
			for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[ownerid][d][pvId]))
				{
				    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
					new Float:x, Float:y, Float:z, Float:angle, Float:health;
					if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
					if(IsARC(GetPlayerVehicleID(playerid))) // RC Vehicles
					{
						new Float:vehPos[3];
						GetVehiclePos(GetPlayerVehicleID(playerid),vehPos[0], vehPos[1], vehPos[2]);
						SetPlayerPosEx(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
					}
					GetVehicleHealth(PlayerVehicleInfo[ownerid][d][pvId], health);
					GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
					GetVehicleZAngle(PlayerVehicleInfo[ownerid][d][pvId], angle);
					SurfingCheck(GetPlayerVehicleID(playerid));
					UpdatePlayerVehicleParkPosition(ownerid, d, x, y, z, angle, health);
					PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);
				 	SetPlayerArmedWeapon(playerid, 0);

				 	new szMessage[128];

				 	format(szMessage, sizeof(szMessage),"* You have parked %s's %s.",GetPlayerNameEx(ownerid), VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

					format(szMessage, sizeof(szMessage), "Your %s has been parked at another location by an admin. Use /trackcar to find it.", VehicleName[PlayerVehicleInfo[ownerid][d][pvModelId] - 400]);
					SendClientMessageEx(ownerid, COLOR_LIGHTBLUE, szMessage);
					return 1;
				}
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:a(playerid, params[]) {
	return cmd_admin(playerid, params);
}

CMD:admin(playerid, params[])  {
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(!isnull(params))
		{
			new szMessage[128];
			format(szMessage, sizeof(szMessage), "** %s %s (%d): %s", ARank(playerid), GetPlayerNameEx(playerid),playerid, params);
			Log("logs/chatlogs/admin chat.log", szMessage);

			foreach(Player, i)
			{
			    if(PlayerInfo[i][pAdmin] >= 2)
			    {
			        SendClientMessage(i, COLOR_REPORT, szMessage);
			    }
			}
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/a)dmin [admin chat]");
	}
	return 1;
}

CMD:c(playerid, params[])
{
	if((PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pDonateRank] == 5) && advisorchat[playerid])
	{
		if(!isnull(params))
		{
			new szMessage[128];
			format(szMessage, sizeof(szMessage), "** %s %s (%d): %s", ARank(playerid), GetPlayerNameEx(playerid),playerid, params);
			SendAdvisorMessage(COLOR_COMBINEDCHAT, szMessage);
			Log("logs/chatlogs/cchat.log", szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/c) [staff chat]");
	}
	return 1;
}

CMD:cnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 2) {
		if(!isnull(params)) {

			new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "~b~%s: ~w~%s",GetPlayerNameEx(playerid), params);
			foreach(new i: Player) GameTextForPlayer(i, szMessage, 5000, 6);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cnn [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}
// DYNAMIC VEHICLE COMMANDS - Phazd <3
/*------------------------------------
All of these commands are made 100% by stratch. Obviously it is based off of NGGs commands with a few obvious upgrades.
Dynamic vehicles have two complications with IDs. There is an ID assigned by the database and one assigned by the server.
The ID assigned by the database can be controlled, but the one assigned by the server cannot.
There is no way to coordinate the two mathmatcially to find one another.
I made a function somewhere in the script called GetDynamicCarID(vehicleid). You can insert the vehicle id assigned by the server...
to find out if the car is dynamic. It will return -1 is it isn't dynamic, if it is it will return the database ID of the vehicle.
This was a simple solution to the problem - Phazd <3
--------------------------------------*/
CMD:dvcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
	new
		iVehicle,
		iColors[2];

	if(sscanf(params, "iii", iVehicle, iColors[0], iColors[1]))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvcreate [model ID] [color 1] [color 2]");
		return 1;
	}
	if(!(400 <= iVehicle <= 611)) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		return 1;
	}
	if(IsATrain(iVehicle)) {
		SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		return 1;
	}
	if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		return 1;
	}
	for(new x = 1; x < MAX_FACTIONVEHICLES; x++)
	{
		if(FactionVehicleInfo[x][fModel] == 0)
		{
			new Float:vx,Float:vy,Float:vz;
			new Float:facing;
			new Float:distance;

		    GetPlayerPos(playerid, vx, vy, vz);
		    GetPlayerFacingAngle(playerid, facing);

		    new Float:size_x,Float:size_y,Float:size_z;
			GetVehicleModelInfo(iVehicle, VEHICLE_MODEL_INFO_SIZE, size_x, size_y, size_z);

			distance = size_x + 0.5;

		  	vx += (distance * floatsin(-facing, degrees));
		    vy += (distance * floatcos(-facing, degrees));

			facing += 90.0;
			if(facing > 360.0) facing -= 360.0;
		    FactionVehicleInfo[x][fModel] = iVehicle;
		    FactionVehicleInfo[x][fvPos][0] = vx;
		    FactionVehicleInfo[x][fvPos][1] = vy;
		    FactionVehicleInfo[x][fvPos][2] = vz;
		    FactionVehicleInfo[x][fvPos][3] = facing;
		    FactionVehicleInfo[x][fCol1] = iColors[0];
		    FactionVehicleInfo[x][fCol2] = iColors[1];
			FactionVehicleInfo[x][fScriptID] = CreateVehicle(FactionVehicleInfo[x][fModel], FactionVehicleInfo[x][fvPos][0], FactionVehicleInfo[x][fvPos][1], FactionVehicleInfo[x][fvPos][2], FactionVehicleInfo[x][fvPos][3], FactionVehicleInfo[x][fCol1], FactionVehicleInfo[x][fCol2], 60000);
			LinkVehicleToInterior(FactionVehicleInfo[x][fScriptID], GetPlayerInterior(playerid));
			SetVehicleVirtualWorld(FactionVehicleInfo[x][fScriptID], GetPlayerVirtualWorld(playerid));
			SetVehicleToRespawn(FactionVehicleInfo[x][fScriptID]);
			VehicleFuel[FactionVehicleInfo[x][fScriptID]] = 100.0;
			SaveFactionVehicle(x);
			SendClientMessageEx(playerid, COLOR_GREY, "Dynamic vehicle created!");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "No more dynamic vehicles can be created!");
	return 1;
}

CMD:dvdelete(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
	new iVehicle;
	if(sscanf(params, "i", iVehicle) && !IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvdelete [vehicle ID], or get in the car and submit the command.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		if(GetDynamicCarID(GetPlayerVehicleID(playerid)) != -1) {
			DeleteFactionVehicle(GetDynamicCarID(GetPlayerVehicleID(playerid)));
			return SendClientMessageEx(playerid, COLOR_GREY, "You have deleted the dynamic vehicle.");
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "This vehicle is not dynamic.");
		return 1;
	}
	if(GetDynamicCarID(iVehicle) != -1) {
		DeleteFactionVehicle(GetDynamicCarID(iVehicle));
		return SendClientMessageEx(playerid, COLOR_GREY, "You have deleted the dynamic vehicle.");
	}
	SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle ID you specified is not a dynamic vehicle.");
	return 1;
}


CMD:dvedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new choice[32], vehicleid, vehid, value;
	if(sscanf(params, "is[32]i", vehicleid, choice, value))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dvedit [vehicleid] [parameter] [value]");
		SendClientMessageEx(playerid, COLOR_GREY, "Parameters: vmodel, vcol1, vcol2, groupid, divid, maxhp, upkeep");
		SendClientMessageEx(playerid, COLOR_GREY, "Parameters: objmod(1/2), obj(x/y/z)(1/2), objr(x/y/z)(1/2) ex. objx2 or objyr1");
		return 1;
	}
    if(GetDynamicCarID(vehicleid) == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "Invalid vehicle ID.");
        return 1;
	}
    if(GetDynamicCarID(vehicleid) != -1)
	{
        vehid = GetDynamicCarID(vehicleid);
        //print("ID recorded!");
        // Server vehicle is from here on specified as "vehicleid", database ID is specified as "vehid" - Phazd <3
	}
	if(strcmp(choice, "vmodel", true) == 0)
	{
		if(!(400 <= value <= 611))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
			return 1;
		}
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the model!");
		FactionVehicleInfo[vehid][fModel] = value;
		SaveFactionVehicle(vehid);
		RefreshFactionVehicle(vehid);
		return 1;
	}
	else if(strcmp(choice, "vcol1", true) == 0)
	{
		if(!(0 <= value <= 255)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified. Colors are between 0 and 255.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the first color");
	    FactionVehicleInfo[vehid][fCol1] = value;
        ChangeVehicleColor(vehicleid, value, FactionVehicleInfo[vehid][fCol2]);
        SaveFactionVehicle(vehid);
        RefreshFactionVehicle(vehid);
		return 1;
	}
	else if(strcmp(choice, "vcol2", true) == 0)
	{
		if(!(0 <= value <= 255)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified. Colors are between 0 and 255.");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the second color.");
	    FactionVehicleInfo[vehid][fCol2] = value;
        ChangeVehicleColor(vehicleid, FactionVehicleInfo[vehid][fCol1], value);
        SaveFactionVehicle(vehid);
        RefreshFactionVehicle(vehid);
		return 1;
	}
	else if(strcmp(choice, "groupid", true) == 0)
	{
		if(!(0 <= value <= MAX_FACTIONS)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid faction ID");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have restricted this vehicle to the specified faction.");
	    FactionVehicleInfo[vehid][fGroupID] = value;
        SaveFactionVehicle(vehid);
		return 1;
	}
	else if(strcmp(choice, "maxhp", true) == 0)
	{
		if(!(1000 <= value <= 10000)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid health value. Choose a number between 1000 and 10000");
		}
	    FactionVehicleInfo[vehid][fMaxHP] = value;
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have set the vehicle's health to the specified value.");
	    SetVehicleHealth(vehicleid, value);
	    SaveFactionVehicle(vehid);
	    RefreshFactionVehicle(vehid);
	    return 1;
	}
	else if(strcmp(choice, "divid", true) == 0)
	{
		if(!(0 <= value <= MAX_FAC_DIVS)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid division ID");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have restricted this vehicle to the specified division.");
	    FactionVehicleInfo[vehid][fGroupDivID] = value;
        SaveFactionVehicle(vehid);
		return 1;
	}
	else if(strcmp(choice, "upkeep", true) == 0)
	{
		if(!(-1 <= value <= 60000)) {
			return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid upkeep time. -1 for infinite. Max is 60000(or 1000 minutes this is in seconds)");
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the upkeep of the vehicle.");
	    FactionVehicleInfo[vehid][fUpkeep] = value;
	    SaveFactionVehicle(vehid);
        RefreshFactionVehicle(vehid);
		return 1;
	}
/*	else if(strcmp(choice, "objmod1", true) == 0)
	{
        new Float:px, Float:py, Float:pz;
        GetPlayerPos(playerid, px, py, pz);
		FactionVehicleInfo[vehid][fObject1Model] = value;
		if(IsValidDynamicObject(FactionVehicleInfo[vehid][fObject1])) DestroyDynamicObject(FactionVehicleInfo[vehid][fObject1]);
	 	FactionVehicleInfo[vehid][fObject1] = CreateDynamicObject(value, px, py, pz, 0.0, 0.0, 0.0);
   		SetPVarInt(playerid, "DynamicFacVehAttachTo", vehicleid);
   		//new object = FactionVehicleInfo[vehid][fObject1];
        //AttachDynamicObjectToVehicle(object, vehicleid, 0, 0, 0, 0, 0, 0);
        SendClientMessageEx(playerid, COLOR_WHITE, "You have changed object1's model.");
		 //AttachDynamicObjectToVehicle(FactionVehicleInfo[vehid][fObject1], FactionVehicleInfo[vehid][fScriptID], FactionVehicleInfo[vehid][fObject1Pos][0], FactionVehicleInfo[vehid][fObject1Pos][1], FactionVehicleInfo[vehid][fObject1Pos][2], FactionVehicleInfo[vehid][fObject1RPos][0], FactionVehicleInfo[vehid][fObject1RPos][1], FactionVehicleInfo[vehid][fObject1RPos][2]);
		return 1;
	}
	else if(strcmp(choice, "obj1edit", true) == 0)
	{
   		SetPVarInt(playerid, "DynamicFacVehAttachTo", vehicleid);
   		new object = FactionVehicleInfo[vehid][fObject1];
        EditDynamicObject(playerid, object);
        SendClientMessageEx(playerid, COLOR_WHITE, "You have changed object1's model.");
		 //AttachDynamicObjectToVehicle(FactionVehicleInfo[vehid][fObject1], FactionVehicleInfo[vehid][fScriptID], FactionVehicleInfo[vehid][fObject1Pos][0], FactionVehicleInfo[vehid][fObject1Pos][1], FactionVehicleInfo[vehid][fObject1Pos][2], FactionVehicleInfo[vehid][fObject1RPos][0], FactionVehicleInfo[vehid][fObject1RPos][1], FactionVehicleInfo[vehid][fObject1RPos][2]);
		return 1;
	}
*/
	//SaveHouse(houseid);
	return 1;
}


CMD:veh(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
	if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
		new
			iVehicle,
			iColors[2],
			szMessage[128];

		if(sscanf(params, "iii", iVehicle, iColors[0], iColors[1]))
		{
		    if(!sscanf(params, "i", iVehicle))
			{
			    for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(CreatedCars[iIterator] == INVALID_VEHICLE_ID)
				{
					CreatedCars[iIterator] = SpawnVehicle_InfrontOfPlayer2(playerid, iVehicle, 0, 0);

					VehicleFuel[CreatedCars[iIterator]] = 100.0;
					Vehicle_ResetData(CreatedCars[iIterator]);
					LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
					format(szMessage, sizeof(szMessage), "{AA3333}VehSpawn{FFFF00}: %s spawned a %s (%i)", GetPlayerNameEx(playerid), VehicleName[iVehicle - 400], iVehicle);
					ABroadCast(COLOR_LIGHTRED,szMessage, 4);
					return SendClientMessageEx(playerid, COLOR_GREY, "Vehicle spawned!");
				}
				SendClientMessageEx(playerid, COLOR_GRAD1, "If limit of 100 is reached... Please /destroycar or /destroycars");
			}
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /veh [model ID] [color 1] [color 2]");
		}
		else if(!(400 <= iVehicle <= 611)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
		}
		else if(IsATrain(iVehicle)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
		}
		else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
		}
		else for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(CreatedCars[iIterator] == INVALID_VEHICLE_ID) {

			/*new
				Float: fVehPos[4];

			GetPlayerPos(playerid, fVehPos[0], fVehPos[1], fVehPos[2]);
			GetPlayerFacingAngle(playerid, fVehPos[3]);*/
			CreatedCars[iIterator] = SpawnVehicle_InfrontOfPlayer2(playerid, iVehicle, iColors[0], iColors[1]);
			VehicleFuel[CreatedCars[iIterator]] = 100.0;
			Vehicle_ResetData(CreatedCars[iIterator]);
			LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
			format(szMessage, sizeof(szMessage), "{AA3333}VehSpawn{FFFF00}: %s spawned a %s (%i)", GetPlayerNameEx(playerid), VehicleName[iVehicle - 400], iVehicle);
			ABroadCast(COLOR_LIGHTRED,szMessage, 4);
			return SendClientMessageEx(playerid, COLOR_GREY, "Vehicle spawned!");
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "If limit of 100 is reached... Please /destroycar or /destroycars");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:destroycars(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4) {
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
        return 1;
    }
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
    for(new i = 0; i < sizeof(CreatedCars); i++) {
        if(CreatedCars[i] != INVALID_VEHICLE_ID) {
            DestroyVehicle(CreatedCars[i]);
            CreatedCars[i] = INVALID_VEHICLE_ID;
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "   Created vehicles destroyed!");
    return 1;
}


CMD:cnnn(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) {

		new
			iTextID,
			szMessage[128];

		if(sscanf(params, "is[128]", iTextID, szMessage)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cnnn [type 1-6] [message]. ~n~ = new line, ~r~ = red, ~g~ = green, ~b~ = blue, ~w~ = white, ~y~ = yellow.");
		}
		else if(!(0 <= iTextID <= 6 && iTextID != 2)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Text ID must be between 0 and 6, but not 2 (due to SA:MP bugs).");
		}
		else GameTextForAll(szMessage, 5000, iTextID);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:quitfamily(playerid, params[]) {
	return cmd_quitgang(playerid, params);
}

CMD:quitgang(playerid, params[])
{
    if(PlayerInfo[playerid][pFMember] != 255)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit the family, you are now a civilian again.");
		new string[128];
		format(string, sizeof(string), "%s has quit family %d as rank %i", GetPlayerNameEx(playerid), PlayerInfo[playerid][pFMember]+1, PlayerInfo[playerid][pRank]);
		Log("logs/family.log", string);
		PlayerInfo[playerid][pFMember] = 255;
		PlayerInfo[playerid][pRank] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
		    new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pModel] = CIV[rand];
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
	}
	return 1;
}





forward OnPlayerChangePass(index);
public OnPlayerChangePass(index)
{
	if(mysql_affected_rows(MainPipeline)) {

		new
			szBuffer[129],
			szMessage[103];

		GetPVarString(index, "PassChange", szBuffer, sizeof(szBuffer));
		format(szMessage, sizeof(szMessage), "You have changed your password to '%s'.", szBuffer);
		SendClientMessageEx(index, COLOR_YELLOW, szMessage);

		format(szMessage, sizeof(szMessage), "%s (IP: %s) has changed their password.", GetPlayerNameEx(index), PlayerInfo[index][pIP]);
		Log("logs/password.log", szMessage);
		DeletePVar(index, "PassChange");
	}
	else SendClientMessageEx(index, COLOR_RED, "There was an issue with processing your request. Your password will remain as it is.");
	return 1;
}

CMD:changeuserpassword(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
        return 1;
    }

    new string[128], accountName[20], password[64], query[512];
    if(sscanf(params, "s[20]s[64]", accountName, password)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /changeuserpassword [player name] [new password]");

    new passbuffer[129];
    WP_Hash(passbuffer, sizeof(passbuffer), password);

	format(string, sizeof(string), "Attempting to change %s's password...", accountName);
    SendClientMessageEx(playerid, COLOR_YELLOW, string);

	format(string, sizeof(string), "AdmCmd: %s's password was changed by %s.", accountName, GetPlayerNameEx(playerid));
    Log("logs/password.log", string);

	//new tmpName[24];

    format(query,sizeof(query),"UPDATE `accounts` SET `Pass`='%s' WHERE `Username`='%s' AND `AdminLevel` < 2",passbuffer,accountName);
	mysql_function_query(MainPipeline, query, false, "OnChangeUserPassword", "i", playerid);
	SetPVarString(playerid, "OnChangeUserPassword", accountName);
	return 1;
}

forward OnChangeUserPassword(index);
public OnChangeUserPassword(index)
{
	new string[128], name[24];
	GetPVarString(index, "OnChangeUserPassword", name, 24);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully changed %s's password.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	else {
		format(string, sizeof(string), "There was an issue with changing %s's password.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnChangeUserPassword");

	return 1;
}

CMD:writecheck(playerid, params[])
{
	new string[128], giveplayerid, monies, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, monies, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /writecheck [Playerid/PartOfName] [Amount] [Reason]");

    if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
    if(monies > 1000 && PlayerInfo[playerid][pLevel] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You must be level 3 to write a check for greater then 1000$ !");
        return 1;
    }
    if(monies < 1 || monies > 100000)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You can't write a check for under 1$ or over 100,000$ !");
        return 1;
    }
    if(PlayerInfo[playerid][pChecks] == 0)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You must have a checkbook to write a check !");
        return 1;
    }
    if(strlen(reason) > 64) return SendClientMessageEx(playerid, COLOR_GRAD1, "Check details may not be longer than 64 characters in length.");
    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't write a check to yourself!"); return 1; }
    if(ProxDetectorS(5.0, playerid, giveplayerid))
	{
     	new playermoney = PlayerInfo[playerid][pAccount];
      	if(monies > 0 && playermoney >= monies)
		{
  			PlayerInfo[playerid][pAccount] = PlayerInfo[playerid][pAccount] - monies;
     		PlayerInfo[giveplayerid][pCheckCash] = PlayerInfo[giveplayerid][pCheckCash]+monies;
       		if(PlayerInfo[playerid][pDonateRank] == 0)
			{
   				new fee = (monies*8)/100;
       			GivePlayerCash(playerid, (0 - fee));
          		format(string, sizeof(string), "   You have written a check for $%d to %s (for %s) and have been charged an 8 percent fee.",monies,GetPlayerNameEx(giveplayerid),reason);
            	SendClientMessageEx(playerid, COLOR_GRAD1, string);
             	PlayerInfo[playerid][pChecks]--;
              	format(string, sizeof(string), "   You now have %d checks left.",PlayerInfo[playerid][pChecks]);
               	SendClientMessageEx(playerid, COLOR_GRAD1, string);
      		}
          	else
			{
   				format(string, sizeof(string), "   You have written a check for $%d to %s (for %s) and have not been charged the 8 percent fee.",monies,GetPlayerNameEx(giveplayerid),reason);
       			SendClientMessageEx(playerid, COLOR_GRAD1, string);
          		PlayerInfo[playerid][pChecks]--;
            	format(string, sizeof(string), "   You now have %d checks left.",PlayerInfo[playerid][pChecks]);
             	SendClientMessageEx(playerid, COLOR_GRAD1, string);
			}
   			format(string, sizeof(string), "   You have recieved a check for $%d from %s for: %s", monies,GetPlayerNameEx(playerid),reason);
      		SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
        	format(string, sizeof(string), "* %s takes out a checkbook, fills out a check and hands it to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
         	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
          	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
           	PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
		}
  		else
		{
  			SendClientMessageEx(playerid, COLOR_GRAD1, "   Invalid transaction amount, or you do not have enough money to give that much!");
     	}
	}
 	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
   	}
    return 1;
}

CMD:satokens(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
	    new name[MAX_PLAYER_NAME], months, days, years;
	    if(sscanf(params, "s[24]ddd", name, months, days, years)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /satokens [name] [month] [day] [year]");

        SeeReportToken(playerid,name,months,days,years);
        return 1;
    }
    return 1;
}

CMD:catokens(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pHelper] >= 4 || PlayerInfo[playerid][pPR] > 0)
	{
		new name[MAX_PLAYER_NAME], months, days, years;
		if(sscanf(params, "s[24]ddd", name, months, days, years)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /catokens [name] [month] [day] [year]");

        SeeReportToken(playerid,name,months,days,years);
        return 1;
    }
    return 1;
}

CMD:carkeys(playerid, params[])
{
    new vstring[512], iValidVehicles;
	for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	{
	    if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID) {
	        if(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId] != INVALID_PLAYER_ID) {
				format(vstring, sizeof(vstring), "%s\n%s | Keys: %s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], GetPlayerNameEx(PlayerVehicleInfo[playerid][i][pvAllowedPlayerId])), ++iValidVehicles;
			}
			else {
                format(vstring, sizeof(vstring), "%s\n%s | Keys: No-one", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
		}
        else if((PlayerVehicleInfo[playerid][i][pvImpounded] == 1 || PlayerVehicleInfo[playerid][i][pvSpawned] == 0) && PlayerVehicleInfo[playerid][i][pvModelId] != 0) {
            format(vstring, sizeof(vstring), "%s\n%s | Keys: Unavailable", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
		}
        else {
			format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
		}
	}
	if(iValidVehicles != 0)
	{
		ShowPlayerDialog(playerid, REMOVEKEYS, DIALOG_STYLE_LIST, "Please select a vehicle.", vstring, "Remove Keys", "Cancel");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any keys given out.");
	}
	return 1;
}

CMD:sb(playerid, params[]) return cmd_seatbelt(playerid, params);

CMD:seatbelt(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid) == 0)
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a vehicle!");
        return 1;
    }
	new string[50 + MAX_PLAYER_NAME];
    if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 0)
	{
        Seatbelt[playerid] = 1;
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "* %s reaches for their helmet, and puts it on.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have put on your helmet.");
        }
        else
		{
            format(string, sizeof(string), "* %s reaches for their seatbelt, and buckles it up.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have put on your seatbelt.");
        }

    }
    else if(IsPlayerInAnyVehicle(playerid) == 1 && Seatbelt[playerid] == 1)
	{
        Seatbelt[playerid] = 0;
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "* %s reaches for their helmet, and takes it off.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your helmet.");
        }
        else
		{
            format(string, sizeof(string), "* %s reaches for their seatbelt, and unbuckles it.", GetPlayerNameEx(playerid));
            SendClientMessageEx(playerid, COLOR_WHITE, "You have taken off your seatbelt.");
        }
    }
    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    return 1;
}

CMD:cb(playerid, params[]) return cmd_checkbelt(playerid, params);

CMD:checkbelt(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /checkbelt [player]");

    if(GetPlayerState(giveplayerid) == PLAYER_STATE_ONFOOT)
	{
        SendClientMessageEx(playerid,COLOR_GREY,"That player is not in any vehicle!");
        return 1;
    }
    if (ProxDetectorS(9.0, playerid, giveplayerid))
	{
		new string[128];
        new stext[4];
        if(Seatbelt[giveplayerid] == 0) { stext = "off"; }
        else { stext = "on"; }
        if(IsABike(GetPlayerVehicleID(playerid)))
		{
            format(string, sizeof(string), "%s's helmet is currently %s." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s looks at %s, checking to see if they are wearing a helmet.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else
		{
            format(string, sizeof(string), "%s's seat belt is currently %s." , GetPlayerNameEx(giveplayerid) , stext);
            SendClientMessageEx(playerid,COLOR_WHITE,string);

            format(string, sizeof(string), "* %s peers through the window at %s, checking to see if they are wearing a seatbelt.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
    }
    else { SendClientMessageEx(playerid, COLOR_GREY, "You are not around that player!"); }
    return 1;
}

CMD:givekeys(playerid, params[])
{
	new
		giveplayerid;

    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givekeys [player]");
    if(IsPlayerConnected(giveplayerid))
	{
        if(playerid == giveplayerid) return 1;
        if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
            new
				iValidVehicles,
				vstring[512];

			for(new i; i < MAX_PLAYERVEHICLES; i++) if(PlayerVehicleInfo[playerid][i][pvModelId] >= 400)
			{
				if(PlayerVehicleInfo[playerid][i][pvImpounded] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (impounded)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvDisabled] == 1)
					format(vstring, sizeof(vstring), "%s\n%s (disabled)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else if(PlayerVehicleInfo[playerid][i][pvSpawned] == 0)
					format(vstring, sizeof(vstring), "%s\n%s (stored)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);

				else
					format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]), ++iValidVehicles;
			}
			else strcat(vstring, "\nEmpty");
            if(iValidVehicles != 0)
			{
                GiveKeysTo[playerid] = giveplayerid;
                ShowPlayerDialog(playerid, GIVEKEYS, DIALOG_STYLE_LIST, "Please select a vehicle.", vstring, "Give Keys", "Cancel");
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any vehicles for which you can give out keys.");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD1, "You're not close enough to that player.");
        }
    }
    return 1;
}

CMD:deliverpt(playerid, params[])
{
    if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3) || (PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 7 || PlayerInfo[playerid][pDivision] == 3)))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
			new string[128], giveplayerid;
		    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deliverpt [player]");

            new carid = GetPlayerVehicleID(playerid);
            new caridex = GetPlayerVehicleID(giveplayerid);
            if(IsAnAmbulance(carid) || IsATierraESCar(carid) || IsAnNGCar(carid))
			{
                if(carid == caridex)
				{
                    if(IsAtDeliverPatientPoint(playerid))
					{
                        if(playerid == giveplayerid)
						{
                            SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot deliver yourself to the hospital!");
                            return 1;
                        }
                        if(GetPVarInt(giveplayerid, "Injured") == 0)
						{
                            return SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not injured!");
                        }
                        if(playerTabbed[giveplayerid] >= 1)
						{
                            SendClientMessageEx(playerid, COLOR_GRAD2, "That player is paused, you can't currently deliver him!");
                            return 1;
                        }
                        SetPlayerHealth(giveplayerid, 100);
                        if(PlayerInfo[playerid][pMember] == 11 && PlayerInfo[giveplayerid][pMember] != 11) return SendClientMessageEx(playerid, COLOR_GREY, "You can't do that!" );
                        if(GetPVarType(giveplayerid, "STD"))
						{
							DeletePVar(giveplayerid, "STD");
                            SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD anymore because of the hospital's help!");
                        }
                        GivePlayerCash(giveplayerid, -1000);
                        Tax += 1000;
                        GivePlayerCash(playerid,2500);
                        KillEMSQueue(giveplayerid);
                        SetPVarInt(giveplayerid, "MedicBill", 0);
                        SendClientMessageEx(giveplayerid, TEAM_CYAN_COLOR, "Doc: Your medical bill comes in at $1000. Have a nice day!");
                        format(string,sizeof(string),"You received $2500 for successfully delivering the patient!");
                        SendClientMessageEx(playerid, TEAM_CYAN_COLOR, string);
                        SetPlayerPosEx(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        Streamer_UpdateEx(giveplayerid, 1169.7588,-1351.5490,2423.0461);
                        Player_StreamPrep(giveplayerid, 1169.7588,-1351.5490,2423.0461,FREEZE_TIME);
                        SetPlayerInterior(giveplayerid, 1);
                        PlayerInfo[giveplayerid][pInt] = 1;
                        PlayerInfo[playerid][pPatientsDelivered]++;
                        format(string, sizeof(string), "EMS Driver %s has successfully delivered Patient %s to the hospital.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						SendRadioMessage(4, TEAM_MED_COLOR, string);
						PlayerInfo[giveplayerid][pHydration] = 100;
						new Float:X, Float:Y, Float:Z;
                        GetDynamicObjectPos(Carrier[0], X, Y, Z);
                        if(IsPlayerInRangeOfPoint(playerid, 5.0,1142.4733,-1326.3633,13.6259) || IsPlayerInRangeOfPoint(playerid, 5.0, 1165.1564,-1368.8240,26.6502))
						{
                            SetPlayerVirtualWorld(giveplayerid, 2);
                            PlayerInfo[giveplayerid][pVW] = 2;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,2027.0599,-1410.6870,16.9922) || IsPlayerInRangeOfPoint(playerid, 5.0, 2024.5742,-1382.7844,48.3359))
					 	{
                            SetPlayerVirtualWorld(giveplayerid, 1);
                            PlayerInfo[giveplayerid][pVW] = 1;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,1227.2339,306.4730,19.7028) || IsPlayerInRangeOfPoint(playerid, 5.0, 1233.3384,316.4022,24.7578))
						{
                            SetPlayerVirtualWorld(giveplayerid, 5);
                            PlayerInfo[giveplayerid][pVW] = 5;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-339.2989,1055.8138,19.7392) || IsPlayerInRangeOfPoint(playerid, 5.0, -334.1560,1051.4434,26.0125))
						{
                            SetPlayerVirtualWorld(giveplayerid, 4);
                            PlayerInfo[giveplayerid][pVW] = 4;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-2695.5725,639.4147,14.4531) || IsPlayerInRangeOfPoint(playerid, 5.0, -2656.0339,615.2567,66.0938))
						{
                            SetPlayerVirtualWorld(giveplayerid, 6);
                            PlayerInfo[giveplayerid][pVW] = 6;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 250,X, Y, Z))
						{
                            SetPlayerVirtualWorld(giveplayerid, 7);
                            PlayerInfo[giveplayerid][pVW] = 7;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0,-1528.814331, 2540.706054, 55.835937))
						{
                            SetPlayerVirtualWorld(giveplayerid, 99);
                            PlayerInfo[giveplayerid][pVW] = 99;
                        }
                        else if(IsPlayerInRangeOfPoint(playerid, 5.0, 228.7983,1983.0693,17.6406))
                        {
                            SetPlayerVirtualWorld(giveplayerid, 8);
							PlayerInfo[giveplayerid][pVW] = 8;
                        }
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not near a deliver point - look out near the hospitals.");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GRAD2, "Patient must be in your car in order to deliver him.");
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in an FDSA vehicle.");
            }
        }
    }
    return 1;
}

CMD:loadpt(playerid, params[])
{
    if(IsAMedic(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            SendClientMessageEx(playerid, COLOR_GREY, "   Cannot use this while you're in a car!");
            return 1;
        }

        new string[128], giveplayerid, seat;
        if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /loadpt [player] [seatid]");

        if(IsPlayerConnected(giveplayerid))
		{
            if(giveplayerid != INVALID_PLAYER_ID)
			{
                if(!(2 <= seat <= 3))
				{
                    SendClientMessageEx(playerid, COLOR_GRAD1, "The seat ID cannot be above 3 or below 2.");
                    return 1;
                }
                if(GetPVarInt(giveplayerid, "Injured") != 1)
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "That patient not injured - you can't load them.");
                    return 1;
                }
                if(IsPlayerInAnyVehicle(giveplayerid))
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "That patient is inside a car - you can't load them.");
                    return 1;
                }
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot load yourself!"); return 1; }
                    if(PlayerInfo[giveplayerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
                    new carid = gLastCar[playerid];
                    if(PlayerInfo[playerid][pMember] == 11 && !IsACop(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You can't load that patient - they're not a law enforcement officer.");
                    if(IsAnAmbulance(carid) || IsATierraESCar(carid) || IsAnNGCar(carid))
					{
                        if(IsVehicleOccupied(carid, seat)) {
							SendClientMessageEx(playerid, COLOR_GREY, "That seat is occupied.");
							return 1;
						}
						if(IsPlayerInRangeOfVehicle(giveplayerid, carid, 10.0) && IsPlayerInRangeOfVehicle(playerid, carid, 10.0)) {
							format(string, sizeof(string), "* You were loaded by paramedic %s.", GetPlayerNameEx(playerid));
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* You loaded patient %s.", GetPlayerNameEx(giveplayerid));
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s loads %s in the ambulance.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							SetPVarInt(giveplayerid, "EMSAttempt", 3);
							ClearAnimations(giveplayerid);
							PutPlayerInVehicle(giveplayerid,carid,seat);
							TogglePlayerControllable(giveplayerid, false);
						}
						else SendClientMessageEx(playerid, COLOR_GREY, "Both you and your patient must be near the ambulance.");
                    }
                    else
					{
                        SendClientMessageEx(playerid, COLOR_GRAD2, "Your last car needs to be an ambulance!");
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You're not close enough to the player or your car!");
                    return 1;
                }
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
            return 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a Medic!");
    }
    return 1;
}

CMD:triage(playerid, params[])
{
    if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)//model
	{
 		if(PlayerInfo[playerid][pTriageTime] != 0)
   		{
     		SendClientMessageEx(playerid, COLOR_GREY, "You must wait for 2 minutes to use this command.");
       		return 1;
	    }

	    new string[128], giveplayerid;
	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /triage [player]");

   		if(IsPlayerConnected(giveplayerid))
   		{
    	    if(playerid == giveplayerid) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on yourself.");
    	    if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
	    	    new Float: health;
	    	    GetPlayerHealth(giveplayerid, health);
	    	    if(health >= 85) SetPlayerHealth(giveplayerid, 100);
				else SetPlayerHealth(giveplayerid, health+15.0);
	    	    format(string, sizeof(string), "* %s has given %s 15 health.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[playerid][pTriageTime] = 120;
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			}
 		}
	}
	return 1;
}

CMD:dmvrelease(playerid, params[]) {
	switch(PlayerInfo[playerid][pMember]) {
		case 1, 2, 3, 7, 11, 12: {}
		default: return 1;
	}
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17)) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmvrelease [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				vstring[1024],
				iCount;

			for(new i; i < MAX_PLAYERVEHICLES; i++) {
				if(PlayerVehicleInfo[iTargetID][i][pvPrice] < 1) PlayerVehicleInfo[iTargetID][i][pvPrice] = 2000000;
				if(PlayerVehicleInfo[iTargetID][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
					if(PlayerVehicleInfo[iTargetID][i][pvTicket]) {
						format(vstring, sizeof(vstring), "%s\n%s (ticket - $%i)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], PlayerVehicleInfo[iTargetID][i][pvTicket]);
						++iCount;
					}
					else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400]);
				}
				else if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
					format(vstring, sizeof(vstring), "%s\n%s (impounded - $%i release)", vstring, VehicleName[PlayerVehicleInfo[iTargetID][i][pvModelId] - 400], (PlayerVehicleInfo[iTargetID][i][pvPrice] / 20) + PlayerVehicleInfo[iTargetID][i][pvTicket] + (PlayerInfo[iTargetID][pLevel] * 3000));
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\nNone", vstring);
			}
			if(iCount) ShowPlayerDialog(playerid, MPSPAYTICKETSCOP, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel"), SetPVarInt(playerid, "vRel", iTargetID);
			else SendClientMessageEx(playerid, COLOR_GRAD2, "This person doesn't have any tickets to be paid or vehicles to be released.");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at the DMV release point in Idlewood (inside the DMV).");
	return 1;
}

CMD:dmvmenu(playerid, params[])
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0, 833.60, 3.23, 1004.17))
	{

	    if(PlayerInfo[playerid][pCarLic] == 0)
	    {
	        SendClientMessage(playerid, COLOR_GRAD2, "A valid driver's license is required to release your vehicle from the impound, or pay any tickets.");
	        return 1;
	    }

		new
			vstring[1024],
			iCount;

		for(new i; i < MAX_PLAYERVEHICLES; i++) {
		    if(PlayerVehicleInfo[playerid][i][pvPrice] < 1) PlayerVehicleInfo[playerid][i][pvPrice] = 2000000;
			if(PlayerVehicleInfo[playerid][i][pvId] > INVALID_PLAYER_VEHICLE_ID) {
				if(PlayerVehicleInfo[playerid][i][pvTicket]) {
					format(vstring, sizeof(vstring), "%s\n%s (ticket - $%i)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], PlayerVehicleInfo[playerid][i][pvTicket]);
					++iCount;
				}
				else format(vstring, sizeof(vstring), "%s\n%s", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400]);
			}
			else if(PlayerVehicleInfo[playerid][i][pvImpounded]) {
				format(vstring, sizeof(vstring), "%s\n%s (impounded - $%i release)", vstring, VehicleName[PlayerVehicleInfo[playerid][i][pvModelId] - 400], (PlayerVehicleInfo[playerid][i][pvPrice] / 20) + PlayerVehicleInfo[playerid][i][pvTicket] + (PlayerInfo[playerid][pLevel] * 3000));
				++iCount;
			}
			else format(vstring, sizeof(vstring), "%s\nNone", vstring);
		}
		if(iCount)
		{
			ShowPlayerDialog(playerid, MPSPAYTICKETS, DIALOG_STYLE_LIST, "Vehicles", vstring, "Release", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any tickets to be paid or vehicles to be released.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not at the DMV release point in Dillimore (inside the DMV).");
	return 1;
}



CMD:motd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /motd [message]");
		new string[128];
    	format(string, sizeof(string), "AdmCmd: %s has changed the global motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);
		format(GlobalMOTD, sizeof(GlobalMOTD), "%s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Global MOTD.");
		//g_mysql_SaveMOTD();
		SaveMOTDs();
	}
	return 1;
}

CMD:amotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /amotd [message]");
		new string[128];
		format(AdminMOTD, sizeof(AdminMOTD), "%s", params);
		format(string, sizeof(string), "AdmCmd: %s has changed the admin motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Admin MOTD.");
		//g_mysql_SaveMOTD();
		SaveMOTDs();
	}
	return 1;
}

CMD:vipmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
		if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vipmotd [message]");
		new string[128];
		format(VIPMOTD, sizeof(VIPMOTD), "%s", params);
		format(string, sizeof(string), "AdmCmd: %s has changed the VIP motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the VIP MOTD.");
		//g_mysql_SaveMOTD();
		SaveMOTDs();
	}
	return 1;
}

CMD:cmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pHelper] >= 4 || PlayerInfo[playerid][pPR] > 0)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cmotd [message]");
		new string[128];
		format(CAMOTD, sizeof(CAMOTD), "%s", params);
		if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pPR] > 0)
		{
			format(string, sizeof(string), "AdmCmd: %s has changed the Community Advisor motd to: %s.", GetPlayerNameEx(playerid), params);
			ABroadCast( COLOR_LIGHTRED, string, 4);
		}
		else if(PlayerInfo[playerid][pHelper] >= 4)
		{
		    format(string, sizeof(string), "CACmd: %s has changed the Community Advisor motd to: %s.", GetPlayerNameEx(playerid), params);
			CBroadCast( COLOR_YELLOW, string, 2);
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the Community Advisor MOTD.");
		//g_mysql_SaveMOTD();
		SaveMOTDs();
	}
	return 1;
}

CMD:pmotd(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 99999)
    {
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pmotd [message/off]");
		new string[128];
		if(strcmp(params, "off", true) == 0)
		{
		    format(pMOTD, sizeof(pMOTD), "");
		    format(string, sizeof(string), "AdmCmd: %s has turned off the Login MOTD", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 4);

			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the pMOTD.");
			//g_mysql_SaveMOTD();
			SaveMOTDs();
			return 1;
		}
		format(pMOTD, sizeof(pMOTD), "%s", params);

		format(string, sizeof(string), "AdmCmd: %s has changed the Login motd to: %s.", GetPlayerNameEx(playerid), params);
		ABroadCast( COLOR_LIGHTRED, string, 4);

		SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted the pMOTD.");
		//g_mysql_SaveMOTD();
		SaveMOTDs();
	}
	return 1;
}

CMD:sellmycar(playerid, params[])
{
    if(PlayerInfo[playerid][pFreezeCar] == 1)
    {
   		return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your car assets are frozen, you cannot sell a car!");
	}
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
        if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId]))
 		{
            new Float:health;
            GetVehicleHealth(PlayerVehicleInfo[playerid][d][pvId], health);
            if(PlayerInfo[playerid][pLevel] == 1)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You have to be level 2 or higher to be able to sell vehicles.");
                return 1;
            }
            if(health < 500) return SendClientMessageEx(playerid, COLOR_GREY, " Your vehicle is too damaged to sell it.");

            new string[128], giveplayerid, price;
			if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellmycar [player] [price]");

            if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");
            if(PlayerInfo[giveplayerid][pLevel] == 1)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "The player has to be Level 2 or higher to be able to sell vehicles to them.");
                return 1;
            }
            if(playerid == giveplayerid)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself.");
                return 1;
            }
            if(IsWeaponisedVehicle(PlayerVehicleInfo[playerid][d][pvModelId]))
            {
                SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to sell this restricted vehicle.");
                return 1;
            }
            if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
            if (ProxDetectorS(8.0, playerid, giveplayerid))
		 	{
		 	    if(PlayerInfo[giveplayerid][pFreezeCar] == 1)
	 		    {
	            	SendClientMessageEx(giveplayerid, COLOR_WHITE, "ERROR: Your car assets are frozen, you cannot buy a car!");
	            	SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Their car assets are frozen, they cannot buy a car!");
	            	return 1;
				}
                VehicleOffer[giveplayerid] = playerid;
                VehicleId[giveplayerid] = d;
                VehiclePrice[giveplayerid] = price;
                format(string, sizeof(string), "* You offered %s to buy this %s for $%d.", GetPlayerNameEx(giveplayerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                format(string, sizeof(string), "* %s has offered you their %s for $%d, (type /accept car) to buy.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]), price);
                SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
    return 1;
}

CMD:sellmyhouse(playerid, params[])
{
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
    new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
    if((PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) || (PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0))
	{
	    if(PlayerInfo[playerid][pFreezeHouse] == 1)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot sell your house!");
		}
	    new string[128], giveplayerid, price;
	    if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellmyhouse [player] [price]");

        if(price < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Price must be higher than 0.");

        if(!IsPlayerConnected(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "Player is currently not connected to the server.");
        if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner], true) == 0)
		{
            SendClientMessageEx(playerid, COLOR_GREY, "They already own a house.");
            return 1;
        }
        new house = PlayerInfo[playerid][pPhousekey];
        new house2 = PlayerInfo[playerid][pPhousekey2];
        if(PlayerInfo[giveplayerid][pFreezeHouse] == 1)
	    {
	        SendClientMessageEx(giveplayerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot buy a house!");
	        SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Their house assets are frozen, you cannot sell them a house!");
	        return 1;
		}
        if(PlayerInfo[giveplayerid][pLevel] >= HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel])
		{
            if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
			{
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    HouseOffer[giveplayerid] = playerid;
                    HousePrice[giveplayerid] = price;
                    House[giveplayerid] = 1;
                    format(string, sizeof(string), "* You offered %s to buy your house for $%d.", GetPlayerNameEx(giveplayerid), price);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s has offered you their house for $%d, (type /accept house) to buy.", GetPlayerNameEx(playerid), price);
                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                    return 1;
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
                    return 1;
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
			{
                if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
                    HouseOffer[giveplayerid] = playerid;
                    HousePrice[giveplayerid] = price;
                    House[giveplayerid] = 2;
                    format(string, sizeof(string), "* You offered %s to buy your house for $%d.", GetPlayerNameEx(giveplayerid), price);
                    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "* %s has offered you their house for $%d, (type /accept house) to buy.", GetPlayerNameEx(playerid), price);
                    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
                    return 1;
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
                    return 1;
                }
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You are not near your house");
                return 1;
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "The player you are trying to sell your house to is not the appropriate level to buy this house.");
            return 1;
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_WHITE, "You don't own a house.");
    }
    return 1;
}

CMD:gotoplayerscar(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 2) {

        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoplayerscar [player]");
		}
		else if(IsPlayerConnected(iTargetID)) {

			new
				szVehString[1024];

			for(new i, iModelID; i < MAX_PLAYERVEHICLES; i++) {
				if((iModelID = PlayerVehicleInfo[iTargetID][i][pvModelId] - 400) >= 0) {
					if(PlayerVehicleInfo[iTargetID][i][pvImpounded]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (impounded)", szVehString, VehicleName[iModelID]);
					}
					else if(PlayerVehicleInfo[iTargetID][i][pvDisabled]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (disabled)", szVehString, VehicleName[iModelID]);
					}
					else if(!PlayerVehicleInfo[iTargetID][i][pvSpawned]) {
						format(szVehString, sizeof(szVehString), "%s\n%s (stored)", szVehString, VehicleName[iModelID]);
					}
					else format(szVehString, sizeof(szVehString), "%s\n%s (ID %i)", szVehString, VehicleName[iModelID], PlayerVehicleInfo[iTargetID][i][pvId]);
				}
				else strcat(szVehString, "\nEmpty");
			}
		    ShowPlayerDialog(playerid, GOTOPLAYERCAR, DIALOG_STYLE_LIST, "Vehicle Teleportation", szVehString, "Teleport", "Cancel");
       		SetPVarInt(playerid, "playeraffectedcarTP", iTargetID);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		{

		}
  	}
	return 1;
}

CMD:gpc(playerid, params[]) {
	return cmd_gotoplayerscar(playerid, params);
}

CMD:pvlock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
    if(PlayerInfo[playerid][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	{
        new ownerid = PlayerInfo[playerid][pVehicleKeysFrom];
        if(IsPlayerConnected(ownerid))
		{
            new d = PlayerInfo[playerid][pVehicleKeys];
            if(PlayerVehicleInfo[ownerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[ownerid][d][pvId], x, y, z);
            if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
			{
                if(PlayerVehicleInfo[ownerid][d][pvLock] > 0)
				{
                    if(PlayerVehicleInfo[ownerid][d][pvLocked] == 0)
					{
                        GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 1;
                        LockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                    else
					{
                        GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
                        PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                        PlayerVehicleInfo[ownerid][d][pvLocked] = 0;
                        UnLockPlayerVehicle(ownerid, PlayerVehicleInfo[ownerid][d][pvId], PlayerVehicleInfo[ownerid][d][pvLock]);
                        return 1;
                    }
                }
                else
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
                    return 1;
                }
            }
        }
    }
    for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
    {
        if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
            if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 0)
			{
                GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 1;
                LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;
            }
            else if(PlayerVehicleInfo[playerid][d][pvLock] > 0 && PlayerVehicleInfo[playerid][d][pvLocked] == 1)
			{
                GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
                PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
                PlayerVehicleInfo[playerid][d][pvLocked] = 0;
                UnLockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][d][pvId], PlayerVehicleInfo[playerid][d][pvLock]);
                return 1;

            }
            SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
            return 1;
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, " You are not near any vehicle that you own.");
    return 1;
}

CMD:gpark(playerid, params[])
{
	new string[128];

    new f = PlayerInfo[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a family.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
 	{
	    if(IsPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId]))
	    {
    		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessageEx(playerid, COLOR_GREY, "You must be in the driver seat.");
	        new Float:x, Float:y, Float:z, Float:angle, Float:health;
	        GetVehicleHealth(FamilyVehicleInfo[f][d][fvId], health);
	        if(health < 800) return SendClientMessageEx(playerid, COLOR_GREY, " The vehicle is too damaged to park it.");
	        if(PlayerInfo[playerid][pLockCar] == GetPlayerVehicleID(playerid)) PlayerInfo[playerid][pLockCar] = INVALID_VEHICLE_ID;
            GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
           	GetVehicleZAngle(FamilyVehicleInfo[f][d][fvId], angle);
            SurfingCheck(GetPlayerVehicleID(playerid));
            UpdateGangVehicleParkPosition(f, d, x, y, z, angle, health, 1);
  			FamilyVehicleInfo[f][d][fvSpawnx] = x;
			FamilyVehicleInfo[f][d][fvSpawny] = y;
			FamilyVehicleInfo[f][d][fvSpawnz] = z;
			FamilyVehicleInfo[f][d][fvSpawna] = angle;
			PutPlayerInVehicle(playerid, FamilyVehicleInfo[f][d][fvId], 0);
            format(string, sizeof(string), "* %s has parked their vehicle.", GetPlayerNameEx(playerid));
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            SaveFamiliesHQ();
            return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You need to be inside a vehicle that you own.");
	return 1;
}
CMD:gvlock(playerid, params[])
{
    new Float: x, Float: y, Float: z;
	new f = PlayerInfo[playerid][pFMember];
	if(f == 255) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a family.");
	for(new d = 0 ; d < MAX_GANG_VEHICLES; d++)
    {
		if(FamilyVehicleInfo[f][d][fvId] != 0) GetVehiclePos(FamilyVehicleInfo[f][d][fvId], x, y, z);
  		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
    	{
        	if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 0)
         	{
          		GameTextForPlayer(playerid,"~r~Vehicle Locked!",5000,6);
            	PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
             	FamilyVehicleInfo[f][d][fvLocked] = 1;
              	LockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
               	return 1;
			}
			else if(FamilyVehicleInfo[f][d][fvLock] > 0 && FamilyVehicleInfo[f][d][fvLocked] == 1)
   			{
      			GameTextForPlayer(playerid,"~g~Vehicle Unlocked!",5000,6);
         		PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
           		FamilyVehicleInfo[f][d][fvLocked] = 0;
             	UnLockGangVehicle(f, FamilyVehicleInfo[f][d][fvId], FamilyVehicleInfo[f][d][fvLock]);
              	return 1;
			}
   			SendClientMessageEx(playerid, COLOR_GREY, " You don't have a lock system installed on this vehicle.");
      		return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, " You are not near any vehicle that your family owns.");
	return 1;
}

CMD:editcardealership(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ])) {
            if(IsPlayerOwnerOfCDEx(playerid, d) || PlayerInfo[playerid][pAdmin] >= 1337)
			{
                SetPVarInt(playerid, "editingcd", d);
                SetPVarInt(playerid, "editingcdveh", -1);
                SetPVarInt(playerid, "editingcdvehpos", 0);
                SetPVarInt(playerid, "editingcdvehnew", 0);
                new listitems[] = "1 New Vehicle\n2 My Vehicles\n3 Upgrade\n4 Till";
                ShowPlayerDialog(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You do not own that Car Dealership.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You must be standing inside the radius of the Car Dealership.");
    return 1;
}

CMD:editcar(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);
    new v, d;
    v = GetCarDealershipVehicleId(vehicleid);
    d = GetCarDealershipId(vehicleid);
    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are not in any car.");
    if(v != -1 && d != -1)
	{
        if(IsPlayerOwnerOfCDEx(playerid, d) || PlayerInfo[playerid][pAdmin] >= 1337)
		{
            SetPVarInt(playerid, "editingcd", d);
            SetPVarInt(playerid, "editingcdveh", v);
            SetPVarInt(playerid, "editingcdvehpos", 0);
            SetPVarInt(playerid, "editingcdvehnew", 0);
            new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
            ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
            return 1;
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You do not own that Car Dealership.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Car is not part of a Car Dealership.");
    }
    return 1;
}

CMD:buydealership(playerid, params[])
{
    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(!CarDealershipInfo[d][cdOwned])
			{
                if(PlayerInfo[playerid][pCash] < CarDealershipInfo[d][cdPrice])
				{
                    SendClientMessageEx(playerid, COLOR_GREY, " You do not have enough money to buy this Car Dealership.");
                    return 1;
                }
                PlayerInfo[playerid][pCash] -= CarDealershipInfo[d][cdPrice];
                SetPlayerOwnerOfCD(playerid, d);
                PlayerPlayMusic(playerid);
                SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations, On Your New Purchase.");
                SendClientMessageEx(playerid, COLOR_WHITE, "Type /help to review the new car dealership help section.");
                SendClientMessageEx(playerid, COLOR_GRAD1, " Please set the position you want your brought cars to spawn.");
                SendClientMessageEx(playerid, COLOR_GRAD2, " Stand where you want to have your brought vehicles spawn.");
                SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
                SendClientMessageEx(playerid, COLOR_WHITE, " Note: If you don't set it your customers wont be able to buy any cars.");
                SetPVarInt(playerid, "editingcdvehpos", 2);
                SetPVarInt(playerid, "editingcd", d);
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "That Car Dealership is already owned and it's not for sale.");
            }
        }
    }
    return 1;
}

CMD:selldealership(playerid, params[])
{
	new string[128];

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            if(IsPlayerOwnerOfCDEx(playerid, d) || PlayerInfo[playerid][pAdmin] >= 1337)
			{
                SetPVarInt(playerid, "editingcd", d);
                format(string,128,"Are you sure you want to sell this Car Dealership for $%d?\n", CarDealershipInfo[d][cdPrice] / 2);
                ShowPlayerDialog(playerid,DIALOG_CDSELL,DIALOG_STYLE_MSGBOX,"Warning:",string,"Sell","Cancel");
                return 1;
            }
            else
			{
                SendClientMessageEx(playerid, COLOR_GREY, "You are not the owner of this car dealership.");
                return 1;
            }
        }
    }
    SendClientMessageEx(playerid, COLOR_GREY, "You have to be near a car dealership.");
    return 1;
}

CMD:createcdveh(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], price, dealershipid, modelid;
    if(sscanf(params, "ddd", price, dealershipid, modelid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createcdveh [price] [dealership] [modelid]");

    new Float:X,Float:Y,Float:Z,Float:A;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerFacingAngle(playerid, A);
    new cdvehicleid = CreateCarDealershipVehicle(dealershipid, modelid, X, Y, Z, A, price);
    if(cdvehicleid == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: cdVehicles limit reached.");
    }
    else
	{
        format(string, sizeof(string), " Car Dealership Vehicle created with ID %d.", cdvehicleid);
        SendClientMessageEx(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroycdveh(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], vehid;
    if(sscanf(params, "d", vehid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroycdveh [vehicleid]");

    DestroyCarDealershipVehicle(GetCarDealershipId(vehid), GetCarDealershipVehicleId(vehid));
    SavecDealership(GetCarDealershipId(vehid));
    format(string, sizeof(string), " Car Dealership Vehicle destroyed with ID %d.", vehid);
    SendClientMessageEx(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:createdealership(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], price, radius, message[64];
    if(sscanf(params, "dds[64]", price, radius, message)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createdealership [price] [radius] [message]");

    new Float:X,Float:Y,Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    new dealershipid = CreateCarDealership(X, Y, Z, radius, price, message);
    if(dealershipid == -1)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Car Dealerships limit reached.");
    }
    else
	{
        format(string, sizeof(string), " Car Dealership created with ID %d.", dealershipid);
        SendClientMessageEx(playerid, COLOR_GRAD1, string);
    }
    return 1;
}

CMD:destroydealership(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

    new string[128], dealershipid;
    if(sscanf(params, "d", dealershipid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroydealership [dealershipid]");

    for(new d = 0 ; d < MAX_CARDEALERSHIPS; d++)
	{
        if(IsPlayerInRangeOfPoint(playerid, 3.0, CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		{
            DestroyCarDealership(d);
            format(string, sizeof(string), " Car Dealership destroyed with ID %d.", d);
            SendClientMessageEx(playerid, COLOR_GRAD1, string);
            return 1;
        }
    }
    if(dealershipid > MAX_CARDEALERSHIPS) return 1;
    if(dealershipid < 0) return 1;
    DestroyCarDealership(dealershipid);
    format(string, sizeof(string), " Car Dealership destroyed with ID %d.", dealershipid);
    SendClientMessageEx(playerid, COLOR_GRAD1, string);
    return 1;
}

CMD:vehid(playerid, params[])
{
    if(IsPlayerInAnyVehicle(playerid))
    {
		new string[128];
    	new idcar = GetPlayerVehicleID(playerid);
		format(string, sizeof(string), "* Vehicle Name: %s | Vehicle Model:%d | Vehicle ID: %d.",GetVehicleName(idcar), GetVehicleModel(idcar), idcar);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	return 1;
}

CMD:reloadpvehicles(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /reloadpvehicles [player]");

	UnloadPlayerVehicles(giveplayerid);
	LoadPlayerVehicles(giveplayerid);

	format(string, sizeof(string), " You have successfully reloaded %s's Vehicles.", GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GREY, string);

	return 1;
}

CMD:unloadpvehicles(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

	foreach(new i: Player)
	{
		UnloadPlayerVehicles(i);
	}
	SendClientMessageEx(playerid, COLOR_GREY,  " You have successfully unloaded all vehicles.");
	return 1;
}

CMD:loadpvehicles(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 1337)
	{
        SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
        return 1;
    }

	foreach(new i: Player)
	{
		LoadPlayerVehicles(i);
	}
	SendClientMessageEx(playerid, COLOR_GREY,  " You have successfully unloaded all vehicles.");
	return 1;
}

CMD:createpvehicle(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}

		new
			iColors[2],
			iTargetID,
			iModelID;
		if(!sscanf(params, "uiii", iTargetID, iModelID, iColors[0], iColors[1])) {
			if(!IsPlayerConnected(iTargetID)) {
			    SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid Player ID");
			}
	 		else if(!(400 <= iModelID <= 611)) {
				SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid model specified (model IDs start at 400, and end at 611).");
			}
			else if(IsRestrictedPlayerVehicle(iModelID) && PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 13338) {
				new string[84];
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not create a Restriced Vehicle for this player, Choose another ID.");
				format(string, sizeof(string), "%s attempted to create a %s (%i) for %s.", GetPlayerNameEx(playerid), VehicleName[iModelID - 400], iModelID, GetPlayerNameEx(iTargetID));
				Log("logs/playervehicle.log", string);
			}
			else if(IsATrain(iModelID)) {
				SendClientMessageEx(playerid, COLOR_GREY, "Trains cannot be spawned during runtime.");
			}
			else if(!(0 <= iColors[0] <= 255 && 0 <= iColors[1] <= 255)) {
				SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid color specified (IDs start at 0, and end at 255).");
			}
			else if(!vehicleCountCheck(iTargetID)) {
				SendClientMessageEx(playerid, COLOR_GREY, "That player can't have more vehicles - they own too many.");
			}
			else if(!vehicleSpawnCountCheck(iTargetID)) {
				SendClientMessageEx(playerid, COLOR_GREY, "That player has too many vehicles spawned - they must store one first.");
			}
			else {

				new
					Float: arr_fPlayerPos[4],
					szMessage[84];

				GetPlayerPos(iTargetID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2]);
				GetPlayerFacingAngle(iTargetID, arr_fPlayerPos[3]);
				CreatePlayerVehicle(iTargetID, GetPlayerFreeVehicleId(iTargetID), iModelID, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2], arr_fPlayerPos[3], iColors[0], iColors[1], 2000000);

				format(szMessage, sizeof(szMessage), "You have successfully created a %s for %s.", VehicleName[iModelID - 400], GetPlayerNameEx(iTargetID));
				SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s created a %s (%i) for %s.", GetPlayerNameEx(playerid), VehicleName[iModelID - 400], iModelID, GetPlayerNameEx(iTargetID));
				ABroadCast(COLOR_LIGHTRED,szMessage, 4);

				format(szMessage, sizeof(szMessage), "%s created a %s (%i) for %s.", GetPlayerNameEx(playerid), VehicleName[iModelID - 400], iModelID, GetPlayerNameEx(iTargetID));
				Log("logs/playervehicle.log", szMessage);
			}
		}
		else if(!sscanf(params, "u", iTargetID))
		{
			if(IsPlayerConnected(iTargetID))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Please note that the format can still be used: /createpvehicle [player] [model] [color 1] [color 2]");
				SendClientMessageEx(playerid, COLOR_GREY, "Otherwise, just use /createpvehicle [player]");
				GiveCarTo[playerid] = iTargetID;
				DestroySelectionMenu(playerid);
	   			SetPVarInt(playerid, "vspawner_active", 1);
			    CreateSelectionMenu(playerid);
			    SelectTextDraw(playerid, 0xACCBF1FF);

			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Please note that the format can still be used: /createpvehicle [player] [model] [color 1] [color 2]");
			SendClientMessageEx(playerid, COLOR_GREY, "Otherwise, just use /createpvehicle [player]");
			return 1;
		}

	}
	else SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
    return 1;
}

CMD:cpv(playerid, params[]) {
	return cmd_createpvehicle(playerid, params);
}

CMD:shopvest(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1 && PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, slot, invoice[64];
	if(sscanf(params, "uds[64]", giveplayerid, slot, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopvest [player] [slot(0-4)] [invoice #]");

	PlayerToyInfo[giveplayerid][slot][ptModelID] = 19142;
	PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
	PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.07998;
	PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.03999;
	PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
	PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	format(string, sizeof(string), "You have been given a police vest in slot %d, use /toys to manage it", slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "You have given %s a police vest in slot %d", GetPlayerNameEx(giveplayerid), slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPVEST] %s has given %s a police vest toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/shoplog.log", string);

	g_mysql_SaveToys(giveplayerid, slot);
	return 1;
}

CMD:listtoys(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech]) {

		new
			giveplayerid, stringg[512], string[64];

		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listtoys [player]");
		}
		else if(IsPlayerConnected(giveplayerid))
		{
		    for(new x;x<MAX_PLAYERTOYS;x++)
			{
				new name[24] = "None";

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[giveplayerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[giveplayerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[giveplayerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[giveplayerid][x][ptBone]]);
			}
			format(string, sizeof(string), "Listing %s's Toys - Select a Slot", GetPlayerNameEx(giveplayerid));
			ShowPlayerDialog(playerid, LISTTOYS_DELETETOY, DIALOG_STYLE_LIST, string, stringg, "Delete", "Cancel");
			SetPVarInt(playerid, "listtoys_giveplayerid", giveplayerid);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	return 1;
}

CMD:shoplaser(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1 && PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, slot, color[32], invoice[64];
	if(sscanf(params, "udss[64]", giveplayerid, slot, color, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shoplaser [player] [slot(0-4)] [red/green/orange/yellow/pink/blue] [invoice #]");

	if(strcmp(color,"red",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 18643;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"green",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19083;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"orange",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19082;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"yellow",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19084;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"pink",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19081;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	else if(strcmp(color,"blue",true) == 0)
	{
		PlayerToyInfo[giveplayerid][slot][ptModelID] = 19080;
		PlayerToyInfo[giveplayerid][slot][ptBone] = 6;
		PlayerToyInfo[giveplayerid][slot][ptPosX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptPosZ] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotX] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotY] = 0.0;
		PlayerToyInfo[giveplayerid][slot][ptRotZ] = 0.0;
	}
	format(string, sizeof(string), "You have been given a %s laser in slot %d, use /toys to manage it", color, slot);
	SendClientMessageEx(giveplayerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "You have given %s a %s laser in slot %d", GetPlayerNameEx(giveplayerid), color, slot);
	SendClientMessageEx(playerid, COLOR_LIGHTGREEN, string);
	format(string, sizeof(string), "[SHOPLASER] %s has given %s a laser toy - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
	Log("logs/shoplog.log", string);

	g_mysql_SaveToys(giveplayerid, slot);
	return 1;
}

CMD:permaban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /permaban [player] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s was banned, reason: Attempting to ban a higher admin.", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[playerid][pBanned] = 3;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				KickWithMessage(playerid);
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was permanently banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was permanently banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pPermaBanned] = 3;
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,"Permanently Banned",GetPlayerSQLId(playerid));
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:unpban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128], query[256], playername[MAX_PLAYER_NAME];
		if(sscanf(params, "s[24]", playername)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unpban [player name]");

		SetPVarString(playerid, "OnUnbanPlayer", playername);

		format(query, sizeof(query), "UPDATE `accounts` SET `Band`=0, `Warnings`=0, `Disabled`=0, `PermBand`=0 WHERE `Username`='%s'", playername);
		format(string, sizeof(string), "Attempting to unban %s...", playername);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		mysql_function_query(MainPipeline, query, false, "OnUnbanPlayer", "i", playerid);

		format(query, sizeof(query), "SELECT `IP` FROM `accounts` WHERE `Username`='%s'", playername);
		mysql_function_query(MainPipeline, query, true, "OnUnbanIP", "i", playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}

CMD:banaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], playername[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", playername, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /banaccount [player name] [reason]");

    new giveplayerid = ReturnUser(playername);
	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
		{
			format(string, sizeof(string), "AdmCmd: %s %s has been auto-banned, reason: Trying to /ban a higher admin.",ARank(playerid), GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,2);
			PlayerInfo[playerid][pBanned] = 1;
            new ip[32];
			GetPlayerIp(giveplayerid,ip,sizeof(ip));
			AddBan(ip);
			KickWithMessage(giveplayerid);
		}
		else
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip,ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/ban.log", string);
			SendClientMessageEx(playerid, COLOR_WHITE, "The player is online and has been banned!");
			format(string, sizeof(string), "AdmCmd: %s was banned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pBanned] = 1;
			format(PlayerInfo[giveplayerid][pFlag], 128, "");
			new ip[32];
			GetPlayerIp(giveplayerid,ip,sizeof(ip));
			AddBan(ip);
			KickWithMessage(giveplayerid);
			//MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,GetPlayerSQLId(playerid));
		}
	}
	else
	{
		new query[128] /*tmpName[24]*/;

		format(query, sizeof(query), "UPDATE `accounts` SET `Band`=1 WHERE `Username`='%s' AND `AdminLevel` < 2 AND `PermBand` < 3", playername);
		mysql_function_query(MainPipeline, query, false, "OnBanPlayer", "i", playerid);

		SetPVarString(playerid, "OnBanPlayer", playername);
		SetPVarString(playerid, "OnBanPlayerReason", reason);

		format(query,sizeof(query), "SELECT `IP` FROM `accounts` WHERE `Username`='%s'", playername);
		mysql_function_query(MainPipeline, query, true, "OnBanIP", "i", playerid);

		format(string,sizeof(string),"Attempting to ban %s...", playername);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

forward OnBanPlayer(index);
public OnBanPlayer(index)
{
	new string[128], name[24], reason[64];
	GetPVarString(index, "OnBanPlayer", name, 24);
	GetPVarString(index, "OnBanPlayerReason", reason, 64);

	if(IsPlayerConnected(index))
	{
		if(mysql_affected_rows(MainPipeline)) {
			format(string, sizeof(string), "You have successfully banned %s's account.", name);
			SendClientMessageEx(index, COLOR_WHITE, string);

			format(string, sizeof(string), "AdmCmd: %s was offline banned by %s %s, reason: %s", name,ARank(index), GetPlayerNameEx(index), reason);
			Log("logs/ban.log", string);
			format(string, 128, "AdmCmd: %s was offline banned by %s %s, reason: %s", name,ARank(index), GetPlayerNameEx(index), reason);
			ABroadCast(COLOR_LIGHTRED,string,2);
			print(string);
		}
		else {
			format(string, sizeof(string), "There was an issue with banning %s's account.", name);
			SendClientMessageEx(index, COLOR_WHITE, string);
		}
		DeletePVar(index, "OnBanPlayer");
		DeletePVar(index, "OnBanPlayerReason");
	}
	return 1;
}

forward OnBanIP(index);
public OnBanIP(index)
{
	if(IsPlayerConnected(index))
	{
		new ip[34];
		cache_get_field_content(0, "IP", ip, MainPipeline);
		AddBan(ip);
	}
	return 1;
}

CMD:ip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ip [ip]");

		new string[128], IP[32];

		foreach(new i: Player)
		{
			GetPlayerIp(i, IP, sizeof(IP));
			if(strfindex(IP, params, true) != -1)
			{
				format(string, sizeof(string), "Player: %s (ID: %d) | IP: %s", GetPlayerNameEx(i), i, IP);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
	}

	return 1;
}

CMD:unbanip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1)
	{
		//if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unbanip [ip]");
		if(sscanf(params, "s[34]")) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unbanip [ip]");
		if(IsValidIP(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "That is not a valid IP address!");

		new string[128];
		RemoveBan(params);
		format(string, 128, "AdmCmd: %s has unbanned IP %s", GetPlayerNameEx(playerid), params);
		ABroadCast(COLOR_LIGHTRED,string,2);
		format(string, sizeof(string), "AdmCmd: %s has unbanned IP %s", GetPlayerNameEx(playerid), params);
		Log("logs/ban.log", string);
		print(string);
	}

	return 1;
}
CMD:unlockveh(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new vehicleid;
		if(sscanf(params, "d", vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unlockveh [vehicle id]");

		if(IsValidVehicleID(vehicleid))
		{
			vehicle_unlock_doors(vehicleid);
			GameTextForPlayer(playerid, "~g~unlocked", 1000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid vehicle ID");
		}
	}
	return 1;
}

CMD:unban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pBanAppealer] >= 1)
	{
		new string[128], query[256], playername[MAX_PLAYER_NAME];
		//if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unban [player name]");
		if(sscanf(params, "s[24]", playername)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /unban [player name]");

		SetPVarString(playerid, "OnUnbanPlayer", playername);

		format(query, sizeof(query), "UPDATE `accounts` SET `Band`=0, `Warnings`=0, `Disabled`=0 WHERE `Username`='%s' AND `PermBand` < 3", playername);
		format(string, sizeof(string), "Attempting to unban %s...", playername);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		mysql_function_query(MainPipeline, query, false, "OnUnbanPlayer", "i", playerid);

		format(query, sizeof(query), "SELECT `IP` FROM `accounts` WHERE `Username`='%s'", playername);
		mysql_function_query(MainPipeline, query, true, "OnUnbanIP", "i", playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}

forward OnUnbanPlayer(index);
public OnUnbanPlayer(index)
{
	new string[128], playername[24];
	GetPVarString(index, "OnUnbanPlayer", playername, 24);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully unbanned %s's account.", playername);
		SendClientMessageEx(index, COLOR_WHITE, string);

		format(string, 128, "AdmCmd: %s was unbanned by %s %s.", playername,ARank(index), GetPlayerNameEx(index));
		ABroadCast(COLOR_LIGHTRED,string,2);
		format(string, sizeof(string), "AdmCmd: %s was unbanned by %s %s.", playername,ARank(index), GetPlayerNameEx(index));
		Log("logs/ban.log", string);
		print(string);
	}
	else {
		format(string, sizeof(string), "There was an issue with unbanning %s's account.", playername);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnUnbanPlayer");

	return 1;
}

forward OnUnbanIP(index);
public OnUnbanIP(index)
{
	if(IsPlayerConnected(index))
	{
        new rows, fields;
		cache_get_data(rows, fields, MainPipeline);
		if(rows) {
		    new ip[32];
			cache_get_field_content(0, "IP", ip);
			RemoveBan(ip);
		}
	}
	return 1;
}

CMD:osuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 1338 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], query[512], name[MAX_PLAYER_NAME];
	//if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /osuspend [player name]");
	if(sscanf(params, "s[24]", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /osuspend [player name]");

	SetPVarString(playerid, "OnSetSuspended", name);

	format(query,sizeof(query),"UPDATE `accounts` SET `Disabled` = 1 WHERE `Username`= '%s' AND `AdminLevel` < 1338",name);
	mysql_function_query(MainPipeline, query, false, "OnSetSuspended", "ii", playerid, true);

	format(string,sizeof(string),"Attempting to suspend %s's account.",name);
	SendClientMessageEx(playerid,COLOR_YELLOW,string);
	return 1;
}

CMD:ounsuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], query[512], name[MAX_PLAYER_NAME];
	//if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ounsuspend [player name]");
	if(sscanf(params, "s[24]", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ounsuspend [player name]");

	SetPVarString(playerid, "OnSetSuspended", name);
	format(query,sizeof(query),"UPDATE `accounts` SET `Disabled` = 0 WHERE `Username` = '%s' AND `AdminLevel` < 1338", name);
	mysql_function_query(MainPipeline, query, false, "OnSetSuspended", "ii", playerid, false);

	format(string,sizeof(string),"Attempting to unsuspend %s's account...",name);
	SendClientMessageEx(playerid,COLOR_YELLOW,string);
	return 1;
}

CMD:osetrmutes(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1338) {
	if(PlayerInfo[playerid][pAdmin] >= 1338 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
		new
			szPlayerName[MAX_PLAYER_NAME],
			iMuteCount;

		if(sscanf(params, "s[24]i", szPlayerName, iMuteCount)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /osetrmutes [player name] [mutes]");
		}
		else if(iMuteCount >= 0) {

			new
				szQuery[128];

			format(szQuery, sizeof szQuery, "UPDATE `accounts` SET `ReportMutedTotal` = %i, `ReportMuted` = 0, `ReportMutedTime` = 0 WHERE `Username` = '%s'", iMuteCount, szPlayerName);
			mysql_function_query(MainPipeline, szQuery, false, "Query_OnExecution", "ii", playerid);
			SetPVarString(playerid, "QueryEx_Name", szPlayerName);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Mutes cannot be set to less than zero.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	return 1;
}

// Use this for generic "You have successfully altered X's account" messages... no need for 578947 public functions!
forward Query_OnExecution(iTargetID);
public Query_OnExecution(iTargetID) {

	new
		szName[MAX_PLAYER_NAME],
		szMessage[64];

	GetPVarString(iTargetID, "QueryEx_Name", szName, sizeof szName);
	if(mysql_affected_rows(MainPipeline)) {
		format(szMessage, sizeof szMessage, "The query on %s's account was successful.", szName);
		SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);
	}
	else {
		format(szMessage, sizeof szMessage, "The query on %s's account was unsuccessful.", szName);
		SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);
	}
	return DeletePVar(iTargetID, "QueryEx_Name");
}

forward OnSetSuspended(index, value);
public OnSetSuspended(index, value)
{
	new string[128], name[24];
	GetPVarString(index, "OnSetSuspended", name, 24);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully %s %s's account.", ((value) ? ("suspended") : ("unsuspended")), name);
		SendClientMessageEx(index, COLOR_WHITE, string);

		format(string, sizeof(string), "AdmCmd: %s was offline %s by %s.", name, ((value) ? ("suspended") : ("unsuspended")), GetPlayerNameEx(index));
		Log("logs/ban.log", string);
	}
	else {
		format(string, sizeof(string), "There was an issue with %s %s's account.", ((value) ? ("suspending") : ("unsuspending")), name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnSetSuspended");

	return 1;
}
#if defined SHOPAUTOMATED
forward OnShopOrder(index);
public OnShopOrder(index)
{
	if(IsPlayerConnected(index))
	{
	    HideNoticeGUIFrame(index);
		new rows, fields;
		cache_get_data(rows, fields, ShopPipeline);
		if(rows > 0)
		{
		    new string[512];
		    new ipsql[16], ip[16];
	    	GetPlayerIp(index, ip, sizeof(ip));
		    mysql_fetch_field_row(ipsql, "ip", MainPipeline);
		    cache_get_field_content(0, "ip", ipsql, ShopPipeline);
		    if(!isnull(ipsql) && strcmp(ipsql, ip, true) == 0)
			{
			    new status[2], name[64], quantity[8], delivered[8], product_id[8];
			    for(new i;i<rows;i++)
			    {
	   				cache_get_field_content(i, "order_status_id", status, ShopPipeline);
			    	if(strval(status) == 2)
				    {
	    			 	cache_get_field_content(i, "name", name, ShopPipeline);
			  			cache_get_field_content(i, "quantity", quantity, ShopPipeline);
			  		    cache_get_field_content(i, "delivered", delivered, ShopPipeline);
			  			cache_get_field_content(i, "order_product_id", product_id, ShopPipeline);
				    	if(strval(quantity)-strval(delivered) <= 0)
					    {
	        				if(i<rows) format(string, sizeof(string), "%s%s (Delivered)\n", string, name);
					        else format(string, sizeof(string), "%s%s (Delivered)", string, name);
						}
						else
						{
		    				if(i<rows) format(string, sizeof(string), "%s%s (%d)\n", string, name, strval(quantity)-strval(delivered));
					    	else format(string, sizeof(string), "%s%s (%d)", string, name, strval(quantity)-strval(delivered));
						}
					}
					else
					{
					    new reason[27];
						switch(strval(status))
						{
						    case 0: format(reason, sizeof(reason), "{FF0000}No Payment");
						    case 1: format(reason, sizeof(reason), "{FF0000}Pending");
						    case 3: format(reason, sizeof(reason), "{00FF00}Shipped");
						    case 5:
							{
								ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "This order has already been delivered", "OK", "");
								return 1;
							}
			    			case 7: format(reason, sizeof(reason), "{FF0000}Cancelled");
					    	case 8: format(reason, sizeof(reason), "{FF0000}Denied");
				   			case 9: format(reason, sizeof(reason), "{FF0000}Cancelled Reversal");
					    	case 10: format(reason, sizeof(reason), "{FF0000}Failed");
						    case 11: format(reason, sizeof(reason), "{00FF00}Refundend");
						    case 12: format(reason, sizeof(reason), "{FF0000}Reversed");
						    case 13: format(reason, sizeof(reason), "{FF0000}Chargeback");
				   			default: format(reason, sizeof(reason), "{FF0000}Unknown");
						}
						format(string, sizeof(string), "We are unable to process that order at this time,\nbecause the payment is currently marked as: %s", reason);
						ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", string, "OK", "");
	  					return 1;
					}
				}
			}
			else
			{
			    new email[256];
			    cache_get_field_content(0, "email", email, ShopPipeline);
			    SetPVarString(index, "ShopEmailVerify", email);
			    ShowPlayerDialog(index, DIALOG_SHOPORDEREMAIL, DIALOG_STYLE_INPUT, "Shop Order Error", "We were unable to link your order to your IP,\nfor further verification of your identity please input your shop e-mail address:", "Submit", "Cancel");
			    return 1;
			}
			ShowPlayerDialog(index, DIALOG_SHOPORDER2, DIALOG_STYLE_LIST, "Shop Order List", string, "Select", "Cancel");
		}
		else
		{
		    ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "Error: No orders were found by that Order ID\nIf you are sure that is the correct Order ID, please try again or input '1' for your order ID.", "OK", "");
		}
	}
	return 1;
}

forward OnShopOrderEmailVer(index);
public OnShopOrderEmailVer(index)
{
	if(IsPlayerConnected(index))
	{
	    HideNoticeGUIFrame(index);
		new rows, fields;
		cache_get_data(rows, fields, ShopPipeline);
		if(rows > 0)
		{
		    new string[512];
		   	new status[2], name[64], quantity[8], delivered[8], product_id[8];
		    for(new i;i<rows;i++)
		    {
			    cache_get_field_content(i, "order_status_id", status, ShopPipeline);
				if(strval(status) == 2)
	   			{
					cache_get_field_content(i, "name", name, ShopPipeline);
	 				cache_get_field_content(i, "quantity", quantity, ShopPipeline);
		    		cache_get_field_content(i, "delivered", delivered, ShopPipeline);
	  				cache_get_field_content(i, "order_product_id", product_id, ShopPipeline);
		   			if(strval(quantity)-strval(delivered) <= 0)
				    {
	   					if(i<rows) format(string, sizeof(string), "%s%s (Delivered)\n", string, name);
	       				else format(string, sizeof(string), "%s%s (Delivered)", string, name);
					}
					else
					{
					    if(i<rows) format(string, sizeof(string), "%s%s (%d)\n", string, name, strval(quantity)-strval(delivered));
					    else format(string, sizeof(string), "%s%s (%d)", string, name, strval(quantity)-strval(delivered));
					}
				}
				else
				{
	    			new reason[27];
					switch(strval(status))
					{
	    				case 0: format(reason, sizeof(reason), "{FF0000}No Payment");
		   				case 1: format(reason, sizeof(reason), "{FF0000}Pending");
					    case 3: format(reason, sizeof(reason), "{00FF00}Shipped");
					    case 5:
						{
							ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "This order has already been delivered", "OK", "");
							return 1;
						}
			   			case 7: format(reason, sizeof(reason), "{FF0000}Cancelled");
					    case 8: format(reason, sizeof(reason), "{FF0000}Denied");
					    case 9: format(reason, sizeof(reason), "{FF0000}Cancelled Reversal");
					    case 10: format(reason, sizeof(reason), "{FF0000}Failed");
			   			case 11: format(reason, sizeof(reason), "{00FF00}Refundend");
					    case 12: format(reason, sizeof(reason), "{FF0000}Reversed");
					    case 13: format(reason, sizeof(reason), "{FF0000}Chargeback");
					    default: format(reason, sizeof(reason), "{FF0000}Unknown");
					}
					format(string, sizeof(string), "We are unable to process that order at this time,\nbecause the payment is currently marked as: %s", reason);
					ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", string, "OK", "");
	 				return 1;
				}
			}
			ShowPlayerDialog(index, DIALOG_SHOPORDER2, DIALOG_STYLE_LIST, "Shop Order List", string, "Select", "Cancel");
		}
		else
		{
		    ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "Error: No orders were found by that Order ID\nIf you are sure that is the correct Order ID, please try again or input '1' for your order ID.", "OK", "");
		}
	}
	return 1;
}

forward OnShopOrder2(index, extraid);
public OnShopOrder2(index, extraid)
{
	if(IsPlayerConnected(index))
	{
	    HideNoticeGUIFrame(index);
		new string[256];
		new rows, fields;
		cache_get_data(rows, fields, ShopPipeline);
		if(rows > 0)
		{
		    for(new i;i<rows;i++)
		    {
	  			if(i == extraid)
		    	{
	      			new status[2];
		        	cache_get_field_content(i, "status", status, ShopPipeline);
			        if(strval(status) == 2)
		        	{
			    		new order_id[8], order_product_id[8], product_id[8], name[64], price[8], user[32], quantity[8], delivered[8];
				    	cache_get_field_content(i, "order_id", order_id, ShopPipeline);
						cache_get_field_content(i, "order_product_id", order_product_id, ShopPipeline);
						cache_get_field_content(i, "product_id", product_id, ShopPipeline);
						cache_get_field_content(i, "name", name, ShopPipeline);
		  				cache_get_field_content(i, "price", price, ShopPipeline);
			  			cache_get_field_content(i, "deliveruser", user, ShopPipeline);
			  			cache_get_field_content(i, "quantity", quantity, ShopPipeline);
			  			cache_get_field_content(i, "delivered", delivered, ShopPipeline);

						format(string, sizeof(string), "Order ID: %d\nProduct ID: %d\nProduct: %s\nPrice: %s\nName: %s\nQuantity: %d", \
						strval(order_id), strval(order_product_id), name, price, user, strval(quantity)-strval(delivered));

						SetPVarInt(index, "DShop_order_id", strval(order_id));
						SetPVarInt(index, "DShop_product_id", strval(product_id));
						SetPVarString(index, "DShop_name", name);
						SetPVarInt(index, "DShop_quantity", strval(quantity)-strval(delivered));

						ShowPlayerDialog(index, DIALOG_SHOPDELIVER, DIALOG_STYLE_LIST, "Shop Order Info", string, "Deliver", "Cancel");
						return 1;
					}
					else
					{
						new reason[27];
						switch(strval(status))
						{
						    case 0: format(reason, sizeof(reason), "{FF0000}No Payment");
						    case 1: format(reason, sizeof(reason), "{FF0000}Pending");
						    case 3: format(reason, sizeof(reason), "{00FF00}Shipped");
						    case 5:
							{
								ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "This order has already been delivered", "OK", "");
								return 1;
							}
				   			case 7: format(reason, sizeof(reason), "{FF0000}Cancelled");
						    case 8: format(reason, sizeof(reason), "{FF0000}Denied");
						    case 9: format(reason, sizeof(reason), "{FF0000}Cancelled Reversal");
						    case 10: format(reason, sizeof(reason), "{FF0000}Failed");
						    case 11: format(reason, sizeof(reason), "{00FF00}Refundend");
						    case 12: format(reason, sizeof(reason), "{FF0000}Reversed");
						    case 13: format(reason, sizeof(reason), "{FF0000}Chargeback");
						    default: format(reason, sizeof(reason), "{FF0000}Unknown");
						}
						format(string, sizeof(string), "We are unable to process that order at this time,\nbecause the payment is currently marked as: %s", reason);
						ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", string, "OK", "");
	  					return 1;
					}
				}
			}
		}
		else
		{
		    ShowPlayerDialog(index, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "Error: No orders were found by that Order ID\nIf you are sure that is the correct Order ID, please try again or input '1' for your order ID.", "OK", "");
		}
	}
	return 1;
}
#endif

CMD:destroycar(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(IsPlayerInAnyVehicle(playerid)) {
			for(new i = 0; i < sizeof(CreatedCars); ++i) if(CreatedCars[i] == GetPlayerVehicleID(playerid)) {
				DestroyVehicle(CreatedCars[i]);
				CreatedCars[i] = INVALID_VEHICLE_ID;
				return SendClientMessageEx(playerid, COLOR_GREY, "You have successfully despawned this vehicle.");
			}
			SendClientMessageEx(playerid, COLOR_GRAD1, "This vehicle is not admin-spawned.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in any vehicle.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:setfightstyle(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid, fightstyle;
		if(sscanf(params, "ud", giveplayerid, fightstyle))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setfightstyle [player] [fightstyle]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available fighting styles: 4, 5, 6, 7, 15, 26.");
			return 1;
		}

		if(fightstyle > 3 && fightstyle < 8 || fightstyle == 15 || fightstyle == 26)
		{
			format(string, sizeof(string), " Your fighting style has been changed to %d.", fightstyle);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " You have changed %s's fighting style to %d.", GetPlayerNameEx(giveplayerid), fightstyle);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			SetPlayerFightingStyle(giveplayerid, fightstyle);
			PlayerInfo[playerid][pFightStyle] = fightstyle;
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setinsurance(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, insurance;
		if(sscanf(params, "ud", giveplayerid, insurance))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setinsurance [player] [insurance]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Insurances: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9");
			return 1;
		}

		if(insurance >= 0 && insurance <= 9)
		{
			format(string, sizeof(string), " Your insurance has been changed to %d.", insurance);
			SendClientMessageEx(giveplayerid,COLOR_YELLOW,string);
			format(string, sizeof(string), " You have changed %s's insurance to %d.", GetPlayerNameEx(giveplayerid), insurance);
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			PlayerInfo[giveplayerid][pInsurance] = insurance;
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setmyname(playerid, params[])
{
	if (PlayerInfo[playerid][pUndercover] == 1 || PlayerInfo[playerid][pAdmin] == 99999)
	{
	new string[128], query[128], name[MAX_PLAYER_NAME];
	if(sscanf(params, "s[24]", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setmyname [newname]");

		if(GetPVarInt(playerid, "TempName") == 0)
		{
		    if(strlen(params) > 20) return SendClientMessageEx( playerid, COLOR_WHITE, "You can't select a name that's above 20 characters." );
			//new tmpName[24];

			format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `Username`='%s'", name);
			SetPVarString(playerid, "OnSetMyName", name);
			mysql_function_query(MainPipeline, query, true, "OnSetMyName", "i", playerid);
		}
		else
		{
			//new name[MAX_PLAYER_NAME];
			GetPVarString(playerid, "TempNameName", name, sizeof(name));
			if(strlen(name) > 0)
			{
				SetPlayerName(playerid, name);
				SetPVarInt(playerid, "TempName", 0);
				format(string, sizeof(string), "You changed your name back to %s.", name);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_GRAD2, "NOTE: Your stats will now save again.");
			}
		}
	} else
	{
	SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have permission to do this.");
	}
	return 1;
}

forward OnSetMyName(index);
public OnSetMyName(index)
{
	if(IsPlayerConnected(index))
	{
		new rows, fields;
		cache_get_data(rows, fields, MainPipeline);
		if(!rows)
		{
			new string[128], tmpName[24];
			GetPVarString(index, "OnSetMyName", tmpName, 24);

			new name[MAX_PLAYER_NAME];
			GetPlayerName(index, name, sizeof(name));
			SetPVarString(index, "TempNameName", name);
			if(strlen(tmpName) > 0)
			{
				SetPlayerName(index, tmpName);
				format(string, sizeof(string), "%s has changed their name to %s.", name, tmpName);
				Log("logs/undercover.log", string);
				DeletePVar(index, "OnSetMyName");

				format(string, sizeof(string), "You have temporarily set your name to %s.", tmpName);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				SendClientMessageEx(index, COLOR_GRAD2, "NOTE: None of your stats will save until you type this command again.");
				SetPVarInt(index, "TempName", 1);
			}
		}
		else
		{
			SendClientMessageEx(index, COLOR_WHITE, "This name is already registered.");
		}
	}
	else
	{
		DeletePVar(index, "OnSetMyName");
	}
	return 1;
}

CMD:nchange(playerid, params[]) return cmd_namechanges(playerid, params);

CMD:namechanges(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
 	{

		new
			nstring[64 + (MAX_PLAYER_NAME * 2)],
			newname[ MAX_PLAYER_NAME ];

  		SendClientMessageEx(playerid, COLOR_GREEN, "* Pending name changes:");
		SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
   		foreach(Player, i)
		{
			if(GetPVarType(i, "RequestingNameChange"))
			{
  				GetPVarString(i, "NewNameRequest", newname, MAX_PLAYER_NAME);
				format(nstring, sizeof(nstring), "Current name: %s (ID: %d) | Requested name: %s | Price: %d", GetPlayerNameEx(i), i, newname, GetPVarInt(i, "NameChangeCost"));
				SendClientMessageEx(playerid, COLOR_YELLOW, nstring);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
	}
	return 1;
}

CMD:setname(playerid, params[])
{
	new giveplayerid, name[MAX_PLAYER_NAME];
	if(sscanf(params, "us[24]", giveplayerid, name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /setname [playerid] [newname]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 4)
		{
		    if(strlen(name) > 20) return SendClientMessageEx( playerid, COLOR_WHITE, "You can't select a name that's above 20 characters." );
			new query[128] /*tmpName[MAX_PLAYER_NAME]*/;
			if(strcmp(name, name, false) == 0)
			{
	   			SetPVarString(playerid, "OnSetName", name);

				format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `Username`='%s'", name);
				mysql_function_query(MainPipeline, query, true, "OnSetName", "ii", playerid, giveplayerid);
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid characters!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorised to use this command.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "No Such Player");
	}
	return 1;
}

forward OnSetName(index, extraid);
public OnSetName(index, extraid)
{
	if(IsPlayerConnected(index))
	{
		if(IsPlayerConnected(extraid))
		{
		    new rows, fields;
			cache_get_data(rows, fields, MainPipeline);
			if(rows < 1)
			{
				new string[128], tmpName[24], playername[24];
				GetPVarString(index, "OnSetName", tmpName, 24);

				GetPlayerName(extraid, playername, sizeof(playername));

				if(PlayerInfo[extraid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[extraid][pPhousekey]][hOwner], true) == 0)
				{
					strmid(HouseInfo[PlayerInfo[extraid][pPhousekey]][hOwner], tmpName, 0, strlen(tmpName), 255);
					format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[extraid][pPhousekey]][hLevel],PlayerInfo[extraid][pPhousekey]);
					UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pPhousekey]][hTextID], COLOR_GREEN, string);
				}

				if(PlayerInfo[extraid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[extraid][pPhousekey2]][hOwner], true) == 0)
				{
					strmid(HouseInfo[PlayerInfo[extraid][pPhousekey2]][hOwner], tmpName, 0, strlen(tmpName), 255);
					format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[extraid][pPhousekey2]][hLevel],PlayerInfo[extraid][pPhousekey2]);
					UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pPhousekey2]][hTextID], COLOR_GREEN, string);
				}

				if(PlayerInfo[extraid][pDonateRank] >= 1)
				{
					new string2[128];
					format(string2, sizeof(string2), "[VIP NAMECHANGES] %s has changed their name to %s.", GetPlayerNameEx(extraid), tmpName);
					Log("logs/vipnamechanges.log", string2);
				}

				if(strlen(tmpName) > 0)
				{
					format(string, sizeof(string), " Your name has been changed from %s to %s.", GetPlayerNameEx(extraid), tmpName);
					SendClientMessageEx(extraid,COLOR_YELLOW,string);
					format(string, sizeof(string), " You have changed %s's name to %s.", GetPlayerNameEx(extraid), tmpName);
					SendClientMessageEx(index,COLOR_YELLOW,string);
					format(string, sizeof(string), "%s changed %s's name to %s",GetPlayerNameEx(index),GetPlayerNameEx(extraid),tmpName);
					Log("logs/setname.log", string);
					format(string, sizeof(string), "UPDATE `accounts` SET `Username`='%s' WHERE `Username`='%s'", tmpName, playername);
					mysql_function_query(MainPipeline, string, true, "OnSetNameTwo", "ii", index, extraid);
					SetPlayerName(extraid, tmpName);
					OnPlayerStatsUpdate(extraid);

					for(new dealershipIndex; dealershipIndex < MAX_CARDEALERSHIPS; dealershipIndex++)
					{
						if(IsPlayerOwnerOfCDEx(extraid, dealershipIndex))
						{
							format(CarDealershipInfo[dealershipIndex][cdOwner], MAX_PLAYER_NAME, tmpName);
							format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipIndex][cdMessage], CarDealershipInfo[dealershipIndex][cdOwner], CarDealershipInfo[dealershipIndex][cdRadius], dealershipIndex);
							UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipIndex][cdTextLabel], COLOR_GREEN, string);
						}
					}
				}
			}
		}
	}
	DeletePVar(index, "OnSetName");
	return 1;
}

forward OnSetNameTwo(index, extraid);
public OnSetNameTwo(index, extraid)
{
	return 1;
}

CMD:togchatreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2) {

	    if(GetPVarType(playerid, "TogReports")) {

	        DeletePVar(playerid, "TogReports");
	        SendClientMessageEx(playerid, COLOR_WHITE, "You will now see all reports.");
	    }
	    else {
	        SetPVarInt(playerid, "TogReports", 1);
	        SendClientMessageEx(playerid, COLOR_WHITE, "You will now see priority reports only.");
	    }
	}
	return 1;
}

CMD:togreports(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] == 1)
	{
		switch(PlayerInfo[playerid][pTogReports])
		{
		case 0:
			{
				PlayerInfo[playerid][pTogReports] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have went into spec ops mode, you will be unable to see admin messages.");
			}
		case 1:
			{
				PlayerInfo[playerid][pTogReports] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now out of spec ops mode, you will be able to see admin messages.");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorized to use this command.");
	}
	return 1;
}

CMD:approvename(playerid, params[])
{
	new query[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /approvename [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(GetPVarInt(giveplayerid, "RequestingNameChange") == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player isn't requesting a namechange!");
				return 1;
			}
			new newname[MAX_PLAYER_NAME] /*tmpName[24]*/;
			GetPVarString(giveplayerid, "NewNameRequest", newname, MAX_PLAYER_NAME);
			SetPVarString(giveplayerid, "NewNameRequest", newname);

			format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `Username`='%s'", newname);
			mysql_function_query(MainPipeline, query, true, "OnApproveName", "ii", playerid, giveplayerid);

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorized to use this command.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "No Such Player");
	}
	return 1;
}

forward OnApproveName(index, extraid);
public OnApproveName(index, extraid)
{
	if(IsPlayerConnected(extraid))
	{
		new string[128];
		new rows, fields;
		cache_get_data(rows, fields, MainPipeline);
		if(rows < 1)
		{
			new newname[24], oldname[24];
			GetPVarString(extraid, "NewNameRequest", newname, 24);
			GetPlayerName(extraid, oldname, sizeof(oldname));

			if(PlayerInfo[extraid][pPhousekey] != INVALID_HOUSE_ID && strcmp(oldname, HouseInfo[PlayerInfo[extraid][pPhousekey]][hOwner], true) == 0)
			{
				format(HouseInfo[PlayerInfo[extraid][pPhousekey]][hOwner], MAX_PLAYER_NAME, "%s", newname);
				format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[extraid][pPhousekey]][hLevel],PlayerInfo[extraid][pPhousekey]);
				UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pPhousekey]][hTextID], COLOR_GREEN, string);
				SaveHouse(PlayerInfo[extraid][pPhousekey]);
			}

			if(PlayerInfo[extraid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(oldname, HouseInfo[PlayerInfo[extraid][pPhousekey2]][hOwner], true) == 0)
			{
				format(HouseInfo[PlayerInfo[extraid][pPhousekey2]][hOwner], MAX_PLAYER_NAME, "%s", newname);
				format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[extraid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[extraid][pPhousekey2]][hLevel],PlayerInfo[extraid][pPhousekey2]);
				UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[extraid][pPhousekey2]][hTextID], COLOR_GREEN, string);
				SaveHouse(PlayerInfo[extraid][pPhousekey2]);
			}

			if(PlayerInfo[extraid][pDonateRank] >= 1)
			{
				format(string, sizeof(string), "[VIP NAMECHANGES] %s has changed their name to %s.", GetPlayerNameEx(extraid), newname);
				Log("logs/vipnamechanges.log", string);
			}
			if(PlayerInfo[extraid][pMember] == 2 || PlayerInfo[extraid][pMember] == 8|| PlayerInfo[extraid][pMember] == 16)
			{
				if(strlen(newname) > 0)
				{
					format(string, sizeof(string), " Your name has been changed from %s to %s for free (hitman or FBI).", GetPlayerNameEx(extraid), newname);
					SendClientMessageEx(extraid,COLOR_YELLOW,string);
					format(string, sizeof(string), " You have changed %s's name to %s at no cost.", GetPlayerNameEx(extraid), newname);
					SendClientMessageEx(index,COLOR_YELLOW,string);
					format(string, sizeof(string), "%s changed \"%s\"s name to \"%s\" (id: %i)  for free (hitman or FBI).",GetPlayerNameEx(index),GetPlayerNameEx(extraid),newname, GetPlayerSQLId(extraid));
					Log("logs/namechange.log", string);
					format(string, sizeof(string), "%s has approved %s's name change to %s at no cost (hitman or FBI).",GetPlayerNameEx(index),GetPlayerNameEx(extraid), newname);
					ABroadCast(COLOR_YELLOW, string, 3);

					format(string, sizeof(string), "UPDATE `accounts` SET `Username`='%s' WHERE `Username`='%s'", newname, oldname);
					mysql_function_query(MainPipeline, string, true, "OnApproveSetName", "ii", index, extraid);

					for(new dealershipIndex; dealershipIndex < MAX_CARDEALERSHIPS; dealershipIndex++)
					{
						if(IsPlayerOwnerOfCDEx(extraid, dealershipIndex))
						{
							format(CarDealershipInfo[dealershipIndex][cdOwner], MAX_PLAYER_NAME, newname);
							format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipIndex][cdMessage], CarDealershipInfo[dealershipIndex][cdOwner], CarDealershipInfo[dealershipIndex][cdRadius], dealershipIndex);
							UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipIndex][cdTextLabel], COLOR_GREEN, string);
						}
					}

					SetPlayerName(extraid, newname);

					DeletePVar(extraid, "RequestingNameChange");
				}
			}
			else if(PlayerInfo[extraid][pAdmin] == 1 && PlayerInfo[extraid][pSMod] > 0)
			{
				if(strlen(newname) > 0)
				{
					format(string, sizeof(string), " Your name has been changed from %s to %s for free (Senior Mod).", GetPlayerNameEx(extraid), newname);
					SendClientMessageEx(extraid,COLOR_YELLOW,string);
					format(string, sizeof(string), " You have changed %s's name to %s at no cost.", GetPlayerNameEx(extraid), newname);
					SendClientMessageEx(index,COLOR_YELLOW,string);
					format(string, sizeof(string), "%s changed \"%s\"s name to \"%s\" (id: %i) for free (Senior Mod).",GetPlayerNameEx(index),GetPlayerNameEx(extraid),newname, GetPlayerSQLId(extraid));
					Log("logs/namechange.log", string);
					format(string, sizeof(string), "%s has approved %s's name change to %s at no cost (Senior Mod).",GetPlayerNameEx(index),GetPlayerNameEx(extraid), newname);
					ABroadCast(COLOR_YELLOW, string, 3);

					format(string, sizeof(string), "UPDATE `accounts` SET `Username`='%s' WHERE `Username`='%s'", newname, oldname);
					mysql_function_query(MainPipeline, string, true, "OnApproveSetName", "ii", index, extraid);

					for(new dealershipIndex; dealershipIndex < MAX_CARDEALERSHIPS; dealershipIndex++)
					{
						if(IsPlayerOwnerOfCDEx(extraid, dealershipIndex))
						{
							format(CarDealershipInfo[dealershipIndex][cdOwner], MAX_PLAYER_NAME, newname);
							format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipIndex][cdMessage], CarDealershipInfo[dealershipIndex][cdOwner], CarDealershipInfo[dealershipIndex][cdRadius], dealershipIndex);
							UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipIndex][cdTextLabel], COLOR_GREEN, string);
						}
					}

					SetPlayerName(extraid, newname);

					DeletePVar(extraid, "RequestingNameChange");
				}
			}
			else
			{
				if(GetPVarInt(extraid, "NameChangeCost") == 0)
				{
					if(strlen(newname) > 0)
					{
						format(string, sizeof(string), " Your name has been changed from %s to %s for free (non-RP name).", GetPlayerNameEx(extraid), newname);
						SendClientMessageEx(extraid,COLOR_YELLOW,string);
						format(string, sizeof(string), " You have changed %s's name to %s for free (non-RP name).", GetPlayerNameEx(extraid), newname);
						SendClientMessageEx(index,COLOR_YELLOW,string);
						format(string, sizeof(string), "%s changed \"%s\"s name to \"%s\" (id: %i) for free (non-RP name).",GetPlayerNameEx(index),GetPlayerNameEx(extraid),newname, GetPlayerSQLId(extraid));
						Log("logs/namechange.log", string);
						format(string, sizeof(string), "%s has approved %s's name change to %s for free (non-RP name).",GetPlayerNameEx(index),GetPlayerNameEx(extraid), newname);
						ABroadCast(COLOR_YELLOW, string, 3);

						format(string, sizeof(string), "UPDATE `accounts` SET `Username`='%s' WHERE `Username`='%s'", newname, oldname);
						mysql_function_query(MainPipeline, string, true, "OnApproveSetName", "ii", index, extraid);

						for(new dealershipIndex; dealershipIndex < MAX_CARDEALERSHIPS; dealershipIndex++)
						{
							if(IsPlayerOwnerOfCDEx(extraid, dealershipIndex))
							{
								format(CarDealershipInfo[dealershipIndex][cdOwner], MAX_PLAYER_NAME, newname);
								format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipIndex][cdMessage], CarDealershipInfo[dealershipIndex][cdOwner], CarDealershipInfo[dealershipIndex][cdRadius], dealershipIndex);
								UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipIndex][cdTextLabel], COLOR_GREEN, string);
							}
						}

						SetPlayerName(extraid, newname);

						DeletePVar(extraid, "RequestingNameChange");
					}
				}
				else
				{
					if(strlen(newname) > 0)
					{
						GivePlayerCash(extraid, -GetPVarInt(extraid, "NameChangeCost"));
						format(string, sizeof(string), " Your name has been changed from %s to %s for $%d.", GetPlayerNameEx(extraid), newname, GetPVarInt(extraid, "NameChangeCost"));
						SendClientMessageEx(extraid,COLOR_YELLOW,string);
						format(string, sizeof(string), " You have changed %s's name to %s for $%d.", GetPlayerNameEx(extraid), newname, GetPVarInt(extraid, "NameChangeCost"));
						SendClientMessageEx(index,COLOR_YELLOW,string);
						format(string, sizeof(string), "%s changed \"%s\"s name to \"%s\" (id: %i) for $%d",GetPlayerNameEx(index),GetPlayerNameEx(extraid),newname, GetPlayerSQLId(extraid), GetPVarInt(extraid, "NameChangeCost"));
						Log("logs/namechange.log", string);
						format(string, sizeof(string), "%s has approved %s's name change to %s for $%d",GetPlayerNameEx(index),GetPlayerNameEx(extraid), newname, GetPVarInt(extraid, "NameChangeCost"));
						ABroadCast(COLOR_YELLOW, string, 3);

						format(string, sizeof(string), "UPDATE `accounts` SET `Username`='%s' WHERE `Username`='%s'", newname, oldname);
						mysql_function_query(MainPipeline, string, true, "OnApproveSetName", "ii", index, extraid);

						for(new dealershipIndex; dealershipIndex < MAX_CARDEALERSHIPS; dealershipIndex++)
						{
							if(IsPlayerOwnerOfCDEx(extraid, dealershipIndex))
							{
								format(CarDealershipInfo[dealershipIndex][cdOwner], MAX_PLAYER_NAME, newname);
								format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipIndex][cdMessage], CarDealershipInfo[dealershipIndex][cdOwner], CarDealershipInfo[dealershipIndex][cdRadius], dealershipIndex);
								UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipIndex][cdTextLabel], COLOR_GREEN, string);
							}
						}

						SetPlayerName(extraid, newname);

						DeletePVar(extraid, "RequestingNameChange");
					}
				}
			}
		}
		else
		{
			SendClientMessageEx(extraid, COLOR_GRAD2, "That name already exists, please choose a different one.");
			SendClientMessageEx(index, COLOR_GRAD2, "That name already exists.");
			DeletePVar(extraid, "RequestingNameChange");
			return 1;
		}
	}
	return 1;
}

CMD:denyname(playerid, params[])
{

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /denyname [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			if(GetPVarInt(giveplayerid, "RequestingNameChange") == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player isn't requesting a namechange!");
				return 1;
			}

			SendClientMessageEx(giveplayerid,COLOR_YELLOW," Your name change request has been denied.");
			format(string, sizeof(string), " You have denied %s's name change request.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			format(string, sizeof(string), "%s has denied %s's name change request",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW, string, 3);
			DeletePVar(giveplayerid, "RequestingNameChange");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You aren't authorized to use this command.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "No Such Player");
	}
	return 1;
}

CMD:startfire(playerid, params[])
{
	new string[128];
   if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
        StartRandomFire();
        format(string, sizeof(string), "AdmCmd: %s has started a random fire.", GetPlayerNameEx(playerid));
        ABroadCast(COLOR_LIGHTRED, string, 2);
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
    }
    return 1;
}

CMD:crash(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

    new
        id;
    if(sscanf(params, "ud", id)) return SendClientMessage(playerid, -1, "USE: /crash [ID]");
    if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "Player not connected.");
    GameTextForPlayer(id, "%%$#@1~555#",66666000, 6);
    return 1;
}

CMD:20(playerid, params[])
{
    if(IsACop(playerid))
	{
		if (Pursuit[playerid] != 1)
		{
			new
			zone[MAX_ZONE_NAME],
			string[128 + MAX_PLAYER_NAME],
			Float:x,Float:y,Float:z;

			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof(string), "* %s requests pursuit backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "DISPATCH: Pursuit is in progress on behalf of %s, his 10-20 is %s, over.", GetPlayerNameEx(playerid), zone);
            Pursuit[playerid] = 1;
			for(new i = 0;i < MAX_PLAYERS; i++)
			{
				if(PlayerInfo[i][pMember] == 1 || PlayerInfo[i][pLeader] == 1 || PlayerInfo[i][pMember] == 7 || PlayerInfo[i][pLeader] == 7)
				{
					GetPlayerPos(playerid, x, y, z);
					SetAllCopCheckpoint(x, y-5, z, 5.0);
					SendClientMessageEx(i, COLOR_DBLUE, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /c20 to remove your pursuit.");
			SetTimerEx("Update20",4000,1,"i",playerid);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in Law Enforcement!");
	}
	return 1;
}



CMD:c20(playerid, params[])
{
 if (Pursuit[playerid] == 1)
   {
	Pursuit[playerid] = 0;
	 {
		for(new i = 0;i < MAX_PLAYERS; i++)
		{
			if(IsACop(playerid))
			{
				new string[128];
				format(string, sizeof(string), "DISPATCH: Pursuit has been terminated, situation is Code 4. No further");
				SendClientMessageEx(i, COLOR_DBLUE, string);
				DisablePlayerCheckpoint(i);
			}
		 }
	  }
   }
 return 1;
}

CMD:42(playerid, params[])
{
    if(IsACop(playerid))
	{
			new
			zone[MAX_ZONE_NAME],
			string[128 + MAX_PLAYER_NAME],
			Float:x,Float:y,Float:z;

			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof(string), "* %s requests medical assistance over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "DISPATCH: %s is requesting medical assistance, his 10-20 is %s, over.", GetPlayerNameEx(playerid), zone);
			for(new i = 0;i < MAX_PLAYERS; i++)
			{
				if(IsAMedic(playerid))
				{
					GetPlayerPos(playerid, x, y, z);
					SetAllMedicCheckpoint(x, y-5, z, 5.0);
					SendClientMessageEx(i, DEPTRADIO, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /c42 to remove your assistance call.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in Law Enforcement");
	}
	return 1;
}


CMD:c42(playerid, params[])
{
	new string[128];
   	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
	{
	    format(string, sizeof(string), "DISPATCH: Medical Assistance has been cancelled, situation is Code 4. No further");
		SendClientMessageEx(playerid, DEPTRADIO, string);
	  	for(new i = 0;i < MAX_PLAYERS; i++)
		{
			if(IsAMedic(playerid))
			{
				format(string, sizeof(string), "DISPATCH: Medical Assistance has been cancelled, situation is Code 4. No further");
				SendClientMessageEx(i, DEPTRADIO, string);
				DisablePlayerCheckpoint(i);
			}
	 	}
  	}
	return 1;
}

CMD:blowup(playerid, params[])
{
	new string[128], giveplayerid, szMessage[128];
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /blowup [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 1338)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has exploded %s (ID: %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), giveplayerid);
				ABroadCast(COLOR_LIGHTRED,szMessage, 4);
				format(string, sizeof(string), "AdmCmd: %s has exploded %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				Log("logs/blowup.log", string);
				format(string, sizeof(string), "You have successfuly exploded %s (ID: %d).",GetPlayerNameEx(giveplayerid),giveplayerid);
				SendClientMessageEx(playerid,COLOR_GRAD2,string);
				new Float:boomx, Float:boomy, Float:boomz;
				GetPlayerPos(giveplayerid,boomx, boomy, boomz);
				CreateExplosion(boomx, boomy , boomz, 7, 1);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
		}
	}
	return 1;
}

CMD:givenos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givenos [player]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(!IsPlayerConnected(giveplayerid)) return 1;
		if(IsPlayerInAnyVehicle(giveplayerid))
		{
			new VehicleID = GetPlayerVehicleID(giveplayerid), Model = GetVehicleModel(VehicleID);
			switch(Model)
			{
			case 448,461,462,463,468,471,509,510,521,522,523,581,586,449: return
				SendClientMessageEx(playerid,COLOR_GRAD1,"ERROR: You can not tune this vehicle!");
			}
			AddVehicleComponent(VehicleID, 1010); PlayerPlaySound(giveplayerid,1133,0.0,0.0,0.0);//NOS
			format(string, sizeof(string), " Successfully added nos to %s's vehicle.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_GRAD1,string);
		}
		else
		{
			SendClientMessageEx(playerid,COLOR_GRAD1,"ERROR: Player must be in a vehicle.");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_GRAD1,"You are not authorized to use that command.");
	}
	return 1;
}

CMD:countdown(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		SetTimer("Three", 1000, 0);
		SetTimer("Two", 2000, 0);
		SetTimer("One", 3000, 0);
		SetTimer("GoGoGo", 4000, 0);
	}
	return 1;
}

CMD:reporttips(playerid, params[])
{
	ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
	return 1;
}

CMD:updates(playerid, params[])
{ return cmd_changes(playerid, params); }

CMD:changes(playerid, params[])
{// USE THE FUCKING FORMAT OR DIE.
	SendClientMessageEx(playerid, -1, "______________________________________________");
	SendClientMessageEx(playerid, -1, ""SERVER_GM_TEXT"");
	SendClientMessageEx(playerid, -1, "* {00FF00}Added{FFFFFF} Reward Play (has to be activated to be used)");
	SendClientMessageEx(playerid, -1, "** {00FF00}Fixed{FFFFFF} Cuff system does not cuff the officer anymore.");
	SendClientMessageEx(playerid, -1, "** {FFFF00}Adjusted{FFFFFF} FDSA can now see the checkpoint for the fire.");
	SendClientMessageEx(playerid, -1, "** {FFFF00}Adjusted{FFFFFF} Website name edited to 'www.evolution-rp.net'");
	SendClientMessageEx(playerid, -1, "* {FFFF00}Adjusted{FFFFFF} Priority Reporting for Gold VIP+ and Can report when Reporting is Disabled.");
	SendClientMessageEx(playerid, COLOR_YELLOW, "The two '**' represent a newer feature and '*' is not recently added.");
	SendClientMessageEx(playerid, -1, "______________________________________________");
	return 1;
}

CMD:credits(playerid, params[])
{// USE THE FUCKING FORMAT OR DIE.
	SendClientMessageEx(playerid, -1, "______________________________________________");
	SendClientMessageEx(playerid, -1, ""SERVER_GM_TEXT"");
	SendClientMessageEx(playerid, -1, "Special thanks to the NGRP Dev Team for most of the code.");
	SendClientMessageEx(playerid, -1, "______________________________________________");
	return 1;
}

/*
{FFFFFF}white
{FF0000}bright red
{00FF00}lime
{FFFF00}yellow
*/

CMD:achanges(playerid, params[])
{
	new string[128];

	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________________");
		format(string, sizeof(string), "%s: %s", SERVER_SHORTNAME, SERVER_GM_TEXT);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
		SendClientMessageEx(playerid, COLOR_WHITE, "* When doing certain commands it will notify others you doing so.");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Priority Reports Will notify you every 15 seconds when not answered to.");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Reports exipre after 5 minues (Was adding up how long it was pending for so it was changed).");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Added /resetinfractions for Lead Management+");
		SendClientMessageEx(playerid, COLOR_WHITE, "* Adjusted coloring in admin texts.");
		SendClientMessageEx(playerid, COLOR_YELLOW, "______________________________________________");
	}
	return 1;
}


CMD:ipwhitelist(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], query[256], giveplayer[MAX_PLAYER_NAME], ip[16];
		if(sscanf(params, "s[24]s[16]", giveplayer, ip))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ipwhitelist [admin name] [IP]");
			return 1;
		}

		//new tmpName[24], tmpIP[16];
		SetPVarString(playerid, "OnIPWhitelist", giveplayer);

		format(query, sizeof(query), "UPDATE `accounts` SET `SecureIP`='%s' WHERE `Username`='%s' AND `AdminLevel` <= %d", ip, giveplayer, PlayerInfo[playerid][pAdmin]);
		mysql_function_query(MainPipeline, query, false, "OnIPWhitelist", "i", playerid);

		format(string, sizeof(string), "Attempting to whitelist %s on %s's account...", ip, giveplayer);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	}
	return 1;
}

forward OnIPWhitelist(index);
public OnIPWhitelist(index)
{
	new string[128], name[24];
	GetPVarString(index, "OnIPWhitelist", name, 24);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully whitelisted %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	else {
		format(string, sizeof(string), "There was a issue with whitelisting %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnIPWhitelist");

	return 1;
}

CMD:setcapping(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {
		if(isnull(params)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setcapping [ping]");
		}

		new
			iPingas = strval(params);

		if(!(250 <= iPingas <= 1000)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "The specified ping limit can not be lower than 250 or higher than 1000.");
		}

		new
			szMessage[58 + MAX_PLAYER_NAME];

		format(szMessage, sizeof(szMessage), "AdmCmd: %s has adjusted the /capture ping limit to %d.", GetPlayerNameEx(playerid), iPingas);
		ABroadCast(COLOR_LIGHTRED, szMessage, 4);
		pointpinglimit = iPingas;
	}
	return 1;
}

CMD:hospital(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(PlayerInfo[playerid][pHospital] > 0)
		{
			DeletePVar(playerid, "HospitalTimer");
			HospitalSpawn(playerid);
			PlayerInfo[playerid][pHospital] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the hospital!");
		}
	}
	return 1;
}

CMD:revive(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revive [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " You have revived %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been revived by an Admin.");

				KillEMSQueue(giveplayerid);
   				ClearAnimations(giveplayerid);
   				SetPlayerHealth(giveplayerid, 100);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:forcedeath(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /forcedeath [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "Injured") == 1)
			{
				format(string, sizeof(string), " You have forced %s to death.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been forced to death by an Admin.");
				KillEMSQueue(giveplayerid);
				ResetPlayerWeaponsEx(giveplayerid);
				SpawnPlayer(giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not injured!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:forcehospital(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /forcehospital [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pHospital] > 0)
			{
				format(string, sizeof(string), " You have forced %s out of the hospital.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have been forced out of the hospital by an Admin.");
				DeletePVar(giveplayerid, "HospitalTimer");
				HospitalSpawn(giveplayerid);
				PlayerInfo[giveplayerid][pHospital] = 0;
				DeletePVar(giveplayerid, "MedicBill");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not in the hospital!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sendtols(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sendtols [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (PlayerInfo[giveplayerid][pAdmin] >= 1337)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You can not use that command on that level admin!");
				return 1;
			}
			format(string, sizeof(string), " You have sent %s to Los Santos.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerPosEx(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pInt] = 0;
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sendtosf(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sendtosf [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (PlayerInfo[giveplayerid][pAdmin] >= 1337)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You can not use that command on that level admin!");
				return 1;
			}
			format(string, sizeof(string), " You have sent %s to San Fierro.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerPosEx(giveplayerid, -2015.261108, 154.379516, 27.687500);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pInt] = 0;
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sendtovip(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sendtovip [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (PlayerInfo[giveplayerid][pAdmin] >= 1337)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You can not use that command on that level admin!");
				return 1;
			}
			format(string, sizeof(string), " You have sent %s to VIP.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
			SetPlayerPosEx(giveplayerid, 1814.42, -1575.05, 13.54);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(giveplayerid, 0);
			PlayerInfo[giveplayerid][pInt] = 0;
			PlayerInfo[giveplayerid][pVW] = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:giveweapon(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	if(PlayerInfo[playerid][pDonateRank] > 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP!");
		return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 80)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give weapons if your health is below 80!");
		return 1;
	}

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0||GetPlayerState(playerid) == 7)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not give weapons in a vehicle!");
		return 1;
	}

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		new string[58];
		format(string, sizeof(string), "You must wait %d seconds before giving another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}

	new string[128], giveplayerid, weapon[64];
	if(sscanf(params, "us[64]", giveplayerid, weapon))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giveweapon [player] [weapon name]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: flowers, knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		return 1;
	}
	if (!IsPlayerConnected(giveplayerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(IsPlayerInAnyVehicle(giveplayerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not give weapons to players in vehicles!");
		return 1;
	}
	if(giveplayerid == playerid)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give a weapon to yourself!");
		return 1;
	}
	if(!ProxDetectorS(3.0, playerid, giveplayerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		return 1;
	}
	if(PlayerInfo[playerid][pMember] != PlayerInfo[giveplayerid][pMember] && PlayerInfo[playerid][pMember] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give weapons to players outside your faction!");
		return 1;
	}
	if(PlayerInfo[giveplayerid][pConnectHours] < 2 || PlayerInfo[giveplayerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "That player is currently restricted from possessing weapons");
	if(IsPlayerInAnyVehicle(giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "Please exit the vehicle, before using this command.");
	if(strcmp(weapon, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 23)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 2 ] != 23 && PlayerInfo[giveplayerid][pGuns][ 2 ] != 24)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your silenced pistol.");
				format(string, sizeof(string), "* %s has given %s their silenced pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 23);
				GivePlayerValidWeapon(giveplayerid, 23, 60000);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a silenced pistol or Desert Eeagle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	if(strcmp(weapon, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 22)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 2 ] != 22 && PlayerInfo[giveplayerid][pGuns][ 2 ] != 24)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your 9mm pistol.");
				format(string, sizeof(string), "* %s has given %s their 9mm pistol.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 22);
				GivePlayerValidWeapon(giveplayerid, 22, 60000);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a silenced pistol or Desert Eeagle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 25)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 3 ] != 25 && PlayerInfo[giveplayerid][pGuns][ 3 ] != 27)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your shotgun.");
				format(string, sizeof(string), "* %s has given %s their shotgun.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 25);
				GivePlayerValidWeapon(giveplayerid, 25, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a MP5, Micro SMG or Tec-9!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "mp5", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 29)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 4 ] != 28 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 29 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 32)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your MP5.");
				format(string, sizeof(string), "* %s has given %s their MP5.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 29);
				GivePlayerValidWeapon(giveplayerid, 29, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a MP5!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 28)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 4 ] != 28 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 29 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 32)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your Micro SMG.");
				format(string, sizeof(string), "* %s has given %s their Micro SMG.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 28);
				GivePlayerValidWeapon(giveplayerid, 28, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a MP5, Micro SMG or Tec-9!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "tec9", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 32)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 4 ] != 28 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 29 && PlayerInfo[giveplayerid][pGuns][ 4 ] != 32)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your Tec-9.");
				format(string, sizeof(string), "* %s has given %s their Tec-9.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 32);
				GivePlayerValidWeapon(giveplayerid, 32, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a MP5, Micro SMG or Tec-9!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 24)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 2 ] != 24)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your Desert Eagle.");
				format(string, sizeof(string), "* %s has given %s their Desert Eeagle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 24);
				GivePlayerValidWeapon(giveplayerid, 24, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a Desert Eeagle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 33)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 6 ] != 33 && PlayerInfo[giveplayerid][pGuns][ 6 ] != 34)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your rifle.");
				format(string, sizeof(string), "* %s has given %s their rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 33);
				GivePlayerValidWeapon(giveplayerid, 33, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a rifle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 30)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 5 ] != 30 && PlayerInfo[giveplayerid][pGuns][ 5 ] != 31)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your AK-47.");
				format(string, sizeof(string), "* %s has given %s their AK-47.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 30);
				GivePlayerValidWeapon(giveplayerid, 30, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a AK-47 or M4!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 31)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 5 ] != 31)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your M4.");
				format(string, sizeof(string), "* %s has given %s their M4.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 31);
				GivePlayerValidWeapon(giveplayerid, 31, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a M4!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 27)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 3 ] != 27)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your SPAS-12.");
				format(string, sizeof(string), "* %s has given %s their SPAS-12.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 27);
				GivePlayerValidWeapon(giveplayerid, 27, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a SPAS-12!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 34)
		{
			if(PlayerInfo[giveplayerid][pGuns][ 6 ] != 34)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your sniper rifle.");
				format(string, sizeof(string), "* %s has given %s their sniper rifle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, 34);
				GivePlayerValidWeapon(giveplayerid, 34, 60000);
				SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player already has a sniper rifle!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "flowers", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 14)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your flowers.");
			format(string, sizeof(string), "* %s has given %s their flowers.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
			GivePlayerValidWeapon(giveplayerid, 14, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 0 ] == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your brass knuckles.");
			format(string, sizeof(string), "* %s has given %s their brass knuckles.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
			GivePlayerValidWeapon(giveplayerid, 1, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your baseball bat.");
			format(string, sizeof(string), "* %s has given %s their baseball bat.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
			GivePlayerValidWeapon(giveplayerid, 5, 60000);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your cane.");
			format(string, sizeof(string), "* %s has given %s their cane.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 15);
			GivePlayerValidWeapon(giveplayerid, 15, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their cane.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your shovel.");
			format(string, sizeof(string), "* %s has given %s their shovel.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
			GivePlayerValidWeapon(giveplayerid, 6, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their shovel.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your golf club.");
			format(string, sizeof(string), "* %s has given %s golf club.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
			GivePlayerValidWeapon(giveplayerid, 2, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their golf club.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your katana.");
			format(string, sizeof(string), "* %s has given %s their katana.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
			GivePlayerValidWeapon(giveplayerid, 8, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their katana.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your dildo.");
			format(string, sizeof(string), "* %s has given %s their dildo.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
			GivePlayerValidWeapon(giveplayerid, 10, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their dildo.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(weapon, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 11 ] == 46)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have given away your parachute.");
			format(string, sizeof(string), "* %s has given %s their parachute.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
			GivePlayerValidWeapon(giveplayerid, 46, 60000);
			/*new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s (IP:%s) has given %s (IP:%s) their parachute.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);*/
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You have entered an invalid weapon name.");
	}
	return 1;
}

CMD:dropgun(playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dropgun [weapon name]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: sdpistol, shotgun, 9mm, mp5, uzi, tec9, rifle, deagle, ak47, m4, spas12, sniper, camera");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: flowers, knuckles, baseballbat, cane, shovel, poolcue, golfclub, katana, dildo, parachute");
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: knife");
		}
		if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 ||  PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || (PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5) || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 11)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: nitestick, mace, smoke, chainsaw, fire");
		}
		return 1;
	}

	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not drop weapons in a vehicle!");
		return 1;
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	new string[128];
	if(strcmp(params, "sdpistol", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 23)
		{
			if(pTazer{playerid} == 1) return SendClientMessageEx(playerid, COLOR_RED, "You cannot drop your tazer.");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your silenced pistol.");
			format(string, sizeof(string), "* %s has dropped their silenced pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 23);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "camera", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 9 ] == 43)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your camera.");
			format(string, sizeof(string), "* %s has dropped their camera.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 43);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "nitestick", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][1] == 3)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your nitestick.");
			format(string, sizeof(string), "* %s has dropped their nitestick.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 3);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "mace", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][9] == 41)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your mace.");
			format(string, sizeof(string), "* %s has dropped their mace.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 41);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "knife", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 4)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your knife.");
			format(string, sizeof(string), "* %s has dropped their knife.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 4);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "9mm", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 22)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your 9mm pistol.");
			format(string, sizeof(string), "* %s has dropped their 9mm pistol.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 22);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "shotgun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 25)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your shotgun.");
			format(string, sizeof(string), "* %s has dropped their shotgun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 25);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "mp5", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 29)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your MP5.");
			format(string, sizeof(string), "* %s has dropped their MP5.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 29);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 28)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your Micro SMG.");
			format(string, sizeof(string), "* %s has dropped their Micro SMG.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 28);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "uzi", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 4 ] == 32)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your Tec-9.");
			format(string, sizeof(string), "* %s has dropped their Tec-9.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 32);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "deagle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 2 ] == 24)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your Desert Eagle.");
			format(string, sizeof(string), "* %s has dropped their Desert Eagle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 24);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "rifle", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 33)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your rifle.");
			format(string, sizeof(string), "* %s has dropped their rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 33);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "ak47", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 30)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your AK-47.");
			format(string, sizeof(string), "* %s has dropped their AK-47.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 30);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "m4", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 5 ] == 31)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your M4.");
			format(string, sizeof(string), "* %s has dropped their M4.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 31);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "spas12", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 3 ] == 27)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your SPAS-12.");
			format(string, sizeof(string), "* %s has dropped their SPAS-12.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 27);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "sniper", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 6 ] == 34)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your sniper rifle.");
			format(string, sizeof(string), "* %s has dropped their sniper rifle.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 34);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "flowers", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 14)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your flowers.");
			format(string, sizeof(string), "* %s has dropped their flowers.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 14);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "knuckles", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 0 ] == 1)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your brass knuckles.");
			format(string, sizeof(string), "* %s has dropped their brass knuckles.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "baseballbat", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 5)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your baseball bat.");
			format(string, sizeof(string), "* %s has dropped their baseball bat.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 5);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "cane", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 15)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your cane.");
			format(string, sizeof(string), "* %s has dropped their cane.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pGuns][ 10 ] = 0;
			RemovePlayerWeapon(playerid, 15);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "shovel", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 6)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your shovel.");
			format(string, sizeof(string), "* %s has dropped their shovel.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 6);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "golfclub", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 2)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your golf club.");
			format(string, sizeof(string), "* %s has dropped their golf club.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "katana") == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 8)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your katana.");
			format(string, sizeof(string), "* %s has dropped their katana.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 8);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "dildo", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 10 ] == 10)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your dildo.");
			format(string, sizeof(string), "* %s has dropped their dildo.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 10);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "parachute", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 11 ] == 46)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your parachute.");
			format(string, sizeof(string), "* %s has dropped their parachute.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 46);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "smoke", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 8 ] == 17)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your smoke grenade.");
			format(string, sizeof(string), "* %s has dropped their smoke grenade.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 17);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "chainsaw", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 9)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your chainsaw.");
			format(string, sizeof(string), "* %s has dropped their chainsaw.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 9);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "fire", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 9 ] == 42)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your fire extinguisher.");
			format(string, sizeof(string), "* %s has dropped their fire extinguisher.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 42);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "minigun", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 7 ] == 38)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your minigun.");
			format(string, sizeof(string), "* %s has dropped their minigun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 38);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else if(strcmp(params, "poolcue", true) == 0)
	{
		if(PlayerInfo[playerid][pGuns][ 1 ] == 7)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have dropped your pool cue.");
			format(string, sizeof(string), "* %s has dropped their pool cue.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RemovePlayerWeapon(playerid, 7);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You do not have that weapon!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You have entered an invalid weapon name.");
	}
	return 1;
}

CMD:buddyinvite(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /buddyinvite [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pDonateRank] < 1)
			{
				new days;
				new daytime;
				if(PlayerInfo[playerid][pDonateRank] == 2)
				{
					daytime = 7;
				}
				else if(PlayerInfo[playerid][pDonateRank] >= 3)
				{
					daytime = 1;
				}
				ConvertTime(gettime() - PlayerInfo[playerid][pVIPInviteDay], .ctd=days);
				if(days >= daytime || PlayerInfo[playerid][pAdmin] >= 1338)
				{
					PlayerInfo[giveplayerid][pDonateRank] = 1;
					PlayerInfo[giveplayerid][pTempVIP] = 10800;
					PlayerInfo[giveplayerid][pBuddyInvited] = 1;
					format(string, sizeof(string), "You have invited %s to become a Bronze VIP for 3 hours.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "You have been invited by %s to become a Bronze VIP for 3 hours. Enjoy!", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "BUDDY INVITE: %s has invited %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					Log("logs/setvip.log", string);
					PlayerInfo[playerid][pVIPInviteDay] = gettime();
					new query[128];
					format(query, sizeof(query), "UPDATE `accounts` SET `VIPInviteDay` = %d WHERE `id` = '%d'",
					PlayerInfo[playerid][pVIPInviteDay], GetPlayerSQLId(playerid));
                    mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 7 days as silver or 1 day as gold, before inviting another player to become a VIP.");
    				//format(string, sizeof(string), "You can buddy invite again in %s", ConvertTimeS(PlayerInfo[playerid][pVIPInviteDay]-(gettime()-PlayerInfo[playerid][pVIPInviteDay])));
					//SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Unable to invite: That player is already a VIP.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not connected!");
		}

	}
	return 1;
}

CMD:travel(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 13.0, -4429.944824, 905.032470, 987.078186))
	{
		if(PlayerInfo[playerid][pDonateRank] > 0)
		{
			if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /travel [location]");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Locations: LS, SF, LV, RC, LSVIP, SFVIP");
				return 1;
			}

			if(strcmp(params,"ls",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to Los Santos with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}

			if(strcmp(params,"sf",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1417.0,-295.8,14.1);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to San Fierro with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}

			if(strcmp(params,"lv",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to Las Venturas with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"rc",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1253.70, 343.73, 19.41);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to Red County with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"lsvip",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1826.76, -1538.57, 13.25);
					SetPlayerFacingAngle(playerid, 255.08);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}
			if(strcmp(params,"sfvip",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2441.009521, 522.708923, 29.785852);
					SetPlayerFacingAngle(playerid, 181.54);
					fVehSpeed[playerid] = 0.0;
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the VIP Lounge with your vehicle.");
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pVW] = 0;

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not in a vehicle!");
				}
			}

			/*if(strcmp(params,"race",true) == 0)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1395.96, -208.20, 1051.28);
						LinkVehicleToInterior(tmpcar, 7);
				}
				else
				{
					SetPlayerPosEx(playerid, -1395.96, -208.20, 1051.28);
				}
				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have traveled to the Race Track.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "Type /exit near the black mist at the start to leave the track.");
				SetPlayerInterior(playerid,7);
				PlayerInfo[playerid][pInt] = 7;
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pVW] = 0;

			}*/
		}
	}
	return 1;
}

CMD:dynamicgift(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}

		new string[128], Float:Position[4];
		if(dynamicgift == 0)
		{
			GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
			GetPlayerFacingAngle(playerid, Position[3]);
			dynamicgift = CreateDynamicObject(19054, Position[0], Position[1], Position[2]-0.4, 0.0, 0.0, Position[3], -1, -1, -1, 200.0);
			dynamicgift3DText = CreateDynamic3DTextLabel("/getgift\nTo reach inside.",COLOR_YELLOW,Position[0], Position[1], Position[2]+0.25,8.0);
			SetPlayerPosEx(playerid, Position[0], Position[1], Position[2]+3);
			format(string, sizeof(string), "AdmCmd: %s has placed the dynamic gift.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 1337);
		}
		else
		{
			DestroyDynamicObject(dynamicgift);
			dynamicgift = 0;
			DestroyDynamic3DTextLabel( Text3D:dynamicgift3DText );
			format(string, sizeof(string), "AdmCmd: %s has destroyed the dynamic gift.", GetPlayerNameEx(playerid));
			ABroadCast( COLOR_LIGHTRED, string, 1337);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:getgift(playerid, params[])
{
	new string[128];

	if(IsPlayerInRangeOfPoint(playerid, 3.0,2546.680908, 1403.430786, 7699.584472))
	{
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
			if(VIPGifts == 0 && PlayerInfo[playerid][pDonateRank] < 4)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "The safe is locked!");
				return 1;
			}
			if(PlayerInfo[playerid][pGiftTime] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You have already received a gift in the last 5 hours!");
				return 1;
			}
			format(string, sizeof(string), "* %s reaches inside the safe with his eyes closed.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GiftPlayer(MAX_PLAYERS, playerid);
		}
	}
	else if(dynamicgift != 0)
	{
		new Float:Position[3];
		GetDynamicObjectPos(dynamicgift, Position[0], Position[1], Position[2]);

		if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
		{
			if(PlayerInfo[playerid][pLevel] >= 3)
			{
				if(PlayerInfo[playerid][pGiftTime] > 0)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have already received a gift in the last 5 hours!");
					return 1;
				}
				format(string, sizeof(string), "* %s reaches inside the bag of gifts with their eyes closed.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GiftPlayer(MAX_PLAYERS, playerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "* You must be at least level 3 to use this, sorry!");
			}
		}
	}
	return 1;
}

CMD:viplocker(playerid, params[]) {
	if (IsPlayerInRangeOfPoint(playerid, 7.0, 2555.747314, 1404.106079, 7699.584472) && PlayerInfo[playerid][pJailTime] > 0)
	{
		new string[128];
		new rand = random(sizeof(OOCPrisonSpawns));
		SendClientMessageEx(playerid,COLOR_GREY,"You are suppose to be in Jail - Sending you back.");
		SetPlayerPosEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
		Streamer_UpdateEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
		SetPlayerSkin(playerid, 50);
		PlayerInfo[playerid][pVW] = 0;
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerColor(playerid, TEAM_APRISON_COLOR);
		Player_StreamPrep(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has been sent back to jail reason escaped and tried access VIP Locker.", GetPlayerNameExt(playerid));
		ABroadCast( COLOR_LIGHTRED, string, 2 );
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 2555.747314, 1404.106079, 7699.584472)) switch(PlayerInfo[playerid][pDonateRank]) {
		case 0: SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a VIP.");
		case 1: ShowPlayerDialog(playerid, 7483, DIALOG_STYLE_LIST, "VIP Locker", "First Aid Kit (Free)\nKevlar Vest ($15000)\nWeapons\nClothes Corner\nJob Center\nVIP Color", "Select", "Cancel");
		case 2: ShowPlayerDialog(playerid, 7483, DIALOG_STYLE_LIST, "VIP Locker", "First Aid Kit (Free)\nKevlar Vest ($10000)\nWeapons\nClothes Corner\nJob Center\nVIP Color", "Select", "Cancel");
		default: ShowPlayerDialog(playerid, 7483, DIALOG_STYLE_LIST, "VIP Locker", "First Aid Kit (Free)\nKevlar Vest (Free)\nWeapons\nClothes Corner\nJob Center\nVIP Color", "Select", "Cancel");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You're not at the VIP locker.");
	return 1;
}

CMD:rc(playerid, params[])
{
	new ccar = GetClosestCar(playerid);
	if(IsARC(ccar) && IsPlayerInRangeOfVehicle(playerid, ccar, 5.0))
	{
		if(IsPlayerInVehicle(playerid,ccar))
		{
			new Float:vehPos[3];
			GetVehiclePos(ccar,vehPos[0], vehPos[1], vehPos[2]);
			SetPlayerPosEx(playerid,vehPos[0], vehPos[1]+0.5, vehPos[2]+0.5);
		}
		else if(!IsPlayerInAnyVehicle(playerid))
		{
			foreach(new i: Player)
			{
				new v = GetPlayerVehicle(i, ccar);
				if(v != -1 && PlayerVehicleInfo[i][v][pvLocked] == 0)
				{
					new Float:playerPos[3];
					GetPlayerPos(playerid,playerPos[0],playerPos[1],playerPos[2]);
					SetPlayerPosEx(playerid,playerPos[0],playerPos[1],playerPos[2]-500);
					PutPlayerInVehicle(playerid, ccar, 0);
				}
			}
		}
	}
	return 1;
}

CMD:oipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	new query[128], name[MAX_PLAYER_NAME];
	if(sscanf(params, "s", name)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /oipcheck [name]");

	//new tmpName[24];

	format(query, sizeof(query), "SELECT `IP`,`Username` FROM `accounts` WHERE `Username` = '%s'", name);
	mysql_function_query(MainPipeline, query, true, "OnIPCheck", "i", playerid);
	return 1;
}

forward OnIPCheck(index);
public OnIPCheck(index)
{
	if(IsPlayerConnected(index))
	{
		new string[128], ip[16], name[24];
		new rows, fields;
		cache_get_data(rows, fields, MainPipeline);
		if(rows)
		{
   			cache_get_field_content(0, "IP", ip, MainPipeline);
   			cache_get_field_content(0, "Username", name, MainPipeline);
			format(string, sizeof(string), "%s's IP: %s", name, ip);
			SendClientMessageEx(index, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(index, COLOR_WHITE, "There was an issue with checking the account's IP.");
		}
	}
	return 1;
}

CMD:ipcheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ipcheck [player]");

		if(giveplayerid == INVALID_PLAYER_ID) return 1;
		if(IsPlayerConnected(giveplayerid))
		{
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "(ID: %d) - (Name: %s) - (IP: %s)", giveplayerid, GetPlayerNameEx(giveplayerid), playerip);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:pfine(playerid, params[])
{
	new string[128], giveplayerid, percentage, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, percentage, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pfine [player] [percentage] [reason]");

	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			new fine, allmoney;

			if(PlayerInfo[giveplayerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hOwner], true) == 0)
			{
				allmoney = HouseInfo[PlayerInfo[giveplayerid][pPhousekey]][hSafeMoney]+GetPlayerCash(giveplayerid)+PlayerInfo[giveplayerid][pAccount];
			}
			else
			{
				allmoney = GetPlayerCash(giveplayerid)+PlayerInfo[giveplayerid][pAccount];
			}
			if(PlayerInfo[giveplayerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameEx(playerid), HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hOwner], true) == 0)
			{
				allmoney += HouseInfo[PlayerInfo[giveplayerid][pPhousekey2]][hSafeMoney];
			}
			if(allmoney < 1)
			{
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "That player does not have any money!");
				return 1;
			}

			fine = percentage*allmoney/100;
			if (percentage < 1 || percentage > 100)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Amount must be greater than 0 and below 100.");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s, reason: %s", GetPlayerNameEx(giveplayerid), fine, GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s, reason: %s", GetPlayerNameEx(giveplayerid), fine, GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			GivePlayerCash(giveplayerid, -fine);
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

stock NiggaSlap(disnigga)
{
    for(new i=0;i<=1000;i++) CreatePlayerObject(disnigga,4108,0,0,0,0,0,0);
	return 1;
}

CMD:mctrollin(playerid, params[])
{
	new disnigga;
	if(PlayerInfo[playerid][pAdmin] >= 99999)
	{
	    if(sscanf(params, "u", disnigga)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: dis nigguh.");
	    if(IsPlayerConnected(disnigga) && PlayerInfo[disnigga][pAdmin] < 99999)
	    {
    		NiggaSlap(disnigga);
    		return 1;
		}
		else { SendClientMessageEx(playerid, 0xFFFFFF, "User is not connected/Is an EA."); return 1; }
	}
	return 1;
}


CMD:fine(playerid, params[])
{
	new string[128], giveplayerid, amount, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, amount, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fine [player] [amount] [reason]");

	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{

			if (amount < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Amount must be greater than 0");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), amount,ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s was fined $%d by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), amount, ARank(playerid),GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			GivePlayerCash(giveplayerid, -amount);
			return 1;
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

CMD:listguns(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listguns [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			new weapons[13][2], weaponname[50];
			if(GetPVarInt(giveplayerid, "EventToken") != 0 || GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is at an event/paintball so the weapons may appear as non-server sided.");
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
			format(string, sizeof(string), "Weapons on %s:", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			for (new i = 0; i < 13; i++)
			{
				GetPlayerWeaponData(giveplayerid, i, weapons[i][0], weapons[i][1]);
				if(weapons[i][0] > 0)
				{
					if(PlayerInfo[giveplayerid][pGuns][i] == weapons[i][0])
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d).", weaponname, weapons[i][0]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
					else
					{
						GetWeaponName(weapons[i][0], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "%s (%d) (non server-side).", weaponname, weapons[i][0]);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
				}
			}
			SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gotomapicon(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new mapiconid;
	if(sscanf(params, "d", mapiconid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotomapicon [mapiconid]");

	if(mapiconid >= MAX_DMAPICONS || mapiconid < 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotomapicon [mapiconid]");
		return 1;
	}
	SetPlayerPosEx(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
	SetPlayerVirtualWorld(playerid, DMPInfo[mapiconid][dmpVW]);
	SetPlayerInterior(playerid, DMPInfo[mapiconid][dmpInt]);
	return 1;
}

CMD:gotopoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new points;
	if(sscanf(params, "d", points)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopoint [pointid]");

	if(points >= MAX_EVENTPOINTS || points < 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotopoint [pointid]");
		return 1;
	}
	SetPlayerPosEx(playerid, EventPoints[points][epPosX], EventPoints[points][epPosY], EventPoints[points][epPosZ]);
	SetPlayerVirtualWorld(playerid, EventPoints[points][epVW]);
	SetPlayerInterior(playerid, EventPoints[points][epInt]);
	return 1;
}

CMD:createpoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new string[128], flagable, pointid, prize[64];
	if(sscanf(params, "dds[64]", flagable, pointid, prize)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /createpoint [flagable] [pointid] [prize]");

	if(EventPoints[pointid][epObjectID] != 0)
	{
		DestroyPickupEx(EventPoints[pointid][epObjectID]);
		EventPoints[pointid][epObjectID] = 0;
		if(IsValidDynamic3DTextLabel(EventPoints[pointid][epText3dID]))
		{
			DestroyDynamic3DTextLabel(EventPoints[pointid][epText3dID]);
		}

		EventPoints[pointid][epPosX] = 0.0;
		EventPoints[pointid][epPosY] = 0.0;
		EventPoints[pointid][epPosZ] = 0.0;
		EventPoints[pointid][epVW] = 0;
		EventPoints[pointid][epInt] = 0;
	}
	new Float:x, Float:y, Float:z;

	GetPlayerPos(playerid, x, y, z);
	new tvw = GetPlayerVirtualWorld(playerid);
	new tint = GetPlayerInterior(playerid);

	EventPoints[pointid][epPosX] = x;
	EventPoints[pointid][epPosY] = y;
	EventPoints[pointid][epPosZ] = z;
	EventPoints[pointid][epVW] = tvw;
	EventPoints[pointid][epInt] = tint;
	EventPoints[pointid][epFlagable] = flagable;
	format(EventPoints[pointid][epPrize], 64, "%s", prize);

	format(string,sizeof(string),"Event Point (ID: %d)\nPrize: %s\nType /claimpoint to claim your prize!", pointid, EventPoints[pointid][epPrize]);
	EventPoints[pointid][epObjectID] = CreatePickupEx(1274, 1, EventPoints[pointid][epPosX], EventPoints[pointid][epPosY], EventPoints[pointid][epPosZ], EventPoints[pointid][epVW]);
	EventPoints[pointid][epText3dID] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, EventPoints[pointid][epPosX], EventPoints[pointid][epPosY], EventPoints[pointid][epPosZ]+0.5, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EventPoints[pointid][epVW], EventPoints[pointid][epInt]);

	format(string,sizeof(string),"You have placed PointID %d at your current position.", pointid);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	return 1;
}

CMD:deletepoint(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!");
		return 1;
	}

	new string[128], pointid;
	if(sscanf(params, "d", pointid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deletepoint [pointid]");

	if(pointid >= MAX_EVENTPOINTS || pointid < 0)
	{
		return 1;
	}
	if(EventPoints[pointid][epObjectID] != 0)
	{
		DestroyPickupEx(EventPoints[pointid][epObjectID]);
		EventPoints[pointid][epObjectID] = 0;
		if(IsValidDynamic3DTextLabel(EventPoints[pointid][epText3dID]))
		{
			DestroyDynamic3DTextLabel(EventPoints[pointid][epText3dID]);
		}

		EventPoints[pointid][epPosX] = 0.0;
		EventPoints[pointid][epPosY] = 0.0;
		EventPoints[pointid][epPosZ] = 0.0;
		EventPoints[pointid][epVW] = 0;
		EventPoints[pointid][epInt] = 0;
		EventPoints[pointid][epFlagable] = 0;
		format(EventPoints[pointid][epPrize], 64, "");

		format(string,sizeof(string),"You have deleted PointID %d from the server.", pointid);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	return 1;
}

CMD:claimpoint(playerid, params[])
{
	for(new p = 0; p < MAX_EVENTPOINTS; p++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, EventPoints[p][epPosX], EventPoints[p][epPosY], EventPoints[p][epPosZ]))
		{
			if(EventPoints[p][epObjectID] != 0)
			{
				new string[128];

				format(string, sizeof(string), " Congratulations you have won a Special Prize (%s)!", EventPoints[p][epPrize]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
				SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This prize may take up to 48 hours to be rewarded..");
				if(EventPoints[p][epFlagable] == 1)
				{
					format(string, 128, "Special Prize (%s)", EventPoints[p][epPrize]);
                    AddFlag(playerid, INVALID_PLAYER_ID, string);
				}
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just found PointID %d, they are now pending a special prize.", GetPlayerNameEx(playerid), p);
				ABroadCast(COLOR_YELLOW, string, 4);
				new log[128];
				format(log, sizeof(log), "AdmCmd: %s has just found PointID %d, Prize: %s", GetPlayerNameEx(playerid), p, EventPoints[p][epPrize]);
				Log("logs/gifts.log", log);

				DestroyPickupEx(EventPoints[p][epObjectID]);
				EventPoints[p][epObjectID] = 0;

				if(IsValidDynamic3DTextLabel(EventPoints[p][epText3dID]))
				{
					DestroyDynamic3DTextLabel(EventPoints[p][epText3dID]);
				}

				EventPoints[p][epPosX] = 0.0;
				EventPoints[p][epPosY] = 0.0;
				EventPoints[p][epPosZ] = 0.0;
				EventPoints[p][epVW] = 0;
				EventPoints[p][epInt] = 0;
				EventPoints[p][epFlagable] = 0;
				format(EventPoints[p][epPrize], 64, "");
			}
		}
	}
	return 1;
}

CMD:serverstats(playerid, params[])
{
	new
		string[128],
		iVehCount,
		x;

	while(x < MAX_VEHICLES) if(GetVehicleModel(++x)) ++iVehCount;

	format(string,sizeof(string),"Server Statistics - %s.",SERVER_GM_TEXT);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "* Objects: %d | Pickups: %d | Map icons: %d | 3D text labels: %d | Text draws: %d | Loaded houses: %d",CountDynamicObjects(),totalpickups,CountDynamicMapIcons(),CountDynamic3DTextLabels(),textdrawscount,TotalHouses);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Gates %d",TotalGates);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Logins: %d | Connections: %d | Registrations: %d | Hackers autobanned: %d | Uptime: %d hours",TotalLogin, TotalConnect, TotalRegister, TotalAutoBan, TotalUptime);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "* Players connected: %d | Peak player count: %d (%d/%d/%d) | Player vehicles loaded: %d | Total vehicles: %i",Iter_Count(Player),MaxPlayersConnected,MPDay,MPMonth,MPYear,PlayerCars, iVehCount);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:capture(playerid, params[])
{
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
	new string[128];

	new mypoint = -1;
	if(GetPVarInt(playerid,"Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " You can not capture while injured!");
		return 1;
	}
	if (PlayerInfo[playerid][pFMember] == 255 || PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " You are not high rank enough to capture!");
		return 1;
	}
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 1.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz])) mypoint = i;
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " You are not at the capture place!");
		return 1;
	}
	if (Points[mypoint][Vulnerable] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " This point is not ready for takeover.");
		return 1;
	}
	if (Points[mypoint][TimeToClaim])
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, " This point is already being captured!");
		return 1;
	}
	if(GetPlayerPing(playerid) > pointpinglimit)
	{
		format(string,sizeof(string), " You can not capture with %d+ ping!", pointpinglimit);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		return 1;
	}
	format(string,sizeof(string), " %s is attempting to capture the point.", GetPlayerNameEx(playerid));
	ProxDetector(70.0, playerid, string, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	GetPlayerPos(playerid, Points[mypoint][Capturex], Points[mypoint][Capturey], Points[mypoint][Capturez]);

	Points[mypoint][ClaimerId] = playerid;
	Points[mypoint][TimeToClaim] = 1;
	Points[mypoint][TimeLeft] = 10;
	SetTimerEx("ProgressTimer", 1000, 0, "d", mypoint);
	return 1;
}

CMD:points(playerid, params[])
{
	new string[128];

	for(new i; i < MAX_POINTS; i++)
	{
		if (Points[i][Type] >= 0)
		{
			format(string, sizeof(string), "Name: %s | Owner: %s | Captured By: %s | Hours: %d",
			Points[i][Name],Points[i][Owner],Points[i][CapperName],Points[i][Vulnerable]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

/*CMD:payday(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] == 99999) foreach(new i: Player) {
		PayDay(i);
	}
	return 1;
}*/

CMD:togvip(playerid, params[]) {
	if(PlayerInfo[playerid][pDonateRank] >= 1 || PlayerInfo[playerid][pAdmin] >= 2) {
		if(GetPVarType(playerid, "togVIP")) {
			DeletePVar(playerid, "togVIP");
			SendClientMessageEx(playerid, COLOR_WHITE, "VIP chat disabled.");
		}
		else {
			SetPVarInt(playerid, "togVIP", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "VIP chat enabled.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not a VIP.");
	return 1;
}

CMD:v(playerid, params[]) {
	if(PlayerInfo[playerid][pDonateRank] >= 1 || PlayerInfo[playerid][pAdmin] >= 2) {
		if(isnull(params)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /v [message]");
		}
		else if(gettime() < GetPVarInt(playerid, "timeVIP")) {

			new
				szMessage[64];

			format(szMessage, sizeof(szMessage), "You must wait %d seconds before speaking again in this channel.", GetPVarInt(playerid, "timeVIP") - gettime());
			SendClientMessageEx(playerid, COLOR_GREY, szMessage);
		}
		else if(!GetPVarType(playerid, "togVIP")) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You have VIP chat toggled - /togvip to enable it.");
		}
		else if(PlayerInfo[playerid][pVMuted] > 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "You are muted from the VIP chat channel.");
		}
		else {

			new
				szMessage[128];

			switch(PlayerInfo[playerid][pAdmin]) {
				case 2: format(szMessage, sizeof(szMessage), "** Junior Admin %s: %s", GetPlayerNameEx(playerid), params);
				case 3: format(szMessage, sizeof(szMessage), "** General Admin %s: %s", GetPlayerNameEx(playerid), params);
				case 4: format(szMessage, sizeof(szMessage), "** Senior Admin %s: %s", GetPlayerNameEx(playerid), params);
				case 1337: format(szMessage, sizeof(szMessage), "** Head Admin %s: %s", GetPlayerNameEx(playerid), params);
				case 1338: format(szMessage, sizeof(szMessage), "** Admin Director %s: %s", GetPlayerNameEx(playerid), params);
				case 13338: format(szMessage, sizeof(szMessage), "** Co-Executive Admin %s: %s", GetPlayerNameEx(playerid), params);
				case 99998: format(szMessage, sizeof(szMessage), "** Lead Developer %s: %s", GetPlayerNameEx(playerid), params);
				case 99999: format(szMessage, sizeof(szMessage), "** Executive Admin %s: %s", GetPlayerNameEx(playerid), params);

				default: {

					SetPVarInt(playerid, "timeVIP", gettime() + 5);

					switch(PlayerInfo[playerid][pDonateRank]) {
						case 1: format(szMessage, sizeof(szMessage), "** Bronze VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 2: format(szMessage, sizeof(szMessage), "** Silver VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 3: format(szMessage, sizeof(szMessage), "** Gold VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 4: format(szMessage, sizeof(szMessage), "** Platinum VIP %s: %s", GetPlayerNameEx(playerid), params);
						case 5: format(szMessage, sizeof(szMessage), "** VIP Moderator %s: %s", GetPlayerNameEx(playerid), params);
						default: return SendClientMessageEx(playerid, COLOR_GREY, "You have an invalid VIP level.");
					}
				}
			}
			SendVIPMessage(COLOR_VIP, szMessage);
			Log("logs/chatlogs/vip chat.log", szMessage);
		}
	}
	return 1;
}

CMD:orders(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 4)
	{
 		new string[128];
        SendClientMessageEx(playerid, COLOR_GREEN, "____________________ SHOP ORDERS _____________________");
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pOrder] > 0 && OrderAssignedTo[i] == INVALID_PLAYER_ID)
			{
				new playerip[32];
				GetPlayerIp(i, playerip, sizeof(playerip));

				new orderid = PlayerInfo[i][pOrder];

				if(PlayerInfo[i][pOrderConfirmed]) {
					format(string, sizeof(string), "%s(%d) | Order ID: %d | IP: %s | Assigned to: Nobody", GetPlayerNameEx(i), i, orderid, playerip);
				} else {
					format(string, sizeof(string), "%s(%d) | Order ID: %d | IP: %s | Assigned to: Nobody", GetPlayerNameEx(i), i, orderid, playerip);
				}
				SendClientMessageEx(playerid, COLOR_SHOP, string);
			}
			else if(PlayerInfo[i][pOrder] > 0 && OrderAssignedTo[i] != INVALID_PLAYER_ID)
			{
				new playerip[32];
				GetPlayerIp(i, playerip, sizeof(playerip));

				new orderid = PlayerInfo[i][pOrder];

				if(PlayerInfo[i][pOrderConfirmed]) {
					format(string, sizeof(string), "%s(%d) | Order ID: %d | IP: %s | Assigned to: %s", GetPlayerNameEx(i), i, orderid, playerip, GetPlayerNameEx(OrderAssignedTo[i]));
				} else {
					format(string, sizeof(string), "%s(%d) | Order ID: %d | IP: %s | Assigned to: %s", GetPlayerNameEx(i), i, orderid, playerip, GetPlayerNameEx(OrderAssignedTo[i]));
				}
				SendClientMessageEx(playerid, COLOR_SHOP, string);
			}
		}
  		SendClientMessageEx(playerid, COLOR_WHITE, "Use /givemeorder /processorder /denyorder");
        SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________________");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:givemeorder(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givemeorder [player]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pOrder] > 0)
			{
			    if(IsPlayerConnected(OrderAssignedTo[giveplayerid]))
			    {
			        if(GetPVarInt(playerid, "OrderAssignedTo") == giveplayerid)
			        {
			            DeletePVar(playerid, "OrderAssignedTo");
			        }
			        else
			        {
					    SendClientMessageEx(playerid, COLOR_WHITE, "That order ID has already been assigned to another admin!");
					    SendClientMessageEx(playerid, COLOR_WHITE, "If you are sure you wish to take the order anyway, type this command again.");
					    SetPVarInt(playerid, "OrderAssignedTo", giveplayerid);
				        return 1;
					}
			    }
		    	new string[128];
		    	new orderid = PlayerInfo[giveplayerid][pOrder];
				format(string, sizeof(string), "AdmCmd: %s assigned himself to shop order ID %d from %s (ID: %d).", GetPlayerNameEx(playerid), orderid, GetPlayerNameEx(giveplayerid), giveplayerid);
				ShopTechBroadCast(COLOR_ORANGE, string);

				format(string, sizeof(string), "%s is now reviewing your shop order ID %d.", GetPlayerNameEx(playerid), orderid);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				OrderAssignedTo[giveplayerid] = playerid;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That player does not have any shop orders pending!");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

/*CMD:adjustoid(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    new giveplayerid, orderid, string[128];
		if(sscanf(params, "ui", giveplayerid, orderid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjustoid [player] [new orderid]");
		SendClientMessageEx(playerid, COLOR_WHITE, "Processing..");
  		PlayerInfo[giveplayerid][pOrder] = orderid;
		format(string, sizeof(string), "shop.ng-gaming.net/idcheck.php?id=%d", orderid);
		HTTP(giveplayerid, HTTP_GET, string, "", "HttpCallback_ShopIDCheck");
		format(string, sizeof(string), "%s has edited %s's Order ID to %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), orderid);
		Log("logs/shoporders.log", string);
	}
	return 1;
}*/

forward OnProcessOrderCheck(index, extraid);
public OnProcessOrderCheck(index, extraid)
{
	if(IsPlayerConnected(index))
	{
		new string[164],playerip[32], giveplayerip[32];
		GetPlayerIp(index, playerip, sizeof(playerip));
		GetPlayerIp(extraid, giveplayerip, sizeof(giveplayerip));

		new rows, fields;
		cache_get_data(rows, fields, MainPipeline);
		if(rows)
		{
			SendClientMessageEx(index, COLOR_WHITE, "This order has previously been processed, therefore it did not count toward your pay.");
			format(string, sizeof(string), "%s(IP: %s) has processed shop order ID %d from %s(IP: %s).", GetPlayerNameEx(index), playerip, GetPVarInt(index, "processorder"), GetPlayerNameEx(extraid), giveplayerip);
			Log("logs/shoporders.log", string);
		}
		else
		{
			format(string, sizeof(string), "%s(IP: %s) has processed shop order ID %d from %s(IP: %s).", GetPlayerNameEx(index), playerip, GetPVarInt(index, "processorder"), GetPlayerNameEx(extraid), giveplayerip);
			Log("logs/shopconfirmedorders.log", string);
			PlayerInfo[index][pShopTechOrders]++;

			format(string, sizeof(string), "INSERT INTO shoptech (id,total,dtotal) VALUES (%d,1,%f) ON DUPLICATE KEY UPDATE total = total + 1, dtotal = dtotal + %f", GetPlayerSQLId(index), ShopTechPay, ShopTechPay);
			mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, index);

			format(string, sizeof(string), "INSERT INTO `orders` (`id`) VALUES ('%d')", GetPVarInt(index, "processorder"));
			mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, index);
		}
		DeletePVar(index, "processorder");
	}
	return 1;
}

CMD:processorder(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /processorder [player]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(OrderAssignedTo[giveplayerid] != playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You must be assigned to that order ID to process it, use /givemeorder");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pOrder] > 0)
			{
		    	new string[128];
		    	new orderid = PlayerInfo[giveplayerid][pOrder];
				format(string, sizeof(string), "AdmCmd: %s has processed shop order ID %d from %s (ID: %d).", GetPlayerNameEx(playerid), orderid, GetPlayerNameEx(giveplayerid), giveplayerid);
				ShopTechBroadCast(COLOR_ORANGE, string);

				format(string, sizeof(string), "%s has processed your shop order ID %d.", GetPlayerNameEx(playerid), orderid);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				new playerip[32], giveplayerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				GetPlayerIp(giveplayerid, giveplayerip, sizeof(giveplayerip));

				if(PlayerInfo[giveplayerid][pOrderConfirmed])
				{
				    format(string, sizeof(string), "SELECT `id` FROM `orders` WHERE `id` = '%d'", PlayerInfo[giveplayerid][pOrder]);
					mysql_function_query(MainPipeline, string, true, "OnProcessOrderCheck", "ii", playerid, giveplayerid);
					SetPVarInt(playerid, "processorder", orderid);
				}
				else
				{
					format(string, sizeof(string), "%s(IP: %s) has processed shop order ID %d from %s(IP: %s).", GetPlayerNameEx(playerid), playerip, orderid, GetPlayerNameEx(giveplayerid), giveplayerip);
					Log("logs/shoporders.log", string);
				}

				PlayerInfo[giveplayerid][pOrder] = 0;
				PlayerInfo[giveplayerid][pOrderConfirmed] = 0;
				OrderAssignedTo[giveplayerid] = INVALID_PLAYER_ID;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That player does not have any shop orders pending!");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");

	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:denyorder(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] > 0 || PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /denyorder [player] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(OrderAssignedTo[giveplayerid] != playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You must be assigned to that order ID to deny it, use /givemeorder");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pOrder] > 0)
			{
		    	new string[128];
		    	new orderid = PlayerInfo[giveplayerid][pOrder];
				format(string, sizeof(string), "AdmCmd: %s has denied shop order ID %d from %s (ID: %d), reason: %s", GetPlayerNameEx(playerid), orderid, GetPlayerNameEx(giveplayerid), giveplayerid, reason);
				ShopTechBroadCast(COLOR_ORANGE, string);

				format(string, sizeof(string), "%s has denied your shop order ID %d, reason: %s", GetPlayerNameEx(playerid), orderid, reason);
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				new playerip[32], giveplayerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				GetPlayerIp(giveplayerid, giveplayerip, sizeof(giveplayerip));

				format(string, sizeof(string), "%s(IP: %s) has denied shop order ID %d from %s(IP: %s), reason: %s", GetPlayerNameEx(playerid), playerip, orderid, GetPlayerNameEx(giveplayerid), giveplayerip, reason);
				Log("logs/shoporders.log", string);

				PlayerInfo[giveplayerid][pOrder] = 0;
				OrderAssignedTo[giveplayerid] = INVALID_PLAYER_ID;
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That player does not have any shop orders pending!");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	return 1;
}

CMD:shoporder(playerid, params[])
{
	if(PlayerInfo[playerid][pOrder] != 0)
	{
	    new string[128];
	    new orderid = PlayerInfo[playerid][pOrder];
		format(string, sizeof(string), "You already have shop order ID %d pending, if you wish to cancel that type /cancelorder", orderid);
 		SendClientMessageEx(playerid, COLOR_WHITE, string);
	    return 1;
	}
	if (GetPVarInt(playerid, "ShopOrderTimer") > 0)
	{
		new string[128];
		format(string, sizeof(string), "You must wait %d seconds before submitting another shop order.", GetPVarInt(playerid, "ShopOrderTimer"));
		SendClientMessageEx(playerid,COLOR_GREY, string);
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_SHOPORDER, DIALOG_STYLE_INPUT, "Shop Order", "This is for shop orders from our shop (www.evolution-rp.net/shop)\n\nIf you do not have a shop order then please cancel this dialog box now.\n\nWarning: Abuse of this feature may result to an indefinite block from this command.\n\nPlease enter your shop order ID (if you do not know it put 1):", "Submit", "Cancel" );
	return 1;
}

CMD:cancelorder(playerid, params[])
{
	if(PlayerInfo[playerid][pOrder] != 0)
	{
	    new string[128];
	    new orderid = PlayerInfo[playerid][pOrder];
		new playerip[32];
		GetPlayerIp(playerid, playerip, sizeof(playerip));
		format(string, sizeof(string), "%s (IP: %s) canceled their shop order (ID %i).", GetPlayerNameEx(playerid), playerip, orderid);
		Log("logs/shoporders.log", string);

		format(string, sizeof(string), "You have canceled your shop order (ID %i). If you wish to submit another order, type /shoporder.", orderid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		PlayerInfo[playerid][pOrder] = 0;
		OrderAssignedTo[playerid] = INVALID_PLAYER_ID;
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You do not have any shop orders pending!");
	}
	return 1;
}

CMD:searchvipm(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        count,
	        vipm,
	        string[128];

 		if(sscanf(params, "d", vipm)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /searchvipm [vipm]");

  		foreach(new i: Player)
   		{
    		if(PlayerInfo[i][pVIPM] == vipm)
    	 	{
    	  		format(string, sizeof(string), "%s (%d) | VIPM: %d", GetPlayerNameEx(i), i, vipm);
    	  		SendClientMessageEx(playerid, COLOR_WHITE, string);
    	  		count++;
    	    }
    	    if(PlayerInfo[i][pVIPMO] == vipm)
    	    {
    	  		format(string, sizeof(string), "%s (%d) | VIPM Old: %d", GetPlayerNameEx(i), i, vipm);
    	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
    	    	count++;
    	    }
    	    else if(count == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "No player online matched that VIPM number.");
    	}
	}
	return 1;
}

CMD:sellvip(playerid, params[]) {
	if(!(1 <= PlayerInfo[playerid][pDonateRank] <= 3)) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only sell Bronze, Silver, and Gold VIP.");
	}
	else if(PlayerInfo[playerid][pVIPM] == 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You currently don't have a VIP ID assigned. Contact a Shop Tech.");
	}
  	else if(PlayerInfo[playerid][pVIPExpire] - 604800 < gettime()) {
		SendClientMessageEx(playerid, COLOR_GREY, "Your VIP expires in less than a week - you can't sell it.");
	}
	else if(PlayerInfo[playerid][pVIPSold] > gettime()) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only sell your VIP once every two hours.");
	}
	else {

		new
			player,
			price,
			string[128],
			viptype[7];

		if(sscanf(params, "ud", player, price)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellvip [player] [price]");
		}
		else if(price < 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "The price can't be below zero.");
		}
		else if(player == playerid) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't sell VIP to yourself.");
		}
		else if(!IsPlayerConnected(player)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(PlayerInfo[player][pVIPSold] > gettime()) {
			SendClientMessageEx(playerid, COLOR_GREY, "That player can only buy VIP once every two hours.");
		}
		else if (ProxDetectorS(10.0, playerid, player))
		{
			switch(PlayerInfo[playerid][pDonateRank])
			{
				case 1: viptype = "Bronze";
				case 2: viptype = "Silver";
				case 3: viptype = "Gold";
				default: viptype = "Error";
			}
			SetPVarInt(player, "VIPSell", playerid);
			SetPVarInt(player, "VIPCost", price);
			SetPVarString(player, "VIPSeller", GetPlayerNameEx(playerid));
			format(string, sizeof(string), "Seller: %s\nVIP level: %s \nPrice: %d \nVIP ID: %d\nExpires: %s\n\nDo you wish to purchase %s VIP from %s for $%d?", GetPlayerNameEx(playerid), viptype, price, PlayerInfo[playerid][pVIPM], date(PlayerInfo[playerid][pVIPExpire], 2), viptype, GetPlayerNameEx(playerid), price);
			ShowPlayerDialog(player, SELLVIP, DIALOG_STYLE_MSGBOX, "Purchase VIP", string, "Purchase", "Decline");
			format(string, sizeof(string), "You offered %s $%d for your %s VIP.", GetPlayerNameEx(player), price, viptype);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you.");
	}
    return 1;
}


CMD:newgvip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        iOrderID,
	        iTargetID,
	        szIP[16],
			szMessage[128];

		if(sscanf(params, "ud", iTargetID, iOrderID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /newgvip [Player] [OrderID]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else {
			if(PlayerInfo[iTargetID][pGVip] != 0 && GetPVarInt(playerid, "ConfirmGVip") == 0) {
	    	    SetPVarInt(playerid, "ConfirmGVip", 1);
	    	    SendClientMessageEx(playerid, COLOR_WHITE, "That player has been issued gold vip before, if you are sure you want to issue him gold vip again");
	    	    SendClientMessageEx(playerid, COLOR_WHITE, "re-type this command (/newgvip). If he ordered a gold vip renewal use the other command (/renewgvip).");
	    	}
	    	else
	    	{
	        	DeletePVar(playerid, "ConfirmGVip");
		    	if(PlayerInfo[iTargetID][pVIPM] != 0) {
		    	    PlayerInfo[iTargetID][pVIPMO] = PlayerInfo[iTargetID][pVIPM];
					PlayerInfo[iTargetID][pVIPM] = VIPM;
					VIPM++;
				} else {
				    PlayerInfo[iTargetID][pVIPM] = VIPM;
					VIPM++;
				}
				PlayerInfo[iTargetID][pVIPExpire] = gettime()+2592000;
				format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				ABroadCast(COLOR_LIGHTRED,szMessage, 1337);
				format(szMessage, sizeof(szMessage), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);
				if (PlayerInfo[playerid][pAdmin] < 1337) {
					format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
					SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
				}
        	    PlayerInfo[iTargetID][pDonateRank] = 3;
				PlayerInfo[iTargetID][pTempVIP] = 0;
				PlayerInfo[iTargetID][pBuddyInvited] = 0;
				PlayerInfo[iTargetID][pGVip] = 1;
				GetPlayerIp(iTargetID, szIP, sizeof(szIP));
				format(szMessage, sizeof(szMessage), "[GVIP] %s has set %s's (IP:%s) VIP level to Gold (3). (VIPM - %d | OrderID - %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), szIP, PlayerInfo[iTargetID][pVIPM], iOrderID);
				Log("logs/setvip.log", szMessage);
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:renewgvip(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338 || PlayerInfo[playerid][pShopTech] >= 1)
	{
	    new
	        iOrderID,
	        iTargetID,
	        szIP[16],
			szMessage[128],
			months;

		if(sscanf(params, "udd", iTargetID, iOrderID, months)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /renewgvip [player] [order ID] [months]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(PlayerInfo[iTargetID][pGVip] == 0) {
		    SendClientMessageEx(playerid, COLOR_GREY, "That player has never purchased Gold VIP.");
		}
		else {
			if(PlayerInfo[iTargetID][pVIPM] != 0) {
    			PlayerInfo[iTargetID][pVIPMO] = PlayerInfo[iTargetID][pVIPM];
				PlayerInfo[iTargetID][pVIPM] = VIPM;
				VIPM++;
			} else {
				PlayerInfo[iTargetID][pVIPM] = VIPM;
				VIPM++;
			}
			PlayerInfo[iTargetID][pVIPExpire] = gettime()+(2592000*months);
			format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
			ABroadCast(COLOR_LIGHTRED,szMessage, 1337);
			format(szMessage, sizeof(szMessage), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);
			if (PlayerInfo[playerid][pAdmin] < 1337) {
				format(szMessage, sizeof(szMessage), "AdmCmd: %s has set %s's VIP level to Gold (3).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
				SendClientMessageEx(playerid, COLOR_LIGHTRED, szMessage);
			}
   			PlayerInfo[iTargetID][pDonateRank] = 3;
			PlayerInfo[iTargetID][pTempVIP] = 0;
			PlayerInfo[iTargetID][pBuddyInvited] = 0;
			GetPlayerIp(iTargetID, szIP, sizeof(szIP));
			format(szMessage, sizeof(szMessage), "[GVIP RENEWAL] %s has set %s's (IP:%s) VIP level to Gold (3). (VIPM - %d | OrderID - %d | Months: %d)", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), szIP, PlayerInfo[iTargetID][pVIPM], iOrderID, months);
			Log("logs/setvip.log", szMessage);
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setvip(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pShopTech] >= 1)
	{
		new string[128], giveplayerid, level, months, orderid[32];
		if(sscanf(params, "udds[32]", giveplayerid, level, months, orderid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setvip [player] [level] [months] [orderID]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Available Levels: |0| None |1| Bronze |2| Silver |4| Platinum |5| Moderator");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(level < 0 || level > 5)
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "VIP Level can not be below 0 or above 5!");
					return 1;
				}
				if(level == 3)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "VIP Level can not be set to 3 through this command");
				    return 1;
				}
				PlayerInfo[giveplayerid][pDonateRank] = level;
				PlayerInfo[giveplayerid][pTempVIP] = 0;
				PlayerInfo[giveplayerid][pBuddyInvited] = 0;
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				if(level == 0)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to None (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to None (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to None by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					PlayerInfo[giveplayerid][pTokens] = 0;

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to None (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 1)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Bronze (%d)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level, orderid);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
						PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					PlayerInfo[giveplayerid][pVIPExpire] = gettime()+2592000*months;
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Bronze (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Bronze by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Bronze (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 2)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
						PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					PlayerInfo[giveplayerid][pVIPExpire] = gettime()+2592000*months;
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Silver (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Silver by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Silver (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 3)
				{
				    if(!GetPVarType(playerid, "ConfirmGold")) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "You are about to set someone's vip level to gold. If this is a gold vip order please use the new system.");
				        SendClientMessageEx(playerid, COLOR_WHITE, "For a new purchase of Gold Vip use(/newgvip).For renewals use(/renewgvip). If you wish to continue using this command type it again(/setvip)");
				        SetPVarInt(playerid, "ConfirmGold", 1);
				    }
				    else {
				        DeletePVar(playerid, "ConfirmGold");
						if (PlayerInfo[playerid][pAdmin] < 1337)
						{
							format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
							SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
						}
						if(PlayerInfo[giveplayerid][pVIPM] == 0)
						{
						    PlayerInfo[giveplayerid][pVIPM] = VIPM;
							VIPM++;
						}
						PlayerInfo[giveplayerid][pVIPExpire] = gettime()+2592000*months;
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Gold (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						ABroadCast(COLOR_LIGHTRED,string, 1337);
						format(string, sizeof(string), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Gold (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
						Log("logs/setvip.log", string);
						return 1;
					}
				}
				if(level == 4)
				{
					if (PlayerInfo[giveplayerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Platinum (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
					   	PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Platinum (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Platinum by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					// Level 5 Arms Job - Platinum VIP
					PlayerInfo[giveplayerid][pArmsSkill] = 401;

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Platinum (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
				if(level == 5)
				{
					if (PlayerInfo[playerid][pAdmin] < 1337)
					{
						format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Moderator (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					if(PlayerInfo[giveplayerid][pVIPM] == 0)
					{
					    PlayerInfo[giveplayerid][pVIPM] = VIPM;
						VIPM++;
					}
					format(string, sizeof(string), "AdmCmd: %s has set %s's VIP level to Moderator (%d).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), level);
					ABroadCast(COLOR_LIGHTRED,string, 1337);
					format(string, sizeof(string), "Your VIP level has been set to Moderator by Admin %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

					format(string, sizeof(string), "AdmCmd: %s has set %s's (IP:%s) VIP level to Moderator (%d) (order #%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), playerip, level, orderid);
					Log("logs/setvip.log", string);
					return 1;
				}
			}
			Misc_Save();
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:giftgvip(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, days,reason[32];
		if(sscanf(params, "uds[32]", giveplayerid, days, reason))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giftgvip [player] [days] [reason]");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pDonateRank] = 3;
			PlayerInfo[giveplayerid][pTempVIP] = 0;
			PlayerInfo[giveplayerid][pBuddyInvited] = 0;
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			PlayerInfo[giveplayerid][pVIPExpire] = gettime()+86400*days;
			format(string, sizeof(string), "AdmCmd: %s has gifted %s's Gold VIP for %d days (%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), days, reason);
			ABroadCast(COLOR_LIGHTRED,string, 1337);
			format(string, sizeof(string), "Your VIP level has been set to Gold by Admin %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "AdmCmd: %s has gifted %s's Gold VIP for %d days (%s)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), days, reason);
			Log("logs/setvip.log", string);
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:togjungle(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		if(jungleloaded == 0)
		{
			jungleloaded = 1;
			SendClientMessageEx(playerid, COLOR_YELLOW, "The jungle objects (all 159 of them) have been spawned.");
			jungleobjects[1] = CreateDynamicObject(3402,-2051.46289062,-194.11035156,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(sw_tempbarn01) (2)
			jungleobjects[2] = CreateDynamicObject(17063,-2085.01440430,-268.41482544,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(cw2_weebarn1_01) (1)
			jungleobjects[3] = CreateDynamicObject(17063,-2077.80126953,-128.26791382,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(cw2_weebarn1_01) (2)
			jungleobjects[4] = CreateDynamicObject(13435,-2057.45068359,-220.15391541,37.19699860,0.00000000,0.00000000,0.00000000); // JUNGLE object(sw_logs08) (1)
			jungleobjects[5] = CreateDynamicObject(13435,-2058.85717773,-180.67988586,37.19699860,0.00000000,0.00000000,0.00000000); // JUNGLE object(sw_logs08) (3)
			jungleobjects[6] = CreateDynamicObject(13435,-2049.60644531,-265.54135132,37.19699860,0.00000000,0.00000000,90.00000000); // JUNGLE object(sw_logs08) (4)
			jungleobjects[7] = CreateDynamicObject(13435,-2047.18359375,-134.25585938,37.18049622,0.00000000,0.00000000,90.00000000); // JUNGLE object(sw_logs08) (5)
			jungleobjects[8] = CreateDynamicObject(619,-2033.63122559,-147.11619568,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee03) (1)
			jungleobjects[9] = CreateDynamicObject(619,-2050.09448242,-233.22520447,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee03) (2)
			jungleobjects[10] = CreateDynamicObject(619,-2077.61572266,-190.76341248,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee03) (3)
			jungleobjects[11] = CreateDynamicObject(619,-2064.97558594,-130.79331970,34.32498169,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee03) (4)
			jungleobjects[12] = CreateDynamicObject(619,-2021.92211914,-200.65789795,34.32030869,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee03) (5)
			jungleobjects[13] = CreateDynamicObject(620,-2080.47631836,-231.35006714,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (1)
			jungleobjects[14] = CreateDynamicObject(620,-2030.34057617,-169.81216431,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (2)
			jungleobjects[15] = CreateDynamicObject(620,-2028.16735840,-234.06091309,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (3)
			jungleobjects[16] = CreateDynamicObject(620,-2083.07788086,-146.67929077,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (4)
			jungleobjects[17] = CreateDynamicObject(620,-2087.87011719,-116.80314636,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (5)
			jungleobjects[18] = CreateDynamicObject(620,-2020.09521484,-130.73515320,34.26856232,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (6)
			jungleobjects[19] = CreateDynamicObject(620,-2020.54211426,-271.88211060,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (7)
			jungleobjects[20] = CreateDynamicObject(620,-2091.50708008,-277.56271362,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm04) (8)
			jungleobjects[21] = CreateDynamicObject(621,-2053.12719727,-274.73248291,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (1)
			jungleobjects[22] = CreateDynamicObject(621,-2077.75854492,-247.29396057,33.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (2)
			jungleobjects[23] = CreateDynamicObject(621,-2017.68481445,-214.00558472,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (3)
			jungleobjects[24] = CreateDynamicObject(621,-2073.69067383,-215.73626709,30.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (5)
			jungleobjects[25] = CreateDynamicObject(621,-2048.95947266,-113.64000702,34.25989532,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (6)
			jungleobjects[26] = CreateDynamicObject(621,-2021.28088379,-156.64927673,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (7)
			jungleobjects[27] = CreateDynamicObject(621,-2079.31201172,-172.19703674,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (8)
			jungleobjects[28] = CreateDynamicObject(624,-2028.14575195,-217.80030823,30.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (1)
			jungleobjects[29] = CreateDynamicObject(624,-2084.28320312,-164.49050903,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (2)
			jungleobjects[30] = CreateDynamicObject(624,-2021.71154785,-189.37538147,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (3)
			jungleobjects[31] = CreateDynamicObject(624,-2063.75073242,-233.93153381,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (4)
			jungleobjects[32] = CreateDynamicObject(624,-2070.32250977,-155.36051941,30.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (5)
			jungleobjects[33] = CreateDynamicObject(624,-2015.20495605,-117.78878784,34.16016388,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (6)
			jungleobjects[34] = CreateDynamicObject(624,-2070.20434570,-119.15460205,34.33108521,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (7)
			jungleobjects[35] = CreateDynamicObject(624,-2039.26245117,-268.98297119,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (8)
			jungleobjects[36] = CreateDynamicObject(624,-2039.49328613,-236.62554932,31.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palwee02) (9)
			jungleobjects[37] = CreateDynamicObject(641,-2072.11157227,-205.08108521,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palmkb13) (1)
			jungleobjects[38] = CreateDynamicObject(641,-2062.13842773,-212.93363953,30.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palmkb13) (2)
			jungleobjects[39] = CreateDynamicObject(641,-2049.92089844,-209.04893494,30.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palmkb13) (3)
			jungleobjects[40] = CreateDynamicObject(641,-2035.42749023,-207.59408569,30.32031250,0.00000000,0.00000000,355.00000000); // JUNGLE object(veg_palmkb13) (4)
			jungleobjects[41] = CreateDynamicObject(670,-2051.85498047,-243.29284668,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (1)
			jungleobjects[42] = CreateDynamicObject(670,-2075.35986328,-163.18933105,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (2)
			jungleobjects[43] = CreateDynamicObject(670,-2035.28222656,-161.82221985,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (3)
			jungleobjects[44] = CreateDynamicObject(670,-2088.75219727,-153.72804260,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (4)
			jungleobjects[45] = CreateDynamicObject(670,-2034.85986328,-240.94728088,34.32738876,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (5)
			jungleobjects[46] = CreateDynamicObject(670,-2073.12524414,-225.46769714,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (6)
			jungleobjects[47] = CreateDynamicObject(711,-2018.91149902,-228.61007690,40.29760361,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgs_palm02) (1)
			jungleobjects[48] = CreateDynamicObject(711,-2056.22558594,-229.83569336,40.29760361,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgs_palm02) (2)
			jungleobjects[49] = CreateDynamicObject(711,-2079.37597656,-143.30529785,40.29760361,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgs_palm02) (3)
			jungleobjects[50] = CreateDynamicObject(726,-2081.46264648,-206.63653564,34.32031631,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (1)
			jungleobjects[51] = CreateDynamicObject(726,-2021.80505371,-143.92903137,34.31980896,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (2)
			jungleobjects[52] = CreateDynamicObject(726,-2019.18823242,-245.63639832,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (3)
			jungleobjects[53] = CreateDynamicObject(726,-2067.01586914,-260.19082642,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (4)
			jungleobjects[54] = CreateDynamicObject(726,-2026.43261719,-178.38278198,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (7)
			jungleobjects[55] = CreateDynamicObject(3920,-2046.08923340,-280.40838623,37.50281143,0.00000000,0.00000000,0.00000000); // JUNGLE object(lib_veg3) (1)
			jungleobjects[56] = CreateDynamicObject(6965,-2053.07836914,-154.74050903,38.00000000,0.00000000,0.00000000,0.00000000); // JUNGLE object(venefountain02) (1)
			jungleobjects[57] = CreateDynamicObject(621,-2065.65112305,-167.62501526,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm02) (9)
			jungleobjects[58] = CreateDynamicObject(622,-2051.74243164,-224.42350769,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palm03) (2)
			jungleobjects[59] = CreateDynamicObject(726,-2073.49682617,-144.80206299,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (8)
			jungleobjects[60] = CreateDynamicObject(9833,-2042.25292969,-141.71797180,37.52285767,0.00000000,0.00000000,0.00000000); // JUNGLE object(fountain_sfw) (1)
			jungleobjects[61] = CreateDynamicObject(9833,-2063.13208008,-141.82318115,37.52993774,0.00000000,0.00000000,0.00000000); // JUNGLE object(fountain_sfw) (3)
			jungleobjects[62] = CreateDynamicObject(9833,-2061.89111328,-165.80284119,37.52285767,0.00000000,0.00000000,0.00000000); // JUNGLE object(fountain_sfw) (4)
			jungleobjects[63] = CreateDynamicObject(9833,-2042.33728027,-165.77182007,37.52285767,0.00000000,0.00000000,0.00000000); // JUNGLE object(fountain_sfw) (5)
			jungleobjects[64] = CreateDynamicObject(14608,-2015.33923340,-277.16174316,35.59132767,0.00000000,0.00000000,0.00000000); // JUNGLE object(triad_buddha01) (1)
			jungleobjects[65] = CreateDynamicObject(16409,-2032.21325684,-226.80229187,34.32031250,0.00000000,0.00000000,180.00000000); // JUNGLE object(by_weehangr) (1)
			jungleobjects[66] = CreateDynamicObject(5816,-2040.09204102,-203.27839661,33.40000153,0.00000000,0.00000000,179.99450684); // JUNGLE object(odrampbit) (3)
			jungleobjects[67] = CreateDynamicObject(3885,-2082.74340820,-196.21575928,34.00000000,0.00000000,0.00000000,0.00000000); // JUNGLE object(sambase_sfxrf) (1)
			jungleobjects[68] = CreateDynamicObject(11443,-2022.98767090,-208.19670105,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo4) (1)
			jungleobjects[69] = CreateDynamicObject(11445,-2084.84716797,-253.91909790,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo06) (1)
			jungleobjects[70] = CreateDynamicObject(11446,-2065.08154297,-242.13317871,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo07) (1)
			jungleobjects[71] = CreateDynamicObject(11458,-2086.80493164,-224.89944458,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo10) (1)
			jungleobjects[72] = CreateDynamicObject(11442,-2084.86474609,-182.55130005,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo3) (2)
			jungleobjects[73] = CreateDynamicObject(11442,-2036.65258789,-246.82821655,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo3) (3)
			jungleobjects[74] = CreateDynamicObject(11441,-2041.68103027,-273.15185547,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo5) (1)
			jungleobjects[75] = CreateDynamicObject(11428,-2020.63769531,-254.32717896,40.22378159,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_indruin02) (1)
			jungleobjects[76] = CreateDynamicObject(17063,-2040.42114258,-259.34921265,34.32031250,0.00000000,0.00000000,90.00000000); // JUNGLE object(cw2_weebarn1_01) (6)
			jungleobjects[77] = CreateDynamicObject(11442,-2022.71704102,-168.50596619,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(des_pueblo3) (4)
			jungleobjects[78] = CreateDynamicObject(3878,-2014.88220215,-134.07257080,34.80585861,0.00000000,0.00000000,0.00000000); // JUNGLE object(headstones_sfsx) (1)
			jungleobjects[79] = CreateDynamicObject(837,-2068.88330078,-218.86032104,34.34416199,0.00000000,0.00000000,0.00000000); // JUNGLE object(dead_tree_1) (1)
			jungleobjects[80] = CreateDynamicObject(830,-2069.52416992,-271.82968140,34.63391876,0.00000000,0.00000000,0.00000000); // JUNGLE object(dead_tree_2) (1)
			jungleobjects[81] = CreateDynamicObject(1463,-2088.06005859,-146.92285156,34.64225388,0.00000000,0.00000000,0.00000000); // JUNGLE object(dyn_woodpile2) (1)
			jungleobjects[82] = CreateDynamicObject(1463,-2092.39086914,-107.75279999,34.64225388,0.00000000,0.00000000,0.00000000); // JUNGLE object(dyn_woodpile2) (2)
			jungleobjects[83] = CreateDynamicObject(867,-2056.55615234,-234.74026489,35.07736969,0.00000000,0.00000000,0.00000000); // JUNGLE object(p_rubble04col) (1)
			jungleobjects[84] = CreateDynamicObject(17958,-2036.90917969,-215.78125000,36.20532608,0.00000000,0.00000000,0.00000000); // JUNGLE object(buringd_alpha) (1)
			jungleobjects[85] = CreateDynamicObject(1337,-2047.35351562,-259.95214844,34.82031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(binnt07_la) (2)
			jungleobjects[86] = CreateDynamicObject(11414,-2051.27416992,-120.21122742,36.11828995,0.00000000,0.00000000,0.00000000); // JUNGLE object(fosterflowers02) (1)
			jungleobjects[87] = CreateDynamicObject(11414,-2066.84863281,-234.82644653,36.16846848,0.00000000,0.00000000,0.00000000); // JUNGLE object(fosterflowers02) (3)
			jungleobjects[88] = CreateDynamicObject(9152,-2041.40966797,-274.31790161,35.08473969,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush13_lvs) (1)
			jungleobjects[89] = CreateDynamicObject(9152,-2068.55737305,-273.58862305,35.08473969,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush13_lvs) (2)
			jungleobjects[90] = CreateDynamicObject(9152,-2087.01342773,-187.52886963,35.08473969,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush13_lvs) (3)
			jungleobjects[91] = CreateDynamicObject(8990,-2074.21875000,-166.96003723,35.02328110,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush11_lvs) (1)
			jungleobjects[92] = CreateDynamicObject(8990,-2073.58911133,-150.68104553,35.02328110,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush11_lvs) (2)
			jungleobjects[93] = CreateDynamicObject(8623,-2019.61267090,-238.32559204,35.08122253,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush03_lvs) (1)
			jungleobjects[94] = CreateDynamicObject(8623,-2080.77026367,-206.68438721,35.08122253,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush03_lvs) (2)
			jungleobjects[95] = CreateDynamicObject(8623,-2027.67749023,-178.32095337,35.08122253,0.00000000,0.00000000,0.00000000); // JUNGLE object(bush03_lvs) (3)
			jungleobjects[96] = CreateDynamicObject(8623,-2042.67382812,-165.97973633,35.08122253,0.00000000,0.00000000,354.04504395); // JUNGLE object(bush03_lvs) (4)
			jungleobjects[97] = CreateDynamicObject(873,-2023.93334961,-272.61700439,36.12096024,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (1)
			jungleobjects[98] = CreateDynamicObject(873,-2031.44067383,-256.95153809,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (2)
			jungleobjects[99] = CreateDynamicObject(873,-2087.92260742,-215.89453125,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (3)
			jungleobjects[100] = CreateDynamicObject(873,-2084.73535156,-163.97668457,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (4)
			jungleobjects[101] = CreateDynamicObject(873,-2088.21484375,-135.64469910,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (5)
			jungleobjects[102] = CreateDynamicObject(873,-2080.59350586,-111.86284637,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (6)
			jungleobjects[103] = CreateDynamicObject(873,-2051.11010742,-128.56510925,36.09048462,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (7)
			jungleobjects[104] = CreateDynamicObject(873,-2029.81933594,-155.27836609,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (8)
			jungleobjects[105] = CreateDynamicObject(873,-2024.95434570,-192.82142639,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (9)
			jungleobjects[106] = CreateDynamicObject(873,-2082.35278320,-255.99459839,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (10)
			jungleobjects[107] = CreateDynamicObject(873,-2072.10839844,-181.28762817,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (11)
			jungleobjects[108] = CreateDynamicObject(873,-2049.89990234,-110.84777832,36.06377792,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (12)
			jungleobjects[109] = CreateDynamicObject(873,-2019.74645996,-126.36241150,36.04109192,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (13)
			jungleobjects[110] = CreateDynamicObject(873,-2040.80664062,-175.87942505,36.12096024,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (14)
			jungleobjects[111] = CreateDynamicObject(873,-2072.25805664,-201.60649109,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (15)
			jungleobjects[112] = CreateDynamicObject(873,-2089.04394531,-121.37157440,36.11388016,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_procfpatch) (16)
			jungleobjects[113] = CreateDynamicObject(869,-2060.58251953,-237.54864502,34.77013397,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_pflowerswee) (1)
			jungleobjects[114] = CreateDynamicObject(826,-2069.20532227,-137.39550781,36.36249161,0.00000000,0.00000000,0.00000000); // JUNGLE object(genveg_tallgrass10) (1)
			jungleobjects[115] = CreateDynamicObject(821,-2050.31640625,-203.62792969,36.21776581,0.00000000,0.00000000,0.00000000); // JUNGLE object(genveg_tallgrass05) (1)
			jungleobjects[116] = CreateDynamicObject(821,-2030.13745117,-236.86337280,36.36249161,0.00000000,0.00000000,0.00000000); // JUNGLE object(genveg_tallgrass05) (2)
			jungleobjects[117] = CreateDynamicObject(818,-2058.76245117,-118.43167877,38.11378860,0.00000000,0.00000000,0.00000000); // JUNGLE object(genveg_tallgrass02) (1)
			jungleobjects[118] = CreateDynamicObject(818,-2033.24157715,-268.45336914,38.11096573,0.00000000,0.00000000,0.00000000); // JUNGLE object(genveg_tallgrass02) (2)
			jungleobjects[119] = CreateDynamicObject(670,-2080.53735352,-116.04135132,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(sm_firtallded) (7)
			jungleobjects[120] = CreateDynamicObject(726,-2084.78369141,-241.36285400,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (5)
			jungleobjects[121] = CreateDynamicObject(726,-2028.97412109,-273.62832642,34.32739639,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (6)
			jungleobjects[122] = CreateDynamicObject(726,-2043.36499023,-227.69320679,34.32739258,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (9)
			jungleobjects[123] = CreateDynamicObject(726,-2064.48266602,-225.34783936,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (10)
			jungleobjects[124] = CreateDynamicObject(726,-2022.48046875,-194.43847656,17.53373528,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (11)
			jungleobjects[125] = CreateDynamicObject(1337,-2022.48046875,-194.43847656,34.82031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(binnt07_la) (1)
			jungleobjects[126] = CreateDynamicObject(726,-2014.64172363,-110.22033691,34.16090775,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (13)
			jungleobjects[127] = CreateDynamicObject(726,-2041.63159180,-110.00406647,34.20480347,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (14)
			jungleobjects[128] = CreateDynamicObject(726,-2090.01684570,-175.84747314,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (15)
			jungleobjects[129] = CreateDynamicObject(726,-2062.87695312,-117.08264160,34.32614899,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (16)
			jungleobjects[130] = CreateDynamicObject(641,-2067.56005859,-274.15859985,31.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palmkb13) (5)
			jungleobjects[131] = CreateDynamicObject(641,-2071.85986328,-271.87100220,31.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(veg_palmkb13) (6)
			jungleobjects[132] = CreateDynamicObject(622,-2059.67041016,-276.23565674,34.32739258,0.00000000,0.00000000,90.00000000); // JUNGLE object(veg_palm03) (1)
			jungleobjects[133] = CreateDynamicObject(3279,-2032.03820801,-126.48939514,34.23167419,0.00000000,0.00000000,270.00000000); // JUNGLE object(a51_spottower) (1)
			jungleobjects[134] = CreateDynamicObject(845,-2066.75170898,-138.00964355,35.34299469,0.00000000,0.00000000,0.00000000); // JUNGLE object(dead_tree_17) (1)
			jungleobjects[135] = CreateDynamicObject(17063,-2030.73107910,-140.30435181,34.31211090,0.00000000,0.00000000,90.00000000); // JUNGLE object(cw2_weebarn1_01) (5)
			jungleobjects[136] = CreateDynamicObject(3279,-2090.01977539,-138.51840210,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(a51_spottower) (3)
			jungleobjects[137] = CreateDynamicObject(3279,-2070.47143555,-250.97338867,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(a51_spottower) (4)
			jungleobjects[138] = CreateDynamicObject(726,-2092.29833984,-257.64700317,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(tree_hipoly19) (17)
			jungleobjects[139] = CreateDynamicObject(3502,-2060.17309570,-235.21128845,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (1)
			jungleobjects[140] = CreateDynamicObject(3502,-2054.70898438,-258.67037964,36.25603485,0.00000000,0.00000000,90.00000000); // JUNGLE object(vgsn_con_tube) (3)
			jungleobjects[141] = CreateDynamicObject(3502,-2088.88867188,-210.71699524,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (4)
			jungleobjects[142] = CreateDynamicObject(3502,-2015.17736816,-225.16642761,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (5)
			jungleobjects[143] = CreateDynamicObject(3502,-2052.57299805,-176.30961609,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (6)
			jungleobjects[144] = CreateDynamicObject(3502,-2015.18566895,-143.16976929,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (7)
			jungleobjects[145] = CreateDynamicObject(3502,-2015.30383301,-165.90541077,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (8)
			jungleobjects[146] = CreateDynamicObject(3502,-2066.88012695,-120.53679657,36.25772095,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (9)
			jungleobjects[147] = CreateDynamicObject(3502,-2081.42016602,-162.12283325,36.24895477,0.00000000,0.00000000,0.00000000); // JUNGLE object(vgsn_con_tube) (10)
			jungleobjects[148] = CreateDynamicObject(3502,-2034.66528320,-214.54441833,36.24895477,0.00000000,0.00000000,90.00000000); // JUNGLE object(vgsn_con_tube) (11)
			jungleobjects[149] = CreateDynamicObject(3502,-2062.65698242,-204.88400269,36.24895477,0.00000000,0.00000000,90.00000000); // JUNGLE object(vgsn_con_tube) (12)
			jungleobjects[150] = CreateDynamicObject(967,-2044.08215332,-275.97265625,34.32031250,0.00000000,0.00000000,0.00000000); // JUNGLE object(bar_gatebox01) (1)
			jungleobjects[151] = CreateDynamicObject(987,-2026.07800293,-104.24207306,37.92187500,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (1)
			jungleobjects[152] = CreateDynamicObject(987,-2036.45166016,-103.65550232,37.92187500,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (2)
			jungleobjects[153] = CreateDynamicObject(987,-2046.75866699,-102.33660889,38.10920715,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (3)
			jungleobjects[154] = CreateDynamicObject(987,-2058.75781250,-102.33593750,38.10920715,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (5)
			jungleobjects[155] = CreateDynamicObject(987,-2069.99487305,-102.23992920,40.65079498,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (7)
			jungleobjects[156] = CreateDynamicObject(987,-2081.99414062,-102.23925781,40.65079498,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (8)
			jungleobjects[157] = CreateDynamicObject(987,-2093.99414062,-102.23925781,40.65079498,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (9)
			jungleobjects[158] = CreateDynamicObject(987,-2096.99414062,-102.23925781,40.65079498,0.00000000,0.00000000,0.00000000); // JUNGLE object(elecfence_bar) (10)
			jungleobjects[159] = CreateDynamicObject(987,-2097.18994141,-113.88061523,40.72303772,0.00000000,0.00000000,90.00000000); // JUNGLE object(elecfence_bar) (12)
		}
		else
		{
			jungleloaded = 0;
			for(new i; i < 160; i++)
			{
				DestroyDynamicObject(jungleobjects[i]);
			}
			SendClientMessageEx(playerid, COLOR_YELLOW, "The jungle objects have been despawned.");
		}
	}
	return 1;
}

CMD:ofine(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], query[256], name[MAX_PLAYER_NAME], amount, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, amount, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ofine [name] [amount] [reason]");

		//new tmpName[24];
		SetPVarString(playerid, "OnFine", name);
		SetPVarInt(playerid, "OnFineAmount", amount);
		SetPVarString(playerid, "OnFineReason", reason);


		format(query, sizeof(query), "UPDATE `accounts` SET `Money` = `Money` - %d WHERE `PermBand` < 3 AND `Band` = 0 AND `AdminLevel` < 2 AND `Username`='%s'", amount, name);
		mysql_function_query(MainPipeline, query, false, "OnFine", "i", playerid);

		format(string, sizeof(string), "Attempting to fine $%d from %s's account...", amount, name);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);


	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not a level three admin.");
	}
	return 1;
}

forward OnFine(index);
public OnFine(index)
{
	new string[128], name[24], amount, reason[64];
	GetPVarString(index, "OnFine", name, 24);
	amount = GetPVarInt(index, "OnFineAmount");
	GetPVarString(index, "OnFineReason", reason, 64);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully fined %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

		format(string, sizeof(string), "AdmCmd: %s was offline fined $%d by %s, reason: %s", name, amount, GetPlayerNameEx(index), reason);
		ABroadCast(COLOR_LIGHTRED,string,3);
		format(string, sizeof(string), "AdmCmd: %s was offline fined $%d by %s, reason: %s", name, amount, GetPlayerNameEx(index), reason);
		Log("logs/admin.log", string);
	}
	else {
		format(string, sizeof(string), "There was an issue with fining %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnFine");
	DeletePVar(index, "OnFineAmount");
	DeletePVar(index, "OnFineReason");

	return 1;
}

CMD:giveobject(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128], giveplayerid, object, slot;
		if(sscanf(params, "udd", giveplayerid, object, slot)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giveobject [player] [object] [slot]");
		}
		else if(!(0 <= slot < MAX_PLAYER_ATTACHED_OBJECTS)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid slot specified.");
		}
		else if(!IsPlayerConnected(giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else {
			PlayerToyInfo[giveplayerid][slot][ptModelID] = object;
			PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
			format(string, sizeof(string), "You have given %s object %d in slot %d.", GetPlayerNameEx(giveplayerid), object, slot);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have received a new toy from an administrator!");

			g_mysql_SaveToys(giveplayerid, slot);
		}
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] == 1337)
	{
		new object, slot;
		if(sscanf(params, "dd", object, slot)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giveobject [player] [object] [slot]");
		}
		else if(!(0 <= slot < MAX_PLAYER_ATTACHED_OBJECTS)) {
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid slot specified.");
		}
		else {
			PlayerToyInfo[playerid][slot][ptModelID] = object;
			PlayerToyInfo[playerid][slot][ptBone] = 1;
			//SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have given yourself a toy!");

			g_mysql_SaveToys(playerid, slot);
		}

	}
	return 1;
}

CMD:shopobject(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] == 1)
	{
		ShowPlayerDialog(playerid, SHOPOBJECT_ORDERID, DIALOG_STYLE_INPUT, "Shop Objects - Order ID", "Please enter the Order ID", "OK", "Cancel");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:charity(playerid, params[])
{
	new string[128], moneys;
	if(sscanf(params, "d", moneys)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /charity [amount]");

	if(moneys < 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "That is not enough.");
		return 1;
	}
	if(GetPlayerCash(playerid) < moneys)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have that much money.");
		return 1;
	}
	GivePlayerCash(playerid, -moneys);
	Tax += moneys;
	format(string, sizeof(string), "%s, thank you for your donation of $%d.",GetPlayerNameEx(playerid), moneys);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	//Log("logs/pay.log", string);
	Tax_Save();
	return 1;
}

CMD:accent(playerid, params[])
{
	new accent;
	if(sscanf(params, "d", accent))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accent [accent ID]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: Normal [1], British [2], Asian [4], Scottish [6], Irish [7], Russian [8]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Accents: American [9], Spanish [10], Southern [11], Italian [13], Gangsta [14], Australian [15]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Available Accents: Arabic [16], Balkan [17], Canadian [18] Jamaican [19] Israeli [20] Dutch [21] Brazilian [22] German [23]");
		return 1;
	}

	switch(accent)
	{
	case 1:
		{
			PlayerInfo[playerid][pAccent] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Normal accent, use /accent to change it." );
		}
	case 2:
		{
			PlayerInfo[playerid][pAccent] = 2;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the British accent, use /accent to change it." );
		}
	case 3:
		{
			PlayerInfo[playerid][pAccent] = 3;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Japanese accent, use /accent to change it." );
		}
	case 4:
		{
			PlayerInfo[playerid][pAccent] = 4;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Chinese accent, use /accent to change it." );
		}
	case 5:
		{
			PlayerInfo[playerid][pAccent] = 5;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Korean accent, use /accent to change it." );
		}
	case 6:
		{
			PlayerInfo[playerid][pAccent] = 6;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Scottish accent, use /accent to change it." );
		}
	case 7:
		{
			PlayerInfo[playerid][pAccent] = 7;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Irish accent, use /accent to change it." );
		}
	case 8:
		{
			PlayerInfo[playerid][pAccent] = 8;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Russian accent, use /accent to change it." );
		}
	case 9:
		{
			PlayerInfo[playerid][pAccent] = 9;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the American accent, use /accent to change it." );
		}
	case 10:
		{
			PlayerInfo[playerid][pAccent] = 10;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Mexican accent, use /accent to change it." );
		}
	case 11:
		{
			PlayerInfo[playerid][pAccent] = 11;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Texan accent, use /accent to change it." );
		}
	case 12:
		{
			PlayerInfo[playerid][pAccent] = 12;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Cuban accent, use /accent to change it." );
		}
	case 13:
		{
			PlayerInfo[playerid][pAccent] = 13;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Italian accent, use /accent to change it." );
		}
	case 14:
		{
			PlayerInfo[playerid][pAccent] = 14;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Gangsta accent, use /accent to change it." );
		}
	case 15:
		{
			PlayerInfo[playerid][pAccent] = 15;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Australian accent, use /accent to change it." );
		}
	case 16:
		{
			PlayerInfo[playerid][pAccent] = 16;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Arabic accent, use /accent to change it." );
		}
	case 17:
		{
			PlayerInfo[playerid][pAccent] = 17;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Balkan accent, use /accent to change it." );
		}
	case 18:
		{
			PlayerInfo[playerid][pAccent] = 18;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Canadian accent, use /accent to change it." );
		}
	case 19:
		{
			PlayerInfo[playerid][pAccent] = 19;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Jamaican accent, use /accent to change it." );
		}
	case 20:
		{
			PlayerInfo[playerid][pAccent] = 20;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Israeli accent, use /accent to change it." );
		}
	case 21:
	    {
	        PlayerInfo[playerid][pAccent] = 21;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Dutch accent, use /accent to change it." );
	    }
	case 22:
	    {
	        PlayerInfo[playerid][pAccent] = 22;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the Brazilian accent, use /accent to change it." );
	    }
   case 23:
	    {
	        PlayerInfo[playerid][pAccent] = 23;
			SendClientMessageEx(playerid, COLOR_WHITE, "You will now speak in the German accent, use /accent to change it." );
	    }
	}
	return 1;
}

CMD:check(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /check [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			AdminShowStats(playerid,giveplayerid);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not an administrator.");
	}
	return 1;
}

CMD:ocheck(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	SendClientMessageEx(playerid, COLOR_GRAD1, "This command has been disabled due to MySQL Database Performance Issues.");
	SendClientMessageEx(playerid, COLOR_GRAD1, "Contact an admin with database access to obtain specific account information.");

	return 1;
}

CMD:trunkput(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) { SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being inside the vehicle!"); return 1; }
	if(GetPVarInt(playerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command!");

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trunkput [weapon] [slot]");

	new pvid = -1, Float: x, Float: y, Float: z;

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++)
	{
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], x, y, z);
		if(IsPlayerInRangeOfPoint(playerid, 3.0, x, y, z))
		{
			pvid = d;
			break;
		}
	}
	if(pvid == -1) return SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicle that you own.");
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(PlayerVehicleInfo[playerid][pvid][pvId],engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take/put stuff inside the trunk if it's closed!(/car trunk to open it)");
	if(GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][pvid][pvId]) == 510)  return SendClientMessageEx(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");

	new Float: Health;
	GetPlayerHealth(playerid, Health);
	if(Health < 80.0) return SendClientMessageEx(playerid,COLOR_GREY,"You cannot store weapons in a car when your health lower than 80.");
	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}

	new maxslots = PlayerVehicleInfo[playerid][pvid][pvWepUpgrade]+1;
	if(slot > maxslots)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if( PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their silenced pistol in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their Desert Eagle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Shotgun in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Combat Shotgun in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s deposited their MP5 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}

	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their AK-47 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their M4 in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their rifle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your car gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their sniper rifle in their car safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
	if(PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] == 0)
	{
		PlayerVehicleInfo[playerid][pvid][pvWeapons][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		g_mysql_SaveVehicle(playerid, pvid);
		return 1;
	}
	else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
}

CMD:trunktake(playerid, params[]) {
	if(IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while you're inside a vehicle.");
	}
	else if(GetPVarInt(playerid, "IsInArena") >= 0) {
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
	}
	else if(GetPVarInt( playerid, "EventToken") != 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
	}
	else if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
	}
	else if(GetPVarInt(playerid, "GiveWeaponTimer") >= 1) {

		new
			szMessage[59];

		format(szMessage, sizeof(szMessage), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		return SendClientMessageEx(playerid, COLOR_GREY, szMessage);
	}

	new
		Float: fVehPos[3],
		iWeaponSlot = strval(params);

	for(new d = 0 ; d < MAX_PLAYERVEHICLES; d++) {
		if(PlayerVehicleInfo[playerid][d][pvId] != INVALID_PLAYER_VEHICLE_ID) {
			GetVehiclePos(PlayerVehicleInfo[playerid][d][pvId], fVehPos[0], fVehPos[1], fVehPos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 4.0, fVehPos[0], fVehPos[1], fVehPos[2])) {
				if(isnull(params)) {

					new
						szMessage[64];

					format(szMessage, sizeof(szMessage), "*** %s's %s Safe ***", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][d][pvId]));
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					for(new s = 0; s < 3; s++) if(PlayerVehicleInfo[playerid][d][pvWeapons][s] != 0) {

						new
							szWeapon[16];

						GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][s], szWeapon, sizeof(szWeapon));
						format(szMessage, sizeof(szMessage), "Slot %d: %s", s+1, szWeapon);
						SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
					}
					return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trunktake [slot]");
				}
				else if(GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 481 || GetVehicleModel(PlayerVehicleInfo[playerid][d][pvId]) == 509) {
					return SendClientMessageEx(playerid,COLOR_GREY,"That vehicle doesn't have a trunk.");
				}

				new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(PlayerVehicleInfo[playerid][d][pvId], engine, lights, alarm, doors, bonnet, boot, objective);

				if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET) {
					return SendClientMessageEx(playerid, COLOR_GRAD3, "You can't take weapons from the trunk if it's closed! /car trunk to open it.");
				}
				else if(!(1 <= iWeaponSlot <= PlayerVehicleInfo[playerid][d][pvWepUpgrade] + 1)) {
					return SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot specified.");
				}
				else if(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] != 0) {
					new
						szWeapon[16],
						szMessage[128];

					GetWeaponName(PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], szWeapon, sizeof(szWeapon));
					GivePlayerValidWeapon(playerid, PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1], 60000);
					PlayerVehicleInfo[playerid][d][pvWeapons][iWeaponSlot - 1] = 0;
					g_mysql_SaveVehicle(playerid, d);

					format(szMessage, sizeof(szMessage), "You have withdrawn a %s from your car gun locker.", szWeapon);
					SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

					format(szMessage, sizeof(szMessage), "* %s has withdrawn a %s from their car safe.", GetPlayerNameEx(playerid), szWeapon);
					return ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
			}
		}
	}
	return SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicle that you own.");
}

CMD:storegun(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /storegun [weapon] [slot]");

	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID)
		{
			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_GREY,string);
				return 1;
			}

			new maxslots = HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}

			if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1] != 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their silenced pistol in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their Desert Eagle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Combat Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their MP5 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}

			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their AK-47 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their M4 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their riflein their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their sniper rifle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an uzi in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their uzi in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][4] == 32 && PlayerInfo[playerid][pAGuns][4] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a tec9 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their tec9 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
			if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1] == 0)
			{
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouse(PlayerInfo[playerid][pPhousekey]);
				return 1;
			}
			else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
		}
	}

	else if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey2]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}

			if( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1] != 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You have a weapon stored in that slot already.");
				return 1;
			}

			new weapon;
			if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their silenced pistol in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][2];
					format(string,sizeof(string), "* %s deposited their Desert Eagle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][3];
					format(string,sizeof(string), "* %s deposited their Combat Shotgun in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their MP5 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their AK-47 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][5];
					format(string,sizeof(string), "* %s deposited their M4 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their riflein their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][6];
					format(string,sizeof(string), "* %s deposited their sniper rifle in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "uzi", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][4] == 28 && PlayerInfo[playerid][pAGuns][4] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an uzi in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their uzi in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			else if(strcmp(weaponchoice, "tec9", true, strlen(weaponchoice)) == 0)
			{
				if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a tec9 in your gun locker.");
					weapon = PlayerInfo[playerid][pGuns][4];
					format(string,sizeof(string), "* %s deposited their tec9 in their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
			}
			if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
			if(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1] == 0)
			{
				HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1] = weapon;
				RemovePlayerWeapon(playerid, weapon);
				SaveHouse(PlayerInfo[playerid][pPhousekey2]);
				return 1;
			}
			else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:getgun(playerid, params[])
{
	new string[128], slot;

	if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey])
		{
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s's Safe ***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if( HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getgun [slot]");
				return 1;
			}

			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pPhousekey]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1], 60000);
				HouseInfo[PlayerInfo[playerid][pPhousekey]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a silenced pistol from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a combat shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an MP5 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an AK-47 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an M4 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn a sniper rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
                if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				SaveHouse(PlayerInfo[playerid][pPhousekey]);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
				return 1;
			}
		}
	}
	else if( GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey2]+6000 )
	{
		if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID)
		{
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

			if(sscanf(params, "d", slot))
			{
				new weaponname[50];
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				format(string, sizeof(string), "*** %s's Safe ***", GetPlayerNameEx(playerid));
		   		SendClientMessageEx(playerid, COLOR_WHITE, string);
				for(new s = 0; s < 5; s++)
				{
					if( HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][s] != 0 )
					{
						GetWeaponName(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][s], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getgun [slot]");
				return 1;
			}

			if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
			{
				format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
				SendClientMessageEx(playerid,COLOR_GREY,string);
				return 1;
			}
			new maxslots = HouseInfo[PlayerInfo[playerid][pPhousekey2]][hGLUpgrade];
			if(slot > maxslots)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
				return 1;
			}
			if(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1] != 0)
			{
				new weaponname[50];
				GetWeaponName(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1], weaponname, sizeof(weaponname));
				GivePlayerValidWeapon(playerid, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1], 60000);
				HouseInfo[PlayerInfo[playerid][pPhousekey2]][hWeapons][slot-1] = 0;
				if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a silenced pistol from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a combat shotgun from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an MP5 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an AK-47 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn an M4 from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your gun locker.");
					format(string,sizeof(string), "* %s has withdrawn a rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
				}
				if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn a sniper rifle from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "micro smg", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				if(strcmp(weaponname, "tec9", true, strlen(weaponname)) == 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an uzi from your gun locker.");
					SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
					format(string,sizeof(string), "* %s has withdrawn an uzi from their house safe.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				SaveHouse(PlayerInfo[playerid][pPhousekey2]);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
				return 1;
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You're not in any house");
	}
	return 1;
}

CMD:hwithdraw(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 || GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey2]+6000)
	{
		if((PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetPlayerNameExt(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) || (PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameExt(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0))
		{
			new houseid = GetPlayerVirtualWorld(playerid) - 6000;
			new itemid, amount;

			if(sscanf(params, "dd", itemid, amount))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [itemid] [amount]");
				SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
				return 1;
			}

			if(itemid < 1 || itemid > 4) {
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hwithdraw [itemid] [amount]");
				SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
				return 1;
			}

			if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than 1.");

			switch(itemid)
			{
				case 1: // Cash
				{
					if(HouseInfo[houseid][hSafeMoney] >= amount)
					{
						SetPVarInt(playerid, "Special_HouseID", houseid);
						TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 4);
						SaveHouse(houseid);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
				}
				case 2: // Pot
				{
					if(HouseInfo[houseid][hPot] >= amount)
					{
						SetPVarInt(playerid, "Special_HouseID", houseid);
						TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 4);
						SaveHouse(houseid);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
				}
				case 3: // Crack
				{
					if(HouseInfo[houseid][hCrack] >= amount)
					{
						SetPVarInt(playerid, "Special_HouseID", houseid);
						TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 4);
						SaveHouse(houseid);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
				}
				case 4: // Materials
				{
					if(HouseInfo[houseid][hMaterials] >= amount)
					{
						SetPVarInt(playerid, "Special_HouseID", houseid);
						TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 4);
						SaveHouse(houseid);
					}
					else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
				}
			}

			return 1;
		}
	}
	else return SendClientMessageEx(playerid, COLOR_WHITE, "You are not in your house!");
	return 1;
}

CMD:hdeposit(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 || GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey2]+6000)
	{
		if((PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetPlayerNameExt(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) || (PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameExt(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0))
		{
			new houseid = GetPlayerVirtualWorld(playerid) - 6000;
			new string[128], itemid, storageid, amount;

			if(sscanf(params, "dd", itemid, amount))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [amount]");
				SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
				return 1;
			}
			if(itemid < 1 || itemid > 4) {
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [storageid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
					SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
					return 1;
			}
			else
			{
			/*if(sscanf(params, "ddd", itemid, storageid, amount))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [storageid] [amount]");
				SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
				SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
				return 1;
			}
			else
			{
				if(itemid < 1 || itemid > 4) {
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [storageid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
					SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
					return 1;
				}

				if(storageid < 0 || storageid > 1) {
					SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /hdeposit [itemid] [storageid] [amount]");
					SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
					SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
					return 1;
				}



				// Find the storageid of the storagedevice.
				if(storageid == 1) {
					new bool:itemEquipped = false;
					for(new i = 0; i < 3; i++)
					{
						if(StorageInfo[playerid][i][sAttached] == 1) {
							storageid = i+1;
							itemEquipped = true;
						}
					}
					if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
				}*/
				if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than 1.");
				switch(itemid)
				{
					case 1: // Cash
					{
						if(storageid == 0) {
							if(PlayerInfo[playerid][pCash] >= amount) PlayerInfo[playerid][pCash] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}
						else {
							if(StorageInfo[playerid][storageid-1][sCash] >= amount) StorageInfo[playerid][storageid-1][sCash] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}

						HouseInfo[houseid][hSafeMoney] += amount;
						format(string, sizeof(string), "You have deposited $%d to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						SaveHouse(houseid);
					}
					case 2: // Pot
					{
						if(storageid == 0) {
							if(PlayerInfo[playerid][pPot] >= amount) PlayerInfo[playerid][pPot] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}
						else {
							if(StorageInfo[playerid][storageid-1][sPot] >= amount) StorageInfo[playerid][storageid-1][sPot] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}

						HouseInfo[houseid][hPot] += amount;
						format(string, sizeof(string), "You have deposited %d Pot to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						SaveHouse(houseid);
					}
					case 3: // Crack
					{
						if(storageid == 0) {
							if(PlayerInfo[playerid][pCrack] >= amount) PlayerInfo[playerid][pCrack] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}
						else {
							if(StorageInfo[playerid][storageid-1][sCrack] >= amount) StorageInfo[playerid][storageid-1][sCrack] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}

						HouseInfo[houseid][hCrack] += amount;
						format(string, sizeof(string), "You have deposited %d Crack to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						SaveHouse(houseid);
					}
					case 4: // Materials
					{
						if(storageid == 0) {
							if(PlayerInfo[playerid][pMats] >= amount) PlayerInfo[playerid][pMats] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}
						else {
							if(StorageInfo[playerid][storageid-1][sMats] >= amount) StorageInfo[playerid][storageid-1][sMats] -= amount;
							else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
						}

						HouseInfo[houseid][hMaterials] += amount;
						format(string, sizeof(string), "You have deposited %d Materials to your house's safe.", amount);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
						SaveHouse(houseid);
					}
				}
			}
		}
	}
	return 1;
}

CMD:hbalance(playerid, params[])
{
	if(GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey]+6000 || GetPlayerVirtualWorld(playerid) == PlayerInfo[playerid][pPhousekey2]+6000)
	{
		if((PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(GetPlayerNameExt(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0) || (PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && strcmp(GetPlayerNameExt(playerid), HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner], true) == 0))
		{
			new string[128], houseid = GetPlayerVirtualWorld(playerid)-6000;
			SendClientMessageEx(playerid, COLOR_GREEN, "|____________________________________ Storage ____________________________________|");

			// House Storage
			format(string, sizeof(string), "(House Safe) Cash: ($%d) - Pot(%d) - Crack(%d) - Materials(%d)",
				HouseInfo[houseid][hSafeMoney],
				HouseInfo[houseid][hPot],
				HouseInfo[houseid][hCrack],
				HouseInfo[houseid][hMaterials]
			);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(playerid, COLOR_GREEN, "|_________________________________________________________________________________|");
			return 1;
		}
	}
	return 1;
}

CMD:ad(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "The /ad command has been removed - use /ads or /advertisements.");
	return 1;
}

CMD:ads(playerid, params[]) {
	return cmd_advertisements(playerid, params);
}

CMD:advertisements(playerid, params[]) {
	if(gPlayerLogged{playerid} == 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
	}
	else if(GetPVarType(playerid, "Injured")) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use advertisements while injured.");
	}
	else if(PlayerCuffed[playerid] != 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use advertisements right now.");
	}
	else if(PlayerInfo[playerid][pJailTime] > 0) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use advertisements while in jail.");
	}
	else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
	return 1;
}

CMD:setautoreply(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't a VIP.");
		return 1;
	}

	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setautoreply [text]");
		return 1;
	}

	new string[128];
	if(strlen(params) >= 1 && strlen(params) < 63)
	{
		format(PlayerInfo[playerid][pAutoTextReply], 64, "%s", params);
		format(string, sizeof(string), "You have changed your autotext response to: %s", params);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Your autotext response must consist of at least 1 character and can't exceed 64 characters.");
	}
	return 1;
}


CMD:switchfam(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new string[128], familyid;
		if(sscanf(params, "d", familyid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /switchfam [familyid]");
		if(PlayerInfo[playerid][pLeader] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are a leader from a faction, please use /quitfaction then try again.");
		if(familyid < 1 || familyid > MAX_FAMILY) return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid Family Number.");
		format(string, sizeof(string), "You have switched to family ID %d (%s).", familyid, FamilyInfo[familyid-1][FamilyName]);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pRank] = 6;
		PlayerInfo[playerid][pFMember] = familyid-1;
		PlayerInfo[playerid][pMember] = 0;

	}
	return 1;
}









CMD:gangwarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gangwarn [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Admins can not be gang warned!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is already banned from gangs.");
				return 1;
			}
			PlayerInfo[giveplayerid][pGangWarn] += 1;
			if(PlayerInfo[giveplayerid][pGangWarn] == 3)
			{
				format(string, sizeof(string), "AdmCmd: %s was banned from gangs by %s (had 3 Gang Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned from gangs by %s (had 3 Gang Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED, string, 2);
				format(string, sizeof(string), "You have been banned from gangs by %s (had 3 Gang Warnings), reason: %s", GetPlayerNameEx(playerid), reason);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pFMember] = 255;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pModel] = NOOB_SKIN;
				SetPlayerSkin(giveplayerid, NOOB_SKIN);
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was gang warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s was gang warned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "You were given a gang warning by %s, reason: %s", GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:gangunban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pGangModerator] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gangunban [player]");

		if( IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pGangWarn] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "That player isn't banned from gangs." );
			format(string, sizeof(string), "You have unbanned %s from gangs.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have been unbanned from gangs by Admin %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			PlayerInfo[giveplayerid][pGangWarn] = 0;

			format(string, sizeof(string), "AdmCmd: %s has been unbanned from gangs by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been unbanned from gangs by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}













// Going to add these to 24-7 later

/*
CMD:blindfold(playerid, params[]) {
	return cmd_bf(playerid, params);
}

CMD:bf(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /(b)lind(f)old [player]");

	if(IsPlayerConnected(giveplayerid))
	{
        if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
	        if(ProxDetectorS(6.0, playerid, giveplayerid))
			{
                new vehicle = GetPlayerVehicleID(playerid);
                if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, vehicle))
				{
                    if(GetPVarInt(giveplayerid, "BlindFolded") == 0) {
		    	        if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You may not blindfold yourself."); return 1; }
	  			        format(string, sizeof(string), "%s has placed a blindfold over your eyes, your vision has been blocked.", GetPlayerNameEx(playerid));
				        SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "You have placed a blindfold over %s's eyes.", GetPlayerNameEx(giveplayerid));
				        SendClientMessageEx(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* %s has placed a blindfold over %s's eyes.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				        TextDrawShowForPlayer(giveplayerid, BFText);
				        SetPVarInt(giveplayerid, "BlindFolded", 1);
				    }
     			    else {
		    	        if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, " You may not un-blindfold yourself !"); return 1; }
	  			        format(string, sizeof(string), "%s has removed the blindfold from over your eyes !", GetPlayerNameEx(playerid));
				        SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), " ** You have removed the blindfold from over %s's eyes.", GetPlayerNameEx(giveplayerid));
				        SendClientMessageEx(playerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "* %s has removed a blindfold from over %s's eyes.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				        TextDrawHideForPlayer(giveplayerid, BFText);
				        DeletePVar(giveplayerid, "BlindFolded");
    			    }
    		    }
    		    else
    		    {
        		    SendClientMessageEx(playerid, COLOR_GREY, "You must be the driver in order to use this command.");
    			    return 1;
			    }
		    }
		    else
		    {
			    SendClientMessageEx(playerid, COLOR_GREY, " That player is not in-range of you.");
			    return 1;
		    }
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
    return 1;
}
*/
CMD:hgate(playerid, params[])
{
	return cmd_movegate(playerid, params);
}

CMD:movegate(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /movegate [pass]");
	new Float:X, Float:Y, Float:Z;
	for(new i = 0; i < sizeof(GateInfo); i++)
	{
		GetDynamicObjectPos(GateInfo[i][gGATE], X, Y, Z);
		if (IsPlayerInRangeOfPoint(playerid,GateInfo[i][gRange], X, Y, Z))
		{
			if(strcmp(params, GateInfo[i][gPass], true) == 0)
			{
				if(GateInfo[i][gStatus] == 0)
				{
					MoveDynamicObject(GateInfo[i][gGATE], GateInfo[i][gPosXM], GateInfo[i][gPosYM], GateInfo[i][gPosZM], GateInfo[i][gSpeed], GateInfo[i][gRotXM], GateInfo[i][gRotYM], GateInfo[i][gRotZM]);
					GateInfo[i][gStatus] = 1;
				}
				else
				{
					MoveDynamicObject(GateInfo[i][gGATE], GateInfo[i][gPosX], GateInfo[i][gPosY], GateInfo[i][gPosZ], LowerSpeed, GateInfo[i][gRotX], GateInfo[i][gRotY], GateInfo[i][gRotZ]);
					GateInfo[i][gStatus] = 0;
				}
			}
		}
	}

	if(IsPlayerInRangeOfPoint(playerid, 20.0, 658.95,-1311.08,12.25))// Josh Sol's House - ID 275
	{
		if(strcmp(params, House275Password) == 0)
		{
			new string[64];
			format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			House275GateControl(1, 1);
			SetTimerEx("House275GateControl", 6000, 0, "ii", 1, 0);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20.0, 661.76,-1221.51,13.87))
	{
		if(strcmp(params, House275Password) == 0)
		{
			new string[64];
			format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			House275GateControl(0, 1);
			SetTimerEx("House275GateControl", 6000, 0, "ii", 0, 0);
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");

	}
	else if(IsPlayerInRangeOfPoint(playerid, 20, 787.17,-1158.40,22.23))
	{
		if(strcmp(params, House275Password) == 0)
		{
			new string[64];
			format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			House275GateControl(2, 1);
			SetTimerEx("House275GateControl", 6000, 0, "ii", 2, 0);
		}

		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 20, 2185.5706,-1765.8832,13.3753))
	{
		if(strcmp(params, House63Password) == 0)
		{
			if(House63GateStatus == 0)
			{
				new string[64];
				format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetDynamicObjectRot(House63Gate, 0, 0, 0);
				House63GateStatus = 1;
			}
			else
			{
				new string[64];
				format( string, sizeof( string ), "* %s uses their remote to close the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetDynamicObjectRot(House63Gate, 0, 90, 0);
				House63GateStatus = 0;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1282.2277,-783.3154,1089.9375))
	{
		if(strcmp(params, House310Password) == 0)
		{
			if(House310GateStatus[0] == 0)
			{
				new string[64];
				format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[0], 1270.46154785,-783.73199463,1088.41235352, 4);
				House310GateStatus[0] = 1;
			}
			else
			{
				new string[64];
				format( string, sizeof( string ), "* %s uses their remote to close the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[0], 1278.46154785,-783.73199463,1088.41235352, 4);
				House310GateStatus[0] = 0;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1240.8258,-833.5141,1084.0078))
	{
		if(strcmp(params, House310Password) == 0)
		{
			new string[64];
			if(House310GateStatus[1] == 0)
			{
				format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[1], 1240.41088867,-834.78045654,1073.92053223, 4);
				House310GateStatus[1] = 1;
			}
			else
			{
				format( string, sizeof( string ), "* %s uses their remote to close the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[1], 1240.41088867,-834.78045654,1076.92053223, 4);
				House310GateStatus[1] = 0;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1270.3916,-802.0000,1084.0078))
	{
		if(strcmp(params, House310Password) == 0)
		{
			new string[64];
			if(House310GateStatus[2] == 0)
			{
				format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[2], 1266.72741699,-802.41290283,1080, 4);
				House310GateStatus[2] = 1;
			}
			else
			{
				format( string, sizeof( string ), "* %s uses their remote to close the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[2], 1266.72741699,-802.41290283,1082.54785156, 4);
				House310GateStatus[2] = 0;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	else if(IsPlayerInRangeOfPoint(playerid, 5, 1264.2648,-808.5170,1084.0078))
	{
		if(strcmp(params, House310Password) == 0)
		{
			new string[64];
			if(House310GateStatus[3] == 0)
			{
				format( string, sizeof( string ), "* %s uses their remote to open the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[3], 1264.66577148,-814.11694336,1080, 4);
				House310GateStatus[3] = 1;
			}
			else
			{
				format( string, sizeof( string ), "* %s uses their remote to close the gates.", GetPlayerNameEx( playerid ) );
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(House310Gate[3], 1264.66577148,-814.11694336,1082.54785156, 4);
				House310GateStatus[3] = 0;
			}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD2, " Invalid Password.");
	}
	return 1;
}

CMD:admingatepw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new string[128], gateid, pass[24];
		if(sscanf(params, "ds[24]", gateid, pass)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /admingatepw [gateid] [pass]");

		if(strlen(pass) > 24)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " Must be 24 characters or less! ");
			return 1;
		}
		format(string, sizeof(string), "Gate Password for gate %d changed to %s", gateid, pass);
		format(GateInfo[gateid][gPass], 24, "%s", pass);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		SaveGate(gateid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:housegatepw(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /housegatepw [pass]");

	if(strlen(params) > 24)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " Must be 24 characters or less! ");
		return 1;
	}
	new ownsgate;

	for(new i = 0; i < sizeof(GateInfo); i++)
	{
		if((PlayerInfo[playerid][pPhousekey] == GateInfo[i][gHID]) || (PlayerInfo[playerid][pPhousekey2] == GateInfo[i][gHID]))
		{
			ownsgate = 1;
			format(string, sizeof(string), "House Gate Password for gate %d changed to %s", i, params);
			format(GateInfo[i][gPass], 24, "%s", params);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			SaveGate(i);
		}
	}
	if(PlayerInfo[playerid][pPhousekey] == 380)
	{
		ownsgate = 1;
		format(string, sizeof(House380Password), "%s", params);
		format(string, sizeof(string), "House Gate Password changed to %s", string);
		format(House380Password, sizeof(House380Password), "%s", params);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		Misc_Save();
		return 1;
	}
	else if(PlayerInfo[playerid][pPhousekey] == 275)
	{
		ownsgate = 1;
		format(string, sizeof(House275Password), "%s", params);
		format(string, sizeof(string), "House Gate Password changed to %s", string);
		format(House275Password, sizeof(House275Password), "%s", params);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		Misc_Save();
		return 1;
	}
	else if(PlayerInfo[playerid][pPhousekey] == 63)
	{
		ownsgate = 1;
		format(string, sizeof(House63Password), "%s", params);
		format(string, sizeof(string), "House Gate Password changed to %s", string);
		format(House63Password, sizeof(House63Password), "%s", params);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		Misc_Save();
		return 1;
	}
	else if(PlayerInfo[playerid][pPhousekey] == 310)
	{
		ownsgate = 1;
		format(string, sizeof(House310Password), "%s", params);
		format(string, sizeof(string), "House Gate Password changed to %s", string);
		format(House310Password, sizeof(House310Password), "%s", params);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		Misc_Save();
		return 1;
	}
	if(!ownsgate) SendClientMessageEx(playerid, COLOR_WHITE, "* You don't own a gate");
	return 1;

}




CMD:reply(playerid, params[])
{
	new string[128];
	new reportid = INVALID_REPORT_ID;
	for(new i = 0; i < MAX_REPORTS; i++)
	{
		if(Reports[i][ReportFrom] == playerid && Reports[i][CheckingReport] != INVALID_PLAYER_ID)
		{
			reportid = i;
		}
	}
	if(reportid == INVALID_REPORT_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any reports being reviewed at the moment.");
		return 1;
	}
	if (IsPlayerConnected(Reports[reportid][CheckingReport]))
	{
		format(string, sizeof(string), "%s(ID: %d) replies: %s", GetPlayerNameEx(playerid), playerid, params);
		SendClientMessageEx(Reports[reportid][CheckingReport], COLOR_YELLOW, string);

		format(string, sizeof(string), "Reply sent to %s: %s", GetPlayerNameEx(Reports[reportid][CheckingReport]), params);
		SendClientMessageEx(playerid,  COLOR_YELLOW, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Player not connected.");
	return 1;
}

CMD:awithdraw(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /awithdraw [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > PlayerInfo[playerid][pAccount] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much!");
		return 1;
	}
	if(PlayerInfo[playerid][pDonateRank] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-fee;
		format(string, sizeof(string), "-$%d money as a 3 percent fee.", fee);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-amount;
	GivePlayerCash(playerid,amount);
	format(string, sizeof(string), "  You have withdrawn $%d from your account. Current balance: $%d ", amount,PlayerInfo[playerid][pAccount]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:adeposit(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adeposit [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much.");
		return 1;
	}
	if(PlayerInfo[playerid][pDonateRank] == 0)
	{
		new fee;
		fee = 3*amount/100;
		PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-fee;
		format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
		SendClientMessageEx(playerid, COLOR_GRAD2, string);
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pAccount];
	PlayerInfo[playerid][pAccount]=amount+PlayerInfo[playerid][pAccount];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ ATM STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%d", curfunds);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%d",amount);
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pAccount]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:abalance(playerid, params[])
{
	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128];
	format(string, sizeof(string), "  You have $%d in your account.",PlayerInfo[playerid][pAccount]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:awiretransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You must be at least level 3!");
		return 1;
	}

	if(!IsAtATM(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at an ATM!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /awiretransfer [player] [amount]");

	if (IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			new playermoney = PlayerInfo[playerid][pAccount];
			if (amount > 0 && playermoney >= amount)
			{
				if(PlayerInfo[playerid][pDonateRank] == 0)
				{
					new fee;
					fee = 3*amount/100;
					PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-fee;
					format(string, sizeof(string), "-$%d money (3 percent fee).", fee);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
				PlayerInfo[playerid][pAccount] -= amount;
				PlayerInfo[giveplayerid][pAccount] += amount;
				format(string, sizeof(string), "   You have transferred $%d to %s's account.", amount, GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved $%d to into your account from %s.", amount, GetPlayerNameEx(playerid), playerid);
				SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[ATM] %s (IP:%s) has transferred $%d to %s (IP:%s).", GetPlayerNameEx(playerid), ip, amount, GetPlayerNameEx(giveplayerid), ipex);
				if(amount >= 420000)
				{
					ABroadCast(COLOR_YELLOW,string,2);
				}
				Log("logs/pay.log", string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:withdraw(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /withdraw [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > PlayerInfo[playerid][pAccount] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much!");
		return 1;
	}
	GivePlayerCash(playerid,amount);
	PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-amount;
	format(string, sizeof(string), "  You have withdrawn $%d from your account. Current balance: $%d ", amount,PlayerInfo[playerid][pAccount]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:deposit(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], amount;

	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bank [amount]");
		format(string, sizeof(string), "  You have $%d in your account.", PlayerInfo[playerid][pAccount]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You don't have that much.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = PlayerInfo[playerid][pAccount];
	PlayerInfo[playerid][pAccount]=amount+PlayerInfo[playerid][pAccount];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
	format(string, sizeof(string), "  Old Balance: $%d", curfunds);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%d",amount);
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pAccount]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:balance(playerid, params[])
{
	new string[128];
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	format(string, sizeof(string), "You have $%d in your account.",PlayerInfo[playerid][pAccount]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:wiretransfer(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You must be at least level 3!");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
    if(PlayerInfo[playerid][pFreezeBank] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "Your bank is currently frozen");
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wiretransfer [player] [amount]");


	if (IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			new playermoney = PlayerInfo[playerid][pAccount] ;
			if (amount > 0 && playermoney >= amount)
			{
				PlayerInfo[playerid][pAccount] -= amount;
				PlayerInfo[giveplayerid][pAccount] += amount;
				format(string, sizeof(string), "   You have transferred $%d to %s's account.", amount, GetPlayerNameEx(giveplayerid),giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved $%d to into your account from %s.", amount, GetPlayerNameEx(playerid), playerid);
				SendClientMessageEx(giveplayerid, COLOR_GRAD1, string);
				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
				format(string, sizeof(string), "[BANK] %s (IP:%s) has transferred $%d to %s (IP:%s).", GetPlayerNameEx(playerid), ip, amount, GetPlayerNameEx(giveplayerid), ipex);

				if(amount >= 500000)
				{
					ABroadCast(COLOR_YELLOW,string,2);
				}
				Log("logs/pay.log", string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:asellhouse(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)//Adjusted - Mark.
	{
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername, sizeof(playername));

		new string[128], house;
		if(sscanf(params, "d", house)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /asellhouse [houseid]");

		HouseInfo[house][hLock] = 1;
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"Administrator %s (IP: %s) has admin-sold house ID %d (was owned by %s).",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hOwner]);
		Log("logs/house.log", string);
		ClearHouse(house);
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~You have sold house %d.", house);
		GameTextForPlayer(playerid, string, 10000, 3);
  SaveHouse(house);
		DestroyPickupEx(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\n/buyhouse to buy it.",HouseInfo[house][hDescription],HouseInfo[house][hValue],HouseInfo[house][hLevel]);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0, .testlos = 1, .streamdistance = 10.0);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sellhouse(playerid, params[])
{
    if(servernumber == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "This command is disabled!");
	    return 1;
	}
	new string[128];
	new house = PlayerInfo[playerid][pPhousekey];
	new house2 = PlayerInfo[playerid][pPhousekey2];

	if(house == INVALID_HOUSE_ID && house2 == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You don't own a house.");
		return 1;
	}

	if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]))
	{
		if(GetPVarInt(playerid, "HouseSellConfirm") == 0)
		{
			SetPVarInt(playerid, "HouseSellConfirm", 1);
			format(string, sizeof(string), "You are about to this house to no one for $%d!", HouseInfo[house][hValue]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(playerid, COLOR_WHITE, "If you were going to sell the house to someone do not repeat this command!");
		}
		else
		{
		DeletePVar(playerid, "HouseSellConfirm");
	    if(PlayerInfo[playerid][pFreezeHouse] == 1)
	    {
	        return SendClientMessageEx(playerid, COLOR_WHITE, "ERROR: Your house assets are frozen, you cannot sell your house!");
		}
		ClearHouse(house);
		HouseInfo[house][hLock] = 1;
		format( HouseInfo[house][hOwner], 128, "Nobody" );
		GivePlayerCash(playerid,HouseInfo[house][hValue]);
		HouseInfo[house][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", HouseInfo[house][hValue]);
		GameTextForPlayer(playerid, string, 4000, 3);
		PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
		if(PlayerInfo[playerid][pVW] == house+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,HouseInfo[house][hExteriorX],HouseInfo[house][hExteriorY],HouseInfo[house][hExteriorZ]);
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pPhousekey] = INVALID_HOUSE_ID;
		}
		PlayerInfo[playerid][pInsurance] = 0;
  SaveHouse(house);
		OnPlayerStatsUpdate(playerid);
		DestroyPickupEx(HouseInfo[house][hPickupID]);
		HouseInfo[house][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house][hTextID]);
		format(string, sizeof(string), "This house is\n For Sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[house][hDescription],HouseInfo[house][hValue],HouseInfo[house][hLevel],house);
		HouseInfo[house][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[house][hExteriorX], HouseInfo[house][hExteriorY], HouseInfo[house][hExteriorZ]+0.5, 10.0, .testlos = 1, .streamdistance = 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house,HouseInfo[house][hValue]);
		Log("logs/house.log", string);
		return 1;
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]))
	{
		if(GetPVarInt(playerid, "HouseSellConfirm2") == 0)
		{
			SetPVarInt(playerid, "HouseSellConfirm2", 1);
			format(string, sizeof(string), "You are about to this house to no one for $%d!", HouseInfo[house][hValue]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			SendClientMessageEx(playerid, COLOR_WHITE, "If you were going to sell the house to someone do not repeat this command!");
		}
		else
		{
		DeletePVar(playerid, "HouseSellConfirm2");
		ClearHouse(house2);
		HouseInfo[house2][hLock] = 1;
		format( HouseInfo[house2][hOwner], 128, "Nobody" );
		GivePlayerCash(playerid,HouseInfo[house2][hValue]);
		HouseInfo[house2][hGLUpgrade] = 1;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", HouseInfo[house2][hValue]);
		GameTextForPlayer(playerid, string, 4000, 3);
		PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		if(PlayerInfo[playerid][pVW] == house2+6000)
		{
			SetPlayerInterior(playerid,0);
			SetPlayerPosEx(playerid,HouseInfo[house2][hExteriorX],HouseInfo[house2][hExteriorY],HouseInfo[house2][hExteriorZ]);
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pPhousekey2] = INVALID_HOUSE_ID;
		}
		PlayerInfo[playerid][pInsurance] = 0;
		SaveHouse(house2);
		OnPlayerStatsUpdate(playerid);
		DestroyPickupEx(HouseInfo[house2][hPickupID]);
		HouseInfo[house2][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]);
		DestroyDynamic3DTextLabel(HouseInfo[house2][hTextID]);
		format(string, sizeof(string), "This house is\n For Sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[house2][hDescription],HouseInfo[house2][hValue],HouseInfo[house2][hLevel],house);
		HouseInfo[house2][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[house2][hExteriorX], HouseInfo[house2][hExteriorY], HouseInfo[house2][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
		new ip[32];
		GetPlayerIp(playerid,ip,sizeof(ip));
		format(string,sizeof(string),"%s (IP: %s) has sold their house (ID %d) for $%d.",GetPlayerNameEx(playerid),ip,house2,HouseInfo[house2][hValue]);
		Log("logs/house.log", string);
		return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You need to be near your house(exterior) in order to sell it.");
	}
	return 1;
}

CMD:call(playerid, params[])
{
	new string[128], phonenumb;

	if(sscanf(params, "d", phonenumb)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /call [phonenumber]");

	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone while in jail.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone whilist restrained.");
		return 1;
	}
	if(PlayerInfo[playerid][pPnumber] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a cell phone.");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen")) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
	ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	if(phonenumb == 911)
	{
		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Cannot use this whilist in prison!");
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /h(angup) to hang up.");
		SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Which service do you require, police or paramedic?");
		Mobile[playerid] = 911;
		return 1;
	}
	if(phonenumb == PlayerInfo[playerid][pPnumber])
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You just get a busy tone...");
		return 1;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already on a call...");
		return 1;
	}
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if(Spectating[giveplayerid]!=0)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You just get a busy tone...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					if (Mobile[giveplayerid] == INVALID_PLAYER_ID)
					{
						format(string, sizeof(string), "Your mobile is ringing - type /p to answer it. [Caller ID: %s]", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
						RingTone[giveplayerid] = 10;
						format(string, sizeof(string), "* %s's phone begins to ring.", GetPlayerNameEx(i));
						SendClientMessageEx(playerid, COLOR_WHITE, "HINT: You now use T to talk on your cellphone, type /hangup to hang up.");
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						new Float:rX, Float:rY, Float:rZ;
						GetPlayerPos(giveplayerid, rX, rY, rZ);
						//SendRingtoneToArea(playerid, 100, rX, rY, rZ);
						//SendAudioToPlayer(playerid, 60, 100);
						CellTime[playerid] = 1;
						SetPlayerAttachedObject(playerid, 9, 330, 6);
						return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
					}
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "Your call can not be completed as dialed, please check the number and try again.");
	return 1;
}

CMD:t(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:txt(playerid, params[])
{
	return cmd_sms(playerid, params);
}

CMD:sms(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You haven't logged in yet!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerInfo[playerid][pHospital]!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	if(PlayerTied[playerid] != 0 || PlayerCuffed[playerid] != 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You can't use your phone whilist restrained.");
		return 1;
	}

	new string[128], phonenumb, text[100];
	if(sscanf(params, "ds[100]", phonenumb, text)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/t)ext [phonenumber] [text chat]");

	if(PlayerInfo[playerid][pPnumber] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You don't have a cell phone...");
		return 1;
	}
	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You can not use your phone while in jail or prison!");
		return 1;
	}
	if(PhoneOnline[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your phone is off.");
		return 1;
	}

	if(Spectating[playerid]==0)
	{
		format(string, sizeof(string), "* %s takes out a cellphone.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}

	if(phonenumb == 555)
	{
		if ((strcmp("yes", text, true, strlen(text)) == 0) && (strlen(text) == strlen("yes")))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Text message delivered.");
			SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: I'm watching you, Sender: MOLE (555)");
			//SendAudioToPlayer(playerid, 47, 100);
			RingTone[playerid] = 20;
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: I'm watching you, Sender: MOLE (555)");
			//SendAudioToPlayer(playerid, 47, 100);
			RingTone[playerid] = 20;
			return 1;
		}
	}
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
		{
			new giveplayerid = i;
			if(Mobile[giveplayerid] != INVALID_PLAYER_ID)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is busy (on a call).");
				return 1;
			}
			Mobile[playerid] = giveplayerid; //caller connecting
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{

					if(PhoneOnline[giveplayerid] > 0)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 1;
					}
					foreach(new u: Player)
		    		{
		        		if(BigEar[u] == 6 && (BigEarPlayer[u] == playerid || BigEarPlayer[u] == giveplayerid))
		        		{
       						format(string, sizeof(string), "(BE) %s SMS to %s: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), text);
							SendClientMessageEx(u,COLOR_YELLOW, string);
						}
					}
					if(PlayerInfo[playerid][pPhonePrivacy] == 1)
					{
						format(string, sizeof(string), "SMS: %s, Sender: Unknown.", text,GetPlayerNameEx(playerid),PlayerInfo[playerid][pPnumber]);
					}
					else
					{
						format(string, sizeof(string), "SMS: %s, Sender: %s [%d] (%d)", text,GetPlayerNameEx(playerid),playerid,PlayerInfo[playerid][pPnumber]);
					}

					if(i != playerid)
					{
						if(PlayerInfo[i][pSmslog] > 0)
						{
							//Shuffle the last received messages...
							format(PlayerInfo[i][pSmslog9], 132, "%s", PlayerInfo[i][pSmslog8]);
							format(PlayerInfo[i][pSmslog8], 132, "%s", PlayerInfo[i][pSmslog7]);
							format(PlayerInfo[i][pSmslog7], 132, "%s", PlayerInfo[i][pSmslog6]);
							format(PlayerInfo[i][pSmslog6], 132, "%s", PlayerInfo[i][pSmslog5]);
							format(PlayerInfo[i][pSmslog5], 132, "%s", PlayerInfo[i][pSmslog4]);
							format(PlayerInfo[i][pSmslog4], 132, "%s", PlayerInfo[i][pSmslog3]);
							format(PlayerInfo[i][pSmslog3], 132, "%s", PlayerInfo[i][pSmslog2]);
							format(PlayerInfo[i][pSmslog2], 132, "%s", PlayerInfo[i][pSmslog1]);
							format(PlayerInfo[i][pSmslog1], 132, "%s", PlayerInfo[i][pSmslog0]);
							format(PlayerInfo[i][pSmslog0], 132, "%s", string);
						}
					}

					//format(string, sizeof(string), "* %s's phone beeps.", sendername);
					RingTone[giveplayerid] =20;
					SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "Text Message Delivered");
					format(string, sizeof(string), "~r~$-%d", 25);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerCash(playerid,-25);
					//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					//SendAudioToPlayer(playerid, 47, 100);
					//SendAudioToPlayer(giveplayerid, 47, 100);
					Mobile[playerid] = INVALID_PLAYER_ID;

					if(strcmp(PlayerInfo[giveplayerid][pAutoTextReply], "Nothing", true) != 0)
					{
						format(string, sizeof(string), "SMS: %s, Sender: %s [automated response] (%d)", PlayerInfo[giveplayerid][pAutoTextReply], GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pPnumber]);
						SendClientMessageEx(playerid, COLOR_YELLOW, string);
					}

					return 1;
				}
			}
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "  Message delivery failed...");
	return 1;
}

CMD:p(playerid, params[]) {
	return cmd_pickup(playerid, params);
}

CMD:pickup(playerid, params[])
{
	new string[128];
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are already on a call...");
		return 1;
	}
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital]) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	foreach(new i: Player)
	{
		if(Mobile[i] == playerid)
		{
			Mobile[playerid] = i; //caller connecting
			SendClientMessageEx(i,  COLOR_GRAD2, "   They picked up the call.");
			format(string, sizeof(string), "* %s (%d) answers their cellphone.", GetPlayerNameEx(playerid),playerid);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RingTone[playerid] = 0;
			SetPlayerAttachedObject(playerid, 9, 330, 6);
			return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		}
	}
	return 1;
}

CMD:h(playerid, params[]) {
	return cmd_hangup(playerid, params);
}

CMD:hangup(playerid,params[])
{
	new string[128];

	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	new caller = Mobile[playerid];
	if((IsPlayerConnected(caller) && caller != INVALID_PLAYER_ID))
	{
		if(caller < MAX_PLAYERS)
		{
			SendClientMessageEx(caller,  COLOR_GRAD2, "   They hung up.");
			format(string, sizeof(string), "* %s (%d) puts away their cellphone.", GetPlayerNameEx(caller),caller);
			ProxDetector(30.0, caller, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			CellTime[caller] = 0;
			Mobile[caller] = INVALID_PLAYER_ID;
		}
		CellTime[playerid] = 0;
		SendClientMessageEx(playerid,  COLOR_GRAD2, "   You hung up.");
		format(string, sizeof(string), "* %s (%d) puts away their cellphone.", GetPlayerNameEx(playerid),playerid);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		Mobile[playerid] = INVALID_PLAYER_ID;
		CellTime[playerid] = 0;
		RingTone[playerid] = 0;
		RemovePlayerAttachedObject(playerid, 9);
		RemovePlayerAttachedObject(caller, 9);
		SetPlayerSpecialAction(caller, SPECIAL_ACTION_STOPUSECELLPHONE);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		return 1;
	}
	SendClientMessageEx(playerid,  COLOR_GRAD2, "   Your phone is in your pocket.");
	return 1;
}

CMD:goindoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goindoor [doornumber]");

		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddInteriorInt]);
		SetPlayerPosEx(playerid,DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddInteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddInteriorInt];
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddInteriorVW];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddInteriorVW]);
		if(DDoorsInfo[doornum][ddCustomInterior]) Player_StreamPrep(playerid, DDoorsInfo[doornum][ddInteriorX],DDoorsInfo[doornum][ddInteriorY],DDoorsInfo[doornum][ddInteriorZ], FREEZE_TIME);
	}
	return 1;
}

CMD:gotodoor(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new doornum;
		if(sscanf(params, "d", doornum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotodoor [doornumber]");

		SetPlayerInterior(playerid,DDoorsInfo[doornum][ddExteriorInt]);
		SetPlayerPosEx(playerid,DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ]);
		SetPlayerFacingAngle(playerid,DDoorsInfo[doornum][ddExteriorA]);
		PlayerInfo[playerid][pInt] = DDoorsInfo[doornum][ddExteriorInt];
		SetPlayerVirtualWorld(playerid, DDoorsInfo[doornum][ddExteriorVW]);
		PlayerInfo[playerid][pVW] = DDoorsInfo[doornum][ddExteriorVW];
		if(DDoorsInfo[doornum][ddCustomExterior]) Player_StreamPrep(playerid, DDoorsInfo[doornum][ddExteriorX],DDoorsInfo[doornum][ddExteriorY],DDoorsInfo[doornum][ddExteriorZ], FREEZE_TIME);
	}
	return 1;
}

CMD:goinhouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /goinhouse [housenumber]");

		SetPlayerInterior(playerid,HouseInfo[housenum][hHInteriorWorld]);
		SetPlayerPosEx(playerid,HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hHInteriorWorld];
		if(HouseInfo[housenum][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[housenum][hInteriorX],HouseInfo[housenum][hInteriorY],HouseInfo[housenum][hInteriorZ], FREEZE_TIME);
	}
	return 1;
}

CMD:gotohouse(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new housenum;
		if(sscanf(params, "d", housenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotohouse [housenumber]");

		SetPlayerPosEx(playerid,HouseInfo[housenum][hExteriorX],HouseInfo[housenum][hExteriorY],HouseInfo[housenum][hExteriorZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pInt] = 0;
	}
	return 1;
}

CMD:gotogate(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new gatenum;
		if(sscanf(params, "d", gatenum)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotogate [gatenumber]");

		SetPlayerPosEx(playerid,GateInfo[gatenum][gPosX],GateInfo[gatenum][gPosY],GateInfo[gatenum][gPosZ]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		SetPlayerInterior(playerid, GateInfo[gatenum][gInt]);
		PlayerInfo[playerid][pInt] = GateInfo[gatenum][gInt];
		SetPlayerVirtualWorld(playerid,  GateInfo[gatenum][gVW]);
		PlayerInfo[playerid][pVW] =  GateInfo[gatenum][gVW];
	}
	return 1;
}

CMD:pedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!!");
		return 1;
	}

	new string[128], hours;
	if(sscanf(params, "d", hours))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pedit [hours]");
		SendClientMessageEx(playerid, COLOR_GREY, "HINT: Stand close to a point to set the hours.");
		return 1;
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			if(hours < 1|| hours > 24)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can not set the point time lower than 1 or higher than 24!");
			}
			else if(hours >= 1|| hours <= 24)
			{
				format(string, sizeof(string), "You have set this point's time to %d hours !", hours);
				Points[h][Vulnerable] = hours;
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				UpdatePoints();
			}
		}
	}
	return 1;
}

CMD:pointfix(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] <= 4 || PlayerInfo[playerid][pGangModerator] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command!!");
		return 1;
	}

	for(new h = 0; h < sizeof(Points); h++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
		{
			Points[h][TimeToClaim] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have fixed the point, players can now attempt to capture the point!");
			UpdatePoints();
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GREY, "Error: You need to stand close to the capture point to fix it.");
	return 1;
}

CMD:dedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dedit [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack");
		return 1;
	}

	if(strcmp(choice,"pot",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 3)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_WHITE, " You have successfully changed the Drug House available pot!");
			}
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		for(new h = 0; h < sizeof(Points); h++)
		{
			if(Points[h][Type] == 4)
			{
				Points[h][Stock] = amount;
				format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[h][Stock]);
				UpdateDynamic3DTextLabelText(Points[h][TextLabel], COLOR_YELLOW, string);
				SendClientMessageEx(playerid, COLOR_WHITE, " You have successfully changed the Crack Lab available crack!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid name.");
		return 1;
	}
	return 1;
}



CMD:ddstatus(playerid, params[])
{
	new doorid;
	if(sscanf(params, "i", doorid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ddstatus [doorid]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Door Status (ID: %d) ___________|", doorid);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "(Ext) X: %f | Y: %f | Z: %f | (Int) X: %f | Y: %f | Z: %f", DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ], DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Pickup ID: %d | Custom Int: %d | Custom Ext: %d | Exterior VW: %d | Exterior Int: %d | Interior VW: %d | Interior Int: %d", DDoorsInfo[doorid][ddPickupID], DDoorsInfo[doorid][ddCustomInterior], DDoorsInfo[doorid][ddCustomExterior], DDoorsInfo[doorid][ddExteriorVW], DDoorsInfo[doorid][ddExteriorInt], DDoorsInfo[doorid][ddInteriorVW], DDoorsInfo[doorid][ddInteriorInt]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "VIP: %d | Family: %d | Faction: %d | Admin: %d | Wanted: %d | Vehiclable: %d | Locked: %d | Password: %s", DDoorsInfo[doorid][ddVIP], DDoorsInfo[doorid][ddFamily], DDoorsInfo[doorid][ddFaction], DDoorsInfo[doorid][ddAdmin], DDoorsInfo[doorid][ddWanted], DDoorsInfo[doorid][ddVehicleAble], DDoorsInfo[doorid][dLocked], DDoorsInfo[doorid][dPass]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:ddnear(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all dynamic doors within 30 meters of you...");
		for(new i, szMessage[32]; i < MAX_DDOORS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]))
			{
				format(szMessage, sizeof(szMessage), "(Interior) DDoor ID %d | %f from you", i, GetPlayerDistanceFromPoint(playerid, DDoorsInfo[i][ddInteriorX], DDoorsInfo[i][ddInteriorY], DDoorsInfo[i][ddInteriorZ]));
			    SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
			if(IsPlayerInRangeOfPoint(playerid, 30, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]))
			{
				format(szMessage, sizeof(szMessage), "(Exterior) DDoor ID %d | %f from you", i, GetPlayerDistanceFromPoint(playerid, DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]));
			    SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all gates within 30 meters of you...");
		for(new i, Float: fGatePos[3], szMessage[32]; i < MAX_GATES; i++)
		{
			GetDynamicObjectPos(GateInfo[i][gGATE], fGatePos[0], fGatePos[1], fGatePos[2]);
			if(IsPlayerInRangeOfPoint(playerid, 30, fGatePos[0], fGatePos[1], fGatePos[2]))
			{
				if(GateInfo[i][gModel] != 0)
				{
			    	format(szMessage, sizeof(szMessage), "Gate ID %d (VW: %d) | %f from you", i, GateInfo[i][gVW], GetPlayerDistanceFromPoint(playerid, fGatePos[0], fGatePos[1], fGatePos[2]));
			    	SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:dmpnear(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing all map icons within 30 meters of you");
		new Float:X, Float:Y, Float:Z;
  		GetPlayerPos(playerid, X, Y, Z);
		for(new i;i<MAX_DMAPICONS;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 30, DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ]))
			{
				if(DMPInfo[i][dmpMarkerType] != 0)
				{
				    new string[128];
			    	format(string, sizeof(string), "MapIcon ID %d | %f from you", i, GetDistance(DMPInfo[i][dmpPosX], DMPInfo[i][dmpPosY], DMPInfo[i][dmpPosZ], X, Y, Z));
			    	SendClientMessageEx(playerid, COLOR_WHITE, string);
				}
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available gate...");
		for(new x;x<MAX_GATES;x++)
		{
		    if(GateInfo[x][gModel] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:dmpnext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available map icon...");
		for(new x;x<MAX_DMAPICONS;x++)
		{
		    if(DMPInfo[x][dmpMarkerType] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:ddnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available dynamic door...");
		for(new x;x<MAX_DDOORS;x++)
		{
		    if(DDoorsInfo[x][ddDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:dtnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available dynamic Text Lable...");
		for(new x;x<MAX_TEXT;x++)
		{
		    if(DTextInfo[x][dtDescription] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

/*CMD:hnext(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available house...");
		for(new x;x<MAX_HOUSES;x++)
		{
		    if(HouseInfo[x][hOwned] == 0)
		    {
		        new string[128];
		        format(string, sizeof(string), "%d is available to use.", x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        break;
			}
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}*/

CMD:hnext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "* Listing next available house...");
		for(new x;x<MAX_HOUSES;x++)
		{
			if(HouseInfo[x][hOwned] == 0)
			{
				new string[128];
				format(string, sizeof(string), "%d is available to use.", x);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				break;
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:floorname(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor, tmp[24];
	if(sscanf(params, "is[24]", floor, tmp))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floorname [floor] [name]");
		return 1;
	}
	new string[128];
	format(LAElevatorFloorData[0][floor-1],24, "%s", tmp);
	format(string, sizeof(string), "Renamed Floor %d to %s", floor, LAElevatorFloorData[0][floor-1]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();

	new Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		format(string, sizeof(string), "%s\nPress 'F' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

        DestroyDynamic3DTextLabel(Label_Floors[i]);
		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
	}
	return 1;
}

CMD:floorpass(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor, tmp[24];
	if(sscanf(params, "is[24]", floor, tmp))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floorpass [floor] [pass]");
		return 1;
	}
	new string[128];
	format(LAElevatorFloorData[1][floor-1],24, "%s", tmp);
	format(string, sizeof(string), "Floor %d pass set to %s", floor, LAElevatorFloorData[1][floor-1]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();
	return 1;
}

CMD:floorpassr(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor;
	if(sscanf(params, "i", floor))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floorpassr [floor]");
		return 1;
	}
	new string[128];
	floor = floor  - 1;
	format(LAElevatorFloorData[1][floor-1],24, "");
	format(string, sizeof(string), "Floor %d pass removed", floor);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();

	new Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		format(string, sizeof(string), "%s\nPress 'F' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		DestroyDynamic3DTextLabel(Label_Floors[i]);
		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
	}
	return 1;
}

CMD:floornamer(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new floor;
	if(sscanf(params, "i", floor))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /floornamer [floor]");
		return 1;
	}
	new string[128];
	format(LAElevatorFloorData[0][floor-1],24, "");
	format(string, sizeof(string), "Floor %d name removed", floor);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	SaveElevatorStuff();
	new Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		format(string, sizeof(string), "%s\nPress 'F' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		DestroyDynamic3DTextLabel(Label_Floors[i]);
		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
	}
	return 1;
}


CMD:wheels(playerid, params[])
{
   	//if(PlayerInfo[playerid][pAdminDuty] == 0) return SendClientMessage(playerid, -1, "You must be on Admin Duty to use this Command!");
    if(PlayerInfo[playerid][pAdmin] >= 1337)
    {
        new  giveplayerid;
        if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /wheels [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			ShowPlayerDialog(playerid, DIALOG_WHEELS, DIALOG_STYLE_LIST, "WHEELS", "Off-Road Wheels\nShadow Rims\nMega Rims\nRimshine Rims\nWire Rims\nClassic Rims\nTwist Rims\nCutter Rims\n{E8E800}Switch Rims\nGrove Rims\nImport Rims\nDollar Rims\nTrance Rims\nAtomic Rims", "Give", "Cancel");
			GiveWheelsTo[playerid] = giveplayerid;
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Not a valid ID!");
		}
  	}
	return 1;
}

CMD:gtome(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
	    new gateid;
	    if(sscanf(params, "d", gateid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /gtome [gatenumber]");
	    GetPlayerPos(playerid,GateInfo[gateid][gPosX],GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
	    GateInfo[gateid][gVW] = GetPlayerVirtualWorld(playerid);
	    GateInfo[gateid][gInt] = GetPlayerInterior(playerid);
	    new string[128];
		format(string, sizeof(string), "Gate Pos moved to %f %f %f, VW: %d INT: %d", GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt]);
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    if(GateInfo[gateid][gModel] == 0)
		{
		    GateInfo[gateid][gModel] = 18631;
		    GateInfo[gateid][gRange] = 10;
		    GateInfo[gateid][gSpeed] = 5;
		}
	    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
		CreateGate(gateid);
		SaveGate(gateid);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:gdel(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
	    new gateid;
	    if(sscanf(params, "d", gateid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /gdel [gatenumber]");
	    new string[128];
		format(string, sizeof(string), "Gate %d deleted.", gateid);
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
        GateInfo[gateid][gPosX] = 0.0;
        GateInfo[gateid][gPosY] = 0.0;
        GateInfo[gateid][gPosZ] = 0.0;
        GateInfo[gateid][gRotX] = 0.0;
        GateInfo[gateid][gRotY] = 0.0;
		GateInfo[gateid][gRotZ] = 0.0;
		GateInfo[gateid][gPosXM] = 0.0;
		GateInfo[gateid][gPosYM] = 0.0;
		GateInfo[gateid][gPosZM] = 0.0;
		GateInfo[gateid][gRotXM] = 0.0;
		GateInfo[gateid][gRotYM] = 0.0;
		GateInfo[gateid][gRotZM] = 0.0;
		GateInfo[gateid][gVW] = 0;
		GateInfo[gateid][gInt] = 0;
		GateInfo[gateid][gModel] = 0;
	    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
		//CreateGate(gateid);
		SaveGate(gateid);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}


CMD:gstatus(playerid, params[])
{
	new gateid;
	if(sscanf(params, "i", gateid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gstatus [gateid]");
		return 1;
	}
	if (PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pShopTech] == 1)
	{
		new string[128];
		format(string,sizeof(string),"|___________ Gate Status (ID: %d) ___________|", gateid);
		SendClientMessageEx(playerid, COLOR_GREEN, string);
		format(string, sizeof(string), "X: %f | Y: %f | Z: %f | RotX: %f | RotY: %f | RotZ: %f", GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gRotX], GateInfo[gateid][gRotY], GateInfo[gateid][gRotZ]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "XM: %f | YM: %f | ZM: %f | RotXM: %f | RotYM: %f | RotZM: %f", GateInfo[gateid][gPosXM], GateInfo[gateid][gPosYM], GateInfo[gateid][gPosZM], GateInfo[gateid][gRotXM], GateInfo[gateid][gRotYM], GateInfo[gateid][gRotZM]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Model: %d | HID: %d | VW: %d | Int: %d | Range: %d | Speed: %.3f | Pass: %s", GateInfo[gateid][gModel], GateInfo[gateid][gHID], GateInfo[gateid][gVW], GateInfo[gateid][gInt], GateInfo[gateid][gRange], GateInfo[gateid][gSpeed], GateInfo[gateid][gPass]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gdupe(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
	    new gateid;
	    if(sscanf(params, "d", gateid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /gdupe [gate to duplicate]");
		for(new x;x<MAX_GATES;x++)
		{
		    if(GateInfo[x][gModel] == 0)
		    {
		        new string[128];
				//new pass[24];
		        format(string, sizeof(string), "Gate %d was duplicated to: %d.", gateid, x);
		        SendClientMessageEx(playerid, COLOR_WHITE, string);
		        GateInfo[x][gModel] = GateInfo[gateid][gModel];
		        GateInfo[x][gVW] = GateInfo[gateid][gVW];
		        GateInfo[x][gInt] = GateInfo[gateid][gInt];
		        GateInfo[x][gSpeed] = GateInfo[gateid][gSpeed];
		        GateInfo[x][gRange] = GateInfo[gateid][gRange];
		        format(GateInfo[x][gPass], 24, "%s", GateInfo[gateid][gPass]);
		        GateInfo[x][gPosX] = GateInfo[gateid][gPosX];
		        GateInfo[x][gPosY] = GateInfo[gateid][gPosY];
		        GateInfo[x][gPosZ] = GateInfo[gateid][gPosZ];
		        GateInfo[x][gRotX] = GateInfo[gateid][gRotX];
	         	GateInfo[x][gRotY] = GateInfo[gateid][gRotY];
	         	GateInfo[x][gRotZ] = GateInfo[gateid][gRotZ];
		        GateInfo[x][gPosXM] = GateInfo[gateid][gPosXM];
		        GateInfo[x][gPosYM] = GateInfo[gateid][gPosYM];
		        GateInfo[x][gPosZM] = GateInfo[gateid][gPosZM];
		        GateInfo[x][gRotXM] = GateInfo[gateid][gRotXM];
	         	GateInfo[x][gRotYM] = GateInfo[gateid][gRotYM];
	         	GateInfo[x][gRotZM] = GateInfo[gateid][gRotZM];
     		    if(IsValidDynamicObject(GateInfo[x][gGATE])) DestroyDynamicObject(GateInfo[x][gGATE]);
				CreateGate(x);
		        break;
			}
		}
		SaveGate(gateid);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:gmove(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
	    if(GateEditMode[playerid] != INVALID_GATE_ID)
	    {
	    	SendClientMessageEx(playerid, COLOR_GRAD1, "Finish editing that gate niggah!");
	    	return 1;
	    }
		new gatenum;
		if(sscanf(params, "d", gatenum)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /gmove [gatenumber]");
	    new object = GateInfo[gatenum][gGATE];
	    EditDynamicObject(playerid, object);
	    new string[128];
	    format(string, sizeof(string), "Now editing gate number %d", gatenum);
		GateEditMode[playerid] = gatenum;
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:gmovem(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
	    if(GateEditMode2[playerid] != INVALID_GATE_ID)
	    {
	    	SendClientMessageEx(playerid, COLOR_GRAD1, "Finish editing that gate niggah!");
	    	return 1;
	    }
		new gatenum;
		if(sscanf(params, "d", gatenum)) return SendClientMessageEx(playerid, COLOR_GRAD1, "USAGE: /gmovem [gatenumber]");
	    new object = GateInfo[gatenum][gGATE];
	    EditDynamicObject(playerid, object);
	    new string[128];
	    format(string, sizeof(string), "Now editing gate number %d", gatenum);
		GateEditMode2[playerid] = gatenum;
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:gstopedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		GateEditMode[playerid] = INVALID_GATE_ID;
		GateEditMode2[playerid] = INVALID_GATE_ID;
		CancelEdit(playerid);
	    SendClientMessageEx(playerid, COLOR_WHITE, "You have ended editing mode! Gate positions not saved!");
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	return 1;
}

CMD:gedit(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pShopTech] == 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new x_job[128], gateid, Float:ofloat, string[128];

		if(sscanf(params, "s[128]if", x_job, gateid, ofloat))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gedit [name] [gateid] [value]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: HID, Model, VW, Int, Position, PosX(M), PosY(M), PosZ(M), RotX(M), RotZ(M)");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: tome(m), range, speed, status, gate, renderhq");
			return 1;
		}

		if(strcmp(x_job, "hid", true) == 0)
		{
			new value = floatround(ofloat, floatround_round);
		    if(value > MAX_HOUSES) return SendClientMessageEx(playerid, COLOR_WHITE, "* Invalid House ID!");
		    GateInfo[gateid][gHID] = value;
		    format(string, sizeof(string), "Gate HID assigned to %d", GateInfo[gateid][gHID]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's House ID to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "model", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);

		    if(value == 0)
		    {
		        GateInfo[gateid][gPosX] = 0.0;
		        GateInfo[gateid][gPosY] = 0.0;
		        GateInfo[gateid][gPosZ] = 0.0;
		        GateInfo[gateid][gRotX] = 0.0;
		        GateInfo[gateid][gRotY] = 0.0;
				GateInfo[gateid][gRotZ] = 0.0;
				GateInfo[gateid][gPosXM] = 0.0;
				GateInfo[gateid][gPosYM] = 0.0;
				GateInfo[gateid][gPosZM] = 0.0;
				GateInfo[gateid][gRotXM] = 0.0;
				GateInfo[gateid][gRotYM] = 0.0;
				GateInfo[gateid][gRotZM] = 0.0;
				GateInfo[gateid][gVW] = 0;
				GateInfo[gateid][gInt] = 0;
			}

		    GateInfo[gateid][gModel] = value;
		    format(string, sizeof(string), "Gate Model assigned to %d", GateInfo[gateid][gModel]);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
            CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Model to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "vw", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gVW] = value;
		    format(string, sizeof(string), "Gate VW assigned to %d", GateInfo[gateid][gVW]);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
            CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's VW to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "int", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gInt] = value;
		    format(string, sizeof(string), "Gate Int assigned to %d", GateInfo[gateid][gInt]);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
			CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's InteriorID to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "position", true) == 0)
		{
		    SendClientMessageEx(playerid, COLOR_GRAD2, " Temporarily disabled due to some minor issues");
		    /*new Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ;
		    GetDynamicObjectPos(GateInfo[gateid][gGATE], X, Y, Z);
		    GetDynamicObjectRot(GateInfo[gateid][gGATE], RX, RY, RZ);
		    DestroyDynamicObject(GateInfo[gateid][gGATE]);

		    if(IsValidObject(EditingObject[playerid])) DestroyObject(EditingObject[playerid]);
		    EditingObject[playerid] = CreateObject(GateInfo[gateid][gModel], X, Y, Z, RX, RY, RZ);
		    EditObject(playerid, EditingObject[playerid]);
		    SetPVarInt(playerid, "EditingGateID", gateid);
		    SendClientMessage(playerid, COLOR_WHITE, "HINT: Hold {8000FF}~k~~PED_SPRINT~ {FFFFAA}to move your camera, press escape to cancel");*/
		}
		else if(strcmp(x_job, "range", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gRange] = value;
		    format(string, sizeof(string), "Gate Range assigned to %d", GateInfo[gateid][gRange]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Range to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "speed", true) == 0)
		{
		    GateInfo[gateid][gSpeed] = ofloat;
		    format(string, sizeof(string), "Gate Speed assigned to %.3f", GateInfo[gateid][gSpeed]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's Speed to %.3f.", GetPlayerNameEx(playerid), gateid, ofloat);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "posx", true) == 0)
		{
		    GateInfo[gateid][gPosX] = ofloat;
		    format(string, sizeof(string), "Gate PosX assigned to %f", GateInfo[gateid][gPosX]);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posy", true) == 0)
		{
		    GateInfo[gateid][gPosY] = ofloat;
		    format(string, sizeof(string), "Gate PosY assigned to %f", GateInfo[gateid][gPosY]);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posz", true) == 0)
		{
			GateInfo[gateid][gPosZ] = ofloat;
		    format(string, sizeof(string), "Gate PosZ assigned to %f", GateInfo[gateid][gPosZ]);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posxm", true) == 0)
		{
		    GateInfo[gateid][gPosXM] = ofloat;
		    format(string, sizeof(string), "Gate PosXM assigned to %f", GateInfo[gateid][gPosXM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "posym", true) == 0)
		{
		    GateInfo[gateid][gPosYM] = ofloat;
		    format(string, sizeof(string), "Gate PosYM assigned to %f", GateInfo[gateid][gPosYM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "poszm", true) == 0)
		{
		    GateInfo[gateid][gPosZM] = ofloat;
		    format(string, sizeof(string), "Gate PosZM assigned to %f", GateInfo[gateid][gPosZM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotx", true) == 0)
		{
		    GateInfo[gateid][gRotX] = ofloat;
		    format(string, sizeof(string), "Gate RotX assigned to %f", GateInfo[gateid][gRotX]);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
      		SaveGate(gateid);
		}
		else if(strcmp(x_job, "roty", true) == 0)
		{
		    GateInfo[gateid][gRotY] = ofloat;
		    format(string, sizeof(string), "Gate RotY assigned to %f", GateInfo[gateid][gRotY]);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotz", true) == 0)
		{
			GateInfo[gateid][gRotZ] = ofloat;
		    format(string, sizeof(string), "Gate RotZ assigned to %f", GateInfo[gateid][gRotZ]);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotxm", true) == 0)
		{
		    GateInfo[gateid][gRotXM] = ofloat;
		    format(string, sizeof(string), "Gate RotXM assigned to %f", GateInfo[gateid][gRotXM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
      		SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotym", true) == 0)
		{
		    GateInfo[gateid][gRotYM] = ofloat;
		    format(string, sizeof(string), "Gate RotYM assigned to %f", GateInfo[gateid][gRotYM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
		else if(strcmp(x_job, "rotzm", true) == 0)
		{
		    GateInfo[gateid][gRotZM] = ofloat;
		    format(string, sizeof(string), "Gate RotZM assigned to %f", GateInfo[gateid][gRotZM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);
		}
        else if(strcmp(x_job, "tome", true) == 0)
		{
		    GetPlayerPos(playerid,GateInfo[gateid][gPosX],GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    GateInfo[gateid][gVW] = GetPlayerVirtualWorld(playerid);
		    GateInfo[gateid][gInt] = GetPlayerInterior(playerid);
			format(string, sizeof(string), "Gate Pos moved to %f %f %f, VW: %d INT: %d", GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ], GateInfo[gateid][gVW], GateInfo[gateid][gInt]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    if(GateInfo[gateid][gModel] == 0)
			{
			    GateInfo[gateid][gModel] = 18631;
			    GateInfo[gateid][gRange] = 10;
			    GateInfo[gateid][gSpeed] = 5.0;
			}
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
			CreateGate(gateid);
			SaveGate(gateid);

			format(string, sizeof(string), "%s has edited GateID %d's Position.", GetPlayerNameEx(playerid), gateid);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "tomem", true) == 0)
		{
		    GetPlayerPos(playerid,GateInfo[gateid][gPosXM],GateInfo[gateid][gPosYM], GateInfo[gateid][gPosZM]);
			format(string, sizeof(string), "Gate PosM moved to %f %f %f", GateInfo[gateid][gPosXM], GateInfo[gateid][gPosYM], GateInfo[gateid][gPosZM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
			SaveGate(gateid);

			format(string, sizeof(string), "%s has edited GateID %d's Moved Position.", GetPlayerNameEx(playerid), gateid);
		    Log("logs/gedit.log", string);
		}
		else if(strcmp(x_job, "renderhq", true) == 0)
		{
		    new value = floatround(ofloat, floatround_round);
		    GateInfo[gateid][gRenderHQ] = value;
		    format(string, sizeof(string), "Gate RenderHQ assigned to %d", GateInfo[gateid][gRenderHQ]);
		    if(IsValidDynamicObject(GateInfo[gateid][gGATE])) DestroyDynamicObject(GateInfo[gateid][gGATE]);
            CreateGate(gateid);
		    SendClientMessageEx(playerid, COLOR_WHITE, string);
		    SaveGate(gateid);

		    format(string, sizeof(string), "%s has edited GateID %d's RenderHQ to %d.", GetPlayerNameEx(playerid), gateid, value);
		    Log("logs/gedit.log", string);
		}
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:fedithq(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] == 1)
	{
		new family, x_hq[64], string[128];
		if(sscanf(params, "is[64]", family, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fedithq [family] [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Create, Delete, Editexterior, Editinterior, Custominterior");
			return 1;
		}

		if(family < 1 || family > MAX_FAMILY) {
			format(string,sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			return 1;
		}
		family -= 1;
		if(strcmp(x_hq,"create",true) == 0)
		{
	   		SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the entrance to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"delete",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 4);
			format(string,128,"Are you sure you want to delete this HQ?");
			ShowPlayerDialog(playerid,HQDELETE,DIALOG_STYLE_MSGBOX,"Warning:",string,"Yes","No");
		}
		else if(strcmp(x_hq,"editexterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 5);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the entrance to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"editinterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 6);
			SendClientMessageEx(playerid, COLOR_WHITE, "Please stand where you want the exit to be at.");
			SendClientMessageEx(playerid, COLOR_WHITE, "Once ready press the fire button.");
		}
		else if(strcmp(x_hq,"custominterior",true) == 0)
		{
		    SetPVarInt(playerid, "editingfamhq", family);
			SetPVarInt(playerid, "editingfamhqaction", 3);
			format(string,128,"Is '%s' interior a custom mapped one?", FamilyInfo[family][FamilyName]);
			ShowPlayerDialog(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"Warning:",string,"Yes","No");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid HQ name.");
		}
		SaveFamilies();
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:fedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] == 1)
	{
		new family, x_job[64], x_hq[64], ammount, string[128];
		if(sscanf(params, "is[64]s[64]", family, x_job, x_hq))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fedit [family] [name] [amount]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Tokens, Leader, MaxSkins, Skin1, Skin2, Skin3, Skin4, Skin5, Skin6, Skin7, Skin8");
			return 1;
		}
        ammount = strval(x_hq);
		if(family < 1 || family > MAX_FAMILY) {
			format(string,sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			return 1;
		}
		family -= 1;
		if(strcmp(x_job,"tokens",true) == 0)
		{
			FamilyInfo[family][FamilyTurfTokens] = ammount * 12;
			format(string, sizeof(string), "You have changed '%s' tokens amount to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if (strcmp(x_job,"leader",true) == 0)
		{
			if(strlen(x_hq) >= 20 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That leader name is too long, please refrain from using more than 20 characters." );
				return 1;
			}
			strcpy(FamilyInfo[family][FamilyLeader], x_hq, MAX_PLAYER_NAME);
			format(string, sizeof(string), "You have changed '%s' leader name to %s.", FamilyInfo[family][FamilyName], x_hq);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
		}
		else if(strcmp(x_job,"maxskins",true) == 0)
		{
			if(ammount > 8) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot set the maxskins more than 8.");
			if(ammount == 7)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
			}
			if(ammount == 6)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
			}
			if(ammount == 5)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
			}
			if(ammount == 4)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
			}
			if(ammount == 3)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
			}
			if(ammount == 2)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
			}

			if(ammount == 1)
			{
				FamilyInfo[family][FamilySkins][7] = 0;
				FamilyInfo[family][FamilySkins][6] = 0;
				FamilyInfo[family][FamilySkins][5] = 0;
				FamilyInfo[family][FamilySkins][4] = 0;
				FamilyInfo[family][FamilySkins][3] = 0;
				FamilyInfo[family][FamilySkins][2] = 0;
				FamilyInfo[family][FamilySkins][1] = 0;
			}

			FamilyInfo[family][FamilyMaxSkins] = ammount;
			format(string, sizeof(string), "You have changed '%s' max skins amount to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin1",true) == 0)
		{
			FamilyInfo[family][FamilySkins][0] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #1 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin2",true) == 0)
		{
			FamilyInfo[family][FamilySkins][1] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #2 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin3",true) == 0)
		{
			FamilyInfo[family][FamilySkins][2] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #3 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin4",true) == 0)
		{
			FamilyInfo[family][FamilySkins][3] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #4 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin5",true) == 0)
		{
			FamilyInfo[family][FamilySkins][4] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #5 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin6",true) == 0)
		{
			FamilyInfo[family][FamilySkins][5] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #6 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin7",true) == 0)
		{
			FamilyInfo[family][FamilySkins][6] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #7 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else if(strcmp(x_job,"skin8",true) == 0)
		{
			FamilyInfo[family][FamilySkins][7] = ammount;
			format(string, sizeof(string), "You have changed '%s' skin #8 to %d.", FamilyInfo[family][FamilyName], ammount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "	Not a valid name.");
			return 1;
		}
		SaveFamilies();
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	return 1;
}

CMD:ddname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pShopTech] < 1) {

		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], doorid, doorname[128];

	if(sscanf(params, "ds[128]", doorid, doorname)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddname [doorid] [name]");

	format(DDoorsInfo[doorid][ddDescription], 128, "%s", doorname);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the name of the door!");
	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
	CreateDynamicDoor(doorid);
	SaveDynamicDoors();

	format(string, sizeof(string), "%s has edited DoorID %d's Name to %s.", GetPlayerNameEx(playerid), doorid, doorname);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:dtextname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4 && PlayerInfo[playerid][pShopTech] < 1) {

		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], textid, textname[128];

	if(sscanf(params, "ds[128]", textid, textname)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /dtextname [textid] [name]");

	format(DTextInfo[textid][dtDescription], 128, "%s", textname);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the name of the door!");
	if(IsValidDynamicPickup(DTextInfo[textid][dtPickupID])) DestroyDynamicPickup(DTextInfo[textid][dtPickupID]);
	if(IsValidDynamic3DTextLabel(DTextInfo[textid][dtTextID])) DestroyDynamic3DTextLabel(DTextInfo[textid][dtTextID]);
	CreateDynamicText(textid);
	SaveDynamicText(textid);

	format(string, sizeof(string), "%s has edited textid %d's Name to %s.", GetPlayerNameEx(playerid), textid, textname);
	Log("logs/dtext.log", string);
	return 1;
}

CMD:ddpass(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");

	new string[128],
		doorid,
		doorpass[24];

	if(sscanf(params, "ds[24]", doorid, doorpass)) { SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddpass [doorid] [pass]"); SendClientMessageEx(playerid, COLOR_WHITE, "To remove the password on the door set the password to 'none' "); return 1; }
	format(DDoorsInfo[doorid][dPass], 24, "%s", doorpass);
	SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the password of that door.");
	SaveDynamicDoors();
	format(string, sizeof(string), "%s has edited DoorID %d's password to %s.", GetPlayerNameEx(playerid), doorid, doorpass);
	Log("logs/ddedit.log", string);
	return 1;
}

CMD:dmpedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], choice[32], mapiconid, amount;
	if(sscanf(params, "s[32]dD", choice, mapiconid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /dmpedit [name] [mapiconid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Position, MarkerType, Color, Delete");
		return 1;
	}

	if(mapiconid < 0 || mapiconid >= MAX_DMAPICONS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Map Icon ID!");
	}

	if(strcmp(choice, "position", true) == 0)
	{
		GetPlayerPos(playerid, DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ]);
		DMPInfo[mapiconid][dmpInt] = GetPlayerInterior(playerid);
		DMPInfo[mapiconid][dmpVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the position!");
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		SaveDynamicMapIcon(mapiconid);
		format(string, sizeof(string), "%s has edited MapIconID %d's Position.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have deleted the map icon!");
		DMPInfo[mapiconid][dmpPosX] = 0.0;
		DMPInfo[mapiconid][dmpPosY] = 0.0;
		DMPInfo[mapiconid][dmpPosZ] = 0.0;
		DMPInfo[mapiconid][dmpVW] = 0;
		DMPInfo[mapiconid][dmpInt] = 0;
		DMPInfo[mapiconid][dmpMarkerType] = 0;
		DMPInfo[mapiconid][dmpColor] = 0;
		SaveDynamicMapIcon(mapiconid);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		format(string, sizeof(string), "%s has deleted MapIconID %d.", GetPlayerNameEx(playerid), mapiconid);
		Log("logs/dmpedit.log", string);
		return 1;

	}
	else if(strcmp(choice, "markertype", true) == 0)
	{
		DMPInfo[mapiconid][dmpMarkerType] = amount;
		format(string, sizeof(string), "You have set the marker type to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Marker Type to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DMPInfo[mapiconid][dmpColor] = amount;
		format(string, sizeof(string), "You have set the color to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(IsValidDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID])) DestroyDynamicMapIcon(DMPInfo[mapiconid][dmpMapIconID]);
		DMPInfo[mapiconid][dmpMapIconID] = CreateDynamicMapIcon(DMPInfo[mapiconid][dmpPosX], DMPInfo[mapiconid][dmpPosY], DMPInfo[mapiconid][dmpPosZ], DMPInfo[mapiconid][dmpMarkerType], DMPInfo[mapiconid][dmpColor], DMPInfo[mapiconid][dmpVW], DMPInfo[mapiconid][dmpInt], -1, 500.0);
		format(string, sizeof(string), "%s has edited MapIconID %d's Color to %d.", GetPlayerNameEx(playerid), mapiconid, amount);
		Log("logs/dmpedit.log", string);
	}
	SaveDynamicMapIcon(mapiconid);
	return 1;
}

CMD:ddedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] <= 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], choice[32], doorid, amount;
	if(sscanf(params, "s[32]dD", choice, doorid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /ddedit [name] [doorid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, VIP");
		SendClientMessageEx(playerid, COLOR_GREY, "Family, Faction, Wanted, Admin, VehicleAble, Color, PickupModel, Delete");
		return 1;
	}

	if(doorid >= MAX_DDOORS)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Door ID! [Past Maximum]");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddInteriorX] != 0 && PlayerInfo[playerid][pAdmin] < 4) {
	        format(string, sizeof(string), "DoorID %d interior can't be re-moved from it's current location.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to re-move DoorID %d interior.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
	    }
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddInteriorX], DDoorsInfo[doorid][ddInteriorY], DDoorsInfo[doorid][ddInteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddInteriorA]);
		DDoorsInfo[doorid][ddInteriorInt] = GetPlayerInterior(playerid);
		DDoorsInfo[doorid][ddInteriorVW] = GetPlayerVirtualWorld(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the interior!");
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Interior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomInterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomInterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to custom interior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomInterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (not custom) interior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomInterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(DDoorsInfo[doorid][ddCustomExterior] == 0)
		{
			DDoorsInfo[doorid][ddCustomExterior] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to custom exterior!");
		}
		else
		{
			DDoorsInfo[doorid][ddCustomExterior] = 0;
			SendClientMessageEx(playerid, COLOR_WHITE, "Door set to normal (not custom) exterior!");
		}
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's CustomExterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddExteriorX] != 0 && PlayerInfo[playerid][pAdmin] < 4) {
	        format(string, sizeof(string), "DoorID %d Exterior can't be re-moved from it's current location.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to re-move DoorID %d exterior.", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
	    }
		GetPlayerPos(playerid, DDoorsInfo[doorid][ddExteriorX], DDoorsInfo[doorid][ddExteriorY], DDoorsInfo[doorid][ddExteriorZ]);
		GetPlayerFacingAngle(playerid, DDoorsInfo[doorid][ddExteriorA]);
		DDoorsInfo[doorid][ddExteriorVW] = GetPlayerVirtualWorld(playerid);
		DDoorsInfo[doorid][ddExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the exterior!");
		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);
		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Exterior.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
	}
	else if(strcmp(choice, "vip", true) == 0)
	{
		DDoorsInfo[doorid][ddVIP] = amount;

		format(string, sizeof(string), "You have changed the VIP Level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VIP Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "family", true) == 0)
	{
		DDoorsInfo[doorid][ddFamily] = amount;

		format(string, sizeof(string), "You have changed the Family to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Family.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "faction", true) == 0)
	{
		DDoorsInfo[doorid][ddFaction] = amount;

		format(string, sizeof(string), "You have changed the Faction to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Faction.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "admin", true) == 0)
	{
		DDoorsInfo[doorid][ddAdmin] = amount;

		format(string, sizeof(string), "You have changed the Admin Level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Admin Level.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "wanted", true) == 0)
	{
		DDoorsInfo[doorid][ddWanted] = amount;

		format(string, sizeof(string), "You have changed the Wanted to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Wanted.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "vehicleable", true) == 0)
	{
		DDoorsInfo[doorid][ddVehicleAble] = amount;

		format(string, sizeof(string), "You have changed the VehicleAble to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's VehicleAble.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "color", true) == 0)
	{
		DDoorsInfo[doorid][ddColor] = amount;

		format(string, sizeof(string), "You have changed the Color to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's Color.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "pickupmodel", true) == 0)
	{
		DDoorsInfo[doorid][ddPickupModel] = amount;

		format(string, sizeof(string), "You have changed the PickupModel to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
		if(IsValidDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID])) DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		CreateDynamicDoor(doorid);

		SaveDynamicDoors();
		format(string, sizeof(string), "%s has edited DoorID %d's PickupModel.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if (DDoorsInfo[doorid][ddDescription] == 0) {
	        format(string, sizeof(string), "DoorID %d does not exist.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
	    }
	    if (DDoorsInfo[doorid][ddInteriorX] != 0 && DDoorsInfo[doorid][ddExteriorX] != 0 && PlayerInfo[playerid][pAdmin] <= 1338) {
	        format(string, sizeof(string), "DoorID %d is currently being used and can't be deleted, contact a Co-Executive+ to delete it.", doorid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to deleted DoorID %d", GetPlayerNameEx(playerid), doorid);
			Log("logs/ddedit.log", string);
			return 1;
	    }
    	if(IsValidDynamicPickup(DDoorsInfo[doorid][ddPickupID])) DestroyDynamicPickup(DDoorsInfo[doorid][ddPickupID]);
	    DestroyDynamic3DTextLabel(DDoorsInfo[doorid][ddTextID]);
		DDoorsInfo[doorid][ddDescription] = 0;
		DDoorsInfo[doorid][ddCustomInterior] = 0;
		DDoorsInfo[doorid][ddExteriorVW] = 0;
		DDoorsInfo[doorid][ddExteriorInt] = 0;
		DDoorsInfo[doorid][ddInteriorVW] = 0;
		DDoorsInfo[doorid][ddInteriorInt] = 0;
		DDoorsInfo[doorid][ddExteriorX] = 0;
		DDoorsInfo[doorid][ddExteriorY] = 0;
		DDoorsInfo[doorid][ddExteriorZ] = 0;
		DDoorsInfo[doorid][ddExteriorA] = 0;
		DDoorsInfo[doorid][ddInteriorX] = 0;
		DDoorsInfo[doorid][ddInteriorY] = 0;
		DDoorsInfo[doorid][ddInteriorZ] = 0;
		DDoorsInfo[doorid][ddInteriorA] = 0;
		DDoorsInfo[doorid][ddCustomExterior] = 0;
		DDoorsInfo[doorid][ddVIP] = 0;
		DDoorsInfo[doorid][ddFamily] = 0;
		DDoorsInfo[doorid][ddFaction] = 0;
		DDoorsInfo[doorid][ddAdmin] = 0;
		DDoorsInfo[doorid][ddWanted] = 0;
		DDoorsInfo[doorid][ddVehicleAble] = 0;
		DDoorsInfo[doorid][ddColor] = 0;
		DDoorsInfo[doorid][dPass] = 0;
		DDoorsInfo[doorid][dLocked] = 0;
		SaveDynamicDoors();
		format(string, sizeof(string), "You have deleted DoorID %d.", doorid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted DoorID %d.", GetPlayerNameEx(playerid), doorid);
		Log("logs/ddedit.log", string);
		return 1;
	}
	return 1;
}

CMD:dtext(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] <= 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command!");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], choice[32], textid, amount;
	if(sscanf(params, "s[32]dD", choice, textid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /dtext [name] [textid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names:Position, Model, Delete");
		SendClientMessageEx(playerid, COLOR_GREY, "Note: To remove the model just put -1.");
		SendClientMessageEx(playerid, COLOR_GREY, "To Add/Edit the text use /dtextname");
		return 1;
	}
	if(textid >= MAX_TEXT)
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Text Label ID! [Past Maximum]");
		return 1;
	}
	if(strcmp(choice, "position", true) == 0)
	{
		GetPlayerPos(playerid, DTextInfo[textid][dtExteriorX], DTextInfo[textid][dtExteriorY], DTextInfo[textid][dtExteriorZ]);
		DTextInfo[textid][dtExteriorVW] = GetPlayerVirtualWorld(playerid);
		DTextInfo[textid][dtExteriorInt] = GetPlayerInterior(playerid);
		SendClientMessageEx(playerid, COLOR_WHITE, "You have changed the text lable position.");
		if(IsValidDynamicPickup(DTextInfo[textid][dtPickupID])) DestroyDynamicPickup(DTextInfo[textid][dtPickupID]);
		if(IsValidDynamic3DTextLabel(DTextInfo[textid][dtTextID])) DestroyDynamic3DTextLabel(DTextInfo[textid][dtTextID]);
		CreateDynamicText(textid);
		SaveDynamicText(textid);
		format(string, sizeof(string), "%s has edited textid %d's Exterior.", GetPlayerNameEx(playerid), textid);
		Log("logs/dtext.log", string);
	}
	/*else if(strcmp(choice, "color", true) == 0)
	{
		DTextInfo[textid][dtColor] = amount;

		format(string, sizeof(string), "You have changed the Color to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DTextInfo[textid][dtPickupID])) DestroyDynamicPickup(DTextInfo[textid][dtPickupID]);
		if(IsValidDynamic3DTextLabel(DTextInfo[textid][dtTextID])) DestroyDynamic3DTextLabel(DTextInfo[textid][dtTextID]);
		CreateDynamicDoor(textid);

		SaveDynamicText(textid);
		format(string, sizeof(string), "%s has edited textid %d's Color.", GetPlayerNameEx(playerid), textid);
		Log("logs/dtext.log", string);
		return 1;
	}*/
	else if(strcmp(choice, "model", true) == 0)
	{
		DTextInfo[textid][dtModel] = amount;

		format(string, sizeof(string), "You have changed the Model to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsValidDynamicPickup(DTextInfo[textid][dtPickupID])) DestroyDynamicPickup(DTextInfo[textid][dtPickupID]);
		if(IsValidDynamic3DTextLabel(DTextInfo[textid][dtTextID])) DestroyDynamic3DTextLabel(DTextInfo[textid][dtTextID]);
		CreateDynamicText(textid);

		SaveDynamicText(textid);
		format(string, sizeof(string), "%s has edited textid %d's Model.", GetPlayerNameEx(playerid), textid);
		Log("logs/dtext.log", string);
		return 1;
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if (DTextInfo[textid][dtDescription] == 0) {
	        format(string, sizeof(string), "textid %d does not exist.", textid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			return 1;
	    }
	    if (DTextInfo[textid][dtExteriorX] != 0 && PlayerInfo[playerid][pAdmin] <= 1338) {
	        format(string, sizeof(string), "textid %d is currently being used and can't be deleted, contact a Co-Executive+ to delete it.", textid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to deleted textid %d", GetPlayerNameEx(playerid), textid);
			Log("logs/dtext.log", string);
			return 1;
	    }
    	if(IsValidDynamicPickup(DTextInfo[textid][dtPickupID])) DestroyDynamicPickup(DTextInfo[textid][dtPickupID]);
	    DestroyDynamic3DTextLabel(DTextInfo[textid][dtTextID]);
		DTextInfo[textid][dtDescription] = 0;
		DTextInfo[textid][dtExteriorVW] = 0;
		DTextInfo[textid][dtExteriorInt] = 0;
		DTextInfo[textid][dtExteriorX] = 0;
		DTextInfo[textid][dtExteriorY] = 0;
		DTextInfo[textid][dtExteriorZ] = 0;
		DTextInfo[textid][dtColor] = 0;
		SaveDynamicText(textid);
		format(string, sizeof(string), "You have deleted textid %d.", textid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted textid %d.", GetPlayerNameEx(playerid), textid);
		Log("logs/dtext.log", string);
		return 1;
	}
	return 1;
}

CMD:hname(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], houseid, ownername[24];
	if(sscanf(params, "ds[24]", houseid, ownername)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hname [houseid] [name]");
    if((houseid > TotalHouses) || (houseid < 0)) // -Phazd <3
    {
        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
        return 1;
	}
	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(string, sizeof(string), "You have set the house owner to %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	DestroyPickupEx(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
	SaveHouse(houseid);

	format(string, sizeof(string), "%s has edited HouseID %d's Owner to %s.", GetPlayerNameEx(playerid), houseid, ownername);
	Log("logs/hedit.log", string);

	return 1;
}

CMD:hcreate(playerid, params[])
{
	new query[256];
	if(PlayerInfo[playerid][pAdmin] >= 99999)
	{
	    if(TotalHouses >= MAX_HOUSES) // -Phazd <3
 		{
	        SendClientMessageEx(playerid, COLOR_GREY, "Max houses hit. Must increase MAX_HOUSES value in script for more.");
	        return 1;
		}
		format(query, sizeof(query), "INSERT INTO `houses` (`Level`,`Description`, `Owner`) VALUES ('1','Low','Nobody')");
		mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
		SendClientMessageEx(playerid, COLOR_GRAD2, "House Created.");
		TotalHouses++;
	}
	return 1;
}

CMD:dmpcreate(playerid, params[])
{
	new query[256];
	if(PlayerInfo[playerid][pAdmin] >= 99999) {
	for(new i = 0; i < 2000; i++) {
	format(query, sizeof(query), "INSERT INTO `dtexts` (`ExteriorX`) VALUES ('0.00000')");
	mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "2,000 Text Lables Created.");
	}
	return 1;
}

CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Class (1-3), Level, Price");
		return 1;
	}
    if((houseid > TotalHouses) || (houseid < 0)) // -Phazd <3
    {
        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
        return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		DestroyPickupEx(HouseInfo[houseid][hPickupID]);
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickupEx(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
			else
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
			else
			{
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	SaveHouse(houseid);
	return 1;
}

// --- Oops... -Phazd <3
/*CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
	    if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Class (1-3), Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
 		if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
 		if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
 		if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
 		if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		DestroyPickupEx(HouseInfo[houseid][hPickupID]);
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickupEx(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
			else
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
 		if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
			else
			{
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
 		if(houseid > TotalHouses)
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "Invalid houseid.");
	        return 1;
		}
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("logs/hedit.log", string);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/hedit.log", string);
	}
	SaveHouse(houseid);
	return 1;
}
*/

/*CMD:hedit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 4 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], choice[32], houseid, amount;
	if(sscanf(params, "s[32]dD", choice, houseid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hedit [name] [houseid] [(Optional)amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, CustomExterior, Class (1-3), Level, Price");
		return 1;
	}
	if(strcmp(choice, "interior", true) == 0)
	{
	    if (HouseInfo[houseid][hInteriorZ] != 0 && PlayerInfo[playerid][pAdmin] < 4) {
	        format(string, sizeof(string), "HouseID %d Can't be re-moved from its current location.", houseid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to re-move HouseID %d interior.", GetPlayerNameEx(playerid), houseid);
			Log("logs/edits/hedit.log", string);
			return 1;
	    }
		GetPlayerPos(playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hInteriorA]);
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/edits/hedit.log", string);
		DeletePVar(playerid, "hiconfrim");
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Interior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/edits/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouse(houseid);

		format(string, sizeof(string), "%s has edited HouseID %d's Custom Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/edits/hedit.log", string);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
	    if (HouseInfo[houseid][hExteriorX] != 0 && PlayerInfo[playerid][pAdmin] < 4) {
	        format(string, sizeof(string), "HouseID %d exterior can't be re-moved from it's current location.", houseid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to re-move HouseID %d exterior.", GetPlayerNameEx(playerid), houseid);
			Log("logs/edits/hedit.log", string);
			return 1;
	    }
		GetPlayerPos(playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		GetPlayerFacingAngle(playerid, HouseInfo[houseid][hExteriorA]);
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		DestroyPickupEx(HouseInfo[houseid][hPickupID]);
		SaveHouse(houseid);
		format(string, sizeof(string), "%s has edited HouseID %d's Exterior.", GetPlayerNameEx(playerid), houseid);
		Log("logs/edits/hedit.log", string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickupEx(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
			else
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
			else
			{
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
		}
		format(string, sizeof(string), "%s has edited HouseID %d's Level to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/edits/hedit.log", string);
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Price to $%d.", GetPlayerNameEx(playerid), amount);
		Log("logs/edits/hedit.log", string);
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}

		format(string, sizeof(string), "%s has edited HouseID %d's Class to %d.", GetPlayerNameEx(playerid), houseid, amount);
		Log("logs/edits/hedit.log", string);
	}
	else if(strcmp(choice, "delete", true) == 0)
	{
	    if (HouseInfo[houseid][hExteriorX] == 0 && PlayerInfo[playerid][pAdmin] <= 1338) {
	        format(string, sizeof(string), "HouseID %d can't be deleted from its current location.", houseid);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attmpted to delete HouseID %d at coords 0.0000", GetPlayerNameEx(playerid), houseid);
			Log("logs/edits/hedit.log", string);
			return 1;
	    }
	    if (HouseInfo[houseid][hOwned] != 0 && PlayerInfo[playerid][pAdmin] <= 1338) {
	        format(string, sizeof(string), "HouseID %d can't be deleted it's owned by %s.", houseid, HouseInfo[houseid][hOwner]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has attempted to delete HouseID %d which is owned by %s.", GetPlayerNameEx(playerid), houseid, HouseInfo[houseid][hOwner]);
			Log("logs/edits/hedit.log", string);
			return 1;
	    }
    	if(IsValidDynamicPickup(HouseInfo[houseid][hPickupID])) DestroyDynamicPickup(HouseInfo[houseid][hPickupID]);
	    DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
		HouseInfo[houseid][hOwned] = 0;
		HouseInfo[houseid][hLevel] = 0;
		HouseInfo[houseid][hHInteriorWorld] = 0;
		HouseInfo[houseid][hDescription] = 0;
		HouseInfo[houseid][hOwner] = 0;
		HouseInfo[houseid][hExteriorX] = 0;
		HouseInfo[houseid][hExteriorY] = 0;
		HouseInfo[houseid][hExteriorZ] = 0;
		HouseInfo[houseid][hExteriorR] = 0;
		HouseInfo[houseid][hInteriorX] = 0;
		HouseInfo[houseid][hInteriorY] = 0;
		HouseInfo[houseid][hInteriorZ] = 0;
		HouseInfo[houseid][hInteriorR] = 0;
		HouseInfo[houseid][hLock] = 0;
		HouseInfo[houseid][hRentable] = 0;
		HouseInfo[houseid][hRentFee] = 0;
		HouseInfo[houseid][hValue] = 0;
   		HouseInfo[houseid][hSafeMoney] = 0;
		HouseInfo[houseid][hPot] = 0;
		HouseInfo[houseid][hCrack] = 0;
		HouseInfo[houseid][hMaterials] = 0;
		HouseInfo[houseid][hWeapons][0] = 0;
		HouseInfo[houseid][hWeapons][1] = 0;
		HouseInfo[houseid][hWeapons][2] = 0;
		HouseInfo[houseid][hWeapons][3] = 0;
		HouseInfo[houseid][hWeapons][4] = 0;
		HouseInfo[houseid][hGLUpgrade] = 0;
		HouseInfo[houseid][hPickupID] = 0;
		HouseInfo[houseid][hCustomInterior] = 0;
		HouseInfo[houseid][hCustomExterior] = 0;
		HouseInfo[houseid][hExteriorA] = 0;
		HouseInfo[houseid][hInteriorA] = 0;
		format(string, sizeof(string), "You have deleted HouseID %d.", houseid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "%s has deleted HouseID %d.", GetPlayerNameEx(playerid), houseid);
		Log("logs/edits/hedit.log", string);
		return 1;
	}
	SaveHouse(houseid);
	return 1;
}*/

CMD:shophouse(playerid, params[])
{
 if(PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], houseid, amount, invoice[64];
	if(sscanf(params, "s[32]dDs[64]", choice, houseid, amount, invoice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shophouse [name] [houseid] [amount] [invoice #]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Exterior, Interior, CustomInterior, Class (1-3), Level, Price");
		return 1;
	}

	if(strcmp(choice, "interior", true) == 0)
	{
		GetPlayerPos( playerid, HouseInfo[houseid][hInteriorX], HouseInfo[houseid][hInteriorY], HouseInfo[houseid][hInteriorZ] );
		HouseInfo[houseid][hHInteriorWorld] = GetPlayerInterior( playerid );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the interior!" );
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "custominterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomInterior] == 0)
		{
			HouseInfo[houseid][hCustomInterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom interior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomInterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) interior!" );
		}
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "customexterior", true) == 0)
	{
		if(HouseInfo[houseid][hCustomExterior] == 0)
		{
			HouseInfo[houseid][hCustomExterior] = 1;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to custom exterior!" );
		}
		else
		{
			HouseInfo[houseid][hCustomExterior] = 0;
			SendClientMessageEx( playerid, COLOR_WHITE, "House set to normal (not custom) exterior!" );
		}
		SaveHouse(houseid);
		return 1;
	}
	else if(strcmp(choice, "exterior", true) == 0)
	{
		GetPlayerPos( playerid, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ] );
		SendClientMessageEx( playerid, COLOR_WHITE, "You have changed the exterior!" );
		DestroyPickupEx(HouseInfo[houseid][hPickupID]);
		SaveHouse(houseid);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			DestroyPickupEx(HouseInfo[houseid][hPickupID]);
			DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel( string, COLOR_GREEN, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
			HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
			else
			{
				DestroyPickupEx(HouseInfo[houseid][hPickupID]);
				DestroyDynamic3DTextLabel(HouseInfo[houseid][hTextID]);
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				HouseInfo[houseid][hTextID] = CreateDynamic3DTextLabel(string,COLOR_GREEN,HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]+0.5,10.0, .testlos = 1, .streamdistance = 10.0);
				HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
			}
		}
	}
	else if(strcmp(choice, "level", true) == 0)
	{
		HouseInfo[houseid][hLevel] = amount;
		format(string, sizeof(string), "You have set the house level to %d.", amount);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
		else
		{
			if(HouseInfo[houseid][hRentable] == 0)
			{
				format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
			else
			{
				format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[houseid][hOwner],HouseInfo[houseid][hRentFee],HouseInfo[houseid][hLevel],houseid);
				UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
			}
		}
	}
	else if(strcmp(choice, "price", true) == 0)
	{
		HouseInfo[houseid][hValue] = amount;
		format(string, sizeof(string), "You have set the houses price to $%d.", amount );
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
	}
	else if(strcmp(choice, "class", true) == 0)
	{
		switch(amount)
		{
		case 1:
			{
				format(HouseInfo[houseid][hDescription], 128, "Low" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 1 (Low)" );
			}
		case 2:
			{
				format(HouseInfo[houseid][hDescription], 128, "Medium" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 2 (Medium)" );
			}
		case 3:
			{
				format(HouseInfo[houseid][hDescription], 128, "High" );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set the house's class to 3 (High)" );
			}
		}
		if(HouseInfo[houseid][hOwned] ==0)
		{
			format(string, sizeof(string), "This home is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[houseid][hDescription],HouseInfo[houseid][hValue],HouseInfo[houseid][hLevel],houseid);
			UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);
		}
	}
	SaveHouse(houseid);
	format(string, sizeof(string), "[SHOPHOUSE] %s modified %s on house %d to %d - Invoice %s", GetPlayerNameEx(playerid), choice, houseid, amount, invoice);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shophousename(playerid, params[])
{
	if(PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], houseid, ownername[24], invoice[64];
	if(sscanf(params, "ds[24]s[64]", houseid, ownername, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shophousename [houseid] [name] [invoice]");
	format(HouseInfo[houseid][hOwner], 24, "%s", ownername);
	format(string, sizeof(string), "You have set the house owner to %s", ownername);
	HouseInfo[houseid][hOwned] = 1;
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	DestroyPickupEx(HouseInfo[houseid][hPickupID]);
	HouseInfo[houseid][hPickupID] = CreatePickupEx(1273, 23, HouseInfo[houseid][hExteriorX], HouseInfo[houseid][hExteriorY], HouseInfo[houseid][hExteriorZ]);
	format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[houseid][hOwner],HouseInfo[houseid][hLevel],houseid);
	UpdateDynamic3DTextLabelText(HouseInfo[houseid][hTextID], COLOR_GREEN, string);

	SaveHouse(houseid);
	format(string, sizeof(string), "[SHOPHOUSE] %s modified Owner on house %d to %s - Invoice %s", GetPlayerNameEx(playerid), houseid, ownername, invoice);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:edit(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use that command.");
		return 1;
	}

	new string[128], choice[32], amount;
	if(sscanf(params, "s[32]d", choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Edit __________________|");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /edit [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Level, Price");
		SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	for(new i = 0; i < sizeof(HouseInfo); i++)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
		{
			format(string, sizeof(string), "House: %d", i);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			if(amount > 0)
			{
				if(strcmp(choice,"level",true) == 0)
				{
					HouseInfo[i][hLevel] = amount;
				}
				else if(strcmp(choice,"price",true) == 0)
				{
					HouseInfo[i][hValue] = amount;
				}
			}
			if(HouseInfo[i][hOwned] ==0)
			{
				format(string, sizeof(string), "This house is\n for sale!\n Description: %s\nCost: $%d\n Level: %d\nID: %d\nTo buy this house type /buyhouse",HouseInfo[i][hDescription],HouseInfo[i][hValue],HouseInfo[i][hLevel],i);
				UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN, string);
			}
			else
			{
				if(HouseInfo[i][hRentable] == 0)
				{
					format(string, sizeof(string), "This house is owned by\n%s\nLevel: %d\nID: %d",HouseInfo[i][hOwner],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN, string);
				}
				else
				{
					format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[i][hOwner],HouseInfo[i][hRentFee],HouseInfo[i][hLevel],i);
					UpdateDynamic3DTextLabelText(HouseInfo[i][hTextID], COLOR_GREEN, string);
				}
			}
		}
	}
	return 1;
}

CMD:houseinvite(playerid, params[])
{
	new giveplayerid, houseslot;
	if(PlayerInfo[playerid][pPhousekey] == INVALID_HOUSE_ID && PlayerInfo[playerid][pPhousekey2] == INVALID_HOUSE_ID)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You don't own a house.");
		return 1;
	}
	else
	{
		if(sscanf(params, "ud", giveplayerid, houseslot)) SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /houseinvite [player] [house 1 or 2]");
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(houseslot < 1 || houseslot > 2) return SendClientMessageEx(playerid, COLOR_GRAD2, "Only house 1 or 2 can be specified.");
			if(gettime()-GetPVarInt(playerid, "LastHouseInvite") < 15) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only /houseinvite once every 15 seconds, please wait!");
			SetPVarInt(playerid, "LastHouseInvite", gettime());
			new string[59 + MAX_PLAYER_NAME];
			//hInviteHouse[giveplayerid] = (houseslot == 1) ? (PlayerInfo[playerid][pPhousekey]) : (PlayerInfo[playerid][pPhousekey2]);
			hInviteSlot[giveplayerid] = houseslot;
			hInviteOffer[giveplayerid] = playerid;
			format(string, sizeof(string), "   %s has invited you to their house (type /accept invite).", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "   You have invited %s to your house.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	return 1;
}

CMD:dedicated(playerid, params[]) {
	if(!fexist("RewardDedicated.cfg")) {
		SendClientMessage(playerid, COLOR_GREY, "There are no Dedicated Players yet.");
	}
	else {
		new
			szDialogStr[260],
			szFileStr[32],
			iPos,
			iCount = 0,
			iTime = gettime() - 5184000,
			File: fDedicated = fopen("RewardDedicated.cfg", io_read);

		while(fread(fDedicated, szFileStr)) {
			iPos = strfind(szFileStr, "|");
			if(strval(szFileStr[iPos + 1]) > iTime) {
				szFileStr[iPos] = 0;
				strcat(szDialogStr, szFileStr);
				iCount++;
				if(iCount == 10) {
					SetPVarString(playerid, "DedicatedPlayer", szFileStr);
					break;
				}
				strcat(szDialogStr, "\n");
			}
		}
		fclose(fDedicated);
		szDialogStr[strlen(szDialogStr) - 1] = 0;
		ShowPlayerDialog(playerid, DIALOG_DEDICATEDPLAYER, DIALOG_STYLE_LIST, "Dedicated Players (over 150 Reward Hours)", szDialogStr, "Next", "Exit");
	}
	return 1;
}

CMD:rewardbox(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) switch(iRewardBox) {
	    case 0: {

	        new
				Float: fPos[3],
				szMessage[64];

			GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
			iRewardObj = CreateDynamicObject(19055, fPos[0], fPos[1], fPos[2], 0.0, 0.0, 0.0, .streamdistance = 100.0);
			tRewardText = CreateDynamic3DTextLabel("Reward Gift Box\n{FFFFFF}/getrewardgift{F3FF02} to claim your gift!", COLOR_YELLOW, fPos[0], fPos[1], fPos[2], 10.0, .testlos = 1, .streamdistance = 50.0);
			iRewardBox = true;

			format(szMessage, sizeof szMessage, "AdmCmd: %s has placed the reward gift box.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			Misc_Save();
		}
	    default: {
	        new
	            szMessage[64];

	        iRewardBox = false;
	        DestroyDynamic3DTextLabel(tRewardText);
			DestroyDynamicObject(iRewardObj);

			format(szMessage, sizeof szMessage, "AdmCmd: %s has removed the reward gift box.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			Misc_Save();
	    }
	}
	return 1;
}

CMD:audiourl(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 4) {

        new range;
        if(sscanf(params, "d", range)) {
            SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /audiourl [range].");
            return 1;
        }

        SetPVarInt(playerid, "aURLrange", range);
        ShowPlayerDialog(playerid, AUDIO_URL, DIALOG_STYLE_INPUT, "Audio URL", "Enter Audio URL", "OK", "Cancel");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD1, "   You are not authorized to use that command !");
        return 1;
    }
    return 1;
}

CMD:rewardplay(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) switch(iRewardPlay) {
		case 0: {

			new
				szMessage[64], string[128];

			iRewardPlay = true;
			format(szMessage, sizeof szMessage, "AdmCmd: %s has enabled Reward Play.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			format(string, sizeof(string), "Reward Play has been activated!");
			foreach(new i: Player) {
			SendClientMessageEx(i, COLOR_YELLOW, string);
			}
			Misc_Save();
		}
		default: {

			new
				szMessage[64], string[128];
			format(szMessage, sizeof szMessage, "AdmCmd: %s has disabled Reward Play.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			format(string, sizeof(string), "Reward Play has been De-Activated!");
			foreach(new i: Player) {
			SendClientMessageEx(i, COLOR_YELLOW, string);
			}
			iRewardPlay = false;
			Misc_Save();
		}
	}
	return 1;
}

CMD:doublexp(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) switch(DoubleXP) {
		case 0: {

			new
				szMessage[64],
				string[128];

			DoubleXP = true;
			format(szMessage, sizeof szMessage, "AdmCmd: %s has enabled Double XP.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			format(string, sizeof(string), "Reward Play has been De-Activated!");
			foreach(new i: Player) {
			SendClientMessageEx(i, COLOR_YELLOW, string);
			}
			Misc_Save();
		}
		default: {

			new
				szMessage[64],
				string[128];
			format(szMessage, sizeof szMessage, "AdmCmd: %s has ended the Double XP.", GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);
			format(string, sizeof(string), "Reward Play has been De-Activated!");
			foreach(new i: Player) {
			SendClientMessageEx(i, COLOR_YELLOW, string);
			}
			DoubleXP = false;
			Misc_Save();
		}
	}
	return 1;
}

CMD:getrewardgift(playerid, params[]) {
	if(iRewardBox) {
		if(IsPlayerInRangeOfDynamicObject(playerid, iRewardObj, 5.0)) {
			if(PlayerInfo[playerid][pGoldBoxTokens] >= 1) {

				--PlayerInfo[playerid][pGoldBoxTokens];

				new
					szMessage[128];

				switch(random(10)) {
					case 0..6: switch(random(7)) { // 70%
						case 0:
						{
							GivePlayerCash(playerid, 500000);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won $500,000!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted $500,000, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 1:
						{
							PlayerInfo[playerid][pMats] += 20000;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 20,000 materials!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 20,000 materials, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 2:
						{
							PlayerInfo[playerid][pExp] += 10;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 10 respect points!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 10 respect points, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 3:
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won one free car!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "1 Free Car (Gift)");
							new log[128];
							format(log, sizeof(log), "AdmCmd: %s was just gifted by the system and he won one free car", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", log);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won one free car.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 4);
							format(szMessage, sizeof(szMessage), "* %s was just gifted one free car, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 4:
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won one month of Silver VIP!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
       						AddFlag(playerid, INVALID_PLAYER_ID, "Free Silver VIP (Gift)");
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has won one month of Silver VIP.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							format(szMessage, sizeof(szMessage), "* %s was just gifted one month of Silver VIP, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 5:
						{
							PlayerInfo[playerid][pTokens] += 30;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 30 VIP tokens!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 30 VIP tokens, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						default:
						{
							PlayerToyInfo[playerid][4][ptModelID] = 18643;
							PlayerToyInfo[playerid][4][ptBone] = 6;
							PlayerToyInfo[playerid][4][ptPosX] = 0.0;
							PlayerToyInfo[playerid][4][ptPosY] = 0.0;
							PlayerToyInfo[playerid][4][ptPosZ] = 0.0;
							PlayerToyInfo[playerid][4][ptRotX] = 0.0;
							PlayerToyInfo[playerid][4][ptRotY] = 0.0;
							PlayerToyInfo[playerid][4][ptRotZ] = 0.0;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a Free Laser Pointer!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a Free Laser Pointer, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

							g_mysql_SaveToys(playerid, 4);
						}
					}
					case 7, 8: switch(random(3)) {// 20%
						case 0:
						{
							new log[128];
							format(log, sizeof(log), "AdmCmd: %s was just gifted by the system and he won a free house", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", log);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won a free house.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a free house!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "Free House (Gift)");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a free house, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						case 1:
						{
							PlayerInfo[playerid][pTokens] += 150;
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won 150 VIP tokens!");
							format(szMessage, sizeof(szMessage), "* %s was just gifted 150 VIP tokens, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}
						default:
						{
							new log[128];
							format(log, sizeof(log), "AdmCmd: %s was just gifted by the system and has won a neon color of choice.", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", log);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the systemhas won a neon color of choice.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a free neon color of choice");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "Free neon color of choice (Gift)");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a free neon color of choice, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
						}

					}
					default: switch(random(100))
					{ // 10%
					    case 0..90:
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won one month of Gold VIP!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "Free Gold VIP (Gift)");
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has won one month of Gold VIP.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							format(szMessage, sizeof(szMessage), "* %s was just gifted one month of Gold VIP, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				        }
				        default:
				        {
				        	new log[128];
							format(log, sizeof(log), "AdmCmd: %s was just gifted by the system and he won a free custom gang/house interior", GetPlayerNameEx(playerid));
							Log("logs/gifts.log", log);
							format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s was just gifted by the system and he won a free custom gang/house interior.", GetPlayerNameEx(playerid));
							ABroadCast(COLOR_YELLOW, szMessage, 2);
							SendClientMessageEx(playerid, COLOR_GRAD2, " Congratulations - you have won a free custom gang/house interior!");
							SendClientMessageEx(playerid, COLOR_GRAD2, " Note: This rare reward may take up to 48 hours to be rewarded.");
							AddFlag(playerid, INVALID_PLAYER_ID, "free custom gang/house interior (Gift)");
							format(szMessage, sizeof(szMessage), "* %s was just gifted a free custom gang/house interior, enjoy!", GetPlayerNameEx(playerid));
							ProxDetector(30.0, playerid, szMessage, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				        }
					}
				}
			}
			else SendClientMessage(playerid, COLOR_GREY, "You have no Gold Box Gift tokens.");
		}
		else SendClientMessage(playerid, COLOR_GREY, "You're not near the Gold Box.");
	}
	else SendClientMessage(playerid, COLOR_GREY, "Reward Playing is currently not in effect.");
	return 1;
}



CMD:mole(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
		return 1;
	}
	if(PlayerInfo[playerid][pAdmin] > 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}

	new string[128], smessage[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mole [mole text]");

	format(string, sizeof(string), "SMS: %s, Sender: MOLE (555)",params);
	foreach(new i: Player) {
		SendClientMessageEx(i, COLOR_YELLOW, string);
		//SendAudioToPlayer(i, 47, 100);
	}
	format(smessage, sizeof(smessage), "{AA3333}Mole{FFFF00}: %s %s has just used Mole.",ARank(playerid), GetPlayerNameEx(playerid));
	ABroadCast(COLOR_LIGHTRED,smessage, 4);
	return 1;
}

CMD:togspec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    if(GetPVarType(playerid, "EASpecable"))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can not be spectated anymore");
	        DeletePVar(playerid, "EASpecable");
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can now be spectated again");
	        SetPVarInt(playerid, "EASpecable", 1);
	    }
	}
	return 1;
}

CMD:togtp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
	    if(GetPVarType(playerid, "EATeleportable"))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can not be teleported to anymore");
	        DeletePVar(playerid, "EATeleportable");
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You can now be teleported to again");
	        SetPVarInt(playerid, "EATeleportable", 1);
	    }
	}
	return 1;
}

CMD:spec(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2 && PlayerInfo[playerid][pHelper] < 3 && !GetPVarType(playerid, "pWatchdogWatching"))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that command.");
		return 1;
	}

	if(strcmp(params, "off", true) == 0)
	{
		if(Spectating[playerid] > 0 && PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 && Spectating[playerid] > 0)
		{
		    if(GetPVarType(playerid, "pWatchdogWatching"))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "You have stopped DM Watching.");
				DeletePVar(playerid, "pWatchdogWatching");
			}
			GettingSpectated[Spectate[playerid]] = INVALID_PLAYER_ID;
			Spectating[playerid] = 0;
			Spectate[playerid] = INVALID_PLAYER_ID;
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not spectating anyone.");
			return 1;
		}
	}

	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /spec (playerid/off)");
	if(IsPlayerConnected(giveplayerid))
	{
	    if((PlayerInfo[playerid][pHelper] >= 3 && !(2 <= PlayerInfo[giveplayerid][pHelper] <= 4)) && !GetPVarType(playerid, "pWatchdogWatching"))
	    {
	        SendClientMessageEx(playerid, COLOR_GREY, "You can only spectate other advisors");
			return 1;
		}
		if(GetPVarType(playerid, "pWatchdogWatching") && (GetPVarInt(playerid, "pWatchdogWatching") != giveplayerid))
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "You can only spectate the person you are DM Watching.");
			return 1;
		}
		if(PlayerInfo[giveplayerid][pAdmin] == 99999 && !GetPVarType(giveplayerid, "EASpecable")) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot spectate this person.");
		if( InsideTut{giveplayerid} >= 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: This player is in the tutorial. Please consider this before assuming that they're air-breaking.");
		}
		if(Spectating[playerid] == 0)
		{
			new Float: pPositions[ 3 ];
			GetPlayerPos(playerid, pPositions[ 0 ], pPositions[ 1 ], pPositions[ 2 ]);
			SetPVarFloat(playerid, "SpecPosX", pPositions[ 0 ]);
			SetPVarFloat(playerid, "SpecPosY", pPositions[ 1 ]);
			SetPVarFloat(playerid, "SpecPosZ", pPositions[ 2 ]);
			SetPVarInt(playerid, "SpecInt", GetPlayerInterior(playerid));
			SetPVarInt(playerid, "SpecVW", GetPlayerVirtualWorld(playerid));
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID( giveplayerid );
				PlayerSpectateVehicle( playerid, carid );
				SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
				SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
			}
			else if(InsidePlane[giveplayerid] != INVALID_VEHICLE_ID) {
				TogglePlayerSpectating(playerid, true);
				PlayerSpectateVehicle(playerid, InsidePlane[giveplayerid]);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer( playerid, giveplayerid );
				SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
				SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
			}
			GettingSpectated[giveplayerid] = playerid;
			Spectate[playerid] = giveplayerid;
			Spectating[playerid] = 1;
		}
		else
		{
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				TogglePlayerSpectating(playerid, true);
				new carid = GetPlayerVehicleID( giveplayerid );
				PlayerSpectateVehicle( playerid, carid );
				SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
				SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
			}
			else if(InsidePlane[giveplayerid] != INVALID_VEHICLE_ID) {
				TogglePlayerSpectating(playerid, true);
				PlayerSpectateVehicle(playerid, InsidePlane[giveplayerid]);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}
			else
			{
				TogglePlayerSpectating(playerid, true);
				PlayerSpectatePlayer( playerid, giveplayerid );
				SetPlayerInterior( playerid, GetPlayerInterior( giveplayerid ) );
				SetPlayerVirtualWorld( playerid, GetPlayerVirtualWorld( giveplayerid ) );
			}
			GettingSpectated[Spectate[playerid]] = INVALID_PLAYER_ID;
			GettingSpectated[giveplayerid] = playerid;
			Spectate[playerid] = giveplayerid;
			Spectating[playerid] = 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Target is not available.");
	}
	return 1;
}

CMD:pr(playerid, params[])
{
	if(PlayerInfo[playerid][pRadio] == 1)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pr [chat]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: Type /setfreq to set the frequency of your portable radio.");
			return 1;
		}

		if(PlayerInfo[playerid][pRadioFreq] >= 1 || PlayerInfo[playerid][pRadioFreq] <= -1)
		{
			if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0)
			{
				SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
				return 1;
			}
			RadioBroadCast(playerid, params);
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "The frequency of your radio is set to 0, you can not broadcast over that frequency.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
	return 1;
}

CMD:setfreq(playerid, params[])
{
	new string[128], frequency;
	if(sscanf(params, "d", frequency))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setfreq [frequency]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "HINT: Set the frequency of your radio to 0 if you don't want to hear anything.");
		return 1;
	}

	if(frequency > 9999999 || frequency < -9999999) { SendClientMessageEx(playerid, COLOR_GREY, "Frequency can not be lower than -9999999 or higher than 9999999!"); return 1; }
	if (PlayerInfo[playerid][pRadio] == 1)
	{
		PlayerInfo[playerid][pRadioFreq] = frequency;
		format(string, sizeof(string), "You have set the frequency of your portable radio to %d khz.",frequency);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have a portable radio!");
	}
	return 1;
}

CMD:rcreset(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rcreset [player]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else {

			new
				i = 0,
				szMessage[96];

			format(szMessage, sizeof szMessage, "AdmCmd: %s %s has reset %s's restricted vehicle warnings.",ARank(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID));
			ABroadCast(COLOR_LIGHTRED, szMessage, 2);

			format(szMessage, sizeof szMessage, "%s %s has reset your restricted vehicle warnings.",ARank(playerid), GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_WHITE, szMessage);

			PlayerInfo[iTargetID][pRVehWarns] = 0;
			PlayerInfo[iTargetID][pLastRVehWarn] = 0;
			PlayerInfo[iTargetID][pRVehRestricted] = 0;

			while(i != MAX_PLAYERVEHICLES) {
				if(PlayerVehicleInfo[iTargetID][i][pvRestricted] != 0) {
					PlayerVehicleInfo[iTargetID][i][pvRestricted] = 0;
				}
				++i;
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:rcabuse(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 4) {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rcabuse [player]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else if(GetPlayerState(iTargetID) == PLAYER_STATE_DRIVER && IsWeaponisedVehicle(GetVehicleModel(GetPlayerVehicleID(iTargetID)))) {

			new
				iVehicleID = GetPlayerVehicleID(iTargetID),
				iVehModel = GetVehicleModel(iVehicleID),
				iVehIndex = GetPlayerVehicle(iTargetID, iVehicleID),
				Float: fPlayerPos[3],
				szMessage[256]; // Dialog string - don't kill me!!!!!1

			if(iVehIndex != -1) { // Owned by player
				switch(++PlayerInfo[iTargetID][pRVehWarns]) {
					case 1: {

						PlayerVehicleInfo[iTargetID][iVehIndex][pvRestricted] = gettime() + 28800;

						--PlayerCars;
						VehicleSpawned[iTargetID]--;

						PlayerVehicleInfo[iTargetID][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetID][iVehIndex][pvFuel] = VehicleFuel[iVehicleID];
						VehicleFuel[iVehicleID] = 100.0;

						DestroyVehicle(iVehicleID);
						PlayerVehicleInfo[iTargetID][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						g_mysql_SaveVehicle(iTargetID, iVehIndex);
						CheckPlayerVehiclesForDesync(iTargetID);

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your %s.\n\nAs this is your first warning, it will be restricted from use for 8 hours.", GetPlayerNameEx(playerid), VehicleName[iVehModel - 400]);
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");

					}
					case 2: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 172800;

						--PlayerCars;
						VehicleSpawned[iTargetID]--;

						PlayerVehicleInfo[iTargetID][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetID][iVehIndex][pvFuel] = VehicleFuel[iVehicleID];
						VehicleFuel[iVehicleID] = 100.0;

						DestroyVehicle(iVehicleID);
						PlayerVehicleInfo[iTargetID][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						g_mysql_SaveVehicle(iTargetID, iVehIndex);
						CheckPlayerVehiclesForDesync(iTargetID);

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your %s.\n\nAs this is your second warning, you will be unable to use restricted vehicles for two days.", GetPlayerNameEx(playerid), VehicleName[iVehModel - 400]);
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");
					}
					case 3: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 604800;
						PlayerInfo[iTargetID][pRVehWarns] = 0;
						DestroyPlayerVehicle(iTargetID, iVehIndex);

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your %s.\n\nAs this is your third warning, you will be unable to use restricted vehicles for a week, and the vehicle in question has been removed.", GetPlayerNameEx(playerid), VehicleName[iVehModel - 400]);
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");
					}
				}
			}
			else foreach(new i: Player) {
				if((iVehIndex = GetPlayerVehicle(i, iVehicleID)) != -1) { // Owned by another player
					switch(++PlayerInfo[iTargetID][pRVehWarns]) {
						case 1: {

							SetVehicleToRespawn(iVehicleID);
							CheckPlayerVehiclesForDesync(i);

							GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
							SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

							format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing %s's %s.\n\nAs this is your first warning, one of your restricted vehicles (if any) will not be able to be used for two days.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), VehicleName[iVehModel - 400]);
							ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
							SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");

							for(new x = 0; x != MAX_PLAYERVEHICLES; ++x) if(IsWeaponisedVehicle(PlayerVehicleInfo[iTargetID][iVehIndex][pvModelId])) {
								PlayerVehicleInfo[iTargetID][iVehIndex][pvRestricted] = gettime() + 28800;
								break;
							}
						}
						case 2: {

							PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 172800;

							SetVehicleToRespawn(iVehicleID);
							CheckPlayerVehiclesForDesync(i);

							GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
							SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

							format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing %s's %s.\n\nAs this is your second warning, you will be unable to use restricted vehicles for two days.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), VehicleName[iVehModel - 400]);
							ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
							SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");
						}
						case 3: {

							PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 604800;
							PlayerInfo[iTargetID][pRVehWarns] = 0;

							GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
							SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);

							format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing %s's %s.\n\nAs this is your third warning, you will be unable to use restricted vehicles for a week.", GetPlayerNameEx(playerid), GetPlayerNameEx(i), VehicleName[iVehModel - 400]);
							ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
							SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");
						}
					}
					format(szMessage, sizeof szMessage, "%s has issued %s a warning for abusing your %s.\n\nThe vehicle in question has been respawned. Please be mindful of your restricted vehicles.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), VehicleName[iVehModel - 400]);
					ShowPlayerDialog(i, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
					SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");
					break;
				}
			}
			if(iVehIndex == -1 && IsACop(iTargetID)) { // Not player owned
				SetVehicleToRespawn(iVehicleID);
				switch(++PlayerInfo[iTargetID][pRVehWarns]) {
					case 1: {
						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your faction's %s.\n\nAs this is your first warning, you will face no punishment.", GetPlayerNameEx(playerid), VehicleName[iVehModel - 400]);
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");
					}
					case 2: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 1209600;

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your faction's %s.\n\nAs this is your second warning, you will be unable to use restricted vehicles for two weeks and prisoned for two hours.", GetPlayerNameEx(playerid), VehicleName[iVehModel - 400]);
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");

						GameTextForPlayer(iTargetID, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
						ResetPlayerWeaponsEx(iTargetID);
						format(szMessage, sizeof(szMessage), "AdmCmd: %s has been prisoned by %s %s, reason: Abuse of faction vehicles.", GetPlayerNameEx(iTargetID),ARank(playerid), GetPlayerNameEx(playerid));
						Log("logs/admin.log", szMessage);
						format(szMessage, sizeof(szMessage), "AdmCmd: %s has been prisoned by %s %s, reason: Abuse of faction vehicles.", GetPlayerNameEx(iTargetID),ARank(playerid), GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
						PlayerInfo[iTargetID][pJailTime] = 120 * 60;
						strcpy(PlayerInfo[iTargetID][pPrisonReason], "[OOC][PRISON] Abuse of faction vehicles", 128);
						strcpy(PlayerInfo[iTargetID][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
						PhoneOnline[iTargetID] = 1;
						SetPlayerInterior(iTargetID, 1);
						PlayerInfo[iTargetID][pInt] = 1;
						new rand = random(sizeof(OOCPrisonSpawns));
						Streamer_UpdateEx(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
						SetPlayerPosEx(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
						SetPlayerSkin(iTargetID, 50);
						SetPlayerColor(iTargetID, TEAM_APRISON_COLOR);
						Player_StreamPrep(iTargetID, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
					}
					case 3: {

						PlayerInfo[iTargetID][pRVehRestricted] = gettime() + 1814400;
						PlayerInfo[iTargetID][pRVehWarns] = 0;

						GetPlayerPos(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						SetPlayerPosFindZ(iTargetID, fPlayerPos[0], fPlayerPos[1], fPlayerPos[2]);
						format(szMessage, sizeof szMessage, "%s has issued you a warning for abusing your faction's %s.\n\nAs this is your third warning, you will be unable to use restricted vehicles for three weeks, kicked from your faction and banned for two days.", GetPlayerNameEx(playerid), VehicleName[iVehModel - 400]);
						ShowPlayerDialog(iTargetID, 0, DIALOG_STYLE_MSGBOX, "Restricted Vehicle Warning", szMessage, "Exit", "");
						SendClientMessageEx(playerid, COLOR_GRAD1, "You have warned this player for abusing their restricted vehicle.");

						new playerip[32];
						GetPlayerIp(iTargetID, playerip, sizeof(playerip));
						format(szMessage, sizeof(szMessage), "AdmCmd: %s(IP:%s) was banned by %s %s, reason: Abuse of faction vehicles", GetPlayerNameEx(iTargetID), playerip,ARank(playerid), GetPlayerNameEx(playerid));
						Log("logs/ban.log", szMessage);
						format(szMessage, sizeof(szMessage), "AdmCmd: %s was banned by %s %s, reason: Abuse of faction vehicles", GetPlayerNameEx(iTargetID),ARank(playerid), GetPlayerNameEx(playerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, szMessage);
						PlayerInfo[iTargetID][pBanned] = 1;
						AddBan(playerip);
						KickWithMessage(iTargetID);
					}
				}
			}
			PlayerInfo[iTargetID][pLastRVehWarn] = gettime();
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "That player is not using a restricted vehicle.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	return 1;
}

CMD:prison(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /prison [player] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s (%d) has been prisoned by %s %s (%d), reason: %s", GetPlayerNameEx(giveplayerid),giveplayerid,ARank(playerid), GetPlayerNameEx(playerid),playerid, reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][PRISON] %s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:calculate(playerid, params[])
{
	new string[128], method[20], value1, value2;
	if(sscanf(params, "ds[20]d", value1, method, value2))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /calculate [value] [operation] [value].");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Operations: Add, Subtract, Multiply, Divide.");
		return 1;
	}

	if(strcmp(method,"multiply",true) == 0 || strcmp(method,"*",true) == 0)
	{
		new sum = value1*value2;
		format(string,sizeof(string),"%d multiplied by %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"divide",true) == 0 || strcmp(method,"/",true) == 0)
	{
		if(value2 == 0)
		{
			SendClientMessageEx(playerid,COLOR_WHITE,"The world will implode in 10 seconds - you divided by zero, idiot!");
			return 1;
		}
		new sum = value1/value2;
		format(string,sizeof(string),"%d divided by %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"add",true) == 0 || strcmp(method,"+",true) == 0)
	{
		new sum = value1+value2;
		format(string,sizeof(string),"%d added to %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	if(strcmp(method,"subtract",true) == 0 || strcmp(method,"-",true) == 0)
	{
		new sum = value1-value2;
		format(string,sizeof(string),"%d subtracted by %d equals %d.",value1,value2,sum);
		SendClientMessageEx(playerid,COLOR_WHITE,string);
	}
	return 1;
}

CMD:suspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1338 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /suspend [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			format(string, sizeof(string), "AdmCmd: %s has been suspended by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s (%d) has been suspended by %s %s (%d).", GetPlayerNameEx(giveplayerid),giveplayerid,ARank(playerid), GetPlayerNameEx(playerid),playerid);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			//PlayerInfo[giveplayerid][pAdmin] = 0;
			//PlayerInfo[giveplayerid][pBanAppealer] = 0;
			//PlayerInfo[giveplayerid][pShopTech] = 0;
			PlayerInfo[giveplayerid][pDisabled] = 1;
			KickWithMessage(giveplayerid);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:vsuspend(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		if(PlayerInfo[playerid][pAdmin] >= 1337 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vsuspend [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			format(string, sizeof(string), "AdmCmd: %s has been VIP suspended by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been VIP suspended by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED, string, 2);
			if(PlayerInfo[playerid][pAdmin] == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
			}
			PlayerInfo[giveplayerid][pDonateRank] = 0;
			format(string, sizeof(string), "Your VIP has been suspended by %s. You may appeal this on the forums (admin complaint).", GetPlayerNameEx(playerid));
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:omakeadmin(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] == 99999)
	{
		new string[128], name[MAX_PLAYER_NAME], level;
		if(sscanf(params, "s[24]ds[64]", name, level)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /omakeadmin [player name] [Level]");
		{
			new /*tmpName[24],*/ tmpPrisonedBy[24], query[512];
			format(tmpPrisonedBy, 24, "%s", GetPlayerNameEx(playerid));

			SetPVarString(playerid, "OnSetAdminLevel", name);

			format(string, sizeof(string), "Attempting to change %s's account to %d Administrator level...", name, level);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);

			format(query,sizeof(query),"UPDATE `accounts` SET `AdminLevel`=%d WHERE `PermBand` < 3 AND `Band` < 1 AND `Username`='%s'", level, name);
			mysql_function_query(MainPipeline, query, false, "OnSetAdminLevel", "i", playerid);
		}
	}
	return 1;
}

forward OnSetAdminLevel(index);
public OnSetAdminLevel(index)
{
	new string[128], name[24];
	GetPVarString(index, "OnSetAdminLevel", name, 24);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully changed %s's Administrator Level.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
		format(string, sizeof(string), "AdmCmd: %s's Administrator Level was offline changed by %s %s", name,ARank(index),GetPlayerNameEx(index));
		ABroadCast(COLOR_LIGHTRED,string, 2);
	}
	else {
		format(string, sizeof(string), "There was an issue with changing %s's Administrator Level.");
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnSetAdminLevel");

	return 1;
}

CMD:prisonaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
	if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
		return 1;
	}
		new string[128], name[MAX_PLAYER_NAME], minutes, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /prisonaccount [player name] [time (minutes)] [reason]");

        new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
			SetPlayerArmedWeapon(giveplayerid, 0);

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			SendClientMessageEx(playerid, COLOR_WHITE, "The player is online and has been prisoned!");
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][PRISON] %s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			PhoneOnline[giveplayerid] = 1;
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
		else
		{
			new /*tmpName[24],*/ tmpPrisonedBy[24], tmpPrisonReason[64], query[512];
			format(tmpPrisonReason, 64, "[OOC][PRISONACC] %s", reason);
			format(tmpPrisonedBy, 24, "%s", GetPlayerNameEx(playerid));

			SetPVarString(playerid, "OnPrisonAccount", name);
			SetPVarString(playerid, "OnPrisonAccountReason", tmpPrisonReason);
			SetPVarString(playerid, "OnPrisonReason", reason);

			format(string, sizeof(string), "Attempting to prison %s's account for %d minutes...", name, minutes);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);

			format(query,sizeof(query),"UPDATE `accounts` SET `PrisonReason`='%s', `PrisonedBy`='%s', `JailTime`=%d WHERE `Username`='%s'", tmpPrisonReason, tmpPrisonedBy, minutes*60, name);
			mysql_function_query(MainPipeline, query, false, "OnPrisonAccount", "i", playerid);
		}
	}
	return 1;
}

forward OnPrisonAccount(index);
public OnPrisonAccount(index)
{
	new string[128], name[24], reason[64], reason2[64], szMessage[128];
	GetPVarString(index, "OnPrisonAccount", name, 24);
	GetPVarString(index, "OnPrisonAccountReason", reason, 64);
	GetPVarString(index, "OnPrisonReason", reason2, 64);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully prisoned %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

		format(szMessage, sizeof(szMessage), "{AA3333}Prison{FFFF00}: %s was offline prisoned by %s %s, reason: %s ", name,ARank(index), GetPlayerNameEx(index), reason2);
		ABroadCast(COLOR_LIGHTRED,szMessage, 2);
		format(string, sizeof(string), "AdmCmd: %s was offline prisoned by %s, reason: %s ", name, GetPlayerNameEx(index), reason);
		Log("logs/admin.log", string);
	}
	else {
		format(string, sizeof(string), "There was an issue with prisoning %s's account.");
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnPrisonAccount");
	DeletePVar(index, "OnPrisonAccountReason");
	DeletePVar(index, "OnPrisonReason");

	return 1;
}

CMD:jailaccount(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes, reason[64];
		if(sscanf(params, "s[24]ds[64]", name, minutes, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /jailaccount [player name] [time (minutes)] [reason]");

		new /*tmpName[24],*/ tmpPrisonedBy[24], tmpPrisonReason[64], query[512];
		format(tmpPrisonReason, 64, "[OOC][JAILACC] %s", reason);
		format(tmpPrisonedBy, 24, "%s", GetPlayerNameEx(playerid));

		SetPVarString(playerid, "OnJailAccount", name);
		SetPVarString(playerid, "OnJailAccountReason", tmpPrisonReason);

		format(string, sizeof(string), "Attempting to jail %s's account for %d minutes...", name, minutes);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);

		format(query,sizeof(query),"UPDATE `accounts` SET `PrisonReason`='%s', `PrisonedBy`='%s', `JailTime`=%d WHERE `Username`='%s'", tmpPrisonReason, tmpPrisonedBy, minutes*60, name);
		mysql_function_query(MainPipeline, query, false, "OnJailAccount", "i", playerid);
	}
	return 1;
}

forward OnJailAccount(index);
public OnJailAccount(index)
{
	new string[128], name[24], reason[64];
	GetPVarString(index, "OnJailAccount", name, 24);
	GetPVarString(index, "OnJailAccountReason", reason, 64);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully jailed %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
		format(string, sizeof(string), "{AA3333}Jail{FFFF00}: %s was offline jailed by %s %s, reason: %s", name,ARank(index), GetPlayerNameEx(index), reason);
		ABroadCast(COLOR_LIGHTRED,string, 2);
		format(string, sizeof(string), "AdmCmd: %s was offline jailed by %s, reason: %s", name, GetPlayerNameEx(index), reason);
		Log("logs/ojail.log", string);
	}
	else {
		format(string, sizeof(string), "There was an issue with jailing %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");
	DeletePVar(index, "OnJailAccountReason");

	return 1;
}

CMD:release(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /release [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3 && PlayerInfo[playerid][pAdminDuty] != 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s has been released from prison by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been released from prison by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			PlayerInfo[giveplayerid][pBeingSentenced] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			PlayerInfo[giveplayerid][pJailTime] = 0;
			SetPlayerPosEx(giveplayerid, 1529.6,-1691.2,13.3);
			SetPlayerInterior(giveplayerid,0);
			PlayerInfo[giveplayerid][pInt] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			strcpy(PlayerInfo[giveplayerid][pPrisonReason], "None", 128);
            SetPlayerToTeamColor(giveplayerid);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sprison(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pUndercover] == 1)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sprison [player] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pUndercover] == 0 && PlayerInfo[playerid][pAdminDuty] != 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}

			if(strlen(reason) >= 25)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please provide a shorter reason. The maximum length for a prison reason is 25.");
				return 1;
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been silent prisoned by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "AdmCmd: %s has been prisoned by an Admin, reason: %s", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerToTeamColor(giveplayerid);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][PRISON] %s", reason);
			format(PlayerInfo[giveplayerid][pPrisonedBy], MAX_PLAYER_NAME, "%s", GetPlayerNameEx(playerid));
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[playerid][pInt] = 1;
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:sjail(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pUndercover] == 1)
	{
		new string[128], giveplayerid, minutes, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sjail [player] [minutes] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
			if(PlayerInfo[playerid][pAdmin] >= 4 && PlayerInfo[playerid][pUndercover] == 0 && PlayerInfo[playerid][pAdminDuty] != 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
				return 1;
			}

			if(strlen(reason) >= 25)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please provide a shorter reason. The maximum length for a prison reason is 25.");
				return 1;
			}

			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}
			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been jailed by an Admin, reason: %s", GetPlayerNameEx(giveplayerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerFacingAngle(giveplayerid, 0);
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			PlayerInfo[giveplayerid][pVW] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			format(string, sizeof(string), "You are jailed for %d minutes.   Bail: Unable", minutes);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(PlayerInfo[giveplayerid][pPrisonedBy], 24, "%s", GetPlayerNameEx(playerid));
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][SJAIL] %s", reason);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:jail(playerid, params[])
{
	new string[128], giveplayerid, minutes, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, minutes, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /jail [player] [minutes] [reason]");

	if(minutes < 1 || minutes > 45) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't jail for more than 45 minutes.");
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		if(PlayerInfo[playerid][pSMod] < 1 && PlayerInfo[playerid][pAdmin] == 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		if(IsPlayerConnected(giveplayerid))
		{

			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
				return 1;
			}
			if(GetPVarInt(giveplayerid, "IsInArena") >= 0)
			{
				LeavePaintballArena(giveplayerid, GetPVarInt(giveplayerid, "IsInArena"));
			}

			ResetPlayerWeaponsEx(giveplayerid);
			format(string, sizeof(string), "AdmCmd: %s has been jailed by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			if(PlayerInfo[playerid][pSMod] > 0 && PlayerInfo[playerid][pAdmin] == 1) {
				format(string, sizeof(string), "AdmCmd: %s jailed by Senior Moderator %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/moderator.log", string);
				format(string, sizeof(string), "You have been jailed by Senior Moderator %s for %d minutes for violation of server rules.", GetPlayerNameEx(playerid), minutes);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			}
			else {
				format(string, sizeof(string), "AdmCmd: %s jailed by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				Log("logs/admin.log", string);
				format(string, sizeof(string), "You have been jailed by Admin %s for %d minutes for violation of server rules.", GetPlayerNameEx(playerid), minutes);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			}
			format(string, sizeof(string), "Reason: %s", reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			ResetPlayerWeaponsEx(giveplayerid);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = minutes*60;
			SetPlayerInterior(giveplayerid, 1);
			SetPlayerFacingAngle(giveplayerid, 0);
			TogglePlayerControllable(giveplayerid, 1);
			new rand = random(sizeof(OOCPrisonSpawns));
			SetPlayerPosEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			Streamer_UpdateEx(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
			SetPlayerSkin(giveplayerid, 50);
			PlayerInfo[giveplayerid][pVW] = 0;
			SetPlayerVirtualWorld(giveplayerid, 0);
			format(PlayerInfo[giveplayerid][pPrisonedBy], 24, "%s", GetPlayerNameEx(playerid));
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[OOC][JAIL] %s", reason);
			SetPlayerColor(giveplayerid, TEAM_APRISON_COLOR);
			Player_StreamPrep(giveplayerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setstat(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{

		new string[128], giveplayerid, statcode, amount;
		if(sscanf(params, "udd", giveplayerid, statcode, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setstat [player] [statcode] [amount]");
			SendClientMessageEx(playerid, COLOR_GRAD4, "|1 Level |2 ArmorUpgrade |3 UpgradePoints |4 Model |5 BankAccount |6 PhoneNumber |7 RespectPoints |8 HouseKey |9 BizKey");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|11 FMember |12 Det |13 Lawyer |14 Fixer |16 Jack |17 Drug |18 Sex |19 Box |20 Arms |21 Materials |22 Pot |23 Crack");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|24 Fishing |25 Job |26 Rank |27 Packages |28 Crates |29 Smuggler |30 Insurance |31 Warnings |32 Screwdriver");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|33 Age |34 Sex |35 NMute |36 AdMute |37 Faction |38 Restricted Weapon Time |39 Gang Warns |40 RMute |41 Reward Hours");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|42 Playing Hours |43 Gold Box Tokens | 44 Computer Drawings");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			switch (statcode)
			{
			case 1:
				{
					PlayerInfo[giveplayerid][pLevel] = amount;
					format(string, sizeof(string), "   %s's Level has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
					SetPlayerScore(giveplayerid, PlayerInfo[giveplayerid][pLevel]);
				}
			case 2:
				{
					PlayerInfo[giveplayerid][pSHealth] = amount;
					format(string, sizeof(string), "   %s's ArmorUpgrade has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 3:
				{
					PlayerInfo[giveplayerid][gPupgrade] = amount;
					format(string, sizeof(string), "   %s's Upgrade Points has been set %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 4:
				{
					PlayerInfo[giveplayerid][pModel] = amount;
					format(string, sizeof(string), "   %s's Model has been set %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 5:
				{
					PlayerInfo[giveplayerid][pAccount] = amount;
					format(string, sizeof(string), "   %s's Bank Account has been set to $%d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 6:
				{
					new query[128];
					SetPVarInt(giveplayerid, "WantedPh", amount);
					SetPVarInt(giveplayerid, "CurrentPh", PlayerInfo[giveplayerid][pPnumber]);
					SetPVarInt(giveplayerid, "PhChangeCost", 50000);
					SetPVarInt(giveplayerid, "PhChangerId", playerid);
					format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",amount);
					mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", giveplayerid, 4);
					return 1;
				}
			case 7:
				{
					PlayerInfo[giveplayerid][pExp] = amount;
					format(string, sizeof(string), "   %s's Respect Points have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 8:
				{
					SendClientMessageEx(playerid,COLOR_RED,"House keys cannot be set directly."); return 1;
				}
			case 9:
				{
					SendClientMessageEx(playerid,COLOR_RED,"Business keys cannot be set directly."); return 1;
				}
			case 11:
				{
					PlayerInfo[giveplayerid][pFMember] = amount-1;
					format(string, sizeof(string), "   %s's Family Membership has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 12:
				{
					PlayerInfo[giveplayerid][pDetSkill] = amount;
					format(string, sizeof(string), "   %s's Detective Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 13:
				{
					PlayerInfo[giveplayerid][pLawSkill] = amount;
					format(string, sizeof(string), "   %s's Lawyer Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 14:
				{
					PlayerInfo[giveplayerid][pMechSkill] = amount;
					format(string, sizeof(string), "   %s's Car Mechanic Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 17:
				{
					PlayerInfo[giveplayerid][pDrugsSkill] = amount;
					format(string, sizeof(string), "   %s's Drug Dealer Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 18:
				{
					PlayerInfo[giveplayerid][pSexSkill] = amount;
					format(string, sizeof(string), "   %s's Sex Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 19:
				{
					PlayerInfo[giveplayerid][pBoxSkill] = amount;
					format(string, sizeof(string), "   %s's Box Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 20:
				{
					PlayerInfo[giveplayerid][pArmsSkill] = amount;
					format(string, sizeof(string), "   %s's Arms Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 21:
				{
					PlayerInfo[giveplayerid][pMats] = amount;
					format(string, sizeof(string), "   %s's Materials have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 22:
				{
					PlayerInfo[giveplayerid][pPot] = amount;
					format(string, sizeof(string), "   %s's Pot has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 23:
				{
					PlayerInfo[giveplayerid][pCrack] = amount;
					format(string, sizeof(string), "   %s's Crack has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 24:
				{
					PlayerInfo[giveplayerid][pFishSkill] = amount;
					format(string, sizeof(string), "   %s's Fishing Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 25:
				{
					PlayerInfo[giveplayerid][pJob] = amount;
					format(string, sizeof(string), "   %s's Job has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 26:
				{
					PlayerInfo[giveplayerid][pRank] = amount;
					format(string, sizeof(string), "   %s's Rank has been to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 27:
				{
					SetPVarInt(playerid, "Packages", amount);
					format(string, sizeof(string), "   %s's Materials Packages have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 28:
				{
					PlayerInfo[giveplayerid][pCrates] = amount;
					format(string, sizeof(string), "   %s's Drug Crates have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 29:
				{
					PlayerInfo[giveplayerid][pSmugSkill] = amount;
					format(string, sizeof(string), "   %s's Smuggler Skill has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 30:
				{
					PlayerInfo[giveplayerid][pInsurance] = amount;
					format(string, sizeof(string), "   %s's Insurance has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 31:
				{
					PlayerInfo[giveplayerid][pWarns] = amount;
					format(string, sizeof(string), "   %s's Warnings have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 32:
				{
					PlayerInfo[giveplayerid][pScrewdriver] = amount;
					format(string, sizeof(string), "   %s's Screwdrivers have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 33:
				{
					PlayerInfo[giveplayerid][pAge] = amount;
					format(string, sizeof(string), "   %s's Age has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 34:
				{
					PlayerInfo[giveplayerid][pSex] = amount;
					format(string, sizeof(string), "   %s's Sex has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 35:
				{
					PlayerInfo[giveplayerid][pNMuteTotal] = amount;
					format(string, sizeof(string), "   %s's Total Newbie Mutes has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 36:
				{
					PlayerInfo[giveplayerid][pADMuteTotal] = amount;
					format(string, sizeof(string), "   %s's Total Ad Mutes has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 37:
				{
					PlayerInfo[giveplayerid][pMember] = amount;
					format(string, sizeof(string), "   %s's Faction has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 38:
				{
					if(PlayerInfo[giveplayerid][pConnectHours] >= 2) {
						PlayerInfo[giveplayerid][pWRestricted] = amount;
						format(string, sizeof(string), "   %s's Weapon Restricted Time has been set to %d.", GetPlayerNameEx(giveplayerid), amount);
					}
					else {
						return SendClientMessageEx(playerid, COLOR_GREY, "You cannot set this on a player who has under 2 playing hours.");
					}
				}
			case 39:
				{
					PlayerInfo[giveplayerid][pGangWarn] = amount;
					format(string, sizeof(string), "   %s's Gang Warns have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 40:
				{
					PlayerInfo[giveplayerid][pRMutedTotal] = amount;
					format(string, sizeof(string), "   %s's Report Mutes have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 41:
				{
					PlayerInfo[giveplayerid][pRewardHours] = amount;
					format(string, sizeof(string), "   %s's Reward Playing Hours have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 42:
				{
					PlayerInfo[giveplayerid][pConnectHours] = amount;
					format(string, sizeof(string), "   %s's Playing Hours have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
            case 43:
				{
					PlayerInfo[giveplayerid][pGoldBoxTokens] = amount;
					format(string, sizeof(string), "   %s's Box Tokens have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			case 44:
				{
					PlayerInfo[giveplayerid][pRewardDrawChance] = amount;
					format(string, sizeof(string), "   %s's Computer Drawings have been set to %d.", GetPlayerNameEx(giveplayerid), amount);
				}
			default:
				{
					format(string, sizeof(string), "   Invalid stat code.", amount);
				}
			}

			new log[128];
			format(log, sizeof(log), "%s by %s", string, GetPlayerNameEx(playerid));
			Log("logs/stats.log", log);
			SendClientMessageEx(playerid, COLOR_GRAD1, string);

		}
	}
	return 1;
}

CMD:setmystat(playerid, params[])
{
	if(PlayerInfo[playerid][pUndercover] == 1)
	{
		new string[128], statcode, amount;
		if(sscanf(params, "dd", statcode, amount))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmystat [statcode] [amount]");
			SendClientMessageEx(playerid, COLOR_GRAD4, "|1 Level |2 ArmorUpgrade |3 UpgradePoints |4 Model |6 PhoneNumber |7 RespectPoints");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|8 HouseKey |11 FMember |12 Det |13 Lawyer |14 Fixer |16 Jack |17 Drug");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|18 Sex |19 Box |20 Arms |24 Fishing |25 Job |26 Rank |27 Packages |28 Crates");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|29 Smuggler |30 Empty |31 Warnings |32 Screwdriver |33 Age |34 Sex |35 NMute 36| AdMute 37| Faction");
			return 1;
		}

		switch (statcode)
		{
		case 1:
			{
				PlayerInfo[playerid][pLevel] = amount;
				format(string, sizeof(string), "   %s's Level has been set to %d.", GetPlayerNameEx(playerid), amount);
				SetPlayerScore(playerid, PlayerInfo[playerid][pLevel]);
			}
		case 2:
			{
				PlayerInfo[playerid][pSHealth] = amount;
				format(string, sizeof(string), "   %s's ArmorUpgrade has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 3:
			{
				PlayerInfo[playerid][gPupgrade] = amount;
				format(string, sizeof(string), "   %s's Upgrade Points has been set %d.", GetPlayerNameEx(playerid), amount);
			}
		case 4:
			{
				PlayerInfo[playerid][pModel] = amount;
				format(string, sizeof(string), "   %s's Model has been set %d.", GetPlayerNameEx(playerid), amount);
			}
		case 6:
			{
				new query[128];
				SetPVarInt(playerid, "WantedPh", amount);
				SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
				SetPVarInt(playerid, "PhChangeCost", 50000);
				format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",amount);
				mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 3);
				return 1;
			}
		case 7:
			{
				PlayerInfo[playerid][pExp] = amount;
				format(string, sizeof(string), "   %s's Respect Points have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 8:
			{
				SendClientMessageEx(playerid,COLOR_RED,"House keys cannot be set directly."); return 1;
			}
		case 11:
			{
				PlayerInfo[playerid][pFMember] = amount-1;
				format(string, sizeof(string), "   %s's Family Membership has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 12:
			{
				PlayerInfo[playerid][pDetSkill] = amount;
				format(string, sizeof(string), "   %s's Detective Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 13:
			{
				PlayerInfo[playerid][pLawSkill] = amount;
				format(string, sizeof(string), "   %s's Lawyer Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 14:
			{
				PlayerInfo[playerid][pMechSkill] = amount;
				format(string, sizeof(string), "   %s's Car Mechanic Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 17:
			{
				PlayerInfo[playerid][pDrugsSkill] = amount;
				format(string, sizeof(string), "   %s's Drug Dealer Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 18:
			{
				PlayerInfo[playerid][pSexSkill] = amount;
				format(string, sizeof(string), "   %s's Sex Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 19:
			{
				PlayerInfo[playerid][pBoxSkill] = amount;
				format(string, sizeof(string), "   %s's Box Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 20:
			{
				PlayerInfo[playerid][pArmsSkill] = amount;
				format(string, sizeof(string), "   %s's Arms Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 24:
			{
				PlayerInfo[playerid][pFishSkill] = amount;
				format(string, sizeof(string), "   %s's Fishing Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 25:
			{
				PlayerInfo[playerid][pJob] = amount;
				format(string, sizeof(string), "   %s's Job has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 26:
			{
				PlayerInfo[playerid][pRank] = amount;
				format(string, sizeof(string), "   %s's Rank has been to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 27:
			{
				SetPVarInt(playerid, "Packages", amount);
				format(string, sizeof(string), "   %s's Materials Packages have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 28:
			{
				PlayerInfo[playerid][pCrates] = amount;
				format(string, sizeof(string), "   %s's Drug Crates have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 29:
			{
				PlayerInfo[playerid][pSmugSkill] = amount;
				format(string, sizeof(string), "   %s's Smuggler Skill has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 31:
			{
				PlayerInfo[playerid][pWarns] = amount;
				format(string, sizeof(string), "   %s's Warnings have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 32:
			{
				PlayerInfo[playerid][pScrewdriver] = amount;
				format(string, sizeof(string), "   %s's Screwdrivers have been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 33:
			{
				PlayerInfo[playerid][pAge] = amount;
				format(string, sizeof(string), "   %s's Age has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 34:
			{
				PlayerInfo[playerid][pSex] = amount;
				format(string, sizeof(string), "   %s's Sex has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 35:
			{
				PlayerInfo[playerid][pNMuteTotal] = amount;
				format(string, sizeof(string), "   %s's Total Newbie Mutes has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 36:
			{
				PlayerInfo[playerid][pADMuteTotal] = amount;
				format(string, sizeof(string), "   %s's Total Ad Mutes has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		case 37:
			{
				PlayerInfo[playerid][pMember] = amount;
				format(string, sizeof(string), "   %s's Faction has been set to %d.", GetPlayerNameEx(playerid), amount);
			}
		default:
			{
				format(string, sizeof(string), "   Invalid stat code.", amount);
			}
		}
		new log[128];
		format(log, sizeof(log), "%s by %s", string, GetPlayerNameEx(playerid));
		Log("logs/undercover.log", log);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
	}
	return 1;
}

CMD:setvw(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, vw;
		if(sscanf(params, "ud", giveplayerid, vw)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setvw [player] [virtual world]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pVW] =  vw;
			SetPlayerVirtualWorld(giveplayerid,  vw);
			format(string, sizeof(string), "You have set %s's virtual world to %d.", GetPlayerNameEx(giveplayerid),  vw);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setint(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, int;
		if(sscanf(params, "ud", giveplayerid, int)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setint [player] [interiorid]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pInt] = int;
			SetPlayerInterior(giveplayerid, int);
			format(string, sizeof(string), "You have set %s's interior to %d.", GetPlayerNameEx(giveplayerid), int);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:setskin(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, skinid;
		if(sscanf(params, "ud", giveplayerid, skinid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setskin [player] [skinid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(!IsInvalidSkin(skinid))
			{
				if(GetPlayerSkin(giveplayerid) == skinid)
				{
					SendClientMessageEx( playerid, COLOR_WHITE, "The player you're trying to change skins of already is using the skin you're trying to set." );
				}
				else
				{
					PlayerInfo[giveplayerid][pModel] = skinid;
					format(string, sizeof(string), "Your skin has been changed to ID %d by Administrator %s.", skinid, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
					format(string, sizeof(string), "You have given %s skin ID %d.", GetPlayerNameEx(giveplayerid), skinid);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					SetPlayerSkin(giveplayerid, PlayerInfo[giveplayerid][pModel]);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid skin ID!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:entercar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /entercar [carid]");

		new
			iVehID = strval(params);

		if(!(1 <= iVehID <= MAX_VEHICLES)) return SendClientMessageEx(playerid, COLOR_GREY, "Valid vehicle IDs run from 1 to 2000.");
		else if(IsSeatAvailable(iVehID, 0)) PutPlayerInVehicle(playerid, iVehID, 0), SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		else SendClientMessageEx(playerid, COLOR_GREY, "That seat is occupied.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:gotocar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotocar [carid]");

		new Float:cwx2,Float:cwy2,Float:cwz2;
		GetVehiclePos(carid, cwx2, cwy2, cwz2);
		if (GetPlayerState(playerid) == 2)
		{
			new tmpcar = GetPlayerVehicleID(playerid);
			SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
			fVehSpeed[playerid] = 0.0;
		}
		else
		{
			SetPlayerPosEx(playerid, cwx2, cwy2, cwz2);
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		SetPlayerInterior(playerid,0);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:seteventpos(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			new string[128];

			GetPlayerPos(playerid, EventKernel[EventPositionX], EventKernel[EventPositionY], EventKernel[EventPositionZ]);
			EventKernel[EventInterior] = GetPlayerInterior(playerid);
			EventKernel[EventWorld] = GetPlayerVirtualWorld(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event position, type /seteventinfo to change the event properties.");
			EventKernel[EventJoinStaff] = 1;
			format(string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s has started an event, type /eventstaff if you want to be in the event staff.", GetPlayerNameEx(playerid) );
			ABroadCast(COLOR_YELLOW, string, 1);
			CBroadCast(COLOR_YELLOW, string, 2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You are not making an event, or you're not the correct admin level.");
		}
	}
	return 1;
}

CMD:seteventtype(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			if(isnull(params))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /seteventtype [type]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available names: DM, TDM, Infection");
				return 1;
			}

			if(strcmp(params,"dm",true) == 0)
			{
				EventKernel[ EventType ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to DM.");
			}
			else if(strcmp(params,"tdm",true) == 0)
			{
				EventKernel[ EventType ] = 2;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to TDM.");
			}
			/*else if(strcmp(params,"race",true) == 0)
			{
				EventKernel[ EventType ] = 3;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to Race.");
			}*/
			else if(strcmp(params,"infection",true) == 0)
			{
				EventKernel[ EventType ] = 4;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to infection.");
			}
			else if(strcmp(params,"none",true) == 0)
			{
				EventKernel[ EventType ] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to None.");
			}
		}
	}
	return 1;
}

CMD:editevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			new choice[32], opstring[64];
			if(EventKernel[EventType] == 1)
			{
			    if(sscanf(params, "s[32]S[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
			}
			else if(EventKernel[EventType] == 2)
			{
			    if(sscanf(params, "s[32]S[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Team1Skin, Team2Skin, Team1Color, Team2Color");
					SendClientMessageEx(playerid, COLOR_GREY, "Team1Spawn, Team2Spawn, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
			}
			else if(EventKernel[EventType] == 3)
			{
			    if(sscanf(params, "s[32]S("")[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Hours, CheckPoints, RaceType(Future Development), OnFoot(0/1)");
					return 1;
				}
			}
			else if(EventKernel[EventType] == 4)
			{
			    if(sscanf(params, "s[32]S[64]", choice, opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent [name]");
					SendClientMessageEx(playerid, COLOR_GREY, "Available names: Jointext, Limit, Health, Armor, Gun1, Gun2, Gun3, Gun4, Gun5");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You need to set the event type first!");
				return 1;
			}

			if(strcmp(choice, "jointext",true) == 0)
			{
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent jointext [text]");
					return 1;
				}
				strmid(EventKernel[EventInfo], opstring, 0, strlen(opstring), 64);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event join text.");
			}
			else if(strcmp(choice, "health", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 3 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent health [health]");
					return 1;
				}
				new Float: health;
				health = floatstr(opstring);
				EventKernel[EventHealth] = health;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event health.");
			}
			else if(strcmp(choice, "armor", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent armor [armor]");
					return 1;
				}

				new Float: armor;
				armor = floatstr(opstring);
				EventKernel[EventArmor] = armor;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event armor.");
			}
			else if(strcmp(choice, "team1skin", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team1skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventKernel[EventTeamSkin][0] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 skin.");
			}
			else if(strcmp(choice, "team2skin", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team2skin [skinid]");
					return 1;
				}

				new skin;
				skin = strval(opstring);
				EventKernel[EventTeamSkin][1] = skin;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 skin.");
			}
			else if(strcmp(choice, "team1color", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team1color [color]");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventKernel[EventTeamColor][0] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 1 color.");
			}
			else if(strcmp(choice, "team2color", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!strlen(opstring))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent team2color [color]");
					SendClientMessageEx(playerid, COLOR_GREY, "black | white | blue | red | green | purple | yellow | lightblue |");
					SendClientMessageEx(playerid, COLOR_GREY, "darkgreen | darkblue | darkgrey | brown | darkbrown | darkred | pink ");
					return 1;
				}
				EventKernel[EventTeamColor][1] = GetColorCode(opstring);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event team 2 color.");
			}
			else if(strcmp(choice, "team1spawn", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}
				GetPlayerPos(playerid, EventKernel[ EventTeamPosX1 ], EventKernel[ EventTeamPosY1 ], EventKernel[ EventTeamPosZ1 ] );
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted team 1's spawn position.");
			}
			else if(strcmp(choice, "team2spawn", true) == 0)
			{
				if(EventKernel[EventType] != 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				GetPlayerPos(playerid, EventKernel[ EventTeamPosX2 ], EventKernel[ EventTeamPosY2 ], EventKernel[ EventTeamPosZ2 ]);
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted team 2's spawn position.");
			}
			else if(strcmp(choice, "limit", true) == 0)
			{
			    if(EventKernel[EventTime] != 0)
			        return SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event, everyone is free to join. If you want to enable this please set the hours to 0.");
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent limit [limit 0-60]");
					return 1;
				}

				new limit;
				limit = strval(opstring);
				if(limit < 0 || limit > 120) return SendClientMessageEx(playerid, COLOR_RED, "You cannot adjust the event limit higher than 120 or below 0");
				EventKernel[EventLimit] = limit;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the players in event limit.");
			}
			else if(strcmp(choice, "hours", true) == 0)
			{
			    if(EventKernel[EventType] != 3)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent hours [hours 0-5]");
					return 1;
				}

				new hours, seconds;
				hours = strval(opstring);
				if(hours < 0 || hours > 5) return SendClientMessageEx(playerid, COLOR_RED, "You cannot adjust the event hours higher than 5 or below 0");
				seconds = hours*3600;
				EventKernel[EventTime] = seconds;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event hours that the event will be active for, timer will start once you fully start the event.");
                SendClientMessageEx(playerid, COLOR_GREY, "NOTE: If you set the event hours to 0 the event will finish once the last racer goes into the last checkpoint.");
				if(hours != 0)
					SendClientMessageEx(playerid, COLOR_YELLOW, "The feature players in event limit(/editevent limit) is now disabled since you changed the hours more than 0.");
			}
   			else if(strcmp(choice, "checkpoints", true) == 0)
			{
				if(EventKernel[EventType] != 3)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This feature is not available for this event type.");
					return 1;
				}
				ConfigEventCPs[playerid][0] = 1;
				ConfigEventCPs[playerid][1] = 0;
				ConfigEventCPs[playerid][2] = 0;
				ConfigEventCPId[playerid] = 0;
				new string[279];
				format(string,sizeof(string),"Welcome to the race checkpoint configuration system!\nThis is a quick guide on the steps you need to follow to successfully get the race checkpoints done.\nFirst and most important you need to remember to make the checkpoints in order, from the start line to the end line.");
				ShowPlayerDialog(playerid,RCPINTRO,DIALOG_STYLE_MSGBOX,"Race Checkpoints Introduction",string,"Next","Skip");
			}
			else if(strcmp(choice, "onfoot", true) == 0)
			{
				if(EventKernel[EventFootRace])
				{
				    EventKernel[EventFootRace] = 0;
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled off the onfoot feature, people can use vehicles(Future development, please don't use not working proprely)");
				}
				else {
				    EventKernel[EventFootRace] = 1;
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have toggled on the onfoot feature, people cannot use vehicles.");
				}
			}
			else if(strcmp(choice, "gun1", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][0] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 1.");
			}
			else if(strcmp(choice, "gun2", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][1] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 2.");
			}
			else if(strcmp(choice, "gun3", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 16 || weapon == 18 || weapon == 35 || weapon == 37 || weapon == 38 || weapon == 39) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][2] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 3.");
			}
			else if(strcmp(choice, "gun4", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][3] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 4.");
			}
			else if(strcmp(choice, "gun5", true) == 0)
			{
				if(EventKernel[EventType] != 1 && EventKernel[EventType] != 2 && EventKernel[EventType] != 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This name is not available for this event type.");
					return 1;
				}

				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /editevent gun1 [weaponid]");
					return 1;
				}

				new weapon;
				weapon = strval(opstring);
				if(weapon == 35 || weapon == 37 || weapon == 38) return SendClientMessageEx(playerid, COLOR_WHITE, "This weapon cannot be set as an event weapon!");
				EventKernel[EventWeapons][4] = weapon;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event gun 5.");
			}
		}
	}
	return 1;
}

CMD:seteventviponly(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4)
		{
			if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /seteventviponly [0/1]");

			if(PlayerInfo[playerid][pDonateRank] == 5 && PlayerInfo[playerid][pAdmin] == 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Error: You're not allowed to change this value!");
				return 1;
			}

			if(strcmp(params,"0",true) == 0)
			{
				EventKernel[ VipOnly ] = 0;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to not VIP Only.");
			}
			else if(strcmp(params,"1",true) == 0)
			{
				EventKernel[ VipOnly ] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You have sucessfully adjusted the event type to VIP Only.");
			}

		}
	}
	return 1;
}

CMD:seteventinfo(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if( EventKernel[EventCreator] == playerid || PlayerInfo[playerid][pAdmin] >= 4 )
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /seteventtype /editevent /seteventviponly (once ready, type /startevent)");
			return 1;
		}
	}
	return 1;
}

CMD:endevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if(EventKernel[EventStatus] != 0)
		{
			foreach(new i: Player)
			{
				if( GetPVarInt( i, "EventToken" ) == 1 )
				{
				    if(EventKernel[EventType] == 3) {
						DisablePlayerCheckpoint(i);
					} else {
					    if(EventKernel[EventType] == 4)
					    {
					        if(GetPVarType(i, "pEventZombie")) DeletePVar(i, "pEventZombie");
						}
						for(new s = 0; s < 12; s++)
						{
							if(PlayerInfo[i][pAGuns][s] != 0)
							{
								RemovePlayerWeapon(i, PlayerInfo[i][pAGuns][s]);
							}
						}
						ResetPlayerWeapons( i );
						SetPlayerWeapons(i);
						SetPlayerToTeamColor(i);
						SetPlayerSkin(i, PlayerInfo[i][pModel]);
						SetPlayerPosEx(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
						SetPlayerVirtualWorld(i, EventLastVW[i]);
						SetPlayerFacingAngle(i, EventFloats[i][0]);
						SetPlayerInterior(i,EventLastInt[i]);
						SetPlayerHealth(i, EventFloats[i][4]);
						SetPlayerArmour(i, EventFloats[i][5]);
						Player_LeaveEventPrep(i, EventFloats[i][1],EventFloats[i][2],EventFloats[i][3], FREEZE_TIME);
						for(new d = 0; d < 6; d++)
						{
							EventFloats[i][d] = 0.0;
						}
						EventLastVW[i] = 0;
						EventLastInt[i] = 0;
					}
					DeletePVar(i, "EventToken");
					SendClientMessageEx( i, COLOR_YELLOW, "You have been removed from the event as it has been terminated by an administrator." );
				}
			}

			EventKernel[ EventPositionX ] = 0;
			EventKernel[ EventPositionY ] = 0;
			EventKernel[ EventPositionZ ] = 0;
			EventKernel[ EventTeamPosX1 ] = 0;
			EventKernel[ EventTeamPosY1 ] = 0;
			EventKernel[ EventTeamPosZ1 ] = 0;
			EventKernel[ EventTeamPosX2 ] = 0;
			EventKernel[ EventTeamPosY2 ] = 0;
			EventKernel[ EventTeamPosZ2 ] = 0;
			EventKernel[ EventStatus ] = 0;
			EventKernel[ EventType ] = 0;
			EventKernel[ EventHealth ] = 0;
			EventKernel[ EventLimit ] = 0;
			EventKernel[ EventPlayers ] = 0;
			EventKernel[ EventWeapons ][0] = 0;
			EventKernel[ EventWeapons ][1] = 0;
			EventKernel[ EventWeapons ][2] = 0;
			EventKernel[ EventWeapons ][3] = 0;
			EventKernel[ EventWeapons ][4] = 0;
			for(new i = 0; i < 20; i++)
			{
			    EventRCPU[i] = 0;
			    EventRCPX[i] = 0.0;
			    EventRCPY[i] = 0.0;
			    EventRCPZ[i] = 0.0;
			    EventRCPS[i] = 0.0;
			    EventRCPT[i] = 0;
			}
			EventKernel[EventCreator] = INVALID_PLAYER_ID;
			EventKernel[VipOnly] = 0;
			EventKernel[EventJoinStaff] = 0;
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been finished by an Administrator." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There isn't an active event at the moment." );
		}

	}
	return 1;
}

CMD:startevent(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 2 || PlayerInfo[playerid][pHelper] >= 3 )
	{
		new string[128];

		if( EventKernel[ EventStatus ] == 0)
		{
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				if(EventKernel[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event health!" );
					return 1;
				}
				if((EventKernel[ EventPositionX ] == 0 || EventKernel[ EventPositionY ] == 0 || EventKernel[ EventPositionZ ] == 0) && EventKernel[EventType] != 3)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event position!" );
					return 1;
				}
				if( (EventKernel[ EventTeamPosX1 ] == 0 || EventKernel[ EventTeamPosY1 ] == 0 || EventKernel[ EventTeamPosZ1 ] == 0) && EventKernel[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set team 1's spawn position!" );
					return 1;
				}
				if( (EventKernel[ EventTeamPosX2 ] == 0 || EventKernel[ EventTeamPosY2 ] == 0 || EventKernel[ EventTeamPosZ2 ] == 0) && EventKernel[ EventType ] == 2)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set team 2's spawn position!" );
					return 1;
				}
				if(EventKernel[ EventLimit ] == 0)
				{
					EventKernel[ EventLimit ] = 60;
				}
				EventKernel[ EventStatus ] = 1;
				SendClientMessageEx( playerid, COLOR_GRAD2, "You have started an event, use /announceevent to announce the event to the whole server." );
				foreach(new i: Player)
				{
					if(PlayerInfo[i][pDonateRank] >= 3)
					{
						SendClientMessageEx(i, COLOR_YELLOW, "* Gold+ VIP feature: An event has been started! /joinevent to join early");
					}
				}

				return 1;
			}
			else if( EventKernel[EventCreator] == playerid)
			{
				if(EventKernel[ EventHealth ] == 0)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event health!" );
					return 1;
				}
				if((EventKernel[ EventPositionX ] == 0 || EventKernel[ EventPositionY ] == 0 || EventKernel[ EventPositionZ ] == 0) && EventKernel[EventType] != 3)
				{
					SendClientMessageEx( playerid, COLOR_GRAD2, "You did not set the event position!" );
					return 1;
				}
				if(EventKernel[ EventLimit ] == 0)
				{
					EventKernel[ EventLimit ] = 60;
				}
				EventKernel[ EventStartRequest ] = 1;
				SendClientMessageEx( playerid, COLOR_GRAD2, "You have requested the event to start, please wait til a Senior Admin approves it." );
				if(EventKernel[EventType] != 3)
				{
					format( string, sizeof( string ), "Event Position: x:%f y:%f z:%f.", EventKernel[EventPositionX], EventKernel[EventPositionY], EventKernel[EventPositionZ] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					format( string, sizeof( string ), "Event Jointext: %s EventLimit: %d.", EventKernel[EventInfo], EventKernel[EventLimit] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					format( string, sizeof( string ), "Event Health: %f Event Armor: %f.", EventKernel[EventHealth], EventKernel[EventArmor] );
					ABroadCast( COLOR_GRAD2, string, 4 );
					if(EventKernel[EventWeapons][0] != 0)
					{
						format( string, sizeof( string ), "Event Gun1: %d.", EventKernel[EventWeapons][0] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][1] != 0)
					{
						format( string, sizeof( string ), "Event Gun2: %d.", EventKernel[EventWeapons][1] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][2] != 0)
					{
						format( string, sizeof( string ), "Event Gun3: %d.", EventKernel[EventWeapons][2] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][3] != 0)
					{
						format( string, sizeof( string ), "Event Gun4: %d.", EventKernel[EventWeapons][3] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventWeapons][4] != 0)
					{
      					format( string, sizeof( string ), "Event Gun5: %d.", EventKernel[EventWeapons][4] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					if(EventKernel[EventType] == 2)
					{
						format( string, sizeof( string ), "Event Team 1 Color: %d Event Team 1 Skin: %d.", EventKernel[EventTeamColor][0], EventKernel[EventTeamSkin][0] );
						ABroadCast( COLOR_GRAD2, string, 4 );
						format( string, sizeof( string ), "Event Team 2 Color: %d Event Team 2 Skin: %d.", EventKernel[EventTeamColor][1], EventKernel[EventTeamSkin][1] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
				}
				else {
				    if(EventKernel[EventTime] != 0) {
				    	format( string, sizeof( string ), "Event Jointext: %s EventTimeLimit: %d.", EventKernel[EventInfo], EventKernel[EventTime] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					else {
						format( string, sizeof( string ), "Event Jointext: %s EventLimit: %d.", EventKernel[EventInfo], EventKernel[EventLimit] );
						ABroadCast( COLOR_GRAD2, string, 4 );
					}
					ABroadCast( COLOR_GRAD2, "This is a race type event, to view the race checkpoints use /edit checkpoints", 4 );
				}
				format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s would like to start the event, do you approve? /approveevent or /denyevent.", GetPlayerNameEx(playerid) );
				ABroadCast( COLOR_YELLOW, string, 4 );
			}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}

	return 1;
}

CMD:beginevent(playerid, params[])
{
	if( PlayerInfo[ playerid ][ pAdmin ] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 3 )
		{
		    if(EventKernel[EventType] == 3 && EventKernel[EventTime] != 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: This feature is not available with the configuration setup for this event.");
			EventKernel[ EventStatus ] = 4;
   			new zombiemade;
			foreach(new i: Player)
			{
				if( GetPVarType( i, "EventToken" ) == 1 )
				{
					if( EventKernel[ EventType ] == 1 )
					{
						//GivePlayerEventWeapons( i );
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "GO! The Event has started." );
						SetPlayerHealth( i, EventKernel[ EventHealth ] );
						SetPlayerArmour( i, EventKernel[ EventArmor ] );
						GivePlayerEventWeapons( i );
					}
					else if( EventKernel[ EventType ] == 2 )
					{
						//GivePlayerEventWeapons( i );
						SendClientMessageEx( i, COLOR_LIGHTBLUE, "GO! The Event has started." );
						SetPlayerHealth( i, EventKernel[ EventHealth ] );
						SetPlayerArmour( i, EventKernel[ EventArmor ] );
						GivePlayerEventWeapons( i );
					}
					else if( EventKernel[ EventType ] == 4 )
					{
					    if(zombiemade == 0)
					    {
							SendClientMessageEx(playerid, COLOR_WHITE, "You are a zombie! Use /bite to infect others");
							SetPlayerHealth(playerid, 30);
							SetPlayerArmour(playerid, 0);
							SetPlayerSkin(playerid, 134);
							SetPlayerColor(playerid, 0x0BC43600);
							SetPVarInt(playerid, "pEventZombie", 1);
							zombiemade=1;
							continue;
					    }
					    else
					    {
							//GivePlayerEventWeapons( i );
							SendClientMessageEx( i, COLOR_LIGHTBLUE, "The Event has started, kill the zombies (green names!)" );
							SetPlayerHealth( i, EventKernel[ EventHealth ] );
							SetPlayerArmour( i, EventKernel[ EventArmor ] );
							GivePlayerEventWeapons( i );
						}
					}
				}
				else
				{
					SendClientMessageEx( i, COLOR_WHITE, "The event has now started. If you wish to join next time, please use /joinevent." );
				}
			}

		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:announceevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 1)
		{
			EventKernel[ EventStatus ] = 2;
			SendClientMessageEx(playerid, COLOR_GRAD2, "To lock the event use /lockevent");
			if(EventKernel[VipOnly] == 1) SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* A VIP only event has been started by an Administrator, VIP's type /joinevent to participate." );
			else SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* An event has been started by an Administrator, type /joinevent to participate." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:lockevent(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || EventKernel[EventCreator] == playerid)
	{
		if( EventKernel[ EventStatus ] == 2 )
		{
		    if(EventKernel[EventType] == 3 && EventKernel[EventTime] != 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: This feature is not available with the configuration setup for this event.");
			EventKernel[ EventStatus ] = 3;
			SendClientMessageEx( playerid, COLOR_GRAD2, "You have locked an event, use /beginevent to officially start the event." );
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been locked by an Administrator." );
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There is already an active event (use /endevent)." );
		}
	}
	return 1;
}

CMD:gotoid(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoid [player]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
				return 1;
			}
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is spectating someone.");
				return 1;
			}
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not do this while spectating.");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pAdmin] == 99999 && !GetPVarType(giveplayerid, "EATeleportable")) return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot teleport to them");
			GetPlayerPos(giveplayerid, plocx, plocy, plocz);
			SetPlayerVirtualWorld(playerid, PlayerInfo[giveplayerid][pVW]);
			Streamer_UpdateEx(playerid, plocx, plocy, plocz);

			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				fVehSpeed[playerid] = 0.0;
			}
			else
			{
				SetPlayerPosEx(playerid,plocx,plocy+2, plocz);
				SetPlayerInterior(playerid, GetPlayerInterior(giveplayerid));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(giveplayerid));
			}

			SendClientMessageEx(playerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:gethere(playerid, params[])
{
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gethere [player]");

	new Float:plocx,Float:plocy,Float:plocz;
	if (IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
			return 1;
		}
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
				return 1;
			}
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_SPECTATING)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is spectating someone.");
				return 1;
			}
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetPlayerVirtualWorld(giveplayerid, PlayerInfo[playerid][pVW]);
			Streamer_UpdateEx(giveplayerid, plocx, plocy, plocz);

			if (GetPlayerState(giveplayerid) == 2)
			{
				fVehSpeed[giveplayerid] = 0.0;
				new tmpcar = GetPlayerVehicleID(giveplayerid);
				SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
				LinkVehicleToInterior(GetPlayerVehicleID(giveplayerid), GetPlayerInterior(playerid));
				SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(GetPlayerVehicleID(giveplayerid), GetPlayerVirtualWorld(playerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}
			else
			{
				SetPlayerPosEx(giveplayerid,plocx,plocy+2, plocz);
				SetPlayerInterior(giveplayerid, GetPlayerInterior(playerid));
				SetPlayerVirtualWorld(giveplayerid, GetPlayerVirtualWorld(playerid));
			}

			SendClientMessageEx(giveplayerid, COLOR_GRAD1, "   You have been teleported!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}

	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:getcar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getcar [carid]");
		new Float:plocx,Float:plocy,Float:plocz;

		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetVehiclePos(carid,plocx,plocy+4, plocz);
		SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
		LinkVehicleToInterior(carid, GetPlayerInterior(playerid));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:oldcar(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Your last driven vehicle ID was %d.",gLastCar[playerid]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:respawncars(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], radius;
		if(sscanf(params, "d", radius)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /respawncars [radius]");

		if(radius < 1 || radius > 40)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Radius must be higher than 0 and lower than 41!");
			return 1;
		}
		RespawnNearbyVehicles(playerid, radius);
		format(string, sizeof(string), "You have respawned all vehicles within a radius of %d.", radius);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:respawncar(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], carid;
		if(sscanf(params, "d", carid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /respawncar [carid]");

		SetVehicleToRespawn(carid);
		format(string, sizeof(string), "You have respawned vehicle ID %d.", carid);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:takeadminweapons(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /takeadminweapons [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			for(new s = 0; s < 12; s++)
			{
				if(PlayerInfo[giveplayerid][pAGuns][s] != 0)
				{
					RemovePlayerWeapon(giveplayerid, PlayerInfo[giveplayerid][pAGuns][s]);
				}
			}
			format(string,sizeof(string),"You have removed %s's admin spawned weapons.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}
	return 1;
}

CMD:gotoco(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /gotoco [x coordinate] [y coordinate] [z coordinate] [interior]");

		SendClientMessageEx(playerid, COLOR_GRAD2, "You have been teleported to the coordinates specified.");
		SetPlayerPosEx(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:weatherall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weather;
	if(sscanf(params, "d", weather)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /weatherall [weatherid]");

	if(weather < 0||weather > 45) { SendClientMessageEx(playerid, COLOR_GREY, "   Weather ID can't be below 0 or above 45!"); return 1; }
	SetWeather(weather);
	gWeather = weather;
	SendClientMessageEx(playerid, COLOR_GREY, "Weather set to everyone!");
	return 1;
}

CMD:lowerspeed(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weaponid;
	if(sscanf(params, "d", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /lowerspeed [speed]");

	if(weaponid < 0||weaponid > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   Lower Speed can't be below 0 or above 40!"); return 1; }
	LowerSpeed = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Lower Speed Set!");
	return 1;
}

CMD:wepex(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weaponid;
	if(sscanf(params, "d", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wepex [weaponid]");

	if(weaponid < 22||weaponid > 38) { SendClientMessageEx(playerid, COLOR_GREY, "   Weapon ID can't be below 22 or above 38!"); return 1; }
	WeaponExplode = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Weapon Explosion Set!");
	return 1;
}

CMD:wepextype(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weaponid;
	if(sscanf(params, "d", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wepextype [explosiontype]");

	if(weaponid < 0||weaponid > 13) { SendClientMessageEx(playerid, COLOR_GREY, "   Explosion Type can't be below 0 or above 13!"); return 1; }
	ExplodeType = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Weapon Type Set!");
	return 1;
}

CMD:cargun(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weaponid;
	if(sscanf(params, "d", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cargun [weaponid]");

	if(weaponid < 22||weaponid > 38) { SendClientMessageEx(playerid, COLOR_GREY, "   Weapon ID can't be below 22 or above 38!"); return 1; }
	WeaponCar = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Weapon ID Set!");
	return 1;
}

CMD:cargunid(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new weaponid;
	if(sscanf(params, "d", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cargunid [vehid]");

	if(weaponid < 400||weaponid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   CVehicle ID can't be below 400 or above 611!"); return 1; }
	WeaponCarID = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Vehicle ID Set!");
	return 1;
}

CMD:wepexrad(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new Float:weaponid;
	if(sscanf(params, "f", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wepexrad [explosionradius]");

	if(weaponid < 0||weaponid > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   Explosion Radius can't be below 1 or above 40!"); return 1; }
	ExplodeRad = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Explosion Radius Set!");
	return 1;
}

CMD:zgate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}

	new Float:weaponid;
	if(sscanf(params, "f", weaponid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /zgate [lowersize]");

	if(weaponid < 0||weaponid > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   Lower Size can't be below 1 or above 40!"); return 1; }
	zGate = weaponid;
	SendClientMessageEx(playerid, COLOR_GREY, "Lower Size Set!");
	return 1;
}

CMD:setmoney(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setmoney [player] [money]");
		if(IsPlayerConnected(giveplayerid))
		{
			ResetPlayerCash(giveplayerid);
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "You have set %s's money to $%d !",GetPlayerNameEx(giveplayerid),money);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has set %s's to $%d (/setmoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("logs/stats.log", string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:givetokens(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] > 0)
	{
		new string[128], giveplayerid, amount;
		if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givetokens [player] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pDonateRank] > 0)
			{
				if(PlayerInfo[playerid][pTokens] >= amount)
				{
					if(amount < 1)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give that amount!");
						return 1;
					}
					if(giveplayerid == playerid)
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give tokens to yourself!");
						return 1;
					}
					if (!ProxDetectorS(5.0, playerid, giveplayerid))
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
						return 1;
					}
					PlayerInfo[playerid][pTokens] -= amount;
					PlayerInfo[giveplayerid][pTokens] += amount;

					format(string, sizeof(string), "You have received %d Tokens from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "You have given %s %d Tokens.", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has given %s some Tokens.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have that many tokens!");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "That player is not a VIP!");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a VIP!");
	}
	return 1;
}

CMD:settoken(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, amount;
		if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settoken [player] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pTokens] = amount;
			format(string, sizeof(string), "You have set %s's tokens to %d !",GetPlayerNameEx(giveplayerid),amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "VIP: Admin %s has set your tokens to %d.",GetPlayerNameEx(playerid),amount);
			SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);

			format(string, sizeof(string), "%s has set %s's tokens to %d.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
			Log("logs/stats.log", string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:givetoken(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid, amount;
		if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givetoken [player] [amount]");

		if(IsPlayerConnected(giveplayerid))
		{
			PlayerInfo[giveplayerid][pTokens] += amount;
			format(string, sizeof(string), "You have given %s %d tokens !",GetPlayerNameEx(giveplayerid),amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "VIP: Admin %s has given you %d tokens.",GetPlayerNameEx(playerid),amount);
			SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);

			format(string, sizeof(string), "%s has given %s %d tokens.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
			Log("logs/stats.log", string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:givemoney(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givemoney [player] [money]");

		if(IsPlayerConnected(giveplayerid))
		{
			GivePlayerCash(giveplayerid, money);
			format(string, sizeof(string), "You have given %s $%d !",GetPlayerNameEx(giveplayerid),money);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "%s has given %s $%d (/givemoney)", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),money);
			Log("logs/stats.log", string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:lockarena(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		return 1;
	}

	new string[128], arenaid;
	if(sscanf(params, "d", arenaid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /lockarena [arenaid]");

	arenaid--;

	if(arenaid < 0 || arenaid > MAX_ARENAS-1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have entered a invalid arenaid.");
		return 1;
	}
	foreach(new p: Player)
	{
		new cid = GetPVarInt(p, "IsInArena");
		if(cid == arenaid)
		{
			if(PaintBallArena[cid][pbBidMoney] > 0)
			{
				GivePlayerCash(p,PaintBallArena[cid][pbBidMoney]);
				format(string,sizeof(string),"You have been refunded a total of $%d because of premature closure.",PaintBallArena[cid][pbBidMoney]);
				SendClientMessageEx(p, COLOR_WHITE, string);
			}
			if(arenaid == GetPVarInt(p, "ArenaNumber"))
			{
				switch(PaintBallArena[arenaid][pbGameType])
				{
				case 1:
					{
						if(PlayerInfo[p][pDonateRank] < 3)
						{
							PlayerInfo[p][pPaintTokens] += 3;
							format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",3);
							SendClientMessageEx(p, COLOR_WHITE, string);
						}
					}
				case 2:
					{
						if(PlayerInfo[p][pDonateRank] < 3)
						{
							PlayerInfo[p][pPaintTokens] += 4;
							format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",4);
							SendClientMessageEx(p, COLOR_WHITE, string);
						}
					}
				case 3:
					{
						if(PlayerInfo[p][pDonateRank] < 3)
						{
							PlayerInfo[p][pPaintTokens] += 5;
							format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
							SendClientMessageEx(p, COLOR_WHITE, string);
						}
					}
				case 4:
					{
						if(PlayerInfo[p][pDonateRank] < 3)
						{
							PlayerInfo[p][pPaintTokens] += 5;
							format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
							SendClientMessageEx(p, COLOR_WHITE, string);
						}
					}
				case 5:
					{
						if(PlayerInfo[p][pDonateRank] < 3)
						{
							PlayerInfo[p][pPaintTokens] += 6;
							format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",6);
							SendClientMessageEx(p, COLOR_WHITE, string);
						}
					}
				}
			}
			LeavePaintballArena(p, cid);
		}
	}
	ResetPaintballArena(arenaid);
	PaintBallArena[arenaid][pbLocked] = 2;
	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has locked %s.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName]);
	ABroadCast(COLOR_YELLOW, string, 2);
	format(string, sizeof(string), "* Admin %s has locked %s (ArenaID: %d) for some short maintenance.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName],arenaid+1);
	SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:unlockarena(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		return 1;
	}

	new string[128], arenaid;
	if(sscanf(params, "d", arenaid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unlockarena [arenaid]");

	arenaid--;

	if(arenaid < 0 || arenaid > MAX_ARENAS-1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have entered a invalid arenaid.");
		return 1;
	}
	if(PaintBallArena[arenaid][pbLocked] == 2)
	{
		ResetPaintballArena(arenaid);
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has unlocked %s.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName]);
		ABroadCast(COLOR_YELLOW, string, 2);
		format(string, sizeof(string), "* Admin %s has unlocked %s (ArenaID: %d), you may join/create it now.", GetPlayerNameEx(playerid),PaintBallArena[arenaid][pbArenaName],arenaid+1);
		SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
	}
	return 1;
}

CMD:givepainttokens(playerid, params[])
{
	new string[128], giveplayerid, amount;
	if(sscanf(params, "ud", giveplayerid, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givepainttokens [player] [amount]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 4)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
			return 1;
		}
		PlayerInfo[giveplayerid][pPaintTokens] += amount;

		format(string, sizeof(string), "You have received %d Paintball Tokens from Admin %s.", amount, GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "You have given %s %d Paintbll Tokens.", GetPlayerNameEx(giveplayerid), amount);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has given %s, %d Paintball Tokens.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),amount);
		ABroadCast(COLOR_YELLOW, string, 2);

	}
	return 1;
}

CMD:useexp(playerid, params[])
{
	new string[128];
    if (PlayerInfo[playerid][pEXPToken] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You do not have any Double EXP tokens!");
		return 1;
	}
    PlayerInfo[playerid][pDoubleEXP] += 8;
    PlayerInfo[playerid][pEXPToken]--;
    format(string, sizeof(string), "You have used a Double EXP Token! You now have a total of %d of Double EXP hours!", PlayerInfo[playerid][pDoubleEXP]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
    return 1;
}

CMD:shopexp(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopexp [player] [tokens] [invoice #]");

	PlayerInfo[giveplayerid][pEXPToken] += amount;

	format(string, sizeof(string), "You have received %d Double EXP Token(s) from Shop Tech %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPEXP] %s given %s, %d Double EXP Token(s) - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice);
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shoptokens(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shoptokens [player] [amount] [invoice #]");

	PlayerInfo[giveplayerid][pPaintTokens] += amount;

	format(string, sizeof(string), "You have received %d Paintball Tokens from Shop Tech %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPTOKENS] %s given %s, %d Paintball Tokens - Invoice %s for %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopviptokens(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopviptokens [player] [amount] [invoice #]");

	PlayerInfo[giveplayerid][pTokens] += amount;

	format(string, sizeof(string), "You have received %d VIP Tokens from Shop Tech %s.", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPTOKENS] %s given %s, %d VIP Tokens - Invoice %s for %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopboombox(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new giveplayerid, invoice;
	if(sscanf(params, "ui", giveplayerid, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopboombox [player] [invoice #]");
	new string[128];

	if(PlayerInfo[giveplayerid][pBoombox] == 1)
	{
	    PlayerInfo[giveplayerid][pBoombox] = 0;
    	format(string, sizeof(string), "Your boombox has been taken by Shop Tech %s. ", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[SHOPBOOMBOX] %s has taken %s boombox - Invoice %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/shoplog.log", string);
	}
	else
	{
		PlayerInfo[giveplayerid][pBoombox] = 1;
    	format(string, sizeof(string), "You have been given a boombox from Shop Tech %s. ", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "[SHOPBOOMBOX] %s has given %s a boombox - Invoice %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice);
		SendClientMessageEx(playerid, COLOR_GRAD1, string);
		Log("logs/shoplog.log", string);
	}
	return 1;
}

/*CMD:shopbag(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, invoice[32];
	if(sscanf(params, "us[32]", giveplayerid, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbag [player] [invoice #]");

	StorageInfo[playerid][0][sStorage] = 1;

	format(string, sizeof(string), "You have received a Bag from Shop Tech %s. ", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPFIREWORK] %s given %s a Bag - Invoice %s for %s. ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopbackpack(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, invoice[32];
	if(sscanf(params, "us[32]", giveplayerid, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbackpack [player] [invoice #]");

	StorageInfo[playerid][1][sStorage] = 1;

	format(string, sizeof(string), "You have received a Backpack from Shop Tech %s. ", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPFIREWORK] %s given %s a Backpack - Invoice %s for %s. ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:shopbriefcase(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, invoice[32];
	if(sscanf(params, "us[32]", giveplayerid, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopbriefcase [player] [invoice #]");

	StorageInfo[playerid][2][sStorage] = 1;

	format(string, sizeof(string), "You have received a Briefcase from Shop Tech %s. ", GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPFIREWORK] %s given %s a Briefcase - Invoice %s for %s. ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}*/

CMD:shopfirework(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not allowed to use this command.");
		return 1;
	}

	new string[128], giveplayerid, amount, invoice[32];
	if(sscanf(params, "uds[32]", giveplayerid, amount, invoice)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shopfirework [player] [amount] [invoice #]");

	PlayerInfo[giveplayerid][pFirework] += amount;

	format(string, sizeof(string), "You have received %d Fireworks from Shop Tech %s. ", amount, GetPlayerNameEx(playerid));
	SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "[SHOPFIREWORK] %s given %s %d Firework(s) - Invoice %s for %s. ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), amount, invoice, GetPlayerNameEx(giveplayerid));
	SendClientMessageEx(playerid, COLOR_GRAD1, string);
	Log("logs/shoplog.log", string);
	return 1;
}

CMD:placeboombox(playerid, params[])
{
	if(PlayerInfo[playerid][pBoombox] == 1 || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if(GetPVarInt(playerid, "IsInArena") >= 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in an arena!");
		if(WatchingTV[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
		if(GetPVarInt(playerid, "Injured") == 1 || PlayerInfo[playerid][pHospital] == 1 || IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
		//if (PlayerInfo[playerid][pVW] == 0 || PlayerInfo[playerid][pInt] == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You can only place boomboxes inside interiors.");
		if(GetPVarType(playerid, "pBoomBox")) return SendClientMessageEx(playerid, COLOR_WHITE, "You already have a boombox out, use /destroyboombox.");

		foreach(new i: Player)
	    {
	        if(GetPVarType(i, "pBoomBox"))
	        {
    			if(IsPlayerInRangeOfPoint(playerid, 30.0, GetPVarFloat(i, "pBoomBoxX"), GetPVarFloat(i, "pBoomBoxY"), GetPVarFloat(i, "pBoomBoxZ")))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "You are in range of another boombox, you can't place one here!");
				    return 1;
				}
			}
		}

		new string[128];
		format(string, sizeof(string), "%s has placed a boombox!", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);

	    new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    x += (2 * floatsin(-a, degrees));
    	y += (2 * floatcos(-a, degrees));
    	z -= 1.0;

	    SetPVarInt(playerid, "pBoomBox", CreateDynamicObject(2103, x, y, z, 0.0, 0.0, 0.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
	    SetPVarFloat(playerid, "pBoomBoxX", x); SetPVarFloat(playerid, "pBoomBoxY", y); SetPVarFloat(playerid, "pBoomBoxZ", z);
		format(string, sizeof(string), "%s's boombox\n{FF0000}/setboombox {FFFF00}or\n{FF0000}/destroyboombox", GetPlayerNameEx(playerid));
	    SetPVarInt(playerid, "pBoomBoxLabel", _:CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 5.0, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "pBoomBoxArea", CreateDynamicSphere(x, y, z, 30.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)));
		SetPVarInt(playerid, "pBoomBoxInt", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "pBoomBoxVW", GetPlayerVirtualWorld(playerid));
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You do not have a boombox.");
	}
	return 1;
}

CMD:destroyboombox(playerid, params[])
{
	if(GetPVarType(playerid, "pBoomBox"))
	{
	    DestroyDynamicObject(GetPVarInt(playerid, "pBoomBox"));
	    DestroyDynamic3DTextLabel(Text3D:GetPVarInt(playerid, "pBoomBoxLabel"));
	    DeletePVar(playerid, "pBoomBox"); DeletePVar(playerid, "pBoomBoxStation"); DeletePVar(playerid, "pBoomBoxLabel");
	    DeletePVar(playerid, "pBoomBoxX"); DeletePVar(playerid, "pBoomBoxY"); DeletePVar(playerid, "pBoomBoxZ");
	    if(GetPVarType(playerid, "pBoomBoxArea"))
	    {
	        new string[128];
			format(string, sizeof(string), "* %s has destroyed the boombox.", GetPlayerNameEx(playerid));
	        foreach(new i: Player)
	        {
	            if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "pBoomBoxArea")))
	            {
	                StopAudioStreamForPlayerEx(i);
	                SendClientMessage(i, COLOR_PURPLE, string);
				}
			}
	        DeletePVar(playerid, "pBoomBoxArea");
		}
		SendClientMessage(playerid, COLOR_WHITE, "You've destroyed your boombox!");
	}
	else
	{
	    foreach(new i: Player)
	    {
	        if(GetPVarType(i, "pBoomBox"))
	        {
				if(GetPVarInt(i, "pBoomBoxVW") == GetPlayerVirtualWorld(playerid) && GetPVarInt(i, "pBoomBoxInt") == GetPlayerInterior(playerid) && IsPlayerInRangeOfPoint(playerid, 5.0, GetPVarFloat(i, "pBoomBoxX"), GetPVarFloat(i, "pBoomBoxY"), GetPVarFloat(i, "pBoomBoxZ")))
				{
				    DestroyDynamicObject(GetPVarInt(i, "pBoomBox"));
				    DestroyDynamic3DTextLabel(Text3D:GetPVarInt(i, "pBoomBoxLabel"));

				    DeletePVar(i, "pBoomBox");
					DeletePVar(i, "pBoomBoxStation");
					DeletePVar(i, "pBoomBoxLabel");
				    DeletePVar(i, "pBoomBoxX");
					DeletePVar(i, "pBoomBoxY");
					DeletePVar(i, "pBoomBoxZ");
					DeletePVar(i, "pBoomBoxInt");
					DeletePVar(i, "pBoomBoxVW");

				    new string[128];
				    if(GetPVarType(i, "pBoomBoxArea"))
				    {
				        format(string, sizeof(string), "* %s has destroyed the boombox.", GetPlayerNameEx(playerid));
				        foreach(new pi: Player)
				        {
				            if(IsPlayerInDynamicArea(pi, GetPVarInt(i, "pBoomBoxArea")))
				            {
				                StopAudioStreamForPlayerEx(pi);
				                SendClientMessage(pi, COLOR_PURPLE, string);
							}
						}
				        DeletePVar(i, "pBoomBoxArea");
					}
				    format(string, sizeof(string), "%s has destroyed your boombox!", GetPlayerNameEx(playerid));
				    SendClientMessage(i, COLOR_WHITE, string);
					return 1;
				}
			}
	    }
	    SendClientMessage(playerid, COLOR_WHITE, "You don't have a boombox or you are not near one to destroy.");
	}
	return 1;
}

CMD:placefirework(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in an arena!");
		return 1;
	}
	if(WatchingTV[playerid] != 0) {
        SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
        return 1;
    }
	if(GetPVarInt(playerid, "Injured") == 1 || PlayerInfo[playerid][pHospital] == 1 || IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
		return 1;
	}
	if(RocketExplosions[playerid] != -1)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You are already using another firework!");
		return 1;
	}
	if (PlayerInfo[playerid][pVW] != 0 || PlayerInfo[playerid][pInt] != 0)
	{
	    SendClientMessageEx(playerid, COLOR_WHITE, "You can't launch fireworks indoors!");
		return 1;
	}
	if(PlayerInfo[playerid][pFirework] > 0 || PlayerInfo[playerid][pAdmin] >= 4)
	{
	    if (PlayerInfo[playerid][pAdmin] < 4)
	    {
	    	PlayerInfo[playerid][pFirework]--;
	    }
		new string[128];
		format(string, sizeof(string), "%s has placed a firework which will go off in 30 seconds!", GetPlayerNameEx(playerid));
	    ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
	    new Float:x, Float:y, Float:z, Float:a;
	    GetPlayerPos(playerid, x, y, z);
	    GetPlayerFacingAngle(playerid, a);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In", 4.0, 0, 0, 0, 0, 0, 1);
	    x += (2 * floatsin(-a, degrees));
    	y += (2 * floatcos(-a, degrees));
	    Rocket[playerid] = CreateDynamicObject(3786, x, y, z, 0, 90, 0);
	    RocketLight[playerid] = CreateDynamicObject(354, x, y, z + 1, 0, 0, 0);
		RocketSmoke[playerid] = CreateDynamicObject(18716, x, y, z - 4, 0, 0, 0);
	    SetPVarFloat(playerid,"fxpos",x);
  		SetPVarFloat(playerid,"fypos",y);
  		SetPVarFloat(playerid,"fzpos",z);
  		RocketExplosions[playerid] = 0;
  		SetTimerEx("Firework", 25000, 0, "ii", playerid, TYPE_COUNTDOWN);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have any fireworks!");
	}
	return 1;
}

CMD:oflag(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], query[256], name[MAX_PLAYER_NAME], reason[64], month, day, year;
		if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /oflag [player name] [reason]");
		getdate(year,month,day);

    	new giveplayerid = ReturnUser(name);
        if(IsPlayerConnected(giveplayerid))
		{
			AddFlag(giveplayerid, playerid, reason);
			SendClientMessage(playerid, COLOR_WHITE, "The player is online and has been flagged!");
			format(string, sizeof(string), "AdmCmd: %s was flagged by %s, reason: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);

			format(string, sizeof(string), "%s was flagged by %s (%s).", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/flags.log", string);
		}
		else
		{
			//new tmpReason[64], name[24];
			SetPVarString(playerid, "OnAddFlag", name);
			SetPVarString(playerid, "OnAddFlagReason", reason);

			format(query, sizeof(query), "SELECT id FROM `accounts` WHERE `Username`='%s'", name);
			mysql_function_query(MainPipeline, query, true, "FlagQueryFinish", "iii", playerid, INVALID_PLAYER_ID, Flag_Query_Offline);

			format(string, sizeof(string), "Attempting to append %s's flag...", name);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}
	return 1;
}



CMD:flag(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /flag [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			AddFlag(giveplayerid, playerid, reason);
			format(string, sizeof(string), "AdmCmd: %s was flagged by %s, reason: %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);

			format(string, sizeof(string), "%s was flagged by %s (%s).", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
			Log("logs/flags.log", string);
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:togchatbox(playerid, params[])
{
	switch(ActiveChatbox[playerid])
	{
		case 1:
		{
			ClearChatbox(playerid);
			ActiveChatbox[playerid] = 0;
		}
		case 0:
		{
			ActiveChatbox[playerid] = 1;
			SendClientMessageEx(playerid, COLOR_WHITE, "You have turned the chatbox back on!");
		}
	}
	return 1;
}

CMD:next(playerid, params[])
{
	TutorialStep(playerid);
	return 1;
}

/*CMD:showflags(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128];

		SendClientMessageEx(playerid, COLOR_YELLOW, "Outstanding Flags List: (Note: This system is being phased out)");
		new fCounter;
		foreach(new i: Player)
		{
			if(strlen(PlayerInfo[i][pFlag]) > 0)
			{
				format(string, sizeof(string), "%s(%d) Reason: %s.",GetPlayerNameEx(i),i,PlayerInfo[i][pFlag]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				fCounter += 1;
			}
		}
		if(fCounter <= 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "None.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}*/

CMD:slap(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >=2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /slap [player]");

		new Float:shealth;
		new Float:slx, Float:sly, Float:slz;

		if(IsPlayerConnected(giveplayerid))
		{

			GetPlayerHealth(giveplayerid, shealth);
			SetPlayerHealth(giveplayerid, shealth-5);
			GetPlayerPos(giveplayerid, slx, sly, slz);
			SetPlayerPosEx(giveplayerid, slx, sly, slz+5);
			PlayerPlaySound(giveplayerid, 1130, slx, sly, slz+5);
			format(string, sizeof(string), "AdmCmd: %s (%d) was slapped by %s %s (%d)",GetPlayerNameEx(giveplayerid),giveplayerid,ARank(playerid), GetPlayerNameEx(playerid),playerid);
			ABroadCast(COLOR_LIGHTRED,string,2);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:kills(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kills [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
			format(string, sizeof(string), "<< Last 10 Kills/Deaths of %s (%d) >>", GetPlayerNameEx(giveplayerid),giveplayerid);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog9]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog8]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog7]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog6]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog5]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog4]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog3]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog2]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog1]);
			SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[giveplayerid][pKillLog0]);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}


CMD:okills(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3)
	{
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /okills [name]");

		new query[256], giveplayerid;
		giveplayerid = ReturnUser(params);
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /kills for online players.");
			return 1;
		}

		new tmpName[24];

		format(query, sizeof(query), "SELECT `KillLog0`,`KillLog1`,`KillLog2`,`KillLog3`,`KillLog4`,`KillLog5`,`KillLog6`,`KillLog7`,`KillLog8`,`KillLog9` FROM `accounts` WHERE `Username`='%s'", tmpName);
		mysql_function_query(MainPipeline, query, true, "OnGetOKills", "i", playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
	}
	return 1;
}

forward OnGetOKills(index);
public OnGetOKills(index)
{
	if(IsPlayerConnected(index))
	{
		new string[128];

		new rows, fields;
		cache_get_data(rows, fields, MainPipeline);

		if(rows)
		{
			cache_get_field_content(0, "KillLog0", string, MainPipeline);
			if(!isnull(string)) {
				SendClientMessageEx(index, COLOR_GREEN, "________________________________________________");
				SendClientMessageEx(index, COLOR_YELLOW, "<< Last 10 Kills/Deaths >>");
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog1", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog2", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog3", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog4", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog5", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog6", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog7", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog8", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
				cache_get_field_content(0, "KillLog9", string, MainPipeline);
				SendClientMessageEx(index, COLOR_YELLOW, string);
			}
			else {
				SendClientMessageEx(index, COLOR_WHITE, "There was an issue with fetching Kill Logs.");
			}
		}
	}
	return 1;
}

CMD:mute(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /mute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not use this command on yourself!");
				return 1;
			}

			if(PlayerInfo[giveplayerid][pMuted] == 0)
			{
				if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin])
				{
					format(string, sizeof(string), "%s just tried to /mute you.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't perform this action on an equal or higher level administrator.");
					return 1;
				}
				PlayerInfo[giveplayerid][pMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s (%d) was muted by %s %s (%d).",GetPlayerNameEx(giveplayerid),giveplayerid,ARank(playerid),GetPlayerNameEx(playerid),playerid);
				ABroadCast(COLOR_LIGHTRED,string,2);
			}
			else
			{
				PlayerInfo[giveplayerid][pMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s (%d) was unmuted by %s %s (%d).",GetPlayerNameEx(giveplayerid),giveplayerid,ARank(playerid),GetPlayerNameEx(playerid),playerid);
				ABroadCast(COLOR_LIGHTRED,string,2);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:hlban(playerid, params[])
{
	if(IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 1)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hlban [player]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(PlayerInfo[giveplayerid][pHelper] >= 1 || PlayerInfo[giveplayerid][pAdmin] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You can not ban admins/advisors/helpers from the helper channel!");
					return 1;
				}
				if(PlayerInfo[giveplayerid][pHelpMute] == 0)
				{
					PlayerInfo[giveplayerid][pHelpMute] = 1;

					foreach(new n: Player)
					{
						if(gHelp[n]== 0)
						{
							format(string, sizeof(string), "* %s has been banned from the helper channel by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
							SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
						}
					}
					if(gHelp[playerid] != 0)
					{
						format(string, sizeof(string), "* %s has been banned from the helper channel by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
						SendClientMessageEx(playerid, COLOR_JOINHELPERCHAT, string);
					}
                    gHelp[giveplayerid] = 1;

					format(string, sizeof(string), "You have been banned from helper channel by %s %s.",ARank(playerid), GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "AdmCmd: %s was banned from /hl by %s %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
				}
				else
				{
					PlayerInfo[giveplayerid][pHelpMute] = 0;

					foreach(new n: Player)
					{
						if (gHelp[n]==0)
						{
							format(string, sizeof(string), "* %s has been unbanned from the helper channel by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
							SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
						}
					}
					if(gHelp[playerid] != 0)
					{
						format(string, sizeof(string), "* %s has been unbanned from the helper channel by %s %s.", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
						SendClientMessageEx(playerid, COLOR_JOINHELPERCHAT, string);
					}

					format(string, sizeof(string), "You have been unbanned from helper channel by %s %s.",ARank(playerid), GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "AdmCmd: %s was unbanned from /hl by %s %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
					Log("logs/mute.log", string);
				}

			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		}
	}
	return 1;
}

CMD:vmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pVMuted] == 0)
			{
				PlayerInfo[giveplayerid][pVMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s %s has indefinitely blocked %s from using VIP Chat.",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been indefinitely muted from VIP Chat for abuse by %s. You may appeal this on the forums (admin complaint)", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was blocked from /v by %s %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pVMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to use VIP Chat by %s %s.",GetPlayerNameEx(giveplayerid), ARank(playerid),GetPlayerNameEx(playerid));
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been re-allowed to use VIP Chat by %s %s.",ARank(playerid), GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /v by %s %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:dmstrikereset(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 4)
	{
	    new giveplayerid, string[128];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmstrikereset [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Resetting strikes..");
			format(string, sizeof(string), "DELETE FROM dm_watchdog WHERE `id` = %d", GetPlayerSQLId(giveplayerid));
			mysql_function_query(MainPipeline, string, false, "OnDMStrikeReset", "ii", playerid, giveplayerid);
		}
	}
	return 1;
}

forward OnDMStrikeReset(playerid, giveplayerid);
public OnDMStrikeReset(playerid, giveplayerid)
{
	new string[128];
	format(string, sizeof(string), "Deleted %d strikes against %s", mysql_affected_rows(MainPipeline), GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:dmrlookup(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
	    new giveplayerid, string[128];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmrlookup [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Fetching data..");
			format(string, sizeof(string), "SELECT d.timestamp, a.Username FROM dm_watchdog d LEFT JOIN \
			accounts a ON a.id = d.id WHERE `reporter` = %d LIMIT 10", GetPlayerSQLId(giveplayerid));
			mysql_function_query(MainPipeline, string, true, "OnDMRLookup", "ii", playerid, giveplayerid);
		}
	}
	return 1;
}

forward OnDMRLookup(playerid, giveplayerid);
public OnDMRLookup(playerid, giveplayerid)
{
	new string[128], rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	format(string, sizeof(string), "Showing the last %d /dmreports by %s", rows, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_WHITE, "| Reported | Time |");
	for(new i;i < rows;i++)
	{
 		new szResult[32], name[MAX_PLAYER_NAME], timestamp;
		cache_get_row(i, 0, szResult, MainPipeline); timestamp = strval(szResult);
		cache_get_row(i, 1, name, MainPipeline);
		format(string, sizeof(string), "%s - %s", name, date(timestamp, 1));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:dmtokens(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
	    new giveplayerid, string[256];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmtokens [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Fetching data...");
			format(string, sizeof(string), "SELECT d.timestamp, a.Username FROM dm_watchdog d LEFT JOIN \
			accounts a ON a.id = d.reporter WHERE d.id = %d && (d.timestamp > %d || (d.superwatch = 1 && d.timestamp > %d))", GetPlayerSQLId(giveplayerid), (gettime()-259200), (gettime()-5184000));
			mysql_function_query(MainPipeline, string, true, "OnDMTokenLookup", "ii", playerid, giveplayerid);
		}
	}
	return 1;
}

forward OnDMTokenLookup(playerid, giveplayerid);
public OnDMTokenLookup(playerid, giveplayerid)
{
	new string[128], rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	format(string, sizeof(string), "Showing the %d active /dmreports on %s", rows, GetPlayerNameEx(giveplayerid));
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_WHITE, "| Reporter | Time |");
	for(new i;i < rows;i++)
	{
 		new szResult[32], name[MAX_PLAYER_NAME], timestamp;
		cache_get_row(i, 0, szResult, MainPipeline); timestamp = strval(szResult);
		cache_get_row(i, 1, name, MainPipeline);
		format(string, sizeof(string), "%s - %s", name, date(timestamp, 1));
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:dmwatchlist(playerid, params[])
{
    if (PlayerInfo[playerid][pAdmin] >= 3)
	{
	    new string[256];
	    SendClientMessage(playerid, COLOR_WHITE, "Fetching watchlist..");
		format(string, sizeof(string), "SELECT DISTINCT a.Username, count(a.username) FROM dm_watchdog d LEFT JOIN \
		accounts a ON a.id = d.id WHERE a.Online = %d && (d.timestamp > %d || (d.superwatch = 1 && d.timestamp > %d))\
		GROUP BY a.Username HAVING Count(a.Username) >= 2", servernumber, (gettime()-259200), (gettime()-5184000));
		mysql_function_query(MainPipeline, string, true, "OnDMWatchListLookup", "i", playerid);
	}
	return 1;
}

forward OnDMWatchListLookup(playerid);
public OnDMWatchListLookup(playerid)
{
	new string[128], rows, fields;
	cache_get_data(rows, fields, MainPipeline);
	format(string, sizeof(string), "Showing %d active people to watch", rows);
	SendClientMessage(playerid, COLOR_WHITE, string);
	for(new i;i < rows;i++)
	{
 		new name[MAX_PLAYER_NAME], watchid;
		cache_get_row(i, 0, name, MainPipeline);
		sscanf(name, "u", watchid);
		format(string, sizeof(string), "(ID: %d) %s", watchid, name);
		SendClientMessage(playerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:dmwatch(playerid, params[])
{
    if (PlayerInfo[playerid][pWatchdog] == 1 || PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
	    if(GetPVarType(playerid, "pWatchdogWatching"))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "You have stopped DM Watching.");
	        GettingSpectated[Spectate[playerid]] = INVALID_PLAYER_ID;
			Spectating[playerid] = 0;
			Spectate[playerid] = INVALID_PLAYER_ID;
			SetPVarInt(playerid, "SpecOff", 1 );
			TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);
			DeletePVar(playerid, "pWatchdogWatching");
	    }
	    else
	    {
		    new string[300];
		    SendClientMessage(playerid, COLOR_WHITE, "Fetching watchlist..");
			format(string, sizeof(string), "SELECT DISTINCT a.Username, count(a.username) FROM dm_watchdog d LEFT JOIN \
			accounts a ON a.id = d.id WHERE a.Online = %d && (d.timestamp > %d || (d.superwatch = 1 && d.timestamp > %d))\
			GROUP BY a.Username HAVING Count(a.Username) >= 2 ORDER BY rand() LIMIT 1", servernumber, (gettime()-259200), (gettime()-5184000));
			mysql_function_query(MainPipeline, string, true, "OnDMWatch", "i", playerid);
		}
	}
	return 1;
}

forward OnDMWatch(playerid);
public OnDMWatch(playerid)
{
	new rows, fields;
    cache_get_data(rows, fields, MainPipeline);
    if(rows)
    {
		new string[128], namesql[MAX_PLAYER_NAME], name[MAX_PLAYER_NAME];
		cache_get_row(0, 0, namesql, MainPipeline);
		foreach(new i: Player) if(!PlayerInfo[i][pJailTime])
		{
		    GetPlayerName(i, name, sizeof(name));
			if(strcmp(name, namesql, true) == 0)
			{
			    foreach(new x: Player)
			    {
			        if(GetPVarInt(x, "pWatchdogWatching") == i)
			        {
			            return SendClientMessage(playerid, COLOR_WHITE, "The random person selected for you is already being watched, please try again!");
			        }
			    }
			    format(string, sizeof(string), "You now have access to /spec %s. Use /dmalert if this person deathmatches.", name, i);
			    SendClientMessage(playerid, COLOR_WHITE, string);
			    return SetPVarInt(playerid, "pWatchdogWatching", i);
			}
		}
	}
	return SendClientMessageEx(playerid, COLOR_WHITE, "There is no one online to DM Watch!");
}

CMD:dmrmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dmrmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pDMRMuted] == 0)
			{
			    PlayerInfo[giveplayerid][pDMRMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from submitting DM reports.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been blocked from submitting /dmreports by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was blocked from /dmreport by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
			    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You must be a senior admin to unmute others from submitting DM reports");
				PlayerInfo[giveplayerid][pDMRMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to submit DM reports by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been re-allowed to submitting /dmreports again by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /dmreport by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
  }
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
				PlayerInfo[giveplayerid][pRMuted] = 1;
				format(string, sizeof(string), "AdmCmd: %s has indefinitely blocked %s from submitting reports.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been blocked from submitting /reports by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
//				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You will not be able to submit reports until you are unblocked.");
				format(string, sizeof(string), "AdmCmd: %s was blocked from /report by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
			else
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				format(string, sizeof(string), "AdmCmd: %s has been re-allowed to submit reports by %s",GetPlayerNameEx(giveplayerid),GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				format(string, sizeof(string), "You have been re-allowed to submitting /reports again by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /report by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/mute.log", string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rto(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[512], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rto [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 0)
			{
			    if(PlayerInfo[giveplayerid][pRMutedTotal] == 0)
			    {
  					PlayerInfo[giveplayerid][pRMutedTotal] = 1;
					format(string, sizeof(string), "AdmCmd: %s %s has given %s a warning for report abuse, reason: %s",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "An admin warns you not to abuse /report.\n\nNote that future abuse of /report could result in a mute from /report or loss of that privilege altogether.");
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Report abuse warning", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s %s has given %s a warning for report abuse, reason: %s",ARank(playerid), GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					Log("logs/mute.log", string);

			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 1)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 2;
					PlayerInfo[giveplayerid][pRMutedTime] = 15*60;
					format(string, sizeof(string), "AdmCmd: %s %s has temporarily blocked %s from submitting reports, reason: %s",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s %s, reason: %s.\n\nAs this is the second time you have been blocked from reporting, you will not be able to use /report for 15 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.",ARank(playerid), GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), ARank(playerid),GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 2)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 3;
					PlayerInfo[giveplayerid][pRMutedTime] = 30*60;
					format(string, sizeof(string), "AdmCmd: %s %s has temporarily blocked %s from submitting reports, reason: %s",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s %s, reason: %s.\n\nAs this is the third time you have been blocked from reporting, you will not be able to use /report for 30 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.", ARank(playerid),GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
			    }
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 3)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 4;
					PlayerInfo[giveplayerid][pRMutedTime] = 45*60;
					format(string, sizeof(string), "AdmCmd: %s %s has temporarily blocked %s from submitting reports, reason: %s",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s %s, reason: %s.\n\nAs this is the fourth time you have been blocked from reporting, you will not be able to use /report for 45 minutes.\n\nNote that future abuse of /report could result in a longer mute from /report or loss of that privilege altogether.",ARank(playerid), GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] == 4)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 5;
					PlayerInfo[giveplayerid][pRMutedTime] = 60*60;
					format(string, sizeof(string), "AdmCmd: %s %s has temporarily blocked %s from submitting reports, reason: %s",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s %s, reason: %s.\n\nAs this is the fifth time you have been blocked from reporting, you will not be able to use /report for 60 minutes.\n\nNote that future abuse of /report could result in a loss of that privilege altogether.",ARank(playerid), GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}
			    else if(PlayerInfo[giveplayerid][pRMutedTotal] >= 5)
			    {
  					PlayerInfo[giveplayerid][pRMuted] = 2;
  					PlayerInfo[giveplayerid][pRMutedTotal] = 6;
					PlayerInfo[giveplayerid][pRMutedTime] = 300*60;
					format(string, sizeof(string), "AdmCmd: %s %s has temporarily blocked %s from submitting reports, reason: %s",ARank(playerid),GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
					ABroadCast(COLOR_LIGHTRED,string,2);

					format(string, sizeof(string), "You have been temporarily blocked from submitting reports by %s %s, reason: %s.\n\nAs this is the sixth time you have been blocked from reporting, you will not be able to use /report for 5 hours.\n\nNote that future abuse of /report could result in a loss of that privilege altogether.",ARank(playerid), GetPlayerNameEx(playerid), reason);
					ShowPlayerDialog(giveplayerid,7954,DIALOG_STYLE_MSGBOX,"Temporarily blocked from reports", string,"Next", "");

					format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from /report by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
					Log("logs/mute.log", string);
				}

				for(new i = 0; i < MAX_REPORTS; i++)
				{
					if(Reports[i][ReportFrom] == giveplayerid)
					{
						Reports[i][BeingUsed] = 0;
					}
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is already disabled from /reports.");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:rtoreset(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /rtoreset [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pRMuted] == 2)
			{
				PlayerInfo[giveplayerid][pRMuted] = 0;
				PlayerInfo[giveplayerid][pRMutedTotal]--;
				PlayerInfo[giveplayerid][pRMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s %s has unblocked %s from reporting, reason: %s",ARank(playerid),GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You have been unblocked from submitting reports. You may now use the reporting system again.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");
				format(string, sizeof(string), "AdmCmd: %s was unblocked from /report by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
				Log("logs/mute.log", string);
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_GRAD1, "That player is not blocked from reporting!");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:vto(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vto [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pVMuted] == 0)
			{
				PlayerInfo[giveplayerid][pVMuted] = 2;
				PlayerInfo[giveplayerid][pVMutedTime] = 15*60;
				format(string, sizeof(string), "AdmCmd: %s has temporarily blocked %s from using VIP Chat, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				format(string, sizeof(string), "You have been temporarily blocked from using VIP Chat by %s, reason: %s.", GetPlayerNameEx(playerid), reason);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You will not be able to use VIP Chat for 15 minutes.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Note the future abuse of VIP Chat could result in loss of that privilege altogether or being banned from the server.");
				format(string, sizeof(string), "AdmCmd: %s was temporarily blocked from VIP Chat by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid),reason);
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is already disabled from VIP Chat.");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:vtoreset(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pDonateRank] == 5)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vtoreset [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pVMuted] == 2)
			{
				PlayerInfo[giveplayerid][pVMuted] = 0;
				PlayerInfo[giveplayerid][pVMutedTime] = 0;
				format(string, sizeof(string), "AdmCmd: %s has unblocked %s from using VIP Chat, reason: %s",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), reason);
				if(PlayerInfo[playerid][pAdmin] < 2)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				ABroadCast(COLOR_LIGHTRED,string,2);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "You have been unblocked from using VIP Chat. You may now use the VIP Chat system again.");
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, "Please accept our apologies for any error and inconvenience this may have caused.");
				format(string, sizeof(string), "AdmCmd: %s was unblocked from VIP Chat by %s, reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid),reason);
				Log("logs/mute.log", string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not temporarily disabled from VIP Chat.");
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:kick(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kick [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && (PlayerInfo[giveplayerid][pHelper] >= 2 || PlayerInfo[giveplayerid][pAdmin] > 0) && playerid != giveplayerid)
			{
				if(PlayerInfo[playerid][pAdmin] >= 2) {
				PlayerInfo[playerid][pInfractions] += 1;
				}
				format(string, sizeof(string), "AdmCmd: %s %s has been auto Infracted, reason: Trying to /kick a higher admin.",ARank(playerid), GetPlayerNameEx(playerid));
				Log("logs/infract.log", string);
				format(string, sizeof(string), "AdmCmd: %s %s has been auto-kicked, reason: Trying to /kick a higher admin.",ARank(playerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string, (PlayerInfo[playerid][pAdmin] == 1) ? (1) : (2));
				KickWithMessage(playerid);
				return 1;
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s (IP:%s) was kicked by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip,ARank(playerid), GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				if(PlayerInfo[playerid][pAdmin] == 1) Log("logs/moderator.log", string);
				format(string, sizeof(string), "AdmCmd: %s was kicked by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				KickWithMessage(giveplayerid);
			}
			return 1;
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:sban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sban [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s has been auto-banned, reason: Trying to /sban a higher admin.", GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				PlayerInfo[playerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			}
			new playerip[32];
			GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "AdmCmd: %s (IP:%s) was silent banned by %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip, GetPlayerNameEx(playerid), reason);
			Log("logs/ban.log", string);
			format(string, sizeof(string), "AdmCmd: %s was silent banned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED,string,2);
			PlayerInfo[giveplayerid][pBanned] = 1;
            new ip[32];
			GetPlayerIp(giveplayerid,ip,sizeof(ip));
			AddBan(ip);
			KickWithMessage(giveplayerid);
			//MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,GetPlayerSQLId(playerid));
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:kickres(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] < 99999)
	{
		return 1;
	}

	new level, amount;
	if(sscanf(params, "dd", level, amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /kickres [level] [amount]");

	if(level < 0 || level > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   Can only Reserved Slots Kick from level 0 to 5!"); return 1; }
	if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   Can only Reserved Slots Kick of a maximum of 10 players!"); return 1; }
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pLevel] == level && PlayerInfo[i][pAdmin] < 1 && PlayerInfo[i][pDonateRank] < 1 && amount > 0)
		{
			amount -= 1;
			Kick(i);
		}
	}
	return 1;
}

CMD:warn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /warn [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Admins can not be warned !");
				return 1;
			}
			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), ip, GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(ip);
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,GetPlayerSQLId(playerid));
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was warned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s was warned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "You were warned by %s, reason: %s", GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:resetinfractions(playerid, params[])
{
	new giveplayerid, string[128];
	if(sscanf(params, "u", giveplayerid))
	{
        SendClientMessageEx(playerid, 0xFFFFFF, "USAGE: /resetinfractions [playerid]");
        return 1;
    }
	if(PlayerInfo[playerid][pAdmin] >= 1338)
	{
	    if(IsPlayerConnected(giveplayerid))
	    {
	    	PlayerInfo[giveplayerid][pInfractions] = 0;
	    	format(string, sizeof(string), "AdmCmd: %s has reset %s's infractions.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_YELLOW,string, 2);
			format(string, sizeof(string), "AdmCmd: %s has reset %s's infractions.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/admin.log", string);
			return 1;
		}
		else SendClientMessageEx(playerid, 0xFFFFFF, "Player is not connected.");
	}
	return 1;
}

CMD:infract(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /infract [player] [reason]");

		if(IsPlayerConnected(giveplayerid) && PlayerInfo[giveplayerid][pAdmin] >= 2)
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= PlayerInfo[playerid][pAdmin] && playerid != giveplayerid)
			{
				format(string, sizeof(string), "AdmCmd: %s %s has been auto-Infracted, reason: Trying to /infract a higher admin.",ARank(playerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string, 2);
				PlayerInfo[playerid][pInfractions] += 1;
				return 1;
			}
			PlayerInfo[giveplayerid][pInfractions] += 1;
			if(PlayerInfo[giveplayerid][pInfractions] >= 3)
			{
				new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s's (IP: %s) Account was Disabled by %s %s (had 3 Infractions), reason: %s", GetPlayerNameEx(giveplayerid), ip,ARank(playerid), GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s's Account was Disabled by %s %s (had 3 Infractions), reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED,string, 2);
				PlayerInfo[giveplayerid][pDisabled] = 1;
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,GetPlayerSQLId(playerid));
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was Infracted by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s was Infracted by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "You were Infracted by %s %s, reason: %s", ARank(playerid),GetPlayerNameEx(playerid), reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified or player isn't an Administrator");
	return 1;
}

CMD:swarn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pUndercover] == 1)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /swarn [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "Admins can not be warned !");
				return 1;
			}
			PlayerInfo[giveplayerid][pWarns] += 1;
			if(PlayerInfo[giveplayerid][pWarns] >= 3)
			{
			    new ip[32];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				format(string, sizeof(string), "AdmCmd: %s (IP: %s) was banned by %s %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid), ip,ARank(playerid), GetPlayerNameEx(playerid),reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s %s (had 3 Warnings), reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED, string, 2);
				PlayerInfo[giveplayerid][pBanned] = 1;
				AddBan(ip);
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,GetPlayerSQLId(playerid));
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s was silent warned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			ABroadCast(COLOR_LIGHTRED, string, 2);
			format(string, sizeof(string), "AdmCmd: %s was silent warned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
			Log("logs/admin.log", string);
			format(string, sizeof(string), "You were warned by an Admin, reason: %s", reason);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:owarn(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command!");
		return 1;
	}

	new string[128], query[512], name[MAX_PLAYER_NAME], reason[64];
	if(sscanf(params, "s[24]s[64]", name, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /owarn [name] [reason]");

	new giveplayerid = ReturnUser(name);
	if(giveplayerid != INVALID_PLAYER_ID)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "That player is online, use /warn for online players.");
		return 1;
	}

	//new tmpName[24];
	SetPVarString(playerid, "OnWarnPlayer", name);
	SetPVarString(playerid, "OnWarnPlayerReason", reason);

	format(query, sizeof(query), "UPDATE `accounts` SET `Warnings`=`Warnings`+1 WHERE `Username`='%s' AND `PermBand` < 3 AND `Band` < 1 AND `AdminLevel` < 2",name);
	mysql_function_query(MainPipeline, query, false, "OnWarnPlayer", "i", playerid);

	format(string,sizeof(string),"Attempting to warn %s...", name);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);

	return 1;
}

forward OnWarnPlayer(index);
public OnWarnPlayer(index)
{
	new string[128], name[24], reason[64];
	GetPVarString(index, "OnWarnPlayer", name, 24);
	GetPVarString(index, "OnWarnPlayerReason", reason, 64);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully warned %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

		format(string, sizeof(string), "AdmCmd: %s was offline warned by %s %s, reason: %s", name,ARank(index), GetPlayerNameEx(index), reason);
		Log("logs/admin.log", string);
	}
	else {
		format(string, sizeof(string), "There was an issue with warning %s's account.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnWarnPlayer");
	DeletePVar(index, "OnWarnPlayerReason");

	return 1;
}

CMD:skick(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /skick [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s %s has been auto-kicked, reason: Trying to /skick a higher admin.",ARank(playerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				Kick(playerid);
				return 1;
			}
			else
			{
				new playerip[32];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was silent kicked by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip,ARank(playerid), GetPlayerNameEx(playerid), reason);
				Log("logs/kick.log", string);
				format(string, sizeof(string), "AdmCmd: %s was silent kicked by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
				ABroadCast(COLOR_LIGHTRED,string,2);
				Kick(giveplayerid);
			}
			return 1;

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}



CMD:ban(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ban [player] [reason]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				format(string, sizeof(string), "AdmCmd: %s %s has been auto-banned, reason: Trying to /ban a higher admin.",ARank(playerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_YELLOW,string,2);
				PlayerInfo[playerid][pBanned] = 1;
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				return 1;
			}
			else
			{
				new playerip[34];
				GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
				format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid), playerip,ARank(playerid), GetPlayerNameEx(playerid), reason);
				Log("logs/ban.log", string);
				format(string, sizeof(string), "AdmCmd: %s was banned by %s %s, reason: %s", GetPlayerNameEx(giveplayerid),ARank(playerid), GetPlayerNameEx(playerid), reason);
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				PlayerInfo[giveplayerid][pBanned] = 1;
				format(PlayerInfo[giveplayerid][pFlag], 128, "");
				new ip[34];
				GetPlayerIp(giveplayerid,ip,sizeof(ip));
				AddBan(ip);
				KickWithMessage(giveplayerid);
				//MySQLBan(GetPlayerSQLId(giveplayerid),ip,reason,GetPlayerSQLId(playerid));
				return 1;
			}

		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

/*public OnPlayerAirbreak(playerid)
{
    new
        string[128];

    if(PlayerInfo[playerid][pAdmin] < 2)
	{
   		if (IsPlayerInAnyVehicle(playerid))
		{
        	format(string, sizeof(string), "AdmCmd: %s was banned by Chuck Norris, reason: Vehicle Airbreak.", GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
        	new playerip[34];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by Chuck Norris, reason: Vehicle Airbreak.", GetPlayerNameEx(playerid), playerip);
			Log("logs/ban.log", string);
			SendClientMessageEx(playerid, 0xFFFFFF, "You have been banned for airbreaking. If you feel this is a mistake, please make a ban appeal.");
			PlayerInfo[playerid][pBanned] = 1;
			format(PlayerInfo[playerid][pFlag], 128, "");
			new ip[34];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			return 1;
    	}
    	else
	 	{
        	format(string, sizeof(string), "AdmCmd: %s was banned by Chuck Norris, reason: Airbreak.", GetPlayerNameEx(playerid));
			SendClientMessageToAllEx(COLOR_LIGHTRED, string);
        	new playerip[34];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by Chuck Norris, reason: Airbreak.", GetPlayerNameEx(playerid), playerip);
			Log("logs/ban.log", string);
			SendClientMessageEx(playerid, 0xFFFFFF, "You have been banned for airbreaking. If you feel this is a mistake, please make a ban appeal.");
			PlayerInfo[playerid][pBanned] = 1;
			format(PlayerInfo[playerid][pFlag], 128, "");
			new ip[34];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			return 1;
    	}
    }
	return 1;
}*/

CMD:freeze(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freeze [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] > PlayerInfo[playerid][pAdmin])
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can't freeze a higher admin.");
				return 1;
			}

			TogglePlayerControllable(giveplayerid, 0);
			SetPVarInt(giveplayerid, "IsFrozen", 1);
			format(string, sizeof(string), "AdmCmd: %s was frozen by %s %s",GetPlayerNameEx(giveplayerid),ARank(playerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,2);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:unfreeze(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /unfreeze [player]");


		if(IsPlayerConnected(giveplayerid))
		{
			DeletePVar(giveplayerid, "IsFrozen");
			DeletePVar(giveplayerid, "PlayerCuffed");
			PlayerCuffed[giveplayerid] = 0;
			PlayerTied[giveplayerid] = 0;
			TogglePlayerControllable(giveplayerid, 1);
			format(string, sizeof(string), "AdmCmd: %s was unfrozen by %s %s.",GetPlayerNameEx(giveplayerid),ARank(playerid),GetPlayerNameEx(playerid));
			ABroadCast(COLOR_LIGHTRED,string,2);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid player specified.");
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}
/*
CMD:sgcheck(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new string[128], giveplayerid, vehicleid;
		if(sscanf(params, "ud", giveplayerid, vehicleid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sgcheck [player] [vehicleid]");

		if(IsPlayerConnected(giveplayerid))
		{
      		if(GetPVarInt(playerid, "sgchecking") == 1)
      		{
				return 1;
			}
			if(SGcheckUsed
      		SetPVarInt(playerid, "sgchecking", 1);
			SetPVarInt(giveplayerid, "sgcheckerid", playerid);
			SetPVarInt(giveplayerid, "sgcheck", 1);
			GetPlayerPos(giveplayerid, SGcheckPos[giveplayerid][0], SGcheckPos[giveplayerid][1], SGcheckPos[giveplayerid][2]);
   			for(new iIterator; iIterator < sizeof(SGcar); iIterator++) if(SGcar[iIterator] == INVALID_VEHICLE_ID)
			{
				vehicleid = SGcar[iIterator]
				SGcar[iIterator] = CreateVehicleEx(567,1924.5453,-2211.5330,13.4174,343.0517, 233, 333, -1, giveplayerid);
				VehicleFuel[SGcar[iIterator]] = 0.0;
				Vehicle_ResetData(SGcar[iIterator]);
				return SendClientMessageEx(playerid, COLOR_GREY, "Vehicle spawned!");
			}
			PutPlayerInVehicle(giveplayerid, vehicleid, 0);
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has initiated SprunkGuard check on %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ABroadCast(COLOR_LIGHTRED,string,2);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}
CMD:sgcheckoff(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdminDuty] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this whilst your off Duty!");
			return 1;
		}
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sgcheckoff [player]");

		if(IsPlayerConnected(giveplayerid))
		{

			//TogglePlayerControllable(giveplayerid, 0);
			DeletePVar(giveplayerid, "sgcheckerid");
			DeletePVar(giveplayerid, "sgcheck");
			SendClientMessageEx(playerid, COLOR_WHITE, "SprunkGuard Check Off");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}
*/
CMD:leaders(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pFactionModerator] == 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "Faction leaders online:");

		new	string[128], sz_FacInfo[3][64];

		foreach(new i: Player) if(PlayerInfo[i][pLeader] >= 1) {
			GetPlayerFactionInfo(i, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
			format(string, sizeof(string), "(%s) %s %s", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(i));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:infotoall(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 2) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
		return 1;
	}

	SendClientMessageToAll(COLOR_LIGHTBLUE, "Evolution Roleplay Information:");
	SendClientMessageToAll(COLOR_LIGHTBLUE, "TeamSpeak3: ts.evolution-rp.net");
	SendClientMessageToAll(COLOR_LIGHTBLUE, "Website: http://www.evolution-rp.net");
	return 1;
}

CMD:n(playerid, params[])
{
	return cmd_newb(playerid, params);
}

CMD:newb(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pTut] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't do that at this time.");
		return 1;
	}
	if ((nonewbie) && PlayerInfo[playerid][pAdmin] < 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "The newbie chat channel has been disabled by an administrator!");
		return 1;
	}
	if(PlayerInfo[playerid][pNMute] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are muted from the newbie chat channel.");
		return 1;
	}
	new string[128];
	if(NewbieTimer[playerid] > 0)
	{
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", NewbieTimer[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}
	if(gNewbie[playerid]==1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You have the channel toggled, /tognewbie to re-enable!");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/newb)ie [text]");

	if(PlayerInfo[playerid][pHelper]<1&&PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = 50;
	}
	else if(PlayerInfo[playerid][pHelper]==1&&PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = 30;
	}
	else if(PlayerInfo[playerid][pAdmin] == 1)
	{
		NewbieTimer[playerid] = 30;
	}
	else if(PlayerInfo[playerid][pHelper]>=2&&PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = 10;
	}
	if(PlayerInfo[playerid][pLevel] >= 1 && PlayerInfo[playerid][pLevel] <= 9 && PlayerInfo[playerid][pAdmin]<1)
	{
		format(string, sizeof(string), "** Newbie %s (%d): %s", GetPlayerNameEx(playerid),playerid, params);
	}
	if(PlayerInfo[playerid][pLevel] >= 10 && PlayerInfo[playerid][pAdmin]<1)
	{
		format(string, sizeof(string), "** Player %s (%d): %s", GetPlayerNameEx(playerid),playerid, params);
	}
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin]>=1)
	{
		format(string, sizeof(string), "** %s %s (%d): %s",ARank(playerid), GetPlayerNameEx(playerid),playerid, params);
	}
	foreach(new n: Player)
	{
		if (gNewbie[n]==0)
		{
			SendClientMessageEx(n, COLOR_NEWBIE, string);
		}
	}
	return 1;
}

CMD:hl(playerid, params[])
{
	if(gPlayerLogged{playerid} == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not logged in.");
		return 1;
	}
	if(PlayerInfo[playerid][pTut] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't do that at this time.");
		return 1;
	}

	if(PlayerInfo[playerid][pHelpMute] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are banned from the helper channel.");
		return 1;
	}

	new string[128];
	if(HelperTimer[playerid] > 0)
	{
		format(string, sizeof(string), "You must wait %d seconds before speaking again in this channel.", HelperTimer[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}
	if(gHelp[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the helper channel, type /joinhelp.");
		return 1;
	}

	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/hl) [text]");

	if(PlayerInfo[playerid][pHelper]<1&&PlayerInfo[playerid][pAdmin] < 2)
	{
		HelperTimer[playerid] = 10;
	}
	else if(PlayerInfo[playerid][pHelper]==1&&PlayerInfo[playerid][pAdmin] < 2)
	{
		HelperTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pAdmin] == 1)
	{
		HelperTimer[playerid] = 5;
	}
	else if(PlayerInfo[playerid][pHelper]>=2&&PlayerInfo[playerid][pAdmin] < 2)
	{
		NewbieTimer[playerid] = 5;
	}
	if(PlayerInfo[playerid][pHelper]<1&&PlayerInfo[playerid][pAdmin]<1)
	{
		format(string, sizeof(string), "** Question by %s: %s", GetPlayerNameEx(playerid), params);
	}
	if(PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin]>=1)
	{
		format(string, sizeof(string), "** %s %s: %s",ARank(playerid), GetPlayerNameEx(playerid), params);
	}
	foreach(new n: Player)
	{
		if (gHelp[n]==0)
		{
			SendClientMessageEx(n, COLOR_HELPERCHAT, string);
		}
	}
	return 1;
}

CMD:joinhelp(playerid, params[])
{
	if(gHelp[playerid] == 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are already in the helper channel!");
		return 1;
	}
	if(HlKickTimer[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You have just been kicked, you can not rejoin yet!");
		return 1;
	}
	if(PlayerInfo[playerid][pHelpMute] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are banned from the helper channel.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_YELLOW, "You have joined the helper chat, type /hl to ask your question or /leavehelp to leave!");

	new string[128];
	foreach(new n: Player)
	{
		if (gHelp[n]==0)
		{
			format(string, sizeof(string), "* %s has joined the helper channel.", GetPlayerNameEx(playerid));
			SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
		}
	}
	gHelp[playerid] = 0;
	return 1;
}

CMD:leavehelp(playerid, params[])
{
	if(gHelp[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the helper channel!");
		return 1;
	}

	new string[128];
	foreach(new n: Player)
	{
		if (gHelp[n]==0)
		{
			format(string, sizeof(string), "* %s has left the helper channel.", GetPlayerNameEx(playerid));
			SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
		}
	}
	gHelp[playerid] = 1;
	return 1;
}

CMD:hlkick(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 1 || PlayerInfo[playerid][pAdmin] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hlkick [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(gHelp[giveplayerid] == 1)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "That player is not in the helper channel!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pHelper] >= 1 || PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can not kick admins/advisors from the helper channel!");
				return 1;
			}
			foreach(new n: Player)
			{
				if (gHelp[n]==0)
				{
					HlKickTimer[giveplayerid] = 120;
					format(string, sizeof(string), "* %s has been kicked from the helper channel by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					SendClientMessageEx(n, COLOR_JOINHELPERCHAT, string);
				}
			}
			gHelp[giveplayerid] = 1;

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:nunmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nunmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pNMute] == 1)
			{
				format(string, sizeof(string), "AdmCmd: %s was unmuted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				Log("logs/admin.log", string);
				PlayerInfo[giveplayerid][pNMute] = 0;
				PlayerInfo[giveplayerid][pNMuteTotal]--;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTRED,"That player is not muted from /newb!");
			}

		}
	}
	return 1;
}

CMD:nmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pSMod] == 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
				return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can't /nmute admins");
			}
			if(PlayerInfo[giveplayerid][pNMute] == 0)
			{
				PlayerInfo[giveplayerid][pNMute] = 1;
				PlayerInfo[giveplayerid][pNMuteTotal] += 1;
				format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				Log("logs/admin.log", string);
				if(PlayerInfo[giveplayerid][pNMuteTotal] > 6)
				{
					new playerip[32];
					GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
					format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: Excessive newbie chat mutes", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
					Log("logs/ban.log", string);
					format(string, sizeof(string), "AdmCmd: %s was banned, reason: Excessive newbie chat mutes.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
					PlayerInfo[giveplayerid][pBanned] = 1;
					new ip[32];
					GetPlayerIp(giveplayerid,ip,sizeof(ip));
					AddBan(ip);
					KickWithMessage(giveplayerid);
					//MySQLBan(GetPlayerSQLId(giveplayerid),ip,"Excessive newbie chat mutes",GetPlayerSQLId(playerid));
				}

				if(PlayerInfo[playerid][pAdmin] == 1)
				{
					format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by an Admin.", GetPlayerNameEx(giveplayerid));
					SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You were just muted from Newbie Chat (/newb) by an Admin.");
				}
				else
				{
					format(string, sizeof(string), "AdmCmd: %s was muted from speaking in /newb by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
					format(string, sizeof(string), "You were just muted from the newbie chat channel (/newb) by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
				}

				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Remember, the newbie chat channel is only for script/server related questions and may not be used for any other purpose, unless stated otherwise by an admin.");
				SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "If you wish to be unmuted, you will be fined or jailed. Future abuse could result in increased punishment. If you feel this was in error, contact a senior administrator.");

				format(string, sizeof(string), "AdmCmd: %s was just muted from using Newbie Chat (/newb) due to misuse.", GetPlayerNameEx(giveplayerid));
				SendClientMessageToAllEx(COLOR_LIGHTRED, string);
			}
			else
			{
				if(PlayerInfo[playerid][pAdmin] >= 2)
				{
					ShowNMuteFine(giveplayerid);
					format(string, sizeof(string), "You offered %s an unmute from /newb.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD1, "That player is currently muted. You are unable to unmute players from the newbie chat as a Community Advisor.");
				}
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:adunmute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adunmute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pADMute] == 1)
			{
				if(PlayerInfo[giveplayerid][pJailTime] != 0)
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "You cannot offer someone in jail/prison an unmute!");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Sorry, you cannot be unmuted from /ad while you are in jail/prison.");
					return 1;
				}
				format(string, sizeof(string), "AdmCmd: %s was unmuted from /ad by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				ABroadCast(COLOR_LIGHTRED,string,2);
				Log("logs/admin.log", string);
				PlayerInfo[giveplayerid][pADMute] = 0;
				PlayerInfo[giveplayerid][pADMuteTotal]--;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTRED,"That player is not muted from /newb!");
			}

		}
	}
	return 1;
}

CMD:admute(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pHelper] >= 2 || PlayerInfo[playerid][pSMod] == 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /admute [player]");

		if(IsPlayerConnected(giveplayerid))
		{
				if(PlayerInfo[giveplayerid][pAdmin] >= 1)
				{
					return SendClientMessageEx(playerid, COLOR_LIGHTRED, "You can't /admute admins");
				}
				if(PlayerInfo[giveplayerid][pADMute] == 0)
				{
					PlayerInfo[giveplayerid][pADMute] = 1;
					PlayerInfo[giveplayerid][pADMuteTotal] += 1;
					format(string, sizeof(string), "AdmCmd: %s was muted from placing Advertisements by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
					Log("logs/admin.log", string);
					ABroadCast(COLOR_LIGHTRED,string,2);

					if(PlayerInfo[giveplayerid][pADMuteTotal] > 6)
					{
						new playerip[32];
						GetPlayerIp(giveplayerid, playerip, sizeof(playerip));
						format(string, sizeof(string), "AdmCmd: %s(IP:%s) was banned by %s, reason: Excessive advertisement mutes", GetPlayerNameEx(giveplayerid),playerip,GetPlayerNameEx(playerid));
						Log("logs/ban.log", string);
						format(string, sizeof(string), "AdmCmd: %s was banned, reason: Excessive advertisement mutes.", GetPlayerNameEx(giveplayerid));
						SendClientMessageToAllEx(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pBanned] = 1;
						new ip[32];
						GetPlayerIp(giveplayerid,ip,sizeof(ip));
						AddBan(ip);
						KickWithMessage(giveplayerid);
						//MySQLBan(GetPlayerSQLId(giveplayerid),ip,"Excessive advertisement mutes",GetPlayerSQLId(playerid));
					}

					if(PlayerInfo[playerid][pAdmin] == 1)
					{
						format(string, sizeof(string), "AdmCmd: %s was muted from placing Advertisements by Admin.", GetPlayerNameEx(giveplayerid));
						SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "You were just muted from Advertisements (/ads) by an Admin.");
					}
					else
					{
						format(string, sizeof(string), "AdmCmd: %s was muted from placing Advertisements by %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
						SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
						format(string, sizeof(string), "You were just muted from the Advertisements (/ads) by %s.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, string);
					}

					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "Remember, advertisements may only be used for IC purposes and may not be used for any other purpose, unless stated otherwise by an admin.");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTRED, "If you wish to be unmuted, you will be fined or jailed. Future abuse could result in increased punishment. If you feel this was in error, contact a senior administrator.");

					format(string, sizeof(string), "AdmCmd: %s was just muted from using Advertisements (/ads) due to misuse.", GetPlayerNameEx(giveplayerid));
					SendClientMessageToAllEx(COLOR_LIGHTRED, string);
				}
				else
				{
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{
						ShowAdMuteFine(giveplayerid);
						format(string, sizeof(string), "You offered %s an unmute from /ads.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTRED, string);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD1, "That player is currently muted. You are unable to unmute players from advertisements as a Community Advisor.");
					}
				}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makeadvisor(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], giveplayerid, level;
		if(sscanf(params, "ud", giveplayerid, level)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makeadvisor [player] [level(1-4)]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make admins community advisors!");
				return 1;
			}
			PlayerInfo[giveplayerid][pHelper] = level;
			format(string, sizeof(string), "You have been promoted to a level %d advisor by %s", level, GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have promoted %s to a level %d advisor.", GetPlayerNameEx(giveplayerid),level);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makewatchdog(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makewatchdog [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this to current admins!");
				return 1;
			}
			PlayerInfo[giveplayerid][pWatchdog] = 1;

			format(string, sizeof(string), "You have been made a watchdog by %s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have made %s a watchdog.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "%s has been made a watchdog by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
			Log("logs/moderator.log", string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makemoderator(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1338)
	{
		new string[128], giveplayerid, level;
		if(sscanf(params, "ui", giveplayerid, level)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makemoderator [player] [level 1-2]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot do this to current admins!");
				return 1;
			}
			PlayerInfo[giveplayerid][pAdmin] = 1;
			if(level == 1) {
				PlayerInfo[giveplayerid][pSMod] = 0;
				format(string, sizeof(string), "You have been made a moderator by %s", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have made %s a moderator.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has been made a moderator by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/moderator.log", string);
			}
			else if(level == 2) {
				PlayerInfo[giveplayerid][pSMod] = 1;
				format(string, sizeof(string), "You have been made a senior moderator by %s", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have made %s a senior moderator.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has been made a senior moderator by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/moderator.log", string);
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:removemoderator(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /removemoderator [player]");

		if(IsPlayerConnected(giveplayerid))
		{

			if(PlayerInfo[giveplayerid][pAdmin] == 1)
			{
				if(GetPVarInt(playerid, "AdvisorDuty") == 1)
				{
					DeletePVar(playerid, "AdvisorDuty");
					Advisors -= 1;
				}
				PlayerInfo[giveplayerid][pAdmin] = 0;
				PlayerInfo[giveplayerid][pSMod] = 0;
				format(string, sizeof(string), "%s has kicked you out from the moderator team.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You took %s's moderator.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s moderator has been removed by %s", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(playerid));
				Log("logs/moderator.log", string);
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:makehelper(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makehelper [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot make admins community advisors!");
				return 1;
			}
			PlayerInfo[giveplayerid][pHelper] = 1;
			format(string, sizeof(string), "You have been made a helper by %s", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "You have made %s a helper.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:takeadvisor(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pHelper] >= 3 || PlayerInfo[playerid][pPR] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /takeadvisor [player]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[playerid][pHelper] == 3 && PlayerInfo[giveplayerid][pHelper] != 1) {
		        SendClientMessageEx(playerid, COLOR_GREY, "You can only remove helpers.");
		        return 1;
		    }
			if(PlayerInfo[giveplayerid][pHelper] != 0)
			{
				if(GetPVarType(playerid, "AdvisorDuty"))
				{
					DeletePVar(playerid, "AdvisorDuty");
					Advisors -= 1;
				}
				PlayerInfo[giveplayerid][pHelper] = 0;
				format(string, sizeof(string), "%s %s has kicked you out from the Community Advisor team.",ARank(playerid), GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You took %s's Community Advisor rank.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:ahelp(playerid, params[]) {
	return cmd_ah(playerid, params);
}

CMD:ah(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED,"_______________________________________");
		if(PlayerInfo[playerid][pSMod] > 0) SendClientMessageEx(playerid, COLOR_GRAD1, "*** SENIOR SERVER MODERATOR *** /jail /kick /c /a /togadvisor/admin /changename /dmwatch /dmalert /dm /fcheck");
		else SendClientMessageEx(playerid, COLOR_GRAD1, "*** SERVER MODERATOR *** /mjail /kick /c /togadvisor /dmwatch /dmalert /fcheck");
	}
	if (PlayerInfo[playerid][pWatchdog] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2,"*** WATCH DOG *** /dmwatch /dmalert");
	}
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW,"*** ADMIN CONTROL PANEL *** /ap");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** JUNIOR ADMIN *** /achanges /kick /ban /jail /freeze /unfreeze /slap /warn /cnn /gethere /gotoid /hospital /goto");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** JUNIOR ADMIN *** /gotoplayerscar /jetpack /god /check /anetstats /ipcheck /ip /nrn /listguns /setvw /setint /vehname");
		SendClientMessageEx(playerid, COLOR_WHITE,"*** JUNIOR ADMIN *** /requestevent /watch /dmwatchlist /dmr /fine /ar /tr /dr /afs /nao /sta /fcheck");
	}
	if (PlayerInfo[playerid][pAdmin] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_RED,"*** GENERAL ADMIN *** /noooc /nonewbie /prison /pfine /takeadminweapons /sendtols /prisonaccount /gotocar /entercar /getcar");
		SendClientMessageEx(playerid, COLOR_RED,"*** GENERAL ADMIN *** /mole /setskin /countdown /release /force(death/hospital) /rto(reset) /jailaccount /(o)clearflag /mark(2)");
		SendClientMessageEx(playerid, COLOR_RED,"*** GENERAL ADMIN *** /gotoco /n(un)mute /ad(un)mute /leaders /dm /wepreset /ocheck /owarn /ofine /okills /respawncar(s) /revive");
		SendClientMessageEx(playerid, COLOR_RED,"*** GENERAL ADMIN *** /reloadpvehicles /destroyair /destroytank /apark /bigears /aimpound /dmrmute /dmrlookup /dmtokens");
	}
	if (PlayerInfo[playerid][pAdmin] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /edit /asellhouse /asellbiz /setchamp /setarmorall /fixvehall /givenos /makeleader /setname /startlotto /savechars");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /veh /fixveh /sethp /setarmor /givegun /givemoney /setmoney /setstat /setfightstyle /switchfac /switchfam /facpay");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /fcreate /fdelete /adivorce /destroycar /destroycars /eventhelp /contracts /sprison /sjail /listfacpay");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /facban /faccsfban /unban /unbanip /deletehit /clearall /setinsurance /cmotd /givelicense /adestroyplant");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /createpvehicle /destroypvehicle /creategvehicle /vipparty /vto /vtoreset /forceskin /admingatepw /gotogate");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /hnext /dmpnext /g(status/near/next/edit) /(goto/goin)door /(goto/goin)house /(create/delete/goto)point");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /hedit /dd(edit/next/name/pass) /dmpedit /dmpnear /gotomapicon /gangwarn /gangunban /setcapping /banaccount");
		SendClientMessageEx(playerid, COLOR_DBLUE,"*** SENIOR ADMIN *** /dmstrikereset /dmrmute /removepvehicle /rcabuse /amdc /dtext /dtnext /dtextname");
	}
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW,"*** HEAD ADMIN *** /weatherall /makeslotholder /dedit /pedit /facunban /faccsfunban /giftall /removemoderator /makewatchdog");
		SendClientMessageEx(playerid, COLOR_YELLOW,"*** HEAD ADMIN *** /permaban /setcolor /payday /clearallreports /eventreset /amotd /vipmotd /givetoken /giftgvip");
		SendClientMessageEx(playerid, COLOR_YELLOW,"*** HEAD ADMIN *** /createdealership /destroydealership /createcdveh /destroycdveh /fedit /vmute /vsuspend /gifts /rcreset");
		SendClientMessageEx(playerid, COLOR_YELLOW,"*** HEAD ADMIN *** /rewardbox /bedit /bcreate /bdestroy");
	}
	if (PlayerInfo[playerid][pAdmin] >= 1338)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"*** LEAD MANAGEMENT *** /suspend /osuspend /ounsuspend /osetrmutes /rmute /motd /specreset /pausespec /random /vrandom");
		SendClientMessageEx(playerid, COLOR_GREEN,"*** LEAD MANAGEMENT *** /giftreset /vipgifts /buddyinvite /infract /unpban");
	}
	if (PlayerInfo[playerid][pAdmin] >= 13338)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"*** CO-EXECUTIVE *** /rewardplay");
	}
	if (PlayerInfo[playerid][pAdmin] >= 99999)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"*** EXECUTIVE ADMIN *** /togtp /togspec /resetstpay /setstpay /ounsuspend /kickres /resetgiftall");
	}
	if (PlayerInfo[playerid][pBanAppealer] == 1 || PlayerInfo[playerid][pShopTech] == 1 || PlayerInfo[playerid][pUndercover] == 1 || PlayerInfo[playerid][pFactionModerator] == 1 || PlayerInfo[playerid][pBanAppealer] == 1 || PlayerInfo[playerid][pShopTech] == 1 || PlayerInfo[playerid][pUndercover] == 1 || PlayerInfo[playerid][pGangModerator] == 1 || PlayerInfo[playerid][pPR] == 1)
	{
		if (PlayerInfo[playerid][pShopTech] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /orders /adjustoid /shop(car(del)/house/tokens/exp/plate/laser/vest/firework/viptokens/boombox/object) /gedit /(g/dd)near");
		if (PlayerInfo[playerid][pShopTech] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /g(status/next) /hnext /goto(gate/door) /goin(door/house) /dd(pass/edit/next/name) /setvip /newgvip /renewgvip");
		if (PlayerInfo[playerid][pBanAppealer] == 1) SendClientMessage(playerid, COLOR_GRAD5, "*** Special - Ban Appealer *** /unbanip /unban");
		if (PlayerInfo[playerid][pUndercover] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Spec Ops *** /setmystat /setmyname /setmyhp /setmyarmour /sprison /sjail /sdm /swarn");
		if (PlayerInfo[playerid][pFactionModerator] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Faction Mod. *** /listfacpay /facpay /switchfac /faccsfban /facban /fackick /leaders");
		if (PlayerInfo[playerid][pGangModerator] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Gang Mod. *** /switchfam /fedit /creategvehicle /destroygvehicle /gangwarn /gangunban /fcreate /fdelete /twmenu");
		if(PlayerInfo[playerid][pPR] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Public Relations *** /catokens /cmotd /makeadvisor /makehelper /takeadvisor");
	}
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_RED,"_______________________________________");
	}
	return 1;
}

CMD:ap(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2)
	{
		if (PlayerInfo[playerid][pAdminDuty] != 1)
		{
			ShowPlayerDialog(playerid, ADMINPANEL, DIALOG_STYLE_LIST, "Admin Control Panel","Clock into {00FF00}Administrator Duty{FFFFFF}\nView Administrator Commands\nView Administrator MDC", "Select", "Close");
		}
		else
		{
			ShowPlayerDialog(playerid, ADMINPANEL, DIALOG_STYLE_LIST, "Admin Control Panel","Clock out of {FF0000}Administrator Duty{FFFFFF}\nView Administrator Commands\nView Administrator MDC", "Select", "Close");
		}
	}
	return 1;
}

CMD:sthelp(playerid, params[])
{
	if (PlayerInfo[playerid][pShopTech] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /orders /adjustoid /shop(car(del)/house/tokens/exp/plate/laser/vest/firework/viptokens/boombox/object) /gedit /(g/dd)near");
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /orders /adjustoid /shop(car(del)/house/tokens/exp/plate/laser/vest/firework/viptokens/boombox/object) /gedit /(g/dd)near");
		SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Shop Tech *** /g(status/next) /hnext /goto(gate/door) /goin(door/house) /dd(pass/edit/next/name) /setvip /newgvip /renewgvip");
	}
    return 1;
}

CMD:chelp(playerid, params[]) {
	return cmd_ch(playerid, params);
}

CMD:ch(playerid, params[])
{
	if (PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessageEx(playerid, COLOR_GRAD1, "*1* HELPER *** (/newb)ie /hlkick /hlban");
	}
	if (PlayerInfo[playerid][pHelper] >= 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "*2* COMMUNITY ADVISOR *** (/c)advisor /nmute /admute /cduty /accepthelp /advisors /dmwatch /dmalert /findnewb /showrequests");
	}
	if (PlayerInfo[playerid][pHelper] >= 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "*3* SENIOR ADVISOR *** /requestevent /spec /makehelper /takeadvisor");
	}
	if (PlayerInfo[playerid][pHelper] >= 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "*4* CHIEF ADVISOR *** /nonewbie /cmotd");
	}
	if (PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	}
	return 1;
}

CMD:getlicense(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid,2.0,366.54, 159.09, 1008.38)) { return 1; }
	if (PlayerInfo[playerid][pWantedLevel] > 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "You have an outstanding arrest warrant - acquisition of a license is prohibited.");
		return 1;
	}
	ShowPlayerDialog(playerid, DIALOG_LICENSE_BUY, DIALOG_STYLE_LIST, "Select the type of license you wish to acquire.", "Driver's License ($5,000)\r\nBoating License ($5,000)\r\nPilot License ($25,000)\r\nTaxi License ($35,000)", "Purchase", "Cancel");
	return 1;
}




CMD:givelicense(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin]>=4)
	{
		new string[128], giveplayerid, type;
		if(sscanf(params, "ud", giveplayerid, type))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givelicense [player] [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
			return 1;
		}

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
			return 1;
		}

		switch(type)
		{
		case 1:
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a driver's license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a driver's license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a driver's license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a driver's license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 1;
				return 1;
			}
		case 2:
			{
				if(PlayerInfo[giveplayerid][pBoatLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a boating license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a boating license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a boating license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a boating license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pBoatLic] = 1;
				return 1;
			}
		case 3:
			{
				if(PlayerInfo[giveplayerid][pFlyLic] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a pilot license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a pilot license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a pilot license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a pilot license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 1;
				return 1;
			}
		case 4:
			{
				if(PlayerInfo[giveplayerid][pTaxiLicense] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player already has a taxi license.");
					return 1;
				}
				format(string, sizeof(string), "You have given a taxi license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given you a taxi license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Administrator %s has given a taxi license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pTaxiLicense] = 1;
				return 1;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /givelicense [player] [type]");
				SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
	return 1;
}

CMD:droplicense(playerid, params[])
{
	new string[128], type;
	if(sscanf(params, "d", type))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /droplicense [type]");
		SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
		return 1;
	}

	switch(type)
	{
		case 1:
		{
			if(PlayerInfo[playerid][pCarLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a driver's license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your driver's license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pCarLic] = 0;
			return 1;
		}
		case 2:
		{
			if(PlayerInfo[playerid][pBoatLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a boating license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your boating license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pBoatLic] = 0;
			return 1;
		}
		case 3:
		{
			if(PlayerInfo[playerid][pFlyLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a pilot license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your pilot license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pFlyLic] = 0;
			return 1;
		}
		case 4:
		{
			if(PlayerInfo[playerid][pTaxiLicense] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a taxi license to drop.");
				return 1;
			}
			format(string, sizeof(string), "You have dropped your taxi license.");
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerInfo[playerid][pTaxiLicense] = 0;
			return 1;
		}
		default:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Invalid license type! /droplicense [type]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Types: 1 = Driving, 2 = Boating, 3 = Flying, 4 = Taxi.");
		}
	}
	return 1;
}

CMD:families(playerid, params[])
{
	new string[128], familyid;

	if(sscanf(params, "d", familyid))
	{
		new number = 0;
		for(new i = 0; i < sizeof(FamilyInfo); i++)
		{
			number ++;
   			if(FamilyInfo[i][FamilyTurfTokens] < 12)
			{
				format(string, sizeof(string), "Family %d | Name: %s | Leader: %s | Members: %d | Claim Tokens: 0.",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers]);
			}
			else
			{
				format(string, sizeof(string), "Family %d | Name: %s | Leader: %s | Members: %d | Claim Tokens: %d.",number,FamilyInfo[i][FamilyName],FamilyInfo[i][FamilyLeader],FamilyInfo[i][FamilyMembers],FamilyInfo[i][FamilyTurfTokens]/12);
			}
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		return 1;
	}

	if(familyid < 1 || familyid > MAX_FAMILY)
	{
		format(string, sizeof(string), "Family slot must be between 1 and %i.", MAX_FAMILY);
		SendClientMessageEx(playerid, COLOR_GREY, string);
	 	return 1;
  	}
	familyid -= 1;
	if(FamilyInfo[familyid][FamilyTaken] != 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "That family slot is empty.");
		return 1;
	}
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pFMember] == familyid && (PlayerInfo[i][pTogReports] == 1 || PlayerInfo[i][pAdmin] < 2))
		{
			if(PlayerInfo[i][pRank] == 1)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (1).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			else if(PlayerInfo[i][pRank] == 2)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (2).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank2]);
			}
			else if(PlayerInfo[i][pRank] == 3)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (3).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank3]);
			}
			else if(PlayerInfo[i][pRank] == 4)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (4).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank4]);
			}
			else if(PlayerInfo[i][pRank] == 5)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (5).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank5]);
			}
			else if(PlayerInfo[i][pRank] == 6)
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s (6).",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank6]);
			}
			else
			{
				format(string, sizeof(string), "* %s: %s | Rank: %s.",FamilyInfo[familyid][FamilyName],GetPlayerNameEx(i),FamilyInfo[familyid][FamilyRank1]);
			}
			SendClientMessageEx(playerid, COLOR_GREY, string);
		}
	}
	return 1;
}

CMD:fbalance(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}

	new family, string[128];
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	return 1;
}

CMD:fdeposit(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fdeposit [amount]");
		format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > GetPlayerCash(playerid) || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have that much.");
		return 1;
	}
	GivePlayerCash(playerid,-amount);
	new curfunds = FamilyInfo[family][FamilyBank];
	FamilyInfo[family][FamilyBank]=amount+FamilyInfo[family][FamilyBank];
	SendClientMessageEx(playerid, COLOR_WHITE, "|___ FAMILY BANK STATEMENT ___|");
	format(string, sizeof(string), "  Old balance: $%d", curfunds);
	SendClientMessageEx(playerid, COLOR_GRAD2, string);
	format(string, sizeof(string), "  Deposit: $%d",amount);
	SendClientMessageEx(playerid, COLOR_GRAD4, string);
	SendClientMessageEx(playerid, COLOR_GRAD6, "|-----------------------------------------|");
	format(string, sizeof(string), "  New balance: $%d", FamilyInfo[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_WHITE, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) has deposited $%d into family %d's bank account.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pFMember]+1);
	Log("logs/family.log", string);
	return 1;
}

CMD:fwithdraw(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2308.7346, -11.0134, 26.7422))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the bank!");
		return 1;
	}
	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks five and six may use the family bank.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fwithdraw [amount]");
		format(string, sizeof(string), "Your family has $%d in their account.", FamilyInfo[family][FamilyBank]);
		SendClientMessageEx(playerid, COLOR_GRAD3, string);
		return 1;
	}

	if (amount > FamilyInfo[family][FamilyBank] || amount < 1)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Your family doesn't have that much.");
		return 1;
	}

	GivePlayerCash(playerid,amount);
	FamilyInfo[family][FamilyBank]=FamilyInfo[family][FamilyBank]-amount;
	format(string, sizeof(string), "  You have withdrawn $%d from your family account. Total: $%d", amount,FamilyInfo[family][FamilyBank]);
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	new ip[32];
	GetPlayerIp(playerid, ip, sizeof(ip));
	format(string,sizeof(string),"%s (IP: %s) has withdrawn $%d from family %d's bank account.",GetPlayerNameEx(playerid),ip,amount,PlayerInfo[playerid][pFMember]+1);
	Log("logs/family.log", string);
	return 1;
}

CMD:fstoregun(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
		return 1;
	}
	if(GetPVarInt( playerid, "EventToken") != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
		return 1;
	}
	if(PlayerInfo[playerid][pDonateRank] > 2)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not give away weapons if you're Gold+ VIP!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You can not store weapons from a vehicle!");
		return 1;
	}
	new Float:health;
	GetPlayerHealth(playerid, health);
	if (health < 80)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not store weapons if your health is below 80!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") != 0||PlayerCuffed[playerid]!=0||PlayerInfo[playerid][pHospital]!=0||GetPlayerState(playerid) == 7)
	{
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
	if(PlayerInfo[playerid][pMember] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not store weapons in a family safe when in a faction!");
		return 1;
	}

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}

	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}

	new string[128], weaponchoice[32], slot;
	if(sscanf(params, "s[32]d", weaponchoice, slot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fstoregun [weapon] [slot]");


	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before depositing another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if( FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Your family has a weapon stored in that slot already.");
		return 1;
	}

	new weapon;
	if(strcmp(weaponchoice, "sdpistol", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 23 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a silenced pistol into your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their silenced pistol in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "deagle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][2] == 24 && PlayerInfo[playerid][pAGuns][2] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a Desert Eagle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][2];
			format(string,sizeof(string), "* %s deposited their Desert Eagle in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "shotgun", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 25 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a shotgun in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Shotgun in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "spas12", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][3] == 27 && PlayerInfo[playerid][pAGuns][3] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a combat shotgun in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][3];
			format(string,sizeof(string), "* %s deposited their Combat Shotgun in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "mp5", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][4] == 29 && PlayerInfo[playerid][pAGuns][4] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an MP5 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][4];
			format(string,sizeof(string), "* %s deposited their MP5 in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "ak47", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 30 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an AK-47 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their AK-47 in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "m4", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][5] == 31 && PlayerInfo[playerid][pAGuns][5] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited an M4 in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][5];
			format(string,sizeof(string), "* %s deposited their M4 in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "rifle", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 33 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a rifle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their riflein a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else if(strcmp(weaponchoice, "sniper", true, strlen(weaponchoice)) == 0)
	{
		if( PlayerInfo[playerid][pGuns][6] == 34 && PlayerInfo[playerid][pAGuns][6] == 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have deposited a sniper rifle in your gun locker.");
			weapon = PlayerInfo[playerid][pGuns][6];
			format(string,sizeof(string), "* %s deposited their sniper rifle in a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
	}
	else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid weapon name!"); return 1; }
	if(weapon == 0) return SendClientMessageEx(playerid, COLOR_GREY, "You don't have that weapon.");
	if(FamilyInfo[family][FamilyGuns][slot-1] == 0)
	{
		FamilyInfo[family][FamilyGuns][slot-1] = weapon;
		RemovePlayerWeapon(playerid, weapon);
		SaveFamilies();
		return 1;
	}
	return 1;
}

CMD:fgetgun(playerid, params[])
{
	new string[128], slot;
	if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

	new family;
	if(PlayerInfo[playerid][pFMember] < 255)
	{
		family = PlayerInfo[playerid][pFMember];
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");
		return 1;
	}
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]))
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can not get weapons from a vehicle!");
		return 1;
	}

	if(sscanf(params, "d", slot))
	{
		new weaponname[50];
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		format(string, sizeof(string), "*** %s Safe ***", FamilyInfo[family][FamilyName]);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		for(new s = 0; s < 10; s++)
		{
			if( FamilyInfo[family][FamilyGuns][s] != 0 )
			{
				GetWeaponName(FamilyInfo[family][FamilyGuns][s], weaponname, sizeof(weaponname));
				format(string, sizeof(string), "Slot %d: %s", s+1, weaponname);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fgetgun [slot]");
		return 1;
	}

	if (GetPVarInt(playerid, "GiveWeaponTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before getting another weapon.", GetPVarInt(playerid, "GiveWeaponTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}

	if(slot < 1 || slot > 10)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid slot.");
		return 1;
	}

	if(PlayerInfo[playerid][pRank] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only rank 4+ can withdraw guns from the family safe.");
		return 1;
	}
	if(FamilyInfo[family][FamilyGuns][slot-1] != 0)
	{
		new weaponname[50];
		GetWeaponName(FamilyInfo[family][FamilyGuns][slot-1], weaponname, sizeof(weaponname));
		GivePlayerValidWeapon(playerid, FamilyInfo[family][FamilyGuns][slot-1], 60000);
		FamilyInfo[family][FamilyGuns][slot-1] = 0;
		if(strcmp(weaponname, "silenced pistol", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a silenced pistol from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a silenced pistol from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "desert eagle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a Desert Eagle from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a Desert Eagle from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a shotgun from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a shotgun from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "combat shotgun", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a combat shotgun from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a combat shotgun from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "mp5", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an MP5 from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn an MP5 from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "ak47", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an AK-47 from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn an AK-47 from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "m4", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn an M4 from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn an M4 from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a rifle from your family's gun locker.");
			format(string,sizeof(string), "* %s has withdrawn a rifle from a family safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
		}
		if(strcmp(weaponname, "sniper rifle", true, strlen(weaponname)) == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You have withdrawn a sniper rifle from your family's gun locker.");
			SetPVarInt(playerid, "GiveWeaponTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GIVEWEAPONTIMER);
			format(string,sizeof(string), "* %s has withdrawn a sniper rifle from a safe.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		SaveFamilies();
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a weapon stored in that slot.");
		return 1;
	}
}

CMD:safedeposit(playerid, params[]) // TransferStorage(playerid, storageid, fromplayerid, fromstorageid, itemid, amount, price, special)
{
	new family;

	if(PlayerInfo[playerid][pFMember] < 255) family = PlayerInfo[playerid][pFMember];
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");

	if(FamilyInfo[family][FamilyUSafe] < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2])) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");

	new string[128], itemid, storageid, amount;

    if(sscanf(params, "dd", itemid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [itemid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		return 1;
	}
	if(itemid < 1 || itemid > 4) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [itemid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		return 1;
	}
	/*if(sscanf(params, "ddd", itemid, storageid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [itemid] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}
	if(itemid < 1 || itemid > 4) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [itemid] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safedeposit [itemid] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}*/

	if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than 1.");

    if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks 5 and 6 can deposit items from the family safe.");
		return 1;
	}

	// Find the storageid of the storagedevice.
	/*if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}

	if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't deposit less than 1.");*/

	switch(itemid)
	{
		case 1: // Cash
		{
			if(storageid == 0) {
				if(PlayerInfo[playerid][pCash] >= amount) PlayerInfo[playerid][pCash] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}
			else {
				if(StorageInfo[playerid][storageid-1][sCash] >= amount) StorageInfo[playerid][storageid-1][sCash] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}

			FamilyInfo[family][FamilyCash] += amount;
			format(string, sizeof(string), "You have deposited $%d to your house's safe.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		case 2: // Pot
		{
			if(storageid == 0) {
				if(PlayerInfo[playerid][pPot] >= amount) PlayerInfo[playerid][pPot] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}
			else {
				if(StorageInfo[playerid][storageid-1][sPot] >= amount) StorageInfo[playerid][storageid-1][sPot] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}

			FamilyInfo[family][FamilyPot] += amount;
			format(string, sizeof(string), "You have deposited %d grams of pot to your house's safe.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		case 3: // Crack
		{
			if(storageid == 0) {
				if(PlayerInfo[playerid][pCrack] >= amount) PlayerInfo[playerid][pCrack] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}
			else {
				if(StorageInfo[playerid][storageid-1][sCrack] >= amount) StorageInfo[playerid][storageid-1][sCrack] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}

			FamilyInfo[family][FamilyCrack] += amount;
			format(string, sizeof(string), "You have deposited %d grams of crack to your house's safe.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		case 4: // Materials
		{
			if(storageid == 0) {
				if(PlayerInfo[playerid][pMats] >= amount) PlayerInfo[playerid][pMats] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}
			else {
				if(StorageInfo[playerid][storageid-1][sMats] >= amount) StorageInfo[playerid][storageid-1][sMats] -= amount;
				else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to deposit!");
			}

			FamilyInfo[family][FamilyMats] += amount;
			format(string, sizeof(string), "You have deposited %d materials to your house's safe.", amount);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
	}

	return 1;
}

CMD:safewithdraw(playerid, params[]) // TransferStorage(playerid, storageid, fromplayerid, fromstorageid, itemid, amount, price, special)
{
	new family;

	if(PlayerInfo[playerid][pFMember] < 255) family = PlayerInfo[playerid][pFMember];
	else return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a family.");

	if(FamilyInfo[family][FamilyUSafe] < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "Your family has not upgraded their safe.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2])) return SendClientMessageEx(playerid, COLOR_GRAD1, "You're not at your family safe.");

    if(PlayerInfo[playerid][pRank] < 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only ranks 5 and 6 can withdraw items from the family safe.");
		return 1;
	}

	new itemid, amount;
	if(sscanf(params, "dd", itemid, amount))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safewithdraw [itemid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		return 1;
	}

	if(itemid < 1 || itemid > 4) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /safewithdraw [itemid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "ItemIDs: (1) Cash - (2) Pot - (3) Crack - (4) Materials");
		return 1;
	}

	if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You can't withdraw less than 1.");

	switch(itemid)
	{
		case 1: // Cash
		{
			if(FamilyInfo[family][FamilyCash] >= amount)
			{
				SetPVarInt(playerid, "Special_FamilyID", family);
				TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
		}
		case 2: // Pot
		{
			if(FamilyInfo[family][FamilyPot] >= amount)
			{
				SetPVarInt(playerid, "Special_FamilyID", family);
				TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
		}
		case 3: // Crack
		{
			if(FamilyInfo[family][FamilyCrack] >= amount)
			{
				SetPVarInt(playerid, "Special_FamilyID", family);
				TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
		}
		case 4: // Materials
		{
			if(FamilyInfo[family][FamilyMats] >= amount)
			{
				SetPVarInt(playerid, "Special_FamilyID", family);
				TransferStorage(playerid, -1, -1, -1, itemid, amount, -1, 5);
			}
			else return SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough to withdraw!");
		}
	}


	return 1;
}

CMD:adjust(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new string[128];
	if(PlayerInfo[playerid][pRank] == 6)
	{
		new choice[32], opstring[100];
		if(sscanf(params, "s[32]S[100]", choice, opstring))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust [name]");
			SendClientMessageEx(playerid, COLOR_WHITE, "Available Names: Name, MOTD, Safe, Invite, Uninvite");
			return 1;
		}

		if(strcmp(choice,"name",true) == 0)
		{
			if(PlayerInfo[playerid][pRank] == 6)
			{
				if(!opstring[0])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust name [family name]");
					return 1;
				}
				if(strfindex(opstring, "|", true) != -1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");
					return 1;
				}
				if(strlen(opstring) >= 40 )
				{
					SendClientMessageEx( playerid, COLOR_GRAD1, "That family name is too long, please refrain from using more than 40 characters." );
					return 1;
				}
				strmid(FamilyInfo[family][FamilyName], opstring, 0, strlen(opstring), 100);
				SaveFamilies();
				SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's name.");
				format(string, sizeof(string), "%s adjusted family %d's name to %s", GetPlayerNameEx(playerid), family+1, opstring);
				Log("logs/family.log", string);
			}
		}
		else if(strcmp(choice,"motd",true) == 0)
		{
			if(!opstring[0])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust MOTD [family MOTD text]");
				return 1;
			}
			if(strfindex(opstring, "|", true) != -1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a family name.");
				return 1;
			}
			if(strlen(opstring) >= 60 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That MOTD is too long, please refrain from using more than 60 characters." );
				return 1;
			}
			strmid(FamilyInfo[family][FamilyMOTD], opstring, 0, strlen(opstring), 100);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's MOTD.");
			format(string, sizeof(string), "%s adjusted family %d's MOTD to %s", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/family.log", string);
		}
		else if(strcmp(choice,"safe",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Adjusting your Family Safe will reset all your safe stats.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "If you want to adjust your safe, type /adjust confirm.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Upgrading your family safe will cost $50,000.");
			return 1;
		}
		else if(strcmp(choice,"confirm",true) == 0)
		{
			if(GetPlayerCash(playerid) < 50000)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have $50,000 to upgrade your family safe.");
				return 1;
			}
			GivePlayerCash(playerid, -50000);
			GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0],FamilyInfo[family][FamilySafe][1],FamilyInfo[family][FamilySafe][2]);
			FamilyInfo[family][FamilyCash] = 0;
			FamilyInfo[family][FamilyMats] = 0;
			FamilyInfo[family][FamilyPot] = 0;
			FamilyInfo[family][FamilyCrack] = 0;
			if(FamilyInfo[family][FamilyUSafe]) DestroyPickupEx(FamilyInfo[family][FamilyPickup]);
			FamilyInfo[family][FamilyUSafe] = 1;
			FamilyInfo[family][FamilyPickup] = CreatePickupEx(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your family's Safe.");
			format(string, sizeof(string), "%s adjusted family %d's safe", GetPlayerNameEx(playerid), family+1);
			Log("logs/family.log", string);
		}
		else if(strcmp(choice,"invite",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust invite [player]");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if (PlayerInfo[giveplayerid][pFMember] == 255)
					{
						// No more of this shit, our system is not designed for this
						/*if(PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pMember] == 2 && PlayerInfo[giveplayerid][pDivision] == 2)
						{
							if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
							{
								SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be invited. They are banned from being in a gang.");
								return 1;
							}
							format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
						}*/
						if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pMember] == 0)
						{
							if(PlayerInfo[giveplayerid][pGangWarn] >= 3)
							{
								SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be invited. They are banned from being in a gang.");
								return 1;
							}
							format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
							format(string, sizeof(string), "%s invited %s to family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
							Log("logs/family.log", string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
					}
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"uninvite",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust uninvite [player]");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[giveplayerid][pFMember] != family)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player isn't in your family.");
						return 1;
					}
					if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
					{
						SendClientMessageEx(playerid, COLOR_GREY, "You can't uninvite higher ranks.");
						return 1;
					}
					format(string, sizeof(string), "* You've kicked %s out of your family.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Family leader %s has kicked your out of the family.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					PlayerInfo[giveplayerid][pFMember] = 255;
					PlayerInfo[giveplayerid][pRank] = 0;
					FamilyInfo[family][FamilyMembers] --;
					SaveFamilies();
					format(string, sizeof(string), "%s uninvited %s from family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
					Log("logs/family.log", string);
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"rank",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Error! Please use /adjustrank instead of /adjust rank.");
		}
		else if(strcmp(choice,"rankname",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Error! Please use /adjustrankname instead of /adjust rankname.");
		}
	}
	else if(PlayerInfo[playerid][pRank] == 5)
	{
		new choice[32], opstring[100];
		if(sscanf(params, "s[32]S[100]", choice, opstring))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust [name]");
			SendClientMessageEx(playerid, COLOR_GRAD2, "Available Names: MOTD, Safe, Invite, Uninvite, Rank");
			return 1;
		}

		if(strcmp(choice,"motd",true) == 0)
		{
			if(!opstring[0])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust MOTD [Family MOTD Text]");
				return 1;
			}
			if(strfindex(opstring, "|", true) != -1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2,  "Can't use the '|' character!");
				return 1;
			}
			if(strlen(opstring) >= 60 )
			{
				SendClientMessageEx( playerid, COLOR_GRAD1, "That MOTD is too long, please refrain from using more than 60 characters." );
				return 1;
			}
			strmid(FamilyInfo[family][FamilyMOTD], opstring, 0, strlen(opstring), 100);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your Family's MOTD.");
			format(string, sizeof(string), "%s adjusted family %d's MOTD to %s", GetPlayerNameEx(playerid), family+1, opstring);
			Log("logs/family.log", string);
		}
		else if(strcmp(choice,"safe",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Adjusting your Family Safe will reset all your Safe Stats.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "If you want to adjust your Safe type /adjust confirm.");
			SendClientMessageEx(playerid, COLOR_GRAD1, "Upgrading your family Safe will cost $50,000.");
			return 1;
		}
		else if(strcmp(choice,"confirm",true) == 0)
		{
			if(GetPlayerCash(playerid) < 50000)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "	You don't have $50,000 to upgrade your family safe.");
				return 1;
			}
			GivePlayerCash(playerid, -50000);
			GetPlayerPos(playerid, FamilyInfo[family][FamilySafe][0],FamilyInfo[family][FamilySafe][1],FamilyInfo[family][FamilySafe][2]);
			FamilyInfo[family][FamilyCash] = 0;
			FamilyInfo[family][FamilyMats] = 0;
			FamilyInfo[family][FamilyPot] = 0;
			FamilyInfo[family][FamilyCrack] = 0;
			if(FamilyInfo[family][FamilyUSafe]) DestroyPickupEx(FamilyInfo[family][FamilyPickup]);
			FamilyInfo[family][FamilyUSafe] = 1;
			FamilyInfo[family][FamilyPickup] = CreatePickupEx(1239, 23, FamilyInfo[family][FamilySafe][0], FamilyInfo[family][FamilySafe][1], FamilyInfo[family][FamilySafe][2]);
			SaveFamilies();
			SendClientMessageEx(playerid, COLOR_WHITE, "You've adjusted your Family's Safe.");
			format(string, sizeof(string), "%s adjusted family %d's safe", GetPlayerNameEx(playerid), family+1);
			Log("logs/family.log", string);
		}
		else if(strcmp(choice,"invite",true) == 0)
		{
			if(!strlen(opstring))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust invite [player]");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if (PlayerInfo[giveplayerid][pFMember] == 255)
					{
						if(PlayerInfo[giveplayerid][pLeader] == 2 || PlayerInfo[giveplayerid][pMember] == 2 && PlayerInfo[giveplayerid][pDivision] == 2)
						{
							format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
						}
						else if(PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pMember] == 0)
						{
							format(string, sizeof(string), "* You've invited %s to join '%s'.",GetPlayerNameEx(giveplayerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s has invited you to join '%s'. (type /accept family)",GetPlayerNameEx(playerid), FamilyInfo[family][FamilyName]);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							InviteFaction[giveplayerid] = 0;
							InviteOffer[giveplayerid] = playerid;
							InviteFamily[giveplayerid] = family;
							format(string, sizeof(string), "%s invited %s to family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
							Log("logs/family.log", string);
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That player is already in a family/faction.");
					}
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"uninvite",true) == 0)
		{
			if(!strlen(choice))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjust uninvite [player]");
				return 1;
			}
			new giveplayerid = ReturnUser(opstring);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[giveplayerid][pFMember] != family)
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   That player is not in your Family!");
						return 1;
					}
					if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   You can't uninvite higher ranks!");
						return 1;
					}
					format(string, sizeof(string), "* You've kicked %s out of your Family.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Family Leader %s has kicked your out of the Family.",GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					PlayerInfo[giveplayerid][pFMember] = 255;
					PlayerInfo[giveplayerid][pRank] = 0;
					FamilyInfo[family][FamilyMembers] --;
					SaveFamilies();
					format(string, sizeof(string), "%s uninvited %s from family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), family+1);
					Log("logs/family.log", string);
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"rank",true) == 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Error! Please use /adjustrank instead of /adjust rank.");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Invalid adjust name!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:adjustrank(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new string[128], rank, giveplayerid;
	if(sscanf(params, "du", rank, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjustrank [RankNr] [player]");


	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6) { SendClientMessageEx(playerid, COLOR_GREY, "Rank number must be from 1 to 6."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't in your family.");
					return 1;
				}
				if(PlayerInfo[giveplayerid][pRank] > PlayerInfo[playerid][pRank])
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You can't adjust higher ranks.");
					return 1;
				}
				format(string, sizeof(string), "* You've given %s rank %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Family leader %s has given you rank %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				new temprank = PlayerInfo[giveplayerid][pRank];
				PlayerInfo[giveplayerid][pRank] = rank;
				format(string, sizeof(string), "%s set %s rank from %d to %d in family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid),temprank, rank, family+1);
				Log("logs/family.log", string);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else if(PlayerInfo[playerid][pRank] == 5)
	{
		if(rank < 1 || rank > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   RankNr can't be below 1 or above 5!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(PlayerInfo[giveplayerid][pFMember] != family)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That player is not in your Family!");
					return 1;
				}
				format(string, sizeof(string), "* You've given %s Rank %d.",GetPlayerNameEx(giveplayerid),rank);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Family Leader %s has given you Rank %d.",GetPlayerNameEx(playerid),rank);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pRank] = rank;
				format(string, sizeof(string), "%s set %s rank to %d in family %d ", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, family+1);
				Log("logs/family.log", string);
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:adjustrankname(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] == 255)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't in a family.");
		return 1;
	}
	new family = PlayerInfo[playerid][pFMember];
	new string[128], rank, rankname[32];
	if(sscanf(params, "ds[32]", rank, rankname)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjustrankname [rank number 1-6] [rank name]");

	if(PlayerInfo[playerid][pRank] == 6)
	{
		if(rank < 1 || rank > 6)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Rank number must be from 1 to 6.");
			return 1;
		}
		if(strfindex(rankname, "|", true) != -1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,  "You can't use '|' in a rank name.");
			return 1;
		}
		if(strlen(rankname) >= 19 )
		{
			SendClientMessageEx( playerid, COLOR_GRAD1, "That rank name is too long, please refrain from using more than 19 characters." );
			return 1;
		}
		if(rank == 1)
		{
			strmid(FamilyInfo[family][FamilyRank1], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 1 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 2)
		{
			strmid(FamilyInfo[family][FamilyRank2], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 2 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 3)
		{
			strmid(FamilyInfo[family][FamilyRank3], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 3 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 4)
		{
			strmid(FamilyInfo[family][FamilyRank4], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 4 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 5)
		{
			strmid(FamilyInfo[family][FamilyRank5], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 5 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		if(rank == 6)
		{
			strmid(FamilyInfo[family][FamilyRank6], rankname, 0, strlen(rankname), 32);
			SaveFamilies();
			format(string, sizeof(string), "* You have changed Rank 6 to %s.",rankname);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}

		format(string, sizeof(string), "%s adjusted family %d's rank %d to %s", GetPlayerNameEx(playerid), family+1, rank, rankname);
		Log("logs/family.log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not high rank enough to use this command!");
		return 1;
	}
	return 1;
}

CMD:fcreate(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] == 1)
	{
		new string[128], family, giveplayerid;
		if(sscanf(params, "du", family, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fcreate [FamilyNr] [player]");
		if(family < 1 || family > MAX_FAMILY) {
			format(string, sizeof(string), "   FamilyNr can't be below 1 or above %i!", MAX_FAMILY);
		 	SendClientMessageEx(playerid, COLOR_GREY, string);
	 	    return 1;
	   }

		if(IsPlayerConnected(giveplayerid))
		{
			if(FamilyInfo[family-1][FamilyTaken] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That Family Slot is already taken!" );
				return 1;
			}

			format(string, sizeof(string), "* You've made %s the Leader of Family Slot %d.",GetPlayerNameEx(giveplayerid),family);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Admin %s has made you a Family Leader.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);

			new sendername[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s",sendername);
			strmid(FamilyInfo[family-1][FamilyLeader], string, 0, strlen(string), 24);
			FamilyInfo[family-1][FamilyMembers] ++;
			FamilyInfo[family-1][FamilyTaken] = 1;
			PlayerInfo[giveplayerid][pFMember] = family-1;
			PlayerInfo[giveplayerid][pRank] = 6;
			SaveFamilies();

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:fdelete(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3 || PlayerInfo[playerid][pGangModerator] == 1)
	{
		new family;
		if(sscanf(params, "d", family)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fdelete [familyid]");

		if(family < 1 || family > MAX_FAMILY) {
		    new string[64];
	 		format(string,sizeof(string), "   Family Slot can't be below 1 or above %i!", MAX_FAMILY);
			SendClientMessageEx(playerid, COLOR_GREY, string);
		 	return 1;
	 	}
		if(FamilyInfo[family-1][FamilyTaken] != 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That Family Slot isn't taken!");
			return 1;
		}
		ClearFamily(family-1);
		SaveFamilies();
	}
	return 1;
}

CMD:divorce(playerid, params[])
{
	if(PlayerInfo[playerid][pMarried] < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't Married!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /divorce [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new dstring[MAX_PLAYER_NAME];
			new wstring[MAX_PLAYER_NAME];
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			format(string, sizeof(string), "%s", giveplayer);
			strmid(wstring, string, 0, strlen(string), 24);
			format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
			strmid(dstring, string, 0, strlen(string), 24);
			if(strcmp(dstring ,wstring, true ) == 0 )
			{
				format(string, sizeof(string), "* You've sent Divorce Papers to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s just sent you their Divorce Papers (type /accept divorce) to accept.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				DivorceOffer[giveplayerid] = playerid;
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That player is not Married to you!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
}

CMD:adivorce(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] > 3)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adivorce [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			ClearMarriage(giveplayerid);
			format(string, sizeof(string), "* You've admin divorced %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You have been admin divorced by an admin.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			DivorceOffer[giveplayerid] = playerid;
			return 1;

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
		return 1;
	}
}

CMD:propose(playerid, params[])
{
	if(GetPlayerCash(playerid) < 100000)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   The Marriage & Reception costs $100000!");
		return 1;
	}
	if(PlayerInfo[playerid][pMarried] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are already Married!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /propose [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pMarried] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That player is already married!");
			return 1;
		}
		else if(MarryWitness[playerid] == giveplayerid) {
			return SendClientMessageEx(playerid, COLOR_GREY, "   You can't marry the witness!");
		}
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
			format(string, sizeof(string), "* You proposed to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s just proposed to you (type /accept marriage) to accept.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			ProposeOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:witness(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /witness [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Propose to yourself!"); return 1; }
			format(string, sizeof(string), "* You requested %s to be your Marriage Witness.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s just requested you to be their Marriage Witness (type /accept witness) to accept.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			MarryWitnessOffer[giveplayerid] = playerid;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:setrent(playerid, params[])
{
	new string[128], fee;
	if(sscanf(params, "d", fee)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setrent [fee]");

	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ])))
	{
		if(!(1 <= fee <= 10000))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Minimum rent is $1, maximum rent is $10,000.");
		}
		else
		{

			HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentFee] = fee;
			format(string, sizeof(string), "You have set your house's rent fee to $%i.", HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentFee]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentable]) format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentFee],HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel],PlayerInfo[playerid][pPhousekey]);
			else format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel],PlayerInfo[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pPhousekey]][hTextID], COLOR_GREEN, string);
		}
	}
	else if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ])))
	{

		if(!(1 <= fee <= 10000))
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Minimum rent is $1, maximum rent is $10,000.");
		}
		else {

			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentFee] = fee;
			format(string, sizeof(string), "You have set your house's rent fee to $%i.", HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentFee]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			if(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentable]) format(string, sizeof(string), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentFee],HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLevel],PlayerInfo[playerid][pPhousekey2]);
			else format(string, sizeof(string), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLevel],PlayerInfo[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hTextID], COLOR_GREEN, string);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}


CMD:dmreport(playerid, params[])
{
	if(PlayerInfo[playerid][pDMRMuted] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You are blocked from submitting DM reports.");
	if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You must be level 2 to use this command.");
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /dmreport [playerid]");
	if(IsPlayerConnected(giveplayerid))
	{
		if(playerid == giveplayerid) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command on yourself!");
		if(PlayerInfo[giveplayerid][pAdmin] >= 2 && PlayerInfo[giveplayerid][pTogReports] != 1) return SendClientMessage(playerid, COLOR_WHITE, "You can't use this command on admins!");
		if(gettime() - ShotPlayer[giveplayerid][playerid] < 300)
	    {
			SetPVarInt(playerid, "pDMReport", giveplayerid);
			ShowPlayerDialog(playerid, DMRCONFIRM, DIALOG_STYLE_MSGBOX, "DM Report", "You personally witnessed the reported person death matching within the last 60 seconds. Abuse of this command could result in a temporary ban.", "Confirm", "Cancel");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_WHITE, "You have not been shot by that person or have already reported them in the last 5 minutes.");
			SendClientMessage(playerid, COLOR_WHITE, "As a reminder, abuse of this system could lead to punishment up to a temporary ban.");
		}
	}
	return 1;
}

CMD:dmalert(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't submit reports as an administrator.");
		return 1;
	}
	if(!GetPVarType(playerid, "pWatchdogWatching")) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can only use this command when you are spectating someone!");
	if(PlayerInfo[playerid][pRMuted] != 0)
	{
  		ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report blocked","You are blocked from submitting any reports!\n\nTips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
		return 1;
	}
 	if(GetPVarType(playerid, "HasReport")) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time.");
	}
	JustReported[playerid]=25;
	new giveplayerid = GetPVarInt(playerid, "pWatchdogWatching");
	new string[128];
	format(string, sizeof(string), "{FF0000}(dmalert) %s (ID %d) is deathmatching.", GetPlayerNameEx(giveplayerid), giveplayerid);
	SendReportToQue(playerid, string, 2, 1);
	SendClientMessageEx(playerid, COLOR_YELLOW, "Your DM report message was sent to the Admins.");
	return 1;
}

//New Report System - In Testing.
/*CMD:reportd(playerid, params[])
{
    if(GetPVarType(playerid, "HasReport")) {
		SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
	}
 	else if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 1338) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't submit reports as an administrator.");
	}
	else if(PlayerInfo[playerid][pRMuted] != 0) {
	    ShowPlayerDialog(playerid, 7955, DIALOG_STYLE_MSGBOX,"Report blocked","You are blocked from submitting any reports!\n\nTips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
	}
	else {
	    ShowPlayerDialog(playerid, DIALOG_REPORTMENU, DIALOG_STYLE_LIST, "Report Menu [1/2]", "Deathmatch\nHacking\nRevenge Killing\nKilling on Sight\nChicken Running\nCar Ramming\nPower Gaming\nMeta Gaming\nGun Discharge Exploits (QS/CS)\nSpamming\nMoney Farming\nBan Evader\nGeneral Exploits\nReleasing Hitman Names\nRunning Man Exploiter\nLog to Avoid\nCar Surfing\nNonRP Behavior\nNext Page","Select", "Exit");
	}
	return 1;
}*/

CMD:report(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2 && PlayerInfo[playerid][pAdmin] < 1338)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You can't submit reports as an administrator.");
		return 1;
	}
	if ((noreports) && PlayerInfo[playerid][pDonateRank] < 4)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "The report system is being filtered, you are unable to submit one during this time. (Gold VIP+ can still Report)");
		return 1;
	}
	if(PlayerInfo[playerid][pRMuted] != 0)
	{
  		ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report blocked","You are blocked from submitting any reports!\n\nTips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
		return 1;
	}
	if(AcceptedReportTimer[playerid] > 0)
	{
		new string[128];
		format(string, sizeof(string), "An administrator has just accepted your report please wait %d seconds before sending another report.", AcceptedReportTimer[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, string);
		SendClientMessageEx(playerid, COLOR_GREY, "Reminder: use {FFFF00}/reply {BFC0C2}to talk with the administrator who accepted your report.");
		return 1;
	}
	if(CancelReportTimer[playerid] > 0)
	{
		new string[128];
		format(string, sizeof(string), "You have just canceled a report you must wait %d seconds before sending another report.", CancelReportTimer[playerid]);
		SendClientMessageEx(playerid, COLOR_GREY, string);
		return 1;
	}
    for(new i = 0; i < MAX_REPORTS; i++)
	{
	    if(Reports[i][ReportFrom] == playerid)
	    {
			new string[128];
			SendClientMessageEx(playerid, COLOR_GREY, "You must wait for your Report to be answered or to expire, before sending another one.");
			format(string, sizeof(string), "Your Report Expires in: {FFFF91}%d {BFC0C2}minutes.", Reports[i][TimeToExpire]);
			SendClientMessageEx(playerid, COLOR_GREY, string);
			return 1;
		}
	}
 /*	if(JustReported[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Wait 25 seconds before sending another report!");
		return 1;
	}*/

	ShowPlayerDialog(playerid, DIALOG_CREATEREPORT, DIALOG_STYLE_INPUT, "Report", "Please enter what you would like to report. Remember that you should report for what you want, not who.", "Report", "Cancel");
	//ShowPlayerDialog(playerid, DIALOG_REPORTMENU, DIALOG_STYLE_LIST, "Report Menu [1/2]", "Deathmatch\nHacking\nRevenge Killing\nKilling on Sight\nChicken Running\nCar Ramming\nPower Gaming\nMeta Gaming\nGun Discharge Exploits (QS/CS)\nSpamming\nMoney Farming\nBan Evader\nGeneral Exploits\nReleasing Hitman Names\nRunning Man Exploiter\nLog to Avoid\nCar Surfing\nNonRP Behavior\nNext Page","Select", "Exit");
	return 1;
}

CMD:cancelreport(playerid, params[])
{
    for(new i = 0; i < MAX_REPORTS; i++)
	{
	    if(Reports[i][ReportFrom] == playerid)
	    {
			new string[128];
		    format( string, sizeof( string ), "{AA3333}Report{FFFF00}: %s (ID %d) has just canceled RID: %d.", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i);
			ABroadCast( COLOR_YELLOW, string, 2 );
	        Reports[i][ReportFrom] = INVALID_PLAYER_ID;
			Reports[i][BeingUsed] = 0;
			Reports[i][TimeToExpire] = 0;
        	Reports[i][ReportPriority] = 0;
        	Reports[i][ReportLevel] = 0;
			CancelReportTimer[playerid] = 30;
			DeletePVar(playerid, "HasReport");
			return SendClientMessageEx(playerid, COLOR_WHITE, "You have successfully canceled your report." );
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have any pending reports.");
	return 1;
}

CMD:reports(playerid, params[])
{
	return cmd_reportsold(playerid, params);
}

CMD:reportsold(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128];
		SendClientMessageEx(playerid, COLOR_GREEN, "____________________ REPORTS _____________________");
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 5)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 4)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 3)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 2)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		for(new i = 999; i >= 0; i--)
		{
			if(Reports[i][BeingUsed] == 1 && Reports[i][ReportPriority] == 1)
			{
			    if(Reports[i][ReportLevel] == 2 || PlayerInfo[playerid][pAdmin] >= 2)
			    {
					format(string, sizeof(string), "%s (ID: %i) | RID: %i | Report: %s | Expires in: %d minutes | Priority: %i", GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]), Reports[i][TimeToExpire], Reports[i][ReportPriority]);
					SendClientMessageEx(playerid, COLOR_REPORT, string);
				}
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "___________________________________________________");
	}
	return 1;
}

CMD:sta(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /sta [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}

		if(Advisors < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "There are no Community Advisors On Duty at the moment, try again later!");
			return 1;
		}

		format(string, sizeof(string), "AdmCmd: %s has sent %s (ID: %i) report RID: %i) to the Community Advisors.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		if(PlayerInfo[playerid][pAdmin] == 1)
		{
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has reviewed your report and referred it to the Community Advisors.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An Advisor should be with you shortly.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Newer players are encouraged to use /requesthelp for any questions you may have as opposed to using /report which is to report rule violations and get admin help.");
			SetPVarInt( Reports[reportid][ReportFrom], "COMMUNITY_ADVISOR_REQUEST", 1 );
			format(string, sizeof(string), "An Admin has referred a report over to you. Player %s (ID: %d) stated: %s", GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][Report]);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, "Please type /accepthelp to teleport to the player.");
		}
		else
		{
			format(string, sizeof(string), "%s has reviewed your report and referred it to the Community Advisors.", GetPlayerNameEx(playerid));
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An Advisor should be with you shortly.");
			SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Newer players are encouraged to use /requesthelp for any questions you may have as opposed to using /report which is to report rule violations and get admin help.");
			SetPVarInt( Reports[reportid][ReportFrom], "COMMUNITY_ADVISOR_REQUEST", 1 );
			format(string, sizeof(string), "Admin %s has referred a report over to you. Player %s (ID: %d) stated: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], Reports[reportid][Report]);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, "Please type /accepthelp to teleport to the player.");
		}

		PlayerInfo[playerid][pAcceptReport]++;
		Reports[reportid][BeingUsed] = 0;
		DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][CheckingReport] = INVALID_PLAYER_ID;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:ar(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ar [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(GetPVarInt(Reports[reportid][ReportFrom], "RequestingNameChange") == 1) {
		    /*new newname[MAX_PLAYER_NAME];
			GetPVarString(Reports[reportid][ReportFrom], "NewNameRequest", newname, MAX_PLAYER_NAME);

			format(string, sizeof(string), "{00BFFF}Old Name: {FFFFFF}%s\n\n{00BFFF}New Name: {FFFFFF}%s\n\n{00BFFF}Price: {FFFFFF}$%d", GetPlayerNameEx(Reports[reportid][ReportFrom]), newname, GetPVarInt(Reports[reportid][ReportFrom], "NameChangeCost"));
			ShowPlayerDialog(playerid, DIALOG_REPORTNAME,DIALOG_STYLE_MSGBOX,"{00BFFF}Name Change Request",string,"Approve","Deny");

			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
			ABroadCast(COLOR_ORANGE, string, 2);
			PlayerInfo[playerid][pAcceptReport]++;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			strmid(Reports[reportid][Report], "None", 0, 4, 4);
			DeletePVar(Reports[reportid][ReportFrom], "HasReport");

			SetPVarInt(playerid, "NameChange",Reports[reportid][ReportFrom]);
		    return 1;*/

			SendClientMessage(playerid, COLOR_ORANGE, "NOTICE: This user is currently pending a name change.");
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i, RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]),Reports[reportid][ReportFrom],reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		AddReportToken(playerid); // Report Tokens
		format(string, sizeof(string), "%s has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pAcceptReport]++;
		Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 30000, 0, "d", reportid);
		Reports[reportid][CheckingReport] = playerid;
		Reports[reportid][BeingUsed] = 0;
		AcceptedReportTimer[Reports[reportid][ReportFrom]] = 30;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
		DeletePVar(Reports[reportid][ReportFrom], "HasReport");
	}
	return 1;
}

CMD:dr(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid, reason[64];
		if(sscanf(params, "ds[64]", reportid,reason)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /dr [reportid] [reason]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s, Reason: %s", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reason);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has marked your report invalid, Reason: %s", GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		format(string, sizeof(string), "Please do /reporttips for more information.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pTrashReport]++;
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:tr(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /tr [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has marked your report invalid. Please check /reporttips", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pTrashReport]++;
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:afs(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /afs [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s, reason: Asking for a staff position.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]));
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has marked your report invalid for: Asking for a staff position.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		PlayerInfo[playerid][pTrashReport]++;
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:dmr(playerid, params[])
{
    if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid, giveplayerid;
		if(sscanf(params, "du", reportid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /dmr [reportid] [DM'ers ID]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has forwarded the report from %s (RID: %d) to the DM Report system", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has acknowledged your report about death matching.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "In the future please use the /dmreport command for all reports regarding DM.");

		if(PlayerInfo[Reports[reportid][ReportFrom]][pAdmin] >= 2 || PlayerInfo[Reports[reportid][ReportFrom]][pSMod] == 1) format(string, sizeof(string), "INSERT INTO dm_watchdog (id,reporter,timestamp,superwatch) VALUES (%d,%d,%d,1)", GetPlayerSQLId(giveplayerid), GetPlayerSQLId(Reports[reportid][ReportFrom]), gettime());
		else format(string, sizeof(string), "INSERT INTO dm_watchdog (id,reporter,timestamp) VALUES (%d,%d,%d)", GetPlayerSQLId(giveplayerid), GetPlayerSQLId(Reports[reportid][ReportFrom]), gettime());
		mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, Reports[reportid][ReportFrom]);

        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
     	Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:nao(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /nao [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to not having admin of sufficient authority online.", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has reviewed your report, however there is not an Admin presently online with sufficient authority to handle your request.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:post(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /post [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to it needing to be handled on the forums", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has reviewed your report and determined this report should be handled on the forums (i.e. complaint or request.)", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:st(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 2)
	{
		new string[128], reportid;
		if(sscanf(params, "d", reportid)) return SendClientMessageEx(playerid, COLOR_WHITE,"USAGE: /st [reportid]");

		if(reportid < 0 || reportid > 999) { SendClientMessageEx(playerid, COLOR_GREY, "   Report ID not below 0 or above 999!"); return 1; }
		if(Reports[reportid][BeingUsed] == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			return 1;
		}
		if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			return 1;
		}
		format(string, sizeof(string), "AdmCmd: %s has cleared report from %s (RID: %d) due to it needing to be handled via /shoporder", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
		ABroadCast(COLOR_ORANGE, string, 2);
		format(string, sizeof(string), "%s has reviewed your report and determined it needs to be handled by a Shop Tech.", GetPlayerNameEx(playerid));
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
		SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "Please use /shoporder to get your order processed by a Shop Tech.");
        DeletePVar(Reports[reportid][ReportFrom], "HasReport");
		Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
		Reports[reportid][BeingUsed] = 0;
		Reports[reportid][TimeToExpire] = 0;
		strmid(Reports[reportid][Report], "None", 0, 4, 4);
	}
	return 1;
}

CMD:clothes(playerid, params[])
{
	if(PlayerInfo[playerid][pFMember] != 255)
	{
		if(IsAtClothShop(playerid))
		{
			new rand = random(sizeof(gInviteSpawns));
			SetPlayerPosEx(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
			SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
			SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
			TogglePlayerControllable(playerid, 0);
			ChosenSkin[playerid] = FamilyInfo[PlayerInfo[playerid][pFMember]][FamilySkins][0];
			SetPlayerSkin(playerid, ChosenSkin[playerid]);
			SelectFChar[playerid] = 255;
			SelectFCharID[playerid] = PlayerInfo[playerid][pFMember];
			SelectFCharPlace[playerid] = 1;
			new Float:x, Float:y, Float:z, Float: a;
			GetPlayerPos(playerid, x, y, z);
		    SetPVarFloat(playerid, "tmpPosx", x);
			SetPVarFloat(playerid, "tmpPosy", y);
			SetPVarFloat(playerid, "tmpPosz", z);
			GetPlayerFacingAngle(playerid, a);
			SetPVarFloat(playerid, "tmpPosa", a);
			SetPVarInt(playerid, "tmpPosi", GetPlayerInterior(playerid));
			PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "* Use 'next' to select the char you want to use.");
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "* If you've found the char you want to use, type 'done'.");
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a Clothing Shop!");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_GREY, "   You are not in a Force / Organisation / Family!");
	}
	return 1;
}

CMD:buyclothes(playerid, params[])
{
	if(IsAtClothShop(playerid))
	{
		ShowPlayerDialog( playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin Changes cost $2500.", "Buy", "Cancel" );
	}
	else
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "   You are not in a Clothing Shop!" );
	}
	return 1;
}

CMD:buytoys(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 4, 2787.095947, 2390.353027, 1240.531127))
	{
		if(PlayerInfo[playerid][pDonateRank] < 3)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "* You are not a Gold or Platinum VIP!");
		}
		else
		{
			ShowPlayerDialog( playerid, BUYTOYSGOLD, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the VIP toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.","Continue", "Cancel" );
		}
	}
	else if(IsAtClothShop(playerid))
	{
		ShowPlayerDialog( playerid, BUYTOYS, DIALOG_STYLE_MSGBOX, "Toy Store", "Welcome to the toy store! Here you can buy accessories to attach to your player.\n\nFirst, we will choose a slot to store the toy in.\n(Note: Non-VIP can only hold 4 toys, Bronze-Gold VIP can hold 5-10)","Continue", "Cancel" );
	}
	else
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "   You are not in a Clothing Shop!" );
	}
	return 1;
}

/*CMD:toyhelp(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** TOY HELP ***");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To buy a toy, go to any clothing store and type {AA3333}/buytoys");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To attach/dettach, edit, or delete a toy type {AA3333}/toys");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly attach all your toys, type {AA3333}/wat");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly detach all your toys, type {AA3333}/dat");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly attach a specfic toy slot, type {AA3333}/wt [toyslot]");
	SendClientMessageEx(playerid, COLOR_GRAD3,"To quickly detach a specfic toy slot, type {AA3333}/dt [toyslot]");
	return 1;
}*/

CMD:toys(playerid, params[])
{
	ShowPlayerDialog( playerid, TOYS, DIALOG_STYLE_LIST, "Toy Menu", "Attach/Dettach a Toy\nEdit a Toy\nDelete a Toy","Select", "Cancel" );
	return 1;
}

CMD:wt(playerid, params[])
{
	new toyslot;
	if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wt [toyslot]");

	if(toyslot < 1 || toyslot > 10) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /wt [toyslot]");

	if(PlayerToyInfo[playerid][toyslot-1][ptScaleX] == 0) {
		PlayerToyInfo[playerid][toyslot-1][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][toyslot-1][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][toyslot-1][ptScaleZ] = 1.0;
	}

	if(PlayerToyInfo[playerid][toyslot-1][ptModelID] != 0)
	{
		SetPlayerAttachedObject(playerid, toyslot-1,
			PlayerToyInfo[playerid][toyslot-1][ptModelID],
			PlayerToyInfo[playerid][toyslot-1][ptBone],
			PlayerToyInfo[playerid][toyslot-1][ptPosX],
			PlayerToyInfo[playerid][toyslot-1][ptPosY],
			PlayerToyInfo[playerid][toyslot-1][ptPosZ],
			PlayerToyInfo[playerid][toyslot-1][ptRotX],
			PlayerToyInfo[playerid][toyslot-1][ptRotY],
			PlayerToyInfo[playerid][toyslot-1][ptRotZ],
			PlayerToyInfo[playerid][toyslot-1][ptScaleX],
			PlayerToyInfo[playerid][toyslot-1][ptScaleY],
			PlayerToyInfo[playerid][toyslot-1][ptScaleZ]
		);
	}
	return 1;
}

CMD:dt(playerid, params[])
{
	new toyslot;
	if(sscanf(params, "d", toyslot)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dt [toyslot]");

	if(toyslot < 1 || toyslot > 10) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /dt [toyslot]");

	RemovePlayerAttachedObject(playerid, toyslot-1);

	return 1;
}

CMD:wat(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* Attached all toys.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		if(PlayerToyInfo[playerid][x][ptScaleX] == 0) {
			PlayerToyInfo[playerid][x][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][x][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][x][ptScaleZ] = 1.0;
		}
		if(PlayerToyInfo[playerid][x][ptModelID] != 0) SetPlayerAttachedObject(playerid, x, PlayerToyInfo[playerid][x][ptModelID], PlayerToyInfo[playerid][x][ptBone], PlayerToyInfo[playerid][x][ptPosX], PlayerToyInfo[playerid][x][ptPosY], PlayerToyInfo[playerid][x][ptPosZ], PlayerToyInfo[playerid][x][ptRotX], PlayerToyInfo[playerid][x][ptRotY], PlayerToyInfo[playerid][x][ptRotZ], PlayerToyInfo[playerid][x][ptScaleX], PlayerToyInfo[playerid][x][ptScaleY], PlayerToyInfo[playerid][x][ptScaleZ]);
	}
	return 1;
}

CMD:dat(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_WHITE, "* Deattached all toys.");
	for(new x;x<MAX_PLAYERTOYS;x++)
	{
		RemovePlayerAttachedObject(playerid, x);
    }
    return 1;
}

CMD:nrn(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pSMod] == 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nrn [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (PlayerInfo[giveplayerid][pAdmin] >= 2)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You can not use that command on admins!");
				return 1;
			}
			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has offered %s a free name change because their name is non-RP.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			if(PlayerInfo[playerid][pSMod] == 1) SendClientMessage(playerid, COLOR_YELLOW, string);
			ABroadCast( COLOR_YELLOW, string, 2);
			ShowPlayerDialog(giveplayerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:selldrink(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 19 || PlayerInfo[playerid][pJob2] == 19)
	{
		if(IsAtBar(playerid))
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /selldrink [player]");

			if(IsPlayerConnected(giveplayerid))
			{
				if(playerid == giveplayerid)
				{
					return SendClientMessageEx(playerid, COLOR_GREY, " You can't sell drinks to yourself.");
				}
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					DrinkOffer[giveplayerid] = playerid;
					format(string, sizeof(string), "* Bartender %s has offered has offered to pour you a drink. /accept drink to select a drink.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You have offered %s a drink.",GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				}
				else
				{
					return SendClientMessageEx(playerid, COLOR_GREY, " That player is not near you!");
				}
			}
			else
			{
				return SendClientMessageEx(playerid, COLOR_GREY, " That player is not connected!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You are not at a Bar!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not a bartender!");
		return 1;
	}
	return 1;
}

CMD:setchamp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /setchamp [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			new giveplayer[MAX_PLAYER_NAME];
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			new nstring[MAX_PLAYER_NAME];
			format(nstring, sizeof(nstring), "%s", giveplayer);
			strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
			Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
			Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
			Misc_Save();
			format(string, sizeof(string), "* You have made %s the new Boxing Champion.", giveplayer);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}

CMD:boxstats(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Boxer!");
		return 1;
	}

	new string[128], ttext[20];//Title
	new clevel = PlayerInfo[playerid][pBoxSkill];
	if(clevel >= 0 && clevel <= 50) { ttext = "Beginner"; }
	else if(clevel >= 51 && clevel <= 200) { ttext = "Amateur"; }
	else if(clevel >= 201 && clevel <= 400) { ttext = "Professional"; }
	new ntext[20];//NickName
	new level = PlayerInfo[playerid][pWins];
	if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	{
		ntext = "Undefeated";
	}
	else
	{
		if(level >= 0 && level <= 10) { ntext = "Newcomer"; }
		else if(level >= 11 && level <= 20) { ntext = "Touchy Fist"; }
		else if(level >= 21 && level <= 30) { ntext = "Nut Cracker"; }
		else if(level >= 31 && level <= 40) { ntext = "Tommygun"; }
		else if(level >= 41 && level <= 50) { ntext = "Skull Breaker"; }
		else if(level >= 51 && level <= 60) { ntext = "Light Speed"; }
		else if(level >= 61 && level <= 70) { ntext = "Unbroken Warrior"; }
		else if(level >= 71) { ntext = "Itallion Stallion"; }
	}
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Boxing Records __________________|");
	format(string, sizeof(string), "| Current Champion: %s, with [%d] Winnings and [%d] Losses.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Current Title: %s.", ttext);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Current NickName: %s.", ntext);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Total Wins: %d.", PlayerInfo[playerid][pWins]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "| Total Losses: %d.", PlayerInfo[playerid][pLoses]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________________|");
	return 1;
}

CMD:train(playerid, params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 757.3734,5.7227,1000.7012) || IsPlayerInRangeOfPoint(playerid, 3.0, 758.43,-78.0,1000.65))
	{
		if(PlayerInfo[playerid][pDonateRank] >= 1)
		{
			ShowPlayerDialog(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$40000\nElbow		$40000\nKneehead	$40000\nKung-Fu	$40000\nGrabKick	$40000\nNormal", "Learn", "Cancel");
		}
		else
		{
			ShowPlayerDialog(playerid, FIGHTMENU, DIALOG_STYLE_LIST, "Fighting Moves", "Boxing		$50000\nElbow		$50000\nKneehead	$50000\nKung-Fu	$50000\nGrabKick	$50000\nNormal", "Learn", "Cancel");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not at the learning area !(inside gym)");
	}
	return 1;
}

CMD:shakehand(playerid, params[])
{
	new string[128], giveplayerid, style;
	if(sscanf(params, "ud", giveplayerid, style)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shakehand [player] [style (1-8)]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't shake your own hand.");
			return 1;
		}
		if(style >= 1 && style < 9)
		{
			new Float: ppFloats[3];

			GetPlayerPos(giveplayerid, ppFloats[0], ppFloats[1], ppFloats[2]);

			if(!IsPlayerInRangeOfPoint(playerid, 5, ppFloats[0], ppFloats[1], ppFloats[2]))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You're too far away. You can't shake hands right now.");
				return 1;
			}

			SetPVarInt(playerid, "shrequest", giveplayerid);
			SetPVarInt(playerid, "shstyle", style);

			format(string, sizeof(string), "You have requested to shake %s's hand, please wait for them to respond.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);

			format(string, sizeof(string), "%s has requested to shake your hand, please use '/accept handshake' to approve the hand shake.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /shakehand [player] [style (1-8)]");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:fight(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 12 && PlayerInfo[playerid][pJob2] != 12)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Boxer!");
		return 1;
	}
	if(InRing > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   There is already a Fight going on, wait for it to Finish!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are already Fighting!");
		return 1;
	}

	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fight [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(IsPlayerInRangeOfPoint(playerid,20.0,765.9343,0.2761,1000.7173) || IsPlayerInRangeOfPoint(playerid,20.0,768.48, -73.66, 1000.57))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Box with yourself!"); return 1; }
				format(string, sizeof(string), "* You offered a Boxing Challenge to %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Boxer %s wants to Fight with you (type /accept boxing) to accept.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				BoxOffer[giveplayerid] = playerid;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2," You are not at the Gym!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:music(playerid, params[])
{
	if(PlayerInfo[playerid][pCDPlayer])
	{
		new choice[32];
		if(sscanf(params, "s[32]", choice))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /music [name]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: On, Off, Next, Station");
			return 1;
		}

		if(strcmp(choice,"on",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~Music Player On", 5000, 5);
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else if(strcmp(choice,"off",true) == 0)
		{
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~Music Player Off", 5000, 5);
			PlayerFixRadio(playerid);
			if(GetPVarType(playerid, "MusicIRadio"))
			{
			    StopAudioStreamForPlayerEx(playerid);
			    DeletePVar(playerid, "MusicIRadio");
			}
		}
		else if(strcmp(choice,"next",true) == 0)
		{
			if(Music[playerid] == 0) { Music[playerid] = 1; }
			else if(Music[playerid] == 1) { Music[playerid] = 2; }
			else if(Music[playerid] == 2) { Music[playerid] = 3; }
			else if(Music[playerid] == 3) { Music[playerid] = 4; }
			else if(Music[playerid] == 4) { Music[playerid] = 5; }
			else if(Music[playerid] == 5) { Music[playerid] = 6; }
			else if(Music[playerid] == 6) { Music[playerid] = 0; }
			new channel = Music[playerid];
			PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
		}
		else if(strcmp(choice,"station",true) == 0)
		{
			if(IsPlayerInAnyVehicle(playerid)) {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "You must be on foot to use this.");
			}
			ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Select a Station\nTurn Radio Off","Select", "Close");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Unknown music command!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You don't have a Music-Player!");
		return 1;
	}
	return 1;
}

CMD:service(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /service [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, EMS");
		return 1;
	}

	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
		return 1;
	}
	if(PlayerInfo[playerid][pServiceTime] > 0) return SendClientMessage(playerid, COLOR_WHITE, "You must wait 30 seconds before using this command again. " );

	if(strcmp(choice,"ems",true) == 0)
	{
		if(GetPVarInt(playerid, "Injured") == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You are not injured, you can't call for EMS now!");
			return 1;
		}
		new zone[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, zone, MAX_ZONE_NAME);
		SetPVarInt(playerid, "EMSAttempt", 1);
		SendClientMessageEx(playerid, COLOR_WHITE, "The EMS have been informed of your current location and are on their way.");
		format(string, sizeof(string), "Emergency Dispatch has reported (%d) %s to be wounded at %s, They require immediate emergency transport.",playerid, GetPlayerNameEx(playerid), zone);
		SendRadioMessage(4, TEAM_MED_COLOR, string);
		SendDivisionMessage(12, 3, TEAM_MED_COLOR, string);
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"taxi",true) == 0)
	{
		if(TaxiDrivers < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no taxi drivers on duty at the moment, try again later!");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You can't call for a taxi now!");
			return 1;
		}

		new
			szZoneName[MAX_ZONE_NAME];

		GetPlayer2DZone(playerid, szZoneName, MAX_ZONE_NAME);
		format(string, sizeof(string), "** %s(%d) is in need of a taxi driver at %s - use /ataxi to accept the call.", GetPlayerNameEx(playerid), playerid, szZoneName );
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a taxi driver, wait for a reply.");
		SetPVarInt(playerid, "TaxiCall", 1);
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"bus",true) == 0)
	{
		if(BusDrivers < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no bus drivers at the moment, try again later!");
			return 1;
		}
		if(TransportDuty[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You can't call for a bus now!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a bus driver - use /accept bus to accept the call.", GetPlayerNameEx(playerid));
		SendJobMessage(14, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a bus driver, wait for a reply.");
		BusCall = playerid;
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"medic",true) == 0)
	{
		if(Medics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no medics on duty at the moment, try again later!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a Medic - use /accept medic to accept the call.", GetPlayerNameEx(playerid));
		SendRadioMessage(4, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a medic, wait for a reply.");
		MedicCall = playerid;
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else if(strcmp(choice,"mechanic",true) == 0)
	{
		if(Mechanics < 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   There are no car mechanics on duty at the moment, try again later!");
			return 1;
		}
		format(string, sizeof(string), "** %s is in need of a car mechanic - use /accept mechanic to accept the call.", GetPlayerNameEx(playerid));
		SendJobMessage(7, TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have called for a car mechanic, wait for a reply.");
		MechanicCall = playerid;
		PlayerInfo[playerid][pServiceTime] = 30;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   Unknown service name!");
		return 1;
	}
}

CMD:requesthelp(playerid, params[])
{
	if(Advisors < 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   There are no Community Advisors On Duty at the moment, try again later!");
		return 1;
	}
	if(isnull(params))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /requesthelp [reason]");
		return 1;
	}

	new string[128];
	if(PlayerInfo[playerid][pLevel] < 25)
	{
		if(JustReported[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Wait 10 seconds after sending a next request!");
			return 1;
		}
		JustReported[playerid]=10;
		format(string, sizeof(string), "** %s(%i) is requesting help, reason: %s. (type /accepthelp %i)", GetPlayerNameEx(playerid), playerid, params, playerid);
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have requested help from a Community Advisor, wait for a reply.");
		SetPVarInt( playerid, "COMMUNITY_ADVISOR_REQUEST", 1 );
		SetPVarInt( playerid, "HelpTime", 5);
		SetPVarString( playerid, "HelpReason", params);
		SetTimerEx( "HelpTimer", 60000, 0, "d", playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "  You are not a newbie!");
	}
	return 1;
}

CMD:showrequests(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] >= 2)
	{
		new string[128], reason[64];
		SendClientMessageEx(playerid, COLOR_GREEN, "____________________ HELP REQUESTS _____________________");
		foreach(new i: Player)
		{
			if(GetPVarInt(i, "COMMUNITY_ADVISOR_REQUEST"))
			{
			    GetPVarString(i, "HelpReason", reason, 64);
				format(string, sizeof(string), "%s  | ID: %i | Reason: %s | Expires in: %i minutes.", GetPlayerNameEx(i), i, reason, GetPVarInt(i, "HelpTime"));
				SendClientMessageEx(playerid, COLOR_REPORT, string);
			}
		}
		SendClientMessageEx(playerid, COLOR_GREEN, "_________________________________________________________");
	}
	return 1;
}

CMD:findnewb(playerid, params[])
{
	if(PlayerInfo[playerid][pHelper] < 2) {
        SendClientMessageEx(playerid, COLOR_GREY, "You are not a community advisor.");
	}
	else if(GetPVarInt(playerid, "AdvisorDuty") == 0) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not on duty as a community advisor.");
	}
	else {
	    new Float: Pos[3], i, vw, Message[38 + MAX_PLAYER_NAME];
     	foreach(new x: Player) {
		 	if(PlayerInfo[x][pLevel] == 1 && GetPVarInt(x, "HelpedBefore") == 0) {
    			GetPlayerPos(x, Pos[0], Pos[1], Pos[2]);
    			vw = GetPlayerVirtualWorld(x);
				i = GetPlayerInterior(x);
				SetPlayerVirtualWorld(playerid, vw);
				SetPlayerInterior(playerid, i);
				SetPlayerPos(playerid, Pos[0], Pos[1]+2, Pos[2]);
				SetPVarInt(x, "HelpedBefore", 1);
				if(i > 0 || vw > 0) Player_StreamPrep(playerid, Pos[0], Pos[1], Pos[2], FREEZE_TIME);
				format(Message, sizeof(Message), "You have been teleported to newbie %s", GetPlayerNameEx(x));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
				break;
	    	}
		}
	}
	return 1;
}

CMD:accepthelp(playerid, params[])
{
    if(PlayerInfo[playerid][pHelper] < 2)
	{
        SendClientMessageEx(playerid, COLOR_GREY, "You are not a community advisor.");
		return 1;
	}
	else if(HelpingNewbie[playerid] != INVALID_PLAYER_ID)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You are already helping someone.");
		return 1;
	}
	else if(GetPVarInt(playerid, "AdvisorDuty") == 0)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not on duty as a community advisor.");
		return 1;
	}
	else {

		new
	        Player,
			string[128];

		if(sscanf(params, "u", Player)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /accepthelp [PlayerID]");
		}
		else if(Player == playerid) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You can't accept a help request from yourself.");
		}
		else if(!IsPlayerConnected(Player)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(GetPVarInt(Player, "COMMUNITY_ADVISOR_REQUEST") == 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "That player doesn't need help.");
		}
		else {

		    format(string, sizeof(string), "* %s has accepted the help request from %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(Player));
			SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
			format(string, sizeof(string), "* You have accepted %s's help request, once you are done type /finishhelp to get back to your position.",GetPlayerNameEx(Player));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Advisor %s has accepted your help request.",GetPlayerNameEx(playerid));
			SendClientMessageEx(Player, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pAcceptedHelp]++;
			new Float: x, Float: y, Float: z, Float: r, i, vw;
			vw = GetPlayerVirtualWorld(playerid);
			i = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, r);
			SetPVarFloat(playerid, "AdvisorLastx", x);
			SetPVarFloat(playerid, "AdvisorLasty", y);
			SetPVarFloat(playerid, "AdvisorLastz", z);
			SetPVarFloat(playerid, "AdvisorLastr", r);
			SetPVarInt(playerid, "AdvisorLastInt", i);
			SetPVarInt(playerid, "AdvisorLastVW", vw);
			GetPlayerPos(Player, x, y, z);
			vw = GetPlayerVirtualWorld(Player);
			i = GetPlayerInterior(Player);
			SetPlayerPos(playerid, x, y+2, z);
			SetPlayerVirtualWorld(playerid, vw);
			SetPlayerInterior(playerid, i);
			if(i > 0 || vw > 0) Player_StreamPrep(playerid, x, y, z, FREEZE_TIME);
			HelpingNewbie[playerid] = Player;
			AddCAReportToken(playerid); // Advisor Tokens
			DeletePVar(Player, "COMMUNITY_ADVISOR_REQUEST");
			DeletePVar(Player, "HelpTime");
			return 1;
		}
	}
	return 1;
}

CMD:finishhelp(playerid, params[])
{
	if(HelpingNewbie[playerid] < 999)
	{
		new string[128];
		format(string, sizeof(string), "* %s has finished the help request from %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(HelpingNewbie[playerid]));
		SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
		SetPlayerPos(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"));
		SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "AdvisorLastVW"));
		SetPlayerInterior(playerid, GetPVarInt(playerid, "AdvisorLastInt"));
		if(GetPVarInt(playerid, "AdvisorLastInt") > 0 || GetPVarInt(playerid, "AdvisorLastVW") > 0) Player_StreamPrep(playerid, GetPVarFloat(playerid, "AdvisorLastx"), GetPVarFloat(playerid, "AdvisorLasty"), GetPVarFloat(playerid, "AdvisorLastz"), FREEZE_TIME);
		HelpingNewbie[playerid] = INVALID_PLAYER_ID;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not helping anyone!");
		return 1;
	}
}

CMD:tie(playerid, params[])
{
	if(PlayerInfo[playerid][pRope] > 0)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /tie [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerTied[giveplayerid] > 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Player already Tied!");
				return 1;
			}
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't tie a cuffed/tazed player.");
			if(PlayerInfo[giveplayerid][pJailTime] > 0)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't tie a prisoned player." );
				return 1;
			}
			if( PlayerInfo[playerid][pRope] == 0 )
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "You don't have any rope left." );
			}
			else
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					new car = GetPlayerVehicleID(playerid);
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot tie up yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
					{
						if(PlayerCuffed[giveplayerid] == 1 || PlayerCuffed[giveplayerid] == 2) {
							SendClientMessageEx(playerid, COLOR_GRAD2, "You can't do this right now.");
							return 1;
						}

						format(string, sizeof(string), "* You were tied up by %s, till untie.", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You tied %s up, till untie.", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s ties %s up, so he wont go anywhere.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Tied", 2500, 3);
						SetPVarInt(giveplayerid, "IsFrozen", 1);
						TogglePlayerControllable(giveplayerid, 0);
						PlayerTied[giveplayerid] = 1;
						PlayerInfo[playerid][pRope]--;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   Player not in your Car, or you are not the Driver!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You don't have a Rope!");
	}
	return 1;
}

CMD:untie(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /untie [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Untie yourself!"); return 1; }
			if(PlayerCuffed[giveplayerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't untie a cuffed/tazed player.");
			if(PlayerTied[giveplayerid])
			{
				DeletePVar(giveplayerid, "IsFrozen");
				format(string, sizeof(string), "* You were untied by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You untied %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(giveplayerid, "~g~Untied", 2500, 3);
				TogglePlayerControllable(giveplayerid, 1);
				PlayerTied[giveplayerid] = 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That player isn't Tied up!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:usesprunk(playerid, params[])
{
	if(PlayerInfo[playerid][pSprunk] > 0)
	{
		if( PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(IsABike(GetPlayerVehicleID(playerid)))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this on a bike.");
				return 1;
			}
		}
		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		format(string, sizeof(string), "* %s opens a can of sprunk.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		SetPVarInt(playerid, "UsingSprunk", 1);
		PlayerInfo[playerid][pSprunk]--;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any sprunk, buy some from the 24/7!");
		return 1;
	}
}

CMD:usecigar(playerid, params[])
{
	if(PlayerInfo[playerid][pCigar] > 0)
	{
		if( PlayerCuffed[playerid] >= 1 || GetPVarInt(playerid, "Injured") == 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}
		new string[128];
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
		format(string, sizeof(string), "* %s takes out a cigar and lights it.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		PlayerInfo[playerid][pCigar]--;
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any cigars, buy some from the 24/7!");
		return 1;
	}
}

CMD:paintcar(playerid, params[]) {
	if(isnull(params)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /paintcar [0-6] (3 to remove a paintjob)");
	}
	else if(!IsPlayerInAnyVehicle(playerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not in a vehicle.");
	}
	else if(PlayerInfo[playerid][pSpraycan] == 0 && PlayerInfo[playerid][pAdminDuty] == 0) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "Your spraycan is empty.");
	}

	new
		iVeh = GetPlayerVehicleID(playerid),
		iPaintID = strval(params),
		iPlayerVeh;

	if(IsATierraCar(iVeh) || IsATierraARCar(iVeh) || IsATierraESCar(iVeh) || IsAnAmbulance(iVeh)|| IsAnDOCCar(iVeh) || IsACopCar(iVeh) || IsASaPaCar(iVeh) || IsASaPaAirCar(iVeh) || IsAFBICar(iVeh) || IsAnNGCar(iVeh) || IsAnSFPDCar(iVeh) || IsAnSASDCar(iVeh)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't paint faction vehicles.");
	}
	else if(!(0 <= iPaintID <= 6)) {
		return SendClientMessageEx(playerid, COLOR_GRAD2, "The specified paint job ID must be between 0 and 6.");
	}
	foreach(new i: Player) {
		iPlayerVeh = GetPlayerVehicle(i, iVeh);
		if(iPlayerVeh != -1) {
			if(i == playerid) PlayerVehicleInfo[playerid][iPlayerVeh][pvPaintJob] = iPaintID;
			else return SendClientMessageEx(playerid,COLOR_GREY,"You can't spray other people's vehicles.");
		}
	}
 	if(PlayerInfo[playerid][pAdminDuty] == 0)
 	{
		PlayerInfo[playerid][pSpraycan]--;
	}
 	if(PlayerInfo[playerid][pSpraycan] <= 0)
 	{
		PlayerInfo[playerid][pSpraycan] = 0;
	}
	ChangeVehiclePaintjob(iVeh, iPaintID);
	return SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully applied this paint job to your vehicle.");
}

CMD:sellfish(playerid, params[])
{
	if (!IsAt247(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in a 24-7!");
		return 1;
	}

	new string[128], fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sellfish [fish]");

	new price;
	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   Fish number cant be below 1 or above 5!"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(1)!"); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(2)!"); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(3)!"); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(4)!"); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "   You didnt even catch a Fish at that number(5)!"); return 1; }

	switch (fishid)
	{
	case 1:
		{
			if(Fishes[playerid][pWeight1] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid1]);
			price = price * Fishes[playerid][pWeight1];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 1);
		}
	case 2:
		{
			if(Fishes[playerid][pWeight2] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid2]);
			price = price * Fishes[playerid][pWeight2];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 2);
		}
	case 3:
		{
			if(Fishes[playerid][pWeight3] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid3]);
			price = price * Fishes[playerid][pWeight3];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 3);
		}
	case 4:
		{
			if(Fishes[playerid][pWeight4] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid4]);
			price = price * Fishes[playerid][pWeight4];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 4);
		}
	case 5:
		{
			if(Fishes[playerid][pWeight5] < 20)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "We are only interested in Fishes weighting 20 LBS or more.");
				return 1;
			}
			price = FishCost(playerid, Fishes[playerid][pFid5]);
			price = price * Fishes[playerid][pWeight5];
			GameTextForPlayer(playerid, "~g~Fish~n~~r~Sold", 3000, 1);
			format(string, sizeof(string), "* You have sold your %s that weights %d, for $%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, price);
			ClearFishID(playerid, 5);
		}
	}
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	return 1;
}

CMD:fare(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 10||PlayerInfo[playerid][pLeader] == 10|| PlayerInfo[playerid][pJob] == 17 || PlayerInfo[playerid][pJob2] == 17 || PlayerInfo[playerid][pTaxiLicense] == 1)
	{
		new string[128], fare;
		if(sscanf(params, "d", fare)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fare [price]");

		if(TransportDuty[playerid] > 0)
		{
			if(TransportDuty[playerid] == 1)
			{
				TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
				BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(string, sizeof(string), "* You are now off duty and earned $%d.", TransportMoney[playerid]);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, TransportMoney[playerid]);
			TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
			SetPlayerToTeamColor(playerid);
			return 1;
		}
		if(JobDuty[playerid] != 0) return SendClientMessageEx(playerid,COLOR_GREY,"You need to get off duty with your mechanic/lawyer job first.");
		new newcar = GetPlayerVehicleID(playerid);
		if(IsAnTaxi(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 500)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   Fare price must be between $1 and $500!");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "You are now on-duty as Taxi Driver, fare: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(PlayerInfo[playerid][pMember] == 10 ||PlayerInfo[playerid][pLeader] == 10)
				{
				    SetPlayerColor(playerid, COLOR_TAXI);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_TAXI_COLOR);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are not the driver!");
				return 1;
			}
		}
		else if(IsAnBus(newcar))
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 500)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   Fare price must be between $1 and $500!");
					return 1;
				}
				BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]=fare;
				format(string, sizeof(string), "You are now on-duty as Bus Driver, fare: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(PlayerInfo[playerid][pMember] == 10 ||PlayerInfo[playerid][pLeader] == 10)
				{
				    SetPlayerColor(playerid, COLOR_TAXI);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_TAXI_COLOR);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are not the driver!");
				return 1;
			}
		}
		else if (PlayerInfo[playerid][pTaxiLicense] == 1)
		{
			if(GetPlayerState(playerid) == 2)
			{
				if(fare < 1 || fare > 500)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   Fare price must be between $1 and $500!");
					return 1;
				}
				TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = fare;
				format(string, sizeof(string), "You are now on-duty as Taxi Driver, fare: $%d.", TransportValue[playerid]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(PlayerInfo[playerid][pMember] == 10 ||PlayerInfo[playerid][pLeader] == 10)
				{
				    SetPlayerColor(playerid, COLOR_TAXI);
				}
				else
				{
				    SetPlayerColor(playerid,TEAM_TAXI_COLOR);
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are not the driver!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not in a taxi or a bus!");
		}
	}
	else
	{
		SendClientMessageEx(playerid,COLOR_GREY,"You're not a licensed taxi/bus driver!");
		return 1;
	}
	return 1;
}

CMD:fish(playerid, params[])
{
	if(PlayerInfo[playerid][pFishes] > 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You've caught enough fish for now - take a break.");
		return 1;
	}
	if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't carry more than five fish at a time - sell or release them first.");
		return 1;
	}

	new string[128];
	new Veh = GetPlayerVehicleID(playerid);
	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	{
		new Caught;
		new rand;
		new fstring[MAX_PLAYER_NAME];
		new Level = PlayerInfo[playerid][pFishSkill];
		if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
		else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
		else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
		else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
		else if(Level >= 401) { Caught = random(180)-70; }
		rand = random(sizeof(FishNames));
		if(Caught <= 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "The line snapped.");
			return 1;
		}
		else if(rand == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a jacket and threw it away.");
			return 1;
		}
		else if(rand == 4)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a pair of trousers and threw it away.");
			return 1;
		}
		else if(rand == 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a can and threw it away.");
			return 1;
		}
		else if(rand == 10)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught a pair of shoes and threw it away.");
			return 1;
		}
		else if(rand == 13)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You caught some garbage and threw it away.");
			return 1;
		}
		else if(rand == 20)
		{
			new mrand = random(500);
			format(string, sizeof(string), "* You caught a bag filled with money ($%d).", mrand);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, mrand);
			return 1;
		}
		if(Fishes[playerid][pWeight1] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 fisher skill points instead of 1. (Double XP Active)");
				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
  			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight1] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish1], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 1;
			Fishes[playerid][pFid1] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight2] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 fisher skill points instead of 1. (Double XP Active)");
				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
  			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight2] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish2], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 2;
			Fishes[playerid][pFid2] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight3] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 fisher skill points instead of 1. (Double XP Active)");
				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
  			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight3] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish3], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 3;
			Fishes[playerid][pFid3] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight4] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 fisher skill points instead of 1. (Double XP Active)");
				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
  			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight4] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish4], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 4;
			Fishes[playerid][pFid4] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else if(Fishes[playerid][pWeight5] == 0)
		{
			PlayerInfo[playerid][pFishes] += 1;
			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 fisher skill points instead of 1. (Double XP Active)");
				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
  			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
			{
				format(string, sizeof(string), "You have gained 2 fisher skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
   				PlayerInfo[playerid][pFishSkill] += 2;
			}
			else
			{
  				PlayerInfo[playerid][pFishSkill] += 1;
			}

			format(fstring, sizeof(fstring), "%s", FishNames[rand]);
			strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
			Fishes[playerid][pWeight5] = Caught;
			format(string, sizeof(string), "* You have caught a %s, weighing %d pounds.", Fishes[playerid][pFish5], Caught);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			Fishes[playerid][pLastWeight] = Caught;
			Fishes[playerid][pLastFish] = 5;
			Fishes[playerid][pFid5] = rand;
			Fishes[playerid][pFishID] = rand;
			if(Caught > PlayerInfo[playerid][pBiggestFish])
			{
				format(string, sizeof(string), "* Your old record of %d pounds has been passed, your new record is %d pounds.", PlayerInfo[playerid][pBiggestFish], Caught);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pBiggestFish] = Caught;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You don't have any space for your fish.");
			return 1;
		}
		if(PlayerInfo[playerid][pFishSkill] == 50)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 2, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 100)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 3, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 200)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 4, you can now catch larger fish."); }
		else if(PlayerInfo[playerid][pFishSkill] == 400)
		{ SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Fishing Skill is now Level 5, you can now catch larger fish."); }
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at the Santa Maria Pier, or on a fishing boat.");
		return 1;
	}
	return 1;
}

CMD:fishes(playerid, params[])
{
	new string[128];

	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Fishes __________________|");
	format(string, sizeof(string), "** (1) Fish: %s.   Weight: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (2) Fish: %s.   Weight: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (3) Fish: %s.   Weight: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (4) Fish: %s.   Weight: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** (5) Fish: %s.   Weight: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
	return 1;
}

CMD:releasefish(playerid, params[])
{
	new fishid;
	if(sscanf(params, "d", fishid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /releasefish [fish 1-5]");

	if(fishid < 1 || fishid > 5) { SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /releasefish [fish 1-5]"); return 1; }
	else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessageEx(playerid, COLOR_GREY, "That slot is empty."); return 1; }
	ClearFishID(playerid, fishid);
	Fishes[playerid][pLastFish] = 0;
	Fishes[playerid][pFishID] = 0;
	SendClientMessageEx(playerid, COLOR_GREY, "You released a fish");
	return 1;
}

CMD:throwback(playerid, params[])
{
	if(Fishes[playerid][pLastFish] > 0)
	{
		ClearFishID(playerid, Fishes[playerid][pLastFish]);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have thrown back your last fish.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You haven't even caught a fish yet.");
		return 1;
	}
	return 1;
}

CMD:throwbackall(playerid, params[])
{
	if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	{
		ClearFishes(playerid);
		Fishes[playerid][pLastFish] = 0;
		Fishes[playerid][pFishID] = 0;
		SendClientMessageEx(playerid, COLOR_GREY, "You have thrown back all your fish");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You haven't even caught a fish yet.");
		return 1;
	}
	return 1;
}

CMD:licenses(playerid, params[])
{
	new string[128], text1[20], text2[20], text3[20], text4[20];
	if(PlayerInfo[playerid][pCarLic]) { text1 = "Acquired"; } else { text1 = "Not acquired"; }
	if(PlayerInfo[playerid][pFlyLic]) { text4 = "Acquired"; } else { text4 = "Not acquired"; }
	if(PlayerInfo[playerid][pBoatLic]) { text2 = "Acquired"; } else { text2 = "Not acquired"; }
	if(PlayerInfo[playerid][pTaxiLicense]) { text3 = "Acquired"; } else { text3 = "Not acquired"; }
	SendClientMessageEx(playerid, COLOR_WHITE, "Your licenses...");
	format(string, sizeof(string), "** Driver's license: %s.", text1);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Pilot license: %s.", text4);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Boating license: %s.", text2);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	format(string, sizeof(string), "** Taxi license: %s.", text3);
	SendClientMessageEx(playerid, COLOR_GREY, string);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /showlicenses [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if (ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't show licenses to yourself - use /licenses for that."); return 1; }
			new text1[20], text2[20], text3[20], text4[20];
			if(PlayerInfo[playerid][pCarLic]) { text1 = "Acquired"; } else { text1 = "Not acquired"; }
			if(PlayerInfo[playerid][pFlyLic]) { text4 = "Acquired"; } else { text4 = "Not acquired"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Acquired"; } else { text2 = "Not acquired"; }
			if(PlayerInfo[playerid][pTaxiLicense]) { text3 = "Acquired"; } else { text3 = "Not acquired"; }
			format(string, sizeof(string), "Listing %s's licenses...", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			format(string, sizeof(string), "** Driver's license: %s.", text1);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Pilot license: %s.", text4);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Boating license: %s.", text2);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Taxi license: %s.", text3);
			SendClientMessageEx(giveplayerid, COLOR_GREY, string);
			format(string, sizeof(string), "* %s has shown their licenses to you.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* You have shown your licenses to %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}



CMD:getmats(playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not an Arms Dealer or Craftsman!");
		return 1;
	}
	if(CheckPointCheck(playerid))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
		return 1;
	}

	new mypoint = -1;
	new mypointex = -1;
	new mydeliver = 0;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 1)
		{
			mypoint = i;
			mypointex = i;
			mydeliver = Points[i][MatPoint];
		}
	}
	if (IsPlayerInRangeOfPoint(playerid, 10.0, 2102.71, -103.97, 2.28)) // Matrun 3
	{
		new vehicle = GetPlayerVehicleID(playerid);
		if(IsABoat(vehicle))
		{
			if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must deliver your packages first.");

			if(PlayerInfo[playerid][pDonateRank] == 1)
			{
			    if(GetPlayerCash(playerid) < 1125)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1125!");
			        return 1;
			    }
				GivePlayerCash(playerid, -1125);
				SetPVarInt(playerid, "Packages", 23);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 23 Materials Packages for $1125.");
				SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
			{
   				if(GetPlayerCash(playerid) < 1500)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1500!");
			        return 1;
			    }
				GivePlayerCash(playerid, -1500);
				SetPVarInt(playerid, "Packages", 30);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 30 Materials Packages for $1500.");
				SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
			}
			else if(PlayerInfo[playerid][pDonateRank] >= 4)
			{
				if(GetPlayerCash(playerid) < 1875)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1875!");
			        return 1;
			    }
				GivePlayerCash(playerid, -1875);
				SetPVarInt(playerid, "Packages", 38);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 38 Materials Packages for $1875.");
				SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
			}
			else
			{
				if(GetPlayerCash(playerid) < 750)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $750!");
			        return 1;
			    }
				GivePlayerCash(playerid, -750);
				SetPVarInt(playerid, "Packages", 15);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 15 Materials Packages for $750.");
			}

			SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Follow the river to the West to get to the factory and deliver your Materials Packages.");
			SetPVarInt(playerid, "MatDeliver", 333);
			SetPVarInt(playerid, "tpMatRunTimer", 15);
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
			SetPlayerCheckpoint(playerid, -330.44, -467.54, 0.85, 5);
			return 1;
		}
 		else
		{
			SendClientMessageEx(playerid, COLOR_GREY," You are not in a boat!");
		}
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, -1816.528686, -179.502624, 9.398437)) // Matrun 4
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must deliver your packages first.");

		if(PlayerInfo[playerid][pDonateRank] == 1)
		{
			if(GetPlayerCash(playerid) < 900)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $900!");
       			return 1;
   			}
			GivePlayerCash(playerid, -900);
			SetPVarInt(playerid, "Packages", 18);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 18 Materials Packages for $900.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
		{
			if(GetPlayerCash(playerid) < 1200)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1200!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1200);
			SetPVarInt(playerid, "Packages", 24);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 24 Materials Packages for $1200.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] >= 4)
		{
			if(GetPlayerCash(playerid) < 1500)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1500!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 30 Materials Packages for $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 600)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $600!");
       			return 1;
   			}
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 12 Materials Packages for $600.");
			GivePlayerCash(playerid, -600);
			SetPVarInt(playerid, "Packages", 12);
		}

		SetPVarInt(playerid, "MatDeliver", 444);
		SetPVarInt(playerid, "tpMatRunTimer", 12);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, -1872.879760, 1416.312500, 7.180089, 5);
		return 1;
	}
	if (IsPlayerInRangeOfPoint(playerid, 4.0, -1522.7351, 2587.2612, 55.8359)) // Matrun TR
	{
		if(GetPVarInt(playerid, "Packages") >= 10) return SendClientMessageEx(playerid, COLOR_GRAD2, "You must deliver your packages first.");

		if(PlayerInfo[playerid][pDonateRank] == 1)
		{
			if(GetPlayerCash(playerid) < 900)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $900!");
       			return 1;
   			}
			GivePlayerCash(playerid, -900);
			SetPVarInt(playerid, "Packages", 18);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 18 Materials Packages for $900.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
		{
			if(GetPlayerCash(playerid) < 1200)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1200!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1200);
			SetPVarInt(playerid, "Packages", 24);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 24 Materials Packages for $1200.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
		}
		else if(PlayerInfo[playerid][pDonateRank] >= 4)
		{
			if(GetPlayerCash(playerid) < 1500)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1500!");
       			return 1;
   			}
			GivePlayerCash(playerid, -1500);
			SetPVarInt(playerid, "Packages", 30);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 30 Materials Packages for $1500.");
			SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
		}
		else
		{
			if(GetPlayerCash(playerid) < 600)
			{
   				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $600!");
       			return 1;
   			}
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 12 Materials Packages for $600.");
			GivePlayerCash(playerid, -600);
			SetPVarInt(playerid, "Packages", 12);
		}

		SetPVarInt(playerid, "MatDeliver", 555);
		SetPVarInt(playerid, "tpMatRunTimer", 12);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
		SetPlayerCheckpoint(playerid, -688.7897, 966.1434, 12.1627, 5);
		return 1;
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at a Materials Pickup!");
		return 1;
	}
	mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (Points[i][MatPoint] == mydeliver && Points[i][Type] == 2)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " No Materials Factory found for that Pickup!");
		return 1;
	}

	if(PlayerInfo[playerid][pDonateRank] == 1)
	{
		if(GetPlayerCash(playerid) < 750)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $750!");
			return 1;
		}
		GivePlayerCash(playerid, -750);
		SetPVarInt(playerid, "Packages", 15);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 15 Materials Packages for $750.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"Bronze VIP: You received 1.5x more packages, which will get you 1.5x more materials.");
	}
	else if(PlayerInfo[playerid][pDonateRank] == 2 || PlayerInfo[playerid][pDonateRank] == 3)
	{
		if(GetPlayerCash(playerid) < 1000)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
			return 1;
		}
		GivePlayerCash(playerid, -1000);
		SetPVarInt(playerid, "Packages", 20);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 20 Materials Packages for $1000.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"Silver & Gold VIP: You received 2x more packages, which will get you 2x more materials.");
	}
	else if(PlayerInfo[playerid][pDonateRank] >= 4)
	{
		if(GetPlayerCash(playerid) < 1250)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1250!");
			return 1;
		}
		GivePlayerCash(playerid, -1250);
		SetPVarInt(playerid, "Packages", 25);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 25 Materials Packages for $1250.");
		SendClientMessageEx(playerid, COLOR_YELLOW,"Platinum VIP: You received 2.5x more packages, which will get you 2.5x more materials.");
	}
	else
	{
		if(GetPlayerCash(playerid) < 500)
		{
			SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $500!");
			return 1;
		}
		GivePlayerCash(playerid, -500);
		SetPVarInt(playerid, "Packages", 10);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought 10 Materials Packages for $500.");
	}

	SetPVarInt(playerid, "MatDeliver", mydeliver);
	SetPVarInt(playerid, "tpMatRunTimer", 10);
	SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPMATRUNTIMER);
	for(new i = 0; i < sizeof(FamilyInfo); i++)
	{
		if(strcmp(Points[mypointex][Owner], FamilyInfo[i][FamilyName], true) == 0)
		{
			FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+125;
			//SendClientMessageEx(playerid, COLOR_WHITE, " Family owner recieved 50 percent of the cost.");
		}
	}
	SetPlayerCheckpoint(playerid, Points[mypoint][Pointx], Points[mypoint][Pointy], Points[mypoint][Pointz], 5);
	return 1;
}

CMD:getcrate(playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != 14 && PlayerInfo[playerid][pJob2] != 14)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Drug Smuggler!");
		return 1;
	}
	new mypoint = -1;

	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Drug Factory!");
		return 1;
	}
	if(PlayerInfo[playerid][pCrates])
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You can't hold any more Drug Crates!");
		return 1;
	}
	if(GetPlayerCash(playerid) > 1000)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED,"What type of drugs would you like to smuggle? (Type crack or pot)");
		SetPVarInt(playerid, "ChoosingDrugs", 1);
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
		return 1;
	}
}

/*CMD:getpizza(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21) {
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Pizza Boy!");
	}
    else if(!IsAPizzaCar(GetPlayerVehicleID(playerid))) {
	    SendClientMessageEx(playerid,COLOR_GREY,"   You need to be driving a pizzaboy found at the side of the Pizza Stack!");
	}
	else if(GetPlayerSkin(playerid) != 155) {
	    SendClientMessageEx(playerid,COLOR_GREY,"   You need to be in the Pizza Stack uniform!");
	}
	else if(GetPVarType(playerid, "Pizza")) {
		SendClientMessageEx(playerid, COLOR_GREY, "   You are already delivering pizzas!");
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2099.2761,-1804.8387,13.5547)) {
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not at the Pizza Stack pickup!");
	}
	else {

		new rand = random(MAX_HOUSES - 1);
		while(!(HouseInfo[rand][hOwned] && HouseInfo[rand][hExteriorZ] <= 100 && HouseInfo[rand][hExteriorX] > -2802.389648 && HouseInfo[rand][hExteriorX] < -1400.710327 && HouseInfo[rand][hExteriorY] < 2800 && HouseInfo[rand][hExteriorY] > -216.298019)) {
			if(++rand >= MAX_HOUSES) {
				rand = 0;
			}
		}

		new
			iDist = floatround(GetPlayerDistanceFromPoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ])),
			szMessage[86];

		SetPVarInt(playerid, "tpPizzaTimer", iDist / 80);
		SetPVarInt(playerid, "pizzaTotal", iDist / 10);
		SetPVarInt(playerid, "pizzaTimer", iDist / 10);
		SetPVarInt(playerid, "Pizza", rand);

		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPPIZZARUNTIMER);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_PIZZATIMER);

		format(szMessage, sizeof(szMessage), "You have picked up a pizza for %s. You have %d seconds to deliver it!", HouseInfo[rand][hOwner], iDist / 10);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);

		SetPlayerCheckpoint(playerid, HouseInfo[rand][hExteriorX], HouseInfo[rand][hExteriorY], HouseInfo[rand][hExteriorZ], 5);
	}
	return 1;
}*/

CMD:setrentable(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]))) {

		new
			szMessage[128];

		if(!HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentable]) {
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentFee],HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel],PlayerInfo[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pPhousekey]][hTextID], COLOR_GREEN, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "This house is now rentable.");
		}
		else {
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey]][hLevel],PlayerInfo[playerid][pPhousekey]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pPhousekey]][hTextID], COLOR_GREEN, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "This house is no longer rentable." );
		}
	}
	else if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]))) {
		new
			szMessage[128];

		if(!HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentable]) {
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentable] = 1;
			format(szMessage, sizeof(szMessage), "This house is owned by\n%s\nRent: $%d\nLevel: %d\nID: %d\nType /rentroom to rent a room",HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentFee],HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLevel],PlayerInfo[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hTextID], COLOR_GREEN, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "This house is now rentable.");
		}
		else {
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hRentable] = 0;
			format(szMessage, sizeof(szMessage), "This house is owned by\n %s\nLevel: %d\nID: %d",HouseInfo[PlayerInfo[playerid][pPhousekey2]][hOwner],HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLevel],PlayerInfo[playerid][pPhousekey2]);
			UpdateDynamic3DTextLabelText(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hTextID], COLOR_GREEN, szMessage);
			SendClientMessageEx(playerid, COLOR_WHITE, "This house is no longer rentable." );
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:evictall(playerid, params[])
{
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ])))
	{
		new giveplayerid, string[56];
		foreach(new i: Player) if(PlayerInfo[i][pRenting] == PlayerInfo[playerid][pPhousekey]) {
			format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
			SendClientMessageEx(i, COLOR_WHITE, string);
			PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
			++giveplayerid;
		}
		format(string, sizeof(string), "%i online players have been evicted from your house.", giveplayerid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ])))
	{
		new giveplayerid, string[56];
		foreach(new i: Player) if(PlayerInfo[i][pRenting] == PlayerInfo[playerid][pPhousekey2]) {
			format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
			SendClientMessageEx(i, COLOR_WHITE, string);
			PlayerInfo[i][pRenting] = INVALID_HOUSE_ID;
			++giveplayerid;
		}
		format(string, sizeof(string), "%i online players have been evicted from your house.", giveplayerid);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:houselock(playerid, params[]) {
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pPhousekey]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ]))) {

		new
			szMessage[30 + MAX_PLAYER_NAME];

		if(HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLock] == 1)
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLock] = 0;
			format(szMessage, sizeof(szMessage), "* %s has unlocked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			HouseInfo[PlayerInfo[playerid][pPhousekey2]][hLock] = 1;
			format(szMessage, sizeof(szMessage), "* %s has locked their house.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:evict(playerid, params[])
{
	new string[128], giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /evict [player]");
	if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey]][hInteriorZ])))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't evict yourself.");
			}
			else if(PlayerInfo[giveplayerid][pRenting] == PlayerInfo[playerid][pPhousekey])
			{
				format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "You have evicted %s from your house.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "That person isn't renting at your house.");
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
	else if(PlayerInfo[playerid][pPhousekey2] != INVALID_HOUSE_ID && (IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hExteriorZ]) || IsPlayerInRangeOfPoint(playerid, 2.0, HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorX], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorY], HouseInfo[PlayerInfo[playerid][pPhousekey2]][hInteriorZ])))
	{
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				return SendClientMessageEx(playerid, COLOR_WHITE, "You can't evict yourself.");
			}
			else if(PlayerInfo[giveplayerid][pRenting] == PlayerInfo[playerid][pPhousekey2])
			{
				format(string, sizeof(string), "%s has evicted you from their house.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);

				format(string, sizeof(string), "You have evicted %s from your house.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);

				PlayerInfo[giveplayerid][pRenting] = INVALID_HOUSE_ID;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "That person isn't renting at your house.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You either don't own a house, or are not at one of them.");
	return 1;
}

CMD:givehit(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		if(PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Only ranks 5 and above can assign contracts to people !");
			return 1;
		}

		new string[128], giveplayerid, targetid;
		if(sscanf(params, "uu", giveplayerid, targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givehit [player] [targetid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GoChase[giveplayerid] < 999)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That Hitman is already busy with a Contract!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Another hitman has already assigned this target!");
				return 1;
			}
			if(IsPlayerConnected(targetid))
			{
				if(PlayerInfo[targetid][pHeadValue] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That target doesn't have a contract on them!");
					return 1;
				}

				format(string, sizeof(string), "* You offered %s a contract to kill %s.", GetPlayerNameEx(giveplayerid), GetPlayerNameEx(targetid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Hitman %s has offered you a contract to kill %s (type /accept contract), to accept it.", GetPlayerNameEx(playerid), GetPlayerNameEx(targetid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				HitOffer[giveplayerid] = playerid;
				HitToGet[giveplayerid] = targetid;
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   The contracted person is offline, use /contracts!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That Hitman is not Online!");
			return 1;
		}
	}
	return 1;
}

CMD:givemehit(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		new string[128], targetid;
		if(sscanf(params, "u", targetid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givemehit [targetid]");

		if(IsPlayerConnected(targetid))
		{
			if(GoChase[playerid] < 999)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You are already busy with another contract!");
				return 1;
			}
			if(GotHit[targetid] == 1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Another hitman has already assigned this target!");
				return 1;
			}
			if(PlayerInfo[targetid][pHeadValue] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That target doesn't have a contract on them!");
				return 1;
			}
			format(string, sizeof(string), "* You have offered yourself a contract to kill %s. (type /accept contract)", GetPlayerNameEx(targetid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			HitOffer[playerid] = playerid;
			HitToGet[playerid] = targetid;
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   The contracted person is offline, use /contracts!");
			return 1;
		}
	}
	return 1;
}

CMD:speedo(playerid, params[]) {
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not driving a vehicle.");
	}
	else if(!PlayerInfo[playerid][pSpeedo]) {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have enabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 1;

		if(!FindTimePoints[playerid] && arr_Engine{GetPlayerVehicleID(playerid)} != 0) {

			new
				szSpeed[42];

			format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", player_get_speed(playerid));
			GameTextForPlayer(playerid, szSpeed, 1500, 3);
		}
	}
	else {
		SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled your speedometer.");
		PlayerInfo[playerid][pSpeedo] = 0;
		if(!FindTimePoints[playerid] && arr_Engine{GetPlayerVehicleID(playerid)} != 0) GameTextForPlayer(playerid, " ", 1500, 3);
	}
	return 1;
}

CMD:pc(playerid, params[])
{
	if(PlayerInfo[playerid][pSurveillance] > 0)
	{
		if(GetPVarInt(playerid, "cameraactive") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Wait for your other camera to expire.");
			return 1;
		}

		new string[128];
		PlayerInfo[playerid][pSurveillance]--;
		SendClientMessageEx(playerid, COLOR_GRAD1, "You placed your camera, go hide and use /sc. Batteries expire in 2 minutes.");
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPVarInt(playerid, "cameraactive", 1);
		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		Camera3D[playerid] = CreateDynamic3DTextLabel("** A small camera. **",0x008080FF,X,Y,Z,4.0,GetPlayerVirtualWorld(playerid), 0);
		SetPVarFloat(playerid, "cameraX", X);
		SetPVarFloat(playerid, "cameraY", Y);
		SetPVarFloat(playerid, "cameraZ", Z);
		SetPVarInt(playerid, "cameravw", GetPlayerVirtualWorld(playerid));
		SetPVarInt(playerid, "cameraint", GetPlayerInterior(playerid));
		SetPVarInt(playerid, "cameraexpire", SetTimerEx("cameraexpire", 120000, 0, "d", playerid));
		format(string, sizeof(string), "* %s places something on the ground.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a surveillance camera!");
	}
	return 1;
}

CMD:sc(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
		new string[128];
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid); //view cam off
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
			DeletePVar(playerid, "camerasc");
			KillTimer(GetPVarInt(playerid, "cameraexpire"));
		}
		else
		{
			format(string, sizeof(string), "* %s stares into a small screen.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "The camera will expire in a maximum of 2 minutes. (( %s ))", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "cameraX2", X);
			SetPVarFloat(playerid, "cameraY2", Y);
			SetPVarFloat(playerid, "cameraZ2", Z);
			SetPVarInt(playerid, "cameravw2", GetPlayerVirtualWorld(playerid));
			SetPVarInt(playerid, "cameraint2", GetPlayerInterior(playerid));

			TogglePlayerControllable(playerid,0);
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") - 30.0);
			SetPlayerCameraPos(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ") + 20.0); //viewcam on
			SetPlayerCameraLookAt(playerid, GetPVarFloat(playerid, "cameraX"), GetPVarFloat(playerid, "cameraY"), GetPVarFloat(playerid, "cameraZ"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint"));
			SetPVarInt(playerid, "camerasc", 1);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You have no active camera!");
	}
	return 1;
}

CMD:dc(playerid, params[])
{
	if(GetPVarInt(playerid, "cameraactive") == 1)
	{
		if(GetPVarInt(playerid, "camerasc") == 1)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
			SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
			TogglePlayerControllable(playerid,1);
		}

		DestroyDynamic3DTextLabel(Camera3D[playerid]);
		SendClientMessageEx(playerid, COLOR_GRAD1, "Camera Destroyed!");
		KillTimer(GetPVarInt(playerid, "cameraexpire"));
		DeletePVar(playerid, "cameraexpire");
		DeletePVar(playerid, "cameraactive");
		DeletePVar(playerid, "camerasc");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "There is nothing to destroy!");
	}
	return 1;
}

CMD:rccam(playerid, params[])
{
	if(PlayerInfo[playerid][pRccam] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "rccam") == 0)
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You must be on foot to place an RCCam!");
				return 1;
			}
			PlayerInfo[playerid][pRccam]--;
			SetPVarInt(playerid, "rccam", 1);
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(playerid, X, Y, Z);
			SetPVarFloat(playerid, "rcX", X);
			SetPVarFloat(playerid, "rcY", Y);
			SetPVarFloat(playerid, "rcZ", Z);
			if(GetPVarInt(playerid, "rcveh") != 0)
			{
				DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			}
			SetPVarInt(playerid, "rcveh", AddStaticVehicle(594, X, Y, Z, 0, 0, 0));
			PutPlayerInVehicle(playerid, GetPVarInt(playerid, "rcveh"), 0);
			SetPVarInt(playerid, "rccamtimer", SetTimerEx("rccam", 60000, 0, "d", playerid));
			format(string, sizeof(string), "* %s places something on the ground.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
		}
	}
	else
	{
		if(GetPVarInt(playerid, "rccam") == 1)
		{
			DestroyVehicle(GetPVarInt(playerid, "rcveh"));
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
			DeletePVar(playerid, "rccam");
			KillTimer(GetPVarInt(playerid, "rccamtimer"));
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have an RC Cam!");
	}
	return 1;
}

CMD:firstaid(playerid, params[])
{
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(GetPVarInt(playerid, "Injured") == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
		return 1;
	}
	if(PlayerInfo[playerid][pFirstaid] > 0)
	{
		if(GetPVarInt(playerid, "usingfirstaid") == 0)
		{
			new string[128];
			PlayerInfo[playerid][pFirstaid]--;
			SetPVarInt(playerid, "firstaid5", SetTimerEx("firstaid5", 5000, 1, "d", playerid));
			SetPVarInt(playerid, "firstaidexpire", SetTimerEx("firstaidexpire",10*60000, 0, "d", playerid));
			SetPVarInt(playerid, "usingfirstaid", 1);
			format(string, sizeof(string), "* %s uses a first aid kit.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You're already using first aid!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a first aid kit!");
	}
	return 1;
}

CMD:sweep(playerid, params[])
{
	if(PlayerInfo[playerid][pSweep] > 0)
	{
		if(PlayerInfo[playerid][pSweepLeft] > 0)
		{
			new string[128], giveplayerid;
			if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sweep [player]");

			if(!ProxDetectorS(4.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be close to the person.");
			PlayerInfo[playerid][pSweepLeft]--;
			format(string, sizeof(string), "* %s sweeps a large wand around %s's body...", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			if(PlayerInfo[giveplayerid][pBugged] > 0)
			{
				format(string, sizeof(string), "* A small spark is seen as the bug on %s shorts out.", GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "(bug) %s: *static*", GetPlayerNameEx(giveplayerid));
				SendBugMessage(PlayerInfo[giveplayerid][pBugged], COLOR_LIGHTGREEN, string);

				PlayerInfo[giveplayerid][pBugged] = 0;
			}
			else
			{
				ProxDetector(30.0, playerid, "Nothing happens.", COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Your Bug Sweeper has ran out of batteries!");
			PlayerInfo[playerid][pSweep]--;
			PlayerInfo[playerid][pSweepLeft] = 3;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a bug sweep!");
	}
	return 1;
}

CMD:gps(playerid, params[])
{
	if(PlayerInfo[playerid][pGPS] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "gpsonoff") == 0)
		{
			format(string, sizeof(string), "* %s turns on their GPS.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPVarInt(playerid, "gpsonoff", 1);
			textdrawscount++;
			GPS[playerid] = TextDrawCreate(95.000000, 319.000000, "Loading...");
			TextDrawAlignment(GPS[playerid], 2);
			TextDrawBackgroundColor(GPS[playerid], 255);
			TextDrawFont(GPS[playerid], 2);
			TextDrawLetterSize(GPS[playerid], 0.250000, 1.800000);
			TextDrawColor(GPS[playerid], -1);
			TextDrawSetOutline(GPS[playerid], 1);
			TextDrawSetProportional(GPS[playerid], 1);
			TextDrawShowForPlayer(playerid, GPS[playerid]);
		}
		else
		{
			format(string, sizeof(string), "* %s turns off their GPS.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "gpsonoff");
			TextDrawDestroy(GPS[playerid]);
			textdrawscount--;
		}
	}

	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a GPS!");
	}
	return 1;
}

CMD:ww(playerid, params[])
{
	return cmd_wristwatch(playerid, params);
}

CMD:wristwatch(playerid, params[])
{
	if(PlayerInfo[playerid][pWristwatch] > 0)
	{
		new string[128];
		if(GetPVarInt(playerid, "wristwatchonoff") == 0)
		{
			SetPVarInt(playerid, "wristwatchonoff", 1);
			TextDrawShowForPlayer(playerid, WristWatch);
			format(string, sizeof(string), "* %s turns on their wristwatch.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		else
		{
			KillTimer(GetPVarInt(playerid, "wristwatchtimer"));
			TextDrawHideForPlayer(playerid, WristWatch);
			DeletePVar(playerid, "wristwatchonoff");
			format(string, sizeof(string), "* %s turns off their wristwatch.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a wristwatch!");
	}
	return 1;
}

CMD:receiver(playerid, params[])
{
	if(PlayerInfo[playerid][pReceiver] > 0)
	{
		if(!GetPVarType(playerid, "pReceiverOn"))
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "You've turned on your receiver.");
			SetPVarInt(playerid, "pReceiverOn", 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "You've turned off your receiver.");
			DeletePVar(playerid, "pReceiverOn");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a receiver.");
	}
	return 1;
}

CMD:smslog(playerid, params[])
{
	if(PlayerInfo[playerid][pSmslog] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_YELLOW, "<< Last 10 SMS Received >>");
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog0]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog1]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog2]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog3]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog4]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog5]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog6]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog7]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog8]);
		SendClientMessageEx(playerid, COLOR_YELLOW, PlayerInfo[playerid][pSmslog9]);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "    You don't have a SMS log!");
	}
	return 1;
}

CMD:craft(playerid, params[])
{
	if (PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You are not a Craftsman!");
		return 1;
	}
	if (PlayerInfo[playerid][pJailTime] > 0)
	{
		SendClientMessageEx(playerid,COLOR_GREY,"   You can not make things while in jail or prison!");
		return 1;
	}
	new string[128];
	if (GetPVarInt(playerid, "ArmsTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before crafting again.", GetPVarInt(playerid, "ArmsTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(PlayerInfo[playerid][pHospital] == 1 || PlayerInfo[playerid][pHospital] == 2 || PlayerInfo[playerid][pHospital] == 3 || PlayerInfo[playerid][pHospital] == 4 || PlayerInfo[playerid][pHospital] == 5)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't craft whilst in Hospital.");
		return 1;
	}

	new giveplayerid, choice[32], weapon, price;
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_YELLOW, "<< Available crafts >>");
		SendClientMessageEx(playerid, COLOR_GRAD1, "screwdriver(1000)	 smslog(2000)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "wristwatch(500)	 surveillance(8000)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "tire(250)	         lock(500)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "firstaid(1000)	 camera(250)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "rccam(8000)	     receiver(5000)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "gps(1000)          bugsweep(10000)");
		//SendClientMessageEx(playerid, COLOR_GRAD1, "parachute(50)          bag(6000)");
		SendClientMessageEx(playerid, COLOR_GRAD1, "parachute(50)");
		SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /craft [player] [craftname]");
		return 1;
	}
	if (IsPlayerConnected(giveplayerid))
	{
		if(isnull(choice))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessageEx(playerid, COLOR_YELLOW, "<< Available crafts >>");
			SendClientMessageEx(playerid, COLOR_GRAD1, "screwdriver(1000)	 smslog(2000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "wristwatch(500)	 surveillance(8000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "tire(250)	         lock(500)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "firstaid(1000)	 camera(250)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "rccam(8000)	     receiver(5000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "gps(1000)          bugsweep(10000)");
			SendClientMessageEx(playerid, COLOR_GRAD1, "parachute(50)");
			SendClientMessageEx(playerid, COLOR_GREEN, "________________________________________________");
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /craft [player] [craftname]");
			return 1;
		}
		/*if(strcmp(choice,"bag",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 6000)
			{
				price = 6000;
				weapon = 14;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}*/
		if(strcmp(choice,"screwdriver",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 1;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"smslog",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 2000)
			{
				price = 2000;
				weapon = 2;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"wristwatch",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 3;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"surveillance",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 8000)
			{
				price = 8000;
				weapon = 4;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"tire",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 5;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"lock",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 500)
			{
				price = 500;
				weapon = 6;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"firstaid",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 7;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"camera",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 250)
			{
				price = 250;
				weapon = 8;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"rccam",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 8000)
			{
				price = 8000;
				weapon = 9;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"receiver",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 5000)
			{
				price = 5000;
				weapon = 10;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}
		else if(strcmp(choice,"gps",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 1000)
			{
				price = 1000;
				weapon = 11;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"bugsweep",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 10000)
			{
				price = 10000;
				weapon = 12;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else if(strcmp(choice,"parachute",true) == 0)
		{
			if(PlayerInfo[playerid][pMats] >= 50)
			{
				price = 50;
				weapon = 13;
			}
			else
			{
				SendClientMessageEx(playerid,COLOR_GREY,"   Not enough Materials for that!");
				return 1;
			}
		}

		else { SendClientMessageEx(playerid,COLOR_GREY,"   Invalid Craft name!"); return 1; }
		if (ProxDetectorS(5.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				format(string, sizeof(string), "   You have given yourself a %s.", choice);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				switch( PlayerInfo[playerid][pSex] )
				{
				case 1: format(string, sizeof(string), "* %s created something from Materials, and hands it to himself.", GetPlayerNameEx(playerid));
				case 2: format(string, sizeof(string), "* %s created something from Materials, and hands it to herself.", GetPlayerNameEx(playerid));
				}
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				PlayerInfo[playerid][pMats] -= price;

				switch(weapon)
				{
				case 1:
					{
						PlayerInfo[playerid][pScrewdriver]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/sellgun");
					}
				case 2:
					{
						PlayerInfo[playerid][pSmslog]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/smslog");
					}
				case 3:
					{
						PlayerInfo[playerid][pWristwatch]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/wristwatch");
					}
				case 4:
					{
						PlayerInfo[playerid][pSurveillance]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/(p)lace(c)amera /(s)ee(c)amera /(d)estroy(c)amera");
					}
				case 5:
					{
						PlayerInfo[playerid][pTire]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/repair");
					}
				case 6:
					{
						PlayerInfo[playerid][pLock]=1;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/lock");
					}
				case 7:
					{
						PlayerInfo[playerid][pFirstaid]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/firstaid");
					}
				case 8:
					{
						GivePlayerValidWeapon(playerid, 43, 50);
					}
				case 9:
					{
						PlayerInfo[playerid][pRccam]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/rccam");
					}
				case 10:
					{
						PlayerInfo[playerid][pReceiver]++;
						SetPVarInt(playerid, "pReceiverMLeft", 4);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "You will receive the next four department radio messages.");
					}
				case 11:
					{
						PlayerInfo[playerid][pGPS]++;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/gps");
					}
				case 12:
					{
						PlayerInfo[playerid][pSweep]++;
						PlayerInfo[playerid][pSweepLeft] = 3;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/sweep");
					}
				case 13:
					{
						GivePlayerValidWeapon(playerid, 46, 99999);
					}
				case 14:
					{
						StorageInfo[playerid][0][sStorage] = 1;
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "/storagehelp");
					}
				}
				return 1;
			}
			format(string, sizeof(string), "* You offered %s to buy a %s.", GetPlayerNameEx(giveplayerid), choice);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Craftsman %s wants to sell you a %s, (type /accept craft) to buy.", GetPlayerNameEx(playerid), choice);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			CraftOffer[giveplayerid] = playerid;
			CraftId[giveplayerid] = weapon;
			CraftMats[giveplayerid] = price;
			format(CraftName[giveplayerid], 50, "%s", choice);
			if(PlayerInfo[playerid][pAdmin] < 3)
			{
				SetPVarInt(playerid, "ArmsTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_ARMSTIMER);
			}
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		return 1;
	}
}

CMD:getpot(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getpot [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{ tel = 100; if(amount < 1 || amount > 10) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 10 at your Skill Level!"); return 1; } }
	else if(level >= 51 && level <= 100)
	{ tel = 100; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 20 at your Skill Level!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 100; if(amount < 1 || amount > 30) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 30 at your Skill Level!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 100; if(amount < 1 || amount > 40) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 40 at your Skill Level!"); return 1; } }
	else if(level >= 401)
	{ tel = 100; if(amount < 1 || amount > 50) { SendClientMessageEx(playerid, COLOR_GREY, "   You cant go above 50 at your Skill Level!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the Drug House!");
		return 1;
	}
	if ( PlayerInfo[playerid][pPot] >= 25)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You have reached your pot limit of 25 pot.");
		return 1;
	}
	if (PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This Drug House doesn't have that much pot!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* You bought %d grams for $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pPot] += amount;
			if(PlayerInfo[playerid][pDonateRank] < 1)
			{
				Points[mypoint][Stock] -= amount;
				format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[mypoint][Stock]);
				UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			}
			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't afford the drugs!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a drug dealer.");
		return 1;
	}
	return 1;
}

CMD:getcrack(playerid, params[])
{
	new string[128], amount;
	if(sscanf(params, "d", amount)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getcrack [amount]");

	new tel;
	new price;
	new level = PlayerInfo[playerid][pDrugsSkill];
	if(level >= 0 && level <= 50)
	{
		tel = 500;
		if(amount < 1 || amount > 5)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 5 at your Skill Level!");
			return 1;
		}
	}
	else if(level >= 51 && level <= 100)
	{ tel = 500; if(amount < 1 || amount > 5) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 10 at your Skill Level!"); return 1; } }
	else if(level >= 101 && level <= 200)
	{ tel = 500; if(amount < 1 || amount > 15) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 15 at your Skill Level!"); return 1; } }
	else if(level >= 201 && level <= 400)
	{ tel = 500; if(amount < 1 || amount > 20) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 20 at your Skill Level!"); return 1; } }
	else if(level >= 401)
	{ tel = 500; if(amount < 1 || amount > 25) { SendClientMessageEx(playerid, COLOR_GREY, "   You can't go above 25 at your Skill Level!"); return 1; } }
	new mypoint = -1;
	for (new i=0; i<MAX_POINTS; i++)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
		{
			mypoint = i;
		}
	}
	if (mypoint == -1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Crack Lab!");
		return 1;
	}
	if ( PlayerInfo[playerid][pCrack] >= 25)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You have reached your crack limit of 25 crack.");
		return 1;
	}
	if (PlayerInfo[playerid][pJob] == 4 || PlayerInfo[playerid][pJob2] == 4)
	{
		price = amount * tel;
		if(Points[mypoint][Stock] < amount && PlayerInfo[playerid][pDonateRank] < 1) return SendClientMessageEx(playerid, COLOR_GREY, "   This Crack Lab doesn't have that much crack!");
		if(GetPlayerCash(playerid) > price)
		{
			format(string, sizeof(string), "* You bought %d grams for $%d.", amount, price);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(playerid, -price);
			PlayerInfo[playerid][pCrack] += amount;
			if(PlayerInfo[playerid][pDonateRank] < 1) Points[mypoint][Stock] = Points[mypoint][Stock]-amount;
			format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[mypoint][Stock]);
			UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
			for(new i = 0; i < sizeof(FamilyInfo); i++)
			{
				if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
				{
					FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You cant afford the Drugs!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		return 1;
	}
	return 1;
}



CMD:nextpaycheck(playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Total Minutes since last Paycheck: %d  Approximate time (minutes) until next Paycheck: %d", floatround(PlayerInfo[playerid][pConnectSeconds]/60), floatround((3600-PlayerInfo[playerid][pConnectSeconds]) / 60));
	SendClientMessageEx(playerid, COLOR_YELLOW, string);
	SendClientMessageEx(playerid, COLOR_GRAD2, "Please note that you will not accrue time if your game is paused.");
	return 1;
}


CMD:find(playerid, params[]) {
	if(PlayerInfo[playerid][pJob] != 1 && PlayerInfo[playerid][pJob2] != 1) {
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a detective.");
	}
	else if(UsedFind[playerid]) {
		SendClientMessageEx(playerid, COLOR_GREY, "You've already searched for someone - wait a little.");
	}
	else {

		new
			iTargetID;

		if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /find [player]");
		}
		else if(iTargetID == playerid) {
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself.");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(GetPlayerInterior(iTargetID) != 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "That person is inside an interior.");
		}
		else if(PlayerInfo[iTargetID][pAdmin] >= 99998) {
			SendClientMessageEx(playerid, COLOR_GREY, "You are unable to find this person.");
		}
		else if(PhoneOnline[iTargetID] > 0) {
			SendClientMessageEx(playerid, COLOR_GREY, "* The signal cannot be reached.");
		}
		else {

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 0 .. 50: {
					FindTimePoints[playerid] = 4;
					UsedFind[playerid] = 120;
				}
				case 51 .. 100: {
					FindTimePoints[playerid] = 6;
					UsedFind[playerid] = 90;
				}
				case 101 .. 200: {
					FindTimePoints[playerid] = 8;
					UsedFind[playerid] = 60;
				}
				case 201 .. 400: {
					FindTimePoints[playerid] = 10;
					UsedFind[playerid] = 30;
				}
				default: {
					FindTimePoints[playerid] = 12;
					UsedFind[playerid] = 15;
				}
			}

			new
				szZone[MAX_ZONE_NAME],
				szMessage[108];

			SetPlayerMarkerForPlayer(playerid, iTargetID, FIND_COLOR);
			GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
			format(szMessage, sizeof(szMessage), "%s has been last seen at %s.", GetPlayerNameEx(iTargetID), szZone);
			SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
			FindingPlayer[playerid]=iTargetID;
			FindTime[playerid] = 1;
			if(DoubleXP) {
				SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 detective skill points instead of 1. (Double XP Active)");
				PlayerInfo[playerid][pDetSkill] += 2;
			}
			else
			if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP) {
				format(szMessage, sizeof(szMessage), "You have gained 2 detective skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
				SendClientMessageEx(playerid, COLOR_YELLOW, szMessage);
				PlayerInfo[playerid][pDetSkill] += 2;
			}
			else ++PlayerInfo[playerid][pDetSkill];

			switch(PlayerInfo[playerid][pDetSkill]) {
				case 50: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 2, you can find a little faster.");
				case 100: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 3, you can find a little faster.");
				case 200: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 4, you can find a little faster.");
				case 400: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your Detective Skill is now Level 5, you can find a little faster.");
			}
		}
	}
	return 1;
}



CMD:afind(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] != 99999) {
		return 1;
	}
	new
		iTargetID;

	if(sscanf(params, "u", iTargetID)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /afind [player]");
	}
	else if(iTargetID == playerid) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	else if(!IsPlayerConnected(iTargetID)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else if(GetPlayerInterior(iTargetID) != 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "That person is inside an interior.");
	}

    if(GetPVarType(playerid, "hFind")) {
   		SendClientMessageEx(playerid, COLOR_GRAD2, "Stopped Updating");
        DeletePVar(playerid, "hFind");
        DisablePlayerCheckpoint(playerid);
	}
	else
	{
		new
			szZone[MAX_ZONE_NAME],
			szMessage[108];

		new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(iTargetID, X, Y, Z);
	    DisablePlayerCheckpoint(playerid);
	    SetPlayerCheckpoint(playerid, X, Y, Z, 4.0);
		GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
		format(szMessage, sizeof(szMessage), "Tracking on %s, last seen at %s.", GetPlayerNameEx(iTargetID), szZone);
		SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Type /hfind again to stop tracking.");
		SetPVarInt(playerid, "hFind", iTargetID);
	}
	return 1;
}

CMD:deletehit(playerid, params[])
{
	if( PlayerInfo[playerid][pAdmin] >= 4 || (PlayerInfo[playerid][pMember] == 8 && PlayerInfo[playerid][pRank] >= 5) || PlayerInfo[playerid][pLeader] == 8 )
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deletehit [player]");

		if(!IsPlayerConnected(giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}

		if(PlayerInfo[giveplayerid][pHeadValue] >= 1 )
		{
			PlayerInfo[giveplayerid][pHeadValue] = 0;
			format(string, sizeof(string), "<< %s has removed the contract on %s >>", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			Log("logs/contracts.log", string);
			format(string, sizeof(string), "You have removed the contract which was on %s's head.", GetPlayerNameEx(giveplayerid) );
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			GoChase[giveplayerid] = INVALID_PLAYER_ID;

			foreach(new i: Player)
			{
				if( HitToGet[i] == giveplayerid )
				{
					HitToGet[i] = INVALID_PLAYER_ID;
					HitOffer[i] = INVALID_PLAYER_ID;
				}
			}
		}
		else
		{
			SendClientMessageEx( playerid, COLOR_WHITE, "There's not an active contract on that player!" );
		}
	}
	return 1;
}

CMD:guard(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 8 && PlayerInfo[playerid][pJob2] != 8)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a bodyguard.");
		return 1;
	}
	if(WatchingTV[playerid] != 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
		return 1;
	}

	new string[128], giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /guard [player] [price]");
	if (GetPVarInt(playerid, "GuardTimer") > 0)
	{
		format(string, sizeof(string), "   You must wait %d seconds before selling another vest.", GetPVarInt(playerid, "GuardTimer"));
		SendClientMessageEx(playerid,COLOR_GREY,string);
		return 1;
	}
	if(money < 2000 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "Specified price must be between $2,000 and $10,000."); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{

		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can't /guard yourself.");
				return 1;
			}

			SetPVarInt(playerid, "GuardTimer", 10); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_GUARDTIMER);
			format(string, sizeof(string), "* You offered protection to %s for $%d.", GetPlayerNameEx(giveplayerid), money);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Bodyguard %s wants to protect you for $%d, type /accept bodyguard to accept.", GetPlayerNameEx(playerid), money);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GuardOffer[giveplayerid] = playerid;
			GuardPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:free(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Lawyer!");
		return 1;
	}
	if(PlayerInfo[playerid][pLawSkill] >= 401)
	{
		ApprovedLawyer[playerid] = 1;
	}

	new
		giveplayerid;

	if(sscanf(params, "u", giveplayerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /free [player]");
	}
	else if(!IsPlayerConnected(giveplayerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else if(giveplayerid == playerid) {
		SendClientMessageEx(playerid, COLOR_GREY, "You cannot free yourself.");
	}
	else if(PlayerInfo[giveplayerid][pJailTime] > 0 && ApprovedLawyer[playerid] == 1 && WantLawyer[giveplayerid] >= 1) {

		new
			string[128];

		format(string, sizeof(string), "* You freed %s from jail.", GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* You were freed from jail, by Lawyer %s.", GetPlayerNameEx(playerid));
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		ApprovedLawyer[playerid] = 0;
		WantLawyer[giveplayerid] = 0;
		CallLawyer[giveplayerid] = 0;
		JailPrice[giveplayerid] = 0;
		PlayerInfo[giveplayerid][pJailTime] = 1;
		if(DoubleXP) {
			SendClientMessageEx(playerid, COLOR_YELLOW, "You have gained 2 lawyer skill points instead of 1. (Double XP Active)");
			PlayerInfo[playerid][pLawSkill] += 2;
		}
		else
		if(PlayerInfo[playerid][pDoubleEXP] > 0 && !DoubleXP)
		{
			format(string, sizeof(string), "You have gained 2 lawyer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[playerid][pDoubleEXP]);
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
			PlayerInfo[playerid][pLawSkill] += 2;
		}
		else ++PlayerInfo[playerid][pLawSkill];

		switch(PlayerInfo[playerid][pLawSkill]) {
			case 50: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 2, you will earn more money and now have a shorter reload time.");
			case 100: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 3, you will earn more money and now have a shorter reload time.");
			case 200: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 4, you will earn more money and now have a shorter reload time.");
			case 400: SendClientMessageEx(playerid, COLOR_YELLOW, "* Your lawyer skill is now Level 5, you will earn more money and now have a shorter reload time.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "That player doesn't need a laywer.");
	return 1;
}

CMD:defend(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 2 && PlayerInfo[playerid][pJob2] != 2)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Lawyer!");
		return 1;
	}

	new string[128];
	if(PlayerInfo[playerid][pLawyerTime] >= 1)
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pLawyerTime]);
		SendClientMessageEx(playerid, COLOR_GRAD1,string);
		return 1;
	}

	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /defend [player] [price]");
	if(money < 2000 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then $2,000 or above $10,000!"); return 1; }
	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			if(giveplayerid == playerid)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Cant offer protection to yourself!");
				return 1;
			}
			if(PlayerInfo[giveplayerid][pWantedLevel] > 0)
			{
				format(string, sizeof(string), "* You offered to defend %s for $%d.", GetPlayerNameEx(giveplayerid), money);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* Lawyer %s wants to defend you for $%d, (type /accept defense) to accept.", GetPlayerNameEx(playerid), money);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pLawyerTime] = 60;
				DefendOffer[giveplayerid] = playerid;
				DefendPrice[giveplayerid] = money;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   That player is not wanted!");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	return 1;
}

CMD:cancel(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Cancel __________________|");
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cancel [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Sex, Mats, Pot, Crack, Weapon, Craft, Repair, Lawyer, Bodyguard, Live, Refill, Car, Boxing");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Taxi, Bus, Medic, Mechanic, Ticket, Witness, Marriage, Divorce, Drink, House, Truck");
		SendClientMessageEx(playerid, COLOR_WHITE, "|____________________________________________|");
		return 1;
	}

	if(strcmp(choice,"sex",true) == 0) {	SexOffer[playerid] = INVALID_PLAYER_ID; SexPrice[playerid] = 0; }
	else if(strcmp(choice,"mats",true) == 0) { MatsOffer[playerid] = INVALID_PLAYER_ID; MatsStorageID[playerid] = -1; MatsPrice[playerid] = 0; MatsAmount[playerid] = 0; }
	else if(strcmp(choice,"pot",true) == 0) { PotOffer[playerid] = INVALID_PLAYER_ID; PotStorageID[playerid] = -1; PotPrice[playerid] = 0; PotGram[playerid] = 0; }
	else if(strcmp(choice,"crack",true) == 0) { CrackOffer[playerid] = INVALID_PLAYER_ID; CrackStorageID[playerid] = -1; CrackPrice[playerid] = 0; CrackGram[playerid] = 0; }
	else if(strcmp(choice,"weapon",true) == 0) { GunOffer[playerid] = INVALID_PLAYER_ID; GunStorageID[playerid] = -1; GunId[playerid] = 0; }
	else if(strcmp(choice,"craft",true) == 0) { CraftOffer[playerid] = INVALID_PLAYER_ID; CraftId[playerid] = 0; }
	else if(strcmp(choice,"repair",true) == 0) {	RepairOffer[playerid] = INVALID_PLAYER_ID; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
	else if(strcmp(choice,"lawyer",true) == 0) { WantLawyer[playerid] = 0; CallLawyer[playerid] = 0; }
	else if(strcmp(choice,"bodyguard",true) == 0) { GuardOffer[playerid] = INVALID_PLAYER_ID; GuardPrice[playerid] = 0; }
	else if(strcmp(choice,"live",true) == 0) { LiveOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"refill",true) == 0) { RefillOffer[playerid] = INVALID_PLAYER_ID; RefillPrice[playerid] = 0; }
	else if(strcmp(choice,"car",true) == 0) { VehicleOffer[playerid] = INVALID_PLAYER_ID; VehiclePrice[playerid] = 0; VehicleId[playerid] = -1; }
	else if(strcmp(choice,"house",true) == 0) { HouseOffer[playerid] = INVALID_PLAYER_ID; HousePrice[playerid] = 0; House[playerid] = 0; }
	else if(strcmp(choice,"boxing",true) == 0) { BoxOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"witness",true) == 0) { MarryWitnessOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"marriage",true) == 0) { ProposeOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"divorce",true) == 0) { DivorceOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"drink",true) == 0) { DrinkOffer[playerid] = INVALID_PLAYER_ID; }
	else if(strcmp(choice,"truck",true) == 0)
	{
 		DeletePVar(playerid, "LoadTruckTime");
		DeletePVar(playerid, "TruckDeliver");
		TruckUsed[playerid] = INVALID_VEHICLE_ID;
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
 		DisablePlayerCheckpoint(playerid);
	}
	else if(strcmp(choice,"contract",true) == 0)
	{
		new Float:health;
		GetPlayerHealth(playerid, health);
		new hpint = floatround( health, floatround_round );
		if (hpint >=  80)
		{
			HitToGet[playerid] = INVALID_PLAYER_ID;
			HitOffer[playerid] = INVALID_PLAYER_ID;
			GetChased[GoChase[playerid]] = INVALID_PLAYER_ID;
			GotHit[GoChase[playerid]] = 0;
			GoChase[playerid] = INVALID_PLAYER_ID;
		}
		else
		{
			SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
			return 1;
		}
	}
	else if(strcmp(choice,"ticket",true) == 0) { TicketOffer[playerid] = INVALID_PLAYER_ID; TicketMoney[playerid] = 0; }
	else if(strcmp(choice,"medic",true) == 0) { if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = INVALID_PLAYER_ID; } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"mechanic",true) == 0) { if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = INVALID_PLAYER_ID; } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } } }
	else if(strcmp(choice,"help",true) == 0) { if(GetPVarInt(playerid, "COMMUNITY_ADVISOR_REQUEST")) { DeletePVar(playerid, "COMMUNITY_ADVISOR_REQUEST"); } else { SendClientMessageEx(playerid, COLOR_GREY, "   You are not the current Caller!"); return 1; } }
	else if(strcmp(choice,"taxi",true) == 0)
	{
		if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
		{
			TaxiAccepted[playerid] = INVALID_PLAYER_ID;
			GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
			TaxiCallTime[playerid] = 0;
			DisablePlayerCheckpoint(playerid);
		}
		else
		{
			foreach(new i: Player)
			{
				if(TaxiAccepted[i] < 999)
				{
					if(TaxiAccepted[i] == playerid)
					{
						TaxiAccepted[i] = INVALID_PLAYER_ID;
						GameTextForPlayer(i, "~w~Taxi Caller~n~~r~Canceled the call", 5000, 1);
						TaxiCallTime[i] = 0;
						DisablePlayerCheckpoint(i);
					}
				}
			}
		}
	}
	else if(strcmp(choice,"bus",true) == 0)
	{
		if(BusCall < 999)
		{
			if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			{
				BusAccepted[playerid] = INVALID_PLAYER_ID;
				GameTextForPlayer(playerid, "~w~You have~n~~r~Canceled the call", 5000, 1);
				BusCallTime[playerid] = 0;
				DisablePlayerCheckpoint(playerid);
				BusCall = INVALID_PLAYER_ID;
			}
			else
			{
				if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = INVALID_PLAYER_ID; } }
				foreach(new i: Player)
				{
					if(BusAccepted[i] < 999)
					{
						if(BusAccepted[i] == playerid)
						{
							BusAccepted[i] = INVALID_PLAYER_ID;
							GameTextForPlayer(i, "~w~Bus Caller~n~~r~Canceled the call", 5000, 1);
							BusCallTime[i] = 0;
							DisablePlayerCheckpoint(i);
						}
					}
				}
			}
		}
	}
	else { return 1; }
	format(string, sizeof(string), "* You have canceled: %s.", choice);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:refill(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You're not a mechanic.");
	}

	new string[128];
	if(PlayerInfo[playerid][pMechTime] >= 1)
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]);
		return SendClientMessageEx(playerid, COLOR_GRAD1,string);
	}
	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /refill [player] [price]");

	if(!(money >= 1 && money < 100000))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid price specified - can't be lower than 1 or higher than $99,999.");
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(ProxDetectorS(8.0, playerid, giveplayerid) && IsPlayerInAnyVehicle(giveplayerid))
		{

			new Float: fueltogive;
			switch(PlayerInfo[playerid][pMechSkill])
			{
			case 0 .. 49: fueltogive = 10.0;
			case 50 .. 99: fueltogive = 20.0;
			case 100 .. 199: fueltogive = 30.0;
			case 200 .. 399: fueltogive = 40.0;
			default: fueltogive = 50.0;
			}
			if(giveplayerid == playerid)
			{
				if(PlayerInfo[playerid][pMechSkill] >= 400)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					VehicleFuel[vehicleid] = VehicleFuel[vehicleid] + fueltogive;
					if(VehicleFuel[vehicleid] > 100.0) VehicleFuel[vehicleid] = 100.0;
					format(string, sizeof(string), "* %s has refilled their vehicle.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					format(string, sizeof(string), "* You added %.2f fuel to your car.",fueltogive);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					for(new vehicleslot = 0; vehicleslot < MAX_PLAYERVEHICLES; vehicleslot++)
					{
						if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][vehicleslot][pvId]))
						{
							if(vehicleslot != -1) {
								format(string, sizeof(string), "UPDATE `accounts` SET `pv%dFuel` = %f WHERE `id` = '%d'", vehicleslot, VehicleFuel[PlayerVehicleInfo[playerid][vehicleslot][pvId]], GetPlayerSQLId(playerid));
								mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);
							}
						}
					}
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_GREY, "You can't offer a refill to yourself."); return 1;
			}
			format(string, sizeof(string), "* You offered %s to add %.2f fuel to their car for $%d.",GetPlayerNameEx(giveplayerid),fueltogive,money);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* Car Mechanic %s wants to add %.2f fuel to your car for $%d, type /accept refill to accept.",GetPlayerNameEx(playerid),fueltogive,money);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pMechTime] = 60;
			RefillOffer[giveplayerid] = playerid;
			RefillPrice[giveplayerid] = money;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player is not near you, or isn't in a car.");
		}
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	return 1;
}


CMD:repair(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 7 && PlayerInfo[playerid][pJob2] != 7)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Car Mechanic!");
		return 1;
	}
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can not repair while inside the vehicle.");

	new string[128];
	if(PlayerInfo[playerid][pMechTime] >= 1)
	{
		format(string, sizeof(string), "You must wait %d seconds!", PlayerInfo[playerid][pMechTime]);
		SendClientMessageEx(playerid, COLOR_GRAD1,string);
		return 1;
	}
	if(GetPVarInt(playerid, "EventToken")) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this while in an event.");
	}
	new giveplayerid, money;
	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /repair [player] [price]");

	if(PlayerInfo[playerid][pTire] > 0)
	{
		if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then $1 or above $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new closestcar = GetClosestCar(playerid);

	  			if(IsPlayerInRangeOfVehicle(playerid, closestcar, 8.0))
	  			{
					if(ProxDetectorS(8.0, playerid, giveplayerid)&& IsPlayerInAnyVehicle(giveplayerid))
					{
						if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "   Can't do that!"); return 1; }
	                    if(!IsABike(closestcar) && !IsAPlane(closestcar))
						{
							new engine,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
							if(bonnet == VEHICLE_PARAMS_OFF || bonnet == VEHICLE_PARAMS_UNSET)
							{
								SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle hood must be opened in order to repair it.");
								return 1;
							}
						}
						format(string, sizeof(string), "* You offered %s to fix their car for $%d .",GetPlayerNameEx(giveplayerid),money);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Car Mechanic %s wants to repair your car for $%d, (type /accept repair) to accept.",GetPlayerNameEx(playerid),money);
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pMechTime] = 60;
						RepairOffer[giveplayerid] = playerid;
						RepairPrice[giveplayerid] = money;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   That player is not near you / not in a car.");
					}
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GREY, "   You are not near any vehicle.");
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   That player is offline.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You do not have any tires, buy one from a craftsman.");
	}
	return 1;
}

CMD:f(playerid, params[])
{
	if(gFam[playerid] == 1)
	{
		SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "You have your family chat disabled. /togfamily!");
		return 1;
	}

	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/f)amily [family chat]");

	if((PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) || PlayerInfo[playerid][pFMember] < 255)
	{
		new fam = PlayerInfo[playerid][pFMember];
		if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
		{
			if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (6) Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (5) Vice Director %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (4) Special Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (3) Agent %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (2) Marksman %s: %s **", GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			else { format(string, sizeof(string), "** (1) Freelancer %s: %s **", GetPlayerNameEx(playerid), params); }
			SendFamilyMessage(8, TEAM_AZTECAS_COLOR, string);
			Log("logs/chatlogs/hitmanchat.log", string);
		}
		else if(fam < 255)
		{
			if(PlayerInfo[playerid][pRank] == 6) { format(string, sizeof(string), "** (6) %s %s: %s **", FamilyInfo[fam][FamilyRank6], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 5) { format(string, sizeof(string), "** (5) %s %s: %s **", FamilyInfo[fam][FamilyRank5], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 4) { format(string, sizeof(string), "** (4) %s %s: %s  **", FamilyInfo[fam][FamilyRank4], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 3) { format(string, sizeof(string), "** (3) %s %s: %s  **", FamilyInfo[fam][FamilyRank3], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 2) { format(string, sizeof(string), "** (2) %s %s: %s  **", FamilyInfo[fam][FamilyRank2], GetPlayerNameEx(playerid), params); }
			else if(PlayerInfo[playerid][pRank] == 1) { format(string, sizeof(string), "** (1) %s %s: %s  **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			else { format(string, sizeof(string), "** (0) %s %s: %s **", FamilyInfo[fam][FamilyRank1], GetPlayerNameEx(playerid), params); }
			SendNewFamilyMessage(fam, TEAM_AZTECAS_COLOR, string);
			Log("logs/chatlogs/familychat.log", string);
		}
		return 1;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a part of a Family!");
		return 1;
	}
}



CMD:usepot(playerid, params[])
{
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital]) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use drugs while you're fighting.");
		return 1;
	}
	if(UsedWeed[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");
		return 1;
	}
	new string[128], Float:health, healthint, storageid;

	/*if(sscanf(params, "d", storageid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /usepot [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /usepot [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/

	if(storageid == 0 && PlayerInfo[playerid][pPot] > 1 || (storageid > 0) && StorageInfo[playerid][storageid-1][sPot] > 1)
	{
		GetPlayerHealth(playerid, health);
		healthint = floatround(health, floatround_round);
		if(healthint >= 100 )
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You already have full health.");
			return 1;
		}
		if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are too stoned to use pot.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~you are ~b~stoned", 5000, 3);
		}
		if(healthint > 80)
		{
			SetPlayerHealth(playerid, 100);
		}
		else
		{
			SetPlayerHealth(playerid, health + 20.0);
		}
		SendClientMessageEx(playerid, COLOR_GREY, " You used 2 grams of pot!");
		format(string, sizeof(string), "* %s has used some pot.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		if(storageid == 0) {
			PlayerInfo[playerid][pPot] -= 2;
		} else {
			StorageInfo[playerid][storageid-1][sPot] -= 2;
		}

		UsedWeed[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STI anymore because of the Drugs!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any pot left!");
	}
	return 1;
}

CMD:usecrack(playerid, params[])
{
	if(GetPVarType(playerid, "PlayerCuffed") || GetPVarType(playerid, "Injured") || GetPVarType(playerid, "IsFrozen") || PlayerInfo[playerid][pHospital]) {
   		return SendClientMessage(playerid, COLOR_GRAD2, "You can't do that at this time!");
	}
	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
		return 1;
	}
	if(PlayerBoxing[playerid] > 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't use drugs while you're fighting.");
		return 1;
	}
	if(UsedCrack[playerid] == 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 5 seconds before using more drugs.");
		return 1;
	}
	new Float:armour;
	GetPlayerArmour(playerid, armour);
	if(armour >= 100)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You already have full armor.");
		return 1;
	}

	new storageid;
	/*if(sscanf(params, "d", storageid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /usecrack [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /usecrack [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/

	if(storageid == 0 && PlayerInfo[playerid][pCrack] > 1 || (storageid > 0) && StorageInfo[playerid][storageid-1][sCrack] > 1)
	{
		if(PlayerStoned[playerid] > 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are too stoned to use crack.");
		PlayerStoned[playerid] += 1;
		if(PlayerStoned[playerid] == 3)
		{
			GameTextForPlayer(playerid, "~w~you are ~b~stoned", 5000, 3);
		}
		new string[128], Float:PlayersArmour;
		GetPlayerArmour(playerid, PlayersArmour);
		SendClientMessageEx(playerid, COLOR_GREY, " You used 2 grams of crack!");
		format(string, sizeof(string), "* %s has used some crack.", GetPlayerNameEx(playerid));
		ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		if(storageid == 0) {
			PlayerInfo[playerid][pCrack] -= 2;
		} else {
			StorageInfo[playerid][storageid-1][sCrack] -= 2;
		}

		UsedCrack[playerid] = 1;
		SetTimerEx("ClearDrugs", 5000, false, "d", playerid);
		if(PlayersArmour > 90)
		{
			SetPlayerArmour(playerid, 100);
		}
		else
		{
			SetPlayerArmour(playerid, PlayersArmour + 10.0);
		}
		if(!IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",2.1,0,0,0,0,0);
		switch(GetPVarInt(playerid, "STD")) {
			case 1:
			{
				DeletePVar(playerid, "STD");
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with an STI anymore because of the drugs!");
			}
			case 2:
			{
				SetPVarInt(playerid, "STD", 1);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to chlamydia because of the drugs!");
			}
			case 3:
			{
				SetPVarInt(playerid, "STD", 2);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You reduced the STI to gonorrhea because of the drugs!");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You don't have any crack left!");
	}
	return 1;
}

CMD:healme(playerid, params[])
{
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 1179.4012451172,-1331.5632324219,2423.0461425781))//2103.3252,2824.2102,-16.1672
	{
		if(GetPVarType(playerid, "STD"))
		{
			DeletePVar(playerid, "STD");
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD anymore because of the Hospital's help!");
			GivePlayerCash(playerid, -1000);
			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Doc: Your medical bill contained $1000,-. Have a nice day!");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have a STD to heal!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not at a Hospital!");
	}
	return 1;
}

CMD:eject(playerid, params[])
{
	new State;
	if(IsPlayerInAnyVehicle(playerid))
	{
		State=GetPlayerState(playerid);
		if(State!=PLAYER_STATE_DRIVER)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"   You can only eject people as the driver!");
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /eject [player]");

		new test;
		test = GetPlayerVehicleID(playerid);
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot Eject yourself!"); return 1; }
				if(IsPlayerInVehicle(giveplayerid,test))
				{
					if(GetPVarInt(giveplayerid, "EMSAttempt") != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't eject patients!");
					format(string, sizeof(string), "* You have thrown %s out of the car.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You have been thrown out the car by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					RemovePlayerFromVehicle(giveplayerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(giveplayerid, slx, sly, slz);
					SetPlayerPosEx(giveplayerid, slx, sly+3, slz+1);
					format(string, sizeof(string), "* %s has ejected %s from the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   That player is not in your Car!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, " Invalid ID/Name!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You need to be in a Vehicle to use this!");
	}
	return 1;
}

CMD:sex(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] == 3 || PlayerInfo[playerid][pJob2] == 3)
	{
		if(!IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You can only have Sex in a Car!");
			return 1;
		}
		new Car = GetPlayerVehicleID(playerid);

		new string[128], giveplayerid, money;
		if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sex [player] [price]");

		if(money < 1 || money > 10000) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then $1 or above $10,000!"); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot have Sex with yourself!"); return 1; }
					if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
					{
						if(PlayerInfo[playerid][pSexTime] < 1)
						{
							format(string, sizeof(string), "* You Offered %s to have Sex with you, for $%d.", GetPlayerNameEx(giveplayerid), money);
							SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Whore %s has Offered you to have Sex with them, for $%d (type /accept sex) to accept.", GetPlayerNameEx(playerid), money);
							SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
							SexOffer[giveplayerid] = playerid;
							SexPrice[giveplayerid] = money;
							PlayerInfo[playerid][pSexTime] = 60;
						}
						else
						{
							SendClientMessageEx(playerid, COLOR_GRAD2, " You have already had sex, wait for your reload time to finish!");
							return 1;
						}
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "   You or the other player must be in a Car together!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Whore!");
	}
	return 1;
}



CMD:sellmats(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "The /sellmats command has been removed - use /sell.");
	return 1;
}

CMD:sellcrack(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "The /sellcrack command has been removed - use /sell.");
	return 1;
}

CMD:sellpot(playerid, params[])
{
	SendClientMessageEx(playerid, COLOR_GREY, "The /sellpot command has been removed - use /sell.");
	return 1;
}

CMD:drop(playerid, params[])
{
	new string[128], choice[32];
	if(sscanf(params, "s[32]", choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /drop [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio, Pizza");
		return 1;
	}

	if(strcmp(choice,"materials",true) == 0)
	{
		if(PlayerInfo[playerid][pMats] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d materials.", PlayerInfo[playerid][pMats]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away their materials.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pMats] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any materials to throw away!");
		}
	}
	else if(strcmp(choice,"radio",true) == 0)
	{
		if(PlayerInfo[playerid][pRadio] != 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their portable radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pRadio] = 0;
			PlayerInfo[playerid][pRadioFreq] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying a portable radio to throw away!");
		}
	}
	else if(strcmp(choice,"weapons",true) == 0)
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this while you're in an event.");
			return 1;
		}
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		ResetPlayerWeaponsEx(playerid);
		format(string, sizeof(string), "* %s has thrown away their Weapons.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp(choice,"pot",true) == 0)
	{
		if(PlayerInfo[playerid][pPot] > 0)
		{
			format(string, sizeof(string), "You have dropped %d grams of pot.", PlayerInfo[playerid][pPot]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their pot.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pPot] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any pot to throw away!");
		}
	}
	else if(strcmp(choice,"crack",true) == 0)
	{
		if(PlayerInfo[playerid][pCrack] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "You have dropped %d grams of crack.", PlayerInfo[playerid][pCrack]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "* %s has thrown away their crack.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrack] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any crack to throw away!");
		}
	}
	else if(strcmp(choice,"packages",true) == 0)
	{
		if(GetPVarInt(playerid, "Packages") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their material packages.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "Packages");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any material packages to throw away!");
		}
	}
	else if(strcmp(choice,"crates",true) == 0)
	{
		if(PlayerInfo[playerid][pCrates] > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their drug crates.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			PlayerInfo[playerid][pCrates] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not carrying any drug crates to throw away!");
		}
	}
	else if(strcmp(choice,"pizza",true) == 0)
	{
		if(GetPVarInt(playerid, "Pizza") > 0)
		{
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "* %s has thrown away their pizza delivery.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            DeletePVar(playerid, "Pizza");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You are not delivering any pizzas!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /drop [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Packages, Crates, Radio");
	}
	return 1;
}

CMD:show(playerid, params[])
{
	new string[128], giveplayerid, choice[32];
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /show [player] [name]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials");
		return 1;
	}

	if(giveplayerid == playerid)
	{
	    SendClientMessageEx(playerid, COLOR_GREY, "You can not show this to yourself!");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if (!ProxDetectorS(5.0, playerid, giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}

			if (strcmp(choice, "materials", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pMats];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any materials!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d Materials.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d Materials.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some Materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "pot", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pPot];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any pot!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d grams of pot.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d grams of pot.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some Pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
			if (strcmp(choice, "crack", true) == 0)
			{
			    new amount = PlayerInfo[playerid][pCrack];
			    if(amount < 1)
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have any crack!");
					return 1;
			    }
				format(string, sizeof(string), "%s has shown you their %d grams of crack.",  GetPlayerNameEx(playerid), amount);
				SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "You have shown %s your %d grams of crack.", GetPlayerNameEx(giveplayerid), amount);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);

				format(string, sizeof(string), "* %s has shown %s some Crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return 1;
			}
		}
	}
	return 1;
}

/*CMD:givestorage(playerid, params[])
{
	new string[128], giveplayerid, choice[32];
	if(sscanf(params, "us[32]", giveplayerid, choice))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /givestorage [player] [storage item]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Bag, Backpack, Briefcase");
		return 1;
	}

	if(IsPlayerConnected(giveplayerid))
	{
		if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");

		if (strcmp(choice, "bag", true) == 0)
		{
			if(StorageInfo[playerid][0][sAttached] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must unequip it first before giving it away!");

			format(string, sizeof(string), "You have recieved a Bag from %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
			StorageInfo[giveplayerid][0][sStorage] = 1;
			StorageInfo[playerid][0][sStorage] = 0;
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) a Bag.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) a Bag.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/admingive.log", string);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) a Bag.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			format(string, sizeof(string), "You have given %s a Bag.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "* %s has given %s a Bag.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if (strcmp(choice, "backpack", true) == 0)
		{
			if(StorageInfo[playerid][1][sAttached] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must unequip it first before giving it away!");

			format(string, sizeof(string), "You have recieved a Backpack from %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
			StorageInfo[giveplayerid][1][sStorage] = 1;
			StorageInfo[playerid][1][sStorage] = 0;
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) a Backpack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) a Backpack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/admingive.log", string);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) a Backpack.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			format(string, sizeof(string), "You have given %s a Backpack.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "* %s has given %s a Backpack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
		if (strcmp(choice, "briefcase", true) == 0)
		{
			if(StorageInfo[playerid][2][sAttached] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "You must unequip it first before giving it away!");

			format(string, sizeof(string), "You have recieved a Briefcase from %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
			StorageInfo[giveplayerid][2][sStorage] = 1;
			StorageInfo[playerid][2][sStorage] = 0;
			new ip[32], ipex[32];
			GetPlayerIp(playerid, ip, sizeof(ip));
			GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
			format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) a Briefcase.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
			Log("logs/pay.log", string);
			if(PlayerInfo[playerid][pAdmin] >= 2)
			{
				format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) a Briefcase.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				Log("logs/admingive.log", string);
				format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) a Briefcase.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex);
				ABroadCast(COLOR_YELLOW, string, 2);
			}
			format(string, sizeof(string), "You have given %s a Briefcase.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "* %s has given %s a Briefcase.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			return 1;
		}
	}
	return 1;
}*/

CMD:give(playerid, params[])
{
	new string[128], giveplayerid, choice[32], storageid, amount;

	if(sscanf(params, "us[32]d", giveplayerid, choice, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /give [player] [name] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework, rewardtokens");
		return 1;
	}
	/*if(sscanf(params, "us[32]dd", giveplayerid, choice, storageid, amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /give [player] [name] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	if(storageid < 0 || storageid > 1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /give [player] [name] [storageid] [amount]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
	}

	// Find the storageid of the storagedevice.
	if(storageid == 1) {
		new bool:itemEquipped = false;
		for(new i = 0; i < 3; i++)
		{
			if(StorageInfo[playerid][i][sAttached] == 1) {
				storageid = i+1;
				itemEquipped = true;
			}
		}
		if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have a storage device equipped!");
	}*/

	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if(amount < 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You don't have that much!");
			if(!ProxDetectorS(5.0, playerid, giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can not use this command on yourself!");

			if (strcmp(choice, "materials", true) == 0)
			{
				TransferStorage(giveplayerid, -1, playerid, storageid, 4, amount, -1, -1);
			}
			if (strcmp(choice, "rewardtokens", true) == 0)
			{
				if(PlayerInfo[playerid][pGoldBoxTokens] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d Reward Box Token(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pGoldBoxTokens] += amount;
					PlayerInfo[playerid][pGoldBoxTokens] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d Reward Box Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{

						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d Reward Box Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d Reward Box Token(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d Reward Box Token(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some Reward Box Token(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "firework", true) == 0)
			{
				if(PlayerInfo[playerid][pFirework] >= amount)
				{
					format(string, sizeof(string), "You have recieved %d firework(s) from %s.", amount, GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_GRAD2, string);
					PlayerInfo[giveplayerid][pFirework] += amount;
					PlayerInfo[playerid][pFirework] -= amount;
					new ip[32], ipex[32];
					GetPlayerIp(playerid, ip, sizeof(ip));
					GetPlayerIp(giveplayerid, ipex, sizeof(ipex));
					format(string, sizeof(string), "%s(IP:%s) has given %s(IP:%s) %d firework(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
					Log("logs/pay.log", string);
					if(PlayerInfo[playerid][pAdmin] >= 2)
					{

						format(string, sizeof(string), "[Admin] %s(IP:%s) has given %s(IP:%s) %d firework(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						Log("logs/admingive.log", string);
						format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s(IP:%s) has given %s(IP:%s) %d firework(s).", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(giveplayerid), ipex, amount);
						ABroadCast(COLOR_YELLOW, string, 2);
					}
					format(string, sizeof(string), "You have given %s %d firework(s).", GetPlayerNameEx(giveplayerid), amount);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
					format(string, sizeof(string), "* %s has given %s some firework(s).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many!");
					return 1;
				}
			}
			if (strcmp(choice, "pot", true) == 0)
			{
				TransferStorage(giveplayerid, -1, playerid, storageid, 2, amount, -1, -1);
			}
			if (strcmp(choice, "crack", true) == 0)
			{
				TransferStorage(giveplayerid, -1, playerid, storageid, 3, amount, -1, -1);
			}
		}
	}
	return 1;
}

CMD:sell(playerid, params[])
{
	new string[128], giveplayerid, choice[32], amount, price;
    if(sscanf(params, "us[32]dd", giveplayerid, choice, amount, price))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sell [player] [name] [amount] [price]");
		SendClientMessageEx(playerid, COLOR_GREY, "Available names: Pot, Crack, Materials, Firework");
		return 1;
	}
	if(PlayerCuffed[playerid] >= 1 || PlayerInfo[playerid][pHospital] > 0)
	{
		return SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
	}
	if(WatchingTV[playerid] != 0)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You can not do this while watching TV!");
	}
	if(price < 50000)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "Price can't be lower than $50,000. Use /give for deals below the scam limit.");
	}
	if(!IsPlayerConnected(giveplayerid))
	{
		return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if(playerid == giveplayerid)
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't sell to yourself!");
	}
	if(!ProxDetectorS(8.0, playerid, giveplayerid))
	{
		return SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
	}

	if(strcmp(choice, "materials", true) == 0)
	{
 		if(PlayerInfo[playerid][pJob] != 9 && PlayerInfo[playerid][pJob2] != 9 && PlayerInfo[playerid][pJob] != 18 && PlayerInfo[playerid][pJob2] != 18)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "You're not an arms dealer or craftsman.");
		}
		if(GetPVarInt(playerid, "SellMatsTimer") > 0)
		{
			format(string, sizeof(string), "You must wait %d seconds before selling more materials.", GetPVarInt(playerid, "SellMatsTimer"));
			return SendClientMessageEx(playerid,COLOR_GREY,string);
		}
		if(amount < 1) { SendClientMessageEx(playerid, COLOR_GREY, "Materials amount must be no lower than 1!"); return 1; }
		if(amount > PlayerInfo[playerid][pMats]) { SendClientMessageEx(playerid, COLOR_GREY, "You don't have that many materials!"); return 1; }
		format(string, sizeof(string), "* You offered %s to buy %d materials for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d materials for $%d, (type /accept mats) to buy.", GetPlayerNameEx(playerid), amount, price);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		SetPVarInt(playerid, "SellMatsTimer", 30);
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SELLMATSTIMER);
		MatsOffer[giveplayerid] = playerid;
		MatsPrice[giveplayerid] = price;
		MatsAmount[giveplayerid] = amount;
		SetPVarString(giveplayerid, "MatsOfferName", GetPlayerNameEx(playerid));
 		return 1;
	}

	else if (strcmp(choice, "crack", true) == 0)
	{
 		if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		}
		if(PlayerInfo[playerid][pDrugsTime] != 0)
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 1 minute before selling more drugs.");
		}
		if(amount < 1 || amount > 99) { SendClientMessageEx(playerid, COLOR_GREY, "   Grams no lower then 1, or above 99!"); return 1; }
		if(price < 1 || price > 99999) { SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then 1, or above 99999!"); return 1; }
		if(amount > PlayerInfo[playerid][pCrack]) { SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have that much Crack with you!"); return 1; }
		format(string, sizeof(string), "* You offered %s to buy %d grams of crack for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Drug Dealer %s wants to sell you %d grams of crack for $%d, (type /accept crack) to buy.", GetPlayerNameEx(playerid), amount, price);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pDrugsTime] = 60;
		CrackOffer[giveplayerid] = playerid;
		CrackPrice[giveplayerid] = price;
		CrackGram[giveplayerid] = amount;
	}

	else if (strcmp(choice, "pot", true) == 0)
	{
 		if(PlayerInfo[playerid][pJob] != 4 && PlayerInfo[playerid][pJob2] != 4)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "   You're not a drug dealer.");
		}
		if(PlayerInfo[playerid][pDrugsTime] != 0)
		{
			return SendClientMessageEx(playerid, COLOR_WHITE, "You must wait 1 minute before selling more drugs.");
		}
		if(amount < 1 || amount > 99) { return SendClientMessageEx(playerid, COLOR_GREY, "   Grams no lower then 1, or above 99!"); }
		if(price < 1 || price > 99999) { return SendClientMessageEx(playerid, COLOR_GREY, "   Price not lower then 1, or above 99999!"); }
		if(amount > PlayerInfo[playerid][pPot]) { return SendClientMessageEx(playerid, COLOR_GREY, "   You Don't have that much pot with you!"); }
		format(string, sizeof(string), "* You offered %s to buy %d grams of pot for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* Drug Dealer %s wants to sell you %d grams of pot for $%d, (type /accept pot) to buy.", GetPlayerNameEx(playerid), amount, price);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		PlayerInfo[playerid][pDrugsTime] = 60;
		PotOffer[giveplayerid] = playerid;
		PotPrice[giveplayerid] = price;
		PotGram[giveplayerid] = amount;
	}

	else if (strcmp(choice, "firework", true) == 0)
	{
		if(amount > PlayerInfo[playerid][pFirework]) { SendClientMessageEx(playerid, COLOR_GREY, "   You don't have that many fireworks with you!"); return 1; }
		format(string, sizeof(string), "* You offered %s to buy %d fireworks for $%d.", GetPlayerNameEx(giveplayerid), amount, price);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		format(string, sizeof(string), "* %s wants to sell you %d fireworks for $%d, (type /accept firework) to buy.", GetPlayerNameEx(playerid), amount, price);
		SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
		FireworkOffer[giveplayerid] = playerid;
		FireworkPrice[giveplayerid] = price;
	 	FireworkCount[giveplayerid] = amount;
	}

	return 1;

}

CMD:quitjob(playerid, params[])
{
	if(PlayerInfo[playerid][pDonateRank] >= 1)
	{
		new jobid;
		if(sscanf(params, "d", jobid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /quitjob [jobid]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available: 1, 2 (secondary VIP)");
			return 1;
		}

		switch(jobid)
		{
		case 1:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
				PlayerInfo[playerid][pJob] = 0;
			}
		case 2:
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your secondary Job.");
				PlayerInfo[playerid][pJob2] = 0;
			}
		default:
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /quitjob [jobid]");
				SendClientMessageEx(playerid, COLOR_GREY, "Available: 1, 2 (secondary VIP)");
			}
		}
	}
	else
	{
		if(PlayerInfo[playerid][pJob] > 0 )
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have quit your Job.");
			PlayerInfo[playerid][pJob] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You don't even have a Job!");
		}
	}
	return 1;
}

CMD:bail(playerid, params[])
{
	if(PlayerInfo[playerid][pJailTime] > 0)
	{
		if(JailPrice[playerid] > 0)
		{
			if(GetPlayerCash(playerid) > JailPrice[playerid])
			{
				new string[128];
				format(string, sizeof(string), "You bailed yourself out for $%d.", JailPrice[playerid]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				GivePlayerCash(playerid, -JailPrice[playerid]);
				JailPrice[playerid] = 0;
				WantLawyer[playerid] = 0; CallLawyer[playerid] = 0;
				PlayerInfo[playerid][pJailTime] = 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You can't afford the bail price.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have a bail price.");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in jail.");
	}
	return 1;
}



CMD:backentrance(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 11) {
	    if(BackEntrance) {
	        BackEntrance = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "The back entrance has been locked.");
	    }
	    else {
	        BackEntrance = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "The back entrance has been unlocked.");
	    }
	}
	else SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command.");
	return 1;
}


CMD:myvw(playerid, params[])
{
	new string[40];
	format(string, 30, " * Your virtual world is : %d", GetPlayerVirtualWorld(playerid));
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}
//shout command and functions start here =====================================

/*CMD:cooldown(playerid, params[])
{
	new string[128], option[5];
	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, -1, "Nigger try hard.");
	if(useCoolDown == 0){
	    useCoolDown = 1;
	    option = "on";
	}else{
	    useCoolDown = 0;
	    option = "off";
	}
	format(string, 128, "Cool down is now %s.", option);
	SendClientMessageToAll(-1, string);
	return 1;
}*/

CMD:dshout(playerid, params[])
{
 	new Float:x, Float:y, Float:z, string[128];
 	new shouttype = myShout[playerid];
	GetPlayerHealth(playerid, z);
	if(dragonBorn[playerid] == 0) return SendClientMessage(playerid, -1, " * You cannot shout, you are not the dragon born!");
	if(z < 0.0000001) return SendClientMessage(playerid, -1, "You can't shout if you died.");
 	if(useCoolDown == 1 && myCoolDown[playerid] != 0)
 	{
 	    format(string, sizeof(string), "Please wait for %d seconds before shouting again.", myCoolDown[playerid]);
 	    return SendClientMessage(playerid, -1, string);
  	}
	if(IsPlayerInAnyVehicle(playerid))
	{
 		GetPlayerPos(playerid, x, y, z);
		CreateExplosion(x, y, z, 2, 10.0);
		SetPlayerHealth(playerid, 0.0);
  		return SendClientMessage(playerid, -1, "You shouted in a vehicle, thus creating an awesome explosion.");
	}
	GetPlayerPos(playerid, x, y, z);
	SendShoutSoundToAll(x, y, z, myShout[playerid]);
	SetTimerEx("ApplyShout", 1000, false, "ii", shouttype, playerid);
	if(shouttype == 0) SetPlayerChatBubble(playerid, "FUS RO DAH", -1, 35, 5000);
	else if(shouttype == 1) SetPlayerChatBubble(playerid, "WULD NAH KEST", -1, 35, 5000);
	else if(shouttype == 2) SetPlayerChatBubble(playerid, "ZUN HAL VIIK", -1, 35, 5000);
	else if(shouttype == 3) SetPlayerChatBubble(playerid, "YOL TOOR SHUL", -1, 35, 5000);
	else if(shouttype == 4) SetPlayerChatBubble(playerid, "FO KRAH DIIN", -1, 35, 5000);
	return 1;
}

CMD:setshout(playerid, params[])
{
	new shouttype, string[128];
	if(dragonBorn[playerid] == 0) return SendClientMessage(playerid, -1, " * You cannot shout, you are not the dragon born!");
	if(sscanf(params, "d", shouttype))
	{
	    SendClientMessage(playerid, -1, "Syntax: /setshout [shoutid]");
	    SendClientMessage(playerid, -1, "Unrelenting Force(0) Whirlwind Sprint(1) Disarm(2) Fire Breath(3) Frost Breath(4)");
		return 1;
	}
	if(shouttype > 4 || shouttype < 0) return SendClientMessage(playerid, -1, "Invalid ID");
	format(string, 128, "%s  >>>  %s", shoutNames[myShout[playerid]], shoutNames[shouttype]);
	SendClientMessage(playerid, -1, string);
	myShout[playerid] = shouttype;
	return 1;
}

LoadDragonBorn()
{
	new name[MAX_PLAYER_NAME + 1];
	new File: file = fopen("DragonBorns.txt", io_read);
	if (!fexist("DragonBorns.txt")) return print(">>>>>.DragonBorn.txt doesn not exits! make one in the folder.<<<<<<");
	else{
	    fread(file, dragonBorns);
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
		        GetPlayerName(i, name, sizeof(name));
		        if(strfind(dragonBorns, name, false) != -1) dragonBorn[i] = 1;
		        else dragonBorn[i] = 0;
			}
	    }
	}
	fclose(file);
	return 1;
}
DeletePlayerFromDragonBorn(playerid)
{
	new name[MAX_PLAYER_NAME + 1];
	new File: file = fopen("DragonBorns.txt", io_write);
	if (!fexist("DragonBorns.txt")) return print(">>>>>.DragonBorn.txt doesn not exits! make one in the folder.<<<<<<");
	else{
	    GetPlayerName(playerid, name, sizeof(name));
	    if(strfind(dragonBorns, name, false) == -1) return 1;
	    new spos = strfind(dragonBorns, name, false);
	    new epos = spos + strlen(name);
	    epos += 1;
	    strdel(dragonBorns, spos, epos);
	    fwrite(file, dragonBorns);
	}
	fclose(file);
	return 1;
}
AddPlayerToDragonBorn(playerid)
{
	new name[MAX_PLAYER_NAME + 1], string[30];
	new File: file = fopen("DragonBorns.txt", io_append);
	if (!fexist("DragonBorns.txt")) return print(">>>>>.DragonBorn.txt doesn not exits! make one in the folder.<<<<<<");
	if(strfind(dragonBorns, name, false) != -1) return 1;
	if((strlen(name) + strlen(dragonBorns) + 1) > 510) return 1;
	GetPlayerName(playerid, name, sizeof(name));
	format(string, sizeof(string), "%s,", name);
	strcat(dragonBorns, string, sizeof(dragonBorns));
	fwrite(file, string);
	fclose(file);
	return 1;
}

CMD:dhelp(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return 1;
	if(PlayerInfo[playerid][pAdmin] < 99999) {
		SendClientMessageEx(playerid, COLOR_WHITE, "** /ddisplay");
		return 1;
	}
	else { SendClientMessageEx(playerid, COLOR_WHITE, "** /ldb (loads) - /ddisplay - /adb (add) - /ddb (delete)"); }
	return 1;
}
CMD:ldb(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999) return 1;
	LoadDragonBorn();
	return 1;
}
CMD:ddisplay(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 4) return 1;
	if(strlen(dragonBorns) > 128)
	{
		new idx, string[512], string2[128];
		while( (strlen(dragonBorns) - idx) > 128 )
		{
			string = dragonBorns;
		    strmid(string2, string, idx, (idx + 120));
		    SendClientMessageEx(playerid, -1, string2);
		    string2 = "";
		    idx += 120;
		}
		if((strlen(dragonBorns) - idx) != 0)
		{
		    string = dragonBorns;
		    string2 = "";
		    strmid(string2, string, idx, strlen(string));
		    SendClientMessageEx(playerid, -1, string2);
		}
	}
	else SendClientMessage(playerid, -1, dragonBorns);
	return 1;
}
CMD:adb(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999) return 1;
	if(!IsPlayerConnected(strval(params))) return SendClientMessageEx(playerid, COLOR_YELLOW, " * Player Not connected.");
    AddPlayerToDragonBorn(strval(params));
    LoadDragonBorn();
	return 1;
}
CMD:ddb(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 99999) return 1;
	if(!IsPlayerConnected(strval(params))) return SendClientMessageEx(playerid, COLOR_YELLOW, " * Player Not connected.");
    DeletePlayerFromDragonBorn(strval(params));
    LoadDragonBorn();
	return 1;
}
forward ApplyShout(shouttype, senderid);
public ApplyShout(shouttype, senderid)
{
	new string[128], name[MAX_PLAYER_NAME + 1];
	GetPlayerName(senderid, name, sizeof(name));

	new Float: x, Float:y, Float:z, Float: xEx, Float: yEx;
	GetPlayerPos(senderid, x, y, z);
	GetXYInFrontOfPlayer(senderid, x, y, 5.0);
	GetXYInFrontOfPlayer(senderid, xEx, yEx, 10.0);

	//-------------------------------------------------------------------//

	if(shouttype == 1)
	{
	    new Float:angle, Float:xV, Float:yV;
	    GetPlayerPos(senderid, x, y, z);
	    GetPlayerFacingAngle(senderid, angle);
	    xV = (0.65 * floatsin(-angle, degrees));
		yV = (0.65 * floatcos(-angle, degrees));
		SetPlayerVelocity(senderid, xV, yV, 0.2);
		if(useCoolDown == 1) myCoolDown[senderid] += shoutCool[shouttype];
	    return 1;
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		if(IsPlayerConnected(i))
   		{
     		if(IsPlayerInRangeOfPoint(i, 5.0, x, y, z) || IsPlayerInRangeOfPoint(i, 8.0, xEx, yEx, z))
       		{
         		if(i != senderid)
				{
					if(shouttype == 0)
					{
						new Float: health, bool:inVeh;
						new Float: opX, Float: opY, Float:opZ, Float: xV, Float: yV, Float: fAngle;
						new Float: victimX, Float: victimY;
						GetPlayerPos(senderid, opX, opY, opZ);
						GetPlayerPos(i, victimX, victimY, opZ);
					 	fAngle = GetFacingPos(victimX, victimY, opX, opY);
					 	xV = (shoutspeed * floatsin(-fAngle, degrees));
						yV = (shoutspeed * floatcos(-fAngle, degrees));
						xV *= -1;
						yV *= -1;
						if (IsPlayerInAnyVehicle(i)) inVeh = true;
						GetPlayerHealth(i, health);
						if(inVeh)
						{
							xV *= 0.85;
							yV *= 0.85;
							SetVehicleVelocity(GetPlayerVehicleID(i), xV, yV, 0.5);
							inVeh = false;
						}
						else
						{
							health -= 2.0;
							SetPlayerVelocity(i, xV, yV, 0.3);
							SetPlayerHealth(i, health);
						}
				   	}
				   	else if(shouttype == 2)
				   	{
				   	    new weap = GetPlayerWeapon(senderid);
						shoutEffect[i][0] = 10;
						if(weap > 15 || weap < 43)SetPlayerArmedWeapon(i, 0);
						if(GetPlayerWeapon(i) != 0) GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~r~Disarmed~n~~g~Wait for 10 seconds", 2000, 3);
						else GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~g~Additional 10 seconds added - Disarm", 2000, 3);
						FallFromPlayer(senderid, i);
				   	}
				   	else if(shouttype == 3 || shouttype == 4)
				   	{
				   	    new Float:health;
				   	    if(shouttype == 3)
						{
					 		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~r~Fire Effect Added", 2000, 3);
					 		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~g~OH lord jesus there is a FiRe!", 2000, 3);
							if(IsPlayerInAnyVehicle(i))
							{
							    new Float: px, Float: py, Float: pz;
							    GetPlayerPos(i, px, py, pz);
							    CreateExplosion(px, py, pz, 7, 20);
							}
					 		shoutEffect[i][1] = 10;
						}
						else
						{
					 		GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~b~Frost Effect Added", 2000, 3);
					 		shoutEffect[i][2] = 10;
						}
		 				new slot = GetNextSlot(i);
				   	    if(slot == -1) SendClientMessage(i, -1, "No Object will be attached.");
						else
						{
						    if(shouttype == 3 && fireEffect[i] == -1)
							{
						 		SetPlayerAttachedObject(i, slot, 18692, 1, 0.0, 0.0, -1.613);
						 		fireEffect[i] = slot;
							}
						    else if(shouttype == 4 && frostEffect[i] == -1)
							{
						 		SetPlayerAttachedObject(i, slot, 18675, 1, -1.04, 0.18, -1.991);
						 		frostEffect[i] = slot;
							}
						}
						GetPlayerHealth(i, health);
						SetPlayerHealth(i, (health - 10.0));
						FallFromPlayer(senderid, i);
				   	}
				   	//---------------------------------------------//

				   	if(shouttype != 1)
				   	{
				   		format(string, sizeof(string), "%s has applied %s on you.", name, shoutNames[shouttype]);
						SendClientMessage(i, -1, string);
				   	}
				   	else SendClientMessage(i, -1, "Invalid shout ID passed.");//close if statement
   				}// not the command sender
      		}// range check
	    }//online check
	}//close loop
	if(useCoolDown == 1)
	{
	    if(shouttype == 0 || shouttype == 2 || shouttype == 3 || shouttype == 4) myCoolDown[senderid] += shoutCool[shouttype];
	}
 	return 1;
}//close function

forward SendShoutSoundToAll(Float:x, Float:y, Float:z, shouttype);
public SendShoutSoundToAll(Float:x, Float:y, Float:z, shouttype)
{
	if(shouttype == 0 || shouttype == 1 || shouttype == 2 || shouttype == 3 || shouttype == 4)
	{
	    for(new i = 0; i< MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInRangeOfPoint(i, 70.0, x, y, z))
	            {
		            if(shouttype == 0) PlayAudioStreamForPlayer(i, "http://images.wikia.com/elderscrolls/images/8/81/UnrelentingForce.ogg", x, y, z, 70.0, 1);
		            else if(shouttype == 1) PlayAudioStreamForPlayer(i, "http://images.wikia.com/elderscrolls/images/4/4b/Whirlwindsprint.ogg", x, y, z, 70.0, 1);
		            else if(shouttype == 2) PlayAudioStreamForPlayer(i, "http://images.wikia.com/elderscrolls/images/5/5c/Disarm.ogg", x, y, z, 70.0, 1);
		            else if(shouttype == 3) PlayAudioStreamForPlayer(i, "http://images.wikia.com/elderscrolls/images/f/f5/FireBreath.ogg", x, y, z, 70.0, 1);
		            else if(shouttype == 4) PlayAudioStreamForPlayer(i, "http://images.wikia.com/elderscrolls/images/a/aa/FrostBreath.ogg", x, y, z, 70.0, 1);
				}//range check
	        }//online checker
	    }//loop
	}
	else{
	    new string[128];
	    format(string, 128, "Invalid ID(%d) passed to X:%f, Y:%f, Z:%f", shouttype, x, y, z);
 		SendClientMessageToAll(-1, string);
	}
}

forward Float: GetFacingPos(Float: fromX, Float: fromY, Float: x, Float: y);
Float: GetFacingPos(Float: fromX, Float: fromY, Float:x, Float:y)//http://forum.sa-mp.com/showthread.php?t=38965&page=338
{
    new Float:angle;
    new Float:misc = 5.0;
    angle = 180.0-atan2(fromX-x,fromY-y);
    angle += misc;
    misc *= -1;
    angle += misc;
    return angle;
}

GetNextSlot(playerid)
{
	for(new i = 0; i < MAX_PLAYER_ATTACHED_OBJECTS; i++)
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, i)) return i;
	}
	return -1;
}

FallFromPlayer(playerid, victim)
{
	new Float: pX, Float: pY, Float: z, Float: vicX, Float: vicY, Float: angle;
	GetPlayerPos(playerid, pX, pY, z);
	GetPlayerPos(victim, vicX, vicY, z);
	angle = GetFacingPos(vicX, vicY, pX, pY);
	SetPlayerFacingAngle(victim, angle);
	ApplyAnimation(victim, "PED", "BIKE_fallR", 4.0, 0, 1, 1, 0, 0);
}

/*GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    // Credit: Y_Less

    new Float:a;

    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);

    if (GetPlayerVehicleID(playerid)) {
        GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }

    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}*/

// shout command and functions end here ======================================



public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) SendClientMessageEx(playerid, COLOR_WHITE, "Unknown command. Please use {01FCFF}/help {FFFFFF}to list all available commands.");
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[]) {

	if(gPlayerLogged{playerid} != 1) {
		SendClientMessageEx(playerid, COLOR_RED, "You are not logged in.");
		return 0;
	}

	playerLastTyped[playerid] = 0;
	printf("[zcmd] [%s]: %s", GetPlayerNameEx(playerid), cmdtext);

	if(PlayerInfo[playerid][pMuted] == 1) {
		SendClientMessageEx(playerid, COLOR_GREY, "You cannot speak, you have been silenced!");
		return 0;
	}
	if(CommandSpamUnmute[playerid] != 0) {
		SendClientMessage(playerid, COLOR_WHITE, "You are muted from submitting commands right now.");
		return 0;
	}
	if(++CommandSpamTimes[playerid] >= 5 && PlayerInfo[playerid][pAdmin] < 4) {
		CommandSpamTimes[playerid] = 0;
		CommandSpamUnmute[playerid] = 10;
		SendClientMessageEx(playerid, COLOR_YELLOW, "You have been muted automatically for spamming. Please wait 10 seconds and try again.");
		SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
		return 0;
	}

	if(strfindex(cmdtext, "|") != -1 || strfindex(cmdtext, "\n") != -1 || strfindex(cmdtext, "\r") != -1) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You cannot use non-standard characters in commands.");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 2 && strfindex(cmdtext, ":") != -1) {

		new
			i_numcount,
			i_period,
			i_pos;

		while(cmdtext[i_pos]) {
			if('0' <= cmdtext[i_pos] <= '9') i_numcount++;
			else if(cmdtext[i_pos] == '.') i_period++;
			i_pos++;
		}
		if(i_numcount >= 8 && i_period >= 3) {
			new string[128];
			format(string,sizeof(string),"Warning: %s (%d) may be server advertising: '%s'.", GetPlayerNameEx(playerid), playerid, cmdtext);
			ABroadCast(COLOR_RED, string, 2);
			Log("logs/serveradvertise.log", string);
			return 0;
		}
	}
	return 1;
}

public OnPlayerCommandText(playerid, cmdtext[])
{
	return 1;
}



ProxDetectorS(Float:radi, playerid, targetid) {

	if(WatchingTV[playerid] != 1)
	{
	    if(Spectating[targetid] != 0 && PlayerInfo[playerid][pAdmin] < 2)
	    {
	    	return 0;
	    }

		new
			Float: fp_playerPos[3];

		GetPlayerPos(targetid, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]);

		if(IsPlayerInRangeOfPoint(playerid, radi, fp_playerPos[0], fp_playerPos[1], fp_playerPos[2]) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid))
		{
			return 1;
		}
	}
	return 0;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetPlayerPos(playerid, x, y, a);
    GetPlayerFacingAngle(playerid, a);
    if (GetPlayerVehicleID(playerid))
    {
      GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
    }
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

GetXYInFrontOfVehicle(playerid, &Float:x, &Float:y, Float:distance)
{
    new Float:a;
    GetVehiclePos(playerid, x, y, a);
    GetVehicleZAngle(playerid, a);
    x += (distance * floatsin(-a, degrees));
    y += (distance * floatcos(-a, degrees));
}

stock IsInRangeOfPoint(Float: fPosX, Float: fPosY, Float: fPosZ, Float: fPosX2, Float: fPosY2, Float: fPosZ2, Float: fDist) {
    fPosX -= fPosX2;
	fPosY -= fPosY2;
    fPosZ -= fPosZ2;
    return ((fPosX * fPosX) + (fPosY * fPosY) + (fPosZ * fPosZ)) < (fDist * fDist);
}

forward HttpCallback_ShopIDCheck(index, response_code, data[]);
public HttpCallback_ShopIDCheck(index, response_code, data[])
{
	new string[128], shopstring[512], shoptechs, confirmed = strval(data);
	PlayerInfo[index][pOrderConfirmed] = confirmed;

	if(response_code == 200)
	{
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pShopTech] > 0)
			{
				shoptechs++;
			}
		}

		if(shoptechs > 0)
		{
			if(confirmed)
			{
				format(shopstring, sizeof(shopstring), "{FFFFFF}You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nShop Techs Online: %d\n\nNOTE: The shop order remains pending even if you go offline and log back in.", PlayerInfo[index][pOrder], shoptechs);
				ShowPlayerDialog(index, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "{3399FF}Shop Order", shopstring, "Close", "");

				format(string, sizeof(string), "Shop order ID %d from %s (ID: %d) is now pending.", PlayerInfo[index][pOrder], GetPlayerNameEx(index), index);
				ShopTechBroadCast(COLOR_SHOP, string);
			}
			else
			{
				format(shopstring, sizeof(shopstring), "{FFFFFF}You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nShop Techs Online: %d\n\nNOTE: The shop order remains pending even if you go offline and log back in.", PlayerInfo[index][pOrder], shoptechs);
				ShowPlayerDialog(index, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "{3399FF}Shop Order", shopstring, "Close", "");

				format(string, sizeof(string), "Shop order ID %d from %s (ID: %d) is now pending.", PlayerInfo[index][pOrder], GetPlayerNameEx(index), index);
				ShopTechBroadCast(COLOR_SHOP, string);
			}
		}
		else
		{
			if(confirmed)
			{
				format(shopstring, sizeof(shopstring), "{FFFFFF}You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nThere are currently no shop techs online, you can resume normal gameplay and a shop tech will be with you when they log on.\n\nNOTE: The shop order remains pending even if you go offline and log back in.", PlayerInfo[index][pOrder]);
				ShowPlayerDialog(index, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "{3399FF}Shop Order", shopstring, "Close", "");
			}
			else
			{
				format(shopstring, sizeof(shopstring), "{FFFFFF}You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nThere are currently no shop techs online, you can resume normal gameplay and a shop tech will be with you when they log on.\n\nNOTE: The shop order remains pending even if you go offline and log back in.", PlayerInfo[index][pOrder]);
				ShowPlayerDialog(index, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "{3399FF}Shop Order", shopstring, "Close", "");
			}
		}
		new playerip[32];
		GetPlayerIp(index, playerip, sizeof(playerip));
		format(string, sizeof(string), "Shop order ID %d from %s(IP: %s) is now pending.", PlayerInfo[index][pOrder], GetPlayerNameEx(index), playerip);
		Log("logs/shoporders.log", string);
	}
	else
	{
		PlayerInfo[index][pOrder] = 0;
		PlayerInfo[index][pOrderConfirmed] = 0;
		ShowPlayerDialog(index, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX, "{3399FF}Shop Order - Server Connection Error", "{FFFFFF}We are unable to process your order at this time.\n\nPlease try again later.", "Close", "");
	}
}

public OnPlayerText(playerid, text[])
{
	if(gPlayerLogged{playerid} != 1)
	{
		SendClientMessageEx(playerid, COLOR_RED, "You are not logged in.");
		return 0;
	}

	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new string[128];
	playerLastTyped[playerid] = 0;


	if(TextSpamUnmute[playerid] != 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 2)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You are muted from submitting text right now.");
			return 0;
		}
	}

	if(PlayerInfo[playerid][pAdmin] < 2)
	{
		if(++TextSpamTimes[playerid] == 5)
		{
			TextSpamTimes[playerid] = 0;
			TextSpamUnmute[playerid] = 10;
			SendClientMessageEx(playerid, COLOR_YELLOW, "You have been muted automatically for spamming. Please wait 10 seconds and try again.");
			SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_FLOODPROTECTION);
			return 0;
		}
	}

	/*if(PlayerInfo[playerid][pAdminDuty] == 1)
	{
        format(string, sizeof(string), "{FF6347}%s{FFFFFF} says: %s", GetPlayerNameEx(playerid), text);
       	ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
        return 0;
    }*/


 	/*Compares last string with current, if the same, alert the staff only on the 3rd command. (Expires after 5 secs)
	if(PlayerInfo[playerid][pAdmin] < 2) {
		new laststring[128];
		if(GetPVarString(playerid, "LastText", laststring, 128)) {
			if(!strcmp(laststring, text, true)) {
				TextSpamTimes[playerid]++;

				if(TextSpamTimes[playerid] == 2) {
					TextSpamTimer[playerid] = 30;
					TextSpamTimes[playerid] = 0;
					format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) is spamming with: %s", GetPlayerNameEx(playerid), playerid, text);
					ABroadCast(COLOR_YELLOW, string, 2);
				}
			}
		}
		SetPVarString(playerid, "LastText", text);
	}*/

	if(strfindex(text, "|", true) != -1) {
	    SendClientMessageEx(playerid, COLOR_RED, "You cannot use the '|' character in text.");
		return 0;
	}

	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You cannot speak, you have been silenced!");
		return 0;
	}

	if(PlayerInfo[playerid][pAdmin] < 2) {
		if(strfindex(text, ":", true) != -1) {
			new
				i_numcount,
				i_period,
				i_pos;

			while(text[i_pos]) {
				if('0' <= text[i_pos] <= '9') i_numcount++;
				else if(text[i_pos] == '.') i_period++;
				i_pos++;
			}
			if(i_numcount >= 8 && i_period >= 3) {
				format(string,sizeof(string),"Warning: %s (%d) may be server advertising: '%s'.", GetPlayerNameEx(playerid),playerid,text);
				ABroadCast(COLOR_RED, string, 2);
				Log("logs/hack.log", string);
				return 0;
			}
		}
	}

	if(GetPVarInt(playerid, "ChoosingDrugs") == 1)
	{
		if (strcmp("pot", text, true) == 0)
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
				{
					mypoint = i;
				}
			}
			if (mypoint == -1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Drug Factory!");
				return 0;
			}
			if(PlayerInfo[playerid][pCrates])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You can't hold any more Drug Crates!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				return 0;
			}
			if(GetPlayerCash(playerid) > 1000)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought some Drug Crates for $1000.");
				GivePlayerCash(playerid, -1000);
				PlayerInfo[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 1);
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 2166.3772,-1675.3829,15.0859, 3);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] += 500;
					}
				}
				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
   				return 0;
			}
		}
		else if (strcmp("crack", text, true) == 0)
		{
			new mypoint = -1;
			for (new i=0; i<MAX_POINTS; i++)
			{
				if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && strcmp(Points[i][Name], "Drug Factory", true) == 0)
				{
					mypoint = i;
				}
			}
			if (mypoint == -1)
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You are not at the Drug Factory!");
				return 0;
			}
			if(PlayerInfo[playerid][pCrates])
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   You can't hold any more drug crates!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				return 0;
			}
			if(GetPlayerCash(playerid) > 1000)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You bought some drug crates for $1000.");
				GivePlayerCash(playerid, -1000);
				PlayerInfo[playerid][pCrates] = 1;
				SetPVarInt(playerid, "CrateDeliver", 2);
				SetPVarInt(playerid, "ChoosingDrugs", 0);
				SetPVarInt(playerid, "tpDrugRunTimer", 45);
				SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_TPDRUGRUNTIMER);
				SetPlayerCheckpoint(playerid, 2354.2808,-1169.2959,28.0066, 3);
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
					{
						FamilyInfo[i][FamilyBank] += 500;
					}
				}
				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY," You can't afford the $1000!");
				SetPVarInt(playerid, "ChoosingDrugs", 0);
   				return 0;
			}
		}
		else
		{
	 		SendClientMessageEx(playerid, COLOR_LIGHTRED,"What type of drugs would you like to smuggle? Type 'crack' or 'pot'.");
			return 0;
		}
	}

	if(SelectFChar[playerid] == 255)
	{
		if (strcmp("next", text, true) == 0) {
		    new f2text;
			f2text = PlayerInfo[playerid][pFMember];

			if(FamilyInfo[f2text][FamilyMaxSkins] == 1)
			{
 			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
 			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 2)
			{
			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 1; }
			}


			if(FamilyInfo[f2text][FamilyMaxSkins] == 3)
			{
			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 1; }
			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 3)
			{
			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 1; }
			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 4)
			{
 			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 4; }
			else if(SelectFCharPlace[playerid] == 4) { SetFamilySkin(playerid, 3); SelectFCharPlace[playerid] = 1; }
			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 5)
			{
 			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 4; }
			else if(SelectFCharPlace[playerid] == 4) { SetFamilySkin(playerid, 3); SelectFCharPlace[playerid] = 5; }
			else if(SelectFCharPlace[playerid] == 5) { SetFamilySkin(playerid, 4); SelectFCharPlace[playerid] = 1; }
			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 6)
			{
			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 4; }
			else if(SelectFCharPlace[playerid] == 4) { SetFamilySkin(playerid, 3); SelectFCharPlace[playerid] = 5; }
			else if(SelectFCharPlace[playerid] == 5) { SetFamilySkin(playerid, 4); SelectFCharPlace[playerid] = 6; }
			else if(SelectFCharPlace[playerid] == 6) { SetFamilySkin(playerid, 5); SelectFCharPlace[playerid] = 1; }
			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 7)
			{
 			if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 4; }
			else if(SelectFCharPlace[playerid] == 4) { SetFamilySkin(playerid, 3); SelectFCharPlace[playerid] = 5; }
			else if(SelectFCharPlace[playerid] == 5) { SetFamilySkin(playerid, 4); SelectFCharPlace[playerid] = 6; }
			else if(SelectFCharPlace[playerid] == 6) { SetFamilySkin(playerid, 5); SelectFCharPlace[playerid] = 7; }
			else if(SelectFCharPlace[playerid] == 7) { SetFamilySkin(playerid, 6); SelectFCharPlace[playerid] = 1; }
			}

			if(FamilyInfo[f2text][FamilyMaxSkins] == 8)
			{
	 		if(SelectFCharPlace[playerid] == 1) { SetFamilySkin(playerid, 0); SelectFCharPlace[playerid] = 2; }
			else if(SelectFCharPlace[playerid] == 2) { SetFamilySkin(playerid, 1); SelectFCharPlace[playerid] = 3; }
			else if(SelectFCharPlace[playerid] == 3) { SetFamilySkin(playerid, 2); SelectFCharPlace[playerid] = 4; }
			else if(SelectFCharPlace[playerid] == 4) { SetFamilySkin(playerid, 3); SelectFCharPlace[playerid] = 5; }
			else if(SelectFCharPlace[playerid] == 5) { SetFamilySkin(playerid, 4); SelectFCharPlace[playerid] = 6; }
			else if(SelectFCharPlace[playerid] == 6) { SetFamilySkin(playerid, 5); SelectFCharPlace[playerid] = 7; }
			else if(SelectFCharPlace[playerid] == 7) { SetFamilySkin(playerid, 6); SelectFCharPlace[playerid] = 8; }
			else if(SelectFCharPlace[playerid] == 8) { SetFamilySkin(playerid, 7); SelectFCharPlace[playerid] = 1; }
			}
			return 0;
		}
		else if (strcmp("done", text, true) == 0)
		{
			PlayerInfo[playerid][pModel] = ChosenSkin[playerid];
			PlayerInfo[playerid][pInt] = GetPVarInt(playerid, "tmpPosi");
			SetPVarInt(playerid, "MedicBill", 0);
			SelectFCharPlace[playerid] = 0;
			SelectFCharID[playerid] = 0;
			SelectFChar[playerid] = 0;
   			TogglePlayerControllable(playerid,1);
			SetPlayerInterior(playerid,PlayerInfo[playerid][pInt]);
			SetPlayerPosEx(playerid, GetPVarFloat(playerid, "tmpPosx"),GetPVarFloat(playerid, "tmpPosy"),GetPVarFloat(playerid, "tmpPosz"));
			SetPlayerFacingAngle(playerid, GetPVarFloat(playerid, "tmpPosa"));
			SetCameraBehindPlayer(playerid);
			DeletePVar(playerid, "tmpPosx");
			DeletePVar(playerid, "tmpPosy");
			DeletePVar(playerid, "tmpPosz");
			DeletePVar(playerid, "tmpPosa");
			DeletePVar(playerid, "tmpPosi");
			return 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Use 'next', or 'done'.");
			return 0;
		}
	}
	if(MarriageCeremoney[playerid] > 0)
	{
		if (strcmp("yes", text, true) == 0)
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "Priest: %s do you take %s as your lovely wife? (Type 'yes' - anything else will reject the marriage).", giveplayer,sendername);
					SendClientMessageEx(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = INVALID_PLAYER_ID;
					return 0; // Yeah... no more "YES DILDOS SEX RAPE LOL" broadcast to the whole server
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = INVALID_PLAYER_ID;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Wife, you may kiss the bride.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Wife, you may kiss the groom.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new lovely couple! %s & %s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Husband, you may kiss the bride.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Husband & Husband, you may kiss the groom.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new gay couple! %s & %s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Wife & Wife, you may kiss the Bride.", sendername, giveplayer);
						SendClientMessageEx(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Priest: %s and %s i pronounce you now... Wife & Wife, you may kiss the Groom.", giveplayer, sendername);
						SendClientMessageEx(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Marriage News: We have a new lesbian couple! %s & %s have been married.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(PlayerInfo[ProposedTo[playerid]][pMarriedTo], MAX_PLAYER_NAME, "%s", sendername);
					format(PlayerInfo[playerid][pMarriedTo], MAX_PLAYER_NAME, "%s", giveplayer);
					GivePlayerCash(playerid, - 100000);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					ProposedTo[playerid] = INVALID_PLAYER_ID;
					MarriageCeremoney[playerid] = 0;
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = INVALID_PLAYER_ID;
					return 0;
				}
			}
		}
		else
		{
			if(GotProposedBy[playerid] < 999)
			{
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					format(string, sizeof(string), "* You didn't want to marry %s, no 'yes' was said.", GetPlayerNameEx(GotProposedBy[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s did't want to marry you, no 'yes' was said.",GetPlayerNameEx(playerid));
					SendClientMessageEx(GotProposedBy[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = INVALID_PLAYER_ID;
					return 0;
				}
			}
			else if(ProposedTo[playerid] < 999)
			{
				if(IsPlayerConnected(ProposedTo[playerid]))
				{
					format(string, sizeof(string), "* You didn't want to marry %s, no 'yes' was said.",GetPlayerNameEx(ProposedTo[playerid]));
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					format(string, sizeof(string), "* %s did't want to marry you, no 'yes' was said.",GetPlayerNameEx(playerid));
					SendClientMessageEx(ProposedTo[playerid], COLOR_YELLOW, string);
					return 0;
				}
				else
				{
					MarriageCeremoney[playerid] = 0;
					ProposedTo[playerid] = INVALID_PLAYER_ID;
					return 0;
				}
			}
		}
		return 0;
	}
	if(CallLawyer[playerid] == 111)
	{
		if (strcmp("yes", text, true) == 0)
		{
			format(string, sizeof(string), "** %s (%d) is in jail, and needs a lawyer. Go to the Police Station.", GetPlayerNameEx(playerid),playerid);
			SendJobMessage(2, TEAM_AZTECAS_COLOR, string);
			SendJobMessage(2, TEAM_AZTECAS_COLOR, "* When you are at the Police Station, ask an officer to approve you with /accept lawyer.");
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "A message has been sent to all available lawyers, please wait.");
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
			return 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTRED, "There is no lawyer available to you anymore. Jail time has started.");
			WantLawyer[playerid] = 0;
			CallLawyer[playerid] = 0;
			return 0;
		}
	}
	if(TalkingLive[playerid] != INVALID_PLAYER_ID)
	{
		if(PlayerInfo[playerid][pJob] == 6 || PlayerInfo[playerid][pJob2] == 6)
		{
			format(string, sizeof(string), "Live News Reporter %s (%d): %s", GetPlayerNameEx(playerid),playerid, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		else
		{
			format(string, sizeof(string), "Live Interview Guest %s (%d): %s", GetPlayerNameEx(playerid),playerid, text);
			OOCNews(COLOR_LIGHTGREEN, string);
		}
		return 0;
	}
	if(Mobile[playerid] != INVALID_PLAYER_ID)
	{
		format(string, sizeof(string), "(cellphone) %s (%d) says: %s", GetPlayerNameEx(playerid),playerid, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		if(Mobile[playerid] == 914)
		{
			if(!text[0])
			{
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Dispatch: Sorry, I don't understand?");
				return 0;
			}
			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Dispatch: We have alerted all units in the area.");
			SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Thank you for reporting this incident");
			if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) format(string, sizeof(string), "Dispatch: All Units IA: Caller: Unknown.",GetPlayerNameEx(playerid),playerid);
			else format(string, sizeof(string), "Dispatch: All Units IA: Caller: %s (%d)",GetPlayerNameEx(playerid),playerid);
			SendFamilyMessage(4, COLOR_TWPINK, string);
			format(string, sizeof(string), "Dispatch: Incident: %s",text);
			SendFamilyMessage(4, COLOR_TWPINK, string);

			CalledMedics[playerid] = 1;
			MedicsCallTime[playerid] = 60;
			ShowPlayerBeaconForMedics(playerid);
			SendClientMessageEx(playerid, COLOR_GRAD2, "   They hung up...");
			Mobile[playerid] = INVALID_PLAYER_ID;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!text[0])
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			if(strcmp("no", text, true) == 0)
			{
				SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: We have alerted all units in the area.");
				SendClientMessageEx(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
				if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) format(string, sizeof(string), "HQ: All Units APB: Reporter: Unknown.",GetPlayerNameEx(playerid));
				else format(string, sizeof(string), "HQ: All Units APB: Reporter: %s",GetPlayerNameEx(playerid),playerid);
				SendFamilyMessage(1, COLOR_DBLUE, string);
				SendFamilyMessage(2, COLOR_DBLUE, string);
				SendFamilyMessage(3, COLOR_DBLUE, string);
				SendFamilyMessage(7, COLOR_DBLUE, string);
				SendFamilyMessage(13, COLOR_DBLUE, string);
				format(string, sizeof(string), "HQ: Crime: %s, Suspect: Unknown",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, string);
				SendFamilyMessage(2, COLOR_DBLUE, string);
				SendFamilyMessage(3, COLOR_DBLUE, string);
				SendFamilyMessage(7, COLOR_DBLUE, string);
				SendFamilyMessage(13, COLOR_DBLUE, string);
				CalledCops[playerid] = 1;
				CopsCallTime[playerid] = 60;
				ShowPlayerBeaconForCops(playerid);
				SendClientMessageEx(playerid, COLOR_GRAD2, "   They hung up...");
				Mobile[playerid] = INVALID_PLAYER_ID;
				return 0;
			}
			new badguy = ReturnUser(text);
			if (IsPlayerConnected(badguy))
			{
				if(badguy != INVALID_PLAYER_ID)
				{
					if (PlayerInfo[badguy][pWantedLevel] > 0)
					{
						SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: Units are already assigned to that case...");
						SendClientMessageEx(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
						SendClientMessageEx(playerid, COLOR_GRAD2, "   They hung up...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: Don't fool around. This is an emergency line.");
						SendClientMessageEx(playerid, COLOR_GRAD2, "   They hung up...");
						Mobile[playerid] = INVALID_PLAYER_ID;
						return 0;
					}
					SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: We have alerted all units in the area.");
					SendClientMessageEx(playerid, COLOR_DBLUE, "Thank you for reporting this crime.");
					if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) format(string, sizeof(string), "HQ: All Units APB: Reporter: Unknown.",GetPlayerNameEx(playerid));
					else format(string, sizeof(string), "HQ: All Units APB: Reporter: %s",GetPlayerNameEx(playerid));
					SendFamilyMessage(1, COLOR_DBLUE, string);
					SendFamilyMessage(2, COLOR_DBLUE, string);
					SendFamilyMessage(3, COLOR_DBLUE, string);
					SendFamilyMessage(7, COLOR_DBLUE, string);
					SendFamilyMessage(13, COLOR_DBLUE, string);
					format(string, sizeof(string), "HQ: Crime: %s, Suspect: Unknown",PlayerCrime[playerid][pAccusing]);
					SendFamilyMessage(1, COLOR_DBLUE, string);
					SendFamilyMessage(2, COLOR_DBLUE, string);
					SendFamilyMessage(3, COLOR_DBLUE, string);
					SendFamilyMessage(7, COLOR_DBLUE, string);
					SendFamilyMessage(13, COLOR_DBLUE, string);
					CalledCops[playerid] = 1;
					CopsCallTime[playerid] = 60;
					ShowPlayerBeaconForCops(playerid);
					SendClientMessageEx(playerid, COLOR_GRAD2, "   They hung up...");
					Mobile[playerid] = INVALID_PLAYER_ID;
					return 0;
				}
				return 0;
			}
			else
			{
				format(string, sizeof(string), "Police HQ: I have no information on %s, are you sure that's the correct name?",text);
				SendClientMessageEx(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!text[0])
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: If you know the assailant's name or part of it say it now or just say no.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!text[0])
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
			else if (strcmp("police", text, true) == 0)
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to police headquarters, please hold...");
				Mobile[playerid] = 912;
				SendClientMessageEx(playerid, COLOR_DBLUE, "Police HQ: Please give me a short description of the crime.");
				return 0;
			}
			else if (strcmp("paramedic", text, true) == 0)
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: I am patching you to FDSA headquarters, please hold...");
				Mobile[playerid] = 914;
				SendClientMessageEx(playerid, TEAM_CYAN_COLOR, "Dispatch: Please give me a short description of the incident.");
				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_ALLDEPT, "EMERGENCY: Sorry, I don't understand - police or paramedic?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
			if(Mobile[Mobile[playerid]] == playerid)
			{
				if(PlayerInfo[Mobile[playerid]][pSpeakerPhone] != 0)
				{
				    format(string, sizeof(string), "(speakerphone) %s (%d) says: %s", GetPlayerNameEx(playerid),playerid, text);
					ProxDetector(20.0, Mobile[playerid], string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
				}
				else
				{
				    SendClientMessageEx(Mobile[playerid], COLOR_YELLOW,string);
				}
				if(PlayerInfo[playerid][pBugged] >= 1)
				{
					format(string, sizeof(string), "(bug) %s (%d) (cellphone): %s", GetPlayerNameEx(playerid),playerid, text);
					SendBugMessage(PlayerInfo[playerid][pBugged], COLOR_LIGHTGREEN, string);
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_YELLOW,"There's nobody there!");
		}
		return 0;
	}

	sendername = GetPlayerNameEx(playerid);

	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
		new a = GetPVarInt(playerid, "IsInArena");
		if(PaintBallArena[a][pbGameType] == 2 || PaintBallArena[a][pbGameType] == 3 || PaintBallArena[a][pbGameType] == 5)
		{
			if(PlayerInfo[playerid][pPaintTeam] == 1)
			{
				format(string, sizeof(string), "[Paintball Arena] ({FF0000}Red Team{FFFFFF}) %s (%d) says: %s", sendername,playerid, text);
			}
			if(PlayerInfo[playerid][pPaintTeam] == 2)
			{
				format(string, sizeof(string), "[Paintball Arena] ({0000FF}Blue Team{FFFFFF}) %s (%d) says: %s", sendername,playerid, text);
			}
		}
		else
		{
			format(string, sizeof(string), "[Paintball Arena] %s (%d) says: %s", sendername,playerid, text);
		}
		SendPaintballArenaMessage(a, COLOR_WHITE, string);
		return 0;
	}
	switch(PlayerInfo[playerid][pAccent])
	{
		case 0, 1:
		{
			format(string, sizeof(string), "%s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid,string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 2:
		{
			format(string, sizeof(string), "(British accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 3, 4, 5:
		{
			format(string, sizeof(string), "(Asian accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 6:
		{
			format(string, sizeof(string), "(Scottish accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 7:
		{
			format(string, sizeof(string), "(Irish accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 8:
		{
			format(string, sizeof(string), "(Russian accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 9:
		{
			format(string, sizeof(string), "(American accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 10, 12:
		{
			format(string, sizeof(string), "(Spanish accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 11:
		{
			format(string, sizeof(string), "(Southern Accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 13:
		{
			format(string, sizeof(string), "(Italian accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 14:
		{
			format(string, sizeof(string), "(Gangster accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 15:
		{
			format(string, sizeof(string), "(Australian accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 16:
		{
			format(string, sizeof(string), "(Arabic accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 17:
		{
			format(string, sizeof(string), "(Balkan accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 18:
		{
			format(string, sizeof(string), "(Canadian accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 19:
		{
			format(string, sizeof(string), "(Jamaican accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 20:
		{
			format(string, sizeof(string), "(Israeli accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 21:
		{
			format(string, sizeof(string), "(Dutch accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 22:
		{
			format(string, sizeof(string), "(Brazilian accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
		case 23:
		{
			format(string, sizeof(string), "(German accent) %s (%d) says: %s", sendername,playerid, text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5,1);
			SetPlayerChatBubble(playerid,text,COLOR_WHITE,20.0,5000);
		}
	}
	format(string, sizeof(string), "(BE) %s (%d): %s", GetPlayerNameEx(playerid),playerid, text);
	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pAdmin] > 1 && BigEar[i] == 3)
	    {
	        SendClientMessageEx(i, COLOR_WHITE, string);
		}
	}
	return 0;
}
forward SetCamBack(playerid);
public SetCamBack(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPosEx(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}
forward FixHour(hourt);
public FixHour(hourt)
{
	hourt = timeshift+hourt;
	if (hourt < 0)
	{
		hourt = hourt+24;
	}
	else if (hourt > 23)
	{
		hourt = hourt-24;
	}
	shifthour = hourt;
	return 1;
}

//----------------------[ Remove Bomb ]-----------------------
forward PickUpC4(playerid);
public PickUpC4(playerid)
{
   	DestroyDynamicObject(PlayerInfo[playerid][pC4]);
   	PlayerInfo[playerid][pC4] = 0;
	return 1;
}

forward Top50HTTP(index, response_code, data[]);
public Top50HTTP(index, response_code, data[])
{
	DeletePVar(index, "pHTTPWait");
	new szMessage[128];
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,TOP50LIST,DIALOG_STYLE_LIST,"Select a Station",data,"Select", "Back");
	}
	else
	{
	format(szMessage, sizeof(szMessage), "Request failed, the Response code returned: %d", response_code);
	SendClientMessageEx(index, COLOR_WHITE, szMessage);
	}
	return 1;
}

forward Top50InfoHTTP(index, response_code, data[]);
public Top50InfoHTTP(index, response_code, data[])
{
	DeletePVar(index, "pHTTPWait");
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,TOP50LISTEN,DIALOG_STYLE_MSGBOX,"Are you sure?",data,"Listen", "Back");
	}
	return 1;
}

forward MyHttpResponse(index, response_code, data[]);
public MyHttpResponse(index, response_code, data[])
{
	new string[1024];
 	if(response_code == 200)
 	{
	strcat(string,data,sizeof(string));
	ShowPlayerDialog(index,0,DIALOG_STYLE_MSGBOX,"Information",string,"Close","");
	}
	return 1;
}

forward GenreHTTP(index, response_code, data[]);
public GenreHTTP(index, response_code, data[])
{
	DeletePVar(index, "pHTTPWait");
	new szMessage[128];
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,GENRES,DIALOG_STYLE_LIST,"Genres",data,"Select", "Back");
	}
	else
	{
	format(szMessage, sizeof(szMessage), "Request failed, the Response code returned: %d", response_code);
	SendClientMessageEx(index, COLOR_WHITE, szMessage);
	}
	return 1;
}

forward StationListHTTP(index, response_code, data[]);
public StationListHTTP(index, response_code, data[])
{
    DeletePVar(index, "pHTTPWait");
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,STATIONLIST,DIALOG_STYLE_LIST,"Stations",data,"Select", "Back");
	}
	return 1;
}

forward StationInfoHTTP(index, response_code, data[]);
public StationInfoHTTP(index, response_code, data[])
{
    DeletePVar(index, "pHTTPWait");
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,STATIONLISTEN,DIALOG_STYLE_MSGBOX,"Station Info",data,"Listen", "Back");
	}
	return 1;
}

forward StationSelectHTTP(index, response_code, data[]);
public StationSelectHTTP(index, response_code, data[])
{
    DeletePVar(index, "pHTTPWait");
    HideNoticeGUIFrame(index);
 	if(response_code == 200)
 	{
		if(IsPlayerInAnyVehicle(index))
		{
	 	    foreach(new i: Player) if(GetPlayerVehicleID(i) != 0 && GetPlayerVehicleID(i) == GetPlayerVehicleID(index)) {
				PlayAudioStreamForPlayerEx(i, data);
		  	}
		  	format(stationidv[GetPlayerVehicleID(index)], 64, "%s", data);
		  	new string[53];
		  	format(string, sizeof(string), "* %s changes the radio station.", GetPlayerNameEx(index), string);
			ProxDetector(10.0, index, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	        DeletePVar(index, "pSelectGenre");
	        DeletePVar(index, "pSelectStation");
		}
		else if(GetPVarType(index, "pBoomBox"))
		{
		    foreach(new i: Player)
			{
				if(IsPlayerInDynamicArea(i, GetPVarInt(index, "pBoomBoxArea")))
				{
					PlayAudioStreamForPlayerEx(i, data, GetPVarFloat(index, "pBoomBoxX"), GetPVarFloat(index, "pBoomBoxY"), GetPVarFloat(index, "pBoomBoxZ"), 30.0, 1);
				}
			}
		  	SetPVarString(index, "pBoomBoxStation", data);
		}
		else
		{
		    PlayAudioStreamForPlayerEx(index, data);
		    SetPVarInt(index, "MusicIRadio", 1);
		}
	}
	return 1;
}

forward StationSearchHTTP(index, response_code, data[]);
public StationSearchHTTP(index, response_code, data[])
{
    DeletePVar(index, "pHTTPWait");
    HideNoticeGUIFrame(index);
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,STATIONSEARCHLIST,DIALOG_STYLE_LIST,"Stations",data,"Select", "Back");
	}
	return 1;
}

forward StationSearchInfoHTTP(index, response_code, data[]);
public StationSearchInfoHTTP(index, response_code, data[])
{
    DeletePVar(index, "pHTTPWait");
    HideNoticeGUIFrame(index);
 	if(response_code == 200)
 	{
		ShowPlayerDialog(index,STATIONSEARCHLISTEN,DIALOG_STYLE_MSGBOX,"Station Info",data,"Listen", "Back");
	}
	return 1;
}

stock GetPlayerPriority(Player)
{
	if(PlayerInfo[Player][pDonateRank] >= 4) return 2;
	else if(PlayerInfo[Player][pAdmin] >= 1 || PlayerInfo[Player][pHelper] >= 2) return 3;
	else return 4;
}

IsPlayerInRangeOfDynamicObject(iPlayerID, iObjectID, Float: fRadius) {

	new
		Float: fPos[3];

	GetDynamicObjectPos(iObjectID, fPos[0], fPos[1], fPos[2]);
	return IsPlayerInRangeOfPoint(iPlayerID, fRadius, fPos[0], fPos[1], fPos[2]);
}

stock ShowEditMenu(playerid)
{
	new
		iIndex = GetPVarInt(playerid, "ToySlot");

    if(IsPlayerAttachedObjectSlotUsed(playerid, iIndex))
	{
 		RemovePlayerAttachedObject(playerid, iIndex);
	}
	if(PlayerToyInfo[playerid][iIndex][ptScaleX] == 0) {
		PlayerToyInfo[playerid][iIndex][ptScaleX] = 1.0;
		PlayerToyInfo[playerid][iIndex][ptScaleY] = 1.0;
		PlayerToyInfo[playerid][iIndex][ptScaleZ] = 1.0;
	}

	SetPlayerAttachedObject(playerid, iIndex, PlayerToyInfo[playerid][iIndex][ptModelID],
	PlayerToyInfo[playerid][iIndex][ptBone], PlayerToyInfo[playerid][iIndex][ptPosX],
	PlayerToyInfo[playerid][iIndex][ptPosY], PlayerToyInfo[playerid][iIndex][ptPosZ],
	PlayerToyInfo[playerid][iIndex][ptRotX], PlayerToyInfo[playerid][iIndex][ptRotY],
	PlayerToyInfo[playerid][iIndex][ptRotZ], PlayerToyInfo[playerid][iIndex][ptScaleX],
	PlayerToyInfo[playerid][iIndex][ptScaleY], PlayerToyInfo[playerid][iIndex][ptScaleZ]);

    new stringg[128];
    format(stringg, sizeof(stringg), "Bone (%s)\nOffset", HoldingBones[PlayerToyInfo[playerid][iIndex][ptBone]]);
 	ShowPlayerDialog(playerid, EDITTOYS2, DIALOG_STYLE_LIST, "Toy Menu: Edit", stringg, "Select", "Cancel");
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	new sendername[MAX_PLAYER_NAME];
	new string[128];
/*
	// Crash Bug Fix
 	if(strfindex(inputtext, "%", true) != -1 || strfindex(inputtext, "{", true) != -1 || strfindex(inputtext, "}", true) != -1)
  	{
  	    SendClientMessageEx(playerid, COLOR_GREY, "Invalid Character, please try again.");
		return 1;
	}
*/
	if(RegistrationStep[playerid] != 0)
	{
	    if(dialogid == REGISTERSEX)
	    {
		    if(response)
		    {
		        new stringdiag[410];
				for(new x=18;x<99;x++)
				{
					format(stringdiag, sizeof(stringdiag), "%s%d\n", stringdiag, x);
				}
			    if(listitem == 0)
			    {
					PlayerInfo[playerid][pSex] = 1;
					SendClientMessageEx(playerid, COLOR_YELLOW2, "Alright, so you're a male.");
					ShowPlayerDialog(playerid, REGISTERAGE, DIALOG_STYLE_LIST, "{FF0000}What is your characters age?", stringdiag, "Submit", "");
					RegistrationStep[playerid] = 2;
				}
				else
				{
					PlayerInfo[playerid][pSex] = 2;
					SendClientMessageEx(playerid, COLOR_YELLOW2, "Alright, so you're a female.");
					ShowPlayerDialog(playerid, REGISTERAGE, DIALOG_STYLE_LIST, "{FF0000}What is your characters age?", stringdiag, "Submit", "");
					RegistrationStep[playerid] = 2;
				}
			}
			else
			{
			    ShowPlayerDialog(playerid, REGISTERSEX, DIALOG_STYLE_LIST, "{FF0000}Is your character male or female?", "Male\nFemale", "Submit", "");
			}
		}
		else if(dialogid == REGISTERAGE)
	    {
		    if(response)
		    {
	      		PlayerInfo[playerid][pAge] = listitem+18;
				PlayerInfo[playerid][pOrigin] = 0;
				format(string, sizeof(string), "Ok, so you are %d year old.",PlayerInfo[playerid][pAge]);
				SendClientMessageEx(playerid, COLOR_YELLOW2, string);
				ShowPlayerDialog(playerid, CHOOSELOCATION, DIALOG_STYLE_LIST, "{FF0000}Where do you want to start?", "Los Santos", "Submit", "");
				/*SendClientMessageEx(playerid, COLOR_LIGHTRED, "Thanks for filling in all the information!");
				RegistrationStep[playerid] = 0;
				SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pTut] = 1;
			gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
			TogglePlayerControllable(playerid, 1);
			SetCamBack(playerid);
			DeletePVar(playerid, "MedicBill");
			SetPlayerColor(playerid,TEAM_HIT_COLOR);

			for(new x;x<10000;x++)
			{
				new rand=random(300);
				if(PlayerInfo[playerid][pSex] == 0)
				{
					if(IsValidSkin(rand) && IsFemaleSpawnSkin(rand))
					{
					    PlayerInfo[playerid][pModel] = rand;
						SetPlayerSkin(playerid, rand);
						break;
					}
				}
				else
				{
				    if(IsValidSkin(rand) && !IsFemaleSkin(rand))
					{
					    PlayerInfo[playerid][pModel] = rand;
						SetPlayerSkin(playerid, rand);
						break;
					}
				}
			}
			switch(random(2))
			{
			    case 0: // Los Santos
				{
					SendClientMessageEx(playerid,COLOR_YELLOW,"Welcome to Los Santos");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 1");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 2");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 3");
					SetPlayerPosEx(playerid, 1715.1201,-1903.1711,13.5665);
					SetPlayerFacingAngle(playerid, 360.0);
				}
				case 1: // San Fierro
				{
					SendClientMessageEx(playerid,COLOR_YELLOW,"Welcome to San Fierro");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 1");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 2");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 3");
				    SetPlayerPosEx(playerid, -1969.0737,138.1210,27.6875);
				    SetPlayerFacingAngle(playerid, 90.0);
				}
				case 2: //  las venturas
				{
					SendClientMessageEx(playerid,COLOR_YELLOW,"Welcome to Las Venturas");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 1");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 2");
					SendClientMessage(playerid, COLOR_WHITE, "Message Line 3");
				    SetPlayerPosEx(playerid, -1969.0737,138.1210,27.6875);
				    SetPlayerFacingAngle(playerid, 90.0);
				}
			}
			SetCameraBehindPlayer(playerid);
			SetPlayerInterior(playerid,0);
				ClearChatbox(playerid);
				ShowTutGUIBox(playerid);
				ShowTutGUIFrame(playerid, 1);
				TutStep[playerid] = 1;

				// Los Santos (Camera)
				Streamer_UpdateEx(playerid, 1607.0160,-1510.8218,207.4438);
				SetPlayerPosEx(playerid, 1607.0160,-1510.8218,-10.0);
				SetPlayerCameraPos(playerid, 1850.1813,-1765.7552,81.9271);
				SetPlayerCameraLookAt(playerid, 1607.0160,-1510.8218,207.4438);*/
			}
			else
			{
			    ShowPlayerDialog(playerid, REGISTERSEX, DIALOG_STYLE_LIST, "{FF0000}Is your character male or female?", "Male\nFemale", "Submit", "");
			}
		}
		else if(dialogid == CHOOSELOCATION)
	    {
		    if(response)
		    {
				if(listitem == 0)
			    {
					new szMessage[128];
					SendClientMessageEx(playerid, COLOR_YELLOW2, "You Chosen Los Santos.");
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "Thank you for filling out the information!");
					RegistrationStep[playerid] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SetCamBack(playerid);
					DeletePVar(playerid, "MedicBill");
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
					for(new x;x<10000;x++)
					{
						new rand=random(300);
						if(PlayerInfo[playerid][pSex] == 0)
						{
							if(IsValidSkin(rand) && IsFemaleSpawnSkin(rand))
							{
								PlayerInfo[playerid][pModel] = rand;
								SetPlayerSkin(playerid, rand);
								break;
							}
						}
						else
						{
							if(IsValidSkin(rand) && !IsFemaleSkin(rand))
							{
								PlayerInfo[playerid][pModel] = rand;
								SetPlayerSkin(playerid, rand);
								break;
							}
						}
					}
					format(szMessage, sizeof(szMessage), "{AA3333}Setup{FFFF00}: %s (%d) has joined Evolution Roleplay.", GetPlayerNameEx(playerid), playerid);
					ABroadCast(COLOR_LIGHTRED,szMessage, 2);
					SendClientMessageEx(playerid,COLOR_YELLOW,"Welcome to Los Santos");
					SendClientMessage(playerid, COLOR_WHITE, "If you need help do /requesthelp and someone will come help you.");
					SendClientMessage(playerid, COLOR_WHITE, "Please follow Server Rules to prevent being Jailed/Banned.");
					SetPlayerPosEx(playerid, 1715.1201,-1903.1711,13.5665);
					SetPlayerFacingAngle(playerid, 360.0);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pVIPM] = VIPM;
					VIPM++;
					PlayerInfo[playerid][pVIPExpire] = gettime()+2592000;
					PlayerInfo[playerid][pDonateRank] = 2;
					PlayerInfo[playerid][pTempVIP] = 0;
					PlayerInfo[playerid][pBuddyInvited] = 0;
				//	ShowPlayerDialog(playerid, NULLEMAIL, DIALOG_STYLE_INPUT, "{3399FF}E-mail Registration", "{FFFFFF}Please enter a valid e-mail address to associate with your account.\n\nNotice: Providing an invalid address may result in never being able\nto Recover your Account if you forget your Password or get Hacked.", "Submit", "Skip");
				}
		/*		if(listitem == 1)
			    {
					SendClientMessageEx(playerid, COLOR_YELLOW2, "You Chosen San Fierro.");
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "Thank you for filling out the information!");
					RegistrationStep[playerid] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SetCamBack(playerid);
					DeletePVar(playerid, "MedicBill");
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
					for(new x;x<10000;x++)
					{
						new rand=random(300);
						if(PlayerInfo[playerid][pSex] == 0)
						{
							if(IsValidSkin(rand) && IsFemaleSpawnSkin(rand))
							{
								PlayerInfo[playerid][pModel] = rand;
								SetPlayerSkin(playerid, rand);
								break;
							}
						}
						else
						{
							if(IsValidSkin(rand) && !IsFemaleSkin(rand))
							{
								PlayerInfo[playerid][pModel] = rand;
								SetPlayerSkin(playerid, rand);
								break;
							}
						}
					}
					SendClientMessageEx(playerid,COLOR_YELLOW,"Welcome to San Fierro");
					SendClientMessage(playerid, COLOR_WHITE, "If you need help do /requesthelp and someone will come help you.");
					SendClientMessage(playerid, COLOR_WHITE, "Please follow Server Rules to prevent being Jailed/Banned.");
				    SetPlayerPosEx(playerid, -1969.0737,138.1210,27.6875);
				    SetPlayerFacingAngle(playerid, 90.0);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,0);
				}
				if(listitem == 2)
			    {
					SendClientMessageEx(playerid, COLOR_YELLOW2, "You Chosen Las Venturas.");
					SendClientMessageEx(playerid, COLOR_LIGHTRED, "Thank you for filling out the information!");
					RegistrationStep[playerid] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					PlayerInfo[playerid][pTut] = 1;
					gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
					TogglePlayerControllable(playerid, 1);
					SetCamBack(playerid);
					DeletePVar(playerid, "MedicBill");
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
					for(new x;x<10000;x++)
					{
						new rand=random(300);
						if(PlayerInfo[playerid][pSex] == 0)
						{
							if(IsValidSkin(rand) && IsFemaleSpawnSkin(rand))
							{
								PlayerInfo[playerid][pModel] = rand;
								SetPlayerSkin(playerid, rand);
								break;
							}
						}
						else
						{
							if(IsValidSkin(rand) && !IsFemaleSkin(rand))
							{
								PlayerInfo[playerid][pModel] = rand;
								SetPlayerSkin(playerid, rand);
								break;
							}
						}
					}
					SendClientMessageEx(playerid,COLOR_YELLOW,"Welcome to Las Venturas");
					SendClientMessage(playerid, COLOR_WHITE, "If you need help do /requesthelp and someone will come help you.");
					SendClientMessage(playerid, COLOR_WHITE, "Please follow Server Rules to prevent being Jailed/Banned.");
				    SetPlayerPosEx(playerid, 2222.7102,1839.2923,10.8203);
				    SetPlayerFacingAngle(playerid, 87.33);
					SetCameraBehindPlayer(playerid);
					SetPlayerInterior(playerid,0);
				}*/
			}
			else
			{
			    ShowPlayerDialog(playerid, REGISTERAGE, DIALOG_STYLE_LIST, "{FF0000}What is your characters age?", string, "Submit", "");
			}
		}
		return 1;
	}
	switch(dialogid) {

		case DIALOG_DEPLOY: {
			new pfac = PlayerInfo[playerid][pMember];
			new prank = PlayerInfo[playerid][pRank];
			if(response) switch(listitem)
			{
				case 0:
				{
                    if(prank >= FactionInfo[pfac][fSpikes])
                    {
						for(new i; i < sizeof(SpikeStrips); i++)
						{
							if(SpikeStrips[i][sX] == 0)
							{
								new Float: f_TempAngle, sstring[128];

								GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
								GetPlayerFacingAngle(playerid, f_TempAngle);
								SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
								GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
								SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
								format(sstring,sizeof(sstring),"Spike ID: %d successfully created.", i);
								SendClientMessageEx(playerid, COLOR_WHITE, sstring);
								format(sstring, sizeof(sstring), "HQ: A spike has been deployed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
								TotalSpikes++;
								foreach(new x: Player)
								{
									if(IsACop(x))
									{
										SendClientMessageEx(x, TEAM_BLUE_COLOR, sstring);
									}
								}
								return 1;
							}
			    		}
						SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more strips." );
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to deploy this." );
				}
				case 1:
				{
                    if(prank >= FactionInfo[pfac][fBarricades])
                    {
						for(new i; i < sizeof(Barricades); i++)
						{
							if(Barricades[i][sX] == 0)
							{
								new
									Float: f_TempAngle,
									sstring[128];

								GetPlayerPos(playerid, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ]);
								GetPlayerFacingAngle(playerid, f_TempAngle);
								//Barricades[i][sObjectID] = CreateDynamicObject(1238, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ]-0.7, 0.0, 0.0, f_TempAngle);
								Barricades[i][sObjectID] = CreateDynamicObject(981, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ], 0.0, 0.0, f_TempAngle+180.0, -1, -1, -1, 200.0);
								SetPlayerPosEx(playerid, Barricades[i][sX] - 2, Barricades[i][sY] - 2, Barricades[i][sZ]);
								GetPlayer3DZone(playerid, Barricades[i][sDeployedAt], MAX_ZONE_NAME);
								Barricades[i][sDeployedBy] = GetPlayerNameEx(playerid);
								format(sstring,sizeof(sstring),"Barricade ID: %d successfully created.", i);
								SendClientMessageEx(playerid, COLOR_WHITE, sstring);
								TotalCades++;
								return 1;
							}
			    		}
						SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more barricades." );
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to deploy this." );
				}
				case 2:
				{
                    if(prank >= FactionInfo[pfac][fCones])
                    {
						for(new i; i < sizeof(Cones); i++)
						{
							if(Cones[i][sX] == 0)
							{
								new
									Float: f_TempAngle,
									sstring[128];

								GetPlayerPos(playerid, Cones[i][sX], Cones[i][sY], Cones[i][sZ]);
								GetPlayerFacingAngle(playerid, f_TempAngle);
								Cones[i][sObjectID] = CreateDynamicObject(1238, Cones[i][sX], Cones[i][sY], Cones[i][sZ]-0.7, 0.0, 0.0, f_TempAngle);
								GetPlayer3DZone(playerid, Cones[i][sDeployedAt], MAX_ZONE_NAME);
								Cones[i][sDeployedBy] = GetPlayerNameEx(playerid);
								format(sstring,sizeof(sstring),"Cone ID: %d successfully created.", i);
								SendClientMessageEx(playerid, COLOR_WHITE, sstring);
								TotalCones++;
								return 1;
							}
			    		}
						SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more cones." );
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to deploy this." );
				}
				case 3:
				{
                    if(prank >= FactionInfo[pfac][fFlares])
                    {
						for(new i; i < sizeof(Flares); i++)
						{
							if(Flares[i][sX] == 0)
							{
								new
									Float: f_TempAngle,
									sstring[128];

								GetPlayerPos(playerid, Flares[i][sX], Flares[i][sY], Flares[i][sZ]);
								GetPlayerFacingAngle(playerid, f_TempAngle);
								Flares[i][sObjectID] = CreateDynamicObject(18728, Flares[i][sX], Flares[i][sY], Flares[i][sZ]-2.4, 0.0, 0.0, f_TempAngle);
								GetPlayer3DZone(playerid, Flares[i][sDeployedAt], MAX_ZONE_NAME);
								Flares[i][sDeployedBy] = GetPlayerNameEx(playerid);
								format(sstring,sizeof(sstring),"Flare ID: %d successfully created.", i);
								SendClientMessageEx(playerid, COLOR_WHITE, sstring);
								TotalFlares++;
								return 1;
							}
			    		}
						SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more flares." );
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to deploy this." );
				}
				case 4:
				{
                    if(prank >= FactionInfo[pfac][fBarrels])
                    {
						for(new i; i < sizeof(Barrels); i++)
						{
							if(Barrels[i][sX] == 0)
							{
								new
									Float: f_TempAngle,
									sstring[128];

								GetPlayerPos(playerid, Barrels[i][sX], Barrels[i][sY], Barrels[i][sZ]);
								GetPlayerFacingAngle(playerid, f_TempAngle);
								Barrels[i][sObjectID] = CreateDynamicObject(1237, Barrels[i][sX], Barrels[i][sY], Barrels[i][sZ]-1.0, 0.0, 0.0, f_TempAngle);
								GetPlayer3DZone(playerid, Barrels[i][sDeployedAt], MAX_ZONE_NAME);
								Barrels[i][sDeployedBy] = GetPlayerNameEx(playerid);
								format(sstring,sizeof(sstring),"Barrel ID: %d successfully created.", i);
								SendClientMessageEx(playerid, COLOR_WHITE, sstring);
								TotalBarrels++;
								return 1;
							}
			    		}
						SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more barrels." );
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to deploy this." );
				}
			}
			//return DisplayDeployDialog(playerid);
		}
		case DIALOG_DESTROY: {
			new pfac = PlayerInfo[playerid][pMember];
			new prank = PlayerInfo[playerid][pRank];
			if(response) switch(listitem)
			{
				case 0:
				{
                    if(prank >= FactionInfo[pfac][fSpikes])
                    {
      					DisplayDesSpikesDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to destroy this." );
				}
				case 1:
				{
                    if(prank >= FactionInfo[pfac][fBarricades])
                    {
                        DisplayDesCadesDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to destroy this." );
				}
				case 2:
				{
                    if(prank >= FactionInfo[pfac][fCones])
                    {
                        DisplayDesConesDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to destroy this." );
				}
				case 3:
				{
                    if(prank >= FactionInfo[pfac][fFlares])
                    {
						DisplayDesFlaresDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to destroy this." );
				}
				case 4:
				{
                    if(prank >= FactionInfo[pfac][fBarrels])
                    {
                        DisplayDesBarrelsDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_WHITE, "You are not allowed to destroy this." );
				}
				case 5:
				{
					for(new i; i < MAX_SPIKES; i++)
					{
						DestroyDynamicObject(SpikeStrips[i][sObjectID]);
						SpikeStrips[i][sX] = 0;
						SpikeStrips[i][sY] = 0;
						SpikeStrips[i][sZ] = 0;
						SpikeStrips[i][sObjectID] = 0;
					}
					for(new i; i < MAX_BARRICADES; i++)
					{
						DestroyDynamicObject(Barricades[i][sObjectID]);
						Barricades[i][sX] = 0;
						Barricades[i][sY] = 0;
						Barricades[i][sZ] = 0;
						Barricades[i][sObjectID] = 0;
					}
					for(new i; i < MAX_CONES; i++)
					{
						DestroyDynamicObject(Cones[i][sObjectID]);
						Cones[i][sX] = 0;
						Cones[i][sY] = 0;
						Cones[i][sZ] = 0;
						Cones[i][sObjectID] = 0;
					}
					for(new i; i < MAX_FLARES; i++)
					{
						DestroyDynamicObject(Flares[i][sObjectID]);
						Flares[i][sX] = 0;
						Flares[i][sY] = 0;
						Flares[i][sZ] = 0;
						Flares[i][sObjectID] = 0;
					}
					for(new i; i < MAX_BARRELS; i++)
					{
						DestroyDynamicObject(Barrels[i][sObjectID]);
						Barrels[i][sX] = 0;
						Barrels[i][sY] = 0;
						Barrels[i][sZ] = 0;
						Barrels[i][sObjectID] = 0;
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "All deploys deleted.");
           			TotalSpikes = 0;
           			TotalCades = 0;
           			TotalCones = 0;
           			TotalFlares = 0;
           			TotalBarrels = 0;
				}
			}
			//return DisplayDeployDialog(playerid);
		}
		case DIALOG_DES_SPIKES: {

			if(response) switch(listitem) {
				case MAX_SPIKES:
				{
					for(new i; i < MAX_SPIKES; i++)
					{
						DestroyDynamicObject(SpikeStrips[i][sObjectID]);
						SpikeStrips[i][sX] = 0;
						SpikeStrips[i][sY] = 0;
						SpikeStrips[i][sZ] = 0;
						SpikeStrips[i][sObjectID] = 0;
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "All spikes deleted.");
					TotalSpikes = 0;
				}
				default:
				{
				    if(SpikeStrips[listitem][sObjectID] >= 1)
				    {
	 					new sstring[128];
						DestroyDynamicObject(SpikeStrips[listitem][sObjectID]);
						SpikeStrips[listitem][sX] = 0;
						SpikeStrips[listitem][sY] = 0;
						SpikeStrips[listitem][sZ] = 0;
						SpikeStrips[listitem][sObjectID] = 0;
						format(sstring,sizeof(sstring),"Spike %d successfully deleted.", listitem);
						SendClientMessageEx(playerid, COLOR_WHITE, sstring);
		                TotalSpikes--;
		                DisplayDesSpikesDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "This spike is not currently deployed."), DisplayDesSpikesDialog(playerid);
				}
			}
			if(!response) return DisplayDestroyDialog(playerid);
			
		}
		case DIALOG_DES_CADES: {

			if(response) switch(listitem) {
				case MAX_BARRICADES:
				{
					for(new i; i < MAX_BARRICADES; i++)
					{
						DestroyDynamicObject(Barricades[i][sObjectID]);
						Barricades[i][sX] = 0;
						Barricades[i][sY] = 0;
						Barricades[i][sZ] = 0;
						Barricades[i][sObjectID] = 0;
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "All barricades deleted.");
					TotalCades = 0;
				}
				default:
				{
				    if(Barricades[listitem][sObjectID] >= 1)
				    {
	 					new sstring[128];
						DestroyDynamicObject(Barricades[listitem][sObjectID]);
						Barricades[listitem][sX] = 0;
						Barricades[listitem][sY] = 0;
						Barricades[listitem][sZ] = 0;
						Barricades[listitem][sObjectID] = 0;
						format(sstring,sizeof(sstring),"Barricade %d successfully deleted.", listitem);
						SendClientMessageEx(playerid, COLOR_WHITE, sstring);
		                TotalCades--;
		                DisplayDesCadesDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "This barricade is not currently deployed."), DisplayDesCadesDialog(playerid);
				}
			}
			if(!response) return DisplayDestroyDialog(playerid);

		}
		case DIALOG_DES_CONES: {

			if(response) switch(listitem) {
				case MAX_CONES:
				{
					for(new i; i < MAX_CONES; i++)
					{
						DestroyDynamicObject(Cones[i][sObjectID]);
						Cones[i][sX] = 0;
						Cones[i][sY] = 0;
						Cones[i][sZ] = 0;
						Cones[i][sObjectID] = 0;
					}
     				TotalCones = 0;
     				SendClientMessageEx(playerid, COLOR_WHITE, "All cones deleted.");
				}
				default:
				{
				    if(Cones[listitem][sObjectID] >= 1)
				    {
	 					new sstring[128];
						DestroyDynamicObject(Cones[listitem][sObjectID]);
						Cones[listitem][sX] = 0;
						Cones[listitem][sY] = 0;
						Cones[listitem][sZ] = 0;
						Cones[listitem][sObjectID] = 0;
						format(sstring,sizeof(sstring),"Cone %d successfully deleted.", listitem);
						SendClientMessageEx(playerid, COLOR_WHITE, sstring);
		                TotalCones--;
		                DisplayDesConesDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "This cone is not currently deployed."), DisplayDesConesDialog(playerid);
				}
			}
			if(!response) return DisplayDestroyDialog(playerid);

		}
		case DIALOG_DES_FLARES: {

			if(response) switch(listitem) {
				case MAX_FLARES:
				{
					for(new i; i < MAX_FLARES; i++)
					{
						DestroyDynamicObject(Flares[i][sObjectID]);
						Flares[i][sX] = 0;
						Flares[i][sY] = 0;
						Flares[i][sZ] = 0;
						Flares[i][sObjectID] = 0;
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "All flares deleted.");
	                TotalFlares = 0;
				}
				default:
				{
				    if(Flares[listitem][sObjectID] >= 1)
				    {
	 					new sstring[128];
						DestroyDynamicObject(Flares[listitem][sObjectID]);
						Flares[listitem][sX] = 0;
						Flares[listitem][sY] = 0;
						Flares[listitem][sZ] = 0;
						Flares[listitem][sObjectID] = 0;
						format(sstring,sizeof(sstring),"Flare %d successfully deleted.", listitem);
						SendClientMessageEx(playerid, COLOR_WHITE, sstring);
		                TotalFlares--;
		                DisplayDesFlaresDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "This flare is not currently deployed."), DisplayDesFlaresDialog(playerid);
				}
			}
			if(!response) return DisplayDestroyDialog(playerid);

		}
		case DIALOG_DES_BARRELS: {

			if(response) switch(listitem) {
				case MAX_BARRELS:
				{
					for(new i; i < MAX_BARRELS; i++)
					{
						DestroyDynamicObject(Barrels[i][sObjectID]);
						Barrels[i][sX] = 0;
						Barrels[i][sY] = 0;
						Barrels[i][sZ] = 0;
						Barrels[i][sObjectID] = 0;
					}
					SendClientMessageEx(playerid, COLOR_WHITE, "All barrels deleted.");
	                TotalBarrels = 0;
				}
				default:
				{
				    if(Barrels[listitem][sObjectID] >= 1)
				    {
	 					new sstring[128];
						DestroyDynamicObject(Barrels[listitem][sObjectID]);
						Barrels[listitem][sX] = 0;
						Barrels[listitem][sY] = 0;
						Barrels[listitem][sZ] = 0;
						Barrels[listitem][sObjectID] = 0;
						format(sstring,sizeof(sstring),"Barrel %d successfully deleted.", listitem);
						SendClientMessageEx(playerid, COLOR_WHITE, sstring);
		                TotalBarrels--;
		                DisplayDesBarrelsDialog(playerid);
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "This barrel is not currently deployed."), DisplayDesBarrelsDialog(playerid);
				}
			}
			if(!response) return DisplayDestroyDialog(playerid);

		}
		case DIALOG_LEADASK:
		if(response)
		{
			if(listitem == 2)
			{
			    new giveplayerid = GetPVarInt(playerid, "LeadListPID");
			    if(PlayerInfo[giveplayerid][pLeader] > 0)
				{
			        new faction = PlayerInfo[giveplayerid][pMember];
			        new szMessage[128];
				    PlayerInfo[giveplayerid][pFMember] = 255;
					PlayerInfo[giveplayerid][pLeader] = 0;
					PlayerInfo[giveplayerid][pRank] = 0;
					PlayerInfo[giveplayerid][pMember] = 0;
					format(string, sizeof(string), "You have been removed from %s by Administrator %s.",FactionInfo[faction][fName], GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "%s has been removed as slotholder/leader, from %s by %s.", GetPlayerNameEx(giveplayerid), FactionInfo[faction][fName], GetPlayerNameEx(playerid));
					Log("logs/faction.log", string);
					format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has removed %s from slotholder/leader of %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), FactionInfo[faction][fName]);
					ABroadCast(COLOR_LIGHTRED,szMessage, 2);
					return 1;
				}
			}
			else
   			{
				SetPVarInt(playerid, "LeadAsk", listitem);
				MakeLeadList(playerid);
			}
		}
			    
		case DIALOG_LEADLIST: if(response) {
		    new leadask = GetPVarInt(playerid, "LeadAsk");
		    new giveplayerid = GetPVarInt(playerid, "LeadListPID");
		    new faction = listitem + 1;
		    new szMessage[128];
	  		if(leadask == 0)
  			{
			    PlayerInfo[giveplayerid][pFMember] = 255;
				PlayerInfo[giveplayerid][pLeader] = 1;
				PlayerInfo[giveplayerid][pRank] = 10;
				PlayerInfo[giveplayerid][pMember] = faction;
				format(string, sizeof(string), "You have been made leader of %s by Administrator %s.",FactionInfo[faction][fName], GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has made %s leader of %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid), FactionInfo[faction][fName]);
				Log("logs/faction.log", string);
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has made %s leader of %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), FactionInfo[faction][fName]);
				ABroadCast(COLOR_LIGHTRED,szMessage, 2);
				format(string, sizeof(string), "You have made %s leader of %s.", GetPlayerNameEx(giveplayerid),FactionInfo[faction][fName]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}
	  		if(leadask == 1)
  			{
			    PlayerInfo[giveplayerid][pFMember] = 255;
				PlayerInfo[giveplayerid][pLeader] = 2;
				PlayerInfo[giveplayerid][pRank] = 10;
				PlayerInfo[giveplayerid][pMember] = faction;
				format(string, sizeof(string), "You have been made slot holder of %s by Administrator %s.",FactionInfo[faction][fName], GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has made %s the slot holder of %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid), FactionInfo[faction][fName]);
				Log("logs/faction.log", string);
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has made %s the slot holder of %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), FactionInfo[faction][fName]);
				ABroadCast(COLOR_LIGHTRED,szMessage, 2);
				format(string, sizeof(string), "You have made %s the slot holder of %s.", GetPlayerNameEx(giveplayerid),FactionInfo[faction][fName]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}
	  		/*if(leadask == 2)
  			{
			    PlayerInfo[giveplayerid][pFMember] = 255;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pMember] = 0;
				format(string, sizeof(string), "You have been removed from %s by Administrator %s.",FactionInfo[faction][fName], GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "%s has been removed as slotholder/leader, from %s by %s.", GetPlayerNameEx(giveplayerid), FactionInfo[faction][fName], GetPlayerNameEx(playerid));
				Log("logs/faction.log", string);
				format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has removed %s from slotholder/leader of %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), FactionInfo[faction][fName]);
				ABroadCast(COLOR_LIGHTRED,szMessage, 2);
			}
			*/
		}
		// BEGIN DYNAMIC FACTION - Phazd <3
		case DIALOG_LISTFACS: if(response) {
			SetPVarInt(playerid, "Fac_EditID", listitem + 1);
			return DisplayFacDialog(playerid, listitem + 1);
		}
		case DIALOG_EDITFAC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID"),
				szTitle[64 + MAX_NAME_LEN];

			if(response) switch(listitem) {
				case 0: {
					format(szTitle, sizeof szTitle, "Edit Faction Name {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_NAME, DIALOG_STYLE_INPUT, szTitle, "Specify a name for this faction.", "Confirm", "Cancel");
				}
				case 1: {

					new
						szDialog[(32 + 2) * MAX_FAC_TYPES + 1];

					for(new i = 0; i != MAX_FAC_TYPES + 1; ++i)
						strcat(szDialog, "\n"), strcat(szDialog, GetFactionType(i));

					format(szTitle, sizeof szTitle, "Edit Faction Type {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_TYPE, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 2: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Radio Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_RADIOACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 3: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Department Radio Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_DEPTRADIOACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 4: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Gov Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_GOVACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 5: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Locker Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_LOCKER, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 6: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Bug Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_BUGACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 7: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Spikes Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_SPIKESACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 8: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Barricade Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_BARRACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 9: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Cone Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_CONESACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 10: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Flares Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_FLARESACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 11: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction Barrels Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_BARRELSACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 12: {

					new
						szDialog[((32 + 5) * MAX_FAC_RANKS) + 24];

					for(new i = 0; i != MAX_FAC_RANKS; ++i)
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));

					strcat(szDialog, "\nRevoke from Faction");
					format(szTitle, sizeof szTitle, "Edit Faction FreeNameChange Access {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_FNCACC, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 13: {
					format(szTitle, sizeof szTitle, "Edit Faction Duty Color {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_DUTYCOL, DIALOG_STYLE_INPUT, szTitle, "Enter a colour in hexadecimal format (for example, 0xBCA3FF). This colour will be used to identify the faction.", "Confirm", "Cancel");
				}
				case 14: {
					format(szTitle, sizeof szTitle, "Edit Faction Radio Color {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_RADIOCOL, DIALOG_STYLE_INPUT, szTitle, "Enter a colour in hexadecimal format (for example, 0xBCA3FF). This colour will be used for the faction's in-character radio chat.", "Confirm", "Cancel");
				}
				case 15: {

					new
						szDialog[(32 + 8) * MAX_FAC_WEAPONS];

					for(new i = 0; i != MAX_FAC_WEAPONS; ++i) {
						if(FactionInfo[facid][fGun][i]) format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, FactionInfo[facid][fGun][i], Weapon_ReturnName(FactionInfo[facid][fGun][i]));
						else strcat(szDialog, "\n(empty)");
					}

					format(szTitle, sizeof szTitle, "Edit Faction Weapons {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_EDITWEPS, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 16: {

					new
						szDialog[(MAX_DIV_LEN + 8) * MAX_FAC_DIVS];

					for(new i = 0; i != MAX_FAC_DIVS; ++i) {
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacDivs[facid][i][0]) ? (FacDivs[facid][i]) : ("(undefined)")));
					}

					format(szTitle, sizeof szTitle, "Edit Faction Divisions {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_EDITDIVS, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 17: {

					new
						szDialog[(MAX_RANK_LEN + 8) * MAX_FAC_RANKS];

					for(new i = 0; i != MAX_FAC_RANKS; ++i) {
						format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));
					}

					format(szTitle, sizeof szTitle, "Edit Faction Ranks {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_EDITRANKS, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
				}
				case 18: {
					format(szTitle, sizeof szTitle, "Edit Faction Locker Position {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_LOCKERPOS, DIALOG_STYLE_LIST, szTitle, "Are you sure you want to move the faction locker to this position?\nIf not, cancel and move to your desired location.", "Select", "Cancel");
				}
				default: {
					format(szTitle, sizeof szTitle, "{FF0000}Disband Faction{FFFFFF} {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					ShowPlayerDialog(playerid, DIALOG_FAC_DISBAND, DIALOG_STYLE_MSGBOX, szTitle, "Are you absolutely sure you wish to {FF0000}disband this faction?{FFFFFF}\n\n\
					This action will delete all faction data and remove all members and leaders from the faction, whether online or offline.", "Confirm", "Cancel");
				}
			}
			else if(GetPVarType(playerid, "Fac_EditID")) { // They've made changes to a faction setting - save it on exit!
				SaveFaction(GetPVarInt(playerid, "Fac_EditID"));
				DeletePVar(playerid, "Fac_EditID");
				return ListFactions(playerid);
			}
		}
		// START REST HERE -Phazd
		case DIALOG_FAC_NAME: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) {

				new
					szTitle[32 + MAX_NAME_LEN];

				if(!(2 < strlen(inputtext) < MAX_NAME_LEN)) {
					format(szTitle, sizeof szTitle, "Edit Faction {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					return ShowPlayerDialog(playerid, DIALOG_FAC_NAME, DIALOG_STYLE_INPUT, szTitle, "The specified name must be between 2 and "#MAX_NAME_LEN" characters.\n\nSpecify a name for this faction.", "Confirm", "Cancel");
				}
				FactionInfo[facid][fName][0] = 0;
				mysql_real_escape_string(inputtext, FactionInfo[facid][fName]);
			}
			return DisplayFacDialog(playerid, GetPVarInt(playerid, "Fac_EditID"));
		}
		case DIALOG_FAC_TYPE: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) FactionInfo[facid][fType] = listitem;
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_RADIOACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fRadio] = -1;
				default: FactionInfo[facid][fRadio] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_DEPTRADIOACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fDRadio] = -1;
				default: FactionInfo[facid][fDRadio] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_GOVACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fGovAnnounce] = -1;
				default: FactionInfo[facid][fGovAnnounce] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_LOCKER: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fLocker] = -1;
				default: FactionInfo[facid][fLocker] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_BUGACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fBug] = -1;
				default: FactionInfo[facid][fBug] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_SPIKESACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fSpikes] = -1;
				default: FactionInfo[facid][fSpikes] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_BARRACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fBarricades] = -1;
				default: FactionInfo[facid][fBarricades] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_CONESACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fCones] = -1;
				default: FactionInfo[facid][fCones] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_FLARESACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fFlares] = -1;
				default: FactionInfo[facid][fFlares] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_BARRELSACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fBarrels] = -1;
				default: FactionInfo[facid][fBarrels] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_FNCACC: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) switch(listitem) {
				case MAX_FAC_RANKS: FactionInfo[facid][fFreeNameChange] = -1;
				default: FactionInfo[facid][fFreeNameChange] = listitem;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_DUTYCOL: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) {

				new
					szTitle[32 + MAX_NAME_LEN],
					hColour;

				if(sscanf(inputtext, "h", hColour)) {
					format(szTitle, sizeof szTitle, "Edit Faction Color {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					return ShowPlayerDialog(playerid, DIALOG_FAC_DUTYCOL, DIALOG_STYLE_INPUT, szTitle, "Invalid value specified.\n\nEnter a colour in hexadecimal format (for example, 0xBCA3FF). This colour will be used to identify the faction.", "Confirm", "Cancel");
				}
				FactionInfo[facid][fDutyColor] = hColour;
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_RADIOCOL: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) {

				new
					szTitle[32 + MAX_NAME_LEN],
					hColour;

				if(sscanf(inputtext, "h", hColour)) {
					format(szTitle, sizeof szTitle, "Edit Faction Radio Color {%6x}(%s)", FactionInfo[facid][fRadioColor], FactionInfo[facid][fName]);
					return ShowPlayerDialog(playerid, DIALOG_FAC_RADIOCOL, DIALOG_STYLE_INPUT, szTitle, "Invalid value specified.\n\nEnter a colour in hexadecimal format (for example, 0xBCA3FF). This colour will be used for the faction's in-character radio chat.", "Confirm", "Cancel");
				}
				FactionInfo[facid][fRadioColor] = hColour;
			}
			return DisplayFacDialog(playerid, facid);
		}
		// WEAPONS -Phazd <3
		case DIALOG_FAC_EDITWEPS: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID"),
				szTitle[32 + MAX_NAME_LEN];

			if(response) {
				SetPVarInt(playerid, "Fac_EditWep", listitem);
				format(szTitle, sizeof szTitle, "Edit Faction Weapon (%i) {%6x}(%s)", listitem + 1, FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
				return ShowPlayerDialog(playerid, DIALOG_FAC_EDITWEPID, DIALOG_STYLE_INPUT, szTitle, "Specify a weapon ID (zero to remove this weapon).", "Select", "Cancel");
			}
			else return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_EDITWEPID: {

			new
				szTitle[32 + MAX_NAME_LEN],
				facid = GetPVarInt(playerid, "Fac_EditID"),
				wepid = GetPVarInt(playerid, "Fac_EditWep");

			format(szTitle, sizeof szTitle, "Edit Faction Weapon (%i) {%6x}(%s)", wepid + 1, FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
			if(response) {

				new
					iValue = strval(inputtext);

				if(isnull(inputtext) || !(0 <= iValue <= 46)) {
					return ShowPlayerDialog(playerid, DIALOG_FAC_EDITWEPID, DIALOG_STYLE_INPUT, szTitle, "Invalid weapon specified.\n\nSpecify a weapon ID (zero to remove this weapon).", "Select", "Cancel");
				}
				FactionInfo[facid][fGun][wepid] = iValue;
			}

			new
				szDialog[(32 + 8) * MAX_FAC_WEAPONS];

			for(new i = 0; i != MAX_FAC_WEAPONS; ++i) {
				if(FactionInfo[facid][fGun][i]) format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, FactionInfo[facid][fGun][i], Weapon_ReturnName(FactionInfo[facid][fGun][i]));
				else strcat(szDialog, "\n(empty)");
			}
			DeletePVar(playerid, "Fac_EditWep");
			format(szTitle, sizeof szTitle, "Edit Faction Weapons {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
			return ShowPlayerDialog(playerid, DIALOG_FAC_EDITWEPS, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
		}
		// DIVISIONS -Phazd <3
		case DIALOG_FAC_EDITDIVS: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) {

				new
					szTitle[32 + MAX_NAME_LEN];

				SetPVarInt(playerid, "Fac_EditDiv", listitem);
				format(szTitle, sizeof szTitle, "Edit Faction Division (%i) {%6x}(%s)", listitem + 1, FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
				return ShowPlayerDialog(playerid, DIALOG_FAC_EDITDIV, DIALOG_STYLE_INPUT, szTitle, "Specify a division name (or none to disable it).", "Confirm", "Cancel");
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_EDITDIV: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID"),
				divid = GetPVarInt(playerid, "Fac_EditDiv"),
				szTitle[32 + MAX_NAME_LEN];

			if(response) {
				if(strlen(inputtext) >= MAX_DIV_LEN) {
					format(szTitle, sizeof szTitle, "Edit Faction Division (%i) {%6x}(%s)", divid + 1, FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					return ShowPlayerDialog(playerid, DIALOG_FAC_EDITDIV, DIALOG_STYLE_INPUT, szTitle, "The specified name must be less than "#MAX_DIV_LEN" characters in length.\n\nSpecify a division name (or none to disable it).", "Confirm", "Cancel");
				}
				FacDivs[facid][divid][0] = 0;
				if(!isnull(inputtext)) mysql_real_escape_string(inputtext, FacDivs[facid][divid]);
			}

			new
				szDialog[(MAX_DIV_LEN + 8) * MAX_FAC_DIVS];

			for(new i = 0; i != MAX_FAC_DIVS; ++i) {
				format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i + 1, ((FacDivs[facid][i][0]) ? (FacDivs[facid][i]) : ("(undefined)")));
			}

			format(szTitle, sizeof szTitle, "Edit Faction Divisions {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
			ShowPlayerDialog(playerid, DIALOG_FAC_EDITDIVS, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
			DeletePVar(playerid, "Fac_EditDiv");
		}
		// Faction Ranks -Phazd <3
		case DIALOG_FAC_EDITRANKS: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) {

				new
					szTitle[32 + MAX_NAME_LEN];

				SetPVarInt(playerid, "Fac_EditRank", listitem);
				format(szTitle, sizeof szTitle, "Edit Faction Rank (%i) {%6x}(%s)", listitem + 1, FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
				return ShowPlayerDialog(playerid, DIALOG_FAC_EDITRANK, DIALOG_STYLE_INPUT, szTitle, "Specify a rank name (or none to disable it).", "Confirm", "Cancel");
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_EDITRANK: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID"),
				rankid = GetPVarInt(playerid, "Fac_EditRank"),
				szTitle[32 + MAX_NAME_LEN];

			if(response) {
				if(strlen(inputtext) >= MAX_RANK_LEN) {
					format(szTitle, sizeof szTitle, "Edit Faction Rank (%i) {%6x}(%s)", rankid + 1, FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
					return ShowPlayerDialog(playerid, DIALOG_FAC_EDITRANK, DIALOG_STYLE_INPUT, szTitle, "The specified name must be less than "#MAX_RANK_LEN" characters in length.\n\nSpecify a rank name (or none to disable it).", "Confirm", "Cancel");
				}
				FacRanks[facid][rankid][0] = 0;
				if(!isnull(inputtext)) mysql_real_escape_string(inputtext, FacRanks[facid][rankid]);
			}

			new
				szDialog[(MAX_RANK_LEN + 8) * MAX_FAC_RANKS];

			for(new i = 0; i != MAX_FAC_RANKS; ++i) {
				format(szDialog, sizeof szDialog, "%s\n(%i) %s", szDialog, i + 1, ((FacRanks[facid][i][0]) ? (FacRanks[facid][i]) : ("(undefined)")));
			}

			format(szTitle, sizeof szTitle, "Edit Faction Ranks {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
			ShowPlayerDialog(playerid, DIALOG_FAC_EDITRANKS, DIALOG_STYLE_LIST, szTitle, szDialog, "Select", "Cancel");
			DeletePVar(playerid, "Fac_EditRank");
		}
		// Locker POS
		case DIALOG_FAC_LOCKERPOS: {

			new
				facid = GetPVarInt(playerid, "Fac_EditID");

			if(response) {

				new
					szText[64];

				GetPlayerPos(playerid, FactionInfo[facid][fLockerPos][0], FactionInfo[facid][fLockerPos][1], FactionInfo[facid][fLockerPos][2]);
				FactionInfo[facid][fLockerVW] = GetPlayerVirtualWorld(playerid);

				DestroyDynamic3DTextLabel(FactionInfo[facid][f3DText]);
				format(szText, sizeof szText, "%s Locker\n{1FBDFF}/glocker{FFFF00} to use", FactionInfo[facid][fName]);
				FactionInfo[facid][f3DText] = CreateDynamic3DTextLabel(szText, COLOR_YELLOW, FactionInfo[facid][fLockerPos][0], FactionInfo[facid][fLockerPos][1], FactionInfo[facid][fLockerPos][2], 10.0, .testlos = 1, .worldid = FactionInfo[facid][fLockerVW]);
			}
			return DisplayFacDialog(playerid, facid);
		}
		case DIALOG_FAC_DISBAND: {
			if(response && PlayerInfo[playerid][pAdmin] >= 1337)
			{
			
				new facid = GetPVarInt(playerid, "Fac_EditID");
				DisbandFaction(facid);

			}
			return ListFactions(playerid);
		}
		// END OF DYNAMIC FACTION -Phazd <3
	    case BIGEARS3: if(response) {
	        BigEar[playerid] = 5;
            BigEarFamily[playerid] = listitem;
   			SendClientMessageEx(playerid, COLOR_WHITE, "You will now hear all messages from this family's chat.");
	    }
	    else ShowPlayerDialog(playerid, BIGEARS, DIALOG_STYLE_LIST, "Please choose an item to proceed", "Global Chat\nOOC Chat\nIC Chat\nFaction Chat\nFamily Chat\nPlayer\nDisable Bigears", "Select", "Cancel");
	    case BIGEARS: if(response) switch(listitem) {
			case 0: {
			    BigEar[playerid] = 1;
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the Global Chat, you can now see all the messages server-wide.");
			}
			case 1: {
			    BigEar[playerid] = 2;
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the OOC Chat, you can now see all the OOC(/b) messages server-wide.");
			}
			case 2: {
			    BigEar[playerid] = 3;
			    SendClientMessage(playerid, COLOR_WHITE, "You have selected the IC Chat, you can now see all the IC(Includes /me's & /do's) messages server-wide.");
			}
			case 3: {
   				ShowPlayerDialog(playerid, BIGEARS2, DIALOG_STYLE_LIST, "{3399FF}Please choose an item to proceed", "LSPD\nFBI\nSFPD\nFDSA\nJudicial System\nState Government\nSASD\nHitman Agency\nSANews\nSan Andreas Department of Transportation\nSAAS\nTierra Robada\nNOOSE", "Select", "Cancel");
			}
			case 4: {
				new bigstring[512];
				for(new i = 0; i < sizeof(FamilyInfo); i++)
				{
					format(bigstring, sizeof(bigstring), "%s%s\n",bigstring,FamilyInfo[i][FamilyName]);
				}
			    ShowPlayerDialog(playerid, BIGEARS3, DIALOG_STYLE_LIST, "{3399FF}Please choose an item to proceed", bigstring, "Select", "Back");
			}
			case 5: {
			    ShowPlayerDialog(playerid, BIGEARS4, DIALOG_STYLE_INPUT, "{3399FF}Big Ears Player", "Please type in the name or the Id of the player you want to use the Big Ears function", "Select", "Back");
			}
			case 6: {
			    BigEar[playerid]= 0;
			    BigEarFaction[playerid] = 0;
			    BigEarPlayer[playerid] = INVALID_PLAYER_ID;
			    BigEarFamily[playerid] = 255;
			    SendClientMessage(playerid, COLOR_WHITE, "You have disabled the bigears feature, you no longer see anything on your screen.");
			}
		}
		case BIGEARS4: {
			if(response) {
			    new giveplayerid;
			    if(sscanf(inputtext, "u", giveplayerid)) {
			        ShowPlayerDialog(playerid, BIGEARS4, DIALOG_STYLE_INPUT, "{3399FF}Big Ears Player", "Error - Please type in the name or the Id of the player you want to use the Big Ears function", "Select", "Back");
					return 1;
				}
			    BigEar[playerid] = 6;
  				BigEarPlayer[playerid] = giveplayerid;
				SendClientMessageEx(playerid, COLOR_WHITE, "You can now see all the messages from this player.");
			}
			else ShowPlayerDialog(playerid, BIGEARS, DIALOG_STYLE_LIST, "Please choose an item to proceed", "Global Chat\nOOC Chat\nIC Chat\nFaction Chat\nFamily Chat\nPlayer\nDisable Bigears", "Select", "Cancel");
		}
		case BIGEARS2: {
			if(response) {
				switch(listitem) {
					case 0: {
				    	BigEar[playerid] = 4;
            	    	BigEarFaction[playerid] = 1;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the LSPD Faction Chat, you can now see all the messages from LSPD.");
					}
					case 1: {
						BigEar[playerid] = 4;
            		    BigEarFaction[playerid] = 2;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the FBI Faction Chat, you can now see all the messages from FBI.");
					}
					case 2: {
						BigEar[playerid] = 4;
    		   	        BigEarFaction[playerid] = 3;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the SFPD Faction Chat, you can now see all the messages from SFPD.");
					}
					case 3: {
						BigEar[playerid] = 4;
        		        BigEarFaction[playerid] = 4;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the FDSA Faction Chat, you can now see all the messages from FDSA.");
					}
					case 4: {
						BigEar[playerid] = 4;
        	   		    BigEarFaction[playerid] = 5;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the Judicial System Faction Chat, you can now see all the messages from Judicial System.");
					}
					case 5: {
						BigEar[playerid] = 4;
        			    BigEarFaction[playerid] = 6;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the State Government Faction Chat, you can now see all the messages from State Government.");
					}
					case 6: {
					    BigEar[playerid] = 4;
        	   	    	BigEarFaction[playerid] = 7;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the SASD Faction Chat, you can now see all the messages from SASD.");
					}
					case 7: {
					    if(PlayerInfo[playerid][pAdmin] >= 4)
					    {
					    	BigEar[playerid] = 4;
        		        	BigEarFaction[playerid] = 8;
   							SendClientMessage(playerid, COLOR_WHITE, "You have selected the Hitman Agency Faction Chat, you can now see all the messages from Hitman Agency.");
						}
						else SendClientMessage(playerid, COLOR_WHITE, "Only Senior Admins+ are allowed to use this feature.");
					}
					case 8: {
					    BigEar[playerid] = 4;
        		        BigEarFaction[playerid] = 9;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the SANews Faction Chat, you can now see all the messages from SANews.");
					}
					case 9: {
					    BigEar[playerid] = 4;
            		    BigEarFaction[playerid] = 10;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the Taxi Cab Company Faction Chat, you can now see all the messages from Taxi Cab Company.");
      				}
					case 10: {
					    BigEar[playerid] = 4;
            		    BigEarFaction[playerid] = 11;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the SAAS Faction Chat, you can now see all the messages from SAAS.");
					}
					case 11: {
					    BigEar[playerid] = 4;
  	   	  				BigEarFaction[playerid] = 12;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the Tierra Robada Faction Chat, you can now see all the messages from Tierra Robada.");
					}
					case 12: {
					    BigEar[playerid] = 4;
       	 	 	        BigEarFaction[playerid] = 13;
   						SendClientMessage(playerid, COLOR_WHITE, "You have selected the NOOSE Faction Chat, you can now see all the messages from NOOSE.");
					}
				}
			}
			else ShowPlayerDialog(playerid, BIGEARS, DIALOG_STYLE_LIST, "Please choose an item to proceed", "Global Chat\nOOC Chat\nIC Chat\nFaction Chat\nFamily Chat\nPlayer\nDisable Bigears", "Select", "Cancel");
		}

		case DIALOG_CREATEREPORT:
		{
			if(response && !isnull(inputtext))
			{
				JustReported[playerid] = 25;
				SendReportToQue(playerid, inputtext, 2, GetPlayerPriority(playerid));
				SendClientMessageEx(playerid, COLOR_YELLOW, "Your report message was sent to the admins.");
				SendClientMessageEx(playerid, COLOR_WHITE, "Use {FFFF00}/cancelreport{FFFFFF} if you no longer need Administrator Assistance.");
			}
		}

		case DIALOG_DELETECAR: if(response) {
			if(GetPVarType(playerid, "vDel")) {

				new
					i = GetPVarInt(playerid, "vDel");

				if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && !PlayerVehicleInfo[playerid][i][pvImpounded] && PlayerVehicleInfo[playerid][i][pvSpawned]) {
					DestroyVehicle(PlayerVehicleInfo[playerid][i][pvId]);
					--PlayerCars;
					VehicleSpawned[playerid]--;
				}
				PlayerVehicleInfo[playerid][i][pvModelId] = 0;
				PlayerVehicleInfo[playerid][i][pvId] = 0;
				PlayerVehicleInfo[playerid][i][pvModelId] = 0;
				PlayerVehicleInfo[playerid][i][pvPosX] = 0.0;
				PlayerVehicleInfo[playerid][i][pvPosY] = 0.0;
				PlayerVehicleInfo[playerid][i][pvPosZ] = 0.0;
				PlayerVehicleInfo[playerid][i][pvPosAngle] = 0.0;
				PlayerVehicleInfo[playerid][i][pvLock] = 0;
				PlayerVehicleInfo[playerid][i][pvLocked] = 0;
				PlayerVehicleInfo[playerid][i][pvPaintJob] = -1;
				PlayerVehicleInfo[playerid][i][pvColor1] = 0;
				PlayerVehicleInfo[playerid][i][pvColor2] = 0;
				PlayerVehicleInfo[playerid][i][pvPrice] = 0;
				PlayerVehicleInfo[playerid][i][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][i][pvSpawned] = 0;
				DeletePVar(playerid, "vDel");

				g_mysql_SaveVehicle(playerid, i);

				return SendClientMessageEx(playerid, COLOR_WHITE, "Your vehicle has been permanently deleted.");
			}

			new
				szDialogStr[164];

			SetPVarInt(playerid, "vDel", listitem);
			format(szDialogStr, sizeof(szDialogStr), "{FFFFFF}Your {FF0000}%s{FFFFFF} will be {FF0000}permanently deleted{FFFFFF}.\r\nYou may now confirm or cancel the deletion.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
			return ShowPlayerDialog(playerid, DIALOG_DELETECAR, DIALOG_STYLE_MSGBOX, "Delete Vehicle", szDialogStr, "Delete", "Cancel");
		}
		case DIALOG_ADMAIN: if(response) switch(listitem) {
			case 0: {

				new
					szDialog[2256],
					szBuffer[32],
					arrAdverts[MAX_PLAYERS] = INVALID_PLAYER_ID,
					iDialogCount,
					iCount,
					iBreak,
					iRand;

				for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;
				foreach(new i: Player) if(!isnull(szAdvert[i])) arrAdverts[iCount++] = i;

				while(iDialogCount < 50 && iBreak < 500) {
					iRand = random(iCount);
					if(arrAdverts[iRand] != INVALID_PLAYER_ID) {
						strcpy(szBuffer, szAdvert[arrAdverts[iRand]], sizeof(szBuffer));
						if(PlayerInfo[playerid][pAdmin] <= 1) format(szDialog, sizeof(szDialog), "%s%s... (%i)\r\n", szDialog, szBuffer, PlayerInfo[arrAdverts[iRand]][pPnumber]);
						else format(szDialog, sizeof(szDialog), "%s%s... (%s)\r\n", szDialog, szBuffer, GetPlayerNameEx(arrAdverts[iRand]));
						ListItemTrackId[playerid][iDialogCount++] = arrAdverts[iRand];
						arrAdverts[iRand] = INVALID_PLAYER_ID;
					}
					++iBreak;
				}
				if(!isnull(szDialog)) return ShowPlayerDialog(playerid, DIALOG_ADLIST, DIALOG_STYLE_LIST, "Advertisements - List", szDialog, "Select", "Return");
				ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
				SendClientMessage(playerid, COLOR_GREY, "No advertisements have been posted.");
			}
			case 1: ShowPlayerDialog(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Advertisements - Search", "Enter a search phrase.", "Search", "Return");
			case 2: {
				if(PlayerInfo[playerid][pADMute] == 1) {
					SendClientMessageEx(playerid, COLOR_GREY, "You are muted from advertisements.");
				}
				else if(PlayerInfo[playerid][pPnumber] == 0) {
					SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a cell phone.");
				}
				else ShowPlayerDialog(playerid, DIALOG_ADPLACE, DIALOG_STYLE_INPUT, "Advertisements - Place Advertisement", "Enter your desired advertisement text! Keep it below 128 characters.", "Submit", "Return");
			}
			case 3: {
				if(PlayerInfo[playerid][pADMute] == 1) {
					SendClientMessageEx(playerid, COLOR_GREY, "You are muted from advertisements.");
				}
				else if(PlayerInfo[playerid][pPnumber] == 0) {
					SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have a cell phone.");
				}
				else if(iAdverTimer >= 1) {
					ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessageEx(playerid, COLOR_GREY, "Only one priority advertisement can be placed every 30 seconds.");
				}
				else if(GetPVarType(playerid, "adT")) {
					ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessageEx(playerid, COLOR_GREY, "You may only place one priority advertisement every two minutes.");
				}
				else ShowPlayerDialog(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Advertisements - Priority Advertisement",
				"Enter your desired advertisement text! Keep it below 128 characters.\nAs this is a priority advertisement, it will be broadcasted, and will cost you $150,000.", "Submit", "Return");
			}
		}
		case DIALOG_ADPLACE: {
			if(response) {

				new
					iLength = strlen(inputtext);

				if(!(2 <= iLength <= 127)) {
					ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessageEx(playerid, COLOR_GREY, "Your input was too long or too short.");
				}

				iLength *= 50;
				if(GetPlayerCash(playerid) < iLength) {
					ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough cash for this.");
				}
				strcpy(szAdvert[playerid], inputtext, 128);
				GivePlayerCash(playerid, -iLength);
				SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations, you have placed your advertisement!");
			}
			else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}

		case DIALOG_ADPLACEP: {
			if(response) {
				if(iAdverTimer >= 1) {
					SendClientMessageEx(playerid, COLOR_GREY, "Only one priority advertisement can be placed every 30 seconds.");
					return ShowPlayerDialog(playerid, DIALOG_ADPLACEP, DIALOG_STYLE_INPUT, "Advertisements - Priority Advertisement",
					"Enter your desired advertisement text! Keep it below 128 characters.\nAs this is a priority advertisement, it will be broadcasted, and will cost you $150,000.", "Submit", "Return");
				}
				else if(GetPlayerCash(playerid) < 150000) {
					ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessageEx(playerid, COLOR_GREY, "You don't have enough cash for this.");
				}
				else if(!(2 <= strlen(inputtext) <= 79)) {
					ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
					return SendClientMessageEx(playerid, COLOR_GREY, "Your input was too long or too short.");
				}
				iAdverTimer = 30;
				SetPVarInt(playerid, "adT", 120);
				strcpy(szAdvert[playerid], inputtext, 128);
				GivePlayerCash(playerid, -150000);

				new
					szMessage[128];

 				format(szMessage, sizeof(szMessage), "Advertisement: %s - contact %s [%d] (#%i)", inputtext, GetPlayerNameEx(playerid), playerid, PlayerInfo[playerid][pPnumber]);
				foreach(new i: Player) if(!gNews[i] && InsideMainMenu{i} != 1 && InsideTut{i} != 1 && ActiveChatbox[i] != 0) SendClientMessage(i, TEAM_GROVE_COLOR, szMessage);
				Log("logs/pads.log", szMessage);

				return SendClientMessageEx(playerid, COLOR_WHITE, "Congratulations, you have placed your priority advertisement!");
			}
			else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
		case DIALOG_ADSEARCH: {
			if(response) {

				if(!(4 <= strlen(inputtext) <= 80)) {
					return ShowPlayerDialog(playerid, DIALOG_ADSEARCH, DIALOG_STYLE_INPUT, "Advertisements - Search", "Queries must be between 4\n and 80 characters in length.\n\nEnter a search phrase.", "Search", "Return");
				}
				else for(new x; x < 50; ++x) ListItemTrackId[playerid][x] = -1;

				new
					szDialog[2256],
					szSearch[80],
					szBuffer[32],
					iCount;

				strcat(szSearch, inputtext, sizeof(szSearch)); // strfindex is a piece of shit when it comes to non-indexed arrays, maybe this'll help.
				foreach(new i: Player) if(!isnull(szAdvert[i])) {
					// printf("[ads] [NAME: %s] [ID: %i] [AD: %s] [SEARCH: %s]", GetPlayerNameEx(i), i, szAdvert[i], szSearch);
					if(strfindex(szAdvert[i], szSearch, true) != -1 && iCount < 50) {
						// printf("[ads - MATCH] [NAME: %s] [ID: %i] [AD: %s] [SEARCH: %s] [COUNT: %i] [DIALOG LENGTH: %i] [FINDPOS: %i]", GetPlayerNameEx(i), i, szAdvert[i], szSearch, iCount, strlen(szDialog), strfind(szAdvert[i], szSearch, true));
						strcpy(szBuffer, szAdvert[i], sizeof(szBuffer));
						if(PlayerInfo[playerid][pAdmin] <= 1) format(szDialog, sizeof(szDialog), "%s%s... (%i)\r\n", szDialog, szBuffer, PlayerInfo[i][pPnumber]);
						else format(szDialog, sizeof(szDialog), "%s%s... (%s)\r\n", szDialog, szBuffer, GetPlayerNameEx(i));
						ListItemTrackId[playerid][iCount++] = i;
					}
				}
				if(!isnull(szDialog)) ShowPlayerDialog(playerid, DIALOG_ADSEARCHLIST, DIALOG_STYLE_LIST, "Advertisements - Search Results", szDialog, "Select", "Return");
				else ShowPlayerDialog(playerid, DIALOG_ADSEARCHLIST, DIALOG_STYLE_INPUT, "Advertisements - Search", "No results found.\n\nEnter a search phrase.", "Search", "Return");

			}
			else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
		case DIALOG_ADSEARCHLIST: if(response) {

			new
				i = ListItemTrackId[playerid][listitem],
				szDialog[164];

			if(IsPlayerConnected(i) && !isnull(szAdvert[i])) {
				format(szDialog, sizeof(szDialog), "%s\r\nContact: %i", szAdvert[i], PlayerInfo[i][pPnumber]);
				ShowPlayerDialog(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Advertisements - Search Result", szDialog, "Return", "Exit");
			}
			else SendClientMessage(playerid, COLOR_GREY, "This player has either disconnected or withdrawn their advertisement.");
		}
		case DIALOG_ADFINAL: {
			if(response) return ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
		case DIALOG_ADLIST: {
			if(response) {

				new
					i = ListItemTrackId[playerid][listitem],
					szDialog[164];

				if(IsPlayerConnected(i) && !isnull(szAdvert[i])) {
					format(szDialog, sizeof(szDialog), "%s\r\nContact: %i", szAdvert[i], PlayerInfo[i][pPnumber]);
					return ShowPlayerDialog(playerid, DIALOG_ADFINAL, DIALOG_STYLE_MSGBOX, "Advertisements - Search Result", szDialog, "Return", "Exit");
				}
				else SendClientMessage(playerid, COLOR_GREY, "This player has either disconnected or withdrawn their advertisement.");
			}
			else ShowPlayerDialog(playerid, DIALOG_ADMAIN, DIALOG_STYLE_LIST, "Advertisements", "List Advertisements\nSearch Advertisements\nPlace Advertisement\nPlace Priority Advertisement", "Select", "Cancel");
		}
	}
	if(dialogid == DIALOG_INTERIOR_MENU) {//Interiors
		if(response) {
			new arrayid = listitem;
			SetPlayerPos(playerid, InteriorDialogData[arrayid][0], InteriorDialogData[arrayid][1], InteriorDialogData[arrayid][2]);
			SetPlayerInterior(playerid, InteriorDialogInteriors[arrayid][0]);
			SetPlayerFacingAngle(playerid, InteriorDialogData[arrayid][3]);
			format(string, sizeof(string), "[INTERIOR:] You teleported to interior ' %s '.", InteriorDialogNames[arrayid][0]);
			SendClientMessage(playerid, 0xADD8E6FF, string);
		}
		else{
			//The player has pressed "Close".
			SendClientMessage(playerid, COLOR_RED, "You have closed the Interior Teleport Dialog.");
		}
		return 0;
	}
	if(dialogid == DIALOG_HOUSE_INTERIOR_MENU) {//Interiors
		if(response) {
			new arrayid = listitem;
			SetPlayerPos(playerid, HouseInteriorDialogData[arrayid][0], HouseInteriorDialogData[arrayid][1], HouseInteriorDialogData[arrayid][2]);
			SetPlayerInterior(playerid, HouseInteriorDialogInteriors[arrayid][0]);
			format(string, sizeof(string), "[House Interior:] You teleported to House Interior ' %s '.", HouseInteriorDialogNames[arrayid][0]);
			SendClientMessage(playerid, 0xADD8E6FF, string);
		}
		else{
			//The player has pressed "Close".
			SendClientMessage(playerid, COLOR_RED, "You have closed the House Interior Teleport Dialog.");
		}
		return 0;
	}
    if(dialogid == RCPINTRO)
    {
        if (response)
	    {
	        new msgstring[218];
			format(msgstring,sizeof(msgstring),"\tThere are stages you follow in order to make a checkpoint;\n1.- Adjusting the position of the checkpoint.\n2.- Confirm the position of the checkpoint.\n3.- Set the checkpoint size.\n4.- Set the checkpoint type.");
			ShowPlayerDialog(playerid,RCPINTRO2,DIALOG_STYLE_MSGBOX,"Race Checkpoints Introduction",msgstring,"Start","Cancel");
	    }
	    else
	    {
			format(string,sizeof(string),"Create a checkpoint...\nEdit an existing checkpoint\nRemove checkpoint preview");
			ShowPlayerDialog(playerid,RCPCHOOSE,DIALOG_STYLE_LIST,"Race Checkpoints Configuration",string,"Okay","I'm done!");
            ConfigEventCPId[playerid] = 0;
			ConfigEventCPs[playerid][1] = 0;
	    }
    }
    if(dialogid == RCPINTRO2)
    {
        if (response)
	    {
	        format(string,sizeof(string),"Create a checkpoint...\nEdit an existing checkpoint\nRemove checkpoint preview");
			ShowPlayerDialog(playerid,RCPCHOOSE,DIALOG_STYLE_LIST,"Race Checkpoints Configuration",string,"Okay","I'm done!");
			ConfigEventCPId[playerid] = 0;
			ConfigEventCPs[playerid][1] = 0;
	    }
    }
    if(dialogid == RCPCHOOSE)
    {
        if (response && ConfigEventCPs[playerid][0] == 1)
	    {
	        if(listitem == 0) // Create a checkpoint
	        {
	            if(ConfigEventCPs[playerid][1] != 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: You cannot create a new checkpoint since you are editing an existing one.");
	            if(ConfigEventCPId[playerid] >= 20) {
	                ConfigEventCPs[playerid][0] = 0;
	                ConfigEventCPs[playerid][1] = 0;
					ConfigEventCPId[playerid] = 0;
					return SendClientMessageEx(playerid, COLOR_RED, "ERROR: You cannot create a new checkpoint since you have reached the checkpoint limit(20).");
				}
				new i;
				for(i = 0; i < 20; i++)
				{
				    if(EventRCPU[i] == 0) break;
				}
				if(i >= 20) {
	                ConfigEventCPs[playerid][0] = 0;
	                ConfigEventCPs[playerid][1] = 0;
					ConfigEventCPId[playerid] = 0;
					return SendClientMessageEx(playerid, COLOR_RED, "ERROR: You cannot create a new checkpoint since you have reached the checkpoint limit(20).");
				}
				ConfigEventCPId[playerid] = i;
				ConfigEventCPs[playerid][1] = 1;
				ConfigEventCPs[playerid][2] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now creating a new checkpoint, you need to choose the position where the checkpoint will be at.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "NOTE: Once you are done and have the right place please press the fire button to save the position.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "NOTE: You can also cancel this action by pressing the AIM button.");
			}
			else if(listitem == 1) // Edit an existing checkpoint IN PROCESS
			{
			    if(ConfigEventCPs[playerid][1] != 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: You cannot edit a checkpoint since you are editing an existing one.");
			    new bigstring[798], totalrcps;
			    for(new i = 0; i < 20; i++)
				{
					if(EventRCPU[i] > 0) {
					    switch(EventRCPT[i]) {
							case 1:
							{
					    		format(bigstring, sizeof(bigstring), "%s(RCPID:%i) Start Checkpoint", bigstring, i+1);
								format(bigstring, sizeof(bigstring), "%s\n", bigstring);
							}
							case 2:
							{
					    		format(bigstring, sizeof(bigstring), "%s(RCPID:%i) Normal Checkpoint", bigstring, i+1);
								format(bigstring, sizeof(bigstring), "%s\n", bigstring);
							}
							case 3:
							{
					    		format(bigstring, sizeof(bigstring), "%s(RCPID:%i) Watering Station Checkpoint", bigstring, i+1);
								format(bigstring, sizeof(bigstring), "%s\n", bigstring);
							}
							case 4:
							{
					    		format(bigstring, sizeof(bigstring), "%s(RCPID:%i) Finish Checkpoint", bigstring, i+1);
								format(bigstring, sizeof(bigstring), "%s\n", bigstring);
							}
							default:
							{
							    format(bigstring, sizeof(bigstring), "%s(RCPID:%i) No Checkpoint type", bigstring, i+1);
								format(bigstring, sizeof(bigstring), "%s\n", bigstring);
							}
						}
						ListItemRCPId[playerid][totalrcps] = i;
						totalrcps++;
					}
				}
				if(totalrcps == 0) return SendClientMessageEx(playerid, COLOR_RED, "ERROR: No checkpoints have been created.");
				ShowPlayerDialog(playerid, RCPEDITMENU, DIALOG_STYLE_LIST,"Please choose a checkpoint to edit:", bigstring, "Edit", "Cancel");
			}
			else if(listitem == 2) // Remove view of checkpoint
			{
			    DisablePlayerCheckpoint(playerid);
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have disabled your race checkpoints.");
			}
	    }
    }
    if(dialogid == RCPEDITMENU)
    {
        ConfigEventCPs[playerid][2] = 0;
        ConfigEventCPId[playerid] = ListItemRCPId[playerid][listitem];
        ConfigEventCPs[playerid][1] = 0;
        DisablePlayerCheckpoint(playerid);
	    if(EventRCPT[ConfigEventCPId[playerid]] == 1) {
			SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
		}
		else if(EventRCPT[ConfigEventCPId[playerid]] == 4) {
		    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
		}
		else {
		    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
		}
        format(string,sizeof(string),"Checkpoint Edit(ID:%d)", ConfigEventCPId[playerid]);
		ShowPlayerDialog(playerid,RCPEDITMENU2,DIALOG_STYLE_LIST,string,"Edit position\nEdit size\nEdit type\nView checkpoint","Okay","I'm done!");
    }
    if(dialogid == RCPEDITMENU2)
    {
        if (response)
	    {
	        if(listitem == 0) // Edit position
	        {
				ConfigEventCPs[playerid][1] = 1;
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now creating editing this checkpoint's position, you need to choose the position where the checkpoint will be at.");
				SendClientMessageEx(playerid, COLOR_WHITE, "NOTE: Press the FIRE button to save the position. You can cancel this action by pressing the AIM button.");
         	}
			else if(listitem == 1) // edit size
			{
			    ConfigEventCPs[playerid][1] = 3;
                format(string,sizeof(string),"Race Checkpoint %d Size", ConfigEventCPId[playerid]);
				ShowPlayerDialog(playerid,RCPSIZE,DIALOG_STYLE_INPUT,string,"Please choose the size of the checkpoint.\nRecommended size: 5.0","Ok","Cancel");
			}
			else if(listitem == 2) // edit type
			{
                ConfigEventCPs[playerid][1] = 4;
                ShowPlayerDialog(playerid,RCPTYPE,DIALOG_STYLE_LIST,"Race Checkpoints Type List","1.- Start checkpoint\n2.- Normal checkpoint\n3.- Watering Station\n4.- Finish checkpoint","Okay","Cancel");
			}
			else if(listitem == 3) // view checkpoint
			{
	        	if(EventRCPT[ConfigEventCPId[playerid]] == 1) {
					SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
				else if(EventRCPT[ConfigEventCPId[playerid]] == 4) {
				    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
				else {
				    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
				}
				SetPlayerPosEx(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]]);
				SendClientMessageEx(playerid, COLOR_WHITE, "You now have a view of this checkpoint, you are inside of the checkpoint, step outside to see it.");
			}
	    }
    }
    if(dialogid == RCPTYPE)
    {
        if (response && ConfigEventCPs[playerid][0] == 1)
	    {
	        if(listitem == 0) // Start checkpoint
	        {
				EventRCPT[ConfigEventCPId[playerid]] = 1;
				DisablePlayerCheckpoint(playerid);
	    		ConfigEventCPs[playerid][1] = 0;
	    		ConfigEventCPs[playerid][0] = 0;
	    		SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
         	}
			else if(listitem == 1) // Normal Checkpoint
			{
			    EventRCPT[ConfigEventCPId[playerid]] = 2;
			    DisablePlayerCheckpoint(playerid);
	    		ConfigEventCPs[playerid][1] = 0;
	    		ConfigEventCPs[playerid][0] = 0;
	    		SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
			}
			else if(listitem == 2) // Watering Checkpoint
			{
			    EventRCPT[ConfigEventCPId[playerid]] = 3;
			    DisablePlayerCheckpoint(playerid);
	    		ConfigEventCPs[playerid][1] = 0;
	    		ConfigEventCPs[playerid][0] = 0;
	    		SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
			}
			else if(listitem == 3) // Finish Checkpoint
			{
			    EventRCPT[ConfigEventCPId[playerid]] = 4;
       			DisablePlayerCheckpoint(playerid);
	    		ConfigEventCPs[playerid][1] = 0;
	    		ConfigEventCPs[playerid][0] = 0;
	    		SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
			}
	    }
    }
    if(dialogid == RCPSIZE)
    {
        if(response && ConfigEventCPs[playerid][0] == 1)
        {
            if(strlen(inputtext) < 1)
	    	{
	        	format(string,sizeof(string),"Race Checkpoint %d Size", ConfigEventCPId[playerid]);
				ShowPlayerDialog(playerid,RCPSIZE,DIALOG_STYLE_INPUT,string,"Please type a number for the size of the checkpoint","Ok","Cancel");
				return 1;
	    	}
	    	new Float: rcpsize;
	    	rcpsize = floatstr(inputtext);
	    	if(rcpsize < 1.0 && rcpsize > 15.0) return 1;
	    	EventRCPS[ConfigEventCPId[playerid]] = rcpsize;
	    	SendClientMessage(playerid, COLOR_WHITE, "Successfully changed the size, updating preview...");
	    	DisablePlayerCheckpoint(playerid);
	        if(EventRCPT[ConfigEventCPId[playerid]] == 1) {
				SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
			}
			else if(EventRCPT[ConfigEventCPId[playerid]] == 4) {
			    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
			}
			else {
			    SetPlayerCheckpoint(playerid, EventRCPX[ConfigEventCPId[playerid]], EventRCPY[ConfigEventCPId[playerid]], EventRCPZ[ConfigEventCPId[playerid]], EventRCPS[ConfigEventCPId[playerid]]);
			}
			if(ConfigEventCPs[playerid][2] == 1) {
				ConfigEventCPs[playerid][1] = 4;
				ShowPlayerDialog(playerid,RCPTYPE,DIALOG_STYLE_LIST,"Race Checkpoints Type List","1.- Start checkpoint\n2.- Normal checkpoint\n3.- Watering Station\n4.- Finish checkpoint","Okay","Cancel");
			}
		}
    }
	if(dialogid == UNMODCARMENU)
	{
	    if (response)
	    {
		    new count = GetPVarInt(playerid, "modCount");
			new d;
			for(new z = 0 ; z < MAX_PLAYERVEHICLES; z++)
			{
				if(IsPlayerInVehicle(playerid, PlayerVehicleInfo[playerid][z][pvId]))
				{
					d = z;
				    break;
				}
			}
            for (new i = 0; i < count; i++)
			{
				if(listitem == i)
				{
				    format(string, sizeof(string), "partList%i", i);
					new partID = GetPVarInt(playerid, string);
					if (partID == 999)
					{
					    for(new f = 0 ; f < MAX_MODS; f++)
						{
							SetPVarInt(playerid, "unMod", 1);
							RemoveVehicleComponent(PlayerVehicleInfo[playerid][d][pvId], GetVehicleComponentInSlot(PlayerVehicleInfo[playerid][d][pvId], f));
							PlayerVehicleInfo[playerid][d][pvMods][f] = 0;
						}
						SendClientMessageEx(playerid, COLOR_WHITE, "All modifications have been removed from your vehicle.");
						return 1;
					}
					SetPVarInt(playerid, "unMod", 1);
     				RemoveVehicleComponent(GetPlayerVehicleID(playerid), partID);
     				PlayerVehicleInfo[playerid][d][pvMods][GetVehicleComponentType(partID)] = 0;
     				SendClientMessageEx(playerid, COLOR_WHITE, "The modification you requested has been removed.");
     				return 1;
				}
        	}
		}
	}

	if(dialogid == 7954) // Report tips
	{
		ShowPlayerDialog(playerid,7955,DIALOG_STYLE_MSGBOX,"Report tips","Tips when reporting:\n- Report what you need, not who you need.\n- Be specific, report exactly what you need.\n- Do not make false reports.\n- Do not flame admins.\n- Report only for in-game items.\n- For shop orders use the /shoporder command","Close", "");
	}
    #if defined SHOPAUTOMATED
	if(dialogid == DIALOG_SHOPORDER)
	{
		if(response)
		{
	    	if(strlen(inputtext) < 1 || strlen(inputtext) > 6)
	    	{
	        	ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "Shop Order","ERROR: The shop order ID must be no longer than 6 characters and no lower than 1 character.", "Retry", "Cancel");
	        	return 1;
	    	}
			if(!IsNumeric(inputtext))
			{
  				ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "Shop Order","ERROR: The shop order ID must be a numerical value.", "Retry", "Cancel");
	        	return 1;
			}
			new orderid = strval(inputtext);
			if(orderid == 0)
			{
			    ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "Shop Order","ERROR: The shop order ID can not be 0.", "Retry", "Cancel");
			    return 1;
			}
			ShowNoticeGUIFrame(playerid, 6);
			PlayerInfo[playerid][pOrder] = orderid;

			new shoptechs;
			foreach(Player, i)
			{
				if(PlayerInfo[i][pShopTech] > 0)
				{
					shoptechs++;
				}
			}

			new shopstring[512];
			if(shoptechs > 0)
			{
				format(shopstring, sizeof(shopstring), "You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nShop Techs Online: %d\n\nNOTE: The shop order remains pending even if you go offline and log back in.", orderid, shoptechs);
            	ShowPlayerDialog(playerid, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "Shop Order", shopstring, "Close", "");

             	format(string, sizeof(string), "Shop order ID %d from %s (ID: %d) is now pending.", orderid, GetPlayerNameEx(playerid), playerid);
				ShopTechBroadCast(COLOR_SHOP, string);
			}
			else
			{
				format(shopstring, sizeof(shopstring), "You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nThere are currently no shop techs online, you can resume normal gameplay and a shop tech will be with you when they log on.\n\nNOTE: The shop order remains pending even if you go offline and log back in.", orderid);
  				ShowPlayerDialog(playerid, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "Shop Order", shopstring, "Close", "");
			}
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "Shop order ID %d from %s(IP: %s) is now pending.", orderid, GetPlayerNameEx(playerid), playerip);
			Log("logs/shop tech/shoporders.log", string);

            new query[384];
			format(query, sizeof(query), "\
			SELECT p.order_product_id, p.order_id, p.name, p.quantity, p.delivered, h.order_status_id, o.email, o.ip \
			FROM newshoporder_product p \
			LEFT JOIN newshoporder_history h ON h.order_id = p.order_id AND h.order_history_id = (SELECT max(order_history_id) FROM newshoporder_history WHERE p.order_id = order_id) \
			LEFT JOIN newshoporder o ON o.order_id = p.order_id \
			WHERE p.order_id = %d", orderid);
			mysql_function_query(ShopPipeline, query, true, "OnShopOrder", "i", playerid);


			SetPVarInt(playerid, "ShopOrderTimer", 60); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SHOPORDERTIMER);
		}
	}

	if(dialogid == DIALOG_SHOPORDEREMAIL)
	{
		if(response)
		{
		    new email[256];
		    GetPVarString(playerid, "ShopEmailVerify", email, sizeof(email));
		    if(!isnull(inputtext) && strcmp(inputtext, email, true) == 0)
		    {
		        ShowNoticeGUIFrame(playerid, 6);
	            new query[384];
				format(query, sizeof(query), "\
				SELECT p.order_product_id, p.order_id, p.name, p.quantity, p.delivered, h.order_status_id \
				FROM newshoporder_product p \
				LEFT JOIN newshoporder_history h ON h.order_id = p.order_id AND h.order_history_id = (SELECT max(order_history_id) FROM newshoporder_history WHERE p.order_id = order_id) \
				LEFT JOIN newshoporder o ON o.order_id = p.order_id \
				WHERE p.order_id = %d", PlayerInfo[playerid][pOrder]);
				mysql_function_query(ShopPipeline, query, true, "OnShopOrderEmailVer", "i", playerid);
			}
			else
			{
			    //ERROR ASK FURTHER HELP
			    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Shop Order Error", "We were unable to verify that e-mail to that order, would you like further assistance from a shop technician?", "Yes", "No");
			}
		}
	}

	if(dialogid == DIALOG_SHOPORDER2)
	{
		if(response)
		{
		    ShowNoticeGUIFrame(playerid, 6);
            new query[256];
			format(query, sizeof(query), "SELECT * FROM `shop` WHERE `order_id`=%d", PlayerInfo[playerid][pOrder]);
			mysql_function_query(ShopPipeline, query, true, "OnShopOrder2", "ii", playerid, listitem);
		}
	}

	if(dialogid == DIALOG_SHOPDELIVER)
	{
		if(response)
		{
            switch(GetPVarInt(playerid, "DShop_product_id"))
            {
                case 69: //Custom car
                {
                    new carstring[5012];
					for(new x;x<sizeof(VehicleNameShop);x++)
					{
					    format(carstring, sizeof(carstring), "%s%d - %s\n", carstring, VehicleNameShop[x][svehicleid], VehicleNameShop[x][svehiclename]);
					}
                    ShowPlayerDialog(playerid, DIALOG_SHOPDELIVERCAR, DIALOG_STYLE_LIST, "Shop Car Delivery", carstring, "Select Car", "Cancel");
                }
            }
		}
	}

	if(dialogid == DIALOG_SHOPDELIVERCAR)
	{
		if(response)
		{
			new dialogstring[256], name[64];
			GetPVarString(playerid, "DShop_name", name, sizeof(name));
			SetPVarInt(playerid, "DShop_listitem", listitem);
   			format(dialogstring, sizeof(dialogstring), "You are about to redeem: %s\nOrder ID: %d\nWith vehicle: %s (ID %d)\n\nAre you sure?", name, GetPVarInt(playerid, "DShop_order_id"), VehicleNameShop[listitem][svehicleid], VehicleNameShop[listitem][svehiclename]);
   			ShowPlayerDialog(playerid, DIALOG_SHOPDELIVERCAR2, DIALOG_STYLE_MSGBOX, "Shop Car Delivery", dialogstring, "Reedem", "Cancel");
		}
	}

	if(dialogid == DIALOG_SHOPDELIVERCAR2)
	{
	    if(response)
	    {
	        if(!vehicleCountCheck(playerid))
			{
				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Error", "You can't have any more vehicles, you own too many!", "OK", "");
			}
			else if(!vehicleSpawnCountCheck(playerid))
			{
    			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Error", "You have too many vehicles spawned, you must store one first.", "OK", "");
			}
			else
			{
				new Float: arr_fPlayerPos[4];
				listitem = GetPVarInt(playerid, "DShop_listitem");

				GetPlayerPos(playerid, arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2]);
				GetPlayerFacingAngle(playerid, arr_fPlayerPos[3]);
				CreatePlayerVehicle(playerid, GetPlayerFreeVehicleId(playerid), VehicleNameShop[listitem][svehicleid], arr_fPlayerPos[0], arr_fPlayerPos[1], arr_fPlayerPos[2], arr_fPlayerPos[3], 0, 0, 2000000);

				format(string, sizeof(string), "[shoporder] created a %s (%d) for %s (invoice %s).", VehicleName[VehicleNameShop[listitem][svehicleid] - 400], VehicleNameShop[listitem][svehicleid], GetPlayerNameEx(playerid), GetPVarInt(playerid, "DShop_order_id"));
				Log("logs/shoplog.log", string);
   			}
	    }
	}
	#else
	if(dialogid == DIALOG_SHOPORDER)
	{
		if(response)
		{
	    	if(strlen(inputtext) < 1 || strlen(inputtext) > 6)
	    	{
	        	ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "Shop Order","ERROR: The shop order ID must be no longer than 6 characters and no lower than 1 character.", "Retry", "Cancel");
	        	return 1;
	    	}
			if(!IsNumeric(inputtext))
			{
  				ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "Shop Order","ERROR: The shop order ID must be a numerical value.", "Retry", "Cancel");
	        	return 1;
			}
			new orderid = strval(inputtext);
			if(orderid == 0)
			{
			    ShowPlayerDialog(playerid, DIALOG_SHOPERROR, DIALOG_STYLE_MSGBOX, "Shop Order","ERROR: The shop order ID can not be 0.", "Retry", "Cancel");
			    return 1;
			}
			PlayerInfo[playerid][pOrder] = orderid;

			SetPVarInt(playerid, "ShopOrderTimer", 60); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SHOPORDERTIMER);

			new shoptechs;
			foreach(Player, i)
			{
				if(PlayerInfo[i][pShopTech] > 0)
				{
					shoptechs++;
				}
			}

			SetPVarInt(playerid, "ShopOrderTimer", 60); SetTimerEx("OtherTimerEx", 1000, false, "ii", playerid, TYPE_SHOPORDERTIMER);

			new shopstring[512];
			if(shoptechs > 0)
			{
				format(shopstring, sizeof(shopstring), "You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nShop Techs Online: %d\n\nNOTE: The shop order remains pending even if you go offline and log back in.", orderid, shoptechs);
            	ShowPlayerDialog(playerid, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "Shop Order", shopstring, "Close", "");

             	format(string, sizeof(string), "Shop order ID %d from %s (ID: %d) is now pending.", orderid, GetPlayerNameEx(playerid), playerid);
				ShopTechBroadCast(COLOR_SHOP, string);
			}
			else
			{
				format(shopstring, sizeof(shopstring), "You are now waiting to receive shop order ID: %d\n\nA shop tech will be with you as soon as possible.\n\nIf you have more than one order then please let the shop tech know once they are with you.\n\nThere are currently no shop techs online, you can resume normal gameplay and a shop tech will be with you when they log on.\n\nNOTE: The shop order remains pending even if you go offline and log back in.", orderid);
  				ShowPlayerDialog(playerid, DIALOG_SHOPSENT, DIALOG_STYLE_MSGBOX, "Shop Order", shopstring, "Close", "");
			}
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format(string, sizeof(string), "Shop order ID %d from %s(IP: %s) is now pending.", orderid, GetPlayerNameEx(playerid), playerip);
			Log("logs/shop tech/shoporders.log", string);

			//format(string, sizeof(string), "shop.ng-gaming.net/idcheck.php?id=%d", orderid);
			//HTTP(playerid, HTTP_GET, string, "", "HttpCallback_ShopIDCheck");
		}
	}
	#endif
	if(dialogid == DIALOG_SHOPERROR)
	{
		if(response)
		{
		    ShowPlayerDialog(playerid, DIALOG_SHOPORDER, DIALOG_STYLE_INPUT, "Shop Order", "This is for shop orders from our shop\n\nIf you do not have a shop order then please cancel this dialog box now.\n\nWarning: Abuse of this feature may result to an indefinite block from this command.\n\nPlease enter your shop order ID (if you do not know it put 1):", "Submit", "Cancel" );
		}
	}
	if(dialogid == DIALOG_SHOPERROR2)
	{
		if(response)
		{
		    ShowPlayerDialog(playerid, DIALOG_SHOPSENT, DIALOG_STYLE_INPUT, "Shop Order", "", "Submit", "Cancel" );
		}
	}
	if(dialogid == PMOTDNOTICE && 1 <= PlayerInfo[playerid][pDonateRank] <= 3 && (PlayerInfo[playerid][pVIPExpire] - 86400 < gettime())) {
		ShowPlayerDialog(playerid, VIP_EXPIRES, DIALOG_STYLE_MSGBOX, "VIP Expiration!", "Your VIP expires in less than a day!", "OK", "");
	}
	else if(dialogid == PMOTDNOTICE || dialogid == VIP_EXPIRES)
	{
		if(GetPVarInt(playerid, "NullEmail")) {
			ShowPlayerDialog(playerid, NULLEMAIL, DIALOG_STYLE_INPUT, "{3399FF}E-mail Registration", "{FFFFFF}Please enter a valid e-mail address to associate with your account.\n\nNotice: Providing an invalid address may result in never being able\nto Recover your Account if you forget your Password or get Hacked.", "Submit", "Skip");
		}
	}
	if(dialogid == NULLEMAIL)
	{
		if(response)
		{
			new query[356], emailstring[128], emailconfirm[1024];

			//if(strcmp(inputtext, MaxAdminPassword, true) == 0)
			if(isnull(inputtext))
			{
				ShowPlayerDialog(playerid, NULLEMAIL, DIALOG_STYLE_INPUT, "{3399FF}E-mail Registration", "{FFFFFF}Please enter a valid e-mail address to associate with your account.\n\nNotice: Providing an invalid address may result in never being able\nto Recover your Account if you forget your Password or get Hacked..", "Submit", "");
				return 1;
			}
			else
			{
				format(emailstring, sizeof(emailstring), "E-Mail '%s' is now associated with your Account.", inputtext);
				SendClientMessageEx(playerid, COLOR_YELLOW, emailstring);
				format(query, sizeof(query), "UPDATE `accounts` SET `Email`='%s' WHERE `id`=%d", g_mysql_ReturnEscaped(inputtext, MainPipeline), GetPlayerSQLId(playerid));
				mysql_function_query(MainPipeline, query, false, "OnQueryFinish", "i", SENDDATA_THREAD);
				strcat(emailconfirm,"E-Mail entered is now associated with your Account.\n\n",sizeof(emailconfirm));
				strcat(emailconfirm,"This will be used to Recover your Account if you have forgotton your Password or your Account has been Hijacked.\n\n",sizeof(emailconfirm));
				strcat(emailconfirm,"Please Note, to change your E-Mail vist http://cp.evolution-rp.net an E-Mail will be sent to the E-Mail associated with\n",sizeof(emailconfirm));
				strcat(emailconfirm,"your Account to confirm to the new E-mail.",sizeof(emailconfirm));
				ShowPlayerDialog(playerid,0,DIALOG_STYLE_MSGBOX,"E-Mail Linked",emailconfirm,"Close","");
			}
		}
	}//Disabled until fixed.
/*if( dialogid == NULLEMAIL )
	{
		if(!response || strlen(inputtext) == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You have Skipped adding an E-mail to your Account." );
	    if( strlen( inputtext ) >= 64 )
	    {
	        SendClientMessageEx( playerid, COLOR_WHITE, "You can't select an E-Mail that's above 64 characters." );
	    }
	    else
	    {
	        if( strlen( inputtext ) >= 1 )
	        {
	            if(!response)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You have Skipped adding an E-mail to your Account." );
	            }
	            else
	            {
					new
						szBuffer[129],
						szQuery[256];

					WP_Hash(szBuffer, sizeof(szBuffer), inputtext);
					SetPVarString(playerid, "PassChange", inputtext);

					format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Pass` = '%s' WHERE `id` = '%i'", szBuffer, PlayerInfo[playerid][pId]);
					mysql_function_query(MainPipeline, szQuery, false, "OnPlayerChangePass", "i", playerid);
					SendClientMessageEx(playerid, COLOR_YELLOW, "Processing your request...");
	            }
	        }
	        else
	        {
	            SendClientMessageEx( playerid, COLOR_WHITE, "Your password must be longer than 1 character." );
	        }
	    }
	}*/

	if(dialogid == DIALOG_LOADTRUCK) // TRUCKER JOB LOAD TRUCK
	{
 		if(response)
		{
			if(listitem == 0) // Legal goods
			{

			    ShowPlayerDialog(playerid, DIALOG_LOADTRUCKL, DIALOG_STYLE_LIST, "What do you want to transport?","{00F70C}Food & beverages\n{00F70C}Clothing\n{00F70C}Materials\n{00F70C}24/7 Items", "Select", "Cancel");
			}
			if(listitem == 1) // Illegal goods
			{
				new level = PlayerInfo[playerid][pTruckSkill];
				if(level >= 0 && level <= 50)
				{
            		ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 1 Bonus: Free 9mm)\n{FF0606}Drugs 			{FFFFFF}(Level 1 Bonus: Free 2 pot, 1 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 1 Bonus: Free 25 materials)", "Select", "Cancel");
				}
				else if(level >= 51 && level <= 100)
				{
		    		ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 2 Bonus: Free Shotgun)\n{FF0606}Drugs 			{FFFFFF}(Level 2 Bonus: Free 4 pot, 2 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 2 Bonus: Free 50 materials)", "Select", "Cancel");
				}
				else if(level >= 101 && level <= 200)
				{
		    		ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 3 Bonus: Free MP5)\n{FF0606}Drugs 			{FFFFFF}(Level 3 Bonus: Free 6 pot, 3 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 3 Bonus: Free 100 materials)", "Select", "Cancel");
				}
				else if(level >= 201 && level <= 400)
				{
            		ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 4 Bonus: Free Deagle)\n{FF0606}Drugs 			{FFFFFF}(Level 4 Bonus: Free 8 pot, 4 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 4 Bonus: Free 150 materials)", "Select", "Cancel");
				}
				else if(level >= 401)
				{
 		 			ShowPlayerDialog(playerid, DIALOG_LOADTRUCKI, DIALOG_STYLE_LIST, "What do you want to transport?","{FF0606}Weapons 		{FFFFFF}(Level 5 Bonus: Free AK-47 or M4)\n{FF0606}Drugs 			{FFFFFF}(Level 5 Bonus: Free 10 pot, 5 crack)\n{FF0606}Illegal materials  	{FFFFFF}(Level 5 Bonus: Free 200 materials)", "Select", "Cancel");
				}
			}
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You canceled the loading of the Truck, type /loadtruck to try again.");
		}
	}
	if(dialogid == DIALOG_LOADTRUCKL) // TRUCKER JOB LEGAL GOODS
	{
 		if(response)
		{
			if(listitem == 0) // Food & beverages
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 1);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 2);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 3);
    			}
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with food & beverages....");
			}
			if(listitem == 1) // Clothing
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 4);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 5);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 6);
    			}
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with clothing....");
			}
			if(listitem == 2) // Materials
			{
				SetPVarInt(playerid, "TruckDeliver", 7);
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with materials....");
			}
			if(listitem == 3) // 24/7 Items
			{
				new route = Random(1, 4);
    			if(route == 1)
				{
    				SetPVarInt(playerid, "TruckDeliver", 8);
    			}
    			if(route == 2)
				{
    				SetPVarInt(playerid, "TruckDeliver", 9);
    			}
    			if(route == 3)
				{
    				SetPVarInt(playerid, "TruckDeliver", 10);
    			}
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with 24/7 items....");
			}

  			SetPVarInt(playerid, "LoadTruckTime", 10);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You canceled the loading of the Truck, type /loadtruck to try again.");
		}
	}

	if(dialogid == DIALOG_LOADTRUCKI) // TRUCKER JOB ILLEGAL GOODS
	{
 		if(response)
		{
		    new level = PlayerInfo[playerid][pTruckSkill];
			if(listitem == 0) // Weapons
			{
				if(level >= 0 && level <= 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 11); // Bonus: 9mm
				}
				else if(level >= 51 && level <= 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 12); // Bonus: MP5
				}
				else if(level >= 101 && level <= 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 13); // Bonus: Deagle
				}
				else if(level >= 201 && level <= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 14); // Bonus: AK-47
				}
				else if(level >= 401)
				{
                    SetPVarInt(playerid, "TruckDeliver", 15); // Bonus: Ak-47 or M4
				}
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with weapons....");
			}
			if(listitem == 1) // Drugs
			{
				if(level >= 0 && level <= 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 16); // Bonus: 10 pot, 5 crack
				}
				else if(level >= 51 && level <= 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 17); // Bonus: 20 pot, 10 crack
				}
				else if(level >= 101 && level <= 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 18); // Bonus: 30 pot, 15 crack
				}
				else if(level >= 201 && level <= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 19); // Bonus: 40 pot, 20 crack
				}
				else if(level >= 401)
				{
                    SetPVarInt(playerid, "TruckDeliver", 20); // Bonus: 50 pot, 25 crack
				}
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with drugs....");
			}
			if(listitem == 2) // Illegal materials
			{
				if(level >= 0 && level <= 50)
				{
                    SetPVarInt(playerid, "TruckDeliver", 21); // Bonus: 100 materials
				}
				else if(level >= 51 && level <= 100)
				{
                    SetPVarInt(playerid, "TruckDeliver", 22); // Bonus: 300 materials
				}
				else if(level >= 101 && level <= 200)
				{
                    SetPVarInt(playerid, "TruckDeliver", 23); // Bonus: 750 materials
				}
				else if(level >= 201 && level <= 400)
				{
                    SetPVarInt(playerid, "TruckDeliver", 24); // Bonus: 1500 materials
				}
				else if(level >= 401)
				{
                    SetPVarInt(playerid, "TruckDeliver", 25); // Bonus: 2500 materials
				}
                SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Please wait a moment while the truck is being loaded with illegal materials....");
			}

  		    SetPVarInt(playerid, "LoadTruckTime", 10);
			SetTimerEx("LoadTruck", 1000, 0, "d", playerid);
		}
		else
		{
		    DeletePVar(playerid, "IsFrozen");
			TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You canceled the loading of the Truck, type /loadtruck to try again.");
		}
	}
	if(dialogid == NOOSEDUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // NOOSE Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, COLOR_NOOSE);
					SetPlayerSkin(playerid, 285);
					PlayerInfo[playerid][pModel] = 285;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
					SetPlayerHealth(playerid, 100.0);
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					SetPlayerArmour(playerid, 0.0);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // NOOSE weapons
			{
				ShowPlayerDialog(playerid, NOOSEDUTYMENU2, DIALOG_STYLE_LIST, "NOOSE Equipment","Nightstick		$500\nMace          $500\nShotgun		$1500\nMP5		$2500\nRifle		$3000\nDesert Eagle			$5000\nAK-47		$10,000\nM4			$12,000\nTeargas		$15000\nSPAS-12			$35,000\nSniper			$35,000\nKevlar vest		$6000\nGrenades		$25000\nSatchel Charges		$50000\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // NOOSE SWAT Uniform
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pModel] = 285;
			}
			if(listitem == 3) // NOOSE Army Uniform
			{
				SetPlayerSkin(playerid, 287);
				PlayerInfo[playerid][pModel] = 287;
			}
			if(listitem == 4) // NOOSE Undercover Uniform
			{
				ShowPlayerDialog(playerid,  FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // NOOSE Clear.
			{
				ShowPlayerDialog(playerid,  NOOSEDUTYMENU3, DIALOG_STYLE_INPUT,"NOOSE"," Who would you like to clear?","Clear","Nevermind");
    		}
		}
	}
	if(dialogid == NOOSEDUTYMENU2)
	{
 		if(response)
		{
			if(listitem == 0) // Nightstick
			{
				if(GetPlayerCash(playerid) >= 500)
				{
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerCash(playerid, -500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Nightstick!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 1) // Mace
			{
				if(GetPlayerCash(playerid) >= 500)
				{
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerCash(playerid, -500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased some Mace!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 2) // Shotgun
			{
				if(GetPlayerCash(playerid) >= 500)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a shotgun!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 3) // MP5
			{
				if(GetPlayerCash(playerid) >= 2500)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					GivePlayerCash(playerid, -2500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a MP5!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 4) // Rifle
			{
				if(GetPlayerCash(playerid) >= 3000)
				{
					GivePlayerValidWeapon(playerid, 33, 99999);
					GivePlayerCash(playerid, -3000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Rifle!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 5) // Desert Eagle
			{
				if(GetPlayerCash(playerid) >= 5000)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -5000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Desert Eagle!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 6) // AK-47
			{
				if(GetPlayerCash(playerid) >= 10000)
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					GivePlayerCash(playerid, -10000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an AK-47!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 7) // M4
			{
				if(GetPlayerCash(playerid) >= 12000)
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerCash(playerid, -12000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an M4!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 8) // Teargas
			{
				if(GetPlayerCash(playerid) >= 15000)
				{
					GivePlayerValidWeapon(playerid, 17, 5);
					GivePlayerCash(playerid, -15000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased some Teargas!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 9) // SPAS-12
			{
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a SPAS-12!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 10) // Sniper
			{
			    if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 3)
			    {
					if(GetPlayerCash(playerid) >= 35000)
					{
						GivePlayerValidWeapon(playerid, 34, 99999);
						GivePlayerCash(playerid, -35000);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Sniper!");
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
					}
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of LRSS division.");
			}
			if(listitem == 11) // Kevlar vest
			{
				if(GetPlayerCash(playerid) >= 6000)
				{
					SetPlayerArmour(playerid, 100.0);
					GivePlayerCash(playerid, -6000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Kevlar vest!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that!");
				}
			}
			if(listitem == 12) // Grenades
			{
			    if(PlayerInfo[playerid][pRank] >= 2)
			    {
					if(GetPlayerCash(playerid) >= 25000)
					{
						GivePlayerValidWeapon(playerid, 16, 5);
						GivePlayerCash(playerid, -25000);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased some Grenades!");
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
					}
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GREY,"  You aren't high enough rank for that weapon!");
				}
			}
			if(listitem == 13) // Satchels
			{
			    if(PlayerInfo[playerid][pRank] >= 3)
			    {
					if(GetPlayerCash(playerid) >= 50000)
					{
						GivePlayerValidWeapon(playerid, 39, 5);
						GivePlayerCash(playerid, -50000);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased some Satchel Charges!");
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
					}
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GREY,"  You aren't high enough rank for that weapon!");
				}
			}
			if(listitem == 14) SetPlayerHealth(playerid, 100);

			if(listitem == 15) // Accessoires
			{
				ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
	}
    if(dialogid == NOOSEDUTYMENU3)
	{
	    if(response)
    	{
            new giveplayerid = ReturnUser(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* NOOSE %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* NOOSE %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO,string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	if(dialogid == TRMENU)
	{
 		if(response)
		{
			if(listitem == 0) // Civil
			{
			    ShowPlayerDialog(playerid, TRCMENU, DIALOG_STYLE_LIST, "Tierra Robada Civil","Duty\nClothing", "Select", "Cancel");
			}
			if(listitem == 1) // Armed Forces
			{
			    if(PlayerInfo[playerid][pDivision] == 2)
			    {
		 			ShowPlayerDialog(playerid, TRAFMENU, DIALOG_STYLE_LIST, "Tierra Robada Armed Forces","Duty\nWeapons\nSWAT Uniform", "Select", "Cancel");
		 		}
		 		else
		 		{
		 		    SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the Armed Forces division.");
		 		}
			}
			if(listitem == 2) // Emergency Services
			{
   				if(PlayerInfo[playerid][pDivision] == 3)
			    {
			    	ShowPlayerDialog(playerid, TREMMENU, DIALOG_STYLE_LIST, "Tierra Robada Emergency Services","Duty\nUniform\nGear", "Select", "Cancel");
			    }
  		 		else
		 		{
		 		    SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the Emergency Services division.");
		 		}
			}
			if(listitem == 3) // Diplomatic Corps
			{
				if(PlayerInfo[playerid][pDivision] == 4)
			    {
					ShowPlayerDialog(playerid, TRDCMENU, DIALOG_STYLE_LIST, "Tierra Robada Diplomatic Corps","Duty\nClothing", "Select", "Cancel");
    			}
  		 		else
		 		{
		 		    SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the Diplomatic Corps division.");
		 		}
			}
			if(listitem == 4) // Aviation Administration
			{
				if(PlayerInfo[playerid][pDivision] == 5)
			    {
					ShowPlayerDialog(playerid, TRAAMENU, DIALOG_STYLE_LIST, "Tierra Robada Aviation Administration","Duty\nClothing\nGear", "Select", "Cancel");
    			}
  		 		else
		 		{
		 		    SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the Aviation Administration division.");
		 		}
			}
			if(listitem == 5) // Roster (online members)
			{
 				new MemberString[1024], giveplayer[MAX_PLAYER_NAME];
				new rank[64], division[64], employer[64];
				foreach(new i: Player)
				{
			    	giveplayer = GetPlayerNameEx(i);
					if(PlayerInfo[i][pMember] == 12)
					{
				    	GetPlayerFactionInfo(i, rank, division, employer);
						format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
						strcat(MemberString, string, sizeof(MemberString));
					}
				}
				if(strlen(MemberString) == 0)
				{
			    	strcat(MemberString, "No members online at this time.", sizeof(MemberString));
				}
				ShowPlayerDialog(playerid, TRMEMBMENU, DIALOG_STYLE_LIST, "Tierra Robada Members", MemberString, "Select", "Cancel");
			}
		}
	}
	if(dialogid == TRCMENU)
	{
 		if(response)
		{
			if(listitem == 0) // Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You are now on-duty.");
					SetPlayerColor(playerid, COLOR_TR);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer on-duty.");
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // Clothes
			{
		 		ShowPlayerDialog(playerid, TRSKINMENU, DIALOG_STYLE_LIST, "Tierra Robada Clothing","Male skin 1\nMale skin 2\nMale skin 3\nMale skin 4\nMale skin 5\nFemale skin 1\nFemale skin 2\nFemale skin 3", "Select", "Cancel");
			}
		}
	}
	if(dialogid == TRAFMENU)
	{
 		if(response)
		{
			if(listitem == 0) // Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, COLOR_TR);
					SetPlayerSkin(playerid, 287);
					PlayerInfo[playerid][pModel] = 287;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 30, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // Tierra Robada Weapons
			{
				ShowPlayerDialog(playerid, TRWEAPONSMENU, DIALOG_STYLE_LIST, "Tierra Robada Weapons","Shotgun		$1500\nMP5			$2500\nRifle			$3000\nDesert Eagle		$5000\nAK-47			$10,000\nM4			$12,000\nSPAS-12		$35,000\nSniper			$35,000\nKevlar vest		$6000\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // Tierra Robada SWAT Uniform
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pModel] = 285;
			}
		}
	}
	if(dialogid == TREMMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0)
				{
					format(string, sizeof(string), "* Paramedic %s clocked in and is now on duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid,COLOR_TR);
					SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Paramedic %s clocked out and is now off duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerArmour(playerid, 0);
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			if(listitem == 1)
			{
    			ShowPlayerDialog(playerid, FDSASKINS, DIALOG_STYLE_LIST, "Tierra Robada Uniforms","Firesuit 1\nFiresuit 2\nFiresuit 3\nMedic 1\nMedic 2\nMedic 3\nFemale\nHigh Rank", "Select", "Cancel");
			}
			if(listitem == 2)
			{
                ShowPlayerDialog(playerid, FDSAGEAR, DIALOG_STYLE_LIST, "Tierra Robada Gear","Shovel\nCamera\nParachute\nFire Extinguisher\nChainsaw\nShotgun\nVest\nFirst Aid Kit", "Select", "Cancel");
			}
		}
 	}
 	if(dialogid == TRAAMENU) //  Aviation Administration
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0)
				{
					format(string, sizeof(string), "* TRAA %s clocked in and is now on duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid,COLOR_TR);
					SetPlayerArmour(playerid, 100);
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* TRAA %s clocked out and is now off duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerArmour(playerid, 0);
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			if(listitem == 1)
			{
    			ShowPlayerDialog(playerid, TRASKINMENU, DIALOG_STYLE_LIST, "Tierra Robada Uniforms","Pilot\nSuit 1\nSuit 2", "Select", "Cancel");
			}
			if(listitem == 2)
			{
                ShowPlayerDialog(playerid, TRAEQUIP, DIALOG_STYLE_LIST, "Tierra Robada Gear","Vest		$6000\nBaton		$1500\nMace			$1500", "Select", "Cancel");
			}
		}
 	}
 	if(dialogid == TRSKINMENU)
	{
 		if(response)
		{
			if(listitem == 0) // Pilot
			{
				SetPlayerSkin(playerid, 61);
				PlayerInfo[playerid][pModel] = 61;
			}
			if(listitem == 1) // Suit1
			{
				SetPlayerSkin(playerid, 57);
				PlayerInfo[playerid][pModel] = 57;
			}
			if(listitem == 2) // Suit2
			{
				SetPlayerSkin(playerid, 17);
				PlayerInfo[playerid][pModel] = 17;
			}
		}
	}
	if(dialogid == TRAEQUIP)
	{
 		if(response)
		{
			if(listitem == 0) // vest
			{
				if(GetPlayerCash(playerid) >= 6000)
				{
					SetPlayerArmour(playerid, 100.0);
					GivePlayerCash(playerid, -6000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Kevlar vest!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 1) // baton
			{
				if(GetPlayerCash(playerid) >= 1500)
				{
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerCash(playerid, -1500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a baton!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 2) // Mace
			{
				if(GetPlayerCash(playerid) >= 1500)
				{
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerCash(playerid, -1500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased mace!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
		}
	}
	if(dialogid == TRDCMENU)
	{
 		if(response)
		{
			if(listitem == 0) // Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You are now on-duty.");
					SetPlayerColor(playerid, COLOR_TR);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer on-duty.");
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // Clothes
			{
		 		ShowPlayerDialog(playerid, TRSKINMENU, DIALOG_STYLE_LIST, "Tierra Robada Clothing","Male skin 1\nMale skin 2\nMale skin 3\nMale skin 4\nMale skin 5\nFemale skin 1\nFemale skin 2\nFemale skin 3", "Select", "Cancel");
			}
		}
	}
	if(dialogid == TRWEAPONSMENU)
	{
 		if(response)
		{
		    if(PlayerInfo[playerid][pWRestricted] > 0) {
				SendClientMessageEx(playerid, COLOR_GREY, "Your weapons are restricted!");
			}
			if(listitem == 0) // Shotgun
			{
				if(GetPlayerCash(playerid) >= 1500)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -1500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Shotgun!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 1) // MP5
			{
				if(GetPlayerCash(playerid) >= 2500)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					GivePlayerCash(playerid, -2500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a MP5!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 2) // Rifle
			{
				if(GetPlayerCash(playerid) >= 3000)
				{
					GivePlayerValidWeapon(playerid, 33, 99999);
					GivePlayerCash(playerid, -3000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Rifle!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 3) // Desert Eagle
			{
				if(GetPlayerCash(playerid) >= 5000)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -5000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Desert Eagle!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 4) // AK-47
			{
				if(GetPlayerCash(playerid) >= 10000)
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					GivePlayerCash(playerid, -10000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an AK-47!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 5) // M4
			{
				if(GetPlayerCash(playerid) >= 12000)
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerCash(playerid, -12000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an M4!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 6) // SPAS-12
			{
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a SPAS-12!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 7) // Sniper
			{
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Sniper!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			if(listitem == 8) // Kevlar vest
			{
				if(GetPlayerCash(playerid) >= 6000)
				{
					SetPlayerArmour(playerid, 100.0);
					GivePlayerCash(playerid, -6000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Kevlar vest!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that!");
				}
			}
			if(listitem == 9) SetPlayerHealth(playerid, 100);

			if(listitem == 10) // Kevlar vest
			{
				ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
	}
	if(dialogid == TRSKINMENU)
	{
 		if(response)
		{
			if(listitem == 0) // Male skin 1
			{
				SetPlayerSkin(playerid, 255);
				PlayerInfo[playerid][pModel] = 255;
			}
			if(listitem == 1) // Male skin 2
			{
				SetPlayerSkin(playerid, 61);
				PlayerInfo[playerid][pModel] = 61;
			}
			if(listitem == 2) // Male skin 3
			{
				SetPlayerSkin(playerid, 46);
				PlayerInfo[playerid][pModel] = 46;
			}
			if(listitem == 3) // Male skin 4
			{
				SetPlayerSkin(playerid, 296);
				PlayerInfo[playerid][pModel] = 296;
			}
			if(listitem == 4) // Male skin 5
			{
				SetPlayerSkin(playerid, 113);
				PlayerInfo[playerid][pModel] = 113;
			}
			if(listitem == 5) // Female skin 1
			{
				SetPlayerSkin(playerid, 93);
				PlayerInfo[playerid][pModel] = 93;
			}
			if(listitem == 6) // Female skin 2
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pModel] = 141;
			}
			if(listitem == 7) // Female skin 3
			{
				SetPlayerSkin(playerid, 150);
				PlayerInfo[playerid][pModel] = 150;
			}
		}
	}
	if((dialogid == BUYTOYSCOP) && response)
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "None";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					break;
				}
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
			{
			    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
			}

			format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYSCOP2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Select", "Cancel");
	}

	if((dialogid == BUYTOYSCOP2) && response)
	{
	    if(listitem >= 5 && PlayerInfo[playerid][pDonateRank] < 1 || listitem >= 5 && PlayerInfo[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Bronze VIP + to use that slot!");
	    if(listitem >= 8 && PlayerInfo[playerid][pDonateRank] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Silver VIP + to use that slot!");
        if(listitem >= 9 && PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Gold VIP + to use that slot!");
		if(listitem >= 10 && PlayerInfo[playerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Platinum VIP + to use that slot!");
		if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		SetPVarInt(playerid, "ToySlot", listitem);

		new stringg[1024];
		for(new x;x<sizeof(HoldingObjectsCop);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsCop[x][holdingmodelname], HoldingObjectsCop[x][holdingprice]);
		}
		ShowPlayerDialog(playerid, BUYTOYSCOP3, DIALOG_STYLE_LIST, "Select an Item", stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYSCOP3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjectsCop[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsCop[listitem][holdingprice]);
		    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptModelID] = HoldingObjectsCop[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.9;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.15;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.1;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.1;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.035;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 16;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 6;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleZ] = 1.0;

			g_mysql_SaveToys(playerid, GetPVarInt(playerid, "ToySlot"));

			format(string, sizeof(string), "* You have purchased %s for $%d (Slot: %d)", HoldingObjectsCop[listitem][holdingmodelname], HoldingObjectsCop[listitem][holdingprice], GetPVarInt(playerid, "ToySlot"));
		    SendClientMessageEx(playerid, COLOR_RED, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");
		}
	}
	if((dialogid == BUYTOYSGOLD) && response)
	{
 		if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Gold VIP +");
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24] = "None";

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					break;
				}
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
			{
			    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYSGOLD2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Select", "Cancel");
	}

	if((dialogid == BUYTOYSGOLD2) && response)
	{
        if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Gold VIP +");

	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		SetPVarInt(playerid, "ToySlot", listitem);

		new stringg[5256];
		for(new x;x<sizeof(HoldingObjectsAll);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjectsAll[x][holdingmodelname], HoldingObjectsAll[x][holdingprice]);
		}
		ShowPlayerDialog(playerid, BUYTOYSGOLD3, DIALOG_STYLE_LIST, "Select an Item", stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYSGOLD3) && response)
	{
	    if(PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Gold VIP +");

		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjectsAll[listitem][holdingprice]);
		    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptModelID] = HoldingObjectsAll[listitem][holdingmodelid];

   			new modelid = PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.9;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.15;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.1;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.1;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.035;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 16;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 6;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleZ] = 1.0;

			format(string, sizeof(string), "* You have purchased %s for $%d (Slot: %d)", HoldingObjectsAll[listitem][holdingmodelname], HoldingObjectsAll[listitem][holdingprice], GetPVarInt(playerid, "ToySlot"));
		    SendClientMessageEx(playerid, COLOR_RED, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");

			g_mysql_SaveToys(playerid, GetPVarInt(playerid, "ToySlot"));

		}
	}
	if((dialogid == BUYTOYS) && response)
	{
	    new stringg[512];
		for(new x;x<MAX_PLAYERTOYS;x++)
		{
  			new name[24];
	    	format(name, sizeof(name), "None");

			for(new i;i<sizeof(HoldingObjectsAll);i++)
   			{
				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
    			{
   					format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					break;
				}
			}
			if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
			{
			    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
			}
			format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
		}
		ShowPlayerDialog(playerid, BUYTOYS2, DIALOG_STYLE_LIST, "Select a Slot", stringg, "Select", "Cancel");
	}
	if((dialogid == BUYTOYS2) && response)
	{
	    if(listitem >= 5 && PlayerInfo[playerid][pDonateRank] < 1 || listitem >= 5 && PlayerInfo[playerid][pBuddyInvited] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Bronze VIP + to use that slot!");
	    if(listitem >= 8 && PlayerInfo[playerid][pDonateRank] < 2) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Silver VIP + to use that slot!");
        if(listitem >= 9 && PlayerInfo[playerid][pDonateRank] < 3) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Gold VIP + to use that slot!");
		if(listitem >= 10 && PlayerInfo[playerid][pDonateRank] < 4) return SendClientMessageEx(playerid, COLOR_WHITE, "* You must be a Platinum VIP + to use that slot!");

	    if(PlayerToyInfo[playerid][listitem][ptModelID] != 0) return SendClientMessageEx(playerid, COLOR_YELLOW, "* You already have something in that slot. Delete it with /toys");

		SetPVarInt(playerid, "ToySlot", listitem);

		new stringg[5000];
		for(new x;x<sizeof(HoldingObjects);x++)
		{
		    format(stringg, sizeof(stringg), "%s%s ($%d)\n", stringg, HoldingObjects[x][holdingmodelname], HoldingObjects[x][holdingprice]);
		}
		ShowPlayerDialog(playerid, BUYTOYS3, DIALOG_STYLE_LIST, "Select an Item", stringg, "Buy", "Cancel");
	}
	if((dialogid == BUYTOYS3) && response)
	{
		if(GetPlayerCash(playerid) < HoldingObjects[listitem][holdingprice])
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "* You can't afford that!");
		}
		else
		{
			GivePlayerCash(playerid, -HoldingObjects[listitem][holdingprice]);
		    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptModelID] = HoldingObjects[listitem][holdingmodelid];

		    new modelid = PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptModelID];
		    if((modelid >= 19006 && modelid <= 19035) || (modelid >= 19138 && modelid <= 19140))
		    {
		        PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.9;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.35;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
		    }
		    else if(modelid >= 18891 && modelid <= 18910)
		    {
		    	PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.15;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 90.0;
			}
			else if(modelid >= 18926 && modelid <= 18935)
			{
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.1;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			else if(modelid >= 18911 && modelid <= 18920)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.1;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.035;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 90.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 90.0;
			}
			else if(modelid == 19078 || modelid == 19078)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 16;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 180.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			else if((modelid >= 18641 && modelid <= 18644) || (modelid >= 19080 && modelid <= 19084) || modelid == 18890)
			{
			    PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 6;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
		    else
		    {
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = 2;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptPosZ] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotX] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotY] = 0.0;
				PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptRotZ] = 0.0;
			}
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleX] = 1.0;
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleY] = 1.0;
			PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptScaleZ] = 1.0;

			format(string, sizeof(string), "* You have purchased %s for $%d (Slot: %d)", HoldingObjects[listitem][holdingmodelname], HoldingObjects[listitem][holdingprice], GetPVarInt(playerid, "ToySlot"));
		    SendClientMessageEx(playerid, COLOR_RED, string);
		    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Use /toys to wear/edit this");

			g_mysql_SaveToys(playerid,GetPVarInt(playerid, "ToySlot"));
		}
	}
	if((dialogid == TOYS) && response)
	{
		if(listitem == 0)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, WEARTOY, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Select", "Cancel");
	    }
		else if(listitem == 1)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Select", "Cancel");
   		}
		else if(listitem == 2)
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, DELETETOY, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Delete", "Cancel");
		}
	}

	if((dialogid == EDITTOYS) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu: Edit", "Woops! You don't have anything in that slot.", "OK", "");
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_WHITE, "{AA3333}HINT:{FFFF00} Position your camera differently to better see where your editing.");
		    SetPVarInt(playerid, "ToySlot", listitem);
		    ShowEditMenu(playerid);
		}
	}
	if((dialogid == EDITTOYS2)) {
	    if(response) switch(listitem) {
		    case 0: ShowPlayerDialog(playerid, EDITTOYSBONE, DIALOG_STYLE_LIST, "Select a Bone", "Spine\nHead\nLeft upper arm\nRight upper arm\nLeft hand\nRight hand\nLeft thigh\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nLeft forearm\nRight forearm\nLeft clavicle\nRight clavicle\nNeck\nJaw", "Select", "Cancel");
		    case 1:
			{
			    SendClientMessage(playerid, COLOR_WHITE, "HINT: Hold {8000FF}~k~~PED_SPRINT~ {FFFFAA}to move your camera, press escape to cancel");
				EditAttachedObject(playerid, GetPVarInt(playerid, "ToySlot"));
			}
		}
		else
		{
		    new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
			    new name[24];
			    format(name, sizeof(name), "None");

			    for(new i;i<sizeof(HoldingObjectsAll);i++)
			    {
       				if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
			        {
           				format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
   			ShowPlayerDialog(playerid, EDITTOYS, DIALOG_STYLE_LIST, "Select a Toy", stringg, "Select", "Cancel");
		}
	}
	if(dialogid == EDITTOYSBONE)
	{
	    if(response)
	    {
	        PlayerToyInfo[playerid][GetPVarInt(playerid, "ToySlot")][ptBone] = listitem+1;

			g_mysql_SaveToys(playerid,GetPVarInt(playerid, "ToySlot"));
		}
	 	ShowEditMenu(playerid);
	}
	if((dialogid == WEARTOY) && response)
	{
	    if(PlayerToyInfo[playerid][listitem][ptModelID] == 0)
	    {
	        ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu: Attach/Deattach", "Woops! You don't have anything to put on from that slot.", "OK", "");
		}
		else
		{
		    if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
			{
			    new name[24];
			    format(name, sizeof(name), "None");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][listitem][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][listitem][ptModelID]);
				}
			    format(string, sizeof(string), "Successfully dettached %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_RED, string);
			    RemovePlayerAttachedObject(playerid, listitem);
			}
			else
			{
				if(PlayerToyInfo[playerid][listitem][ptScaleX] == 0) {
					PlayerToyInfo[playerid][listitem][ptScaleX] = 1.0;
					PlayerToyInfo[playerid][listitem][ptScaleY] = 1.0;
					PlayerToyInfo[playerid][listitem][ptScaleZ] = 1.0;
				}
			    SetPlayerAttachedObject(playerid, listitem, PlayerToyInfo[playerid][listitem][ptModelID], PlayerToyInfo[playerid][listitem][ptBone], PlayerToyInfo[playerid][listitem][ptPosX], PlayerToyInfo[playerid][listitem][ptPosY], PlayerToyInfo[playerid][listitem][ptPosZ],
				PlayerToyInfo[playerid][listitem][ptRotX], PlayerToyInfo[playerid][listitem][ptRotY], PlayerToyInfo[playerid][listitem][ptRotZ], PlayerToyInfo[playerid][listitem][ptScaleX], PlayerToyInfo[playerid][listitem][ptScaleY], PlayerToyInfo[playerid][listitem][ptScaleZ]);
			    new name[24];
			    format(name, sizeof(name), "None");

				for(new i;i<sizeof(HoldingObjectsAll);i++)
	   			{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][listitem][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][listitem][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][listitem][ptModelID]);
			}
				format(string, sizeof(string), "Successfully attached %s (Bone: %s) (Slot: %d)", name, HoldingBones[PlayerToyInfo[playerid][listitem][ptBone]], listitem);
				SendClientMessageEx(playerid, COLOR_RED, string);
			}
		}
	}

	if((dialogid == DELETETOY) && response)
	{
		PlayerToyInfo[playerid][listitem][ptModelID] = 0;
		PlayerToyInfo[playerid][listitem][ptBone] = 0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosX] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosY] = 0.0;
		PlayerToyInfo[playerid][listitem][ptPosZ] = 0.0;
		if(IsPlayerAttachedObjectSlotUsed(playerid, listitem))
		{
		    RemovePlayerAttachedObject(playerid, listitem);
		}

		g_mysql_SaveToys(playerid,listitem);

		format(string, sizeof(string), "You have deleted your toy in slot %d.", listitem);
	    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Toy Menu", string, "OK", "");
	}

	if((dialogid == LAELEVATORPASS) && response)
	{
        listitem = GetPVarInt(playerid, "ElevatorFloorPick");
		if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~The floor is already in the queue", 3500, 4);
		else if(DidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
		else
		{
		    if(strfindex(inputtext, "warfloor321", true) == 0)
		    {
		        CallElevator(playerid, 20);
			}
			else if(strfindex(inputtext, LAElevatorFloorData[1][listitem], true) == 0)
		    {
	            CallElevator(playerid, listitem);
		    }
		    else
		    {
		        GameTextForPlayer(playerid, "~r~Invalid Password", 3500, 4);
			}
		}
	}
	if((dialogid == LAELEVATOR) && response)
	{
        if(FloorRequestedBy[listitem] != INVALID_PLAYER_ID || IsFloorInQueue(listitem))
            GameTextForPlayer(playerid, "~r~The floor is already in the queue", 3500, 4);
		else if(DidPlayerRequestElevator(playerid))
		    GameTextForPlayer(playerid, "~r~You already requested the elevator", 3500, 4);
		else
		{
		    if(strlen(LAElevatorFloorData[1][listitem]) > 0)
   		    {
   		        SetPVarInt(playerid, "ElevatorFloorPick", listitem);
   		        ShowPlayerDialog(playerid, LAELEVATORPASS, DIALOG_STYLE_INPUT, "Elevator", "Enter the password for this level", "Enter", "Cancel");
			}
			else
			{
	        	CallElevator(playerid, listitem);
			}
		}
		return 1;
	}
	if((dialogid == AUDIO_URL) && response) // /audiourl
	{
	    if(PlayerInfo[playerid][pAdmin] >= 4)
	    {
			new range = GetPVarInt(playerid, "aURLrange");
			new Float:aX, Float:aY, Float:aZ;
			GetPlayerPos(playerid, aX, aY, aZ);
		 	SendAudioURLToRange(inputtext,aX,aY,aZ,range);

			if(range > 100)
			{
				format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has placed url %s - Range: %d.",GetPlayerNameEx(playerid),inputtext,range);
				ABroadCast(COLOR_YELLOW, string, 4);
				format(string, sizeof(string),"Use /audiostopurl to stop playback");
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			else
			{
			    format(string,sizeof(string),"You have placed url %s - Range: %d",inputtext,range);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				format(string, sizeof(string),"Use /audiostopurl to stop playback");
				SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
	}

	/*if(dialogid == DIALOG_NUMBER_PLATE_CHOSEN) {
	    if(response == 1) {
			for(new i = 0; i < MAX_PLAYERVEHICLES; i++) {
			    if(listitem == i) {
			        if(PlayerInfo[playerid][pDonateRank] > 0) {
			            new
			                tmpSz_NumPlate[32];

			            GetPVarString(playerid, "szNumPS", tmpSz_NumPlate, sizeof(tmpSz_NumPlate));
			            RegisterVehicleNumberPlate(PlayerVehicleInfo[playerid][i][pvId], tmpSz_NumPlate);
			            SetPVarInt(playerid, "Cash", PlayerInfo[playerid][pCash]-80000);
			            strcpy(PlayerVehicleInfo[playerid][i][pvNumberPlate], tmpSz_NumPlate, 32);
			            SendClientMessageEx(playerid, COLOR_WHITE, "Your registration plate has successfully been configured.");
					}
					else {
			            new
			                tmpSz_NumPlate[32];

			            GetPVarString(playerid, "szNumPS", tmpSz_NumPlate, sizeof(tmpSz_NumPlate));
			            RegisterVehicleNumberPlate(PlayerVehicleInfo[playerid][i][pvId], tmpSz_NumPlate);
			            strcpy(PlayerVehicleInfo[playerid][i][pvNumberPlate], tmpSz_NumPlate, 32);
					    SetPVarInt(playerid, "Cash", PlayerInfo[playerid][pCash]-100000);
					    SendClientMessageEx(playerid, COLOR_WHITE, "Your registration plate has successfully been configured.");
					}

					return 1;
			    }
			}
		}
	}*/

	if(dialogid == DIALOG_NUMBER_PLATE) {
	    if(response) {
	        if(strlen(inputtext) < 1 || strlen(inputtext) > 8) {
	            SendClientMessageEx(playerid, COLOR_WHITE, "{AA3333}ERROR:{FFFF00} You can only have a number plate that consists of 1-8 characters.");
	        }
	        else {
	            if(strfindex("XMT", inputtext, true) != -1) {
	                SendClientMessageEx(playerid, COLOR_WHITE, "{AA3333}ERROR:{FFFF00} You cannot use the term \"XMT\" in your registration plate.");
					return 1;
				}

			    SetPVarString(playerid, "szNumPS", inputtext);

			    new
					vstring[1024]; // ew, another 4096 bytes of memory down the drain

		 		for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
				{
					if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					{
						format(vstring, sizeof(vstring), "%s\n%s", vstring, GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
					}
					else
					{
						format(vstring, sizeof(vstring), "%s\nEmpty", vstring);
					}
				}

				ShowPlayerDialog(playerid, DIALOG_NUMBER_PLATE_CHOSEN, DIALOG_STYLE_LIST, "Registration plate selection", vstring, "Select", "Cancel");
			}
		}

		/*if(PlayerInfo[playerid][pDonateRank] > 0) {
		    PlayerInfo[playerid][pMoney] -= 80000;
		    SendClientMessageEx(playerid, COLOR_WHITE, "Your new number plate has been configured!");
		    RegisterVehicleNumberPlate();
		}
		else {
		    PlayerInfo[playerid][pMoney] -= 100000;
			SendClientMessageEx(playerid, COLOR_WHITE, "Your new number plate has been configured!");
			RegisterVehicleNumberPlate();
		}*/
	}
	if(dialogid == MaxAdmin)
	{
	    if(strlen(inputtext) == 0)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "Keypad Closed.");
		    TogglePlayerControllable(playerid, true);
		    return 1;
		}
	    if(strcmp(inputtext, MaxAdminPassword, true) == 0)
        {
			SendClientMessageEx(playerid, COLOR_WHITE, "Approving Password Please Wait...");
			SendClientMessageEx(playerid, COLOR_WHITE, "{00FF00}Approved{FFFFFF} - {FFFF00}Menu Opened.{FFFFFF}.");
			//PlayerInfo[playerid][pAdmin] = 99999;
			ShowPlayerDialog(playerid, MaxAdminMenu, DIALOG_STYLE_LIST, "Choose A Status", "Executive Rank\nHelper\nServer Moderator\nSenior Moderator\nCommunity Advisor\nRemove Everything", "Select", "Cancel");
			TogglePlayerControllable(playerid, true);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Approving Password Please Wait...");
		    SendClientMessageEx(playerid, COLOR_WHITE, "{FF0000}Denied{FFFFFF} - Invalid Password");
		    TogglePlayerControllable(playerid, true);
		    return 1;
		}
	}
	if(dialogid == MaxAdminMenu)
	{
 		if(response)
		{
			if(listitem == 0) // Executive Rank
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "You now have Executive Status.");
			PlayerInfo[playerid][pAdmin] = 99999;
			}
			if(listitem == 1) // Helper
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "You now have Helper Status.");
			PlayerInfo[playerid][pHelper] = 1;
			}
			if(listitem == 2) // Server Moderator
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "You now have Server Moderator Status.");
			PlayerInfo[playerid][pAdmin] = 1;
			PlayerInfo[playerid][pSMod] = 0;
			}
			if(listitem == 3) // Senior Server Moderator
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "You now have Senior Server Moderator Status.");
			PlayerInfo[playerid][pAdmin] = 1;
			PlayerInfo[playerid][pSMod] = 1;
			}
			if(listitem == 4) // Community Advisor
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "You now have Community Advisor Status");
			PlayerInfo[playerid][pHelper] = 4;
			}
			if(listitem == 5) // Remove Everything
			{
			SendClientMessageEx(playerid, COLOR_WHITE, "You now are now a Normal Player.");
			PlayerInfo[playerid][pAdmin] = 0;
			PlayerInfo[playerid][pSMod] = 0;
			PlayerInfo[playerid][pHelper] = 0;
			}
		}
	}
	if(dialogid == House275CAR)
	{
	    if(strlen(inputtext) == 0)
	    {
	        format(string, sizeof(string), "* Invalid Password");
		    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
      		RemovePlayerFromVehicle(playerid);
      		new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPosEx(playerid, slx, sly, slz);
		    TogglePlayerControllable(playerid, true);
		    return 1;
		}
	    if(strcmp(inputtext, House275Password, true) == 0)
        {
			TogglePlayerControllable(playerid, true);
		}
		else
		{
		    format(string, sizeof(string), "* Invalid Password");
		    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		    RemovePlayerFromVehicle(playerid);
		    new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPosEx(playerid, slx, sly, slz+1.2);
		    TogglePlayerControllable(playerid, true);
		    return 1;
		}
	}
	if(dialogid == NMUTE)
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(PlayerInfo[playerid][pNMuteTotal] < 4)
				    {
				        if(GetPVarInt(playerid, "IsInArena") >= 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }
					    PlayerInfo[playerid][pNMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailTime] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pNMuteTotal]*15*60;
						}
						else //
						{
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							strcpy(PlayerInfo[playerid][pPrisonReason], "[OOC] NMute Prison", 128);
							PhoneOnline[playerid] = 1;
							SetPlayerInterior(playerid, 1);
							PlayerInfo[playerid][pInt] = 1;
							new rand = random(sizeof(OOCPrisonSpawns));
							Streamer_UpdateEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerPosEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerSkin(playerid, 50);
							SetPlayerColor(playerid, TEAM_APRISON_COLOR);
							Player_StreamPrep(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
						}
				    }
				    else if(PlayerInfo[playerid][pNMuteTotal] >= 4 || PlayerInfo[playerid][pNMuteTotal] < 7)
				    {
				        if(GetPVarInt(playerid, "IsInArena") >= 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }
					    PlayerInfo[playerid][pNMute] = 0;
						GameTextForPlayer(playerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
						ResetPlayerWeaponsEx(playerid);
                        if(PlayerInfo[playerid][pJailTime] != 0)
                        {
                            PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pNMuteTotal]*15*60;
                        }
                        else
                        {
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pNMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
							SetPlayerInterior(playerid, 1);
							PlayerInfo[playerid][pInt] = 1;
							new rand = random(sizeof(OOCPrisonSpawns));
							Streamer_UpdateEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerPosEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerSkin(playerid, 50);
							SetPlayerColor(playerid, TEAM_APRISON_COLOR);
							Player_StreamPrep(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
						}
				    }
					format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s is serving %d Minutes in Jail/Prison for Newbie Unmute.",GetPlayerNameEx(playerid),PlayerInfo[playerid][pNMuteTotal]*15);
					ABroadCast(COLOR_YELLOW,string,2);
	            }
	            case 1: // Fine
	            {
	                new playername[MAX_PLAYER_NAME];
	                GetPlayerName(playerid, playername, sizeof(playername));

	                new allmoney;
 					if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
 						allmoney = HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
   					}
   					else
    				{
   						allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
    				}

				    new fine = 10*allmoney/100;
	                format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has paid a $%d fine for Newbie Chat Unmute.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_YELLOW,string,2);
					PlayerInfo[playerid][pNMute] = 0;
	            }
	        }
	    }
		else
		{
		    format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has canceled punishment for Newbie Chat Unmute.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,2);
		}
	}
	if(dialogid == ADMUTE)
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
	            case 0: // Jailtime
				{
				    if(PlayerInfo[playerid][pADMuteTotal] < 4)
				    {
				        if(GetPVarInt(playerid, "IsInArena") >= 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }
					    PlayerInfo[playerid][pADMute] = 0;
				        ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailTime] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pADMuteTotal]*15*60;
						}
						else
						{
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pADMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
							SetPlayerInterior(playerid, 1);
							PlayerInfo[playerid][pInt] = 1;
							new rand = random(sizeof(OOCPrisonSpawns));
							Streamer_UpdateEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerPosEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerSkin(playerid, 50);
							SetPlayerColor(playerid, TEAM_APRISON_COLOR);
							Player_StreamPrep(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
						}
				    }
				    else if(PlayerInfo[playerid][pADMuteTotal] >= 4 || PlayerInfo[playerid][pADMuteTotal] < 7)
				    {
				        if(GetPVarInt(playerid, "IsInArena") >= 0)
					    {
					        LeavePaintballArena(playerid, GetPVarInt(playerid, "IsInArena"));
					    }
					    PlayerInfo[playerid][pADMute] = 0;
						GameTextForPlayer(playerid, "~w~Welcome to ~n~~r~Fort DeMorgan", 5000, 3);
						ResetPlayerWeaponsEx(playerid);
						if(PlayerInfo[playerid][pJailTime] != 0)
						{
						    PlayerInfo[playerid][pJailTime] += PlayerInfo[playerid][pADMuteTotal]*15*60;
						}
						else
						{
							PlayerInfo[playerid][pJailTime] = PlayerInfo[playerid][pADMuteTotal]*15*60;
							PhoneOnline[playerid] = 1;
							SetPlayerInterior(playerid, 1);
							PlayerInfo[playerid][pInt] = 1;
							new rand = random(sizeof(OOCPrisonSpawns));
							Streamer_UpdateEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerPosEx(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2]);
							SetPlayerSkin(playerid, 50);
							SetPlayerColor(playerid, TEAM_APRISON_COLOR);
							Player_StreamPrep(playerid, OOCPrisonSpawns[rand][0], OOCPrisonSpawns[rand][1], OOCPrisonSpawns[rand][2], FREEZE_TIME);
						}
				    }
					format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s is serving %d Minutes in Jail/Prison for Advertisement Unmute.",GetPlayerNameEx(playerid),PlayerInfo[playerid][pADMuteTotal]*15);
					ABroadCast(COLOR_YELLOW,string,2);
	            }
	            case 1: // Fine
	            {
	                new playername[MAX_PLAYER_NAME];
	                GetPlayerName(playerid, playername, sizeof(playername));

	                new allmoney;
 					if(PlayerInfo[playerid][pPhousekey] != INVALID_HOUSE_ID && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
					{
 						allmoney = HouseInfo[PlayerInfo[playerid][pPhousekey]][hSafeMoney]+GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
   					}
   					else
    				{
   						allmoney = GetPlayerCash(playerid)+PlayerInfo[playerid][pAccount];
    				}

                    PlayerInfo[playerid][pADMute] = 0;
				    new fine = 10*allmoney/100;
	                format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has paid a $%d fine for Advertisement Unmute.",GetPlayerNameEx(playerid),fine);
	                GivePlayerCash(playerid,-fine);
					ABroadCast(COLOR_YELLOW,string,2);
	            }
	        }
	    }
	    else
	    {
	        format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has canceled punishment for Advertisement Unmute.",GetPlayerNameEx(playerid));
			ABroadCast(COLOR_YELLOW,string,2);
	    }
	}
	if(dialogid == TWADMINMENU) // Turf Wars System
	{
	    if(response == 1)
	    {
	        switch(listitem)
	        {
				case 0:
				{
					TurfWarsEditTurfsSelection(playerid);
				}
				case 1:
				{
				    TurfWarsEditFColorsSelection(playerid);
				}
	        }
	    }
	}
	if(dialogid == TWEDITTURFSSELECTION)
	{
	    if(response == 1)
	    {
			for(new i = 0; i < MAX_TURFS; i++)
			{
			    if(listitem == i)
				{
				    SetPVarInt(playerid, "EditingTurfs", i);
			        ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
			    }
			}
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,TWADMINMENU,DIALOG_STYLE_LIST,"Turf Wars - Admin Menu:","Edit Turfs...\nEdit Family Colors...","Select","Exit");
	    }
	}
	if(dialogid == TWEDITTURFSMENU)
	{
	    if(response == 1)
	    {
	        new tw = GetPVarInt(playerid, "EditingTurfs");
	        switch(listitem)
	        {
				case 0: // Edit Dim
				{
				    SetPVarInt(playerid, "EditingTurfsStage", 1);
				    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savetwpos) to edit the West Wall.");
				}
				case 1: // Edit Owner
				{
				    ShowPlayerDialog(playerid,TWEDITTURFSOWNER,DIALOG_STYLE_INPUT,"Turf Wars - Edit Turfs Owner Menu:","Please enter a family ID that you wish to assign to this turf:\n\nHint: Enter -1 if you wish to vacant the turf.","Change","Back");
				}
				case 2: // Edit Vulnerablity
				{
				    ShowPlayerDialog(playerid,TWEDITTURFSVUL,DIALOG_STYLE_INPUT,"Turf Wars - Edit Turfs Vulnerable Menu:","Please enter a Vulnerable countdown time for the turf:","Change","Back");
				}
				case 3: // Edit Locks
				{
				    ShowPlayerDialog(playerid,TWEDITTURFSLOCKED,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Locked Menu:","Lock\nUnlock","Change","Back");
				}
				case 4: // Edit Perks
				{
					ShowPlayerDialog(playerid,TWEDITTURFSPERKS,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Perks Menu:","None\nExtortion","Change","Back");
				}
				case 5: // Reset War
				{
				    ResetTurfWarsZone(1, tw);
				    TurfWarsEditTurfsSelection(playerid);
				}
				case 6: // Destroy Turf
				{
				    DestroyTurfWarsZone(tw);
				    TurfWarsEditTurfsSelection(playerid);
				}
	        }
	    }
		else
		{
		    TurfWarsEditTurfsSelection(playerid);
		}
	}
	if(dialogid == TWEDITTURFSOWNER)
	{
	    if(response == 1)
	    {
			new tw = GetPVarInt(playerid, "EditingTurfs");
			if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,TWEDITTURFSOWNER,DIALOG_STYLE_INPUT,"Turf Wars - Edit Turfs Owner Menu:","Please enter a family ID that you wish to assign to this turf:\n\nHint: Enter -1 if you wish to vacant the turf.","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < -1 || strval(inputtext) > MAX_FAMILY-1)
	        {
	            ShowPlayerDialog(playerid,TWEDITTURFSOWNER,DIALOG_STYLE_INPUT,"Turf Wars - Edit Turfs Owner Menu:","Please enter a family ID that you wish to assign to this turf:\n\nHint: Enter -1 if you wish to vacant the turf.","Change","Back");
	            return 1;
	        }
			SetOwnerTurfWarsZone(1, tw, strval(inputtext));
			SaveTurfWars();
			ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
	    }
	}
	if(dialogid == TWEDITTURFSVUL)
	{
	    if(response == 1)
	    {
	        new tw = GetPVarInt(playerid, "EditingTurfs");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,TWEDITTURFSVUL,DIALOG_STYLE_INPUT,"Turf Wars - Edit Turfs Vulnerable Menu:","Please enter a Vulnerable countdown time for the turf:","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0)
	        {
	            ShowPlayerDialog(playerid,TWEDITTURFSVUL,DIALOG_STYLE_INPUT,"Turf Wars - Edit Turfs Vulnerable Menu:","Please enter a Vulnerable countdown time for the turf:","Change","Back");
	            return 1;
	        }
			TurfWars[tw][twVulnerable] = strval(inputtext);
			SaveTurfWars();
			ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
	    }
	}
	if(dialogid == TWEDITTURFSLOCKED)
	{
	    if(response == 1)
	    {
	        new tw = GetPVarInt(playerid, "EditingTurfs");
			switch(listitem)
			{
			    case 0: // Lock
			    {
			        TurfWars[tw][twLocked] = 1;
			        SaveTurfWars();
			        ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
			    }
			    case 1: // Unlock
			    {
			        TurfWars[tw][twLocked] = 0;
			        SaveTurfWars();
			        ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
			    }
			}
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
	    }
	}
	if(dialogid == TWEDITTURFSPERKS)
	{
	    if(response == 1)
	    {
	        new tw = GetPVarInt(playerid, "EditingTurfs");
	        TurfWars[tw][twSpecial] = listitem;
         	SaveTurfWars();
          	ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
	    }
		else
		{
		    ShowPlayerDialog(playerid,TWEDITTURFSMENU,DIALOG_STYLE_LIST,"Turf Wars - Edit Turfs Menu:","Edit Dimensions...\nEdit Owners...\nEdit Vulnerable Time...\nEdit Locked...\nEdit Perks...\nReset War...\nDestroy Turf","Select","Back");
		}
	}
	if(dialogid == TWEDITFCOLORSSELECTION)
	{
	    if(response == 1)
	    {
			for(new i = 0; i < MAX_FAMILY; i++)
			{
			    if(listitem == i)
			    {
			        SetPVarInt(playerid, "EditingFamC", i);
			        ShowPlayerDialog(playerid,TWEDITFCOLORSMENU,DIALOG_STYLE_INPUT,"Turf Wars - Edit Family Colors Menu:","Please enter a family color ID that wish to assign to the family:\n","Select","Back");
			    }
			}
	    }
	    else
	    {
			ShowPlayerDialog(playerid,TWADMINMENU,DIALOG_STYLE_LIST,"Turf Wars - Admin Menu:","Edit Turfs...\nEdit Family Colors...","Select","Exit");
	    }
	}
	if(dialogid == TWEDITFCOLORSMENU)
	{
	    if(response == 1)
	    {
	        new fam = GetPVarInt(playerid, "EditingFamC");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,TWEDITFCOLORSMENU,DIALOG_STYLE_INPUT,"Turf Wars - Edit Family Colors Menu:","Please enter a family color ID that wish to assign to the family:\n","Select","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0 || strval(inputtext) > 15)
	        {
	            ShowPlayerDialog(playerid,TWEDITFCOLORSMENU,DIALOG_STYLE_INPUT,"Turf Wars - Edit Family Colors Menu:","Please enter a family color ID that wish to assign to the family:\n","Select","Back");
	            return 1;
	        }
	        FamilyInfo[fam][FamilyColor] = strval(inputtext);
	        SaveFamilies();
			TurfWarsEditFColorsSelection(playerid);

   			SyncTurfWarsRadarToAll();
	    }
	    else
	    {
	        TurfWarsEditFColorsSelection(playerid);
	    }
	}
	if(dialogid == RTONEMENU) // Ringtone Menu
	{
		if(response == 1)
		{
			switch(listitem)
			{
				case 0:
				{
					PlayerInfo[playerid][pRingtone] = 1;
					//SendAudioToPlayer(playerid, 51, 100);
				}
				case 1:
				{
					PlayerInfo[playerid][pRingtone] = 2;
					//SendAudioToPlayer(playerid, 52, 100);
				}
				case 2:
				{
					PlayerInfo[playerid][pRingtone] = 3;
					//SendAudioToPlayer(playerid, 53, 100);
				}
				case 3:
				{
					PlayerInfo[playerid][pRingtone] = 4;
					//SendAudioToPlayer(playerid, 54, 100);
				}
				case 4:
				{
					PlayerInfo[playerid][pRingtone] = 5;
					//SendAudioToPlayer(playerid, 55, 100);
				}
				case 5:
				{
					PlayerInfo[playerid][pRingtone] = 6;
					//SendAudioToPlayer(playerid, 56, 100);
				}
				case 6:
				{
					PlayerInfo[playerid][pRingtone] = 7;
					//SendAudioToPlayer(playerid, 57, 100);
				}
				case 7:
				{
					PlayerInfo[playerid][pRingtone] = 8;
					//SendAudioToPlayer(playerid, 58, 100);
				}
				case 8:
				{
					PlayerInfo[playerid][pRingtone] = 9;
					//SendAudioToPlayer(playerid, 59, 100);
				}
				case 9:
				{
					PlayerInfo[playerid][pRingtone] = 0;
				}
			}
			RemovePlayerAttachedObject(playerid, 9);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
		}
	}
	if(dialogid == PBMAINMENU) // Paintball Arena System
	{
		if(response == 1)
		{
		    switch(listitem)
		    {
		        case 0: // Choose a Arena
		        {
		            PaintballArenaSelection(playerid);
		        }
		        case 1: // Buy Paintball Tokens
		        {
		            PaintballTokenBuyMenu(playerid);
		        }
		        case 2:
		        {
		            if(PlayerInfo[playerid][pAdmin] >= 1337)
		            {
		            	ShowPlayerDialog(playerid,PBADMINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Admin Menu:","Edit Arena...\nLock All Arenas\nUnlock All Arenas\nSave Changes to All Arenas","Select","Back");
					}
					else
					{
					    ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
					    SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have authorization to access the admin panel.");
					    return 1;
					}
		        }
		    }
		}
	}
	if(dialogid == PBADMINMENU)
	{
	    if(response == 1)
	    {
			switch(listitem)
			{
			    case 0: // Edit Arena
			    {
			        PaintballEditMenu(playerid);
			    }
			    case 1: // Lock all Arenas
			    {
			        for(new i = 0; i < MAX_ARENAS; i++)
	        		{
						foreach(new p: Player)
						{
				    		new arenaid = GetPVarInt(p, "IsInArena");
				    		if(arenaid == i)
				    		{
				    		    if(PaintBallArena[arenaid][pbBidMoney] > 0)
			        			{
            						GivePlayerCash(p,PaintBallArena[arenaid][pbBidMoney]);
									format(string,sizeof(string),"You have been refunded a total of $%d because of premature closure.",PaintBallArena[arenaid][pbBidMoney]);
       								SendClientMessageEx(p, COLOR_WHITE, string);
       							}
       							if(arenaid == GetPVarInt(p, "ArenaNumber"))
           						{
									switch(PaintBallArena[arenaid][pbGameType])
									{
		    							case 1:
		    							{
		    							    if(PlayerInfo[p][pDonateRank] < 3)
		    							    {
												PlayerInfo[p][pPaintTokens] += 3;
			       								format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",3);
												SendClientMessageEx(p, COLOR_WHITE, string);
											}
						    			}
					    				case 2:
						    			{
						    			    if(PlayerInfo[p][pDonateRank] < 3)
						    			    {
	        									PlayerInfo[p][pPaintTokens] += 4;
												format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",4);
			            						SendClientMessageEx(p, COLOR_WHITE, string);
											}
						    			}
					    				case 3:
						    			{
						    			    if(PlayerInfo[p][pDonateRank] < 3)
						    			    {
	       	 									PlayerInfo[p][pPaintTokens] += 5;
												format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
				          						SendClientMessageEx(p, COLOR_WHITE, string);
											}
						    			}
						    			case 4:
						    			{
						    			    if(PlayerInfo[p][pDonateRank] < 3)
						    			    {
	       	 									PlayerInfo[p][pPaintTokens] += 5;
												format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",5);
				          						SendClientMessageEx(p, COLOR_WHITE, string);
											}
						    			}
						    			case 5:
						    			{
						    			    if(PlayerInfo[p][pDonateRank] < 3)
						    			    {
	       	 									PlayerInfo[p][pPaintTokens] += 6;
												format(string,sizeof(string),"You have been refunded a total of %d Paintball Tokens because of premature closure.",6);
				          						SendClientMessageEx(p, COLOR_WHITE, string);
											}
						    			}
									}
								}
				        		LeavePaintballArena(p, arenaid);
				    		}
						}
						ResetPaintballArena(i);
						PaintBallArena[i][pbLocked] = 2;
	        		}
           			format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has locked all Arenas.", GetPlayerNameEx(playerid));
					ABroadCast(COLOR_YELLOW, string, 2);
					format(string, sizeof(string), "* Admin %s has locked all Paintball Arenas for some short maintenance.", GetPlayerNameEx(playerid));
            		SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
            		ShowPlayerDialog(playerid,PBADMINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Admin Menu:","Edit Arena...\nLock All Arenas\nUnlock All Arenas\nSave Changes to All Arenas","Select","Back");
			    }
			    case 2: // Unlock all Arenas
				{
				    for(new i = 0; i < MAX_ARENAS; i++)
	        		{
	            		if(PaintBallArena[i][pbLocked] == 2)
	            		{
							ResetPaintballArena(i);
						}
	        		}
	        		format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has unlocked all Arenas.", GetPlayerNameEx(playerid));
					ABroadCast(COLOR_YELLOW, string, 2);
					format(string, sizeof(string), "* Admin %s has unlocked all Paintball Arenas, you may join/create them now.", GetPlayerNameEx(playerid));
            		SendClientMessageToAllEx(COLOR_LIGHTBLUE, string);
            		ShowPlayerDialog(playerid,PBADMINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Admin Menu:","Edit Arena...\nLock All Arenas\nUnlock All Arenas\nSave Changes to All Arenas","Select","Back");
				}
				case 3: // Force Save Arenas
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "You have forced saved all changes to the Painball Arenas.");
				    SavePaintballArenas();
				    ShowPlayerDialog(playerid,PBADMINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Admin Menu:","Edit Arena...\nLock All Arenas\nUnlock All Arenas\nSave Changes to All Arenas","Select","Back");
				}
			}
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
	    }
	}
	if(dialogid == PBARENASCORES)
	{
	    if(response == 1)
	    {
     		new arenaid = GetPVarInt(playerid, "IsInArena");
       		PaintballScoreboard(playerid,arenaid);
	    }
	}
	if(dialogid == PBEDITMENU)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_ARENAS; i++)
	        {
	            if(listitem == i)
	            {
	                if(PaintBallArena[i][pbLocked] != 2)
	                {
	                    PaintballEditMenu(playerid);
						SendClientMessageEx(playerid, COLOR_WHITE, "You cannot edit a arena that is not closed.");
						return 1;
	                }
                 	ResetPaintballArena(i);
	                PaintBallArena[i][pbLocked] = 2;

	                new Float:oldX, Float:oldY, Float:oldZ;
					GetPlayerPos(playerid, oldX, oldY, oldZ);

					SetPVarFloat(playerid, "pbOldX", oldX);
					SetPVarFloat(playerid, "pbOldY", oldY);
					SetPVarFloat(playerid, "pbOldZ", oldZ);

					SetPVarInt(playerid, "pbOldInt", GetPlayerInterior(playerid));
					SetPVarInt(playerid, "pbOldVW", GetPlayerVirtualWorld(playerid));

					SetPlayerPosEx(playerid, PaintBallArena[i][pbDeathmatch1][0],PaintBallArena[i][pbDeathmatch1][1],PaintBallArena[i][pbDeathmatch1][2]);
     				SetPlayerFacingAngle(playerid, PaintBallArena[i][pbDeathmatch1][3]);
         			SetPlayerInterior(playerid, PaintBallArena[i][pbInterior]);
            		SetPlayerVirtualWorld(playerid, PaintBallArena[i][pbVirtual]);
            		SetPVarInt(playerid, "ArenaNumber", i);

            		PaintballEditArenaMenu(playerid);
	            }
	        }
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,PBADMINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Admin Menu:","Edit Arena...\nLock All Arenas\nUnlock All Arenas\nSave Changes to All Arenas","Select","Back");
	    }
	}
	if(dialogid == PBEDITARENAMENU)
	{
	    if(response == 1)
	    {
			switch(listitem)
			{
			    case 0: // Name
			    {
			        PaintballEditArenaName(playerid);
			    }
			    case 1: // Deathmatch Spawn Points
			    {
			        PaintballEditArenaDMSpawns(playerid);
			    }
			    case 2: // Team/CTF Spawn Points
			    {
       				PaintballEditArenaTeamSpawns(playerid);
			    }
			    case 3: // CTF Flag Spawn Points
			    {
			        PaintballEditArenaFlagSpawns(playerid);
			    }
			    case 4: // Hill Position
			    {
			        SetPVarInt(playerid, "EditingHillStage", 1);
				    SendClientMessageEx(playerid, COLOR_WHITE, "Goto a location and type (/savehillpos) to edit the Hill Position.");
			    }
			    case 5: // Hill Radius
			    {
			        PaintballEditArenaHillRadius(playerid);
			    }
			    case 6: // Interior
			    {
			        PaintballEditArenaInt(playerid);
			    }
			    case 7: // Virtual World
			    {
			        PaintballEditArenaVW(playerid);
			    }
			}
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "ArenaNumber") != -1)
	        {
	            SetPlayerPosEx(playerid, GetPVarFloat(playerid, "pbOldX"),GetPVarFloat(playerid, "pbOldY"),GetPVarFloat(playerid, "pbOldZ"));
  				SetPlayerInterior(playerid, GetPVarInt(playerid, "pbOldInt"));
    			SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "pbOldVW"));
     			SetPVarInt(playerid, "ArenaNumber", -1);
				Player_StreamPrep(playerid, GetPVarFloat(playerid, "pbOldX"),GetPVarFloat(playerid, "pbOldY"),GetPVarFloat(playerid, "pbOldZ"), FREEZE_TIME);
	        }
	        PaintballEditMenu(playerid);
	    }
	}
	if(dialogid == PBEDITARENANAME)
	{
		if(response == 1)
		{
		    new arenaid = GetPVarInt(playerid, "ArenaNumber");
		    if(isnull(inputtext))
		    {
		        PaintballEditArenaName(playerid);
		        return 1;
		    }
		    if(strlen(inputtext) > 11)
		    {
		        SendClientMessageEx(playerid, COLOR_WHITE, "Arena names cannot be bigger than 11 characters.");
		        PaintballEditArenaName(playerid);
		        return 1;
		    }
		    format(string, sizeof(string), inputtext);
   			strmid(PaintBallArena[arenaid][pbArenaName], string, 0, strlen(string), 64);
		    PaintballEditArenaMenu(playerid);
		}
		else
		{
		    PaintballEditArenaMenu(playerid);
		}
	}
	if(dialogid == PBEDITARENADMSPAWNS)
	{
		if(response == 1)
		{
		    new arenaid = GetPVarInt(playerid, "ArenaNumber");
		    switch(listitem)
		    {
		        case 0: // Spawn Positions 1
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "DM Position 1: Move in a position and type (/savedmpos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingDMPos", 1);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch1][0],PaintBallArena[arenaid][pbDeathmatch1][1],PaintBallArena[arenaid][pbDeathmatch1][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch1][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
		        }
		        case 1: // Spawn Positions 2
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "DM Position 2: Move in a position and type (/savedmpos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingDMPos", 2);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch2][0],PaintBallArena[arenaid][pbDeathmatch2][1],PaintBallArena[arenaid][pbDeathmatch2][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch2][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
		        }
		        case 2: // Spawn Positions 3
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "DM Position 3: Move in a position and type (/savedmpos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingDMPos", 3);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch3][0],PaintBallArena[arenaid][pbDeathmatch3][1],PaintBallArena[arenaid][pbDeathmatch3][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch3][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
		        }
		        case 3: // Spawn Positions 4
		        {
		        	SendClientMessageEx(playerid, COLOR_WHITE, "DM Position 4: Move in a position and type (/savedmpos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingDMPos", 4);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbDeathmatch4][0],PaintBallArena[arenaid][pbDeathmatch4][1],PaintBallArena[arenaid][pbDeathmatch4][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbDeathmatch4][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
		        }
		    }
		}
		else
		{
		    PaintballEditArenaMenu(playerid);
		}
	}
	if(dialogid == PBEDITARENATEAMSPAWNS)
	{
		if(response == 1)
		{
		    new arenaid = GetPVarInt(playerid, "ArenaNumber");
		    switch(listitem)
		    {
		        case 0: // Red Spawn Positions 1
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Red Team Position 1: Move in a position and type (/saveteampos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingTeamPos", 1);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamRed1][0],PaintBallArena[arenaid][pbTeamRed1][1],PaintBallArena[arenaid][pbTeamRed1][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamRed1][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
				}
				case 1: // Red Spawn Positions 2
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Red Team Position 2: Move in a position and type (/saveteampos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingTeamPos", 2);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamRed2][0],PaintBallArena[arenaid][pbTeamRed2][1],PaintBallArena[arenaid][pbTeamRed2][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamRed2][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
				}
				case 2: // Red Spawn Positions 3
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Red Team Position 3: Move in a position and type (/saveteampos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingTeamPos", 3);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamRed3][0],PaintBallArena[arenaid][pbTeamRed3][1],PaintBallArena[arenaid][pbTeamRed3][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamRed3][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
				}
				case 3: // Blue Spawn Positions 1
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Blue Team Position 1: Move in a position and type (/saveteampos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingTeamPos", 4);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamBlue1][0],PaintBallArena[arenaid][pbTeamBlue1][1],PaintBallArena[arenaid][pbTeamBlue1][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamBlue1][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
				}
				case 4: // Blue Spawn Positions 2
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Blue Team Position 2: Move in a position and type (/saveteampos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingTeamPos", 5);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamBlue2][0],PaintBallArena[arenaid][pbTeamBlue2][1],PaintBallArena[arenaid][pbTeamBlue2][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamBlue2][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
				}
				case 5: // Blue Spawn Positions 3
		        {
		            SendClientMessageEx(playerid, COLOR_WHITE, "Blue Team Position 3: Move in a position and type (/saveteampos).");
		            SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
		            SetPVarInt(playerid, "EditingTeamPos", 6);

		            SetPlayerPosEx(playerid, PaintBallArena[arenaid][pbTeamBlue3][0],PaintBallArena[arenaid][pbTeamBlue3][1],PaintBallArena[arenaid][pbTeamBlue3][2]);
		            SetPlayerFacingAngle(playerid, PaintBallArena[arenaid][pbTeamBlue3][3]);
		            SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
		            SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);

					PlayerInfo[playerid][pVW] = PaintBallArena[arenaid][pbVirtual];
					PlayerInfo[playerid][pInt] = PaintBallArena[arenaid][pbInterior];
				}
		    }
		}
		else
		{
		    PaintballEditArenaMenu(playerid);
		}
	}
	if(dialogid == PBEDITARENAFLAGSPAWNS)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        switch(listitem)
	        {
	            case 0: // Red Flag
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Red Team Flag Position: Move in a position and type (/saveflagpos).");
	                SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
	                SetPVarInt(playerid, "EditingFlagPos", 1);

					SetPlayerPosEx(playerid,PaintBallArena[arenaid][pbFlagRedSpawn][0],PaintBallArena[arenaid][pbFlagRedSpawn][1],PaintBallArena[arenaid][pbFlagRedSpawn][2]);
					SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
					SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);
	            }
	            case 1: // Blue Flag
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "Blue Team Flag Position: Move in a position and type (/saveflagpos).");
	                SendClientMessageEx(playerid, COLOR_WHITE, "Be sure that you are in the correct position before saving.");
	                SetPVarInt(playerid, "EditingFlagPos", 2);

					SetPlayerPosEx(playerid,PaintBallArena[arenaid][pbFlagBlueSpawn][0],PaintBallArena[arenaid][pbFlagBlueSpawn][1],PaintBallArena[arenaid][pbFlagBlueSpawn][2]);
					SetPlayerInterior(playerid, PaintBallArena[arenaid][pbInterior]);
					SetPlayerVirtualWorld(playerid, PaintBallArena[arenaid][pbVirtual]);
				}
	        }
	    }
	    else
	    {
	        PaintballEditArenaMenu(playerid);
	    }
	}
	if(dialogid == PBEDITARENAINT)
	{
	    if(response == 1)
		{
		    new arenaid = GetPVarInt(playerid, "ArenaNumber");
		    if(isnull(inputtext))
		    {
		        PaintballEditArenaInt(playerid);
		        return 1;
		    }
		    PaintBallArena[arenaid][pbInterior] = strval(inputtext);
		    PaintballEditArenaMenu(playerid);
		}
		else
		{
		    PaintballEditArenaMenu(playerid);
		}
	}
	if(dialogid == PBEDITARENAVW)
	{
	    if(response == 1)
		{
		    new arenaid = GetPVarInt(playerid, "ArenaNumber");
		    if(isnull(inputtext))
		    {
		        PaintballEditArenaVW(playerid);
		        return 1;
		    }
		    PaintBallArena[arenaid][pbVirtual] = strval(inputtext);
		    PaintballEditArenaMenu(playerid);
		}
		else
		{
		    PaintballEditArenaMenu(playerid);
		}
	}
	if(dialogid == PBEDITARENAHILLRADIUS)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            PaintballEditArenaHillRadius(playerid);
	            return 1;
	        }
	        if(floatstr(inputtext) < 0.0 || floatstr(inputtext) > 100.0)
	        {
	            PaintballEditArenaHillRadius(playerid);
	            return 1;
	        }
	        PaintBallArena[arenaid][pbHillRadius] = floatstr(inputtext);
	        PaintballEditArenaMenu(playerid);
	    }
	    else
	    {
	        PaintballEditArenaMenu(playerid);
	    }
	}
	if(dialogid == PBARENASELECTION) // Paintball Arena System
	{
	    if(response == 1)
	    {
     		for(new i = 0; i < MAX_ARENAS; i++)
       		{
       		    if(listitem == i)
       		    {
       		        //format(string, sizeof(string), "Debug: You have entered Arena %d.", i+1);
       		        //SendClientMessageEx(playerid, COLOR_WHITE, string);

       		        if(PaintBallArena[i][pbLocked] == 0) // Open
       		        {
       		            if(PlayerInfo[playerid][pPaintTokens] < 3)
						{
						    if(PlayerInfo[playerid][pDonateRank] <= 2)
						    {
								SendClientMessageEx(playerid, COLOR_WHITE, "You need at least 3 tokens to rent a room.");
						    	PaintballArenaSelection(playerid);
						    	return 1;
							}
						}
       		            ResetPaintballArena(i);
       		            PaintBallArena[i][pbPlayers] = 1;
       		            PaintBallArena[i][pbLocked] = 3;

       		            new Float:oldX, Float:oldY, Float:oldZ, Float:oldHealth, Float:oldArmor;
						GetPlayerPos(playerid, oldX, oldY, oldZ);

						SetPVarFloat(playerid, "pbOldX", oldX);
						SetPVarFloat(playerid, "pbOldY", oldY);
						SetPVarFloat(playerid, "pbOldZ", oldZ);

						GetPlayerHealth(playerid,oldHealth);
						GetPlayerArmour(playerid,oldArmor);
						SetPVarInt(playerid, "pbOldInt", GetPlayerInterior(playerid));
						SetPVarInt(playerid, "pbOldVW", GetPlayerVirtualWorld(playerid));
						SetPVarFloat(playerid, "pbOldHealth", oldHealth);
						SetPVarFloat(playerid, "pbOldArmor", oldArmor);

       		            SetPlayerPosEx(playerid, PaintBallArena[i][pbDeathmatch1][0],PaintBallArena[i][pbDeathmatch1][1],PaintBallArena[i][pbDeathmatch1][2]);
       		            SetPlayerFacingAngle(playerid, PaintBallArena[i][pbDeathmatch1][3]);
       		            SetPlayerInterior(playerid, PaintBallArena[i][pbInterior]);
       		            SetPlayerVirtualWorld(playerid, PaintBallArena[i][pbVirtual]);

       		            PlayerInfo[playerid][pVW] = PaintBallArena[i][pbVirtual];
						PlayerInfo[playerid][pInt] = PaintBallArena[i][pbInterior];

       		            format(string, sizeof(string), "%s",GetPlayerNameEx(playerid));
						strmid(PaintBallArena[i][pbOwner], string, 0, strlen(string), 64);
       		        	SetPVarInt(playerid, "ArenaNumber", i);
       		        	SetPVarInt(playerid, "IsInArena", i);
						PaintballSetupArena(playerid);
						return 1;
					}
					if(PaintBallArena[i][pbLocked] == 1) // Active
					{
					    if(PaintBallArena[i][pbPlayers] >= PaintBallArena[i][pbLimit])
	    				{
		        			//format(string, sizeof(string), "Debug: Arena %d is currently full, you can not enter it.", i+1);
          					//SendClientMessageEx(playerid, COLOR_WHITE, string);
	    					PaintballArenaSelection(playerid);
		    				return 1;
						}
						if(PaintBallArena[i][pbBidMoney] > GetPlayerCash(playerid))
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough cash to enter the Arena.");
							PaintballArenaSelection(playerid);
							return 1;
						}
						if(PaintBallArena[i][pbTimeLeft] < 180)
						{
						    SendClientMessageEx(playerid, COLOR_WHITE, "That Arena's round is about to end, you cannot join it.");
						    return 1;
						}
						if(PaintBallArena[i][pbGameType] == 2 || PaintBallArena[i][pbGameType] == 3 || PaintBallArena[i][pbGameType] == 5)
						{
						    SetPVarInt(playerid, "ArenaEnterTeam", i);
						    ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Team:","{FF0000}Red Team\n{0000FF}Blue Team","Enter","Leave");
						    return 1;
						}
						if(strcmp(PaintBallArena[i][pbPassword], "None", false))
						{
	    					SetPVarInt(playerid, "ArenaEnterPass", i);
	    					ShowPlayerDialog(playerid,PBJOINPASSWORD,DIALOG_STYLE_INPUT,"Paintball Arena - Password:","This Arena is currently passworded, please enter the password:","Enter","Leave");
	    					return 1;
						}
						JoinPaintballArena(playerid, i, "None");
					}
					if(PaintBallArena[i][pbLocked] == 2) // Closed
					{
					    PaintballArenaSelection(playerid);
					    return 1;
					}
					if(PaintBallArena[i][pbLocked] == 3) // Setup
					{
					    PaintballArenaSelection(playerid);
					    return 1;
					}
       		    }
	        }
		}
		else
		{
			ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
		}
	}
	if(dialogid == PBTOKENBUYMENU)
	{
	    if(response == 1)
	    {
	        if(isnull(inputtext))
	        {
				PaintballTokenBuyMenu(playerid);
				return 1;
	        }
	        if(strval(inputtext) <= 0)
	        {
	            PaintballTokenBuyMenu(playerid);
	            return 1;
	        }
	        if(strval(inputtext) > 1000)
	        {
	            PaintballTokenBuyMenu(playerid);
	            SendClientMessageEx(playerid, COLOR_WHITE, "You can not purchase more than 1000 tokens at a time.");
	            return 1;
	        }
	        if(GetPlayerCash(playerid) < 5000*strval(inputtext))
	        {
				PaintballTokenBuyMenu(playerid);
	        	format(string,sizeof(string), "You can not afford %d tokens for $%d.",strval(inputtext),strval(inputtext)*5000);
	        	SendClientMessageEx(playerid, COLOR_WHITE, string);
	        	return 1;
			}
	        GivePlayerCash(playerid, -5000*strval(inputtext));
			PlayerInfo[playerid][pPaintTokens] += strval(inputtext);
			format(string,sizeof(string), "You have purchased %d tokens for $%d.",strval(inputtext),strval(inputtext)*5000);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,PBMAINMENU,DIALOG_STYLE_LIST,"Paintball Arena - Main Menu:","Choose an Arena\nPaintball Tokens\nAdmin Menu","Select","Leave");
	    }
	}
	if(dialogid == PBSETUPARENA)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(PaintBallArena[arenaid][pbGameType] == 1 || PaintBallArena[arenaid][pbGameType] == 2 || PaintBallArena[arenaid][pbGameType] == 4 || PaintBallArena[arenaid][pbGameType] == 5) // Deathmatch, Team Deathmatch, Single and Team King of the Hill.
	        {
	        	switch(listitem)
	        	{
        			case 0: // Password
	            	{
						ShowPlayerDialog(playerid,PBCHANGEPASSWORD,DIALOG_STYLE_INPUT,"Paintball Arena - Change Password:","Please enter your desired password, leave it empty if you do not want the arena passworded:","Change","Back");
						return 1;
	            	}
	            	case 1: // GameType
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEGAMEMODE,DIALOG_STYLE_LIST,"Paintball Arena - Change Gamemode:","Deathmatch\nTeam Deathmatch\nCapture the Flag\nKing of the Hill\nTeam King of the Hill","Change","Back");
	                	return 1;
	            	}
	            	case 2: // Limit
	            	{
	    				ShowPlayerDialog(playerid,PBCHANGELIMIT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Limit:","Please enter a player limit (2-16):","Change","Back");
	    				return 1;
	            	}
	            	case 3: // Time Limit
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGETIMELEFT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Time Limit:","Please enter a Time Limit for the round (5-15 Minutes):","Change","Back");
	                	return 1;
	            	}
	            	case 4: // Bid Money
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEBIDMONEY,DIALOG_STYLE_INPUT,"Paintball Arena - Change Bid Money:","Please enter a bid amount for each player ($0-$10000):","Change","Back");
	                	return 1;
	            	}
	            	case 5: // Health
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEHEALTH,DIALOG_STYLE_INPUT,"Paintball Arena - Change Health:","Please enter a spawn health amount for each player (1-100):","Change","Back");
	                	return 1;
	            	}
	            	case 6: // Armor
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEARMOR,DIALOG_STYLE_INPUT,"Paintball Arena - Change Armor:","Please enter a spawn armor amount for each player (0-100):","Change","Back");
	                	return 1;
	            	}
	            	case 7: // Weapons 1
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEWEAPONS1,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 1):","Please enter a weapon id for slot 1 for each player (0-34):","Change","Back");
	                	return 1;
	            	}
	            	case 8: // Weapons 2
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEWEAPONS2,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 2):","Please enter a weapon id for slot 2 for each player (0-34):","Change","Back");
	                	return 1;
	            	}
            		case 9: // Weapons 3
	            	{
	            		ShowPlayerDialog(playerid,PBCHANGEWEAPONS3,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 3):","Please enter a weapon id for slot 3 for each player (0-34):","Change","Back");
	                	return 1;
	            	}
	            	case 10: // Exploit Perm
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEEXPLOITPERM,DIALOG_STYLE_INPUT,"Paintball Arena - Change Exploit Permissions:","Do you wish to allow QS/CS in the room? (1 = Yes / 0 = No):","Change","Back");
	                	return 1;
	            	}
	            	case 11: // Begin Arena
	            	{
	            	    if(PaintBallArena[arenaid][pbGameType] == 1)
	            	    {
	            	        if(PlayerInfo[playerid][pDonateRank] <= 2)
	                    	{
	                    		PlayerInfo[playerid][pPaintTokens] -= 3;
	                			format(string,sizeof(string),"You have rented this room for %d minutes at a cost of %d tokens.",PaintBallArena[arenaid][pbTimeLeft]/60,3);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 27, 100);
							}
							else
							{
						    	format(string,sizeof(string),"You have rented this room for %d minutes at no cost because of Gold+ VIP.",PaintBallArena[arenaid][pbTimeLeft]/60);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 27, 100);
							}
	            	    }
	            	    if(PaintBallArena[arenaid][pbGameType] == 2)
	            	    {
	            	    	if(PlayerInfo[playerid][pDonateRank] <= 2)
	                    	{
	                    		if(PlayerInfo[playerid][pPaintTokens] >= 4)
								{
    								PlayerInfo[playerid][pPaintTokens] -= 4;
       								format(string,sizeof(string),"You have rented this room for %d minutes at a cost of %d tokens.",PaintBallArena[arenaid][pbTimeLeft]/60,4);
          							SendClientMessageEx(playerid, COLOR_YELLOW, string);
          							SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
          							PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
          							//SendAudioToPlayer(playerid, 27, 100);
								}
								else
								{
						    		PaintballSetupArena(playerid);
						    		SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough tokens to rent this room for this gametype.");
						    		return 1;
								}
							}
							else
							{
						    	format(string,sizeof(string),"You have rented this room for %d minutes at no cost because of Gold+ VIP.",PaintBallArena[arenaid][pbTimeLeft]/60);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 41, 100);
							}
							PlayerInfo[playerid][pPaintTeam] = 1;
							PaintBallArena[arenaid][pbTeamRed] = 1;
	            	    }
	            	    if(PaintBallArena[arenaid][pbGameType] == 4)
	            	    {
	            	        if(PlayerInfo[playerid][pDonateRank] <= 2)
	                    	{
	                    		PlayerInfo[playerid][pPaintTokens] -= 5;
	                			format(string,sizeof(string),"You have rented this room for %d minutes at a cost of %d tokens.",PaintBallArena[arenaid][pbTimeLeft]/60,5);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 27, 100);
							}
							else
							{
						    	format(string,sizeof(string),"You have rented this room for %d minutes at no cost because of Gold+ VIP.",PaintBallArena[arenaid][pbTimeLeft]/60);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 27, 100);
							}

							CreatePaintballArenaHill(arenaid);
							SetPVarInt(playerid, "TickKOTHID", SetTimerEx("TickKOTH", 1000, true, "d", playerid)); // Room Owner's KOTH Tick Function
							SetPlayerCheckpoint(playerid, PaintBallArena[arenaid][pbHillX], PaintBallArena[arenaid][pbHillY], PaintBallArena[arenaid][pbHillZ], PaintBallArena[arenaid][pbHillRadius]);
	            	    }
	            	    if(PaintBallArena[arenaid][pbGameType] == 5)
	            	    {
	            	    	if(PlayerInfo[playerid][pDonateRank] <= 2)
	                    	{
	                    		if(PlayerInfo[playerid][pPaintTokens] >= 6)
								{
    								PlayerInfo[playerid][pPaintTokens] -= 6;
       								format(string,sizeof(string),"You have rented this room for %d minutes at a cost of %d tokens.",PaintBallArena[arenaid][pbTimeLeft]/60,6);
          							SendClientMessageEx(playerid, COLOR_YELLOW, string);
          							SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
          							PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
          							//SendAudioToPlayer(playerid, 41, 100);
								}
								else
								{
						    		PaintballSetupArena(playerid);
						    		SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough tokens to rent this room for this gametype.");
						    		return 1;
								}
							}
							else
							{
						    	format(string,sizeof(string),"You have rented this room for %d minutes at no cost because of Gold+ VIP.",PaintBallArena[arenaid][pbTimeLeft]/60);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 41, 100);
							}

							CreatePaintballArenaHill(arenaid);
							SetPVarInt(playerid, "TickKOTHID", SetTimerEx("TickKOTH", 1000, true, "d", playerid)); // Room Owner's KOTH Tick Function
							SetPlayerCheckpoint(playerid, PaintBallArena[arenaid][pbHillX], PaintBallArena[arenaid][pbHillY], PaintBallArena[arenaid][pbHillZ], PaintBallArena[arenaid][pbHillRadius]);
							PlayerInfo[playerid][pPaintTeam] = 1;
							PaintBallArena[arenaid][pbTeamRed] = 1;
	            	    }
    					PaintBallArena[arenaid][pbActive] = 1;
	                	PaintBallArena[arenaid][pbLocked] = 1;
	                	GivePlayerCash(playerid,-PaintBallArena[arenaid][pbBidMoney]);
	                	PaintBallArena[arenaid][pbMoneyPool] += PaintBallArena[arenaid][pbBidMoney];
	                	SpawnPaintballArena(playerid, arenaid);
						return 1;
	            	}
				}
			}
			if(PaintBallArena[arenaid][pbGameType] == 3) // Capture the Flag
			{
			    switch(listitem)
	        	{
        			case 0: // Password
	            	{
						ShowPlayerDialog(playerid,PBCHANGEPASSWORD,DIALOG_STYLE_INPUT,"Paintball Arena - Change Password:","Please enter your desired password, leave it empty if you do not want the arena passworded:","Change","Back");
						return 1;
	            	}
	            	case 1: // GameType
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEGAMEMODE,DIALOG_STYLE_LIST,"Paintball Arena - Change Gamemode:","Deathmatch\nTeam Deathmatch\nCapture the Flag\nKing of the Hill\nTeam King of the Hill","Change","Back");
	                	return 1;
	            	}
	            	case 2: // Limit
	            	{
	    				ShowPlayerDialog(playerid,PBCHANGELIMIT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Limit:","Please enter a player limit (2-16):","Change","Back");
	    				return 1;
	            	}
	            	case 3: // Time Limit
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGETIMELEFT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Time Limit:","Please enter a Time Limit for the round (5-15 Minutes):","Change","Back");
	                	return 1;
	            	}
	            	case 4: // Bid Money
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEBIDMONEY,DIALOG_STYLE_INPUT,"Paintball Arena - Change Bid Money:","Please enter a bid amount for each player ($0-$10000):","Change","Back");
	                	return 1;
	            	}
	            	case 5: // Health
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEHEALTH,DIALOG_STYLE_INPUT,"Paintball Arena - Change Health:","Please enter a spawn health amount for each player (1-100):","Change","Back");
	                	return 1;
	            	}
	            	case 6: // Armor
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEARMOR,DIALOG_STYLE_INPUT,"Paintball Arena - Change Armor:","Please enter a spawn armor amount for each player (0-100):","Change","Back");
	                	return 1;
	            	}
	            	case 7: // Weapons 1
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEWEAPONS1,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 1):","Please enter a weapon id for slot 1 for each player (0-34):","Change","Back");
	                	return 1;
	            	}
	            	case 8: // Weapons 2
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEWEAPONS2,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 2):","Please enter a weapon id for slot 2 for each player (0-34):","Change","Back");
	                	return 1;
	            	}
            		case 9: // Weapons 3
	            	{
	            		ShowPlayerDialog(playerid,PBCHANGEWEAPONS3,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 3):","Please enter a weapon id for slot 3 for each player (0-34):","Change","Back");
	                	return 1;
	            	}
	            	case 10: // Exploit Perm
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEEXPLOITPERM,DIALOG_STYLE_INPUT,"Paintball Arena - Change Exploit Permissions:","Do you wish to allow QS/CS in the room? (1 = Yes / 0 = No):","Change","Back");
	                	return 1;
	            	}
	            	case 11: // Flag Instagib
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEFLAGINSTAGIB,DIALOG_STYLE_INPUT,"Paintball Arena - Change Flag Instagib:","Do you wish to allow Flag Holder's Instagib in the room? (1 = Yes / 0 = No):\n\nHint: This set's the flag holder's health to 1 on pickup.","Change","Back");
	                	return 1;
	            	}
	            	case 12: // Flag No Weapons
	            	{
	                	ShowPlayerDialog(playerid,PBCHANGEFLAGNOWEAPONS,DIALOG_STYLE_INPUT,"Paintball Arena - Change Flag No Weapons:","Do you wish to have Flag Holder's Weapons to be disabled in the room? (1 = Yes / 0 = No):\n\nHint: This set's the flag holder's weapons to fists on pickup.","Change","Back");
	                	return 1;
	            	}
	            	case 13: // Begin Arena
	            	{
	            	    if(PlayerInfo[playerid][pDonateRank] <= 2)
	                    {
	                    	if(PlayerInfo[playerid][pPaintTokens] >= 5)
							{
	                    		PlayerInfo[playerid][pPaintTokens] -= 5;
	                			format(string,sizeof(string),"You have rented this room for %d minutes at a cost of %d tokens.",PaintBallArena[arenaid][pbTimeLeft]/60,5);
	                			SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                			SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                			PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                			//SendAudioToPlayer(playerid, 41, 100);
							}
							else
							{
						    	PaintballSetupArena(playerid);
						    	SendClientMessageEx(playerid, COLOR_WHITE, "You do not have enough tokens to rent this room for this gametype.");
						    	return 1;
							}
						}
						else
						{
						    format(string,sizeof(string),"You have rented this room for %d minutes at no cost because of Gold+ VIP.",PaintBallArena[arenaid][pbTimeLeft]/60);
	                		SendClientMessageEx(playerid, COLOR_YELLOW, string);
	                		SendClientMessageEx(playerid, COLOR_WHITE, "Paintball Arena Commands: /scores - /exitarena - /joinarena - /switchteam");
	                		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
	                		//SendAudioToPlayer(playerid, 41, 100);
						}

						SetPVarInt(playerid, "TickCTFID", SetTimerEx("TickCTF", 1000, true, "d", playerid)); // Room Owner's CTF Tick Function
						PlayerInfo[playerid][pPaintTeam] = 1;
						PaintBallArena[arenaid][pbTeamRed] = 1;

						// Spawn Flags
						PaintBallArena[arenaid][pbTeamRedTextID] = Create3DTextLabel("Red Base", COLOR_RED, PaintBallArena[arenaid][pbFlagRedSpawn][0], PaintBallArena[arenaid][pbFlagRedSpawn][1], PaintBallArena[arenaid][pbFlagRedSpawn][2], 1000.0, PaintBallArena[arenaid][pbVirtual], 0);
						//PaintBallArena[arenaid][pbTeamRedTextID] = CreateDynamic3DTextLabel("Red Base", COLOR_RED, PaintBallArena[arenaid][pbFlagRedSpawn][0], PaintBallArena[arenaid][pbFlagRedSpawn][1], PaintBallArena[arenaid][pbFlagRedSpawn][2], 1000.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior]);
						PaintBallArena[arenaid][pbTeamBlueTextID] = Create3DTextLabel("Blue Base", COLOR_DBLUE, PaintBallArena[arenaid][pbFlagBlueSpawn][0], PaintBallArena[arenaid][pbFlagBlueSpawn][1], PaintBallArena[arenaid][pbFlagBlueSpawn][2], 1000.0, PaintBallArena[arenaid][pbVirtual], 0);
                        //PaintBallArena[arenaid][pbTeamBlueTextID] = CreateDynamic3DTextLabel("Blue Base", COLOR_DBLUE, PaintBallArena[arenaid][pbFlagBlueSpawn][0], PaintBallArena[arenaid][pbFlagBlueSpawn][1], PaintBallArena[arenaid][pbFlagBlueSpawn][2], 1000.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior]);
						PaintBallArena[arenaid][pbFlagRedID] = CreateDynamicObject(RED_FLAG_OBJ, PaintBallArena[arenaid][pbFlagRedSpawn][0], PaintBallArena[arenaid][pbFlagRedSpawn][1], PaintBallArena[arenaid][pbFlagRedSpawn][2], 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);
						PaintBallArena[arenaid][pbFlagBlueID] = CreateDynamicObject(BLUE_FLAG_OBJ, PaintBallArena[arenaid][pbFlagBlueSpawn][0], PaintBallArena[arenaid][pbFlagBlueSpawn][1], PaintBallArena[arenaid][pbFlagBlueSpawn][2], 0.0, 0.0, 0.0, PaintBallArena[arenaid][pbVirtual], PaintBallArena[arenaid][pbInterior], -1);

						// Default Flag Positions
						PaintBallArena[arenaid][pbFlagRedActive] = 0;
						PaintBallArena[arenaid][pbFlagRedPos][0] = PaintBallArena[arenaid][pbFlagRedSpawn][0];
						PaintBallArena[arenaid][pbFlagRedPos][1] = PaintBallArena[arenaid][pbFlagRedSpawn][1];
						PaintBallArena[arenaid][pbFlagRedPos][2] = PaintBallArena[arenaid][pbFlagRedSpawn][2];

						PaintBallArena[arenaid][pbFlagBlueActive] = 0;
						PaintBallArena[arenaid][pbFlagBluePos][0] = PaintBallArena[arenaid][pbFlagBlueSpawn][0];
						PaintBallArena[arenaid][pbFlagBluePos][1] = PaintBallArena[arenaid][pbFlagBlueSpawn][1];
						PaintBallArena[arenaid][pbFlagBluePos][2] = PaintBallArena[arenaid][pbFlagBlueSpawn][2];

						// Start Round, Open Room
    					PaintBallArena[arenaid][pbActive] = 1;
	                	PaintBallArena[arenaid][pbLocked] = 1;
	                	GivePlayerCash(playerid,-PaintBallArena[arenaid][pbBidMoney]);
	                	PaintBallArena[arenaid][pbMoneyPool] += PaintBallArena[arenaid][pbBidMoney];
	                	SpawnPaintballArena(playerid, arenaid);
						return 1;
	            	}
				}
			}
	        PaintballSetupArena(playerid);
	    }
	    else
	    {
	        LeavePaintballArena(playerid, GetPVarInt(playerid, "ArenaNumber"));
	        PaintballArenaSelection(playerid);
	    }
	}
	if(dialogid == PBCHANGEPASSWORD)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            format(string, sizeof(string), "None");
				strmid(PaintBallArena[arenaid][pbPassword], string, 0, strlen(string), 64);
				PaintballSetupArena(playerid);
				return 1;
	        }
	        strmid(PaintBallArena[arenaid][pbPassword], inputtext, 0, strlen(inputtext), 64);
			PaintballSetupArena(playerid);
	    }
	    else
	    {
	        PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBCHANGEGAMEMODE)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
			switch(listitem)
			{
			    case 0:
			    {
					PaintBallArena[arenaid][pbGameType] = 1;
					PaintballSetupArena(playerid);
			    }
			    case 1:
			    {
			        PaintBallArena[arenaid][pbGameType] = 2;
					PaintballSetupArena(playerid);
			    }
			    case 2:
			    {
			        PaintBallArena[arenaid][pbGameType] = 3;
			        PaintballSetupArena(playerid);
			    }
			    case 3:
			    {
			        PaintBallArena[arenaid][pbGameType] = 4;
			        PaintballSetupArena(playerid);
			    }
			    case 4:
			    {
			        PaintBallArena[arenaid][pbGameType] = 5;
			        PaintballSetupArena(playerid);
			    }
			}
	    }
	    else
	    {
	        PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBCHANGELIMIT)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGELIMIT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Limit:","Please enter a player limit (2-16):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 2 || strval(inputtext) > 16)
	        {
	            ShowPlayerDialog(playerid,PBCHANGELIMIT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Limit:","Please enter a player limit (2-16):","Change","Back");
	            return 1;
	        }
			PaintBallArena[arenaid][pbLimit] = strval(inputtext);
			PaintballSetupArena(playerid);
	    }
	    else
	    {
	    	PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBCHANGETIMELEFT)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGETIMELEFT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Time Limit:","Please enter a Time Limit for the round (5-15 Minutes):","Change","Back");
	            return 1;
	        }
	        if(strfindex(".", inputtext, true) != -1)
	        {
	            ShowPlayerDialog(playerid,PBCHANGETIMELEFT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Time Limit:","Please enter a Time Limit for the round (5-15 Minutes):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 5 || strval(inputtext) > 15)
	        {
	            ShowPlayerDialog(playerid,PBCHANGETIMELEFT,DIALOG_STYLE_INPUT,"Paintball Arena - Change Time Limit:","Please enter a Time Limit for the round (5-15 Minutes):","Change","Back");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbTimeLeft] = strval(inputtext)*60;
	        PaintballSetupArena(playerid);
	    }
	    else
	    {
			PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBCHANGEBIDMONEY)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEBIDMONEY,DIALOG_STYLE_INPUT,"Paintball Arena - Change Bid Money:","Please enter a bid amount for each player ($0-$10000):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0 || strval(inputtext) > 10000)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEBIDMONEY,DIALOG_STYLE_INPUT,"Paintball Arena - Change Bid Money:","Please enter a bid amount for each player ($0-$10000):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) > GetPlayerCash(playerid))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEBIDMONEY,DIALOG_STYLE_INPUT,"Paintball Arena - Change Bid Money:","Please enter a bid amount for each player ($0-$10000):","Change","Back");
	            SendClientMessageEx(playerid, COLOR_WHITE, "You can't enter a bid amount greater than your current cash.");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbBidMoney] = strval(inputtext);
	        PaintballSetupArena(playerid);
		}
		else
		{
			PaintballSetupArena(playerid);
		}
	}
	if(dialogid == PBCHANGEHEALTH)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEHEALTH,DIALOG_STYLE_INPUT,"Paintball Arena - Change Health:","Please enter a spawn health amount for each player (1-100):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 1 || strval(inputtext) > 100)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEHEALTH,DIALOG_STYLE_INPUT,"Paintball Arena - Change Health:","Please enter a spawn health amount for each player (1-100):","Change","Back");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbHealth] = strval(inputtext);
	        PaintballSetupArena(playerid);
		}
		else
		{
			PaintballSetupArena(playerid);
		}
	}
	if(dialogid == PBCHANGEARMOR)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEARMOR,DIALOG_STYLE_INPUT,"Paintball Arena - Change Armor:","Please enter a spawn armor amount for each player (0-100):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0 || strval(inputtext) > 100)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEARMOR,DIALOG_STYLE_INPUT,"Paintball Arena - Change Armor:","Please enter a spawn armor amount for each player (0-100):","Change","Back");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbArmor] = strval(inputtext);
	        PaintballSetupArena(playerid);
		}
		else
		{
			PaintballSetupArena(playerid);
		}
	}
	if(dialogid == PBCHANGEWEAPONS1)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS1,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 1):","Please enter a weapon id for slot 1 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0||strval(inputtext) > 34)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS1,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 1):","Please enter a weapon id for slot 1 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) >= 19 && strval(inputtext) <= 21)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS1,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 1):","Please enter a weapon id for slot 1 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) == 16 || strval(inputtext) == 18 || strval(inputtext) == 4)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS1,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 1):","Please enter a weapon id for slot 1 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbWeapons][0] = strval(inputtext);
	        PaintballSetupArena(playerid);
		}
		else
		{
			PaintballSetupArena(playerid);
		}
	}
	if(dialogid == PBCHANGEWEAPONS2)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS2,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 2):","Please enter a weapon id for slot 2 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0||strval(inputtext) > 34)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS2,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 2):","Please enter a weapon id for slot 2 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) >= 19 && strval(inputtext) <= 21)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS2,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 2):","Please enter a weapon id for slot 2 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) == 16 || strval(inputtext) == 18 || strval(inputtext) == 4)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS2,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 2):","Please enter a weapon id for slot 2 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbWeapons][1] = strval(inputtext);
	        PaintballSetupArena(playerid);
		}
		else
		{
			PaintballSetupArena(playerid);
		}
	}
	if(dialogid == PBCHANGEWEAPONS3)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
	        if(isnull(inputtext))
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS3,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 3):","Please enter a weapon id for slot 3 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) < 0||strval(inputtext) > 34)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS3,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 3):","Please enter a weapon id for slot 3 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) >= 19 && strval(inputtext) <= 21)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS3,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 3):","Please enter a weapon id for slot 3 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        if(strval(inputtext) == 16 || strval(inputtext) == 18 || strval(inputtext) == 4)
	        {
	            ShowPlayerDialog(playerid,PBCHANGEWEAPONS3,DIALOG_STYLE_INPUT,"Paintball Arena - Change Weapons (Slot 3):","Please enter a weapon id for slot 3 for each player (0-34):","Change","Back");
	            return 1;
	        }
	        PaintBallArena[arenaid][pbWeapons][2] = strval(inputtext);
	        PaintballSetupArena(playerid);
		}
		else
		{
			PaintballSetupArena(playerid);
		}
	}
	if(dialogid == PBCHANGEEXPLOITPERM)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
			if(isnull(inputtext))
			{
			    ShowPlayerDialog(playerid,PBCHANGEEXPLOITPERM,DIALOG_STYLE_INPUT,"Paintball Arena - Change Exploit Permissions:","Do you wish to allow QS/CS in the room? (1 = Yes / 0 = No):","Change","Back");
			    return 1;
			}
			if(strval(inputtext) < 0||strval(inputtext) > 1)
			{
			    ShowPlayerDialog(playerid,PBCHANGEEXPLOITPERM,DIALOG_STYLE_INPUT,"Paintball Arena - Change Exploit Permissions:","Do you wish to allow QS/CS in the room? (1 = Yes / 0 = No):","Change","Back");
			    return 1;
			}
			PaintBallArena[arenaid][pbExploitPerm] = strval(inputtext);
			PaintballSetupArena(playerid);
	    }
	    else
	    {
	        PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBCHANGEFLAGINSTAGIB)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
			if(isnull(inputtext))
			{
			    ShowPlayerDialog(playerid,PBCHANGEFLAGINSTAGIB,DIALOG_STYLE_INPUT,"Paintball Arena - Change Flag Instagib:","Do you wish to allow Flag Holder's Instagib in the room? (1 = Yes / 0 = No):\n\nHint: This set's the flag holder's health to 1 on pickup.","Change","Back");
			    return 1;
			}
			if(strval(inputtext) < 0||strval(inputtext) > 1)
			{
			    ShowPlayerDialog(playerid,PBCHANGEFLAGINSTAGIB,DIALOG_STYLE_INPUT,"Paintball Arena - Change Flag Instagib:","Do you wish to allow Flag Holder's Instagib in the room? (1 = Yes / 0 = No):\n\nHint: This set's the flag holder's health to 1 on pickup.","Change","Back");
			    return 1;
			}
			PaintBallArena[arenaid][pbFlagInstagib] = strval(inputtext);
			PaintballSetupArena(playerid);
	    }
	    else
	    {
	        PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBCHANGEFLAGNOWEAPONS)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaNumber");
			if(isnull(inputtext))
			{
			    ShowPlayerDialog(playerid,PBCHANGEFLAGNOWEAPONS,DIALOG_STYLE_INPUT,"Paintball Arena - Change Flag No Weapons:","Do you wish to have Flag Holder's Weapons to be disabled in the room? (1 = Yes / 0 = No):\n\nHint: This set's the flag holder's weapons to fists on pickup.","Change","Back");
			    return 1;
			}
			if(strval(inputtext) < 0||strval(inputtext) > 1)
			{
			    ShowPlayerDialog(playerid,PBCHANGEFLAGNOWEAPONS,DIALOG_STYLE_INPUT,"Paintball Arena - Change Flag No Weapons:","Do you wish to have Flag Holder's Weapons to be disabled in the room? (1 = Yes / 0 = No):\n\nHint: This set's the flag holder's weapons to fists on pickup.","Change","Back");
			    return 1;
			}
			PaintBallArena[arenaid][pbFlagNoWeapons] = strval(inputtext);
			PaintballSetupArena(playerid);
	    }
	    else
	    {
	        PaintballSetupArena(playerid);
	    }
	}
	if(dialogid == PBJOINPASSWORD)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaEnterPass");
	        if(PaintBallArena[arenaid][pbPlayers] >= PaintBallArena[arenaid][pbLimit])
			{
    			PaintballArenaSelection(playerid);
    			SetPVarInt(playerid, "ArenaEnterPass", -1);
    			SetPVarInt(playerid, "pbTeamChoice", 0);
	   			return 1;
			}
			if(isnull(inputtext))
			{
			    PaintballArenaSelection(playerid);
			    SetPVarInt(playerid, "ArenaEnterPass", -1);
			    SetPVarInt(playerid, "pbTeamChoice", 0);
			    return 1;
			}
			if(strcmp(PaintBallArena[arenaid][pbPassword], inputtext, false))
			{
	    		PaintballArenaSelection(playerid);
	    		SetPVarInt(playerid, "ArenaEnterPass", -1);
	    		SetPVarInt(playerid, "pbTeamChoice", 0);
	    		return 1;
			}
	        if(JoinPaintballArena(playerid,arenaid,inputtext))
	        {
	            SetPVarInt(playerid, "ArenaEnterPass", -1);
	        }
	        else
	        {
				PaintballArenaSelection(playerid);
				SetPVarInt(playerid, "pbTeamChoice", 0);
	        }
	    }
	    else
	    {
			PaintballArenaSelection(playerid);
			SetPVarInt(playerid, "pbTeamChoice", 0);
	    }
	}
	if(dialogid == PBSWITCHTEAM)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "IsInArena");
	        switch(listitem)
	        {
	        	case 0: // Red
 				{
 				    new teamlimit = PaintBallArena[arenaid][pbLimit]/2;
 				    if(PlayerInfo[playerid][pPaintTeam] == 1)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "You are already on the Red Team!");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTimeLeft] < 180)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "You can not switch teams now!");
						return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTeamRed] >= teamlimit)
 				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "Red Team is currently full, please choose another team.");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTeamRed] > PaintBallArena[arenaid][pbTeamBlue])
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "Teams would be un-even, you cannot switch teams right now.");
 				        return 1;
 				    }
 				    PaintBallArena[arenaid][pbTeamBlue]--;
 				    PaintBallArena[arenaid][pbTeamRed]++;
 				    PlayerInfo[playerid][pPaintTeam] = 1;
 				    SetPlayerHealth(playerid, 0);
	        	}
	        	case 1: // Blue
	        	{
	        	    new teamlimit = PaintBallArena[arenaid][pbLimit]/2;
	        	    if(PlayerInfo[playerid][pPaintTeam] == 2)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "You are already on the Blue Team!");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTimeLeft] < 180)
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "You can not switch teams now!");
						return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTeamBlue] >= teamlimit)
 				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "Blue Team is currently full, please choose another team.");
 				        PaintballSwitchTeam(playerid);
 				        return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTeamBlue] > PaintBallArena[arenaid][pbTeamRed])
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "Teams would be un-even, you cannot switch teams right now.");
 				        return 1;
 				    }
 				    PaintBallArena[arenaid][pbTeamRed]--;
 				    PaintBallArena[arenaid][pbTeamBlue]++;
 				    PlayerInfo[playerid][pPaintTeam] = 2;
 				    SetPlayerHealth(playerid, 0);
	        	}
			}
	    }
	}
	if(dialogid == PBJOINTEAM)
	{
	    if(response == 1)
	    {
	        new arenaid = GetPVarInt(playerid, "ArenaEnterTeam");
	        if(PaintBallArena[arenaid][pbPlayers] >= PaintBallArena[arenaid][pbLimit])
	        {
	            PaintballArenaSelection(playerid);
	            SetPVarInt(playerid, "ArenaEnterTeam", -1);
	            return 1;
	        }
	        switch(listitem)
	        {
	        	case 0: // Red
 				{
 				    new teamlimit = PaintBallArena[arenaid][pbLimit]/2;
 				    if(PaintBallArena[arenaid][pbTeamRed] >= teamlimit)
 				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "Red Team is currently full, please choose another team.");
 				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Team:","{FF0000}Red Team\n{0000FF}Blue Team","Enter","Leave");
 				        return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTeamRed] > PaintBallArena[arenaid][pbTeamBlue])
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "Teams are un-even, please choose another team.");
 				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Team:","{FF0000}Red Team\n{0000FF}Blue Team","Enter","Leave");
 				        return 1;
 				    }
 				    SetPVarInt(playerid, "pbTeamChoice", 1);
 				    if(strcmp(PaintBallArena[arenaid][pbPassword], "None", false))
					{
						SetPVarInt(playerid, "ArenaEnterPass", arenaid);
						ShowPlayerDialog(playerid,PBJOINPASSWORD,DIALOG_STYLE_INPUT,"Paintball Arena - Password:","This Arena is currently passworded, please enter the password:","Enter","Leave");
						return 1;
					}
					JoinPaintballArena(playerid, arenaid, "None");
	        	}
	        	case 1: // Blue
	        	{
	        	    new teamlimit = PaintBallArena[arenaid][pbLimit]/2;
 				    if(PaintBallArena[arenaid][pbTeamBlue] >= teamlimit)
 				    {
						SendClientMessageEx(playerid, COLOR_WHITE, "Blue Team is currently full, please choose another team.");
 				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Team:","{FF0000}Red Team\n{0000FF}Blue Team","Enter","Leave");
 				        return 1;
 				    }
 				    if(PaintBallArena[arenaid][pbTeamBlue] > PaintBallArena[arenaid][pbTeamRed])
 				    {
 				        SendClientMessageEx(playerid, COLOR_WHITE, "Teams are un-even, please choose another team.");
 				        ShowPlayerDialog(playerid,PBJOINTEAM,DIALOG_STYLE_LIST,"Paintball Arena - Choose a Team:","{FF0000}Red Team\n{0000FF}Blue Team","Enter","Leave");
 				        return 1;
 				    }
 				    SetPVarInt(playerid, "pbTeamChoice", 2);
 				    if(strcmp(PaintBallArena[arenaid][pbPassword], "None", false))
					{
						SetPVarInt(playerid, "ArenaEnterPass", arenaid);
						ShowPlayerDialog(playerid,PBJOINPASSWORD,DIALOG_STYLE_INPUT,"Paintball Arena - Password:","This Arena is currently passworded, please enter the password:","Enter","Leave");
						return 1;
					}
					JoinPaintballArena(playerid, arenaid, "None");
	        	}
			}
	    }
	    else
	    {
	        PaintballArenaSelection(playerid);
	    }
	}
	if(dialogid == DOORLOCK)
	{
		if(response == 1)
		{
		    new i = GetPVarInt(playerid, "Door");
		    if(isnull(inputtext))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "You did not enter anything" );
		        return 1;
		    }
		    if(strlen(inputtext) > 24)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "The password can not be greater than 24 characters.");
		        return 1;
		    }
		    if(strcmp(inputtext, DDoorsInfo[i][dPass], true) == 0)
		    {
		        if(DDoorsInfo[i][dLocked] == 0)
		        {
					DDoorsInfo[i][dLocked] = 1;
					SendClientMessageEx(playerid, COLOR_WHITE, "Password accepted, doors locked.");
		        }
		        else
		        {
		            DDoorsInfo[i][dLocked] = 0;
		            SendClientMessageEx(playerid, COLOR_WHITE, "Password accepted, doors unlocked.");
		        }
				SaveDynamicDoors();
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "Password declined.");
			}
		}
		else
		{
		    return 1;
		}
	}
	/*if(dialogid == STORAGEEQUIP)
	{
		if(response == 1)
		{
			if(StorageInfo[playerid][listitem][sAttached] == 0)
			{
				switch(listitem)
				{
					case 0: // Bag
					{
						if(StorageInfo[playerid][0][sStorage] != 1) {
							SendClientMessageEx(playerid, COLOR_WHITE, "You do not own a Bag, you can buy one at a 24/7 Store.");
							ShowStorageEquipDialog(playerid);
							return 1;
						}
						for(new i = 0; i < 3; i++)
						{
							if(StorageInfo[playerid][i][sAttached] == 1)
							{
								StorageInfo[playerid][i][sAttached] = 0;
								if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
							}
						}
						SetPlayerAttachedObject(playerid, 9, 2919, 5, 0.25, 0, 0, 0, 270, 0, 0.2, 0.2, 0.2);
						format(string, sizeof(string), "* %s takes out a Bag.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 1: // Backpack
					{
						if(StorageInfo[playerid][1][sStorage] != 1) {
							SendClientMessageEx(playerid, COLOR_WHITE, "You do not own a Backpack, you can buy one at our E-Store.");
							ShowStorageEquipDialog(playerid);
							return 1;
						}
						for(new i = 0; i < 3; i++)
						{
							if(StorageInfo[playerid][i][sAttached] == 1)
							{
								StorageInfo[playerid][i][sAttached] = 0;
								if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
							}
						}
						SetPlayerAttachedObject(playerid, 9, 371, 1, 0.1, -0.1, 0, 0, 90, 0, 1, 1, 1);
						format(string, sizeof(string), "* %s takes out a Backpack.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					case 2: // Briefcase
					{
						if(StorageInfo[playerid][2][sStorage] != 1) {
							SendClientMessageEx(playerid, COLOR_WHITE, "You do not own a Briefcase, you can buy one at our E-Store.");
							ShowStorageEquipDialog(playerid);
							return 1;
						}
						for(new i = 0; i < 3; i++)
						{
							if(StorageInfo[playerid][i][sAttached] == 1)
							{
								StorageInfo[playerid][i][sAttached] = 0;
								if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
							}
						}
						SetPlayerAttachedObject(playerid, 9, 1210, 5, 0.3, 0.0, 0.0, 0.0, 270.0, 180.0, 1, 1, 1);
						format(string, sizeof(string), "* %s takes out a Briefcase.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
				StorageInfo[playerid][listitem][sAttached] = 1;
			}
			else
			{
				StorageInfo[playerid][listitem][sAttached] = 0;
				if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
				format(string, sizeof(string), "* %s puts %s away.", GetPlayerNameEx(playerid), storagetype[listitem+1]);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			return 1;
		}
	}
	if(dialogid == STORAGESTORE)
	{
		if(response == 0)
		{
			if(GetPVarInt(playerid, "Storage_fromplayerid") != -1) {
				SendClientMessageEx(GetPVarInt(playerid, "Storage_fromplayerid"), COLOR_WHITE, "The transaction has been cancelled.");
			}

			DeletePVar(playerid, "Storage_transaction");
			DeletePVar(playerid, "Storage_fromplayerid");
			DeletePVar(playerid, "Storage_fromstorageid");
			DeletePVar(playerid, "Storage_itemid");
			DeletePVar(playerid, "Storage_amount");
			DeletePVar(playerid, "Storage_price");
			DeletePVar(playerid, "Storage_special");

			SendClientMessageEx(playerid, COLOR_WHITE, "You have cancelled the transaction.");
		}
		else
		{
			new fromplayerid, fromstorageid, itemid, amount, price, special, listitemex;

			fromplayerid = GetPVarInt(playerid, "Storage_fromplayerid");
			fromstorageid = GetPVarInt(playerid, "Storage_fromstorageid");
			itemid = GetPVarInt(playerid, "Storage_itemid");
			amount = GetPVarInt(playerid, "Storage_amount");
			price = GetPVarInt(playerid, "Storage_price");
			special = GetPVarInt(playerid, "Storage_special");

			DeletePVar(playerid, "Storage_transaction");
			DeletePVar(playerid, "Storage_fromplayerid");
			DeletePVar(playerid, "Storage_fromstorageid");
			DeletePVar(playerid, "Storage_itemid");
			DeletePVar(playerid, "Storage_amount");
			DeletePVar(playerid, "Storage_price");
			DeletePVar(playerid, "Storage_special");

			new bool:itemEquipped = false;
			if(listitem != 0) // If not the Pocket, then find the storage device
			{
				// Find the storageid of the storagedevice.
				for(new i = 0; i < 3; i++)
				{
					if(StorageInfo[playerid][i][sAttached] == 1) {
						listitemex = i+1;
						itemEquipped = true;
					}
				}
			}

			if(TransferStorage(playerid, listitemex, fromplayerid, fromstorageid, itemid, amount, price, special) == 0 || (itemEquipped == false && listitem != 0)) // Unsuccessful Transfer
			{
				ShowStorageDialog(playerid, fromplayerid, fromstorageid, itemid, amount, price, special);
			}
			else // Successful Transfer
			{
				if(fromplayerid != -1 && fromstorageid != -1 && price != -1) {
					if(playerid != fromplayerid) {
						PlayerPlaySound(fromplayerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "$%d has been transfered to your Pocket ($%d).", price, PlayerInfo[fromplayerid][pCash]);
						SendClientMessage(fromplayerid, COLOR_WHITE, string);

						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "$%d has been transfered from your Pocket to %s's Pocket.", price, GetPlayerNameEx(fromplayerid));
						SendClientMessage(playerid, COLOR_WHITE, string);

						format(string, sizeof(string), "* %s takes out some Cash, and hands it to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(fromplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}

					PlayerInfo[playerid][pCash] -= price;
					PlayerInfo[fromplayerid][pCash] += price;
				}

				if(special == 1 && itemid == 2) // Pot Special "Selling"
				{
					ExtortionTurfsWarsZone(PotOffer[playerid], 1, PotPrice[playerid]);

					if(PlayerInfo[PotOffer[playerid]][pDoubleEXP] > 0)
					{
						format(string, sizeof(string), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[PotOffer[playerid]][pDoubleEXP]);
						SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, string);
   						PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 2;
					}
					else
					{
  						PlayerInfo[PotOffer[playerid]][pDrugsSkill] += 1;
					}

                    if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 50)
                    { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                    else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 100)
                    { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                    else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 200)
                    { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                    else if(PlayerInfo[PotOffer[playerid]][pDrugsSkill] == 400)
                    { SendClientMessageEx(PotOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }

					PotOffer[playerid] = INVALID_PLAYER_ID;
					PotStorageID[playerid] = -1;
                    PotPrice[playerid] = 0;
                    PotGram[playerid] = 0;
				}
				if(special == 1 && itemid == 3) // Crack Special "Selling"
				{
					ExtortionTurfsWarsZone(CrackOffer[playerid], 1, CrackPrice[playerid]);

					if(PlayerInfo[CrackOffer[playerid]][pDoubleEXP] > 0)
					{
						format(string, sizeof(string), "You have gained 2 drug dealer skill points instead of 1. You have %d hours left on the Double EXP token.", PlayerInfo[CrackOffer[playerid]][pDoubleEXP]);
						SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, string);
   						PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 2;
					}
					else
					{
  						PlayerInfo[CrackOffer[playerid]][pDrugsSkill] += 1;
					}

                    PlayerInfo[playerid][pCrack] += CrackGram[playerid];
                    PlayerInfo[CrackOffer[playerid]][pCrack] -= CrackGram[playerid];
                    if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 50)
                    { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 2, you can buy more Grams and Cheaper."); }
                    else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 100)
					{ SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 3, you can buy more Grams and Cheaper."); }
                    else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 200)
                    { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 4, you can buy more Grams and Cheaper."); }
                    else if(PlayerInfo[CrackOffer[playerid]][pDrugsSkill] == 400)
                    { SendClientMessageEx(CrackOffer[playerid], COLOR_YELLOW, "* Your Drug Dealer Skill is now Level 5, you can buy more Grams and Cheaper."); }

					CrackOffer[playerid] = INVALID_PLAYER_ID;
					CrackStorageID[playerid] = -1;
                    CrackPrice[playerid] = 0;
                    CrackGram[playerid] = 0;
				}
				if(special == 2 && itemid == 2) // Pot Special "Getting"
				{
					new mypoint = -1;
					for (new i=0; i<MAX_POINTS; i++)
					{
						if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 3)
						{
							mypoint = i;
						}
					}

					if(PlayerInfo[playerid][pDonateRank] < 1)
					{
						Points[mypoint][Stock] -= amount;
						format(string, sizeof(string), " POT AVAILABLE: %d/1000.", Points[mypoint][Stock]);
						UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
					}
					for(new i = 0; i < sizeof(FamilyInfo); i++)
					{
						if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
						{
							FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
						}
					}
				}
				if(special == 2 && itemid == 3) // Crack Special "Getting"
				{
					new mypoint = -1;
					for (new i=0; i<MAX_POINTS; i++)
					{
						if (IsPlayerInRangeOfPoint(playerid, 3.0, Points[i][Pointx], Points[i][Pointy], Points[i][Pointz]) && Points[i][Type] == 4)
						{
							mypoint = i;
						}
					}
					if(PlayerInfo[playerid][pDonateRank] < 1)
					{
						Points[mypoint][Stock] -= amount;
						format(string, sizeof(string), " CRACK AVAILABLE: %d/500.", Points[mypoint][Stock]);
						UpdateDynamic3DTextLabelText(Points[mypoint][TextLabel], COLOR_YELLOW, string);
					}
					for(new i = 0; i < sizeof(FamilyInfo); i++)
					{
						if(strcmp(Points[mypoint][Owner], FamilyInfo[i][FamilyName], true) == 0)
						{
							FamilyInfo[i][FamilyBank] = FamilyInfo[i][FamilyBank]+price/2;
						}
					}
				}
				if(special == 2 && itemid == 4) // Materials Special "Getting"
				{
					DeletePVar(playerid, "Packages");
					DeletePVar(playerid, "MatDeliver");
					DisablePlayerCheckpoint(playerid);
				}
				if(special == 3 && itemid == 2) // PickWeed Special
				{

					new id = GetPVarInt(playerid, "Special_PickWeedID");
					DeletePVar(playerid, "Special_PickWeedID");

					new szMessage[52];

					ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out", 4.0, 0, 0, 0, 0, 0, 1);
					format(szMessage, sizeof(szMessage), "You picked the plant and gathered %d grams of pot.", PlayerInfo[id][pWeedGrowth]);
					SendClientMessageEx(playerid, COLOR_GREY, szMessage);
					format(szMessage, sizeof(szMessage), "* %s picks the weed plant.", GetPlayerNameEx(playerid));
					ProxDetector(25.0, playerid, szMessage, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					DestroyDynamicObject(PlayerInfo[id][pWeedObject]);
					PlayerInfo[id][pWeedObject] = 0;
				}
				if(special == 4 && itemid == 1) // House Withdraw - Cash
				{
					new houseid = GetPVarInt(playerid, "Special_HouseID");
					DeletePVar(playerid, "Special_HouseID");

					HouseInfo[houseid][hSafeMoney] -= amount;
				}
				if(special == 4 && itemid == 2) // House Withdraw - Pot
				{
					new houseid = GetPVarInt(playerid, "Special_HouseID");
					DeletePVar(playerid, "Special_HouseID");

					HouseInfo[houseid][hPot] -= amount;
				}
				if(special == 4 && itemid == 3) // House Withdraw - Crack
				{
					new houseid = GetPVarInt(playerid, "Special_HouseID");
					DeletePVar(playerid, "Special_HouseID");

					HouseInfo[houseid][hCrack] -= amount;
				}
				if(special == 4 && itemid == 4) // House Withdraw - Mats
				{
					new houseid = GetPVarInt(playerid, "Special_HouseID");
					DeletePVar(playerid, "Special_HouseID");

					HouseInfo[houseid][hMaterials] -= amount;
				}
				if(special == 5 && itemid == 1) // Family Safe Withdraw - Cash
				{
					new family = GetPVarInt(playerid, "Special_FamilyID");
					DeletePVar(playerid, "Special_FamilyID");

					FamilyInfo[family][FamilyCash] -= amount;
				}
				if(special == 5 && itemid == 2) // Family Safe Withdraw - Pot
				{
					new family = GetPVarInt(playerid, "Special_FamilyID");
					DeletePVar(playerid, "Special_FamilyID");

					FamilyInfo[family][FamilyPot] -= amount;
				}
				if(special == 5 && itemid == 3) // Family Safe Withdraw - Crack
				{
					new family = GetPVarInt(playerid, "Special_FamilyID");
					DeletePVar(playerid, "Special_FamilyID");

					FamilyInfo[family][FamilyCrack] -= amount;
				}
				if(special == 5 && itemid == 4) // Family Safe Withdraw - Materials
				{
					new family = GetPVarInt(playerid, "Special_FamilyID");
					DeletePVar(playerid, "Special_FamilyID");

					FamilyInfo[family][FamilyMats] -= amount;
				}
			}
		}
		return 1;
	}*/
	if(dialogid == MAINMENU || dialogid == MAINMENU2)
	{
		if(response == 0)
		{
			SendClientMessage(playerid, COLOR_RED, "{FF8000}Server{FFFFFF}: You have been kicked out automatically.");
			KickWithMessage(playerid);
		}
		else if(dialogid == MAINMENU)
		{
			if(!isnull(inputtext) && strlen(inputtext) < 64)
			{
				SetPVarString(playerid, "PassAuth", inputtext);
				g_mysql_AccountLoginCheck(playerid);
			}
			else
			{
				ShowMainMenuDialog(playerid, 1);
			}
		}
		else if(dialogid == MAINMENU2)
		{
			if(!isnull(inputtext) && strlen(inputtext) < 64)
			{
				SetPVarString(playerid, "PassAuth", inputtext);
				g_mysql_CreateAccount(playerid, inputtext);
			}
		}
		return 1;
	}
	if(dialogid == MAINMENU3)
	{
		KickWithMessage(playerid);
	}
	if (dialogid == ELEVATOR3 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPosEx(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, 1568.6676, -1689.9708, 6.2188);
		 	SetPlayerInterior(playerid, 0);
		 	PlayerInfo[playerid][pVW] = 0;
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR && response)
    {
		if (listitem == 0)
		{
			SetPlayerPosEx(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pVW] = 133337;
			SetPlayerVirtualWorld(playerid, 133337);
		}
		else
		{
			SetPlayerPosEx(playerid, 1568.6676, -1689.9708, 6.2188);
			SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	if (dialogid == ELEVATOR2 && response)
    {
		if (listitem == 0)
		{
			SetPlayerPosEx(playerid, 1564.8, -1666.2, 28.3);
			SetPlayerInterior(playerid, 0);
			PlayerInfo[playerid][pVW] = 0;
			SetPlayerVirtualWorld(playerid, 0);
		}
		else
		{
			SetPlayerPosEx(playerid, 276.0980, 122.1232, 1004.6172);
			SetPlayerInterior(playerid, 10);
			PlayerInfo[playerid][pVW] = 133337;
			SetPlayerVirtualWorld(playerid, 133337);
		}
	}
	if(dialogid == VIPNUMMENU)
	{
 		if(response)
		{
			if(listitem == 0) //-2 digit
			{
				ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
			}
			if(listitem == 1) // -3 digit
			{
				ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
			}
			if(listitem == 2) // -4+ digit
			{
				ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
			}
		}
	}
	if(dialogid == VIPNUMMENU2)
    {
		if(response)
		    {
		        if(strval(inputtext) == 0) {ShowPlayerDialog(playerid, VIPNUMMENU3, DIALOG_STYLE_MSGBOX, "Error","You typed an invalid string. Click ok to try again.", "Ok", "Cancel"); return 0;}
				new checkmon = GetPlayerCash(playerid);
				new tempmon = GetPlayerCash(playerid);
				new numberstr = 0 - strval(inputtext);
				if(numberstr > 0) {
				    SendClientMessageEx(playerid, COLOR_GREY, "You can't get a positive phone number from here.");
				    return 1;
				}
				if(strlen(inputtext) == 2)
				{
					checkmon = checkmon * 30/100;
					if(checkmon >= 300000)
					{
						if(PlayerInfo[playerid][pPnumber] != numberstr)
					    {
							new query[128];
							SetPVarInt(playerid, "WantedPh", numberstr);
							SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
							SetPVarInt(playerid, "PhChangeCost", 300000);
							format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",numberstr);
							mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 1);
					        return 1;
						}
					 	else
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	 				}
	 				else if(tempmon < 300000)
	 				{
	 				    SendClientMessageEx(playerid,COLOR_GREY," You did not have enough money to purchase a -2 digit number, try again.");
	 				    return 1;
	  				}
	  				else
	 				{
						if(PlayerInfo[playerid][pPnumber] != numberstr)
					    {
							new query[128];
							SetPVarInt(playerid, "WantedPh", numberstr);
							SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
							SetPVarInt(playerid, "PhChangeCost", 300000);
							format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",numberstr);
							mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 1);
					        return 1;
						}
					 	else
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				}
				}
				if(strlen(inputtext) == 3)
				{
					checkmon = checkmon * 20/100;
					if(checkmon >= 200000)
					{
						if(PlayerInfo[playerid][pPnumber] != numberstr)
					    {
							new query[128];
							SetPVarInt(playerid, "WantedPh", numberstr);
							SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
							SetPVarInt(playerid, "PhChangeCost", checkmon);
							format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",numberstr);
							mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 1);
					        return 1;
						}
					 	else
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	 				}
	 				else if(tempmon < 200000)
	 				{
	 				    SendClientMessageEx(playerid,COLOR_GREY," You did not have enough money to purchase a -3 digit number, try again.");
	 				    return 1;
	  				}
	  				else
	 				{
						if(PlayerInfo[playerid][pPnumber] != numberstr)
					    {
							new query[128];
							SetPVarInt(playerid, "WantedPh", numberstr);
							SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
							SetPVarInt(playerid, "PhChangeCost", 200000);
							format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",numberstr);
							mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 1);
					        return 1;
						}
					 	else
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				}
				}
				if(strlen(inputtext) >= 4 && strlen(inputtext) <=7)
				{
					checkmon = checkmon * 10/100;
					if(checkmon >= 50000)
					{
						if(PlayerInfo[playerid][pPnumber] != numberstr)
					    {
							new query[128];
							SetPVarInt(playerid, "WantedPh", numberstr);
							SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
							SetPVarInt(playerid, "PhChangeCost", checkmon);
							format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",numberstr);
							mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 1);
					        return 1;
						}
					 	else
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	 				}
	 				else if(tempmon < 50000)
	 				{
	 				    SendClientMessageEx(playerid,COLOR_GREY," You did not have enough money to purchase a -4+ digit number, try again.");
	 				    return 1;
	  				}
	  				else
	 				{
						if(PlayerInfo[playerid][pPnumber] != numberstr)
					    {
							new query[128];
							SetPVarInt(playerid, "WantedPh", numberstr);
							SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
							SetPVarInt(playerid, "PhChangeCost", 50000);
							format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",numberstr);
							mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "i", playerid);
					        return 1;
						}
					 	else
						{
						    SendClientMessageEx(playerid,COLOR_GREY," Cannot change to your existing number");
						    return 1;
						}
	  				}
				}
				SendClientMessageEx(playerid,COLOR_GREY," Was unable to change your number.");
			}
		if(!response)
		{
		    SendClientMessageEx(playerid,COLOR_GREY," You chose not to change numbers.");
		}

	}
	if(dialogid == VIPNUMMENU3)
    {
		if(response)
		    {
		        ShowPlayerDialog(playerid, VIPNUMMENU2, DIALOG_STYLE_INPUT, "New Phone Number","Just enter the number without a -:", "Change", "Cancel");
			}
		if(!response)
		{
		    SendClientMessageEx(playerid,COLOR_GREY," You chose not to change numbers.");
		}

	}
	/*if(dialogid == RENTMENU)
    {
		if(response)
		    {
		     	switch(listitem)
		        	{
			        case 0://15 Minutes
						{
							if(GetPlayerCash(playerid) < 1000)
								{
								    SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have enough money!");
								    RemovePlayerFromVehicle(playerid);
								    new Float:slx, Float:sly, Float:slz;
									GetPlayerPos(playerid, slx, sly, slz);
									SetPlayerPosEx(playerid, slx, sly, slz+1.2);
								    TogglePlayerControllable(playerid,1);
								}
							else
								{
								    GivePlayerCash(playerid,-1000);
								    gBike[playerid] = 3;
								    gBikeRenting[playerid] = 1;
								    TogglePlayerControllable(playerid, 1);
								    SendClientMessageEx(playerid,COLOR_GREY," You have rented a bike for 15 minutes, enjoy!");
								    SetPVarInt(playerid, "RentTime", SetTimerEx("RentTimer", (1000*60)*15, true, "d", playerid));
							    }
						}
					case 1: // 30 minutes
						{
						   if(GetPlayerCash(playerid) < 2000)
								{
								    SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have enough money!");
								    RemovePlayerFromVehicle(playerid);
								    new Float:slx, Float:sly, Float:slz;
									GetPlayerPos(playerid, slx, sly, slz);
									SetPlayerPosEx(playerid, slx, sly, slz+1.2);
								    TogglePlayerControllable(playerid,1);
								}
							else
							{
							    GivePlayerCash(playerid,-2000);
							    gBike[playerid] = 6;
							    gBikeRenting[playerid] = 1;
							    TogglePlayerControllable(playerid, 1);
							    SendClientMessageEx(playerid,COLOR_GREY," You have rented a bike for 30 minutes, enjoy!");
							    SetPVarInt(playerid, "RentTime", SetTimerEx("RentTimer", (1000*60)*30, true, "d", playerid));
						    }
						}
					case 2: // 1 hour
						{
						    if(GetPlayerCash(playerid) < 4000)
								{
								    SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have enough money!");
								    RemovePlayerFromVehicle(playerid);
								    new Float:slx, Float:sly, Float:slz;
									GetPlayerPos(playerid, slx, sly, slz);
									SetPlayerPosEx(playerid, slx, sly, slz+1.2);
								    TogglePlayerControllable(playerid,1);
								}
							else
							{
							    GivePlayerCash(playerid,-4000);
							    gBike[playerid] = 12;
							    gBikeRenting[playerid] = 1;
							    TogglePlayerControllable(playerid, 1);
							    SendClientMessageEx(playerid,COLOR_GREY," You have rented a bike for an hour, enjoy!");
							    SetPVarInt(playerid, "RentTime", SetTimerEx("RentTimer", (1000*60)*60, true, "d", playerid));
						    }
						}
					}
			}
		if(!response)
		{
		    RemovePlayerFromVehicle(playerid);
		    new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPosEx(playerid, slx, sly, slz+1.2);
		    TogglePlayerControllable(playerid,1);
		    SendClientMessageEx(playerid,COLOR_GREY," You may only use these bikes if you rent one.");
		}

	}*/
	if(dialogid == DIALOG_SAPA)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					format(string, sizeof(string), "* %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(playerid);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, 299);
					PlayerInfo[playerid][pModel] = 299;
	            }
	            else
	            {
	                if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

					format(string, sizeof(string), "* %s withdraws their badge and gun from their locker.",GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				SetPlayerColor(playerid, COLOR_SAPA);
					SetPlayerArmour(playerid, 100.0);
	   				GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SAPA_WEAPONS, DIALOG_STYLE_LIST, "SA:PA: Equipment", "Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Proceed", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SAPA_CLOTHING, DIALOG_STYLE_LIST, "SA:PA: Clothing Selection", "Duty Clothes\nOff-Duty Clothing", "Proceed", "Cancel");
	        }
	        case 3:
	        {
                ShowPlayerDialog(playerid, DUTYMENU5, DIALOG_STYLE_INPUT,"SA:PA: Clear Suspect", "Who would you like to clear?","Clear", "Cancel");
	        }
	    }
	}
	if(dialogid == DIALOG_SAPA_WEAPONS)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

			if(listitem == 0) // Mace
			{
				GivePlayerValidWeapon(playerid, 41, 60000);
				Tax -= 20;
			}
			else if(listitem == 1) // Nite Stick
			{
				GivePlayerValidWeapon(playerid, 3, 60000);
				Tax -= 20;
			}
			else if(listitem == 2) //  Deagle
			{
				GivePlayerValidWeapon(playerid, 24, 60000);
				Tax -= 500;
			}
			else if(listitem == 3) // Spas12 *
			{
			    if(PlayerInfo[playerid][pRank] >= 1)
			    {
					GivePlayerValidWeapon(playerid, 27, 60000);
					Tax -= 10000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be Rank 2+ to obtain this weapon.");
				}
			}
			else if(listitem == 4) //  mp5
			{
				GivePlayerValidWeapon(playerid, 29, 60000);
				Tax -= 400;
			}
			else if(listitem == 5) //  m4 *
			{
				GivePlayerValidWeapon(playerid, 31, 60000);
				Tax -= 4000;
			}
			else if(listitem == 6) //  ak-47 *
			{
				if(PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 30, 60000);
					Tax -= 4000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be Rank 3+ to obtain this weapon.");
				}
			}
			else if(listitem == 7) //  Smoke Bomb *
			{
				if(PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 17, 5);
					Tax -= 800;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be Rank 3+ to obtain this weapon.");
				}
			}
			else if(listitem == 8) //  Shotgun
			{
				GivePlayerValidWeapon(playerid, 25, 60000);
                Tax -= 200;
			}
			else if(listitem == 9) // rifle
			{
				GivePlayerValidWeapon(playerid, 33, 60000);
				Tax -= 1000;
			}
			else if(listitem == 10) // Sniper *
			{
				if(PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 34, 60000);
					Tax -= 10000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be Rank 3+ to obtain this weapon.");
				}
			}
			else if(listitem == 11) // LSPD Kevlar
			{
				SetPlayerArmour(playerid, 100.0);
				Tax -= 2000;
			}
			else if(listitem == 12) SetPlayerHealth(playerid, 100);
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
		}
	}
	if(dialogid == DIALOG_SAPA_CLOTHING)
	{
	    switch(listitem)
	    {
	        case 0: ShowPlayerDialog(playerid, DIALOG_SAPA_CLOTHING_TWO, DIALOG_STYLE_LIST, "SA:PA: Duty Clothing", "MP5 Duty\nNormal Duty\nSergeant\nLieutenant\nHigh Command", "Proceed", "Cancel");
	        case 1: ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
	    }
	}
	if(dialogid == DIALOG_SAPA_CLOTHING_TWO)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
				PlayerInfo[playerid][pModel] = 71;
				SetPlayerSkin(playerid, 71);
	        }
	        case 1:
	        {
				PlayerInfo[playerid][pModel] = 287;
				SetPlayerSkin(playerid, 287);
	        }
	        case 2:
	        {
				PlayerInfo[playerid][pModel] = 282;
				SetPlayerSkin(playerid, 282);
	        }
	        case 3:
	        {
				PlayerInfo[playerid][pModel] = 283;
				SetPlayerSkin(playerid, 283);
	        }
	        case 4:
	        {
			    if(PlayerInfo[playerid][pRank] >= 5)
			    {
					SetPlayerSkin(playerid, 285);
					PlayerInfo[playerid][pModel] = 285;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "Only ranks 5 and 6 can wear this uniform.");
				}
			}
	    }
	}
	if(dialogid == DIALOG_SFPD)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					format(string, sizeof(string), "* %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(playerid);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
	            }
	            else
	            {
	                if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

					format(string, sizeof(string), "* %s withdraws their badge and gun from their locker.",GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				SetPlayerColor(playerid, TEAM_SFPD);
					SetPlayerArmour(playerid, 100.0);
	   				GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SFPD_WEAPONS, DIALOG_STYLE_LIST, "SFPD: Equipment", "Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Proceed", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SFPD_CLOTHING, DIALOG_STYLE_LIST, "SFPD: Clothing Selection", "Duty Clothes\nOff-Duty Clothing", "Proceed", "Cancel");
	        }
	        case 3:
	        {
                ShowPlayerDialog(playerid, DUTYMENU5, DIALOG_STYLE_INPUT,"SFPD: Clear Suspect", "Who would you like to clear?","Clear", "Cancel");
	        }
	    }
	}
	if(dialogid == DIALOG_SFPD_WEAPONS)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

			if(listitem == 0) // Mace
			{
				GivePlayerValidWeapon(playerid, 41, 60000);
				Tax -= 20;
			}
			else if(listitem == 1) // Nite Stick
			{
				GivePlayerValidWeapon(playerid, 3, 60000);
				Tax -= 20;
			}
			else if(listitem == 2) //  Deagle
			{
				GivePlayerValidWeapon(playerid, 24, 60000);
				Tax -= 500;
			}
			else if(listitem == 3) // Spas12 *
			{
			    if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 4 || PlayerInfo[playerid][pRank] >= 1)
			    {
					GivePlayerValidWeapon(playerid, 27, 60000);
					Tax -= 10000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the EP or SIU division, or at least rank 1.");
				}
			}
			else if(listitem == 4) //  mp5
			{
				GivePlayerValidWeapon(playerid, 29, 60000);
				Tax -= 400;
			}
			else if(listitem == 5) //  m4 *
			{
				GivePlayerValidWeapon(playerid, 31, 60000);
				Tax -= 4000;
			}
			else if(listitem == 6) //  ak-47 *
			{
				if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 4 || PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 30, 60000);
					Tax -= 4000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the EP or SIU division, or at least rank 3.");
				}
			}
			else if(listitem == 7) //  Smoke Bomb *
			{
				if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 4 || PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 17, 5);
					Tax -= 800;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the EP or SIU division, or at least rank 3.");
				}
			}
			else if(listitem == 8) //  Shotgun
			{
				GivePlayerValidWeapon(playerid, 25, 60000);
                Tax -= 200;
			}
			else if(listitem == 9) // rifle
			{
				GivePlayerValidWeapon(playerid, 33, 60000);
				Tax -= 1000;
			}
			else if(listitem == 10) // Sniper *
			{
				if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 4 || PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 34, 60000);
					Tax -= 10000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the EP or SIU division, or at least rank 3.");
				}
			}
			else if(listitem == 11) // LSPD Kevlar
			{
				SetPlayerArmour(playerid, 100.0);
				Tax -= 2000;
			}
			else if(listitem == 12) SetPlayerHealth(playerid, 100);
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
		}
	}
	if(dialogid == DIALOG_SFPD_CLOTHING)
	{
	    switch(listitem)
	    {
	        case 0: ShowPlayerDialog(playerid, DIALOG_SFPD_CLOTHING_TWO, DIALOG_STYLE_LIST, "SFPD: Duty Clothing", "Cadet\nOfficer #1 (Black)\nOfficer #2 (Black)\nOfficer #3 (Black)\nOfficer #4 (Black)\nOfficer #5 (Black)\nFemale #1\nFemale #2\nMotorcycle\nERT\nSenior #1\nLow Command\nHigh Command", "Proceed", "Cancel");
	        case 1: ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
	    }
	}
	if(dialogid == DIALOG_SFPD_CLOTHING_TWO)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
				PlayerInfo[playerid][pModel] = 71;
				SetPlayerSkin(playerid, 71);
	        }
	        case 1:
	        {
				PlayerInfo[playerid][pModel] = 280;
				SetPlayerSkin(playerid, 280);
	        }
	        case 2:
	        {
				PlayerInfo[playerid][pModel] = 281;
				SetPlayerSkin(playerid, 281);
	        }
	        case 3:
	        {
				PlayerInfo[playerid][pModel] = 265;
				SetPlayerSkin(playerid, 265);
	        }
	        case 4:
	        {
				PlayerInfo[playerid][pModel] = 266;
				SetPlayerSkin(playerid, 266);
	        }
	        case 5:
	        {
	            PlayerInfo[playerid][pModel] = 267;
	            SetPlayerSkin(playerid, 267);
	        }
	        case 6:
	        {
	            PlayerInfo[playerid][pModel] = 141;
	            SetPlayerSkin(playerid, 141);
	        }
	        case 7:
	        {
	            PlayerInfo[playerid][pModel] = 150;
	            SetPlayerSkin(playerid, 150);
	        }
	        case 8:
	        {
	            PlayerInfo[playerid][pModel] = 284;
	            SetPlayerSkin(playerid, 284);
	        }
	        case 9:
	        {
	            PlayerInfo[playerid][pModel] = 285;
	            SetPlayerSkin(playerid, 285);
	        }
	        case 10:
	        {
	            PlayerInfo[playerid][pModel] = 282;
	            SetPlayerSkin(playerid, 282);
	        }
	        case 11:
	        {
	            PlayerInfo[playerid][pModel] = 288;
	            SetPlayerSkin(playerid, 288);
	        }
	        case 12:
	        {
	            PlayerInfo[playerid][pModel] = 283;
	            SetPlayerSkin(playerid, 283);
	        }
	    }
	}
	if(dialogid == DIALOG_SANEWS)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					format(string, sizeof(string), "* %s places their camera in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
	            }
	            else
	            {
					format(string, sizeof(string), "* %s withdraws their camera from their locker.",GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				SetPlayerColor(playerid, TEAM_NEWS_COLOR);
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
					GivePlayerValidWeapon(playerid, 43, 60000);
				}
	        }
	        case 1:
	        {
                GivePlayerValidWeapon(playerid, 43, 60000);
			}
			case 2:
			{
				GivePlayerCash(playerid, -2000);
				SetPlayerArmour(playerid, 100);
			}
			case 3: SetPlayerHealth(playerid, 100);
			case 4:
			{
			    if(GetPlayerCash(playerid) >= 1000)
			    {
			    	GivePlayerCash(playerid, -1000);
			    	GivePlayerValidWeapon(playerid, 22, 60000);
			    	SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a 9mm!");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
			}
			case 5: // Deagle
			{
				if(GetPlayerCash(playerid) >= 5000)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -5000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a deagle!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			case 6: // Shotgun
			{
				if(GetPlayerCash(playerid) >= 1500)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -1500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a shotgun!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that weapon!");
				}
			}
			case 7: ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Skin Selection","Choose a skin (by ID).", "Select", "Cancel");
		}
	}
	if(dialogid == DIALOG_TAXI)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					format(string, sizeof(string), "* %s places their equipment in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					PlayerInfo[playerid][pDuty] = 0;
	            }
	            else
	            {
					format(string, sizeof(string), "* %s withdraws their equipment from their locker.",GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				SetPlayerColor(playerid, COLOR_TAXI);
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
                ShowPlayerDialog(playerid, DIALOG_TAXIEQUIPMENT, DIALOG_STYLE_LIST, "Taxi Company: Lockers Equipment", "Desert Eagle\nKevlar Vest\nFirst Aid Kit", "Proceed", "Cancel");
			}
		}
	}
	if(dialogid == DIALOG_TAXIEQUIPMENT)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0: // Desert Eagle
	        {
	            GivePlayerValidWeapon(playerid, 24, 99999);
				Tax -= 500;
	        }
	        case 1: // Armor
	        {
	            SetPlayerArmour(playerid, 100);
				Tax -= 2000;
	        }
	        case 2: // First Aid
	        {
	            SetPlayerHealth(playerid, 100);
	        }
		}
	}
	if(dialogid == DIALOG_SASD)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0:
	        {
	            if(PlayerInfo[playerid][pDuty] == 1)
	            {
					format(string, sizeof(string), "* %s places their badge and gun in their locker.",GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(playerid);
				 	OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
	            }
	            else
	            {
					format(string, sizeof(string), "* %s withdraws their badge and gun from their locker.",GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
     				SetPlayerColor(playerid, TEAM_SASD);
					SetPlayerArmour(playerid, 100.0);
	   				GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
				 	OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SASD_WEAPONS, DIALOG_STYLE_LIST, "SASD: Equipment", "Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Proceed", "Cancel");
	        }
	        case 2:
	        {
	            ShowPlayerDialog(playerid, DIALOG_SASD_CLOTHING, DIALOG_STYLE_LIST, "SASD: Clothing Selection", "Duty Clothes\nOff-Duty Clothing", "Proceed", "Cancel");
	        }
	        case 3:
	        {
                ShowPlayerDialog(playerid, DUTYMENU5, DIALOG_STYLE_INPUT,"SASD: Clear Suspect", "Who would you like to clear?","Clear", "Cancel");
	        }
	    }
	}
	if(dialogid == DIALOG_SASD_WEAPONS)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			if(listitem == 0) // Mace
			{
				GivePlayerValidWeapon(playerid, 41, 60000);
				Tax -= 20;
			}
			else if(listitem == 1) // Nite Stick
			{
				GivePlayerValidWeapon(playerid, 3, 60000);
				Tax -= 20;
			}
			else if(listitem == 2) //  Deagle
			{
				GivePlayerValidWeapon(playerid, 24, 60000);
				Tax -= 500;
			}
			else if(listitem == 3) // Spas12 *
			{
				GivePlayerValidWeapon(playerid, 27, 60000);
				Tax -= 10000;
			}
			else if(listitem == 4) //  mp5
			{
				GivePlayerValidWeapon(playerid, 29, 60000);
				Tax -= 400;
			}
			else if(listitem == 5) //  m4 *
			{
				GivePlayerValidWeapon(playerid, 31, 60000);
				Tax -= 4000;
			}
			else if(listitem == 6) //  ak-47 *
			{
				GivePlayerValidWeapon(playerid, 30, 60000);
				Tax -= 4000;
			}
			else if(listitem == 7) //  Smoke Bomb *
			{
				GivePlayerValidWeapon(playerid, 17, 5);
				Tax -= 800;
			}
			else if(listitem == 8) //  Shotgun
			{
				GivePlayerValidWeapon(playerid, 25, 60000);
                Tax -= 200;
			}
			else if(listitem == 9) // rifle
			{
				GivePlayerValidWeapon(playerid, 33, 60000);
				Tax -= 1000;
			}
			else if(listitem == 10) // Sniper *
			{
				GivePlayerValidWeapon(playerid, 34, 60000);
				Tax -= 10000;
			}
			else if(listitem == 11) // LSPD Kevlar
			{
				SetPlayerArmour(playerid, 100.0);
				Tax -= 2000;
			}
			else if(listitem == 12) SetPlayerHealth(playerid, 100);
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );

		}
	}
	if(dialogid == DIALOG_SASD_CLOTHING)
	{
	    switch(listitem)
	    {
	        case 0: ShowPlayerDialog(playerid, DIALOG_SASD_CLOTHING_TWO, DIALOG_STYLE_LIST, "SASD: Duty Clothing", \
			"Deputy Class A #1\n \
			Deputy Class A #2\n \
			Deputy Class B #1\n \
			Deputy Class B #2\n \
			Supervisor Class A\n \
			Command Class A #1\n \
			Command Class A #2\n \
			TET\n \
			SORT\n \
			Command Staff\n \
			Sheriff",
			"Proceed", "Cancel");
	        case 1: ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
	    }
	}
	if(dialogid == DIALOG_SASD_CLOTHING_TWO)
	{
	    switch(listitem)
	    {
	        case 0:
	        {
				PlayerInfo[playerid][pModel] = 280;
				SetPlayerSkin(playerid, 280);
	        }
	        case 1:
	        {
				PlayerInfo[playerid][pModel] = 281;
				SetPlayerSkin(playerid, 281);
	        }
	        case 2:
	        {
				PlayerInfo[playerid][pModel] = 282;
				SetPlayerSkin(playerid, 282);
	        }
	        case 3:
	        {
				PlayerInfo[playerid][pModel] = 288;
				SetPlayerSkin(playerid, 288);
	        }
	        case 4:
	        {
				PlayerInfo[playerid][pModel] = 283;
				SetPlayerSkin(playerid, 283);
	        }
	        case 5:
	        {
				PlayerInfo[playerid][pModel] = 266;
				SetPlayerSkin(playerid, 266);
	        }
	        case 6:
	        {
				PlayerInfo[playerid][pModel] = 267;
				SetPlayerSkin(playerid, 267);
	        }
	        case 7:
	        {
				PlayerInfo[playerid][pModel] = 284;
				SetPlayerSkin(playerid, 284);
	        }
	        case 8:
	        {
				PlayerInfo[playerid][pModel] = 285;
				SetPlayerSkin(playerid, 285);
	        }
	        case 9:
	        {
				PlayerInfo[playerid][pModel] = 165;
				SetPlayerSkin(playerid, 165);
	        }
	        case 10:
	        {
				PlayerInfo[playerid][pModel] = 166;
				SetPlayerSkin(playerid, 166);
	        }

	    }
	}
	if(dialogid == 1348)
	{
	    if(response)
	    {
			new
				Float: carPosF[3],
				miscid = GetPVarInt(playerid, "playeraffectedcarTP"),
				v = ListItemTrackId[playerid][listitem];
	        GetVehiclePos(PlayerVehicleInfo[miscid][v][pvId], carPosF[0], carPosF[1], carPosF[2]);
	        SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[miscid][v][pvId]));
	        SetPlayerPosEx(playerid, carPosF[0], carPosF[1], carPosF[2]);
		}
	}
	if(dialogid == GOTOPLAYERCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_PLAYERVEHICLES; i++)
	        {
	            if(listitem == i)
	            {
					new Float: carPos[3], id = GetPVarInt(playerid, "playeraffectedcarTP");
					if(PlayerVehicleInfo[id][i][pvId] > INVALID_PLAYER_VEHICLE_ID)
					{
						GetVehiclePos(PlayerVehicleInfo[id][i][pvId], carPos[0], carPos[1], carPos[2]);
						SetPlayerVirtualWorld(playerid,GetVehicleVirtualWorld(PlayerVehicleInfo[id][i][pvId]));
						SetPlayerInterior(playerid,0);
						SetPlayerPosEx(playerid, carPos[0], carPos[1], carPos[2]);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "You can not teleport to an empty, disabled or impounded slot.");
					}
				}
			}
	    }
	}
	/*if(dialogid == GVEHICLESTORAGE && response) {
	    new f=PlayerInfo[playerid][pFMember];
 		if(FamilyVehicleInfo[f][listitem][fvSpawned]) {

			new
				iVehicleID = FamilyVehicleInfo[f][listitem][fvId];

			if((!IsVehicleOccupied(iVehicleID) || IsPlayerInVehicle(playerid, iVehicleID)) && !IsVehicleInTow(iVehicleID)) {

				new
					Float: vehiclehealth;

				GetVehicleHealth(iVehicleID, vehiclehealth);

				if(vehiclehealth < 800) {
					SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle is too damaged to be stored.");
				}
				else {
				    if(LockStatus[FamilyVehicleInfo[f][listitem][fvId]] != 0) LockStatus[FamilyVehicleInfo[f][listitem][fvId]] = 0;
					DestroyVehicle(FamilyVehicleInfo[f][listitem][fvId]);
					VehicleFuel[FamilyVehicleInfo[f][listitem][fvId]] = 100.0;
					FamilyVehicleInfo[f][listitem][fvId] = INVALID_VEHICLE_ID;
					FamilyVehicleInfo[f][listitem][fvSpawned] = 0;

					new vstring[128];
					format(vstring, sizeof(vstring), "You have stored your families %s. The vehicle has been despawned.", VehicleName[FamilyVehicleInfo[f][listitem][fvModelId] - 400]);
					SendClientMessageEx(playerid, COLOR_WHITE, vstring);
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle is currently occupied - it cannot be despawned right now.");
		}
		else if(FamilyVehicleInfo[f][listitem][fvImpounded]) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You can not spawn an impounded vehicle. If you wish to reclaim it, do so at the DMV in Dillimore.");
		}
		else if(!FamilyVehicleInfo[f][listitem][fvSpawned]) {

			new iVeh = CreateVehicleEx(FamilyVehicleInfo[f][listitem][fvModelId], FamilyVehicleInfo[f][listitem][fvSpawnx], FamilyVehicleInfo[f][listitem][fvSpawny], FamilyVehicleInfo[f][listitem][fvSpawnz], FamilyVehicleInfo[f][listitem][fvSpawna],FamilyVehicleInfo[f][listitem][fvColor1], FamilyVehicleInfo[f][listitem][fvColor2], -1);
			VehicleSpawned[playerid]++;
			FamilyVehicleInfo[f][listitem][fvId] = iVeh;
			VehicleFuel[iVeh] = FamilyVehicleInfo[f][listitem][fvFuel];
			FamilyVehicleInfo[f][listitem][fvSpawned] = 1;
			if(VehicleFuel[iVeh] == 0) VehicleFuel[iVeh] = 100.0;
			if(FamilyVehicleInfo[f][listitem][fvLocked] == 1) LockGangVehicle(f, FamilyVehicleInfo[f][listitem][fvId], FamilyVehicleInfo[f][listitem][fvLock]);


			new vstring[128];
			format(vstring, sizeof(vstring), "You have taken your families %s out of storage. The vehicle has been spawned at the last parking location.", VehicleName[FamilyVehicleInfo[f][listitem][fvModelId] - 400]);
			SendClientMessageEx(playerid, COLOR_WHITE, vstring);
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "You can not spawn a non-existent vehicle.");
	}*/
	if(dialogid == VEHICLESTORAGE && response) {
		if(PlayerVehicleInfo[playerid][listitem][pvSpawned]) {

			new
				iVehicleID = PlayerVehicleInfo[playerid][listitem][pvId];

			if((!IsVehicleOccupied(iVehicleID) || IsPlayerInVehicle(playerid, iVehicleID)) && !IsVehicleInTow(iVehicleID)) {

				new
					Float: vehiclehealth;

				GetVehicleHealth(iVehicleID, vehiclehealth);

				if(vehiclehealth < 800) {
					SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle is too damaged to be stored.");
				}
				else {
					--PlayerCars;
					VehicleSpawned[playerid]--;
					PlayerVehicleInfo[playerid][listitem][pvSpawned] = 0;
					PlayerVehicleInfo[playerid][listitem][pvFuel] = VehicleFuel[iVehicleID];
					VehicleFuel[iVehicleID] = 100.0;
					DestroyVehicle(iVehicleID);
					PlayerVehicleInfo[playerid][listitem][pvId] = INVALID_PLAYER_VEHICLE_ID;
					g_mysql_SaveVehicle(playerid, listitem);

					new vstring[128];
					format(vstring, sizeof(vstring), "You have stored your %s. The vehicle has been despawned.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
					SendClientMessageEx(playerid, COLOR_WHITE, vstring);
					CheckPlayerVehiclesForDesync(playerid);
				}
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "This vehicle is currently occupied - it cannot be despawned right now.");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You can not spawn an impounded vehicle. If you wish to reclaim it, do so at the DMV in Dillimore.");
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvDisabled]) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You can not spawn a disabled vehicle. It is disabled due to your VIP level (vehicle restrictions).");
		}
		else if((PlayerInfo[playerid][pRVehRestricted] > gettime() || PlayerVehicleInfo[playerid][listitem][pvRestricted] > gettime()) && IsWeaponisedVehicle(PlayerVehicleInfo[playerid][listitem][pvModelId]))
        {
            SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to spawn this restricted vehicle.");
        }
		else if(!PlayerVehicleInfo[playerid][listitem][pvSpawned]) {
			if(PlayerInfo[playerid][pDonateRank] == 0 && VehicleSpawned[playerid] >= 2) {
				SendClientMessageEx(playerid, COLOR_GREY, "As non-VIP you can only have 2 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 1 && VehicleSpawned[playerid] >= 2) {
				SendClientMessageEx(playerid, COLOR_GREY, "As Bronze VIP you can only have 2 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 2 && VehicleSpawned[playerid] >= 2) {
				SendClientMessageEx(playerid, COLOR_GREY, "As Silver VIP you can only have 2 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 3 && VehicleSpawned[playerid] >= 3) {
				SendClientMessageEx(playerid, COLOR_GREY, "As Gold VIP you can only have 3 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 4 && VehicleSpawned[playerid] >= 5) {
				SendClientMessageEx(playerid, COLOR_GREY, "As Platinum VIP you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(PlayerInfo[playerid][pDonateRank] == 5 && VehicleSpawned[playerid] >= 5) {
				SendClientMessageEx(playerid, COLOR_GREY, "As VIP Moderator you can only have 5 vehicles spawned. You must store a vehicle in order to spawn another one.");
			}
			else if(!(0 <= PlayerInfo[playerid][pDonateRank] <= 5)) {
				SendClientMessageEx(playerid, COLOR_GREY, "You have an invalid VIP level.");
			}
			else if((PlayerVehicleInfo[playerid][listitem][pvModelId]) < 400) {
				SendClientMessageEx(playerid, COLOR_GREY, "The vehicle slot is empty.");
			}
			else {

				new
					iVeh = CreateVehicleEx(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1, playerid);

				++PlayerCars;
				VehicleSpawned[playerid]++;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[playerid][listitem][pvId] = iVeh;
				VehicleFuel[iVeh] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, iVeh, PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
				g_mysql_SaveVehicle(playerid, listitem);

				new vstring[64];
				format(vstring, sizeof(vstring), "You have taken your %s out of storage.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_WHITE, vstring);
				CheckPlayerVehiclesForDesync(playerid);
				Vehicle_ResetData(iVeh);

				new szPrefix[32], tmpFVehModelId, Float:tmpFVehPos[4];

				format(szPrefix, sizeof(szPrefix), "tmpVeh%dModelId", listitem);
				tmpFVehModelId = GetPVarInt(playerid, szPrefix);
				DeletePVar(playerid, szPrefix);
				format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosX", listitem);
				tmpFVehPos[0] = GetPVarFloat(playerid, szPrefix);
				DeletePVar(playerid, szPrefix);
				format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosY", listitem);
				tmpFVehPos[1] = GetPVarFloat(playerid, szPrefix);
				DeletePVar(playerid, szPrefix);
				format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosZ", listitem);
				tmpFVehPos[2] = GetPVarFloat(playerid, szPrefix);
				DeletePVar(playerid, szPrefix);
				format(szPrefix, sizeof(szPrefix), "tmpVeh%dAngle", listitem);
				tmpFVehPos[3] = GetPVarFloat(playerid, szPrefix);
				DeletePVar(playerid, szPrefix);

				if(tmpFVehPos[0] != 0.0 && tmpFVehModelId == PlayerVehicleInfo[playerid][listitem][pvModelId])
				{
					SetVehiclePos(iVeh, tmpFVehPos[0], tmpFVehPos[1], tmpFVehPos[2]);
					SetVehicleZAngle(iVeh, tmpFVehPos[3]);

					SendClientMessageEx(playerid, COLOR_WHITE, "Your vehicle has been restored to it's last known location from your previous timeout.");
				}
			}
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "You can not spawn a non-existent vehicle.");
	}
	if(dialogid == ADMIN_VEHCHECK && response) {
	    if(PlayerInfo[playerid][pAdmin] < 4) { return SendClientMessage(playerid, COLOR_GRAD2, "You are not authorized");  }
		new giveplayerid = GetPVarInt(playerid, "vehcheck_giveplayerid");
		if(!IsPlayerConnected(giveplayerid)) { return SendClientMessage(playerid, COLOR_GRAD2, "The player has disconnected"); }
		new	iVehicleID = PlayerVehicleInfo[giveplayerid][listitem][pvId];
		new model;
        if(PlayerVehicleInfo[giveplayerid][listitem][pvSpawned])
		{
	        PlayerVehicleInfo[giveplayerid][listitem][pvSpawned] = 0;
			DestroyVehicle(iVehicleID);
			PlayerVehicleInfo[giveplayerid][listitem][pvId] = INVALID_PLAYER_VEHICLE_ID;
			g_mysql_SaveVehicle(giveplayerid, listitem);
	        VehicleSpawned[giveplayerid]--;
	    }
		model = PlayerVehicleInfo[giveplayerid][listitem][pvModelId];
		PlayerVehicleInfo[giveplayerid][listitem][pvId] = 0;
        PlayerVehicleInfo[giveplayerid][listitem][pvModelId] = 0;
        PlayerVehicleInfo[giveplayerid][listitem][pvPosX] = 0.0;
        PlayerVehicleInfo[giveplayerid][listitem][pvPosY] = 0.0;
        PlayerVehicleInfo[giveplayerid][listitem][pvPosZ] = 0.0;
        PlayerVehicleInfo[giveplayerid][listitem][pvPosAngle] = 0.0;
        PlayerVehicleInfo[giveplayerid][listitem][pvLock] = 0;
        PlayerVehicleInfo[giveplayerid][listitem][pvLocked] = 0;
        PlayerVehicleInfo[giveplayerid][listitem][pvPaintJob] = -1;
        PlayerVehicleInfo[giveplayerid][listitem][pvColor1] = 0;
		PlayerVehicleInfo[giveplayerid][listitem][pvImpounded] = 0;
        PlayerVehicleInfo[giveplayerid][listitem][pvColor2] = 0;
        PlayerVehicleInfo[giveplayerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
        PlayerVehicleInfo[giveplayerid][listitem][pvPark] = 0;
        for(new m = 0; m < MAX_MODS; m++)
		{
            PlayerVehicleInfo[giveplayerid][listitem][pvMods][m] = 0;
		}
		g_mysql_SaveVehicle(giveplayerid, listitem);
		format(string, sizeof(string), "AdmCmd: Admin %s has deleted player owned vehicle %s (%d) from %s.", GetPlayerNameEx(playerid), VehicleName[model - 400], model, GetPlayerNameEx(giveplayerid));
  		Log("logs/playervehicle.log", string);
  		ABroadCast(COLOR_YELLOW, string, 4);


  		format(string, sizeof(string), "* Admin %s has deleted one of your owned vehicles (%s)", GetPlayerNameEx(playerid), VehicleName[model - 400]);
		SendClientMessageEx(playerid, COLOR_YELLOW, string);

  		format(string, sizeof(string), "* You have deleted player owned vehicle %s from %s.", VehicleName[model - 400], GetPlayerNameEx(giveplayerid));
		SendClientMessageEx(playerid, COLOR_YELLOW, string);

	}
	if(dialogid == TRACKCAR && response) {
		new Float: carPos[3];
		if(PlayerVehicleInfo[playerid][listitem][pvId] > INVALID_PLAYER_VEHICLE_ID)
		{
			GetVehiclePos(PlayerVehicleInfo[playerid][listitem][pvId], carPos[0], carPos[1], carPos[2]);
			if(CheckPointCheck(playerid))
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
			}
			else
			{
				SetPVarInt(playerid, "TrackCar", 1);
				new zone[MAX_ZONE_NAME];
				//Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
				format(string, sizeof(string), "Your vehicle is located in %s.", zone);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
				SendClientMessageEx(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find your vehicle!");
			}
		}
		else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track an impounded vehicle. If you wish to reclaim it, do so at the DMV in Dillimore.");
		else if(PlayerVehicleInfo[playerid][listitem][pvDisabled] == 1) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a disabled vehicle. It is disabled due to your VIP level (vehicle restrictions).");
		else if(PlayerVehicleInfo[playerid][listitem][pvSpawned] == 0) SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a stored vehicle. Use /vstorage to spawn it.");
		else SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a non-existent vehicle.");
	}
	if(dialogid == GTRACKCAR)
	{
	    if(response == 1)
	    {
	        for(new i = 0; i < MAX_GANG_VEHICLES; i++)
	        {
	            if(listitem == i)
	            {
	                new Float: carPos[3];
					new Family = PlayerInfo[playerid][pFMember];
					if(FamilyVehicleInfo[Family][i][fvId] != INVALID_VEHICLE_ID)
					{
	                	GetVehiclePos(FamilyVehicleInfo[Family][i][fvId], carPos[0], carPos[1], carPos[2]);
	                	if(CheckPointCheck(playerid))
						{
							SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
						}
						else
						{
					    	SetPVarInt(playerid, "TrackCar", 1);

					    	new zone[MAX_ZONE_NAME];
					    	//Get3DZone(carPos[0], carPos[1], carPos[2], zone, sizeof(zone));
					    	format(string, sizeof(string), "Your vehicle is located in %s.", zone);
					    	SendClientMessageEx(playerid, COLOR_YELLOW, string);
					    	SetPlayerCheckpoint(playerid, carPos[0], carPos[1], carPos[2], 15.0);
					    	SendClientMessageEx(playerid, COLOR_WHITE, "Hint: Make your way to the checkpoint to find your car!");
						}
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_WHITE, "You can not track a vehicle in a empty slot.");
					}
	            }
	        }
	    }
	}
	// --------------------------------------------------------------------------------------------------
	if( dialogid == 3495) //buyclothes
	{
		new skinid = strval(inputtext);
		if(!response)
		{
		}
		else
			{
            if(IsValidSkin(strval(inputtext)) == 0)
			{
			    if(GetPVarInt(playerid, "freeSkin") == 1)
			    {
					SendClientMessageEx(playerid, COLOR_GREY, "That skin ID is either invalid or restricted to faction or family!");
	            	ShowPlayerDialog( playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!", "Buy", "Cancel" );
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That skin ID is either invalid or restricted to faction or family!");
	            	ShowPlayerDialog( playerid, 3495, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin Changes cost $2500.", "Buy", "Cancel" );
				}
			}
			else
			{
			    if(GetPVarInt(playerid, "freeSkin") == 1)
			    {
					PlayerInfo[playerid][pModel] = skinid;
					SetPlayerSkin(playerid, skinid);
					SetPVarInt(playerid, "freeSkin", 0);
			    }
			    else
			    {
			        if(GetPlayerCash(playerid) < 2500) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't afford these clothes!");
					GameTextForPlayer(playerid, "~g~Skin purchased! ~n~ ~r~- $2500", 2000, 1);
					GivePlayerCash(playerid, -2500);
					PlayerInfo[playerid][pModel] = skinid;
					SetPlayerSkin(playerid, skinid);
				}
			}
  		}
		return 1;
	}
	if(dialogid == VIPWEPSMENU)
	{
	    if(!response) return 1;
	    if(PlayerInfo[playerid][pDonateRank] < 3 && PlayerInfo[playerid][pTokens] == 0)
	    {
	        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have any tokens! You get tokens every paycheck.");
	        return 1;
	    }
	    if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
	    switch( listitem )
	    {
	        case 0:
	        {

    			if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
			        if(PlayerInfo[playerid][pTokens] < 3)
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
					PlayerInfo[playerid][pTokens] -= 3;
					format(string, sizeof(string), "VIP: You have traded 3 tokens for a Desert Eagle, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        SendClientMessageEx(playerid, COLOR_YELLOW, string);
				}
				GivePlayerValidWeapon(playerid, 24, 60000);
	        }
	        case 1:
	        {

 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
			        if(PlayerInfo[playerid][pTokens] < 2)
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
					PlayerInfo[playerid][pTokens] -= 2;
					format(string, sizeof(string), "VIP: You have traded 2 tokens for a shotgun, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        SendClientMessageEx(playerid, COLOR_YELLOW, string);
				}
				GivePlayerValidWeapon(playerid, 25, 60000);
	        }
	        /*case 2:
	        {
 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
			        if(PlayerInfo[playerid][pTokens] < 3)
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
					PlayerInfo[playerid][pTokens] -= 3;
					format(string, sizeof(string), "VIP: You have traded 3 tokens for an MP5, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
    				SendClientMessageEx(playerid, COLOR_YELLOW, string);
				}
				GivePlayerValidWeapon(playerid, 29, 60000);
	        }*/
	        case 2: // old 4
	        {
 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
   					if(PlayerInfo[playerid][pTokens] > 1)
			        {
						PlayerInfo[playerid][pTokens] -= 2;
						format(string, sizeof(string), "VIP: You have traded 2 tokens for a silenced pistol, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
  					}
			        else
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
				}
                GivePlayerValidWeapon(playerid, 23, 60000);
	        }
	        case 3: // old 5
	        {
 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
   					if(PlayerInfo[playerid][pTokens] > 0)
			        {
						PlayerInfo[playerid][pTokens] -= 1;
						format(string, sizeof(string), "VIP: You have traded a token for a golf club, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
  					}
			        else
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
				}
                GivePlayerValidWeapon(playerid, 2, 60000);
	        }
	        case 4: // old 6
	        {
 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
   					if(PlayerInfo[playerid][pTokens] > 0)
			        {
						PlayerInfo[playerid][pTokens] -= 1;
						format(string, sizeof(string), "VIP: You have traded a token for a baseball bat, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
  					}
			        else
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
				}
                GivePlayerValidWeapon(playerid, 5, 60000);
	        }
	        case 5: // 7
	        {
 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
   					if(PlayerInfo[playerid][pTokens] > 0)
			        {
						PlayerInfo[playerid][pTokens] -= 1;
						format(string, sizeof(string), "VIP: You have traded a token for a dildo, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
  					}
			        else
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
				}
                GivePlayerValidWeapon(playerid, 10, 60000);
	        }
	        case 6: // 8
	        {
 				if(PlayerInfo[playerid][pDonateRank] < 3)
			    {
   					if(PlayerInfo[playerid][pTokens] > 0)
			        {
						PlayerInfo[playerid][pTokens] -= 1;
						format(string, sizeof(string), "VIP: You have traded a token for a sword, you now have %d token(s).", PlayerInfo[playerid][pTokens]);
			        	SendClientMessageEx(playerid, COLOR_YELLOW, string);
  					}
			        else
			        {
			            SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You do not have enough tokens for this.");
			            return 1;
			        }
				}
                GivePlayerValidWeapon(playerid, 8, 60000);
	        }
	    }
	}
	if( dialogid == 3496) //vip clothes corner
	{
		new skinid = strval(inputtext);
		if(!response)
		{
		}
		else
			{
            if(skinid < 1 || skinid > 299)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That skin ID is invalid, the range of available skin IDs are 1-299 !");
    			ShowPlayerDialog( playerid, 3496, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin changes are free here.", "Wear", "Cancel" );
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have changed your skin in the clothes corner.");
				PlayerInfo[playerid][pModel] = skinid;
				SetPlayerSkin(playerid, skinid);
			}
  		}
		return 1;
	}
	else if( dialogid == LOTTOMENU) //lotteryticket
	{
		new lotto = strval(inputtext);
		if(!response)
		{
		}
		else
		{
            if(lotto < 1 || lotto > 300)
			{
				SendClientMessageEx(playerid, COLOR_GREY, "   Lottery Number not below 1 or above 300!");
            	ShowPlayerDialog( playerid, LOTTOMENU, DIALOG_STYLE_INPUT, "Lottery Ticket Selection","Please enter a Lotto Number!\n\nNote: Lottery Tickets cost $1000.", "Buy", "Cancel" );
			}
			else
			{
			    if(PlayerInfo[playerid][pLottoNr] >= 5) {
			        SendClientMessageEx(playerid, COLOR_GREY, "You can only buy up to 5 tickets.");
			        return 1;
			    }
				format(string, sizeof(string), "* You bought a Lottery Ticket with number: %d.", lotto);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				AddTicket(playerid, lotto);
				for(new i = 0; i < 5; i++) {
				    if(LottoNumbers[playerid][i] == 0) {
				        LottoNumbers[playerid][i] = lotto;
				        break;
					}
				}
				Jackpot += 800;
				TicketsSold += 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				if(PlayerInfo[playerid][pDonateRank] >= 1)
    			{
			        GivePlayerCash(playerid, -800);
			        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $1000, you paid $800.");
				}
				else
				{
					GivePlayerCash(playerid, -1000);
				}
			}
  		}
		return 1;
	}
	else if( dialogid == DIALOG_CHANGEPASS )
	{
		if(!response || strlen(inputtext) == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You have prevented yourself from changing your password." );
	    if( strlen( inputtext ) >= 64 )
	    {
	        SendClientMessageEx( playerid, COLOR_WHITE, "You can't select a password that's above 64 characters." );
	    }
	    else
	    {
	        if( strlen( inputtext ) >= 1 )
	        {
	            if(!response)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You have prevented yourself from changing your password." );
	            }
	            else
	            {
					new
						szBuffer[129],
						szQuery[256];

					WP_Hash(szBuffer, sizeof(szBuffer), inputtext);
					SetPVarString(playerid, "PassChange", inputtext);

					format(szQuery, sizeof(szQuery), "UPDATE `accounts` SET `Pass` = '%s' WHERE `id` = '%i'", szBuffer, PlayerInfo[playerid][pId]);
					mysql_function_query(MainPipeline, szQuery, false, "OnPlayerChangePass", "i", playerid);
					SendClientMessageEx(playerid, COLOR_YELLOW, "Processing your request...");
	            }
	        }
	        else
	        {
	            SendClientMessageEx( playerid, COLOR_WHITE, "Your password must be longer than 1 character." );
	        }
	    }
	}
	else if( dialogid == DIALOG_NAMECHANGE )
	{
	    if(!response || strlen(inputtext) == 0) return SendClientMessageEx(playerid, COLOR_WHITE, "You have prevented yourself from changing your name." );
	    if(strlen(inputtext) > 20)
	    {
	        SendClientMessageEx( playerid, COLOR_WHITE, "You can't select a name that's above 20 characters." );
	    }
	    else
	    {
	        if( strlen(inputtext) >= 1 )
	        {
	            if(!response)
	            {
	                SendClientMessageEx(playerid, COLOR_WHITE, "You have prevented yourself from changing your name." );
	            }
	            else
	            {
		            for(new i = 0; i < strlen( inputtext ); i++)
					{
					    if (inputtext[i] == ' ') return SendClientMessageEx(playerid, COLOR_GRAD2, "Please use the '_'(underscore) instead of the ' '(space)");
					}
					if( strfindex( inputtext, "_", true) == -1 )
					{
						SendClientMessageEx( playerid, COLOR_WHITE, "Name change rejected. Please choose a name in the correct format: Firstname_Lastname." );
						return 1;
					}
					new namechangecost;
					namechangecost = (PlayerInfo[playerid][pLevel]) * 15000;

                    new tmpName[MAX_PLAYER_NAME];
					if(strcmp(inputtext, tmpName, false) != 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Unacceptable characters used in namechange, try again");
					if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 16)
					{
					    if(GetPVarType(playerid, "HasReport")) {
							SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
							return 1;
						}
	    				new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						SetPVarInt(playerid, "NameChangeCost", 0);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format( String, sizeof( String ), "You have requested a namechange from %s to %s at no cost (hitman or FBI), please wait until a General Admin approves it.", playername, inputtext);
		            	SendClientMessageEx( playerid, COLOR_YELLOW, String );
		            	format( String, sizeof( String ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for free - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, playerid, playerid);
		            	ABroadCast( COLOR_YELLOW, String, 3 );
	           	 		SendReportToQue(playerid, "Name Change Request", 2, 4);
		            	return 1;
					}
					if(PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[playerid][pSMod] > 0)
					{
					    if(GetPVarType(playerid, "HasReport")) {
							SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
							return 1;
						}
	    				new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format( String, sizeof( String ), "You have requested a namechange from %s to %s at no cost (Senior Mod), please wait until a General Admin approves it.", playername, inputtext, namechangecost);
		            	SendClientMessageEx( playerid, COLOR_YELLOW, String );
		            	format( String, sizeof( String ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for free - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, playerid, playerid);
		            	ABroadCast( COLOR_YELLOW, String, 3 );
		                SendReportToQue(playerid, "Name Change Request", 2, 4);
		            	return 1;
					}

					if(GetPlayerCash(playerid) >= namechangecost)
					{
					    if(GetPVarType(playerid, "HasReport")) {
							SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
							return 1;
						}
					    new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						SetPVarInt(playerid, "NameChangeCost", namechangecost);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
		            	format( String, sizeof( String ), "You have requested a namechange from %s to %s for $%d, please wait until a General Admin approves it.", playername, inputtext, namechangecost);
		            	SendClientMessageEx( playerid, COLOR_YELLOW, String );
		            	format( String, sizeof( String ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for $%d - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, namechangecost, playerid, playerid);
		            	ABroadCast( COLOR_YELLOW, String, 3 );
		            	SendReportToQue(playerid, "Name Change Request", 2, 4);
					}
					else
					{
					    SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have enough money for the name change.");
					}
	            }
	        }
	        else
	        {
	            SendClientMessageEx( playerid, COLOR_WHITE, "Your name must be longer than 1 character." );
	        }
	    }
	}
	else if( dialogid == DIALOG_NAMECHANGE2 )
	{
	    if(!response || strlen(inputtext) == 0) return Kick(playerid);
	    if(strlen(inputtext) >= 20)
	    {
	        SendClientMessageEx( playerid, COLOR_WHITE, "You can't select a name that's above 20 characters." );
	        ShowPlayerDialog( playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
	    }
	    else
	    {
	        if( strlen(inputtext) >= 1 )
	        {
	            if(!response)
	            {
				    ShowPlayerDialog( playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
				}
	            else
	            {
           			for(new i = 0; i < strlen( inputtext ); i++)
					{
    					if (inputtext[i] == ' ')
    					{
							SendClientMessageEx(playerid, COLOR_WHITE, "Please use the '_'(underscore) instead of the ' '(space)");
							ShowPlayerDialog( playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
							return 1;
						}
					}
					if( strfindex( inputtext, "_", true) == -1 )
					{
						SendClientMessageEx( playerid, COLOR_WHITE, "Name change rejected. Please choose a name in the correct format: Firstname_Lastname." );
						ShowPlayerDialog( playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
						return 1;
					}
     				else
					{
					    if(GetPVarType(playerid, "HasReport")) {
							SendClientMessageEx(playerid, COLOR_GREY, "You can only have 1 active report at a time. (/cancelreport)");
							return 1;
						}
						new String[128];
						SetPVarInt(playerid, "RequestingNameChange", 1);
						SetPVarString(playerid, "NewNameRequest", inputtext);
						SetPVarInt(playerid, "NameChangeCost", 0);
						new playername[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername, sizeof(playername));
    					format( String, sizeof( String ), "You have requested a namechange from %s to %s please wait until a General Admin approves it.", playername, inputtext);
       					SendClientMessageEx( playerid, COLOR_YELLOW, String );
						format( String, sizeof( String ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) requested a name change to %s for free (non-RP name) - /approvename %d (accept), or /denyname %d (deny).", playername, playerid, inputtext, playerid, playerid);
            			ABroadCast( COLOR_YELLOW, String, 3 );
						SendReportToQue(playerid, "Name Change Request", 2, 4);
            			return 1;
            		}
				}
	        }
	        else
	        {
	            SendClientMessageEx( playerid, COLOR_WHITE, "Your name must be longer than 1 character." );
	            ShowPlayerDialog( playerid, DIALOG_NAMECHANGE2, DIALOG_STYLE_INPUT, "Free name change","This is a roleplay server where you must have a name in this format: Firstname_Lastname.\nFor example: John_Smith or Jimmy_Johnson\n\nAn admin has offered you to change your name to the correct format for free. Please enter your desired name below.\n\nNote: If you press cancel you will be kicked from the server.", "Change", "Cancel" );
	        }
	    }
	}
	else if(dialogid == DIALOG_CDEDIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // New Vehicle
			{
				format(string, sizeof(string),"Please type the model ID of the new vehicle.");
		        ShowPlayerDialog(playerid,DIALOG_CDNEWVEH,DIALOG_STYLE_INPUT,"Warning:",string,"Ok","Cancel");
			}
			else if(listitem == 1) // My Vehicles
			{
				new vehicles;
                for(new i=0; i<MAX_DEALERSHIPVEHICLES; i++)
	            {
					if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][i] != 0)
					{
						vehicles++;
		                format(string, sizeof(string), "Vehicle %d| Name: %s | Price: %d.",i+1,GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][i]),CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleCost][i]);
		                SendClientMessageEx(playerid, COLOR_WHITE, string);
					}
				}
				if(vehicles)
				{
				    ShowPlayerDialog(playerid, DIALOG_CDEDITCARS, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose a vehicle to edit:", "Edit", "Back");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " This car dealership doesn't have any cars.");
				}
			}
			else if(listitem == 2) // Upgrade
			{
				new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			    ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue.", listitems,"Select","Cancel");
			}
			else if(listitem == 3) // Till
			{
				new listitems[] = "1 Withdraw\n2 Deposit";
			    ShowPlayerDialog(playerid,DIALOG_CDTILL,DIALOG_STYLE_LIST,"Choose an item to continue.", listitems,"Select","Cancel");
			}
		}
		else
		{
			SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDTILL)
	{ // car dealership dialog
	    if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Withdraw
			{
				format(string, sizeof(string), "You have $%d in your till account.\n\n\tHow much money to withdraw?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				ShowPlayerDialog(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Select","Cancel");
			}
			else if(listitem == 1) // Deposit
			{
				format(string, sizeof(string), "You have $%d in your till account.\n\n\tHow much money to deposit?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				ShowPlayerDialog(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", string,"Select","Cancel");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDWITHDRAW)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (IsNumeric(inputtext))
	        {
				new money = strval(inputtext);
				if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] < money)
				{
					format(string, sizeof(string), "You don't have that much in your till!\n\nYou have $%d in your till account.\n\n\tHow much money to withdraw?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
					ShowPlayerDialog(playerid,DIALOG_CDWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Select","Cancel");
					return 1;
				}
				CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] -= money;
				PlayerInfo[playerid][pCash] += money;
				format(string, sizeof(string), "You have successfully withdrawn $%d from your till, new balance: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				SendClientMessageEx(playerid, COLOR_GRAD2, string);
				SavecDealership(GetPVarInt(playerid, "editingcd"));
				SetPVarInt(playerid, "editingcd", -1);
			}
        }
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDDEPOSIT)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
		    if (IsNumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(PlayerInfo[playerid][pCash] < money)
	             {
                     format(string, sizeof(string), "You don't have that much in your wallet!\n\nYou have $%d in your till account.\n\n\tHow much money to deposit?", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
				     ShowPlayerDialog(playerid,DIALOG_CDDEPOSIT,DIALOG_STYLE_INPUT,"Deposit", string,"Select","Cancel");
                     return 1;
	             }
	             CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill] += money;
	             PlayerInfo[playerid][pCash] -= money;
	             format(string, sizeof(string), "You have successfully deposited $%d to your till, new balance: $%d", money, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdTill]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, string);
	             SavecDealership(GetPVarInt(playerid, "editingcd"));
                 SetPVarInt(playerid, "editingcd", -1);
			}
		}
		else
		{
             SavecDealership(GetPVarInt(playerid, "editingcd"));
             SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDUPGRADE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
            if(listitem == 0) // Vehicle Spawn
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, " Please stand where you want to have your brought vehicles spawn.");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				SetPVarInt(playerid, "editingcdvehpos", 2);
			}
            if(listitem == 1) // Radius
			{
				ShowPlayerDialog(playerid, DIALOG_CDRADIUS, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new radius:", "Edit", "Back");
			}
			else if(listitem == 2) // Dealership Name
			{
				ShowPlayerDialog(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new name:", "Edit", "Back");
			}
			else if(listitem == 3) // Price
			{
				ShowPlayerDialog(playerid, DIALOG_CDPRICE, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new price:", "Edit", "Back");
			}
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDRADIUS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
			new Float:radius = floatstr(inputtext);
			new Float:radiusex = CarDealershipInfo[d][cdRadius];
			new test = floatround(radius), test1 = floatround(radiusex);
            if (CarDealershipInfo[d][cdRadius] > radius)
	        {
				 new cost = ( test - test1 ) * ( test1 * 1000 );
				 if(PlayerInfo[playerid][pCash] < cost)
				 {
                     format(string, sizeof(string), "ERROR: You do not have enough money for this upgrade ($%d).",cost);
                     SendClientMessageEx(playerid, COLOR_GREY, string);
                     return 1;
				 }
				 format(string, sizeof(string), " Car Dealership radius upgraded from %.1f to %.1f for $%d.",radiusex, radius, cost);
                 SendClientMessageEx(playerid, COLOR_GREY, string);
	             CarDealershipInfo[d][cdRadius] = radius;
	             format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], CarDealershipInfo[d][cdRadius], d);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_GREEN, string);
	             new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			     ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			     SavecDealership(GetPVarInt(playerid, "editingcd"));
	        }
		}
		else
		{
		    new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDNAME)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new d;
			d = GetPVarInt(playerid, "editingcd");
            if (!strlen(inputtext))
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** You must type a name **");
    	        ShowPlayerDialog(playerid, DIALOG_CDNAME, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new name:", "Edit", "Back");
		        return 1;
			}
			new cost = strlen(inputtext) * 50;
			format(string, sizeof(string), " Car Dealership name upgraded from %s to %s for $%d.", CarDealershipInfo[d][cdMessage], inputtext, cost);
            SendClientMessageEx(playerid, COLOR_GREY, string);
	        strmid(CarDealershipInfo[d][cdMessage], inputtext, 0, strlen(inputtext), 255);
	        format(string,128,"Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[d][cdMessage], CarDealershipInfo[d][cdOwner], CarDealershipInfo[d][cdRadius], d);
	        UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdTextLabel], COLOR_GREEN, string);
	        new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
		    new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITCARS)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new cdvid;
            if (IsNumeric(inputtext))
	        {
	             cdvid = strval(inputtext);
	             if(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleModel][cdvid-1])
	             {
	                 SetPVarInt(playerid, "editingcdveh", cdvid-1);
	                 new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			         ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
				 }
	        }
		}
		else
		{
		    new listitems[] = "1 New Vehicle\n2 My Vehicles\n3 Upgrade\n4 Till";
			ShowPlayerDialog(playerid,DIALOG_CDEDIT,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITONE)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
            if(listitem == 0) // Edit Model
			{
	             ShowPlayerDialog(playerid, DIALOG_CDEDITMODEL, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new model id:", "Edit", "Back");
	        }
	        else if(listitem == 1) // Edit Cost
			{
	             ShowPlayerDialog(playerid, DIALOG_CDEDITCOST, DIALOG_STYLE_INPUT, "Car Dealership:", " Choose the new price of the car:", "Edit", "Back");
	        }
	        else if(listitem == 2) // Edit Park
			{
				 PutPlayerInVehicle(playerid, CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")], 0);
	             SendClientMessageEx(playerid, COLOR_GRAD2, " Please stand where you want to park the vehicle.");
				 SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				 SetPVarInt(playerid, "editingcdvehpos", 1);
	        }
	        else if(listitem == 3) // Delete Vehicle
			{
	             format(string, sizeof(string), "Are you sure you want to delete this %s?\nNote: You will not get any refounds.",
				 GetVehicleName(CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdVehicleId][GetPVarInt(playerid, "editingcdveh")]));
		         ShowPlayerDialog(playerid,DIALOG_CDDELVEH,DIALOG_STYLE_MSGBOX,"Warning:",string,"Ok","Cancel");
	        }
		}
		else
		{
            SavecDealership(GetPVarInt(playerid, "editingcd"));
            SetPVarInt(playerid, "editingcdveh", -1);
		}
	}
    else if(dialogid == DIALOG_CDEDITMODEL)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new modelid, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (IsNumeric(inputtext))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
				 if(IsWeaponisedVehicle(modelid)) { SendClientMessageEx(playerid, COLOR_GREY, "  You can't choose a restricted vehicle!"); return 1; }
				 CarDealershipInfo[d][cdVehicleModel][v] = modelid;
	             DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicleEx(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
				 format(string, sizeof(string),"%s has changed a vehicle in dealership %d to car model %d", GetPlayerNameEx(playerid), d, modelid);
				 Log("logs/dealership.log", string);
				 format(text_info, sizeof(text_info),"%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDEDITCOST)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			new price, d, v;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
            if (IsNumeric(inputtext))
	        {
	             price = strval(inputtext);
	             CarDealershipInfo[d][cdVehicleCost][v] = price;
	             format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(CarDealershipInfo[d][cdVehicleId][v]), CarDealershipInfo[d][cdVehicleCost][v]);
	             UpdateDynamic3DTextLabelText(CarDealershipInfo[d][cdVehicleLabel][v], COLOR_LIGHTBLUE, text_info);
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealership(d);
	        }
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == DIALOG_CDDELVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1)
		{
			DestroyCarDealershipVehicle(GetPVarInt(playerid, "editingcd"), GetPVarInt(playerid, "editingcdveh"));
			SavecDealership(GetPVarInt(playerid, "editingcd"));
		}
		else
		{
		    new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
		}
	}
	else if(dialogid == HQENTRANCE)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
	            DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
            	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreatePickupEx(1318, 23, x, y, z);
				format(string, sizeof(string), "%s", FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
            	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 4.0);
            	SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Entrance changed!.");
            	TogglePlayerControllable(playerid, true);
            	SaveFamiliesHQ();
            	return 1;
			}
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = x;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = y;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = z;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = a;
         	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] = CreatePickupEx(1318, 23, x, y, z);
			format(string, sizeof(string), "%s", FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
   			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] = CreateDynamic3DTextLabel(string, COLOR_YELLOW, x, y, z+0.6, 4.0);
			SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Entrance saved! Please stand where you want the exit at, once ready press the fire button.");
            SetPVarInt(playerid, "editingfamhqaction", 2);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 5)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the exterior change of this HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the creation of this HQ.");
	        DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	if(dialogid == DIALOG_BIZMENU)
	{ // bizmenu dialog
	    if(response && GetPVarInt(playerid, "bizmenu") != -1)
		{
            if(listitem == 0) // Balance
			{
				format(string, sizeof(string), "You have $%d in your business account.", BizInfo[GetPVarInt(playerid, "bizmenu")][bMoney]);
				SendClientMessageEx(playerid, COLOR_YELLOW, string);
			}
			else if(listitem == 1) // Withdraw
			{
				format(string, sizeof(string), "You have $%d in your business account.\n\n\tHow much money to withdraw?", BizInfo[GetPVarInt(playerid, "bizmenu")][bMoney]);
				ShowPlayerDialog(playerid,DIALOG_BIZWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Select","Cancel");
			}
		}
		else
		{
            SaveBiz();
            SetPVarInt(playerid, "bizmenu", -1);
		}
	}
	if(dialogid == DIALOG_BIZWITHDRAW)
	{
		if(response && GetPVarInt(playerid, "bizmenu") != -1)
		{
		    if (IsNumeric(inputtext))
	        {
	             new money = strval(inputtext);
	             if(BizInfo[GetPVarInt(playerid, "bizmenu")][bMoney] < money)
	             {
                     format(string, sizeof(string), "You don't have that much in your business account!\n\nYou have $%d in your till account.\n\n\tHow much money to withdraw?", BizInfo[GetPVarInt(playerid, "bizmenu")][bMoney]);
				     ShowPlayerDialog(playerid,DIALOG_BIZWITHDRAW,DIALOG_STYLE_INPUT,"Withdraw", string,"Select","Cancel");
                     return 1;
	             }
	             BizInfo[GetPVarInt(playerid, "bizmenu")][bMoney] -= money;
	             SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash")+money);
	             format(string, sizeof(string), "You have successfully withdrawn $%d from your business balance, new balance: $%d", money, BizInfo[GetPVarInt(playerid, "bizmenu")][bMoney]);
	             SendClientMessageEx(playerid, COLOR_GRAD2, string);
	             SaveBiz();
                 SetPVarInt(playerid, "bizmenu", -1);
			}
        }
		else
		{
             SaveBiz();
             SetPVarInt(playerid, "bizmenu", -1);
		}
	}
	else if(dialogid == HQEXIT)
	{
	    if(response)
	    {
	        new Float: x, Float: y, Float: z, Float: a;
	        GetPlayerPos(playerid, x, y, z);
	        GetPlayerFacingAngle(playerid, a);
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
	            FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        	FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            	SendClientMessageEx(playerid, COLOR_GRAD2, "HQ Exit changed!.");
            	TogglePlayerControllable(playerid, true);
            	SaveFamiliesHQ();
            	return 1;
	        }
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = x;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = y;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = z;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = a;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = GetPlayerInterior(playerid);
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyVirtualWorld] = GetPVarInt(playerid, "editingfamhq")+900000;
            format(string,128,"HQ Exit saved!\n\nIs this interior a custom mapped one?");
        	ShowPlayerDialog(playerid,HQCUSTOMINT,DIALOG_STYLE_MSGBOX,"Warning:",string,"Yes","No");
            SetPVarInt(playerid, "editingfamhqaction", 3);
            TogglePlayerControllable(playerid, true);
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 6)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the interior change of this HQ.");
	            SetPVarInt(playerid, "editingfamhqaction", 0);
	        	SetPVarInt(playerid, "editingfamhq", 255);
	        	TogglePlayerControllable(playerid, true);
	            return 1;
	        }
	        SendClientMessageEx(playerid, COLOR_GRAD2, "You have cancelled the creation of this HQ.");
	       	DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	    }
	}
	else if(dialogid == HQCUSTOMINT)
	{
	    if(response)
	    {
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 1;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 255;
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully changed the custom interior for this HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully created this HQ.");
   			}
	        SetPVarInt(playerid, "editingfamhq", 255);
	        SaveFamiliesHQ();
	    }
	    else
	    {
	        if(GetPVarInt(playerid, "editingfamhqaction") == 7)
	        {
	        	SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully changed the custom interior for this HQ.");
   			}
   			else
   			{
   				SendClientMessageEx(playerid, COLOR_GRAD2, "You have successfully created this HQ.");
   			}
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyCustomMap] = 0;
	        SetPVarInt(playerid, "editingfamhq", 255);
	        SaveFamiliesHQ();
	    }
	}
	else if(dialogid == HQDELETE)
	{
	    if(!response)
	    {
	    }
	    else
	    {
	        format(string,128,"You have successfully deleted '%s' HQ", FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyName]);
	        SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrancePickup] );
			DestroyPickupEx( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitPickup] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntranceText] );
			DestroyDynamic3DTextLabel( FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExitText] );
			FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyEntrance][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][0] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][1] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][2] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyExit][3] = 0.0;
	        FamilyInfo[GetPVarInt(playerid, "editingfamhq")][FamilyInterior] = 0;
	        SetPVarInt(playerid, "editingfamhqaction", 0);
	        SetPVarInt(playerid, "editingfamhq", 255);
	        TogglePlayerControllable(playerid, true);
	        SaveFamiliesHQ();
	    }
	}
	else if(dialogid == DIALOG_CDEDITPARK)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdveh") != -1 &&  GetPVarInt(playerid, "editingcdvehpos") == 1 || GetPVarInt(playerid, "editingcdvehnew"))
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d, v, text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			v = GetPVarInt(playerid, "editingcdveh");
			GetVehiclePos(CarDealershipInfo[d][cdVehicleId][v], x, y, z);
	        GetVehicleZAngle(CarDealershipInfo[d][cdVehicleId][v], a);
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawnX][v] = x;
                 CarDealershipInfo[d][cdVehicleSpawnY][v] = y;
                 CarDealershipInfo[d][cdVehicleSpawnZ][v] = z;
                 CarDealershipInfo[d][cdVehicleSpawnAngle][v] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
                 SetPVarInt(playerid, "editingcdvehnew", 0);
                 DestroyDynamic3DTextLabel(CarDealershipInfo[d][cdVehicleLabel][v]);
	             DestroyVehicle(CarDealershipInfo[d][cdVehicleId][v]);
	             new carcreated;
	             carcreated = CreateVehicleEx(CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawnX][v], CarDealershipInfo[d][cdVehicleSpawnY][v], CarDealershipInfo[d][cdVehicleSpawnZ][v], CarDealershipInfo[d][cdVehicleSpawnAngle][v], 0, 0, 6);
		         format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[d][cdVehicleCost][v]);
                 CarDealershipInfo[d][cdVehicleLabel][v] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,8.0,INVALID_PLAYER_ID,carcreated);
	             CarDealershipInfo[d][cdVehicleId][v] = carcreated;
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			     ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
			new Float: x, Float: y, Float: z, Float: a;
			new d;
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
			d = GetPVarInt(playerid, "editingcd");
			if(IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
		    {
			     CarDealershipInfo[d][cdVehicleSpawn][0] = x;
                 CarDealershipInfo[d][cdVehicleSpawn][1] = y;
                 CarDealershipInfo[d][cdVehicleSpawn][2] = z;
                 CarDealershipInfo[d][cdVehicleSpawn][3] = a;
                 SetPVarInt(playerid, "editingcdvehpos", 0);
	             TogglePlayerControllable(playerid, true);
	             new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
			     ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			     SavecDealership(d);
			}
			else
			{
                 SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
			}
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 1)
		{
            new listitems[] = "1 Edit Model\n2 Edit Cost\n3 Edit Park\n4 Delete Vehicle";
			ShowPlayerDialog(playerid,DIALOG_CDEDITONE,DIALOG_STYLE_LIST,"Car Dealership:", listitems,"Select","Cancel");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
		else if(!response && GetPVarInt(playerid, "editingcd") != -1 && GetPVarInt(playerid, "editingcdvehpos") == 2)
		{
            new listitems[] = "1 Vehicle Spawn\n2 Radius\n3 Dealership Name\n4 Price";
		    ShowPlayerDialog(playerid,DIALOG_CDUPGRADE,DIALOG_STYLE_LIST,"Choose an item to continue", listitems,"Select","Cancel");
			TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcdvehpos", 0);
		}
	}
	else if(dialogid == DIALOG_CDNEWVEH)
	{ // car dealership dialog
		if(response && GetPVarInt(playerid, "editingcd") != -1)
		{
			new modelid, d;
			new Float: x, Float: y, Float: z, Float: a;
			new text_info[128];
			d = GetPVarInt(playerid, "editingcd");
			GetPlayerPos(playerid,x,y,z);
	        GetPlayerFacingAngle(playerid, a);
	        if (!IsNumeric(inputtext)) return SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: Model ID must be numbers.");
            if (IsPlayerInRangeOfPoint(playerid, CarDealershipInfo[d][cdRadius], CarDealershipInfo[d][cdEntranceX], CarDealershipInfo[d][cdEntranceY], CarDealershipInfo[d][cdEntranceZ]))
	        {
	             modelid = strval(inputtext);
	             if(modelid < 400 || modelid > 611) { SendClientMessageEx(playerid, COLOR_GREY, "   Vehicle Number can't be below 400 or above 611 !"); return 1; }
			     if(IsWeaponisedVehicle(modelid)) { SendClientMessageEx(playerid, COLOR_GREY, "  You can't choose a restricted vehicle!"); return 1; }
				 new cdvehicleid = CreateCarDealershipVehicle(d, modelid, x, y, z, a, 1337);
	             if(cdvehicleid == -1)
		         {
		             SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Car couldn't be created.");
		         }
	             else
	             {
					 PutPlayerInVehicle(playerid, CarDealershipInfo[d][cdVehicleId][cdvehicleid], 0);
                     format(text_info, sizeof(text_info), " Car Dealership Vehicle created with Vehicle ID %d.", cdvehicleid-1);
		             SendClientMessageEx(playerid, COLOR_GRAD1, text_info);
		             SendClientMessageEx(playerid, COLOR_GRAD2, " Please stand where you want to add your new vehicle.");
				     SendClientMessageEx(playerid, COLOR_GRAD2, " Once ready press the fire button.");
				     SetPVarInt(playerid, "editingcdvehnew", 1);
		             SetPVarInt(playerid, "editingcdveh", cdvehicleid);
	             }
	        }
	        else
	        {
                 SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You are out of this Car Dealership radius, please try again.");
                 TogglePlayerControllable(playerid, true);
	        }
		}
		else
		{
            TogglePlayerControllable(playerid, true);
			SetPVarInt(playerid, "editingcd", -1);
		}
	}
	else if(dialogid == DIALOG_CDBUY)
	{

	    // Account Eating Bug Fix
	    if(!IsPlayerInAnyVehicle(playerid))
		{
		    TogglePlayerControllable(playerid, 1);
			SendClientMessageEx(playerid,COLOR_GRAD2,"You need to be in the vehicle you wish to purchase.");
			return 1;
		}

		new vehicleid = GetPlayerVehicleID(playerid);
		new v = GetCarDealershipVehicleId(vehicleid);
		new d = GetCarDealershipId(vehicleid);
		if(response)
		{
            if(CarDealershipInfo[d][cdVehicleSpawn][0] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][1] == 0.0 && CarDealershipInfo[d][cdVehicleSpawn][2] == 0.0)
            {
				SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: The owner of this Car Dealership hasn't set the purchased vehicles spawn point.");
				RemovePlayerFromVehicle(playerid);
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
				TogglePlayerControllable(playerid, 1);
				return 1;
            }
            new playervehicleid = GetPlayerFreeVehicleId(playerid);
            new carsamount = GetPlayerVehicleCount(playerid);
            if((PlayerInfo[playerid][pDonateRank] == 0 || PlayerInfo[playerid][pTempVIP] > 0) && carsamount >= 5)
			{
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars, non-VIP can only own 5 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
			}
            if(PlayerInfo[playerid][pDonateRank] == 1 && carsamount >= 6)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars, Bronze VIP can only own 6 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pDonateRank] == 2 && carsamount >= 7)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars, Silver VIP can only own 7 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pDonateRank] == 3 && carsamount >= 8)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars, Gold VIP can only own 8 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
            if(PlayerInfo[playerid][pDonateRank] >= 4 && carsamount >= 10)
            {
                SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars, Platinum+ VIP can only own 10 cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
            }
		    if(playervehicleid == -1)
		    {
		        SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can't have more cars.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
                return 1;
		    }
           	if(PlayerInfo[playerid][pDonateRank] == 0 && VehicleSpawned[playerid] >= 2)
           	{
            	SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can only have 2 vehicles spawned at a time as non-VIP. Store that vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
         	if(PlayerInfo[playerid][pDonateRank] == 1 && VehicleSpawned[playerid] >= 2)
         	{
         		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can only have 2 vehicles spawned at a time as Bronze VIP. Store that vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
         	if(PlayerInfo[playerid][pDonateRank] == 2 && VehicleSpawned[playerid] >= 2)
         	{
        		SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can only have 2 vehicles spawned at a time as Silver VIP. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
          	if(PlayerInfo[playerid][pDonateRank] == 3 && VehicleSpawned[playerid] >= 3)
          	{
  				SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can only have 3 vehicles spawned at a time as Gold VIP. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	if(PlayerInfo[playerid][pDonateRank] == 4 && VehicleSpawned[playerid] >= 5)
           	{
				SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can only have 5 vehicles spawned at a time as Platinum VIP. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	if(PlayerInfo[playerid][pDonateRank] == 5 && VehicleSpawned[playerid] >= 5)
           	{
				SendClientMessageEx(playerid, COLOR_GREY, "ERROR: You can only have 5 vehicles spawned at a time as VIP Moderator. Store one vehicle in order to purchase one.");
                RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
           	if(PlayerInfo[playerid][pDonateRank] < 0 || PlayerInfo[playerid][pDonateRank] > 5)
           	{
           	    SendClientMessageEx(playerid, COLOR_GREY, "ERROR: Invalid VIP level.");
            	RemovePlayerFromVehicle(playerid);
                new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPosEx(playerid, slx, sly, slz+1.2);
                TogglePlayerControllable(playerid, 1);
				return 1;
           	}
		    new randcolor1 = Random(0, 126);
		    new randcolor2 = Random(0, 126);
		    SetPlayerPosEx(playerid, CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2]+2);
		    TogglePlayerControllable(playerid, 1);
		    new cost;
		    if(PlayerInfo[playerid][pDonateRank] < 1)
            {
                cost = CarDealershipInfo[d][cdVehicleCost][v];
	            if(PlayerInfo[playerid][pCash] < CarDealershipInfo[d][cdVehicleCost][v])
	            {
					SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have enough money to buy this.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz+1.2);
					return 1;
	            }
                format(string, sizeof(string), " Thank you for buying at %s.", CarDealershipInfo[d][cdMessage]);
		        SendClientMessageEx(playerid, COLOR_GRAD1, string);
				PlayerInfo[playerid][pCash] -= CarDealershipInfo[d][cdVehicleCost][v];
		        CarDealershipInfo[d][cdTill] += ( CarDealershipInfo[d][cdVehicleCost][v] * 40 ) / ( 100 );
	        }
	        else
	        {
				cost = ( CarDealershipInfo[d][cdVehicleCost][v] * 80 ) / ( 100 );
	            if(PlayerInfo[playerid][pCash] < cost)
	            {
					SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You don't have enough money to buy this.");
					RemovePlayerFromVehicle(playerid);
					new Float:slx, Float:sly, Float:slz;
					GetPlayerPos(playerid, slx, sly, slz);
					SetPlayerPosEx(playerid, slx, sly, slz+1.2);
					return 1;
	            }

                format(string, sizeof(string), " Thank you for buying at %s.", CarDealershipInfo[d][cdMessage]);
		        SendClientMessageEx(playerid, COLOR_GRAD1, string);
		        PlayerInfo[playerid][pCash] -= cost;
				CarDealershipInfo[d][cdTill] += cost;
     		}
            new car = CreatePlayerVehicle(playerid, playervehicleid, CarDealershipInfo[d][cdVehicleModel][v], CarDealershipInfo[d][cdVehicleSpawn][0], CarDealershipInfo[d][cdVehicleSpawn][1], CarDealershipInfo[d][cdVehicleSpawn][2], CarDealershipInfo[d][cdVehicleSpawn][3], randcolor1, randcolor2, cost);
            SetTimerEx("PutPlayerInVeh", 2000, 0, "dd", playerid, car);
            SavecDealership(d);
		}
		else
		{
            RemovePlayerFromVehicle(playerid);
            new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPosEx(playerid, slx, sly, slz+1.2);
            TogglePlayerControllable(playerid, 1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDSELL)
	{
		if(response)
		{
			if(GetPVarInt(playerid, "editingcd") == -1) return 1;
			PlayerInfo[playerid][pCash] += (CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SellCarDealership(GetPVarInt(playerid, "editingcd"));
			PlayerPlayMusic(playerid);
			format(string, sizeof(string), "Car Dealership successfully sold for %d.", CarDealershipInfo[GetPVarInt(playerid, "editingcd")][cdPrice] / 2);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
		}
		else
		{
            SetPVarInt(playerid, "editingcd", -1);
			return 1;
		}
	}
	else if(dialogid == DIALOG_CDLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 10000)
			        {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d| Name: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialog(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any cars - where we can install this item?");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 500000)
			        {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d | Name: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialog(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any cars - where we can install this item?");
					return 1;
				}
			}
			if(listitem == 2)
			{
				if(GetPlayerVehicleCount(playerid) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 50000)
			        {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 3);
				    for(new i=0; i<MAX_PLAYERVEHICLES; i++)
	                {
					     if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d | Name: %s.",i+1,GetVehicleName(PlayerVehicleInfo[playerid][i][pvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialog(playerid, DIALOG_CDLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any cars - where we can install this item?");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDLOCKMENU)
	{
		if(response)
		{
		if(GetPVarInt(playerid, "lockmenu") == 1)
		{
            new pvid;
            if (IsNumeric(inputtext))
	        {
				pvid = strval(inputtext)-1;
			    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    if(PlayerVehicleInfo[playerid][pvid][pvLock] == 1)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "   You have purchased an alarm lock!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /pvlock to lock your car.");
			    PlayerInfo[playerid][pCash] -= 10000;
			    PlayerVehicleInfo[playerid][pvid][pvLock] = 1;
			    g_mysql_SaveVehicle(playerid, pvid);
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		else if(GetPVarInt(playerid, "lockmenu") == 2)
		{
		    new pvid;
            if (IsNumeric(inputtext))
	        {
	            pvid = strval(inputtext)-1;
			    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
			    {
					SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
					SetPVarInt(playerid, "lockmenu", 0);
					return 1;
				}
				if(PlayerVehicleInfo[playerid][pvid][pvLock] == 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
					SetPVarInt(playerid, "lockmenu", 0);
					return 1;
				}
				format(string, sizeof(string), "   You have purchased an electric shock lock!");
				SendClientMessageEx(playerid, COLOR_GRAD4, string);
				SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /pvlock to lock your car.");
				PlayerInfo[playerid][pCash] -= 500000;
				PlayerVehicleInfo[playerid][pvid][pvLock] = 2;
				g_mysql_SaveVehicle(playerid, pvid);
				SetPVarInt(playerid, "lockmenu", 0);
			}
		}
		else if(GetPVarInt(playerid, "lockmenu") == 3)
		{
		    new pvid;
            if (IsNumeric(inputtext))
	        {
                pvid = strval(inputtext)-1;
			    if(PlayerVehicleInfo[playerid][pvid][pvId] == INVALID_PLAYER_VEHICLE_ID)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
				    SetPVarInt(playerid, "lockmenu", 0);
	                return 1;
			    }
			    if(PlayerVehicleInfo[playerid][pvid][pvLock] == 3)
		  	    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "   You have Purchased an industrial lock!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /pvlock to lock your car.");
				PlayerInfo[playerid][pCash] -= 50000;
			    PlayerVehicleInfo[playerid][pvid][pvLock] = 3;
			    g_mysql_SaveVehicle(playerid, pvid);
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		}
	}
	else if(dialogid == DIALOG_CDGLOCKBUY)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pFMember]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 10000)
			        {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 1);
                    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d | Name: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialog(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any cars - where can we install this item?");
					return 1;
				}
			}
			if(listitem == 1)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pFMember]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 500000)
			        {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 2);
				    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d| Name: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialog(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any cars - where can we install this item?");
					return 1;
				}
			}
			if(listitem == 2)
			{
				if(GetGangVehicleCount(PlayerInfo[playerid][pFMember]) != 0)
				{
				    if(PlayerInfo[playerid][pCash] < 50000)
			        {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "   Not enough money!");
                        return 1;
					}
					SetPVarInt(playerid, "lockmenu", 3);
				    for(new i=0; i<MAX_GANG_VEHICLES; i++)
	                {
					     if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId] != INVALID_VEHICLE_ID)
					     {
		                     format(string, sizeof(string), "Vehicle %d| Name: %s.",i+1,GetVehicleName(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][i][fvId]));
		                     SendClientMessageEx(playerid, COLOR_WHITE, string);
					     }
				    }
				    ShowPlayerDialog(playerid, DIALOG_CDGLOCKMENU, DIALOG_STYLE_INPUT, "24-7;"," Select a vehicle you wish to install this on:", "Select", "Cancel");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You don't have any cars - where can we install this item?");
					return 1;
				}
			}
		}
	}
	if(dialogid == DIALOG_CDGLOCKMENU)
	{
		if(response)
		{
		if(GetPVarInt(playerid, "lockmenu") == 1)
		{
            new fvid;
            if (IsNumeric(inputtext))
	        {
				fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvId] == INVALID_VEHICLE_ID)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvLock] == 1)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "   You have purchased an alarm lock!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /gvlock to lock your family car.");
			    PlayerInfo[playerid][pCash] -= 10000;
			    FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvLock] = 1;
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		else if(GetPVarInt(playerid, "lockmenu") == 2)
		{
		    new fvid;
            if (IsNumeric(inputtext))
	        {
	            fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvId] == 0)
			    {
					SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
					SetPVarInt(playerid, "lockmenu", 0);
					return 1;
				}
				if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvLock] == 2)
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
					SetPVarInt(playerid, "lockmenu", 0);
					return 1;
				}
				format(string, sizeof(string), "   You have purchased an electric shock lock!");
				SendClientMessageEx(playerid, COLOR_GRAD4, string);
				SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /gvlock to lock your family car.");
				PlayerInfo[playerid][pCash] -= 500000;
				FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvLock] = 2;
				SetPVarInt(playerid, "lockmenu", 0);
			}
		}

		else if(GetPVarInt(playerid, "lockmenu") == 3)
		{
		    new fvid;
            if (IsNumeric(inputtext))
	        {
                fvid = strval(inputtext)-1;
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvId] == 0)
			    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You don't have a vehicle in this slot.");
				    SetPVarInt(playerid, "lockmenu", 0);
	                return 1;
			    }
			    if(FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvLock] == 3)
		  	    {
				    SendClientMessageEx(playerid, COLOR_GRAD4, "ERROR: You already have this item installed on this vehicle.");
				    SetPVarInt(playerid, "lockmenu", 0);
				    return 1;
			    }
			    format(string, sizeof(string), "   You have Purchased an industrial lock!");
			    SendClientMessageEx(playerid, COLOR_GRAD4, string);
			    SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /gvlock to lock your family car.");
			    PlayerInfo[playerid][pCash] -= 50000;
			    FamilyVehicleInfo[PlayerInfo[playerid][pFMember]][fvid][fvLock] = 3;
			    SetPVarInt(playerid, "lockmenu", 0);
		    }
		}
		}
	}
	if(dialogid == 7483) // VIP Locker /viplocker
	{
		if(response)
		{
			if(listitem == 0)
			{
 				new Float:health;
 				GetPlayerHealth(playerid, health);
				new hpint = floatround( health, floatround_round );
		    	if( hpint >= 100 )
				{
  					SendClientMessageEx(playerid, COLOR_GREY, "You already have full health.");
	 				return 1;
	   			}

			    SetPlayerHealth(playerid, 100);
				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have used a first aid kit, you now have 100.0 HP.");
			}
			if(listitem == 1)
			{
				new Float:armour;
				GetPlayerArmour(playerid, armour);
				if(armour >= 100)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You already have full armor.");
					return 1;
				}
				if(PlayerInfo[playerid][pDonateRank] == 1)
				{
					if(GetPlayerCash(playerid) < 15000)
			    	{
			        	SendClientMessageEx(playerid, COLOR_GREY,"You can't afford the $15000!");
			        	return 1;
			    	}
					GivePlayerCash(playerid, -15000);
					SetPlayerArmour(playerid, 100);
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You paid $15000 for a kevlar vest.");
				}
				else if(PlayerInfo[playerid][pDonateRank] == 2)
				{
					if(GetPlayerCash(playerid) < 10000)
			    	{
			        	SendClientMessageEx(playerid, COLOR_GREY,"You can't afford the $10000!");
			        	return 1;
			    	}
					GivePlayerCash(playerid, -10000);
					SetPlayerArmour(playerid, 100);
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You paid $10000 for a kevlar vest.");
				}
				if(PlayerInfo[playerid][pDonateRank] >= 3)
				{
					SetPlayerArmour(playerid, 100);
				}
			}
			if(listitem == 2)
			{
				if(PlayerInfo[playerid][pDonateRank] >= 1)
				{
					switch(PlayerInfo[playerid][pDonateRank])
					{
						case 1, 2: ShowPlayerDialog(playerid, VIPWEPSMENU, DIALOG_STYLE_LIST, "VIP Weapons", "Desert Eagle (3)\nShotgun (2)\nSilenced Pistol (2)\nGolf Club (1)\nBat (1)\nDildo (1)\nSword (1)", "Select", "Cancel");
						default: ShowPlayerDialog(playerid, VIPWEPSMENU, DIALOG_STYLE_LIST, "VIP Weapons", "Desert Eagle\nShotgun\nSilenced Pistol\nGolf Club\nBat\nDildo\nSword", "Select", "Cancel");
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You must be a VIP member to access the gun lockers.");
				}
			}
			if(listitem == 3)
			{
            	if(PlayerInfo[playerid][pDonateRank] >= 2)
            	{
			    	ShowPlayerDialog( playerid, 3496, DIALOG_STYLE_INPUT, "Skin Selection","Please enter a Skin ID!\n\nNote: Skin changes are free here.", "Wear", "Cancel" );
			    }
			    else
			    {
			    	SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You must be at least Silver VIP to access the clothes corner. In the clothes corner you can get ANY skin.");
			    }
			}
			if(listitem == 4)
			{
  				if(PlayerInfo[playerid][pDonateRank] >= 2)
            	{
			    	ShowPlayerDialog(playerid, 7484, DIALOG_STYLE_LIST, "VIP: Job Center", "Detective\nLawyer\nWhore\nDrugs Dealer\nBodyguard\nMechanic\nArms Dealer\nBoxer\nDrugs Smuggler\nTaxi Driver\nCraftsman\nBartender\nTrucker\nPizza Boy", "Proceed", "Cancel");
		    	}
			    else
			    {
			    	SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You must be at least Silver VIP to access the job center.");
			    }
			}
			if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, 7486, DIALOG_STYLE_LIST, "VIP: VIP Color", "On\nOff", "Proceed", "Cancel");
			}
		}
	}
	if(dialogid == 7484)
	{
	    if(!response) return 1;
	    switch(listitem)
	    {
	        case 0: // Detective
	        {
	            SetPVarInt(playerid, "jobSelection", 1);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 1: // Lawyer
	        {
	            SetPVarInt(playerid, "jobSelection", 2);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 2: // Whore
	        {
	            SetPVarInt(playerid, "jobSelection", 3);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 3: // Drugs Dealer
	        {
	            SetPVarInt(playerid, "jobSelection", 4);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 4: // Bodyguard
	        {
	            SetPVarInt(playerid, "jobSelection", 8);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 5: // Mechanic
	        {
	            SetPVarInt(playerid, "jobSelection", 7);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 6: // Arms Dealer
	        {
	            SetPVarInt(playerid, "jobSelection", 9);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 7: // Boxer
	        {
	            SetPVarInt(playerid, "jobSelection", 12);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 8: // Drugs Smuggler
	        {
	            SetPVarInt(playerid, "jobSelection", 14);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 9: // Taxi Driver
	        {
	            SetPVarInt(playerid, "jobSelection", 17);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 10: // Craftsman
	        {
	            SetPVarInt(playerid, "jobSelection", 18);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 11: // Bartender
	        {
	            SetPVarInt(playerid, "jobSelection", 19);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 12: // Trucker
	        {
	            SetPVarInt(playerid, "jobSelection", 20);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	        case 13: // Pizza Boy
	        {
	            SetPVarInt(playerid, "jobSelection", 21);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "VIP: Job Center", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
	        }
	    }
	}
	if(dialogid == 7485)
	{
	    if(!response) return 1;

	    switch(listitem)
	    {
	        case 0:
	        {
	        	PlayerInfo[playerid][pJob] = GetPVarInt(playerid, "jobSelection");
	        	SendClientMessageEx(playerid, COLOR_YELLOW, "You have changed your first job!");
			}
	        case 1:
			{
		 		PlayerInfo[playerid][pJob2] = GetPVarInt(playerid, "jobSelection");
		 		SendClientMessageEx(playerid, COLOR_YELLOW, "You have changed your second job!");
			}
	    }
	}
	if(dialogid == 7486)
	{
	    if(!response) return 1;

        if(PlayerInfo[playerid][pWantedLevel] >= 6)
        {
            SendClientMessageEx(playerid, COLOR_YELLOW, "You cannot use this as Most Wanted!");
            return 1;
		}
	    switch(listitem)
	    {
	        case 0:
	        {
				SetPlayerColor(playerid, COLOR_VIP);
	        	SendClientMessageEx(playerid, COLOR_YELLOW, "You have turned on your VIP Name Color!");
			}
	        case 1:
			{
		 		SetPlayerToTeamColor(playerid);
		 		SendClientMessageEx(playerid, COLOR_YELLOW, "You have turned off your VIP Name Color!");
			}
	    }
	}
	if(dialogid == STOREMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if (GetPlayerCash(playerid) >= 500)
				{
					new randphone = 99999 + random(900000);//minimum 1000  max 9999
					new query[128];
					SetPVarInt(playerid, "WantedPh", randphone);
					SetPVarInt(playerid, "CurrentPh", PlayerInfo[playerid][pPnumber]);
					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        SetPVarInt(playerid, "PhChangeCost", 400);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $500, you pay $400.");
					}
					else
					{
						SetPVarInt(playerid, "PhChangeCost", 500);
					}
					format(query, sizeof(query), "SELECT `Username` FROM `accounts` WHERE `PhoneNr` = '%d'",randphone);
					mysql_function_query(MainPipeline, query, true, "OnPhoneNumberCheck", "ii", playerid, 2);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= 5000)
				{
					PlayerInfo[playerid][pPhoneBook] = 1;
					format(string, sizeof(string), "Phonebook purchased, you can now look up other player's numbers.");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /number <id/name>.");
 					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -4000);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $5000, you paid $4000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
				else
				{
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= 500)
				{
					PlayerInfo[playerid][pDice] = 1;
					format(string, sizeof(string), "Dice purchased.");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
 					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -400);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $500, you paid $400.");
					}
					else
					{
						GivePlayerCash(playerid, -500);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= 50)
				{
					Condom[playerid] ++;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "Condom Purchased.");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -40);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50, you paid $40.");
					}
					else
					{
						GivePlayerCash(playerid, -50);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 4)
			{
				if (GetPlayerCash(playerid) >= 50)
				{
					GivePlayerCash(playerid, -50);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessageEx(playerid, COLOR_GRAD4, "Music Player purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /music");
					PlayerInfo[playerid][pCDPlayer] = 1;
					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -40);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50, you paid $40.");
					}
					else
					{
						GivePlayerCash(playerid, -50);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 5)
			{
				if (GetPlayerCash(playerid) >= 200)
				{
					if(PlayerInfo[playerid][pSpraycan] < 20) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pSpraycan] += 10;
						SendClientMessageEx(playerid, COLOR_GRAD4, "10 Spraycans purchased.");
						SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /colorcar or /paintcar while inside a vehicle.");
						if(PlayerInfo[playerid][pDonateRank] >= 1)
						{
							GivePlayerCash(playerid, -160);
							SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $200, you paid $160.");
						}
						else
						{
							GivePlayerCash(playerid, -200);
						}
					}
					else SendClientMessageEx(playerid, COLOR_GRAD4, "You can't hold any more of this item!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 6)
			{
				if (GetPlayerCash(playerid) >= 1000)
				{
					if(PlayerInfo[playerid][pRope] < 8) {
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerInfo[playerid][pRope] += 3;
						SendClientMessageEx(playerid, COLOR_GRAD4, "3 Ropes purchased.");
						SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /tie while driving a car to tie someone.");
						if(PlayerInfo[playerid][pDonateRank] >= 1)
						{
							GivePlayerCash(playerid, -800);
							SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $1000, you paid $800.");
						}
						else
						{
							GivePlayerCash(playerid, -1000);
						}
					}
					else SendClientMessageEx(playerid, COLOR_GRAD4, "You can't hold any more of this item!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			/*if(listitem == 6)
			{
				if(PlayerInfo[playerid][pCut] == 0)
				{
					PlayerInfo[playerid][pCut] = 1;
					format(string, sizeof(string), "   You have Purchased a Cutter!");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
					SendClientMessageEx(playerid, COLOR_YELLOW, "HINT: You can now use /cut [rope/carwires] to get out of a bind");
					GivePlayerCash(playerid, -10);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You already have this item.");
					return 1;
				}
			}
			if(listitem == 7)
			{
				GivePlayerCash(playerid, -50);
				GivePlayerValidWeapon(playerid, 43, 99999);
				format(string, sizeof(string), "   You have Purchased a Camera");
				SendClientMessageEx(playerid, COLOR_GRAD4, string);
				SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Remember Look into the View Finder, and Take a Picture");
			}
			if(listitem == 8)
			{
				GivePlayerCash(playerid, -45);
				SendClientMessageEx(playerid, COLOR_GRAD4, "You purchased a Bouque of Flowers");
				GivePlayerValidWeapon(playerid, 14, 99999);
			}*/
			if(listitem == 7)
			{
				if (GetPlayerCash(playerid) >= 50)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pCigar] = 10;
					SendClientMessageEx(playerid, COLOR_GRAD4, "10 cigars purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /usecigar to use your cigars. Left mouse button to smoke it, F to throw it away.");
  					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -40);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50, you paid $40.");
					}
					else
					{
						GivePlayerCash(playerid, -50);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 8)
			{
				if (GetPlayerCash(playerid) >= 10)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pSprunk] = 1;
					SendClientMessageEx(playerid, COLOR_GRAD4, "Sprunk purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /usesprunk to drink a can of Sprunk. Left mouse button to take a sip, F to throw it away.");
  					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -8);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $10, you paid $8.");
					}
					else
					{
						GivePlayerCash(playerid, -10);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 9)
			{
				if (GetPlayerCash(playerid) >= 5000)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pLock] = 1;
					SendClientMessageEx(playerid, COLOR_GRAD4, "Vehicle Lock purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /lock to lock your vehicle.");
  					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -4000);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $5000, you paid $4000.");
					}
					else
					{
						GivePlayerCash(playerid, -5000);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 10)
			{
				if(GetPlayerCash(playerid) >= 50000)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pRadio] = 1;
					PlayerInfo[playerid][pRadioFreq] = 1;
					SendClientMessageEx(playerid, COLOR_GRAD4, "Portable radio purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /pr to talk over your portable radio.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /setfreq to set the frequency of your portable radio.");
				    if(PlayerInfo[playerid][pDonateRank] >= 1)
					{
						GivePlayerCash(playerid, -40000);
						SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -50000);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 11)
			{
				if (GetPlayerCash(playerid) >= 200)
				{
				    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					GivePlayerValidWeapon(playerid, 43, 99999);
					SendClientMessageEx(playerid, COLOR_GRAD4, "Camera purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Remember look into the viewfinder and take a picture.");
  					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				        GivePlayerCash(playerid, -160);
				        SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $200, you paid $160.");
					}
					else
					{
						GivePlayerCash(playerid, -200);
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 12)
			{
				if (GetPlayerCash(playerid) >= 1000)
				{
				    ShowPlayerDialog( playerid, LOTTOMENU, DIALOG_STYLE_INPUT, "Lottery Ticket Selection","Please enter a Lotto Number!\n\nNote: Lottery Tickets cost $1000.", "Buy", "Cancel" );

				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD4, "You not have the cash for this item!");
				}
			}
			if(listitem == 13)
			{
			    if(GetPlayerCash(playerid) >= 500)
			    {
			        if(PlayerInfo[playerid][pChecks] == 0 && PlayerInfo[playerid][pDonateRank] == 0)
			    	{
				        GivePlayerCash(playerid, -500);
				        PlayerInfo[playerid][pChecks] += 10;
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					    SendClientMessageEx(playerid, COLOR_GRAD4, "Checkbook purchased, you now have 10 checks.");
					    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /writecheck to write a check.");
					    return 1;
				    }
				    if(PlayerInfo[playerid][pChecks] == 0 && PlayerInfo[playerid][pDonateRank] >= 1)
			    	{
				        GivePlayerCash(playerid, -400);
				        PlayerInfo[playerid][pChecks] += 10;
					    PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					    SendClientMessageEx(playerid, COLOR_GRAD4, "Checkbook purchased, you now have 10 checks.");
					    SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /writecheck to write a check.");
					    SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $500, you paid $400.");
					    return 1;
				    }
					else
					{
					    SendClientMessageEx(playerid, COLOR_GREY, "You still have unused checks, please use them before getting another checkbook.");
					}
			    }
			    else
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough cash.");
			    }
			}
			/*if(listitem == 14)
			{
				if(GetPlayerCash(playerid) >= 6000)
				{
					if(StorageInfo[playerid][0][sStorage] == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "You already have a Bag! Use /storagehelp for a list of commands.");

					if(PlayerInfo[playerid][pDonateRank] > 0) {
						GivePlayerCash(playerid, -5000);
						SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received discount off this product. Instead of paying $6000, you paid $5000.");
					}
					else {
						GivePlayerCash(playerid, -6000);
					}

					StorageInfo[playerid][0][sStorage] = 1;
					SendClientMessageEx(playerid, COLOR_GRAD4, "Bag purchased.");
					SendClientMessageEx(playerid, COLOR_WHITE, "HINT: Type /storagehelp for a list of commands.");
				}
				else return SendClientMessageEx(playerid, COLOR_GREY, "You do not have enough cash.");
			}*/
		}
	}
	if(dialogid == SHOPMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
			if (GetPlayerCash(playerid) >= 50)
			{
				GivePlayerCash(playerid, -50);
				GivePlayerValidWeapon(playerid, 10, 99999);
				SendClientMessageEx(playerid, COLOR_GRAD4, "Purple dildo purchased, you can now pleasure yourself.");
				}
				else
				{
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 1)
			{
				if (GetPlayerCash(playerid) >= 100)
				{
					GivePlayerValidWeapon(playerid, 11, 99999);
					format(string, sizeof(string), "Short Vibrator purchased, you can now pleasure yourself.");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -100);
				}
				else
				{
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 2)
			{
				if (GetPlayerCash(playerid) >= 100)
				{
					GivePlayerValidWeapon(playerid, 12, 99999);
					format(string, sizeof(string), "Long Vibrator purchased, you can now pleasure yourself.");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -100);
				}
				else
				{
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
			if(listitem == 3)
			{
				if (GetPlayerCash(playerid) >= 50)
				{
					GivePlayerValidWeapon(playerid, 13, 99999);
					format(string, sizeof(string), "White Dildo purchased, you can now pleasure yourself.");
					SendClientMessageEx(playerid, COLOR_GRAD4, string);
					GivePlayerCash(playerid, -50);
				}
				else
				{
				SendClientMessageEx(playerid, COLOR_GRAD4, "You don't have the cash for this item!");
				}
			}
		}
	}
	if(dialogid == DIALOG_WHEELS)
	{
	    if(response) switch(listitem)
	    {
			case 0:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1025);
				format(string, sizeof(string), "Administrator %s has given you Off-Road Wheels!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Off-Road Wheels!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 1:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1073);
				format(string, sizeof(string), "Administrator %s has given you Shadow Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Shadow Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 2:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1074);
				format(string, sizeof(string), "Administrator %s has given you Mega Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Mega Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 3:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1075);
				format(string, sizeof(string), "Administrator %s has given you Rimshine Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Rimshine Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 4:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1076);
				format(string, sizeof(string), "Administrator %s has given you Wire Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Wire Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 5:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1077);
				format(string, sizeof(string), "Administrator %s has given you Classic Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Classic Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 6:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1078);
				format(string, sizeof(string), "Administrator %s has given you Twist Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Twist Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 7:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1079);
				format(string, sizeof(string), "Administrator %s has given you Cutter Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Cutter Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 8:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1080);
				format(string, sizeof(string), "Administrator %s has given you {E8E800}Switch Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s {E8E800}Switch Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 9:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1081);
				format(string, sizeof(string), "Administrator %s has given you Grove Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Grove Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 10:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1082);
				format(string, sizeof(string), "Administrator %s has given you Import Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Import Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 11:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1083);
				format(string, sizeof(string), "Administrator %s has given you Dollar Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Dollar Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 12:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1084);
				format(string, sizeof(string), "Administrator %s has given you Trance Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Trance Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
			case 13:
			{
				AddVehicleComponent(GetPlayerVehicleID(GiveWheelsTo[playerid]), 1085);
				format(string, sizeof(string), "Administrator %s has given you Atomic Rims!", GetPlayerNameEx(playerid));
				SendClientMessageEx(GiveWheelsTo[playerid], COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You gave %s Atomic Rims!", GetPlayerNameEx(GiveWheelsTo[playerid]));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerPlaySound(GiveWheelsTo[playerid],1133,0.0,0.0,0.0);
				GiveWheelsTo[playerid] = INVALID_PLAYER_ID;
			}
	    }
	}
	if(dialogid == GIVEKEYS)
	{
	    if(response)
	    {
			if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You can't give out keys to a non-existent, impounded vehicle or stored vehicle.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You already gave someone the keys of this car.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
	        if(PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] != INVALID_PLAYER_ID)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "That player already has keys from a different car.");
	            GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	            return 1;
	        }
			PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = GiveKeysTo[playerid];
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeys] = listitem;
			PlayerInfo[GiveKeysTo[playerid]][pVehicleKeysFrom] = playerid;
			format(string, sizeof(string), "%s has given you the keys for their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessageEx(GiveKeysTo[playerid], COLOR_GRAD2, string);
			format(string, sizeof(string), "You gave %s the keys for your %s.", GetPlayerNameEx(GiveKeysTo[playerid]), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			GiveKeysTo[playerid] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == REMOVEKEYS)
	{
	    if(response)
	    {
	        if(PlayerVehicleInfo[playerid][listitem][pvId] == INVALID_PLAYER_VEHICLE_ID) {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You can't remove the keys of a non-existent, impounded vehicle or stored vehicle.");
	            return 1;
			}
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] != PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId])
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "This player doesn't have the keys of this car.");
	            return 1;
	        }
	        if(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] == INVALID_PLAYER_ID)
	        {
	            SendClientMessageEx(playerid, COLOR_GRAD2, "You have not given anyone the keys for this car.");
	            return 1;
	        }
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
			format(string, sizeof(string), "%s has taken the keys of their %s.", GetPlayerNameEx(playerid), GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]));
			SendClientMessageEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId], COLOR_GRAD2, string);
			format(string, sizeof(string), "You took the keys of your %s from %s.", GetVehicleName(PlayerVehicleInfo[playerid][listitem][pvId]),GetPlayerNameEx(PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId]));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			PlayerVehicleInfo[playerid][listitem][pvAllowedPlayerId] = INVALID_PLAYER_ID;
	    }
	}
	if(dialogid == MPSPAYTICKETSCOP)
	{
	    if(response)
	    {
			new
				szMessage[128],
				iTargetID = GetPVarInt(playerid, "vRel");

			if(PlayerVehicleInfo[iTargetID][listitem][pvTicket]) {
				format(szMessage, sizeof(szMessage), "You have paid the $%d ticket on %s's %s.", PlayerVehicleInfo[iTargetID][listitem][pvTicket], GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);

				format(szMessage, sizeof(szMessage), "%s has paid all tickets on your %s (%i).", GetPlayerNameEx(playerid), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400], PlayerVehicleInfo[iTargetID][listitem][pvTicket]);
				SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);
				PlayerVehicleInfo[iTargetID][listitem][pvTicket] = 0;
				g_mysql_SaveVehicle(iTargetID, listitem);
			}
			else if(PlayerVehicleInfo[iTargetID][listitem][pvImpounded])
			{
				if(!vehicleSpawnCountCheck(iTargetID))
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player has too many vehicles out of storage for this vehicle to be released.");
					return 1;
				}

				format(szMessage, sizeof(szMessage), "You have released %s's %s.", GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "%s has released your %s from the impound.", GetPlayerNameEx(playerid), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendClientMessageEx(iTargetID, COLOR_LIGHTBLUE, szMessage);

				format(szMessage, sizeof(szMessage), "HQ: %s has released %s's %s from the impound.", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetID), VehicleName[PlayerVehicleInfo[iTargetID][listitem][pvModelId] - 400]);
				SendRadioMessage(PlayerInfo[playerid][pMember], RADIO, szMessage);

				PlayerVehicleInfo[iTargetID][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[iTargetID][listitem][pvPosX] = 2022.7893;
				PlayerVehicleInfo[iTargetID][listitem][pvPosY] = -1849.1111;
				PlayerVehicleInfo[iTargetID][listitem][pvPosZ] = 13.6252;
				PlayerVehicleInfo[iTargetID][listitem][pvPosAngle] = 89.0223;
				PlayerVehicleInfo[iTargetID][listitem][pvTicket] = 0;
				VehicleSpawned[iTargetID]++;
				++PlayerCars;

				PlayerVehicleInfo[iTargetID][listitem][pvId] = CreateVehicleEx(PlayerVehicleInfo[iTargetID][listitem][pvModelId], PlayerVehicleInfo[iTargetID][listitem][pvPosX], PlayerVehicleInfo[iTargetID][listitem][pvPosY], PlayerVehicleInfo[iTargetID][listitem][pvPosZ], PlayerVehicleInfo[iTargetID][listitem][pvPosAngle],PlayerVehicleInfo[iTargetID][listitem][pvColor1], PlayerVehicleInfo[iTargetID][listitem][pvColor2], -1, playerid);
				Vehicle_ResetData(PlayerVehicleInfo[iTargetID][listitem][pvId]);
				VehicleFuel[PlayerVehicleInfo[iTargetID][listitem][pvId]] = PlayerVehicleInfo[iTargetID][listitem][pvFuel];
				if(PlayerVehicleInfo[iTargetID][listitem][pvLocked] == 1) LockPlayerVehicle(iTargetID, PlayerVehicleInfo[iTargetID][listitem][pvId], PlayerVehicleInfo[iTargetID][listitem][pvLock]);
				LoadPlayerVehicleMods(iTargetID, listitem);

				g_mysql_SaveVehicle(iTargetID, listitem);
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle either does not exist, or does not need to be released or have its tickets paid.");
	    }
		return 1;
	}
	if(dialogid == MPSPAYTICKETS)
	{
	    if(response)
	    {
			new
				szMessage[128];

			if(PlayerInfo[playerid][pWantedLevel] != 0)
			{
				format(szMessage, sizeof(szMessage), "%s has attempted to pay/release their vehicles with %i active warrants.", GetPlayerNameEx(playerid), PlayerInfo[playerid][pWantedLevel]);
				SendRadioMessage(1, DEPTRADIO, szMessage);
				SendRadioMessage(2, DEPTRADIO, szMessage);
				SendRadioMessage(3, DEPTRADIO, szMessage);
				SendRadioMessage(5, DEPTRADIO, szMessage);
				SendRadioMessage(7, DEPTRADIO, szMessage);
				SendRadioMessage(11, DEPTRADIO, szMessage);
				SendRadioMessage(13, DEPTRADIO, szMessage);
				SendRadioMessage(16, DEPTRADIO, szMessage);
				return SendClientMessageEx(playerid, COLOR_YELLOW, "The police has been warned that you are wanted, and are on their way.");
			}
			if(PlayerVehicleInfo[playerid][listitem][pvTicket]) {
				if(GetPlayerCash(playerid) < PlayerVehicleInfo[playerid][listitem][pvTicket]) {
					return SendClientMessageEx(playerid, COLOR_GRAD2, "You don't have enough money on you to pay the ticket.");
				}
				GivePlayerCash(playerid, -PlayerVehicleInfo[playerid][listitem][pvTicket]);
				format(szMessage, sizeof(szMessage), "You have paid the $%d ticket on your %s.", PlayerVehicleInfo[playerid][listitem][pvTicket], VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400]);
				SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
				g_mysql_SaveVehicle(playerid, listitem);
			}
			else if(PlayerVehicleInfo[playerid][listitem][pvImpounded]) {

				new
					iCost = (PlayerVehicleInfo[playerid][listitem][pvPrice] / 20) + PlayerVehicleInfo[playerid][listitem][pvTicket] + (PlayerInfo[playerid][pLevel] * 3000);

				if(GetPlayerCash(playerid) < iCost) {
					return SendClientMessage(playerid, COLOR_GRAD2, "You don't have enough money on you.");
				}

    			if(!vehicleSpawnCountCheck(playerid)) {
					return SendClientMessage(playerid, COLOR_GRAD2, "You have too many vehicles spawned - store one first.");
				}

				format(szMessage, sizeof(szMessage), "You have released your %s for $%i.", VehicleName[PlayerVehicleInfo[playerid][listitem][pvModelId] - 400], iCost);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, szMessage);
				GivePlayerCash(playerid, -iCost);

				PlayerVehicleInfo[playerid][listitem][pvImpounded] = 0;
				PlayerVehicleInfo[playerid][listitem][pvSpawned] = 1;
				PlayerVehicleInfo[playerid][listitem][pvPosX] = 2022.7893;
				PlayerVehicleInfo[playerid][listitem][pvPosY] = -1849.1111;
				PlayerVehicleInfo[playerid][listitem][pvPosZ] = 13.6252;
				PlayerVehicleInfo[playerid][listitem][pvPosAngle] = 89.0223;
				PlayerVehicleInfo[playerid][listitem][pvTicket] = 0;
				VehicleSpawned[playerid]++;
				++PlayerCars;

				iCost = CreateVehicleEx(PlayerVehicleInfo[playerid][listitem][pvModelId], PlayerVehicleInfo[playerid][listitem][pvPosX], PlayerVehicleInfo[playerid][listitem][pvPosY], PlayerVehicleInfo[playerid][listitem][pvPosZ], PlayerVehicleInfo[playerid][listitem][pvPosAngle],PlayerVehicleInfo[playerid][listitem][pvColor1], PlayerVehicleInfo[playerid][listitem][pvColor2], -1, playerid);
				PlayerVehicleInfo[playerid][listitem][pvId] = iCost;
				VehicleFuel[iCost] = PlayerVehicleInfo[playerid][listitem][pvFuel];
				if(PlayerVehicleInfo[playerid][listitem][pvLocked] == 1) LockPlayerVehicle(playerid, iCost, PlayerVehicleInfo[playerid][listitem][pvLock]);
				LoadPlayerVehicleMods(playerid, listitem);
				Vehicle_ResetData(iCost);
				g_mysql_SaveVehicle(playerid, listitem);
			}
			else SendClientMessage(playerid, COLOR_GRAD2, "This vehicle either does not exist, or does not need to be released or have its tickets paid.");
	    }
		return 1;
	}
	if(dialogid == REPORTSMENU)
	{
	    if(response)
	    {
	        if(CancelReport[playerid] == listitem) return 1;
			new reportid = ListItemReportId[playerid][listitem];
	        if(Reports[reportid][BeingUsed] == 0)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			    return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			    Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			    Reports[reportid][BeingUsed] = 0;
			    return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s has accepted the report from %s (ID: %i RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), Reports[reportid][ReportFrom], reportid);
			ABroadCast(COLOR_ORANGE, string, 2);
			AddReportToken(playerid); // Report Tokens
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
			    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.");
			}
			else
			{
			    format(string, sizeof(string), "%s has accepted your report and is reviewing it, you can /reply to send messages to the admin reviewing your report.", GetPlayerNameEx(playerid));
			    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			}
			PlayerInfo[playerid][pAcceptReport]++;
			Reports[reportid][ReplyTimerr] = SetTimerEx("ReplyTimer", 30000, 0, "d", reportid);
			Reports[reportid][CheckingReport] = playerid;
			//Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			//strmid(Reports[reportid][Report], "None", 0, 4, 4);
	    }
	    else
	    {
	        if(CancelReport[playerid] == listitem) return 1;
	        new reportid = ListItemReportId[playerid][listitem];
	        if(Reports[reportid][BeingUsed] == 0)
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "   That report ID is not being used!");
			    return 1;
			}
			if(!IsPlayerConnected(Reports[reportid][ReportFrom]))
			{
			    SendClientMessageEx(playerid, COLOR_GREY, "   The reporter has disconnected !");
			    Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			    Reports[reportid][BeingUsed] = 0;
			    return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s has trashed the report from %s (RID: %i).", GetPlayerNameEx(playerid), GetPlayerNameEx(Reports[reportid][ReportFrom]), reportid);
			ABroadCast(COLOR_ORANGE, string, 2);
			if(PlayerInfo[playerid][pAdmin] == 1)
			{
			    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, "An admin has marked your report invalid. It will not be reviewed.");
			}
			else
			{
			    format(string, sizeof(string), "%s has marked your report invalid. It will not be reviewed.", GetPlayerNameEx(playerid));
			    SendClientMessageEx(Reports[reportid][ReportFrom], COLOR_WHITE, string);
			}
			PlayerInfo[playerid][pTrashReport]++;
			Reports[reportid][ReportFrom] = INVALID_PLAYER_ID;
			Reports[reportid][BeingUsed] = 0;
			Reports[reportid][TimeToExpire] = 0;
			new reportdialog[2048], itemid = 0;
		    for(new i = 0; i < MAX_REPORTS; i++)
			{
				if(Reports[i][BeingUsed] == 1 && itemid < 40)
				{
					ListItemReportId[playerid][itemid] = i;
					itemid++;
					if(strlen((Reports[i][Report])) > 92)
					{
						new firstline[128], secondline[128];
						strmid(firstline, Reports[i][Report], 0, 88);
						strmid(secondline, Reports[i][Report], 88, 128);
						format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | Report: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, firstline);
						format(reportdialog, sizeof(reportdialog), "%s%s", reportdialog, secondline);
						ListItemReportId[playerid][itemid] = i;
						itemid++;
					}
					else format(reportdialog, sizeof(reportdialog), "%s%s(ID:%i) | Report: %s", reportdialog, GetPlayerNameEx(Reports[i][ReportFrom]), Reports[i][ReportFrom], i, (Reports[i][Report]));

					format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
				}
			}
			CancelReport[playerid] = itemid;
			format(reportdialog, sizeof(reportdialog), "%s\n", reportdialog);
			format(reportdialog, sizeof(reportdialog), "%sCancel Reports", reportdialog);
			//SendClientMessageEx(playerid, COLOR_GREEN, "___________________________________________________");
			ShowPlayerDialog(playerid, REPORTSMENU, DIALOG_STYLE_LIST, "Reports", reportdialog, "Accept", "Trash");
			//strmid(Reports[reportid][Report], "None", 0, 4, 4);
	    }
	}
	/*if((dialogid == DUTY_OPTIONS) && (response))
	{
	    if(listitem == 0) // Public Duty
		{
		    if(PlayerInfo[playerid][pDuty] == 0)
		    {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Officer %s takes a badge and a gun from their locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_BLUE_COLOR);
					SetPlayerSkin(playerid, 280);
					PlayerInfo[playerid][pModel] = 280;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
			}
			else if(PlayerInfo[playerid][pDuty] == 1)
			{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Officer %s places their badge and gun in their locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					SetPlayerArmour(playerid, 0.0);
					ResetPlayerWeaponsEx(playerid);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
			}
		}
	    if(listitem == 1) // Undercover Duty
		{
		    if(PlayerInfo[playerid][pDuty] == 0)
		    {
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Officer %s takes a badge and a gun from their locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 29, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
			}
			else if(PlayerInfo[playerid][pDuty] == 1)
			{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Officer %s places their badge and gun in their locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerArmour(playerid, 0.0);
					ResetPlayerWeaponsEx(playerid);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
			}
		}
	}*/
	if(dialogid == NGMENU)
	{
 		if(response) switch(listitem)
		{
			case 0: // NG Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Soldier %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, COLOR_NG);
					SetPlayerSkin(playerid, 287);
					PlayerInfo[playerid][pModel] = 287;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 31, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
                    //ShowPlayerDialog(playerid, DUTY_OPTIONS, DIALOG_STYLE_LIST, "Duty Options","Public\nUndercover", "Select", "Cancel");
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Soldier %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			case 1: // NG Uniforms
			{
			    ShowPlayerDialog(playerid, NGMENUSKIN, DIALOG_STYLE_LIST, "NG Skins", "General\nOfficer 1\nOfficer 2\nEnlisted\nOff Duty Male\nOff Duty Female\n\
				Black Security\nWhite Security\nCarrier Worker\nTactical Outfit", "Select", "Cancel");
			}
			case 2: // NG Weapons
			{
				ShowPlayerDialog(playerid, NGMENUWEP, DIALOG_STYLE_LIST, "NG Weapons","Deagle\nSpas12\nShotgun\nMP5\nM4\nAK47\nSniper Rifle\nRifle\n\
				SDPistol\nGrenade\nTear Gas\nNitestick\nMace\nCamera\nParachute\nRocket Launcher", "Purchase", "Cancel");
			}
			case 3: // NG Undercover
			{
				ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			case 4: // NG Clear.
			{
				ShowPlayerDialog(playerid, DUTYMENU5,DIALOG_STYLE_INPUT,"NG"," Who would you like to clear?","Clear","Nevermind");
    		}
    		case 5: // NG Heal
			{
				SetPlayerArmour(playerid, 100);
    		}
			case 6: SetPlayerHealth(playerid, 100);
			case 7: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
		}
	}
	if(dialogid == NGMENUSKIN)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
			    if(PlayerInfo[playerid][pRank] == 6)
			    {
					SetPlayerSkin(playerid, 295);
					PlayerInfo[playerid][pModel] = 295;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "* Not the required rank");
				}
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pModel] = 120;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 186);
				PlayerInfo[playerid][pModel] = 240;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 287);
				PlayerInfo[playerid][pModel] = 287;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 179);
				PlayerInfo[playerid][pModel] = 179;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 191);
				PlayerInfo[playerid][pModel] = 191;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 163);
				PlayerInfo[playerid][pModel] = 163;
			}
			if(listitem == 7) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 164);
				PlayerInfo[playerid][pModel] = 164;
			}
			if(listitem == 8) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 16);
				PlayerInfo[playerid][pModel] = 16;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pModel] = 285;
			}
		}
	}
	if(dialogid == NGMENUWEP)
	{
 		if(response)
		{
 			if(listitem == 0)
			{
			    GivePlayerValidWeapon(playerid, 24, 99999);
			}
			if(listitem == 1)
			{
			    GivePlayerValidWeapon(playerid, 27, 99999);
			}
			if(listitem == 2)
			{
			    GivePlayerValidWeapon(playerid, 25, 99999);
			}
			if(listitem == 3)
			{
			    GivePlayerValidWeapon(playerid, 29, 99999);
			}
			if(listitem == 4)
			{
			    GivePlayerValidWeapon(playerid, 31, 99999);
			}
			if(listitem == 5)
			{
			    GivePlayerValidWeapon(playerid, 30, 99999);
			}
			if(listitem == 6)
			{
			    GivePlayerValidWeapon(playerid, 34, 99999);
			}
			if(listitem == 7)
			{
			    GivePlayerValidWeapon(playerid, 33, 99999);
			}
			if(listitem == 8)
			{
			    GivePlayerValidWeapon(playerid, 23, 99999);
			}
			if(listitem == 9)
			{
			    GivePlayerValidWeapon(playerid, 16, 99999);
			}
			if(listitem == 10)
			{
			    GivePlayerValidWeapon(playerid, 17, 99999);
			}
			if(listitem == 11)
			{
			    GivePlayerValidWeapon(playerid, 3, 99999);
			}
			if(listitem == 12)
			{
			    GivePlayerValidWeapon(playerid, 41, 99999);
			}
			if(listitem == 13)
			{
			    GivePlayerValidWeapon(playerid, 43, 99999);
			}
			if(listitem == 14)
			{
			    GivePlayerValidWeapon(playerid, 46, 60000);
			}
			if(listitem == 15)
			{
			    if(PlayerInfo[playerid][pRank] >= 4)
			    {
			        GivePlayerValidWeapon(playerid, 35, 99999);
			    }
			    else
			    {
			        SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use that!");
			    }
			}
		}
	}
	if(dialogid == DUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Officer %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_BLUE_COLOR);
					SetPlayerSkin(playerid, 280);
					PlayerInfo[playerid][pModel] = 280;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
                    //ShowPlayerDialog(playerid, DUTY_OPTIONS, DIALOG_STYLE_LIST, "Duty Options","Public\nUndercover", "Select", "Cancel");
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Officer %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerArmour(playerid, 0.0);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // LSPD Weapons
			{
				ShowPlayerDialog(playerid, DUTYMENU2, DIALOG_STYLE_LIST, "LSPD Equipment","Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nShotgun\nRifle\nSniper Rifle\nKevlar Vest\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // LSPD SWAT Uniform
			{
			    if(PlayerInfo[playerid][pDivision] == 5)
			    {
					SetPlayerSkin(playerid, 285);
					PlayerInfo[playerid][pModel] = 285;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_WHITE, "You are not in the SWAT division.");
				}
			}
			if(listitem == 3) // LSPD Uniforms
			{
				ShowPlayerDialog(playerid, DUTYMENU3, DIALOG_STYLE_LIST, "LSPD Uniforms","Cadet\nFemale Officer\nOfficer 1\nOfficer 2\nOfficer 3\nBlack Officer\nLatino Officer\nMotorcycle Officer\nSWAT Officer\nSergeant\nCaptain\nChief", "Put On", "Cancel");
			}
			if(listitem == 4) // LSPD Undercover Uniform
			{
				ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // LSPD Clear.
			{
				ShowPlayerDialog(playerid, DUTYMENU5,DIALOG_STYLE_INPUT,"LSPD"," Who would you like to clear?","Clear","Nevermind");
    		}
		}
	}
	if(dialogid == DUTYMENU2)
	{
 		if(response)
		{
		    if(Tax > 0) switch(listitem) {
				case 0: // LSPD Mace
				{
					GivePlayerValidWeapon(playerid, 41, 60000);
					Tax -= 20;
				}
				case 1: // LSPD Nite Stick
				{
					GivePlayerValidWeapon(playerid, 3, 60000);
					Tax -= 20;
				}
				case 2: // LSPD Deagle
				{
					GivePlayerValidWeapon(playerid, 24, 60000);
					Tax -= 500;
				}
				case 3: // LSPD Spas12 *
				{
					if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 27, 60000);
						Tax -= 10000;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SWAT division, or at least rank 2.");
					}
				}
				case 4: // LSPD mp5
				{
					GivePlayerValidWeapon(playerid, 29, 60000);
					Tax -= 400;
				}
				case 5: // LSPD m4 *
				{
					GivePlayerValidWeapon(playerid, 31, 60000);
					Tax -= 4000;
				}
				case 6: // LSPD ak-47 *
				{
					if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 30, 60000);
						Tax -= 4000;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SWAT division, or at least rank 3.");
					}
				}
				case 7: // LSPD Smoke Bomb *
				{
					if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 17, 5);
						Tax -= 800;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SWAT division, or at least rank 3.");
					}
				}
				case 8: // LSPD Shotgun
				{
					GivePlayerValidWeapon(playerid, 25, 60000);
					Tax -= 200;
				}
				case 9: // LSPD rifle
				{
					GivePlayerValidWeapon(playerid, 33, 60000);
					Tax -= 1000;
				}
				case 10: // LSPD Sniper *
				{
					if(PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pRank] >= 1)
					{
						GivePlayerValidWeapon(playerid, 34, 60000);
						Tax -= 10000;
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in the SWAT division, or at least rank 3.");
					}
				}
				case 11: // LSPD Kevlar
				{
					SetPlayerArmour(playerid, 100.0);
					Tax -= 2000;
				}
				case 12: SetPlayerHealth(playerid, 100);
				case 13: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
			else return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
		}
	}
	if(dialogid == DUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 71);
				PlayerInfo[playerid][pModel] = 71;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pModel] = 141;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 280);
				PlayerInfo[playerid][pModel] = 280;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 266);
				PlayerInfo[playerid][pModel] = 266;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 281);
				PlayerInfo[playerid][pModel] = 281;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 265);
				PlayerInfo[playerid][pModel] = 265;
			}

			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 267);
				PlayerInfo[playerid][pModel] = 267;
			}
			if(listitem == 7) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 284);
				PlayerInfo[playerid][pModel] = 284;
			}
			if(listitem == 8) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pModel] = 285;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 282);
				PlayerInfo[playerid][pModel] = 282;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 283);
				PlayerInfo[playerid][pModel] = 283;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 288);
				PlayerInfo[playerid][pModel] = 288;
			}
		}
	}
	if(dialogid == DUTYMENU4)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 223);
				PlayerInfo[playerid][pModel] = 223;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pModel] = 120;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 240);
				PlayerInfo[playerid][pModel] = 240;
			}
			if(listitem == 3) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 296);
				PlayerInfo[playerid][pModel] = 296;
			}
			if(listitem == 4) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 137);
				PlayerInfo[playerid][pModel] = 137;
			}
			if(listitem == 5) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 214);
				PlayerInfo[playerid][pModel] = 214;
			}
			if(listitem == 6) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 147);
				PlayerInfo[playerid][pModel] = 147;
			}
			if(listitem == 7) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 150);
				PlayerInfo[playerid][pModel] = 150;
			}
			if(listitem == 8) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 201);
				PlayerInfo[playerid][pModel] = 201;
			}
			if(listitem == 9) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 162);
				PlayerInfo[playerid][pModel] = 162;
			}
			if(listitem == 10) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 29);
				PlayerInfo[playerid][pModel] = 29;
			}
			if(listitem == 11) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 270);
				PlayerInfo[playerid][pModel] = 270;
			}
			if(listitem == 12) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 59);
				PlayerInfo[playerid][pModel] = 59;
			}
		}
	}
    if(dialogid == DUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
    if(dialogid == CGDUTYMENU)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		    	{
	   		   	    if(PlayerInfo[playerid][pDuty]==0)
					{
						format(string, sizeof(string), "* Coast Guardsman %s clocked in and is now on duty.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerColor(playerid,TEAM_MED_COLOR);
						SetPlayerArmour(playerid, 100.0);
	   					GivePlayerValidWeapon(playerid, 24, 99999);
						GivePlayerValidWeapon(playerid, 41, 99999);
						GivePlayerValidWeapon(playerid, 3, 99999);
					 	OnDuty[playerid] = 1;
						PlayerInfo[playerid][pDuty] = 1;
					}
					else if(PlayerInfo[playerid][pDuty]==1)
					{
						format(string, sizeof(string), "* Coast Guardsman %s clocked out and is now off duty.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetPlayerWeaponsEx(playerid);
	     				SetPlayerArmour(playerid, 0);
      					OnDuty[playerid] = 0;
						PlayerInfo[playerid][pDuty] = 0;
						SetPlayerColor(playerid,TEAM_HIT_COLOR);
					}
		        }
		        case 1:
		        {
		            ShowPlayerDialog(playerid, CGDUTYMENU2, DIALOG_STYLE_LIST, "Coastguard Weapons","Mace			$20\nDesert Eagle			$500\nShotgun			$3000\nM4				$4000\nFire Extinguisher             $20\nKevlar Vest		$2000\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
		        }
		        case 2:
		        {
		            ShowPlayerDialog(playerid, CGDUTYMENU3, DIALOG_STYLE_LIST, "Coastguard Uniforms","Camouflage\nUniform 1\nUniform 2", "Put On", "Cancel");
		        }
		        case 3:
		        {
		            ShowPlayerDialog(playerid, CGDUTYMENU4,DIALOG_STYLE_INPUT,"Coastguard"," Who would you like to clear?","Clear","Nevermind");
		        }
		    }
		}
	}
	if(dialogid == CGDUTYMENU2)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			if(listitem == 0) // Coastguard Mace
			{
				GivePlayerValidWeapon(playerid, 41, 60000);
				Tax -= 20;
			}
			else if(listitem == 1) // Coastguard Deagle
			{
				GivePlayerValidWeapon(playerid, 24, 60000);
				Tax -= 500;
			}
			else if(listitem == 2) // Coastguard Shotgun
			{
				GivePlayerValidWeapon(playerid, 25, 60000);
				Tax -= 3000;
			}
			else if(listitem == 3) // Coastguard M4
			{
				GivePlayerValidWeapon(playerid, 31, 60000);
				Tax -= 4000;
			}
			else if(listitem == 4) // Coastguard Extinguisher
			{
				GivePlayerValidWeapon(playerid, 42, 60000);
				Tax -= 20;
			}
			else if(listitem == 5) // Coastguard Kevlar
			{
				SetPlayerArmour(playerid, 100.0);
				Tax -= 2000;
			}
			else if(listitem == 6) SetPlayerHealth(playerid, 100);
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
		}
	}
    if(dialogid == CGDUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // Coastguard Uniforms
			{
				SetPlayerSkin(playerid, 287);
				PlayerInfo[playerid][pModel] = 287;
			}
			if(listitem == 1) //Coastguard Uniforms
			{
				SetPlayerSkin(playerid, 282);
				PlayerInfo[playerid][pModel] = 282;
			}
			if(listitem == 2) // Coastguard Uniforms
			{
				SetPlayerSkin(playerid, 61);
				PlayerInfo[playerid][pModel] = 61;
			}
		}
	}
    if(dialogid == CGDUTYMENU4)
	{
	    if(response)
    	{
            new giveplayerid;
			giveplayerid = ReturnUser(inputtext);
			giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Coast Guardsman %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Coast Guardsman %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
    if(dialogid == WPDUTYMENU)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0:
		    	{
	   		   	    if(PlayerInfo[playerid][pDuty]==0)
					{
						format(string, sizeof(string), "* Water Patrol Officer %s clocked in and is now on duty.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerColor(playerid, TEAM_SFPD);
						SetPlayerArmour(playerid, 100.0);
	   					GivePlayerValidWeapon(playerid, 24, 99999);
						GivePlayerValidWeapon(playerid, 41, 99999);
						GivePlayerValidWeapon(playerid, 3, 99999);
					 	OnDuty[playerid] = 1;
						PlayerInfo[playerid][pDuty] = 1;
					}
					else if(PlayerInfo[playerid][pDuty]==1)
					{
						format(string, sizeof(string), "* Water Patrol Officer %s clocked out and is now off duty.", GetPlayerNameEx(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						ResetPlayerWeaponsEx(playerid);
	     				SetPlayerArmour(playerid, 0);
      					OnDuty[playerid] = 0;
						PlayerInfo[playerid][pDuty] = 0;
						SetPlayerColor(playerid,TEAM_HIT_COLOR);
					}
		        }
		        case 1:
		        {
		            ShowPlayerDialog(playerid, WPDUTYMENU2, DIALOG_STYLE_LIST, "Water Patrol Weapons","Mace			$20\nDesert Eagle			$500\nShotgun			$3000\nM4				$4000\nFire Extinguisher             $20\nKevlar Vest		$2000\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
		        }
		        case 2:
		        {
		            ShowPlayerDialog(playerid, WPDUTYMENU3, DIALOG_STYLE_LIST, "Water Patrol Uniforms","Camouflage\nUniform 1\nUniform 2", "Put On", "Cancel");
		        }
		        case 3:
		        {
		            ShowPlayerDialog(playerid, WPDUTYMENU4,DIALOG_STYLE_INPUT,"Water Patrol"," Who would you like to clear?","Clear","Nevermind");
		        }
		    }
		}
	}
    if(dialogid == WPDUTYMENU2)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			if(listitem == 0) // Water Patrol Mace
			{
				GivePlayerValidWeapon(playerid, 41, 60000);
				Tax -= -20;
			}
			else if(listitem == 1) // Water Patrol Deagle
			{
				GivePlayerValidWeapon(playerid, 24, 60000);
				Tax -= 500;
			}
			else if(listitem == 2) // Water Patrol Shotgun
			{
				GivePlayerValidWeapon(playerid, 25, 60000);
				Tax -= 3000;
			}
			else if(listitem == 3) // Water Patrol M4
			{
				GivePlayerValidWeapon(playerid, 31, 60000);
				Tax -= 4000;
			}
			else if(listitem == 4) // Water Patrol Extinguisher
			{
				GivePlayerValidWeapon(playerid, 42, 60000);
				Tax -= 20;
			}
			else if(listitem == 5) // Water Patrol Kevlar
			{
				SetPlayerArmour(playerid, 100.0);
				Tax -= 2000;
			}
			else if(listitem == 6) SetPlayerHealth(playerid, 100);
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
		}
	}
    if(dialogid == WPDUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // Water Patrol Uniforms
			{
				SetPlayerSkin(playerid, 287);
				PlayerInfo[playerid][pModel] = 287;
			}
			if(listitem == 1) //Water Patrol Uniforms
			{
				SetPlayerSkin(playerid, 282);
				PlayerInfo[playerid][pModel] = 282;
			}
			if(listitem == 2) // Water Patrol Uniforms
			{
				SetPlayerSkin(playerid, 61);
				PlayerInfo[playerid][pModel] = 61;
			}
		}
	}
    if(dialogid == WPDUTYMENU4)
	{
	    if(response)
    	{
            new giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Water Patrol Officer %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Water Patrol Officer %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	if(dialogid == NDUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // NG Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Deputy %s takes their uniform and guns from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_SFPD);
					SetPlayerSkin(playerid, 287);
					PlayerInfo[playerid][pModel] = 287;
					GivePlayerValidWeapon(playerid, 31, 60000);
					GivePlayerValidWeapon(playerid, 27, 60000);
					GivePlayerValidWeapon(playerid, 3, 60000);
					SetPlayerArmour(playerid, 100);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Deputy %s places their uniform and guns in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					ResetPlayerWeaponsEx(playerid);
					SetPlayerArmour(playerid, 0);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			else if(listitem == 1) // NG Weapons
			{
				ShowPlayerDialog(playerid, NDUTYMENU2, DIALOG_STYLE_LIST, "DOC Weapons","Mace			$80\nNight Stick		$100\nDeagle			$500\nSPAS-12		$10000\nMP5			$1000\nM4			$4000\nAK-47			$4000\nSmoke Bomb		$800\nSniper			$10000\nTactical Vest		$2000\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
            else if(listitem == 2) // LSPD Clear.
			{
				ShowPlayerDialog(playerid, NDUTYMENU3,DIALOG_STYLE_INPUT,"DOC Menu"," Who would you like to clear?","Clear","Nevermind");
    		}
    		else if(listitem == 3) // LSPD Clear.
			{
				ShowPlayerDialog(playerid, NDUTYMENU4,DIALOG_STYLE_INPUT,"DOC Menu"," Who would you like to release?","Clear","Nevermind");
    		}
		}
	}
	if(dialogid == NDUTYMENU2)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			else switch(listitem) {
				case 0: // NG Duty
				{
					GivePlayerValidWeapon(playerid, 41, 60000);
					Tax -= 80;
				}
				case 1: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 3, 60000);
					Tax -= 100;
				}
				case 2: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 24, 60000);
					Tax -= 500;
				}
				case 3: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 27, 60000);
					Tax -= 10000;
				}
				case 4: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 29, 60000);
					Tax -= 1000;
				}
				case 5: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 31, 60000);
					Tax -= 4000;
				}
				case 6: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 30, 60000);
					Tax -= 4000;
				}
				case 7: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 17, 60000);
					Tax -= 800;
				}
				case 8: // NG Weapons
				{
					GivePlayerValidWeapon(playerid, 34, 60000);
					Tax -= 10000;
				}
				case 9: // NG Armor
				{
					SetPlayerArmour(playerid, 100);
					Tax -= 2000;
				}
				case 10: SetPlayerHealth(playerid, 100);
				default: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
	}
    if(dialogid == NDUTYMENU3)
	{
	    if(response)
    	{
            new giveplayerid;
            new giveplayer[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					giveplayer = GetPlayerNameEx(giveplayerid);
					sendername = GetPlayerNameEx(playerid);
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Soldier %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Soldier %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	if(dialogid == NDUTYMENU4)
	{
	    if(response)
    	{
            new giveplayerid;
            new giveplayer[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if(PlayerInfo[giveplayerid][pJailTime] != 0)
				    {
				        if(strfindex(PlayerInfo[giveplayerid][pPrisonReason], "[OOC]", true) != -1)
		    			{
				        	SendClientMessageEx(playerid, COLOR_GRAD2, "That player is not prisoned!");
				        	return 1;
						}
				    }
					giveplayer = GetPlayerNameEx(giveplayerid);
					sendername = GetPlayerNameEx(playerid);
					format(string, sizeof(string), "* You have released %s from prison.", giveplayer);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Soldier %s has released you from prison.", sendername);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Soldier %s has released %s from prison.", sendername,giveplayer);
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					PlayerInfo[giveplayerid][pJailTime] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
 	if(dialogid == MPSMENU)
	{
		if(response)
		{
			if(listitem == 0) // MPS Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s takes their uniform and equipment from their locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					//SetPlayerColor(playerid, TEAM_LSSD_COLOR);
	    			SetPlayerArmour(playerid, 50.0);
					GivePlayerValidWeapon(playerid, 41, 60000);
					GivePlayerValidWeapon(playerid, 3, 60000);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s places their uniform and equipment in their locker.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					SetPlayerArmour(playerid, 0.0);
					ResetPlayerWeaponsEx(playerid);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			else if(listitem == 1) // MPS Uniforms
			{
				ShowPlayerDialog(playerid, MPSSKINS, DIALOG_STYLE_LIST, "MPS Uniforms","Attendant\nOfficer\nSenior Officer\nField Supervisor\nAssistant Administrator\nAdministrator", "Put On", "Cancel");
			}
			else if(listitem == 2) // MPS Weapons
			{
					ShowPlayerDialog(playerid, MPSGEAR, DIALOG_STYLE_LIST, "MPS Weapons","Kevlar				$2000\nNite Stick				$100\nSpraycan				$400\nDeagle			$1000\nShotgun			$250", "Purchase", "Cancel");
			}
		}
	}
	if(dialogid == MPSSKINS) // MPS Uniformsrrrrrrrrrrrrrrrr
	{
 		if(response)
		{
			if(listitem == 0) // MPS Uniforms
			{
				SetPlayerSkin(playerid, 71);
				PlayerInfo[playerid][pModel] = 71;
			}
			if(listitem == 1) //MPS Uniforms
			{
				SetPlayerSkin(playerid, 268);
				PlayerInfo[playerid][pModel] = 268;
			}
			if(listitem == 2) //MPS Uniforms
			{
				SetPlayerSkin(playerid, 16);
				PlayerInfo[playerid][pModel] = 16;
			}
			if(listitem == 3) //MPS Uniforms
			{
				SetPlayerSkin(playerid, 255);
				PlayerInfo[playerid][pModel] = 255;
			}
			if(listitem == 4) //MPS Uniforms
			{
				SetPlayerSkin(playerid, 295);
				PlayerInfo[playerid][pModel] = 295;
			}
			if(listitem == 5) //MPS Uniforms
			{
				SetPlayerSkin(playerid, 17);
				PlayerInfo[playerid][pModel] = 17;
			}
		}
	}
    if(dialogid == MPSGEAR) // MPS Weapons
	{
		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			if(listitem == 0)
			{
				SetPlayerArmour(playerid, 100);
				Tax -= 2000;
			}
			else if(listitem == 1)
			{
				GivePlayerValidWeapon(playerid, 3, 99999);
				Tax -= 100;
			}
			else if(listitem == 2)
			{
				GivePlayerValidWeapon(playerid, 41, 99999);
				Tax -= 400;
			}
			else if(listitem == 3)
			{
			    if(PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 24, 99999);
					Tax -= 1000;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be at least rank 3 to buy this.");
				}
			}
			else if(listitem == 4)
			{
				if(PlayerInfo[playerid][pRank] >= 3)
			    {
					GivePlayerValidWeapon(playerid, 25, 99999);
     				Tax -= 250;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be at least rank 3 to buy this.");
				}
			}
		}
 	}
	if(dialogid == SEMENU)
	{
		if(response)
		{
			if(listitem == 0) // SENATE Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Staff Member %s takes their uniform and equipment from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerSkin(playerid, 189);
					PlayerInfo[playerid][pModel] = 189;
	    			SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 41, 60000);
					GivePlayerValidWeapon(playerid, 24, 60000);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else
				{
					format(string, sizeof(string), "* Staff Member %s places their uniform and equipment in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			else if(listitem == 1) // SE Uniforms
			{
				ShowPlayerDialog(playerid, SESKINS, DIALOG_STYLE_LIST, "Government Uniforms","Intern\nStaff Member\nSenior Staff\nSecretary\nVice President\nPresident", "Put On", "Cancel");
			}
			else if(listitem == 2) // SE Weapons
			{
				ShowPlayerDialog(playerid, SEGEAR, DIALOG_STYLE_LIST, "Government Equipment","Rank 3: Kevlar\nRank 1: Desert Eagle\nRank 1: MP5\nRank 3: Rifle\nRank 1: Shotgun\nRank 1: First Aid Kit\nAccessories", "Purchase", "Cancel");
			}
		}
	}
	if(dialogid == SESKINS) // SE Uniforms
	{
 		if(response)
		{
			if(listitem == 0) // SE Uniforms
			{
				SetPlayerSkin(playerid, 189);
				PlayerInfo[playerid][pModel] = 189;
			}
			if(listitem == 1) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 2)
				{
					SetPlayerSkin(playerid, 17);
					PlayerInfo[playerid][pModel] =17;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 2) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 3)
				{
					SetPlayerSkin(playerid, 163);
					PlayerInfo[playerid][pModel] = 163;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 3) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 4)
				{
					SetPlayerSkin(playerid, 227);
					PlayerInfo[playerid][pModel] = 227;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 4) //SE Uniforms
			{
				if(PlayerInfo[playerid][pRank] >= 5)
				{
					SetPlayerSkin(playerid, 295);
					PlayerInfo[playerid][pModel] = 295;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
					return 1;
				}
			}
			if(listitem == 5) //SE Uniforms
			{
				if(PlayerInfo[playerid][pLeader] == 6)
				{
					SetPlayerSkin(playerid, 147);
					PlayerInfo[playerid][pModel] = 147;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the president! (Leader)");
					return 1;
				}
			}
		}
	}
    if(dialogid == SEGEAR) // SE Weapons
	{
		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
			if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
			{
				if(listitem == 0)
				{
					if(PlayerInfo[playerid][pRank] >= 0)
					{
						SetPlayerArmour(playerid, 100);
						Tax -= 2000;
					}
					else
					{
    					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
    					return 1;
					}
				}
				else if(listitem == 1)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					Tax -= 500;
				}
				else if(listitem == 2)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					Tax -= 400;
				}
				else if(listitem == 3)
				{
					if(PlayerInfo[playerid][pRank] >= 0)
					{
						GivePlayerValidWeapon(playerid, 33, 99999);
						Tax -= 1000;
					}
					else
					{
    					SendClientMessageEx(playerid, COLOR_GRAD2, " You are not the required rank!");
    					return 1;
					}
				}
				else if(listitem == 4)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					Tax -= 250;
				}
				else if(listitem == 5) SetPlayerHealth(playerid, 100);
				else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
 	}
	if(dialogid == COLORMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerColor(playerid,COLOR_DBLUE);
				SendClientMessageEx(playerid, COLOR_DBLUE, "Your color has been set to Blue!");
			}
			if(listitem == 1)
			{
				SetPlayerColor(playerid,COLOR_BLACK);
				SendClientMessageEx(playerid, COLOR_BLACK, "Your color has been set to Black!");
			}
			if(listitem == 2)
			{
				SetPlayerColor(playerid,COLOR_RED);
				SendClientMessageEx(playerid, COLOR_RED, "Your color has been set to Red!");
			}
			if(listitem == 3)
			{
				SetPlayerColor(playerid,TEAM_ORANGE_COLOR);
				SendClientMessageEx(playerid, TEAM_ORANGE_COLOR, "Your color has been set to Orange!");
			}
			if(listitem == 4)
			{
				SetPlayerColor(playerid,COLOR_PINK);
				SendClientMessageEx(playerid, COLOR_PINK, "Your color has been set to Pink!");
			}
			if(listitem == 5)
			{
				SetPlayerColor(playerid,COLOR_PURPLE);
				SendClientMessageEx(playerid, COLOR_PURPLE, "Your color has been set to Purple!");
			}
			if(listitem == 6)
			{
				SetPlayerColor(playerid,COLOR_GREEN);
				SendClientMessageEx(playerid, COLOR_GREEN, "Your color has been set to Green!");
			}
			if(listitem == 7)
			{
				SetPlayerColor(playerid,COLOR_YELLOW);
				SendClientMessageEx(playerid, COLOR_YELLOW, "Your color has been set to Yellow!");
			}
			if(listitem == 8)
			{
				SetPlayerColor(playerid,COLOR_WHITE);
				SendClientMessageEx(playerid, COLOR_WHITE, "Your color has been set to White!");
			}
		}
	}
	if(dialogid == FDSAMENU)
	{
		if(response)
		{
			if(listitem == 0)
			{
				if(PlayerInfo[playerid][pDuty] == 0)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Paramedic %s clocked in and is now on duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid,TEAM_MED_COLOR);
					SetPlayerArmour(playerid, 100);
					if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 4)
					{
        				GivePlayerValidWeapon(playerid, 42, 99999);
        			}
					Medics += 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else
				{
					format(string, sizeof(string), "* Paramedic %s clocked out and is now off duty.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					Medics -= 1;
					PlayerInfo[playerid][pDuty] = 0;
					SetPlayerColor(playerid,TEAM_HIT_COLOR);
				}
			}
			if(listitem == 1)
			{
    			ShowPlayerDialog(playerid, FDSASKINS, DIALOG_STYLE_LIST, "What uniform do you want?","Firesuit 1\nFiresuit 2\nFiresuit 3\nMedic 1\nMedic 2\nMedic 3\nFemale\nHigh Rank", "Select", "Cancel");
			}
			if(listitem == 2)
			{
                ShowPlayerDialog(playerid, FDSAGEAR, DIALOG_STYLE_LIST, "What gear do you want?","Shovel ($150)\nCamera ($200)\nParachute\nFire Extinguisher ($350)\nChainsaw ($2,500)\nShotgun ($2,000)\nVest	($2,000)\nFirst Aid Kit\nAccessories", "Select", "Cancel");
			}
			if(listitem == 3)
			{
				SetPlayerColor(playerid, COLOR_WHITE);
				SetPlayerSkin(playerid, 170);
				PlayerInfo[playerid][pModel] = 170;
				ResetPlayerWeaponsEx(playerid);
			}
		}
 	}
    if(dialogid == FDSASKINS)
	{
		if(response)
		{
			if(listitem == 0)
			{
				SetPlayerSkin(playerid, 277);
				PlayerInfo[playerid][pModel] = 277;
			}
			if(listitem == 1)
			{
    			SetPlayerSkin(playerid, 278);
    			PlayerInfo[playerid][pModel] = 278;
			}
			if(listitem == 2)
			{
                SetPlayerSkin(playerid, 279);
                PlayerInfo[playerid][pModel] = 279;
			}
			if(listitem == 3)
			{
				SetPlayerSkin(playerid, 274);
				PlayerInfo[playerid][pModel] = 274;
			}
			if(listitem == 4)
			{
				SetPlayerSkin(playerid, 275);
				PlayerInfo[playerid][pModel] = 275;
			}
			if(listitem == 5)
			{
				SetPlayerSkin(playerid, 276);
				PlayerInfo[playerid][pModel] = 276;
			}
			if(listitem == 6)
			{
				SetPlayerSkin(playerid, 211);
				PlayerInfo[playerid][pModel] = 211;
			}
			if(listitem == 7)
			{
			    if(PlayerInfo[playerid][pRank] >= 5)
			    {
					SetPlayerSkin(playerid, 295);
					PlayerInfo[playerid][pModel] = 295;
				}
				else
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "Only ranks 5 and 6 can wear this uniform.");
				}
			}
		}
 	}
 	if(dialogid == FIGHTMENU)
	{
		if(response)
		{
			if(GetPlayerCash(playerid) >= 50000)
			{
				if(listitem == 0)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_BOXING;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
					SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the boxing fighting style!");

    				if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -40000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -50000);
					}
				}
				if(listitem == 1)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_ELBOW;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
					SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the elbow fighting style!");

 					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -40000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -50000);
					}
				}
				if(listitem == 2)
				{
			    	PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KNEEHEAD;
				    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
				    SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the kneehead fighting style!");

    				if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -40000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -50000);
					}
				}
				if(listitem == 3)
				{
   					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_KUNGFU;
					SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
					SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the kungfu fighting style!");

 					if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -40000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -50000);
					}
				}
				if(listitem == 4)
				{
					PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_GRABKICK;
	    			SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
			  	  	SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the grabkick fighting style!");

    				if(PlayerInfo[playerid][pDonateRank] >= 1)
				    {
				    	GivePlayerCash(playerid, -40000);
        				SendClientMessageEx(playerid, COLOR_YELLOW, "VIP: You have received 20 percent off this product. Instead of paying $50000, you paid $40000.");
					}
					else
					{
						GivePlayerCash(playerid, -50000);
					}
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You do not have the cash for that!");
				return 1;
			}

			if(listitem == 5)
			{
				PlayerInfo[playerid][pFightStyle] = FIGHT_STYLE_NORMAL;
				SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
	  			SendClientMessageEx(playerid, COLOR_WHITE, " You are now using the normal fighting style!");
				return 1;
			}
		}
	}
    if(dialogid == FDSAGEAR)
	{
		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
		    if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			if(listitem == 0)
			{
				GivePlayerValidWeapon(playerid, 6, 99999);
				Tax -= 150;
			}
			else if(listitem == 1)
			{
				GivePlayerValidWeapon(playerid, 43, 99999);
				Tax -= 200;
			}
			else if(listitem == 2)
			{
				GivePlayerValidWeapon(playerid, 46, 99999);
			}
			else if(listitem == 3)
			{
				GivePlayerValidWeapon(playerid, 42, 99999);
				Tax -= 350;
			}
			else if(listitem == 4)
			{
                if(PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 4)
                {
        			GivePlayerValidWeapon(playerid, 9, 99999);
        			Tax -= 250;
        		}
        		else
        		{
            		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a high enough rank!");
        		}
			}
			else if(listitem == 5)
			{
        		GivePlayerValidWeapon(playerid, 25, 99999);
        		Tax -= 500;
			}
			else if(listitem == 6)
			{
        		SetPlayerArmour(playerid, 100);
        		Tax -= 2000;
			}
			else if(listitem == 7) SetPlayerHealth(playerid, 100);
			else ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
		}
 	}
	if(dialogid == SHAFTDUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // SHAFT Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Agent %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, COLOR_SHAFT);
					SetPlayerHealth(playerid, 100.0);
					SetPlayerArmour(playerid, 100.0);
					SetPlayerSkin(playerid, 165);
					PlayerInfo[playerid][pModel] = 165;
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 29, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Agent %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 184);
					PlayerInfo[playerid][pModel] = 184;
					SetPlayerHealth(playerid, 100.0);
					SetPlayerArmour(playerid, 0.0);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // SHAFT Weapons
			{
				ShowPlayerDialog(playerid, SHAFTDUTYMENU2, DIALOG_STYLE_LIST, "SHAFT Weapons","Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nCamera\nSniper Rifle\nShotgun\nTactical Vest\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // SHAFT SWAT Uniform
			{
                if(PlayerInfo[playerid][pRank] > 3)
				{
    				SetPlayerSkin(playerid, 285);
	    			PlayerInfo[playerid][pModel] = 285;
				}
				else
				{
    				SendClientMessageEx(playerid, COLOR_GRAD2, "You are not the required rank!");
    				return 1;
				}
			}
			if(listitem == 3) // SHAFT Uniforms
			{
				ShowPlayerDialog(playerid, SHAFTDUTYMENU3, DIALOG_STYLE_LIST, "SHAFT Uniforms","White Agent\nBlack Agent\nAsian Agent\nGirl", "Put On", "Cancel");
			}
			if(listitem == 4) // SHAFT Undercover Uniform
			{
				ShowPlayerDialog(playerid, SHAFTDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // SHAFT Clear.
			{
				ShowPlayerDialog(playerid, SHAFTDUTYMENU5,DIALOG_STYLE_INPUT,"SHAFT"," Who would you like to clear?","Clear","Return");
    		}
		}
	}
	if(dialogid == FDUTYMENU)
	{
 		if(response)
		{
			if(listitem == 0) // FBI Duty
			{
				if(PlayerInfo[playerid][pDuty]==0)
				{
					format(string, sizeof(string), "* Agent %s takes a badge and a gun from their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_FBI_COLOR);
					SetPlayerArmour(playerid, 100.0);
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerValidWeapon(playerid, 41, 99999);
					GivePlayerValidWeapon(playerid, 3, 99999);
					GivePlayerValidWeapon(playerid, 29, 99999);
					OnDuty[playerid] = 1;
					PlayerInfo[playerid][pDuty] = 1;
				}
				else if(PlayerInfo[playerid][pDuty]==1)
				{
					format(string, sizeof(string), "* Agent %s places their badge and gun in their locker.", GetPlayerNameEx(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SetPlayerColor(playerid, TEAM_HIT_COLOR);
					SetPlayerSkin(playerid, 46);
					PlayerInfo[playerid][pModel] = 46;
					SetPlayerArmour(playerid, 0.0);
					OnDuty[playerid] = 0;
					PlayerInfo[playerid][pDuty] = 0;
				}
			}
			if(listitem == 1) // FBI Weapons
			{
				ShowPlayerDialog(playerid, FDUTYMENU2, DIALOG_STYLE_LIST, "FBI Weapons","Mace\nNite Stick\nDesert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSmoke Grenade\nCamera\nSniper Rifle\nTactical Vest\nFirst Aid Kit\nAccessories", "Purchase", "Cancel");
			}
			if(listitem == 2) // FBI SWAT Uniform
			{
                if(PlayerInfo[playerid][pRank] > 3)
				{
    				SetPlayerSkin(playerid, 285);
	    			PlayerInfo[playerid][pModel] = 285;
				}
				else
				{
    				SendClientMessageEx(playerid, COLOR_GRAD2, "You are not the required rank!");
    				return 1;
				}
			}
			if(listitem == 3) // FBI Uniforms
			{
				ShowPlayerDialog(playerid, FDUTYMENU3, DIALOG_STYLE_LIST, "FBI Uniforms","Agent with Coat\nBlack Agent\nWhite Agent\nAsian Agent\nAsian Agent 2\nSWAT\nGirl", "Put On", "Cancel");
			}
			if(listitem == 4) // FBI Undercover Uniform
			{
				ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Choose a skin (by ID).", "Select", "Cancel");
			}
			if(listitem == 5) // FBI Clear.
			{
				ShowPlayerDialog(playerid,FDUTYMENU5,DIALOG_STYLE_INPUT,"FBI"," Who would you like to clear?","Clear","Return");
    		}
		}
	}
	if(dialogid == FDUTYMENU2)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
		    if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
				else switch(listitem) {
				case 0: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 41, 99999);
					Tax -= 100;
				}
				case 1: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 3, 99999);
					Tax -= 100;
				}
				case 2: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					Tax -= 500;
				}
				case 3: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					Tax -= 10000;
				}
				case 4: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					Tax -= 400;
				}
				case 5: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					Tax -= 4000;
				}
				case 6: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					Tax -= 4000;
				}
				case 7: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 17, 5);
					Tax -= 800;
				}
				case 8: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 43, 99999);
					Tax -= 300;
				}
				case 9: // FBI Weapons
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					Tax -= 10000;
				}
				case 10: // FBI Weapons
				{
					SetPlayerArmour(playerid, 100);
					Tax -= 2000;
				}
				case 11: SetPlayerHealth(playerid, 100);
				default: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
	}
	if(dialogid == RRMENU)
	{
 		if(response) switch(listitem)
		{
			case 0: // CAL Uniforms
			{
			    ShowPlayerDialog(playerid, RRMENUSKIN, DIALOG_STYLE_LIST, "Rapid Skins", "Mechanic\nMechanic 2\nMechanic 3", "Select", "Cancel");
			}
			case 1: // CAL Weapons
			{
				ShowPlayerDialog(playerid, RRMENUWEP, DIALOG_STYLE_LIST, "Rapid Equipment","Shovel\nFire Extinguisher\nCamera", "Purchase", "Cancel");
			}
			case 2: // NG Heal
			{
				SetPlayerArmour(playerid, 100);
    		}
			case 3:
			{
				SetPlayerHealth(playerid, 100);
			}
			case 4: // Mechanic
	        {
	            SetPVarInt(playerid, "jobSelection", 7);
	            ShowPlayerDialog(playerid, 7485, DIALOG_STYLE_LIST, "Mechanic Job", "Job Slot 1\nJob Slot 2", "Proceed", "Cancel");
			}
		}
	}
	if(dialogid == RRMENUSKIN)
	{
 		if(response)
		{
			if(listitem == 0) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 50);
				PlayerInfo[playerid][pModel] = 50;
			}
			if(listitem == 1) //LSPD Uniforms
			{
				SetPlayerSkin(playerid, 8);
				PlayerInfo[playerid][pModel] = 8;
			}
			if(listitem == 2) // LSPD Uniforms
			{
				SetPlayerSkin(playerid, 42);
				PlayerInfo[playerid][pModel] = 42;
			}
		}
	}
	if(dialogid == RRMENUWEP)
	{
 		if(response)
		{
 			if(listitem == 0)
			{
			    GivePlayerValidWeapon(playerid, 6, 99999);
			}
			if(listitem == 1)
			{
			    GivePlayerValidWeapon(playerid, 42, 99999);
			}
			if(listitem == 2)
			{
			    GivePlayerValidWeapon(playerid, 43, 99999);
			}
		}
	}
	if(dialogid == SHAFTDUTYMENU2)
	{
 		if(response)
		{
		    if(Tax <= 0) return SendClientMessageEx(playerid,COLOR_WHITE,"The government is in debt; no funds are available for equipment.");
		    if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
				else switch(listitem) {
				case 0: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 41, 99999);
					Tax -= 100;
				}
				case 1: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 3, 99999);
					Tax -= 100;
				}
				case 2: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					Tax -= 500;
				}
				case 3: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					Tax -= 10000;
				}
				case 4: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					Tax -= 400;
				}
				case 5: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					Tax -= 4000;
				}
				case 6: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					Tax -= 4000;
				}
				case 7: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 17, 5);
					Tax -= 800;
				}
				case 8: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 43, 99999);
					Tax -= 300;
				}
				case 9: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					Tax -= 10000;
				}
				case 10: // SHAFT Weapons
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					Tax -= 500;
				}
				case 11: // SHAFT Weapons
				{
					SetPlayerArmour(playerid, 100);
					Tax -= 2000;
				}
				case 12: SetPlayerHealth(playerid, 100);
				default: ShowPlayerDialog( playerid, BUYTOYSCOP, DIALOG_STYLE_MSGBOX, "Accessories", "Welcome to the law enforcement accessory locker!\n\n(As with regular toys, VIP unlocks more slots.)","Continue", "Cancel" );
			}
		}
	}
	if(dialogid == FDUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 286);
				PlayerInfo[playerid][pModel] = 286;
			}
			if(listitem == 1) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 166);
				PlayerInfo[playerid][pModel] = 166;
			}
			if(listitem == 2) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 165);
				PlayerInfo[playerid][pModel] = 165;
			}
			if(listitem == 3) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 294);
				PlayerInfo[playerid][pModel] = 294;
			}
			if(listitem == 4) // FBI Uniforms
			{
				SetPlayerSkin(playerid, 120);
				PlayerInfo[playerid][pModel] = 120;
			}
			if(listitem == 5) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 285);
				PlayerInfo[playerid][pModel] = 285;
			}
			if(listitem == 6) //FBI Uniforms
			{
				SetPlayerSkin(playerid, 141);
				PlayerInfo[playerid][pModel] = 141;
			}
		}
	}
	if(dialogid == SHAFTDUTYMENU3)
	{
 		if(response)
		{
			if(listitem == 0) // SHAFT Uniforms
			{
				SetPlayerSkin(playerid, 165);
				PlayerInfo[playerid][pModel] = 165;
			}
			if(listitem == 1) // SHAFT Uniforms
			{
				SetPlayerSkin(playerid, 166);
				PlayerInfo[playerid][pModel] = 166;
			}
			if(listitem == 2) // SHAFT Uniforms
			{
				SetPlayerSkin(playerid, 228);
				PlayerInfo[playerid][pModel] = 228;
			}
			if(listitem == 3) // SHAFT Uniforms
			{
				SetPlayerSkin(playerid, 150);
				PlayerInfo[playerid][pModel] = 150;
			}
		}
	}
	if(dialogid == FDUTYMENU4)
	{
 		if(response)
		{
            new skin = strval(inputtext);
			if(IsInvalidSkin(skin) || 274 <= skin <= 288 || skin == 165 || skin == 166 || skin == 71) {
				return ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Invalid skin specified. Choose another.", "Select", "Cancel");
			}
			PlayerInfo[playerid][pModel] = skin;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		}
	}
	if(dialogid == SHAFTDUTYMENU4)
	{
 		if(response)
		{
            new skin = strval(inputtext);
			if(IsInvalidSkin(skin) || 274 <= skin <= 288 || skin == 165 || skin == 166 || skin == 71) {
				return ShowPlayerDialog(playerid, FDUTYMENU4, DIALOG_STYLE_INPUT, "Undercover","Invalid skin specified. Choose another.", "Select", "Cancel");
			}
			PlayerInfo[playerid][pModel] = skin;
			SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);
		}
	}
	if(dialogid == SHAFTDUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid;
            new giveplayer[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Agent %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Agent %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
    if(dialogid == FDUTYMENU5)
	{
	    if(response)
    	{
            new giveplayerid;
            new giveplayer[MAX_PLAYER_NAME];
			giveplayerid = ReturnUser(inputtext);
			//giveplayerid = strval(inputtext);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* You cleared the records and wanted points of %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Agent %s has cleared your records and wanted points.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Agent %s has cleared %s's records and wanted points.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendRadioMessage(1, RADIO, string);
					SendRadioMessage(2, RADIO, string);
					SendRadioMessage(5, RADIO, string);
					SendRadioMessage(7, RADIO, string);
					SendRadioMessage(11, RADIO, string);
					SendRadioMessage(13, RADIO, string);
					SendRadioMessage(16, RADIO, string);
					PlayerInfo[giveplayerid][pWantedLevel] = 0;
					SetPlayerToTeamColor(giveplayerid);
				    SetPlayerWantedLevel(giveplayerid, 0);
    				ClearCrimes(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				}
			}
		}
	}
	if(dialogid == ADMINPANEL)
	{
 		if(response)
		{
			if(listitem == 0) // on/off duty button
			{
				if(PlayerInfo[playerid][pAdmin] >= 2) {
				if((PlayerInfo[playerid][pAdmin] >= 2) && GetPVarInt(playerid, "IsInArena") < 0 && !GetPVarInt(playerid, "EventToken")) {
				if(PlayerInfo[playerid][pAdminDuty]) {
					PlayerInfo[playerid][pAdminDuty] = 0;
					PlayerInfo[playerid][pTogReports] = 1;
					//SetPlayerToTeamColor(playerid);
					//SendClientMessageEx(playerid, COLOR_WHITE, "You have clocked out from Admin Duty.");
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Clocked Out", "You are no longer on {FF0000}Administrator Duty{FFFFFF}.\n\nYou will now be restricted from using Administrator Commands.\n\nThe only messages you will be able to use and see is the {FFFF00}Administrator Chat{FFFFFF} (/a).\n\nYou can do (/aduty) to clock in and out faster.", "Close", "");
					format(string, sizeof(string), "{AA3333}Admin Duty{FFFF00}: %s has clocked off and is now off duty.", GetPlayerNameEx(playerid));
					ABroadCast(COLOR_YELLOW,string, 2);
				}
				else {
					PlayerInfo[playerid][pAdminDuty] = 1;
					PlayerInfo[playerid][pTogReports] = 0;
					//SetPlayerToTeamColor(playerid);
					//SendClientMessageEx(playerid, COLOR_WHITE, "You have clocked in to Admin Duty.");
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Clocked In", "You are now on {00FF00}Administrator Duty{FFFFFF}.\n\nYou now have access to the Administrator Commands again.\n\nYou will now see Reports, Warnings and other Administrator Messages.\n\nYou can do (/aduty) to clock in and out faster.", "Close", "");
					format(string, sizeof(string), "{AA3333}Admin Duty{FFFF00}: %s has clocked in and is now on duty.", GetPlayerNameEx(playerid));
					ABroadCast(COLOR_YELLOW,string, 2);
				}
			}
			}
			}
			if(listitem == 1) //How to get Started
			{
				/*if (PlayerInfo[playerid][pAdmin] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
					if(PlayerInfo[playerid][pSMod] > 0) SendClientMessageEx(playerid, COLOR_GRAD1, "*** SENIOR SERVER MODERATOR *** /jail /kick /c /a /togadvisor/admin /changename /dmwatch /dmalert /dm");
					else SendClientMessageEx(playerid, COLOR_GRAD1, "*** SERVER MODERATOR *** /mjail /kick /c /togadvisor /dmwatch /dmalert");
				}*/
				if (PlayerInfo[playerid][pWatchdog] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2,"*** WATCH DOG *** /dmwatch /dmalert");
				}
				if (PlayerInfo[playerid][pAdmin] >= 2)
				{
				SendClientMessageEx(playerid, COLOR_GRAD2,"*** JUNIOR ADMIN *** /adminchanges /kick /ban /jail /freeze /unfreeze /slap /warn /cnn /gethere /gotoid /hospital /goto");
				SendClientMessageEx(playerid, COLOR_GRAD2,"*** JUNIOR ADMIN *** /gotoplayerscar /jetpack /god /check /anetstats /ipcheck /ip /nrn /listguns /setvw /setint /vehname");
				SendClientMessageEx(playerid, COLOR_GRAD2,"*** JUNIOR ADMIN *** /requestevent /watch /dmwatchlist /dmr");
				}
				if (PlayerInfo[playerid][pAdmin] >= 3)
				{
					SendClientMessageEx(playerid, COLOR_GRAD3,"*** GENERAL ADMIN *** /noooc /nonewbie /prison /fine /pfine /takeadminweapons /sendtols /prisonaccount /gotocar /entercar /getcar");
					SendClientMessageEx(playerid, COLOR_GRAD3,"*** GENERAL ADMIN *** /mole /setskin /countdown /release /force(death/hospital) /rto(reset) /jailaccount /(o)clearflag /mark(2)");
					SendClientMessageEx(playerid, COLOR_GRAD3,"*** GENERAL ADMIN *** /gotoco /n(un)mute /ad(un)mute /leaders /dm /wepreset /ocheck /owarn /ofine /okills /respawncar(s) /revive");
					SendClientMessageEx(playerid, COLOR_GRAD3,"*** GENERAL ADMIN *** /reloadpvehicles /destroyair /destroytank /apark /bigears /aimpound /dmrmute /dmrlookup /dmtokens");
				}
				if (PlayerInfo[playerid][pAdmin] >= 4)
				{
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /edit /asellhouse /asellbiz /setchamp /setarmorall /fixvehall /givenos /blowup /setname /startlotto /savechars");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /veh /fixveh /sethp /setarmor /givegun /givemoney /setmoney /setstat /setfightstyle /switchfac /switchfam /facpay");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /fcreate /fdelete /adivorce /destroycar /destroycars /eventhelp /contracts /sprison /sjail /listfacpay");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /facban /faccsfban /unban /unbanip /deletehit /clearall /setinsurance /cmotd /givelicense /adestroyplant");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /createpvehicle /destroypvehicle /creategvehicle /vipparty /vto /vtoreset /forceskin /admingatepw /gotogate");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /hnext /dmpnext /g(status/near/next/edit) /(goto/goin)door /(goto/goin)house /(create/delete/goto)point");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /hedit /dd(edit/next/name/pass) /dmpedit /dmpnear /gotomapicon /gangwarn /gangunban /setcapping /banaccount");
					SendClientMessageEx(playerid, COLOR_GRAD4,"*** SENIOR ADMIN *** /dmstrikereset /dmrmute /removepvehicle /rcabuse /amdc");
				}
				if (PlayerInfo[playerid][pAdmin] >= 1337)
				{
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** HEAD ADMIN *** /weatherall /makeleader /dedit /pedit /facunban /faccsfunban /giftall /removemoderator /makewatchdog");
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** HEAD ADMIN *** /permaban /setcolor /payday /clearallreports /eventreset /amotd /vipmotd /givetoken /giftgvip");
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** HEAD ADMIN *** /createdealership /destroydealership /createcdveh /destroycdveh /fedit /vmute /vsuspend /gifts /rcreset");
					}
				if (PlayerInfo[playerid][pAdmin] >= 1338)
				{
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** ADMIN DIRECTOR *** /suspend /osuspend /ounsuspend /osetrmutes /rmute /motd /specreset /pausespec /random /vrandom");
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** ADMIN DIRECTOR *** /giftreset /vipgifts /buddyinvite /rewardplay");
				}
				if (PlayerInfo[playerid][pAdmin] >= 13338)
				{
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** CO-EXECUTIVE *** Non at this time.");
				}
				if (PlayerInfo[playerid][pAdmin] >= 99999)
				{
					SendClientMessageEx(playerid, COLOR_GRAD5,"*** EXECUTIVE ADMIN *** /togtp /togspec /resetstpay /setstpay /ounsuspend /kickres");
				}
				if (PlayerInfo[playerid][pBanAppealer] == 1 || PlayerInfo[playerid][pShopTech] == 1 || PlayerInfo[playerid][pUndercover] == 1 || PlayerInfo[playerid][pFactionModerator] == 1 || PlayerInfo[playerid][pBanAppealer] == 1 || PlayerInfo[playerid][pShopTech] == 1 || PlayerInfo[playerid][pUndercover] == 1 || PlayerInfo[playerid][pGangModerator] == 1 || PlayerInfo[playerid][pPR] == 1)
				{
				if (PlayerInfo[playerid][pBanAppealer] == 1) SendClientMessage(playerid, COLOR_GRAD5, "*** Special - Ban Appealer *** /unbanip /unban");
				if (PlayerInfo[playerid][pUndercover] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Spec Ops *** /setmystat /setmyname /setmyhp /setmyarmour /sprison /sjail /sdm /swarn");
				if (PlayerInfo[playerid][pFactionModerator] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Faction Mod. *** /listfacpay /facpay /switchfac /faccsfban /facban /fackick /leaders");
				if (PlayerInfo[playerid][pGangModerator] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Gang Mod. *** /switchfam /fedit /creategvehicle /destroygvehicle /gangwarn /gangunban /fcreate /fdelete /twmenu");
				if(PlayerInfo[playerid][pPR] == 1) SendClientMessageEx(playerid, COLOR_GRAD5, "*** Special - Public Relations *** /catokens /cmotd /makeadvisor /makehelper /takeadvisor");
				}
				if (PlayerInfo[playerid][pAdmin] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
				}
			}
			if(listitem == 2) // Buying a Car
			{
				if(PlayerInfo[playerid][pAdmin] >= 4) {

					new
					szDialog[1024];
					foreach(new i: Player) if(PlayerInfo[i][pAdmin] >= 2) switch(PlayerInfo[i][pAdminDuty]) {
					case 1: format(szDialog, sizeof(szDialog), "%s\r\n* (ID: %d) %s ({00FF00}on duty{FFFFFF})", szDialog, i, GetPlayerNameEx(i));
					default: format(szDialog, sizeof(szDialog), "%s\r\n* (ID: %d) %s ({FF0000}off duty{FFFFFF})", szDialog, i, GetPlayerNameEx(i));
				}
				if(!isnull(szDialog)) {
					ShowPlayerDialog(playerid, ADMINMDCPANEL, DIALOG_STYLE_LIST, "Administrators - MDC", szDialog, "View Profile", "Cancel");
				}
					else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");

				} else {
					//SendClientMessageEx(playerid, COLOR_GREY, "You don't have permission to access this.");
					ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Access Denied!", "You don't have permission to view this!", "Close", "");
				}
			}
		}
	}
	/*if(dialogid == ADMINMDCPANEL && response) {
		ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Coming Soon", "This feature is still under development.", "Close", "");
	}*/
	if(dialogid == ADMINMDCPANEL && response) {

		ShowPlayerDialog(playerid, ADMINMDCNAME, DIALOG_STYLE_INPUT, "Administrator Profile Viewer", "Enter the Administrator Name or ID No.", "Enter", "Cancel");
		return 1;
	}
	if(dialogid == ADMINMDCNAME && response) {
		new giveplayerid = ReturnUser(inputtext);
		new HistoryString[1024], sstring[128], rtoken;
		new strFromFile[128];
		new stringtitle[128];
		//new giveplayer[MAX_PLAYER_NAME];
		//giveplayer = GetPlayerNameEx(playerid);
		new month, day, year;
		new playern[MAX_PLAYER_NAME];
		GetPlayerName(giveplayerid, playern, sizeof(playern));
		getdate(year, month, day);
		format(sstring,sizeof(sstring),"admins/rtokens/%s[%d'%d'%d]",playern,month,day,year);
		if(fexist(sstring)) {
		new File: file = fopen(sstring, io_read);
		if(file) {
			fread(file, strFromFile);
			fclose(file);
			rtoken = strval(strFromFile);
		}
		}
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			format(string, sizeof(string), "Name: %s\n", GetPlayerNameEx(giveplayerid));
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Reports Accepted Today: %d\n", rtoken);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Total Reports Accepted: %d\n", PlayerInfo[giveplayerid][pAcceptReport]);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Total Reports Trashed: %d\n", PlayerInfo[giveplayerid][pTrashReport]);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Administrator Rank: %s (%d)\n\n", AdminNameLogin(PlayerInfo[giveplayerid][pAdmin]), PlayerInfo[giveplayerid][pAdmin]);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Other Active Status:\n");
			strcat(HistoryString, string, sizeof(HistoryString));
            if(PlayerInfo[giveplayerid][pShopTech]) {
			format(string, sizeof(string), "Shop Tech\n");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			if(PlayerInfo[giveplayerid][pFactionModerator]) {
			format(string, sizeof(string), "Faction Moderator\n");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			if(PlayerInfo[giveplayerid][pBanAppealer]) {
			format(string, sizeof(string), "Ban Appealer\n");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			if(PlayerInfo[giveplayerid][pUndercover]) {
			format(string, sizeof(string), "Undercover\n");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			if(PlayerInfo[giveplayerid][pGangModerator]) {
			format(string, sizeof(string), "Gang Moderator\n");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			if(PlayerInfo[giveplayerid][pPR]) {
			format(string, sizeof(string), "Public Relation\n");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			if(PlayerInfo[giveplayerid][pPR] == 0 && PlayerInfo[giveplayerid][pGangModerator] == 0 && PlayerInfo[giveplayerid][pUndercover] == 0 && PlayerInfo[giveplayerid][pBanAppealer] == 0 && PlayerInfo[giveplayerid][pFactionModerator] == 0 && PlayerInfo[giveplayerid][pShopTech] == 0) {
			format(string, sizeof(string), "Currently has no active status.");
			strcat(HistoryString, string, sizeof(HistoryString));
			}
			format(string, sizeof(string), "Viewing %s's Profile", GetPlayerNameEx(giveplayerid));
			strcat(stringtitle, string, sizeof(stringtitle));
	    	ShowPlayerDialog(playerid, ADMINPROFILEVIEW, DIALOG_STYLE_MSGBOX, stringtitle, HistoryString, "Go Back", "");
			return 1;
		}
		else
		{
		ShowPlayerDialog(playerid, ADMINPROFILEERROR, DIALOG_STYLE_MSGBOX, "Profile Error", "The Profile you are trying to view doesn't exist!", "Go Back", "");
		}
	}
	if(dialogid == ADMINPROFILEERROR && response) {

	ShowPlayerDialog(playerid, ADMINMDCNAME, DIALOG_STYLE_INPUT, "Administrator Profile Viewer", "Enter the Administrator Name or ID No.", "Enter", "Cancel");
	return 1;

	}
	if(dialogid == ADMINPROFILEVIEW && response) {
		if(PlayerInfo[playerid][pAdmin] >= 4) {

			new
			szDialog[1024];

			foreach(new i: Player) if(PlayerInfo[i][pAdmin] >= 2) switch(PlayerInfo[i][pAdminDuty]) {
			case 1: format(szDialog, sizeof(szDialog), "%s\r\n* (ID: %d) %s ({00FF00}on duty{FFFFFF})", szDialog, i, GetPlayerNameEx(i));
			default: format(szDialog, sizeof(szDialog), "%s\r\n* (ID: %d) %s ({FF0000}off duty{FFFFFF})", szDialog, i, GetPlayerNameEx(i));
		}
		if(!isnull(szDialog)) {
			ShowPlayerDialog(playerid, ADMINMDCPANEL, DIALOG_STYLE_LIST, "Administrators - MDC", szDialog, "View Profile", "Cancel");
		}
			else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");

		} else {
					//SendClientMessageEx(playerid, COLOR_GREY, "You don't have permission to access this.");
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Access Denied!", "You don't have permission to view this!", "Close", "");
		}

	}
	/*if(dialogid == ADMINMDCPANEL)
	{
 		if(response)
		{
			//if(listitem == 0) //Detective
			//{
				ShowPlayerDialog(playerid, 0, DIALOG_STYLE_MSGBOX, "Coming Soon", "This feature is still under development.", "Close", "");
			//}
		}
	}*/
	if(dialogid == JOBHELPMENU)
	{
 		if(response)
		{
			if(listitem == 0) //Detective
			{
				ShowPlayerDialog(playerid, DETECTIVEJOB, DIALOG_STYLE_MSGBOX, "Detective", "Information:\n\nThis job can be used to locate people anywhere around San Andreas.\nThis is helpful for the Government factions, and can be used to find criminals. It is a legal job and you cannot get busted for doing it.\nIt will tell you the last known location(area) they were found in and give you a beacon.", "Next", "Cancel");
			}
			if(listitem == 1) //Lawyer
			{
				ShowPlayerDialog(playerid, LAWYERJOB, DIALOG_STYLE_MSGBOX, "Lawyer", "Information:\n\nThis job can be used to remove wanted stars, reduce jail time, and list all criminals.\nThis is helpful for criminals and crooks, it is a legal job and you cannot get busted for doing it.\nIt will come in handy for your friends and families who got trouble with the cops.", "Next", "Cancel");
			}
			if(listitem == 2) //Whore
			{
				ShowPlayerDialog(playerid, WHOREJOB, DIALOG_STYLE_MSGBOX, "Whore", "Information:\n\nThis job can be used to bring pleasure to any clients who may be interested in having some fun.\nThis is a job that offers sex to every client who comes along.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 3) //Drug Dealer
            {
				ShowPlayerDialog(playerid, DRUGDEALERJOB, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Information:\n\nThis job can be used to sell pot and crack to any customers you might find.\nIt often comes in handy, when you're a higher level at it.\nThe higher the level, the more drugs you can hold.\nThis is an illegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 4) //Mechanic
			{
				ShowPlayerDialog(playerid, MECHANICJOB, DIALOG_STYLE_MSGBOX, "Mechanic", "Information:\n\nThis job can be used to repair, add nos, and add hydraulics to vehicles.\nThis job can sometimes be rewarding, but often people do not require assistance.\nThis is a legal job and you cannot get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 5) //Bodyguard
			{
				ShowPlayerDialog(playerid, BODYGUARDJOB, DIALOG_STYLE_MSGBOX, "Bodyguard", "Information:\n\nThis job can be used to give people half armor.\nThis job is very profitable and the common spot for purchasing off bodyguards is the gym.\nThis is a legal job and you cannot get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 6) //Arms Dealer
			{
				ShowPlayerDialog(playerid, ARMSDEALERJOB2, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Note: The reload time for selling guns is always 10 seconds, no matter what level.\n\nSkills:\n\nLevel 1 Weapons: Flowers, Knuckles, SDPistol, 9mm, and Shotgun.\nLevel 2 Weapons: Baseball Bat, Cane, MP5, and Rifle.\nLevel 3 Weapons: Shovel and Deagle.\nLevel 4 Weapons: Poolcue, Golf Club, AK47, and M4.\nLevel 5 Weapons: Katana, Dildo, Sniper, and SPAS12.\nGold+ VIP Feature: Uzi and Tec9", "Next", "Cancel");
			}
			if(listitem == 7) //Boxer
			{
				ShowPlayerDialog(playerid, BOXERJOB, DIALOG_STYLE_MSGBOX, "Boxer", "Information:\n\nThis job can be used to box people inside the Ganton Gym.\nThis job is not very money-making, but you can become the boxing champion.\nThis is a legal job and you cannot get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 8) //Taxi Driver
            {
				ShowPlayerDialog(playerid, TAXIJOB, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Information:\n\nThis job can be used to take passengers around the city for any price you desire($1 - $500 per 16 seconds).\nThis job is not very profitable as people do not usually call taxis, and sometimes they try to steal your taxi vehicle.\nThis is a legal job and you cannot get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 9) //Drug Smuggling
            {
				ShowPlayerDialog(playerid, SMUGGLEJOB, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Information:\n\nThis job can be used to keep Crack and Pot filled in the Crack Lab.\nThis job is very profitable as people usually buy crack and pot, and sometimes they try to steal your pot and crack.\nThis is an ilegal job and you can get busted for doing it.", "Next", "Cancel");
			}
			if(listitem == 10) //Craftsman
            {
				ShowPlayerDialog(playerid, CRAFTJOB, DIALOG_STYLE_MSGBOX, "Craftsman", "Information:\nThis job can be used to sell crafts to other players.\nThis job is very profitable as people have a need for many of the things you can make.\nThis is a legal job and you can not get busted for doing it.\n\nCommands:\n/getmats /craft\nLocation of job: This job can be obtained in Willowfield at the junkyard, at the job icon(yellow circle).", "Done", "Cancel");
			}
			if(listitem == 11) //Bartender
            {
				ShowPlayerDialog(playerid, BARTENDERJOB, DIALOG_STYLE_MSGBOX, "Bartender", "Information:\nThis job can be used to sell drinks to other players.\nThis is a legal job and you can not get busted for doing it.\n\nCommands:\n/selldrink\nLocation of job: This job can be obtained in Idlewood inside the Alhambra Club, at the job icon(yellow i).", "Done", "Cancel");
			}
			if(listitem == 12) //Trucker
            {
				ShowPlayerDialog(playerid, TRUCKERJOB, DIALOG_STYLE_MSGBOX, "Trucker","Information:\nThis job can be used to earn money by making truck deliveries\nThis is a legal job, however you can get busted if you transport illegal goods or hijack trucks. Also truckers get a 50 percent bonus for carting illegal goods.\n\nCommands:\n/loadtruck /checktruck /hijacktruck\nLocation of job: This job can be obtained at the Los Santos Docks, at the job icon(yellow I).", "Done", "Cancel");
			}
			if(listitem == 13) //Pizza Boy
            {
				ShowPlayerDialog(playerid, PIZZAJOB, DIALOG_STYLE_MSGBOX, "Pizza Boy","Information:\nThis job can be used to earn money by grabbing a pizza from the\n SF Pizza Stack and then delivering it to different houses.\n You will get less and less money as time moves on and eventually,\n when the pizza is cold, it will be worthless.\n\nCommands:\n/getpizza\nLocation of job: This job can be obtained at the Pier 69, at the job icon(yellow I).", "Done", "Cancel");
			}
		}
	}
	if(dialogid == SMUGGLEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, SMUGGLEJOB3, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Commands:\n\n/getcrate [name(Pot/Crack)]\n\nLocation of job: This job can be obtained inside the Crack Lab, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == SMUGGLEJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, SMUGGLEJOB2, DIALOG_STYLE_MSGBOX, "Drug Smuggling", "Note: There is no reload time for drug smuggling and you do need to level it up to obtain more money. There are 5 levels for this job.", "Next", "Cancel");
		}
	}
	if(dialogid == TAXIJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, TAXIJOB2, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Note: There is no reload time for taxi fares and there are no levels for this job. In other words, you do not need to level it up to earn the max money you can.", "Next", "Cancel");
		}
	}
	if(dialogid == TAXIJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, TAXIJOB3, DIALOG_STYLE_MSGBOX, "Taxi Driver", "Commands:\n\n/fare [$1 - $500]\n\nLocation of job: This job can be obtained in front of Unity Station at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == BOXERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, BOXERJOB3, DIALOG_STYLE_MSGBOX, "Boxer", "Commands:\n\n/fight [PlayerID/Name], /boxstats\n\nLocation of job: This job can be obtained inside the Ganton Gym, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == BOXERJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, BOXERJOB2, DIALOG_STYLE_MSGBOX, "Boxer", "Note: There is no reload time for boxing and you don't need to level it up to box people in the gym. There are 3 levels for this job.\n\nLevel 1: Beginner Boxer.\nLevel 2: Amateur Boxer.\nLevel 3: Professional Boxer.", "Next", "Cancel");
		}
	}
	if(dialogid == ARMSDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, ARMSDEALERJOB2, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Note: The reload time for selling guns is always 10 seconds, no matter what level.\n\nSkills:\n\nLevel 1 Weapons: Flowers, Knuckles, SDPistol, and Shotgun.\nLevel 2 Weapons: Baseball Bat, Cane, MP5, and Rifle.\nLevel 3 Weapons: Shovel and Deagle.\nLevel 4 Weapons: Poolcue, Golf Club, AK47, and M4.\nLevel 5 Weapons: Katana, Dildo, Sniper, and SPAS12.", "Next", "Cancel");
		}
	}
	if(dialogid == ARMSDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, ARMSDEALERJOB3, DIALOG_STYLE_MSGBOX, "Arms Dealer", "Commands:\n\n/getmats, /sellgun\n\nLocation of job: This job can be obtained outside the large Ammunation, at the 'gun' icon.", "Done", "Cancel");
		}
	}
	if(dialogid == BODYGUARDJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, BODYGUARDJOB3, DIALOG_STYLE_MSGBOX, "Bodyguard", "Commands:\n\n/guard [player] [Price $2000 - $10000]\n\nLocation of job: This job can be obtained outside the Ganton Gym, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == BODYGUARDJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, BODYGUARDJOB2, DIALOG_STYLE_MSGBOX, "Bodyguard", "Note: The reload time is always 1 minute. There are no job levels for this job. In other words, you do not need to level it up to earn the max money you can.", "Next", "Cancel");
		}
	}
	if(dialogid == MECHANICJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, MECHANICJOB2, DIALOG_STYLE_MSGBOX, "Mechanic", "Note: The reload time is always 1 minute, no matter what level.", "Next", "Cancel");
		}
	}
	if(dialogid == MECHANICJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, MECHANICJOB3, DIALOG_STYLE_MSGBOX, "Mechanic", "Commands:\n\n/fix, /repair, /hyd, /nos, /refill, /mechduty\n\nLocation of job: This job can be obtained at blueberry, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == DRUGDEALERJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, DRUGDEALERJOB2, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Note: The reload time is always 1 minute, no matter what level.\n\nSkills:\n\nLevel 1: You can hold 10 pot and 5 crack.\nLevel 2: You can hold 20 pot and 15 crack.\nLevel 3: You can hold 30 pot and 15 crack.\nLevel 4: You can hold 40 pot and 20 crack.\nLevel 5: You can hold 50 pot and 25 crack.", "Next", "Cancel");
		}
	}
	if(dialogid == DRUGDEALERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, DRUGDEALERJOB3, DIALOG_STYLE_MSGBOX, "Drug Dealer", "Commands:\n\n/sellpot, /getpot, /sellcrack, /getcrack, /getseeds, /plantseeds\n\nLocation of job: This job can be located outside the Drug Den, opposite the Ganton Gym, at the 'D' icon.", "Done", "Cancel");
		}
	}
	if(dialogid == WHOREJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, WHOREJOB3, DIALOG_STYLE_MSGBOX, "Whore", "Commands:\n\n/sex\n/sex is a command to offer sex to a client, and may only be used in a vehicle.\n\nLocation of job: This job can be obtained inside the Pig Pen, at the job icon(yellow circle).", "Done", "Cancel");
		}
	}
	if(dialogid == LAWYERJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, LAWYERJOB3, DIALOG_STYLE_MSGBOX, "Lawyer", "Commands:\n\n/defend, /free, /wanted, /lawyerduty, /offerappeal, /finishappeal\n\nLocation of job: This job can be found at the job map icon(yellow circle)near the bank.", "Done", "Cancel");
		}
	}
	if(dialogid == WHOREJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, WHOREJOB2, DIALOG_STYLE_MSGBOX, "Whore", "Note: The reload time is always 1 minute, no matter what level.\n\nSkills:\n\nLevel 1: You have a very high chance of catching/giving STD's.\nLevel 2: You have a high chance of catching/giving STD's.\nLevel 3: You have a medium chance of catching/giving STD's.\nLevel 4: You have a low chance of catching/giving STD's.\nLevel 5: You have a very low chance of catching/giving STD's.", "Next", "Cancel");
		}
	}
	if(dialogid == LAWYERJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, LAWYERJOB2, DIALOG_STYLE_MSGBOX, "Lawyer", "Note: The reload time is always 2 minutes, no matter what level.\n\nSkills:\n\nLevel 1: You can reduce inmates sentences by 1 minute.\nLevel 2: You can reduce inmates sentences by 2 minutes.\nLevel 3: You can reduce inmates sentences by 3 minutes.\nLevel 4: You can reduce inmates sentences by 4 minutes.\nLevel 5: You can reduce inmates sentences by 5 minutes.", "Next", "Cancel");
		}
	}
	if(dialogid == DETECTIVEJOB2)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, DETECTIVEJOB3, DIALOG_STYLE_MSGBOX, "Detective", "Commands:\n\n/find\n/find is a command that can locate a player's position.\n\nLocation of job: This job can be obtained in the Los Santos Police Department.", "Done", "Cancel");
		}
	}
    if(dialogid == DETECTIVEJOB)
	{
   		if(response)
		{
			ShowPlayerDialog(playerid, DETECTIVEJOB2, DIALOG_STYLE_MSGBOX, "Detective", "Skills:\n\nLevel 1: You can find someone for 3 seconds, the reload time is 2 minutes.\nLevel 2: You can find someone for 5 seconds, the reload time is 1 minute, 20 seconds.\nLevel 3: You can find someone for 7 seconds, the reload time is 1 minute.\nLevel 4: You can find someone for 9 seconds, the reload time is 30 seconds.\nLevel 5: You can find someone for 11 seconds, the reload time is 20 seconds.", "Next", "Cancel");
		}
	}
	if(dialogid == DIALOG_LICENSE_BUY && response) // LICENSE BUY DIALOG ~Mike
	{
		switch (listitem)
		{
			case 0:
			{
			    if(PlayerInfo[playerid][pCarLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 5000)
			        {
			            SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a driver's license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-5000);
					PlayerInfo[playerid][pCarLic] = 1;
					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a driver's license.");
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You already have a driver's license.");
			}
			case 1:
			{
			    if(PlayerInfo[playerid][pBoatLic] == 0)
			    {
			        if(GetPlayerCash(playerid) < 5000)
			        {
			            SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a boating license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-5000);
					PlayerInfo[playerid][pBoatLic] = 1;
					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a boating license.");
				}
				else SendClientMessageEx(playerid, COLOR_GREY, "You already have a boating license.");
			}
			case 2:
			{
			    if(PlayerInfo[playerid][pFlyLic] == 0)
			    {
			    	if(PlayerInfo[playerid][pLevel] >=2)
			    	{
			    	    if(GetPlayerCash(playerid) < 25000)
			        	{
			            	SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a pilot's license.");
			            	return 1;
			        	}
						GivePlayerCash(playerid,-25000);
						PlayerInfo[playerid][pFlyLic] = 1;
      					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a pilot license; you will now be able to pilot aircraft.");
					}
					else SendClientMessageEx(playerid, COLOR_GREY, "You must be level 2 or above to acquire a pilot license.");
				}
                else SendClientMessageEx(playerid, COLOR_GREY, "You already have a pilot license.");
			}
			case 3:
			{
			    if(PlayerInfo[playerid][pTaxiLicense] == 0)
			    {
			        if(GetPlayerCash(playerid) < 35000)
			        {
			            SendClientMessageEx(playerid, COLOR_GREY, "You can not afford to buy a taxi license.");
			            return 1;
			        }
					GivePlayerCash(playerid,-35000);
					PlayerInfo[playerid][pTaxiLicense] = 1;
					SendClientMessageEx(playerid, COLOR_GREY, "You have successfully acquired a taxi license; you will be able to use /fare in any vehicle, and accept calls for taxis.");
				}
                else SendClientMessageEx(playerid, COLOR_GREY, "You already have a taxi license.");
			}
		}
	}
	if(dialogid == MDC_MAIN && response)
	{//*Find LEO\n*Civilian Information\n*Law Enforcement Agencies\n*Options
 		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
	   	switch( listitem )
	    {
	    	case 0:
	        {
	            ShowPlayerDialog(playerid, MDC_CIVILIANS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Civilian Options", "*Check Record\n*Licenses\n*Warrants\n*Issue Warrant\n*BOLO\n*Create BOLO\n*Delete", "OK", "Cancel");
	        }
	        case 1:
	        {
	            ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
	        }
	        case 2:
	        {
         		ShowPlayerDialog(playerid, MDC_MEMBERS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Agency List", "*LSPD\n*SFPD\n*FDSA\n*FBI\n*SASD\n*SAAS\n*NOOSE\n*SHAFT", "OK", "Cancel");
	        }
	        case 3: ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | MDC Message", "Enter recipient's Name or ID No.", "OK", "Cancel");
		    case 4: ShowPlayerDialog(playerid, MDC_SMS, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | SMS", "Enter recipient's phone number.", "OK", "Cancel");
		}
	}
	if(dialogid == MDC_FIND && response)
	{
	    new giveplayerid;
		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | LEO GPS Location", "Enter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if(giveplayerid == playerid)
				{
				    ShowPlayerDialog(playerid, MDC_FIND, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: You cannot find yourself.\nEnter the Law Enforcment Official's Name or ID No.", "Enter", "Cancel");

					return 1;
				}
				if(PlayerInfo[giveplayerid][pMember] == 3|| PlayerInfo[giveplayerid][pLeader] == 1 || PlayerInfo[giveplayerid][pMember] == 1 ||
				PlayerInfo[giveplayerid][pLeader] == 1|| PlayerInfo[giveplayerid][pMember] == 2 || PlayerInfo[giveplayerid][pLeader] == 2 ||
				PlayerInfo[giveplayerid][pLeader] == 5 || PlayerInfo[giveplayerid][pLeader] == 6 || PlayerInfo[giveplayerid][pMember] == 6 ||
				PlayerInfo[giveplayerid][pMember] == 7 || PlayerInfo[giveplayerid][pLeader] == 7 || PlayerInfo[giveplayerid][pMember] == 11 ||
				PlayerInfo[giveplayerid][pLeader] == 11 || PlayerInfo[giveplayerid][pMember] == 17 || PlayerInfo[giveplayerid][pLeader] == 17 || IsACop(playerid))
				{
	    			SetPlayerMarkerForPlayer(playerid,giveplayerid,FIND_COLOR);
                    FindingPlayer[playerid] = giveplayerid;
		    		FindTime[playerid] = 1;
		    		FindTimePoints[playerid] = 30;
		    	}
		    	else
		    	{
			    	SendClientMessageEx(playerid, COLOR_GRAD2, " You can only find other cops!");
		    	}
			}
		}
	}
	if(dialogid == MDC_CIVILIANS && response)
	{ //*Check Record\n*Licenses\nWarrants\n*Issue Warrant
		new WarrantString[512];
	 	if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		if(News[hTaken6] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd6], News[hContact6]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken7] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd7], News[hContact7]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken8] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd8], News[hContact8]);
		    strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken9] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd9], News[hContact9]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken10] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd10], News[hContact10]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken11] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd11], News[hContact11]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken12] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd12], News[hContact12]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(News[hTaken13] == 1)
		{
			format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd13], News[hContact13]);
			strcat(WarrantString, string, sizeof(WarrantString));
		}
		if(strlen(WarrantString) == 0)
		{
		    strcat(WarrantString, "No Warrants at this time.", sizeof(WarrantString));
		}
		switch(listitem)
		{
		    case 0: ShowPlayerDialog(playerid, MDC_CHECK, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Records Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
		    case 1: ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | License Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
			case 2: ShowPlayerDialog(playerid, MDC_WARRANTS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Warrant List", WarrantString, "Enter", "Cancel");
			case 3: ShowPlayerDialog(playerid, MDC_ISSUE_SLOT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Slot would you like to use?", "1\n2\n3\n4\n5\n6\n7\n8", "Enter", "Cancel");
		    case 4:
		    {
				new BOLOString[512];
				if(News[hTaken14] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd14], News[hContact14]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken15] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd15], News[hContact15]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken16] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd16], News[hContact16]);
				    strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken17] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd17], News[hContact17]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken18] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd18], News[hContact18]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken19] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd19], News[hContact19]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken20] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd20], News[hContact20]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(News[hTaken21] == 1)
				{
					format(string, sizeof(string), "%s :: Officer: %s\n", News[hAdd21], News[hContact21]);
					strcat(BOLOString, string, sizeof(BOLOString));
				}
				if(strlen(BOLOString) == 0)
				{
				    strcat(BOLOString, "No BOLOs at this time.", sizeof(BOLOString));
				}
				ShowPlayerDialog(playerid, MDC_BOLOLIST, DIALOG_STYLE_LIST, "SA-MDC - Logged In | BOLO List", BOLOString, "OK", "Cancel");
		    }
		    case 5:
		    {
		    	ShowPlayerDialog(playerid, MDC_BOLO_SLOT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Slot would you like to use?", "1\n2\n3\n4\n5\n6\n7\n8", "Enter", "Cancel");
		    }
		    case 6:
	        {
	        	ShowPlayerDialog(playerid, MDC_DELETE, DIALOG_STYLE_LIST, "SA-MDC - Logged In | Delete", "*BOLO\n*Warrant", "OK", "Cancel");
	        }
		}

	}
	if(dialogid == MDC_MEMBERS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new MemberString[1024], giveplayer[MAX_PLAYER_NAME];
		new rank[64], division[64], employer[64];
		if (listitem == 0)
		{ //*LSPD\n*SFPD\n*FDSA\n*FBI
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 1)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_LSPD, DIALOG_STYLE_LIST, "SA-MDC - Logged in | LSPD Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 1)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
			    if(PlayerInfo[i][pMember] == 3)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_SFPD, DIALOG_STYLE_LIST, "SA-MDC - Logged in | SFPD Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 2)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
      	 		if(PlayerInfo[i][pMember] == 4)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_FDSA, DIALOG_STYLE_LIST, "SA-MDC - Logged in | FDSA Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 3)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 2)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_FBI, DIALOG_STYLE_LIST, "SA-MDC - Logged in | FBI Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 4)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 7)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_FBI, DIALOG_STYLE_LIST, "SA-MDC - Logged in | SASD Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 5)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 11)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_FBI, DIALOG_STYLE_LIST, "SA-MDC - Logged in | SAAS Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 6)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 13)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_FBI, DIALOG_STYLE_LIST, "SA-MDC - Logged in | NOOSE Members", MemberString, "Select", "Cancel");
		}
		else if (listitem == 7)
		{
			foreach(new i: Player)
			{
			    giveplayer = GetPlayerNameEx(i);
				if(PlayerInfo[i][pMember] == 16)
				{
				    GetPlayerFactionInfo(i, rank, division, employer);
					//GetPlayerName(i, giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* %s (%s) %s Ph: %d\n", rank, division,  giveplayer, PlayerInfo[i][pPnumber]);
					strcat(MemberString, string, sizeof(MemberString));
				}
			}
			if(strlen(MemberString) == 0)
			{
			    strcat(MemberString, "No Members online at this time.", sizeof(MemberString));
			}
			ShowPlayerDialog(playerid, MDC_FBI, DIALOG_STYLE_LIST, "SA-MDC - Logged in | SHAFT Members", MemberString, "Select", "Cancel");
		}
	}
	if(dialogid == MDC_WARRANTS && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
	    ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Warrants", inputtext, "OK", "Back");
	}
	if(dialogid == MDC_BOLOLIST && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
	    ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | BOLO Hot Sheet", inputtext, "OK", "Back");
	}
/*	if(dialogid == MDC_CHECK && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid = ReturnUser(inputtext);
		new HistoryString[1024];
		new giveplayer[MAX_PLAYER_NAME];
		giveplayer = GetPlayerNameEx(giveplayerid);
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			format(string, sizeof(string), "Name : %s\n", GetPlayerNameEx(giveplayerid));
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Crime : %s\n", PlayerCrime[giveplayerid][pAccusedof]);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Claimant : %s\n", PlayerCrime[giveplayerid][pVictim]);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Reported : %s\n", PlayerCrime[giveplayerid][pAccusing]);
			strcat(HistoryString, string, sizeof(HistoryString));
			format(string, sizeof(string), "Accused : %s\n", PlayerCrime[giveplayerid][pBplayer]);
			strcat(HistoryString, string, sizeof(HistoryString));
			if(PlayerInfo[giveplayerid][pProbationTime] != 0)
			{
			    format(string, sizeof(string), "Probation : %d minutes left\n", PlayerInfo[giveplayerid][pProbationTime]);
				strcat(HistoryString, string, sizeof(HistoryString));
			}
			for(new i=0; i<MAX_PLAYERVEHICLES; i++)
        	{
		    	if(PlayerVehicleInfo[giveplayerid][i][pvTicket] != 0)
				{
            	    format(string, sizeof(string), "Vehicle registration: %d | Vehicle Name: %s | Ticket: $%d.\n",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					strcat(HistoryString, string, sizeof(HistoryString));
		    	}
	    	}
	    	ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Criminal History", HistoryString, "OK", "Cancel");
			format(string, sizeof(string), "** DISPATCH: %s has run a check for warrants on %s **", GetPlayerNameEx(playerid), giveplayer);
			SendRadioMessage(1, COLOR_DBLUE, string);
			SendRadioMessage(2, COLOR_DBLUE, string);
			SendRadioMessage(3, COLOR_DBLUE, string);
			return 1;
		}
		else
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "There is no record of that person.", "OK", "Cancel");
			return 1;
		}
	}*/
	if(dialogid == MDC_CHECK && response)
	{
	    if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid = ReturnUser(inputtext);
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			DisplayCrimes(playerid, giveplayerid);
			format(string, sizeof(string), "** DISPATCH: %s has run a check for warrants on %s **", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			SendRadioMessage(1, COLOR_DBLUE, string);
			SendRadioMessage(2, COLOR_DBLUE, string);
			SendRadioMessage(3, COLOR_DBLUE, string);
			return 1;
		}
		else
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "There is no record of that person.", "OK", "Cancel");
			return 1;
		}
	}
	if(dialogid == MDC_LICENSES && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid;
		if(sscanf(inputtext, "u", giveplayerid))
		{
			ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | License Check", "Enter the Person's Name or ID No.", "Enter", "Cancel");
			return 1;
		}
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    new LicenseString[256], giveplayer[MAX_PLAYER_NAME];
				GetPlayerName(playerid, sendername, sizeof(sendername));
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				new text1[20];
				new text2[20];
				new text3[20];
				new text4[20];
				if(PlayerInfo[giveplayerid][pCarLic] == 0) { text1 = "Not Passed"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 1) { text1 = "Passed"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 2) { text1 = "Suspended"; }
				if(PlayerInfo[giveplayerid][pCarLic] == 3) { text1 = "Cancelled"; }
				if(PlayerInfo[giveplayerid][pFlyLic]) { text4 = "Passed"; } else { text4 = "Not Passed"; }
				if(PlayerInfo[giveplayerid][pBoatLic]) { text2 = "Passed"; } else { text2 = "Not Passed"; }
	   			if(PlayerInfo[giveplayerid][pGunLic]) { text3 = "Passed"; } else { text3 = "Not Passed"; }
				format(string, sizeof(string), "   Name: %s\n", giveplayer);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Drivers License: %s.\n", text1);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Flying License: %s.\n", text4);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Sailing License: %s.\n", text2);
				strcat(LicenseString, string, sizeof(LicenseString));
				format(string, sizeof(string), "-Weapon License: %s.\n", text3);
				strcat(LicenseString, string, sizeof(LicenseString));
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Criminal History", LicenseString, "OK", "Cancel");
				format(string, sizeof(string), "** DISPATCH: %s has ran a license check on %s **", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				SendRadioMessage(1, COLOR_DBLUE, string);
				SendRadioMessage(2, COLOR_DBLUE, string);
				SendRadioMessage(3, COLOR_DBLUE, string);
				return 1;
			}
			else return ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Error!", "ERROR: Invalid Name or ID No.\nEnter the Person's Name or ID No.", "Enter", "Cancel");
		}
		else return ShowPlayerDialog(playerid, MDC_LICENSES, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Error!", "ERROR: Invalid Name or ID No.\nEnter the Person's Name or ID No.", "Enter", "Cancel");
	}
	if(dialogid == MDC_LSPD && response)
	{
	}
	if(dialogid == MDC_SFPD && response)
	{
	}
	if(dialogid == MDC_FBI && response)
	{
	}
	if(dialogid == MDC_FDSA && response)
	{
	}
	if(dialogid == MDC_MESSAGE && response)
	{
		if(!IsMDCPermitted(playerid)) return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, " Login Failed. You are not permitted to use the MDC!");
		new giveplayerid;
		if(sscanf(inputtext, "u", giveplayerid))
		{
			return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
			    format(string, sizeof(string), " Enter your message to %s ", GetPlayerNameEx(giveplayerid));
            	ShowPlayerDialog(playerid, MDC_MESSAGE_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | MDC Message", string, "OK", "Cancel");
            	SetPVarInt(playerid, "MDCMessageRecipient", giveplayerid);
			}
			else  return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
		}
		else return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
	}
	if(dialogid == MDC_SMS && response)
	{
		if(isnull(inputtext) || strval(inputtext) == 0)
		{
			return ShowPlayerDialog(playerid, MDC_SMS, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Phone Number\nEnter Recipient's Phone Number", "OK", "Cancel");
		}
		new phonenumb = strval(inputtext);
		format(string, sizeof(string), " Enter your message to %d ", phonenumb);
        ShowPlayerDialog(playerid, MDC_SMS_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | SMS Message", string, "OK", "Cancel");
        SetPVarInt(playerid, "SMSMessageRecipient", phonenumb);
	}
	if(dialogid == MDC_MESSAGE_2 && response)
	{
		new giveplayerid = GetPVarInt(playerid, "MDCMessageRecipient");
	    if(giveplayerid == INVALID_PLAYER_ID) return ShowPlayerDialog(playerid, MDC_MESSAGE, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: Invalid Recipient\nEnter recipient's Name or ID No.", "OK", "Cancel");
		if(giveplayerid == playerid)
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "You cannot send messages to yourself!", "OK", "Cancel");
			return 1;
		}
		if(ConnectedToPC[giveplayerid] == 1337 || IsPlayerInAnyVehicle(giveplayerid))
		{
	 		if(!IsMDCPermitted(giveplayerid))
			{
				return ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "That person is not logged into the MDC.", "OK", "Cancel");
			}
			if(!strlen(inputtext))
			{
				return ShowPlayerDialog(playerid, MDC_MESSAGE_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: You must type a message!\nEnter Recipient's Name or ID No.", "OK", "Cancel");
			}
			format(string, sizeof(string), "MDC Message sent to %s:\n%s", GetPlayerNameEx(giveplayerid), inputtext);
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Message Sent! ", string, "OK", "Cancel");
			if(ConnectedToPC[giveplayerid] == 1337)
			{
				format(string, sizeof(string), "MDC Message from %s:\n%s", GetPlayerNameEx(playerid), inputtext);
				ShowPlayerDialog(giveplayerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | New Message!", string, "OK", "Cancel");
				format(string, sizeof(string), "MDC Message from %s: %s", GetPlayerNameEx(playerid), inputtext);
				SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
			}
			else
			{
				format(string, sizeof(string), "MDC Message from %s:\n%s", GetPlayerNameEx(playerid), inputtext);
				ShowPlayerDialog(giveplayerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | New Message! ", string, "OK", "Cancel");
			}
		}
		else
		{
			ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | ERROR ", "That officer is not logged into the MDC.", "OK", "Cancel");
			return 1;
		}
		return 1;
	}
	if(dialogid == MDC_SMS_2 && response)
	{
		new phonenumb = GetPVarInt(playerid, "SMSMessageRecipient");
		if(!strlen(inputtext))
		{
			return ShowPlayerDialog(playerid, MDC_SMS_2, DIALOG_STYLE_INPUT, "SA-MDC - Logged In | Error!", "ERROR: You must type a message!\nEnter Recipient's Phone Number", "OK", "Cancel");
		}
		if(phonenumb == 555)
		{
			if(strcmp("yes", inputtext, true) == 0) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Text Message Delivered.");
				SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: I have no idea what you're talking about, Sender: MOLE (555)");
				//SendAudioToPlayer(playerid, 47, 100);
				RingTone[playerid] = 20;
				return 0;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "SMS: A simple 'yes' will do, Sender: MOLE (555)");
				//SendAudioToPlayer(playerid, 47, 100);
				RingTone[playerid] = 20;
				//ChatLog(string);
				return 0;
			}
		}
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
			{
				Mobile[playerid] = i; //caller connecting
				if(PhoneOnline[i] > 0)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player's phone is switched off.");
					return 1;
				}
				format(string, sizeof(string), "SMS: %s, Sender: %s (Ph:%d)", inputtext,GetPlayerNameEx(playerid),PlayerInfo[playerid][pPnumber]);
				GetPlayerName(i, sendername, sizeof(sendername));
				RingTone[i] =20;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Message Sent! ", string, "OK", "Cancel");
				SendClientMessageEx(i, COLOR_YELLOW, string);
				//PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				//SendAudioToPlayer(playerid, 47, 100);
				Mobile[playerid] = 255;
				return 1;
			}
		}
		ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Message Delivery Failed! ", "Message Delivery Failed. Try Again", "OK", "Cancel");
	}
	if(dialogid == MDC_BOLO && response)
	{
		new x_nr = GetPVarInt(playerid, "BOLOISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken14] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd14], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact14], string, 0, strlen(string), 255);
				News[hTaken14] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 1 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken15] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd15], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact15], string, 0, strlen(string), 255);
				News[hTaken15] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 2 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken16] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd16], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact16], string, 0, strlen(string), 255);
				News[hTaken16] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 3 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken17] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd17], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact17], string, 0, strlen(string), 255);
				News[hTaken17] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 4 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken18] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd18], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact18], string, 0, strlen(string), 255);
				News[hTaken18] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 5 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken19] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd19], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact19], string, 0, strlen(string), 255);
				News[hTaken19] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 6 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken20] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd20], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact20], string, 0, strlen(string), 255);
				News[hTaken20] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 7 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken21] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter BOLO Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd21], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact21], string, 0, strlen(string), 255);
				News[hTaken21] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for a BOLO on the MDC -BOLO\nto see the current BOLO List browse to BOLO when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for a BOLO have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 8 is already Taken!", "OK", "Back");
				return 1;
			}
		}
	}
	if(dialogid == MDC_BOLO_SLOT && response)
	{
	    SetPVarInt(playerid, "BOLOISSUESLOT", listitem + 1);
	    ShowPlayerDialog(playerid, MDC_BOLO, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Issue Warrant", "Enter BOLO Details", "Enter", "Cancel");
	}
	if(dialogid == MDC_ISSUE_SLOT && response)
	{
	    SetPVarInt(playerid, "ISSUESLOT", listitem + 1);
	    ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | Issue Warrant", "Enter Arrest Warrant Details", "Enter", "Cancel");
	}
	if(dialogid == MDC_END_ID && response)
	{
		ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Civilian Information\n*Find LEO\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
	}
	if(dialogid == MDC_ISSUE && response)
	{
		new x_nr = GetPVarInt(playerid, "ISSUESLOT");
		if(x_nr == 1)
		{
			if(News[hTaken6] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd6], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact6], string, 0, strlen(string), 255);
				News[hTaken6] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 1 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 2)
		{
			if(News[hTaken7] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd7], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact7], string, 0, strlen(string), 255);
				News[hTaken7] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 2 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 3)
		{
			if(News[hTaken8] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd8], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact8], string, 0, strlen(string), 255);
				News[hTaken8] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 3 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 4)
		{
			if(News[hTaken9] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd9], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact9], string, 0, strlen(string), 255);
				News[hTaken9] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 4 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 5)
		{
			if(News[hTaken10] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd10], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact10], string, 0, strlen(string), 255);
				News[hTaken10] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 5 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 6)
		{
			if(News[hTaken11] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd11], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact11], string, 0, strlen(string), 255);
				News[hTaken11] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 6 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 7)
		{
			if(News[hTaken12] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd12], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact12], string, 0, strlen(string), 255);
				News[hTaken12] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 7 is already Taken!", "OK", "Back");
				return 1;
			}
		}
		if(x_nr == 8)
		{
			if(News[hTaken13] == 0)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(strlen(inputtext) < 9) { ShowPlayerDialog(playerid, MDC_ISSUE, DIALOG_STYLE_INPUT, "SA-MDC - Logged in | ERROR", "ERROR: Must Be 9+ characters\nEnter Arrest Warrant Details", "Enter", "Cancel"); return 1; }
				format(string, sizeof(string), "%s",inputtext); strmid(News[hAdd13], string, 0, strlen(string), 255);
				format(string, sizeof(string), "%s",sendername); strmid(News[hContact13], string, 0, strlen(string), 255);
				News[hTaken13] = 1;
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Success! ","* You placed details for an arrest warrant on the MDC -Warrants\nto see the current Warrants browse to Warrants when logged in to the mdc", "OK", "Back");
				SendRadioMessage(1, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(2, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(3, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(7, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(11, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(13, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				SendRadioMessage(16, COLOR_LIGHTBLUE, "** MDC: Details for an arrest warrant have been updated.");
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, MDC_END_ID, DIALOG_STYLE_MSGBOX, "SA-MDC - Logged in | Error! ", "Spot 8 is already Taken!", "OK", "Back");
				return 1;
			}
		}
	}
	if(dialogid == MDC_DELETE && response)
	{
	    if(listitem == 0)
	    {
	    	ShowPlayerDialog(playerid, MDC_DEL_BOLO, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which BOLO Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
	    }
		if(listitem == 1)
		{
			ShowPlayerDialog(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
		}
	}
	if(dialogid == MDC_DEL_BOLO && response)
	{
		new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialog(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
			return 1;
		}
		if(strcmp(inputtext, "1") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd14], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (1) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "2") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd15], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (2) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "3") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd16], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (3) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "4") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd17], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (4) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "5") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd18], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (5) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "6") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd19], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (6) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "7") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd20], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (7) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext, "8") == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd21], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Be on the Lookout (8) from the MDC -BOLO.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd14], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact14], string1, 0, strlen(string1), 255);
			News[hTaken14] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd15], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact15], string1, 0, strlen(string1), 255);
			News[hTaken15] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd16], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact16], string1, 0, strlen(string1), 255);
			News[hTaken16] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd17], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact17], string1, 0, strlen(string1), 255);
			News[hTaken17] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd18], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact18], string1, 0, strlen(string1), 255);
			News[hTaken18] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd19], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact19], string1, 0, strlen(string1), 255);
			News[hTaken19] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd20], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact20], string1, 0, strlen(string1), 255);
			News[hTaken20] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd21], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact21], string1, 0, strlen(string1), 255);
			News[hTaken21] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted all the details for Be on the Lookout from the MDC -BOLO.");
			return 1;
		}
	}
	if(dialogid == MDC_DEL_WARRANT && response)
	{
	    new string1[MAX_PLAYER_NAME];
		if(isnull(inputtext))
		{
			ShowPlayerDialog(playerid, MDC_DEL_WARRANT, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Which Warrant Slot would you like to delete?", "1\n2\n3\n4\n5\n6\n7\n8\nALL", "Enter", "Cancel");
			return 1;
		}
		if(strcmp(inputtext,"1",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd6], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (1) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"2",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd7], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (2) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"3",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd8], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (3) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"4",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd9], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (4) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"5",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd10], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (5) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"6",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd11], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (6) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"7",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd12], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (7) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"8",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd13], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted details for Arrest Warrant (8) from the MDC -Warrants.");
			return 1;
		}
		else if(strcmp(inputtext,"all",true) == 0)
		{
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd6], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact6], string1, 0, strlen(string1), 255);
			News[hTaken6] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd7], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact7], string1, 0, strlen(string1), 255);
			News[hTaken7] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd8], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact8], string1, 0, strlen(string1), 255);
			News[hTaken8] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd9], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact9], string1, 0, strlen(string1), 255);
			News[hTaken9] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd10], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact10], string1, 0, strlen(string1), 255);
			News[hTaken10] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd11], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact11], string1, 0, strlen(string1), 255);
			News[hTaken11] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd12], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact12], string1, 0, strlen(string1), 255);
			News[hTaken12] = 0;
			format(string, sizeof(string), "Nothing"); strmid(News[hAdd13], string, 0, strlen(string), 255);
			format(string1, sizeof(string1), "No-one");	strmid(News[hContact13], string1, 0, strlen(string1), 255);
			News[hTaken13] = 0;
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You deleted all the details for Arrest Warrants from the MDC -Warrants.");
			return 1;
		}
	}
	if(dialogid == MDC_LOGOUT && response)
	{
	}
	if(dialogid == MDC_CREATE && response)
	{
	}
	if( (dialogid >= MDC_START_ID && dialogid <= MDC_END_ID) && !response)
	{
	    if(dialogid == MDC_MAIN)
	    {
	        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You are now logged off the MDC.");
			ConnectedToPC[playerid] = 0;
	    }
	    else
		{
			ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Civilian Information\n*Find LEO\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
		}
	}
	if(dialogid == DRINKLISTDIALOG)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0:
			    {
			        SetPVarString(playerid, "DrinkName", "Beer");
			        SetPVarInt(playerid, "DrinkPrice", 60);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_BEER);
			    }
			    case 1:
			    {
			        SetPVarString(playerid, "DrinkName", "Vodka");
			        SetPVarInt(playerid, "DrinkPrice", 100);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    }
			    case 2:
			    {
			        SetPVarString(playerid, "DrinkName", "Whiskey");
			        SetPVarInt(playerid, "DrinkPrice", 100);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_WINE);
			    }
			    case 3:
			    {
			        SetPVarString(playerid, "DrinkName", "Water");
			        SetPVarInt(playerid, "DrinkPrice", 20);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			    case 4:
			    {
			        SetPVarString(playerid, "DrinkName", "Soda");
			        SetPVarInt(playerid, "DrinkPrice", 20);
			        SetPVarInt(playerid, "DrinkSpecialAction", SPECIAL_ACTION_DRINK_SPRUNK);
			    }
			}
			if(GetPlayerCash(playerid) >= GetPVarInt(playerid, "DrinkPrice"))
			{
			    new drinkname[32];
				GetPVarString(playerid, "DrinkName", drinkname, sizeof(drinkname));
			    new drinkprice = GetPVarInt(playerid, "DrinkPrice");
				new dspecialaction = GetPVarInt(playerid, "DrinkSpecialAction");
			    format(string, sizeof(string), "You have asked the bartender for a drink of %s for $%d.  Do you want to tip the bartender?", drinkname, drinkprice);
			    ShowPlayerDialog(playerid, DRINKDIALOG, DIALOG_STYLE_MSGBOX, "Drink Purchase", string, "Yes", "No");
			    format(string, sizeof(string), "* %s pours %s a %s and hands it to them.", GetPlayerNameEx(DrinkOffer[playerid]), GetPlayerNameEx(playerid), drinkname);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* You pour %s a %s, they slide you the money. ($%d)", GetPlayerNameEx(playerid), drinkname, drinkprice );
				SendClientMessageEx(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(DrinkOffer[playerid], drinkprice);
				GivePlayerCash(playerid, -drinkprice);
				SetPlayerSpecialAction(playerid, dspecialaction);
				SetPVarInt(playerid, "DrinkCooledDown", 1);

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(DrinkOffer[playerid], ipex, sizeof(ipex));

				if(drinkprice >= 25000 && (PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3 || PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3))
				{
					format(string, sizeof(string), "%s (IP:%s) has tipped %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(DrinkOffer[playerid]), ipex, drinkprice);
					Log("logs/pay.log", string);
					ABroadCast(COLOR_YELLOW, string, 2);
				}
			}
			else
			{
			    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You don't have enough money for this drink!");
			}
	    }
	    else
	    {
	        DrinkOffer[playerid] = INVALID_PLAYER_ID;
	    }
	}
	if((dialogid == SELLVIP))
	{
		new
			iTargetID = GetPVarInt(playerid, "VIPSell"),
			iPrice = GetPVarInt(playerid, "VIPCost");

	    if(response)
	    {

	        if(!IsPlayerConnected(iTargetID)) return SendClientMessageEx(playerid, COLOR_GREY, "The other player has disconnected.");
			new iTargetName[MAX_PLAYER_NAME];
			GetPVarString(playerid, "VIPSeller", iTargetName, sizeof(iTargetName));
			if(strcmp(iTargetName, GetPlayerNameEx(iTargetID)) != 0) {
                return SendClientMessageEx(playerid, COLOR_GREY, "The other player has disconnected.");
			}
	        new	viptype[7];
	        if(GetPlayerCash(playerid) >= iPrice)
	        {
	            if(PlayerInfo[iTargetID][pDonateRank] == 3)
	            {
                    PlayerInfo[iTargetID][pGVip] = 0;
                    PlayerInfo[playerid][pGVip] = 1;
	            }
	        	//Player buying the VIP
	        	GivePlayerCash(playerid, -GetPVarInt(playerid, "VIPCost"));
	        	PlayerInfo[playerid][pDonateRank] = PlayerInfo[iTargetID][pDonateRank];
	        	PlayerInfo[playerid][pVIPExpire] = PlayerInfo[iTargetID][pVIPExpire];
                PlayerInfo[playerid][pTempVIP] = 0;
				PlayerInfo[playerid][pBuddyInvited] = 0;

	        	if(PlayerInfo[playerid][pVIPM] != 0)
	        	{
	        	    PlayerInfo[playerid][pVIPMO] = PlayerInfo[playerid][pVIPM];
	        	}
	        	PlayerInfo[playerid][pVIPM] = PlayerInfo[iTargetID][pVIPM];

	        	// Player selling the vip
	        	GivePlayerCash(iTargetID, GetPVarInt(playerid, "VIPCost"));
	        	PlayerInfo[iTargetID][pDonateRank] = 0;
				PlayerInfo[iTargetID][pVIPExpire] = 0;
				PlayerInfo[iTargetID][pVIPMO] = PlayerInfo[iTargetID][pVIPM];
				PlayerInfo[iTargetID][pVIPM] = 0;
				switch(PlayerInfo[playerid][pDonateRank])
        		{
        		    case 1: viptype = "Bronze";
        		    case 2: viptype = "Silver";
        		    case 3: viptype = "Gold";
  					default: viptype = "Error";
        		}
				format(string, sizeof(string), "You have purchased %s VIP from %s for $%d which will expire on %s.", viptype, GetPlayerNameEx(iTargetID), iPrice, date(PlayerInfo[playerid][pVIPExpire], 2));
				SendClientMessage(playerid, COLOR_WHITE, string);
            	format(string, sizeof(string), "You have sold your %s VIP to %s for $%d.", viptype, GetPlayerNameEx(playerid), iPrice);
				SendClientMessage(iTargetID, COLOR_WHITE, string);
				new iYear, iMonth, iDay, szIP[16], szIP2[16];
				getdate(iYear, iMonth, iDay);
				GetPlayerIp(iTargetID, szIP, sizeof(szIP));
				GetPlayerIp(playerid, szIP2, sizeof(szIP2));
				format(string, sizeof(string), "[SELLVIP] %s (IP:%s) has sold %s VIP to %s (IP:%s) for $%d. (VIPM: %d) - (%d/%d/%d)", GetPlayerNameEx(iTargetID),szIP, viptype, GetPlayerNameEx(playerid), szIP2, iPrice, PlayerInfo[playerid][pVIPM], iMonth,iDay,iYear);
				Log("logs/shoplog.log", string);

				PlayerInfo[playerid][pVIPSold] = gettime() + 7200;
				PlayerInfo[iTargetID][pVIPSold] = gettime() + 7200;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "You don't have enough cash to purchase it!");
			    SendClientMessage(iTargetID, COLOR_GREY, "He did not have enough cash to purchase it!");
			}
			DeletePVar(playerid, "VIPSell");
			DeletePVar(playerid, "VIPCost");
	    }
	    else
	    {
	        format(string, sizeof(string), "You have declined the offer to purchase VIP from %s.", GetPlayerNameEx(iTargetID));
	        SendClientMessage(playerid, COLOR_WHITE, string);
	        format(string, sizeof(string), "%s has declined the offer to purchase VIP.", GetPlayerNameEx(playerid));
	        SendClientMessage(iTargetID, COLOR_WHITE, string);
			DeletePVar(playerid, "VIPSell");
			DeletePVar(playerid, "VIPCost");
	    }
	    return 1;
	}
	if((dialogid == DRINKDIALOG))
	{
	    if(response)
	    {
			ShowPlayerDialog(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Tipping the Bartender", "How much would you like to tip the bartender for his service?", "OK", "Cancel");
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	if((dialogid == TIPDIALOG))
	{
	    if(response)
	    {
			if(GetPlayerCash(playerid) >= strval(inputtext))
			{
			    if(strval(inputtext) < 0 || strval(inputtext) > 10000)
			    {
			    	return ShowPlayerDialog(playerid, TIPDIALOG, DIALOG_STYLE_INPUT, "Tipping the Bartender", "Must be above $0 or below $10,000.\nHow much would you like to tip the bartender for his service?", "OK", "Cancel");
			    }
			    format(string, sizeof(string), "** %s gives %s a tip for his service.", GetPlayerNameEx(playerid), GetPlayerNameEx(DrinkOffer[playerid]));
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				format(string, sizeof(string), "* %s has given you a tip of $%d for your service.", GetPlayerNameEx(playerid), strval(inputtext));
				SendClientMessageEx(DrinkOffer[playerid], COLOR_LIGHTBLUE, string);
				GivePlayerCash(DrinkOffer[playerid], strval(inputtext));
				GivePlayerCash(playerid, -strval(inputtext));

				new ip[32], ipex[32];
				GetPlayerIp(playerid, ip, sizeof(ip));
				GetPlayerIp(DrinkOffer[playerid], ipex, sizeof(ipex));

				if(strval(inputtext) >= 25000 && (PlayerInfo[DrinkOffer[playerid]][pLevel] <= 3 || PlayerInfo[playerid][pLevel] <= 3 ))
				{
					format(string, sizeof(string), "%s (IP:%s) has tipped %s (IP:%s) $%d in this session.", GetPlayerNameEx(playerid), ip, GetPlayerNameEx(DrinkOffer[playerid]), ipex, strval(inputtext));
					Log("logs/pay.log", string);
					ABroadCast(COLOR_YELLOW, string, 2);
				}

				DrinkOffer[playerid] = INVALID_PLAYER_ID;
			}
		}
		else
		{
		    DrinkOffer[playerid] = INVALID_PLAYER_ID;
		}
	}
	if((dialogid == PANEL))
	{
	    if(response)
	    {
	        switch(listitem)
	        {
				case 0:
				{
    				new
						szPanel[566],
						szPosition[16][23];

					for(new i = 0; i < 16; i++)
					{
				    	if(CellDoors[i])
						{
							szPosition[i]="{00FF00}Opened{FFFFFF}";
						}
						else
						{
						    szPosition[i]="{FF0000}Closed{FFFFFF}";
						}
					}

					format(szPanel, sizeof(szPanel),
					"Cell - 1 (%s)\r\n\
					Cell - 2 (%s)\r\n\
					Cell - 3 (%s)\r\n\
					Cell - 4 (%s)\r\n\
					Cell - 5 (%s)\r\n\
					Cell - 6 (%s)\r\n\
					Cell - 7 (%s)\r\n\
					Cell - 8 (%s)\r\n\
					Cell - 9 (%s)\r\n\
					Cell - 10 (%s)\r\n\
					Cell - 11 (%s)\r\n\
					Cell - 12 (%s)\r\n\
					Block A-1 (%s)\r\n\
					Block A-2 (%s)\r\n\
					Block B-1 (%s)\r\n\
					Block B-2 (%s)", szPosition[0],szPosition[1], szPosition[2], szPosition[3], szPosition[4], szPosition[5], szPosition[6],
					szPosition[7], szPosition[8], szPosition[9], szPosition[10], szPosition[11], szPosition[12], szPosition[13], szPosition[14], szPosition[15]);
            		ShowPlayerDialog(playerid, PANELCONTROLS, DIALOG_STYLE_LIST, "Security Panel", szPanel, "Operate", "Cancel");
				}
				case 1:
				{
				    if(PlayerInfo[playerid][pRank] < 2)
				        return SendClientMessageEx(playerid, COLOR_GREY, "You are to low rank to use this! (Rank 2+)");

    				for(new i = 0; i < 16; i++)
					{
						if(CellDoors[i])
						{
		    				CellDoors[i] = 0;
						}
					}
      				MoveDynamicObject(BlastDoors[5], -2053.92187500,-205.46679688,977.75732422, 1);
          			MoveDynamicObject(BlastDoors[10], -2053.92187500,-207.59570312,977.75732422, 1);
					MoveDynamicObject(BlastDoors[4], -2041.78613281, -211.28515625, 984.02539062, 1);
      				MoveDynamicObject(BlastDoors[9], -2041.78808594,-209.15917969,984.02539062, 1);
      				MoveDynamicObject(BlastDoors[3], -2041.79785156, -195.64550781, 990.45825195, 1);
      				MoveDynamicObject(BlastDoors[8], -2041.79687500,-197.77246094,990.45825195, 1);
      				MoveDynamicObject(BlastDoors[2],-2048.29296875, -205.54394531, 990.45825195, 1);
      				MoveDynamicObject(BlastDoors[7], -2048.29296875,-207.67382812,990.45825195, 1);
      				MoveDynamicObject(CellGates[11], -2084.99902344,-207.03710938,992.19836426, 1);
      				MoveDynamicObject(CellGates[10], -2081.52539062,-205.66894531,992.19836426, 1);
     				MoveDynamicObject(CellGates[9], -2074.00585938,-207.03710938,992.19836426, 1);
 					MoveDynamicObject(CellGates[8], -2069.53710938,-205.66894531,992.19836426, 1);
      				MoveDynamicObject(CellGates[7], -2061.96289062,-207.03710938,992.19836426, 1);
      				MoveDynamicObject(CellGates[6],-2057.59765625,-205.66894531,992.19836426, 1);
      				MoveDynamicObject(CellGates[5], -2052.22460938,-191.64550781,992.19836426, 1);
      				MoveDynamicObject(CellGates[4], -2055.99511719,-193.01757812,992.19836426, 1);
      				MoveDynamicObject(CellGates[3], -2063.56738281,-191.64550781,992.19836426, 1);
			 		MoveDynamicObject(CellGates[2], -2068.00195312,-193.01757812,992.19836426, 1);
      				MoveDynamicObject(CellGates[1], -2075.55273438,-191.64550781,992.19836426, 1);
					MoveDynamicObject(CellGates[0], -2080.28613281,-193.01757812,992.19836426, 1);

      				new
	        			szAlert[128];

					format( szAlert, sizeof(szAlert), "ALERT: The Easter Basin Correctional Facility is now on Lockdown for an emergency (( %s ))", GetPlayerNameEx(playerid));
					SendRadioMessage(1, COLOR_DBLUE, szAlert);
					SendRadioMessage(2, COLOR_DBLUE, szAlert);
					SendRadioMessage(3, COLOR_DBLUE, szAlert);
					SendRadioMessage(4, COLOR_DBLUE, szAlert);
					SendRadioMessage(5, COLOR_DBLUE, szAlert);
					SendRadioMessage(6, COLOR_DBLUE, szAlert);
					SendRadioMessage(7, COLOR_DBLUE, szAlert);
					SendRadioMessage(11, COLOR_DBLUE, szAlert);
					SendRadioMessage(13, COLOR_DBLUE, szAlert);
					SendRadioMessage(16, COLOR_DBLUE, szAlert);
				}
				case 2:
				{
				    if(PlayerInfo[playerid][pRank] < 2)
				        return SendClientMessageEx(playerid, COLOR_GREY, "You are to low rank to use this! (Rank 2+)");

				    for(new i = 0; i < 16; i++)
					{
		    			if(!CellDoors[i])
						{
						    CellDoors[i] = 1;
						}
					}
					MoveDynamicObject(CellGates[0], -2078.6,-193,992.1983, 1);
				 	MoveDynamicObject(CellGates[1], -2077.1,-191.6455 ,992.1983, 1);
				 	MoveDynamicObject(CellGates[2], -2066, -193.0175, 992.1983, 1);
				 	MoveDynamicObject(CellGates[3], -2065.5,-191.6455,992.1983, 1);
				 	MoveDynamicObject(CellGates[4], -2054.2,-193.0175,992.1983, 1);
				 	MoveDynamicObject(CellGates[5], -2054, -191.6455,992.1983, 1);
				 	MoveDynamicObject(CellGates[6], -2059.6,-205.6689, 992.1983, 1);
				 	MoveDynamicObject(CellGates[7], -2059.9 ,-207.037,992.1983, 1);
				 	MoveDynamicObject(BlastDoors[5], -2053.92187500,-205.46679688,980.75732422, 1);
      				MoveDynamicObject(BlastDoors[10], -2053.92187500,-207.59570312,980.75732422, 1);
          			MoveDynamicObject(BlastDoors[4], -2041.78613281, -211.28515625, 987.02539062, 1);
	            	MoveDynamicObject(BlastDoors[9], -2041.78808594,-209.15917969,987.02539062, 1);
		           	MoveDynamicObject(BlastDoors[3],  -2041.79785156, -195.64550781, 993.45825195, 1);
		            MoveDynamicObject(BlastDoors[8], -2041.79687500,-197.77246094,993.45825195, 1);
      				MoveDynamicObject(BlastDoors[2], -2048.29296875, -205.54394531, 993.45825195, 1);
          			MoveDynamicObject(BlastDoors[7], -2048.29296875,-207.67382812,993.45825195, 1);
          			MoveDynamicObject(CellGates[11], -2083.3999, -207.0371,992.1983, 1);
	            	MoveDynamicObject(CellGates[10], -2083.1, -205.6689,992.1983, 1);
		            MoveDynamicObject(CellGates[9], -2071.9, -207.0371,992.1983, 1);
		            MoveDynamicObject(CellGates[8], -2071.6,-205.6689,992.1983, 1);

					new
	        			szAlert[128];

					format( szAlert, sizeof(szAlert), "The Lockdown has been lifted at the Easter Basin Correctional Facility (( %s ))", GetPlayerNameEx(playerid));
					SendRadioMessage(1, COLOR_DBLUE, szAlert);
					SendRadioMessage(2, COLOR_DBLUE, szAlert);
					SendRadioMessage(3, COLOR_DBLUE, szAlert);
					SendRadioMessage(4, COLOR_DBLUE, szAlert);
					SendRadioMessage(5, COLOR_DBLUE, szAlert);
					SendRadioMessage(6, COLOR_DBLUE, szAlert);
					SendRadioMessage(7, COLOR_DBLUE, szAlert);
					SendRadioMessage(11, COLOR_DBLUE, szAlert);
					SendRadioMessage(13, COLOR_DBLUE, szAlert);
					SendRadioMessage(16, COLOR_DBLUE, szAlert);
				}
				case 3:
				{
				    new
				        szAlert[128];

					format( szAlert, sizeof(szAlert), "%s has activated a distress beacon inside Easter Basin Correctional Facility - assistance is required.", GetPlayerNameEx(playerid));
					SendRadioMessage(1, COLOR_DBLUE, szAlert);
					SendRadioMessage(2, COLOR_DBLUE, szAlert);
					SendRadioMessage(3, COLOR_DBLUE, szAlert);
					SendRadioMessage(4, COLOR_DBLUE, szAlert);
					SendRadioMessage(5, COLOR_DBLUE, szAlert);
					SendRadioMessage(6, COLOR_DBLUE, szAlert);
					SendRadioMessage(7, COLOR_DBLUE, szAlert);
					SendRadioMessage(11, COLOR_DBLUE, szAlert);
					SendRadioMessage(13, COLOR_DBLUE, szAlert);
					SendRadioMessage(16, COLOR_DBLUE, szAlert);
				}
			}
	    }
	}
	if((dialogid == PANELCONTROLS))
	{
 		if(response)
	    {
			switch(listitem)
			{
			    case 0:
			    {
			        if(CellDoors[0])
			        {
			            CellDoors[0] = 0;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 1 is closing...");
			            MoveDynamicObject(CellGates[0], -2080.28613281,-193.01757812,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[0] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 1 is opening...");
           				MoveDynamicObject(CellGates[0], -2078.6,-193,992.1983, 1);
			        }
			    }
			    case 1:
			    {
			        if(CellDoors[1])
			        {
						CellDoors[1] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 2 is closing...");
			            MoveDynamicObject(CellGates[1], -2075.55273438,-191.64550781,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[1] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 2 is opening...");
			            MoveDynamicObject(CellGates[1], -2077.1,-191.6455 ,992.1983, 1);
			        }
			    }
			    case 2:
			    {
			        if(CellDoors[2])
			        {
						CellDoors[2] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 3 is closing...");
			            MoveDynamicObject(CellGates[2], -2068.00195312,-193.01757812,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[2] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 3 is opening...");
			            MoveDynamicObject(CellGates[2], -2066, -193.0175, 992.1983, 1);
			        }
			    }
			    case 3:
			    {
			        if(CellDoors[3])
			        {
						CellDoors[3] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 4 is closing...");
			            MoveDynamicObject(CellGates[3], -2063.56738281,-191.64550781,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[3] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 4 is opening...");
			            MoveDynamicObject(CellGates[3], -2065.5,-191.6455,992.1983, 1);
			        }
			    }
			    case 4:
			    {
			        if(CellDoors[4])
			        {
						CellDoors[4] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 5 is closing...");
			            MoveDynamicObject(CellGates[4], -2055.99511719,-193.01757812,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[4] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 5 is opening...");
			            MoveDynamicObject(CellGates[4], -2054.2,-193.0175,992.1983, 1);
			        }
			    }
			    case 5:
			    {
			        if(CellDoors[5])
			        {
						CellDoors[5] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 6 is closing...");
			            MoveDynamicObject(CellGates[5], -2052.22460938,-191.64550781,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[5] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 6 is opening...");
			            MoveDynamicObject(CellGates[5], -2054, -191.6455,992.1983, 1);
			        }
			    }
			    case 6:
			    {
			        if(CellDoors[6])
			        {
						CellDoors[6] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 7 is closing...");
			            MoveDynamicObject(CellGates[6],-2057.59765625,-205.66894531,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[6] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 7 is opening...");
			            MoveDynamicObject(CellGates[6], -2059.6,-205.6689, 992.1983, 1);
			        }
			    }
			    case 7:
			    {
			        if(CellDoors[7])
			        {
						CellDoors[7] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 8 is closing...");
			            MoveDynamicObject(CellGates[7], -2061.96289062,-207.03710938,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[7] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 8 is opening...");
			            MoveDynamicObject(CellGates[7], -2059.9 ,-207.037,992.1983, 1);
			        }
			    }
			    case 8:
			    {
			        if(CellDoors[8])
			        {
						CellDoors[8] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 9 is closing...");
			            MoveDynamicObject(CellGates[8], -2069.53710938,-205.66894531,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[8] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 9 is opening...");
			            MoveDynamicObject(CellGates[8], -2071.6,-205.6689,992.1983, 1);
			        }
			    }
			    case 9:
			    {
			        if(CellDoors[9])
			        {
						CellDoors[9] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 10 is closing...");
			            MoveDynamicObject(CellGates[9], -2074.00585938,-207.03710938,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[9] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 10 is opening...");
			            MoveDynamicObject(CellGates[9], -2071.9, -207.0371,992.1983, 1);
			        }
			    }
			    case 10:
			    {
			        if(CellDoors[10])
			        {
						CellDoors[10] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 11 is closing...");
			            MoveDynamicObject(CellGates[10], -2081.52539062,-205.66894531,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[10] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 11 is opening...");
			            MoveDynamicObject(CellGates[10], -2083.1, -205.6689,992.1983, 1);
			        }
			    }
			    case 11:
			    {
			        if(CellDoors[11])
			        {
						CellDoors[11] = 0;
						SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 12 is closing...");
			            MoveDynamicObject(CellGates[11], -2084.99902344,-207.03710938,992.19836426, 1);
			        }
			        else
			        {
			            CellDoors[11] = 1;
			            SendClientMessageEx(playerid, COLOR_WHITE, "Cell - 12 is opening...");
			            MoveDynamicObject(CellGates[11], -2083.3999, -207.0371,992.1983, 1);
			        }
			    }
			    case 12:
			    {
			        if(CellDoors[12])
			        {
			            CellDoors[12] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "Block A-1 is closing...");
			            MoveDynamicObject(BlastDoors[2],-2048.29296875, -205.54394531, 990.45825195, 1);
			            MoveDynamicObject(BlastDoors[7], -2048.29296875,-207.67382812,990.45825195, 1);
			        }
			        else
			        {
			            CellDoors[12] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "Block A-1 is opening...");
			            MoveDynamicObject(BlastDoors[2], -2048.29296875, -205.54394531, 993.45825195, 1);
			            MoveDynamicObject(BlastDoors[7], -2048.29296875,-207.67382812,993.45825195, 1);
			        }
				}
				case 13:
			    {
			        if(CellDoors[13])
			        {
			            CellDoors[13] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "Block A-2 is closing...");
			            MoveDynamicObject(BlastDoors[3], -2041.79785156, -195.64550781, 990.45825195, 1);
			            MoveDynamicObject(BlastDoors[8], -2041.79687500,-197.77246094,990.45825195, 1);
			        }
			        else
			        {
			            CellDoors[13] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "Block A-2 is opening...");
			            MoveDynamicObject(BlastDoors[3],  -2041.79785156, -195.64550781, 993.45825195, 1);
			            MoveDynamicObject(BlastDoors[8], -2041.79687500,-197.77246094,993.45825195, 1);
			        }
				}
				case 14:
			    {
			        if(CellDoors[14])
			        {
			            CellDoors[14] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "Block B-1 is closing...");
			            MoveDynamicObject(BlastDoors[4], -2041.78613281, -211.28515625, 984.02539062, 1);
			            MoveDynamicObject(BlastDoors[9], -2041.78808594,-209.15917969,984.02539062, 1);
			        }
			        else
			        {
			            CellDoors[14] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "Block B-1 is opening...");
			            MoveDynamicObject(BlastDoors[4], -2041.78613281, -211.28515625, 987.02539062, 1);
			            MoveDynamicObject(BlastDoors[9], -2041.78808594,-209.15917969,987.02539062, 1);
			        }
				}
				case 15:
			    {
			        if(CellDoors[15])
			        {
			            CellDoors[15] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "Block B-2 is closing...");
			            MoveDynamicObject(BlastDoors[5], -2053.92187500,-205.46679688,977.75732422, 1);
			            MoveDynamicObject(BlastDoors[10], -2053.92187500,-207.59570312,977.75732422, 1);
			        }
			        else
			        {
			            CellDoors[15] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "Block B-2 is opening...");
			            MoveDynamicObject(BlastDoors[5], -2053.92187500,-205.46679688,980.75732422, 1);
			            MoveDynamicObject(BlastDoors[10], -2053.92187500,-207.59570312,980.75732422, 1);
			        }
				}
			}
		}
	}
	else if(dialogid == SETSTATION)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            if(!GetPVarType(playerid, "pHTTPWait"))
	        	{
	        		SetPVarInt(playerid, "pHTTPWait", 1);
					HTTP(playerid, HTTP_GET, "radio.evolution-rp.net/scott/radio/radio.php?listgenres=1", "", "GenreHTTP");
				}
				else
				{
				    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
				}
	        }
	        else if(listitem == 1)
	        {
	            if(!GetPVarType(playerid, "pHTTPWait"))
	        	{
	        		SetPVarInt(playerid, "pHTTPWait", 1);
					HTTP(playerid, HTTP_GET, "radio.evolution-rp.net/scott/radio/radio.php?top50=1", "", "Top50HTTP");
				}
				else
				{
				    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
				}
	        }
	        else if(listitem == 2)
	        {
	            ShowPlayerDialog(playerid,STATIONSEARCH,DIALOG_STYLE_INPUT,"Station Search","Input a search criteria:","Search","Back");
			}
			else if(listitem == 3)
			{
			    if(IsPlayerInAnyVehicle(playerid))
				{
			 	    foreach(new i: Player) if(GetPlayerVehicleID(i) != 0 && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)) {
						PlayAudioStreamForPlayerEx(i, "http://radio.evolution-rp.net:8000/listen.pls");
				  	}
				  	format(stationidv[GetPlayerVehicleID(playerid)], 64, "%s", "http://radio.evolution-rp.net:8000/listen.pls");
				  	format(string, sizeof(string), "* %s changes the radio station.", GetPlayerNameEx(playerid), string);
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else if(GetPVarType(playerid, "pBoomBox"))
				{
				    foreach(new i: Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "pBoomBoxArea")))
						{
							PlayAudioStreamForPlayerEx(i, "http://radio.evolution-rp.net:8000/listen.pls", GetPVarFloat(playerid, "pBoomBoxX"), GetPVarFloat(playerid, "pBoomBoxY"), GetPVarFloat(playerid, "pBoomBoxZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "pBoomBoxStation", "http://radio.evolution-rp.net:8000/listen.pls");
				}
				else
				{
				    PlayAudioStreamForPlayerEx(playerid, "http://radio.evolution-rp.net:8000/listen.pls");
				    SetPVarInt(playerid, "MusicIRadio", 1);
				}
			}
			else if(listitem == 4)
			{
			    if(IsPlayerInAnyVehicle(playerid))
				{
			 	    foreach(new i: Player) if(GetPlayerVehicleID(i) != 0 && GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)) {
						PlayAudioStreamForPlayerEx(i, "http://nick.ng-gaming.net:8000/listen.pls");
				  	}
				  	format(stationidv[GetPlayerVehicleID(playerid)], 64, "%s", "http://nick.ng-gaming.net:8000/listen.pls");
				  	format(string, sizeof(string), "* %s changes the radio station.", GetPlayerNameEx(playerid), string);
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else if(GetPVarType(playerid, "pBoomBox"))
				{
				    foreach(new i: Player)
					{
						if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "pBoomBoxArea")))
						{
							PlayAudioStreamForPlayerEx(i, "http://nick.ng-gaming.net:8000/listen.pls", GetPVarFloat(playerid, "pBoomBoxX"), GetPVarFloat(playerid, "pBoomBoxY"), GetPVarFloat(playerid, "pBoomBoxZ"), 30.0, 1);
				  		}
				  	}
			  		SetPVarString(playerid, "pBoomBoxStation", "http://nick.ng-gaming.net:8000/listen.pls");
				}
				else
				{
				    PlayAudioStreamForPlayerEx(playerid, "http://nick.ng-gaming.net:8000/listen.pls");
				    SetPVarInt(playerid, "MusicIRadio", 1);
				}
			}
			else if(listitem == 5)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
			        if(GetPVarType(playerid, "pBoomBox"))
			        {
				        SendClientMessage(playerid, COLOR_WHITE, "You have turned off the boom box.");
						foreach(new i: Player) if(IsPlayerInDynamicArea(i, GetPVarInt(playerid, "pBoomBoxArea"))) StopAudioStreamForPlayerEx(i);
				  		DeletePVar(playerid, "pBoomBoxStation");
					}
					else
					{
					    StopAudioStreamForPlayerEx(playerid);
					}
			    }
			  	else
	  			{
		  			format(string, sizeof(string), "* %s turns off the radio.", GetPlayerNameEx(playerid), string);
					ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    foreach(new i: Player) if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)) {
						StopAudioStreamForPlayerEx(i);
			  		}
       				stationidv[GetPlayerVehicleID(playerid)][0] = 0;
				}
			}
	    }
	}
	else if(dialogid == GENRES)
	{
		if(response)
		{
		    if(!GetPVarType(playerid, "pHTTPWait"))
		    {
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?genre=%d", (listitem+1));
			    SetPVarInt(playerid, "pSelectGenre", (listitem+1));
			    SetPVarInt(playerid, "pHTTPWait", 1);
				HTTP(playerid, HTTP_GET, string, "", "StationListHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
		}
		else
		{
		    ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nTurn radio off","Select", "Close");
        	DeletePVar(playerid, "pSelectGenre");
		}
	}
	else if(dialogid == STATIONLIST)
	{
	    if(response)
		{
		    if(!GetPVarType(playerid, "pHTTPWait"))
		    {
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?genre=%d&station=%d", GetPVarInt(playerid, "pSelectGenre"), (listitem+1));
			    SetPVarInt(playerid, "pHTTPWait", 1);
			    SetPVarInt(playerid, "pSelectStation", (listitem+1));
				HTTP(playerid, HTTP_GET, string, "", "StationInfoHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
	    }
	    else
	    {
	        if(!GetPVarType(playerid, "pHTTPWait"))
		    {
				SetPVarInt(playerid, "pHTTPWait", 1);
				HTTP(playerid, HTTP_GET, "radio.evolution-rp.net/scott/radio/radio.php?listgenres=1", "", "GenreHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
		}
	}
	else if(dialogid == TOP50LIST)
	{
	    if(!response)
		{
			ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nTurn radio off","Select", "Close");
		}
	    else
		{
		    if(!GetPVarType(playerid, "pHTTPWait"))
		    {
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?top50=1&station=%d", (listitem+1));
			    SetPVarInt(playerid, "pHTTPWait", 1);
			    SetPVarInt(playerid, "pSelectStation", (listitem+1));
				HTTP(playerid, HTTP_GET, string, "", "Top50InfoHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
	    }
	}
	else if(dialogid == STATIONLISTEN)
	{
	    if(response)
	    {
	        if(!GetPVarType(playerid, "pHTTPWait"))
		    {
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?genre=%d&station=%d&listen=1", GetPVarInt(playerid, "pSelectGenre"), GetPVarInt(playerid, "pSelectStation"));
				SetPVarInt(playerid, "pHTTPWait", 1);
				HTTP(playerid, HTTP_GET, string, "", "StationSelectHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
		}
	    else
		{
            if(!GetPVarType(playerid, "pHTTPWait"))
		    {
		    	format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?genre=%d", GetPVarInt(playerid, "pSelectGenre"));
			   	SetPVarInt(playerid, "pHTTPWait", 1);
				HTTP(playerid, HTTP_GET, string, "", "StationListHTTP");
				DeletePVar(playerid, "pSelectStation");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
	    }
	}
	else if(dialogid == TOP50LISTEN)
	{
	    if(!response)
	    {
	        if(!GetPVarType(playerid, "pHTTPWait"))
        	{
        	    DeletePVar(playerid, "pSelectStation");
	        	SetPVarInt(playerid, "pHTTPWait", 1);
				HTTP(playerid, HTTP_GET, "radio.evolution-rp.net/scott/radio/radio.php?top50=1", "", "Top50HTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
		}
	    else
		{
		    if(!GetPVarType(playerid, "pHTTPWait"))
		    {
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?top50=1&station=%d&listen=1", GetPVarInt(playerid, "pSelectStation"));
				SetPVarInt(playerid, "pHTTPWait", 1);
				HTTP(playerid, HTTP_GET, string, "", "StationSelectHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
	    }
	}
	else if(dialogid == STATIONSEARCH)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 0 || strlen(inputtext) > 64)
	        {
	            ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nTurn radio off","Select", "Close");
			}
			else
			{
		        if(!GetPVarType(playerid, "pHTTPWait"))
			    {
				    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?search=%s", inputtext);
				    SetPVarString(playerid, "pSearchStation", inputtext);
					SetPVarInt(playerid, "pHTTPWait", 1);
					ShowNoticeGUIFrame(playerid, 6);
					HTTP(playerid, HTTP_GET, string, "", "StationSearchHTTP");
				}
				else
				{
				    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
				}
			}
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nTurn radio off","Select", "Close");
	    }
	}
	else if(dialogid == STATIONSEARCHLIST)
	{
	    if(response)
		{
		    if(!GetPVarType(playerid, "pHTTPWait"))
		    {
			    GetPVarString(playerid, "pSearchStation", string, sizeof(string));
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?search=%s&station=%d", string, (listitem+1));
				SetPVarInt(playerid, "pHTTPWait", 1);
			    ShowNoticeGUIFrame(playerid, 6);
			    SetPVarInt(playerid, "pSelectStation", (listitem+1));
				HTTP(playerid, HTTP_GET, string, "", "StationSearchInfoHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
	    }
	    else
	    {
	        ShowPlayerDialog(playerid,SETSTATION,DIALOG_STYLE_LIST,"Radio Menu","Genres\nTop 50 Stations\nSearch\nK-LSR\nNick's Radio\nTurn radio off","Select", "Close");
		}
	}
	else if(dialogid == STATIONSEARCHLISTEN)
	{
	    if(response)
	    {
	        if(!GetPVarType(playerid, "pHTTPWait"))
		    {
  			 	GetPVarString(playerid, "pSearchStation", string, sizeof(string));
			    format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?search=%s&station=%d&listen=1", string, GetPVarInt(playerid, "pSelectStation"));
				SetPVarInt(playerid, "pHTTPWait", 1);
				ShowNoticeGUIFrame(playerid, 6);
				HTTP(playerid, HTTP_GET, string, "", "StationSelectHTTP");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
		}
	    else
		{
            if(!GetPVarType(playerid, "pHTTPWait"))
		    {
		        GetPVarString(playerid, "pSearchStation", string, sizeof(string));
		    	format(string, sizeof(string), "radio.evolution-rp.net/scott/radio/radio.php?search=%s", string);
			    ShowNoticeGUIFrame(playerid, 6);
				HTTP(playerid, HTTP_GET, string, "", "StationSearchHTTP");
				DeletePVar(playerid, "pSelectStation");
			}
			else
			{
			    SendClientMessage(playerid, 0xFFFFFFAA, "HTTP Thread is busy");
			}
	    }
	}
	else if(dialogid == INTERACTMAIN)
	{
	    if(response)
	    {
	        new name[MAX_PLAYER_NAME+8];
	    	GetPVarString(playerid, "pInteractName", name, sizeof(name));
		    if(listitem == 0)
			{
		        ShowPlayerDialog(playerid, INTERACTPAY, DIALOG_STYLE_INPUT, name, "Input an amount to pay", "Pay", "Cancel");
		    }
		    else if(listitem == 1)
		    {
                ShowPlayerDialog(playerid, INTERACTGIVE, DIALOG_STYLE_LIST, name, "Pot\nCrack\nMaterials\nFirework", "Select", "Cancel");
		    }
		}
		else
		{
		    DeletePVar(playerid, "pInteractName");
		    DeletePVar(playerid, "pInteractID");
		}
	}
	else if(dialogid == INTERACTPAY)
	{
	    if(response)
	    {
	        new params[24];
	        format(params, sizeof(params), "%d %d", GetPVarInt(playerid, "pInteractID"), strval(inputtext));
	        DeletePVar(playerid, "pInteractName");
		    DeletePVar(playerid, "pInteractID");
	        return cmd_pay(playerid, params);
	    }
	    else
		{
		    DeletePVar(playerid, "pInteractName");
		    DeletePVar(playerid, "pInteractID");
		}
	}
	else if(dialogid == INTERACTGIVE)
	{
	    if(response)
	    {
	        new name[MAX_PLAYER_NAME+8];
	       	SetPVarInt(playerid, "pInteractGiveType", listitem);
	    	GetPVarString(playerid, "pInteractName", name, sizeof(name));
	        ShowPlayerDialog(playerid, INTERACTGIVE2, DIALOG_STYLE_INPUT, name, "Input an amount to give", "Give", "Cancel");
	    }
	    else
		{
		    DeletePVar(playerid, "pInteractName");
		    DeletePVar(playerid, "pInteractID");
		}
	}
	else if(dialogid == INTERACTGIVE2)
	{
	    if(response)
	    {
	        new params[24];
	        switch(GetPVarInt(playerid, "pInteractGiveType"))
	        {
	        	case 0: format(params, sizeof(params), "%d pot %d", GetPVarInt(playerid, "pInteractID"), strval(inputtext));
	        	case 1: format(params, sizeof(params), "%d crack %d", GetPVarInt(playerid, "pInteractID"), strval(inputtext));
	        	case 2: format(params, sizeof(params), "%d materials %d", GetPVarInt(playerid, "pInteractID"), strval(inputtext));
	        	case 3: format(params, sizeof(params), "%d firework %d", GetPVarInt(playerid, "pInteractID"), strval(inputtext));
			}
	        DeletePVar(playerid, "pInteractName");
		    DeletePVar(playerid, "pInteractID");
		    DeletePVar(playerid, "pInteractGive");
	        return cmd_give(playerid, params);
	    }
	    else
		{
		    DeletePVar(playerid, "pInteractName");
		    DeletePVar(playerid, "pInteractID");
		    DeletePVar(playerid, "pInteractGive");
		}
	}
	else if(dialogid == DMRCONFIRM)
	{
	    if(response)
	    {
	        new giveplayerid = GetPVarInt(playerid, "pDMReport");
			format(string, sizeof(string), "You have successfully reported %s.", GetPlayerNameEx(giveplayerid));
			SendClientMessage(playerid, COLOR_WHITE, string);

   			if(PlayerInfo[playerid][pAdmin] >= 2 || PlayerInfo[playerid][pSMod] == 1) format(string, sizeof(string), "INSERT INTO dm_watchdog (id,reporter,timestamp,superwatch) VALUES (%d,%d,%d,1)", GetPlayerSQLId(giveplayerid), GetPlayerSQLId(playerid), gettime());
      		else format(string, sizeof(string), "INSERT INTO dm_watchdog (id,reporter,timestamp) VALUES (%d,%d,%d)", GetPlayerSQLId(giveplayerid), GetPlayerSQLId(playerid), gettime());
			mysql_function_query(MainPipeline, string, false, "OnQueryFinish", "ii", SENDDATA_THREAD, playerid);

			format(string, sizeof string, "{AA3333}AdmWarning{FFFF00}: %s (ID %i) has reported %s (ID %i) for DM (last shot: %i seconds ago).", GetPlayerNameEx(playerid), playerid, GetPlayerNameEx(giveplayerid), giveplayerid, gettime() - ShotPlayer[giveplayerid][playerid]);
			ABroadCast(COLOR_YELLOW, string, 2);
			ShotPlayer[giveplayerid][playerid] = 0;
	    }
	    else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "DM Report Cancelled");
		}
		DeletePVar(playerid, "pDMReport");
	}
	else if(dialogid == SHOPOBJECT_ORDERID)
	{
		if(response)
		{
			SetPVarString(playerid, "shopobject_orderid", inputtext);
			ShowPlayerDialog(playerid, SHOPOBJECT_GIVEPLAYER, DIALOG_STYLE_INPUT, "Shop Objects - Player ID", "Please enter the Player ID", "OK", "Cancel");
		}
	}
	else if(dialogid == SHOPOBJECT_GIVEPLAYER)
	{
		if(response)
		{
			SetPVarString(playerid, "shopobject_giveplayerid", inputtext);
			new stringg[1024];
			for(new x;x<sizeof(HoldingObjectsShop);x++)
			{
				format(stringg, sizeof(stringg), "%s%s\n", stringg, HoldingObjectsShop[x][holdingmodelname]);
			}
			ShowPlayerDialog(playerid, SHOPOBJECT_OBJECTID, DIALOG_STYLE_LIST, "Shop Objects - Object ID", stringg, "Select", "Cancel");
		}
	}
	else if(dialogid == SHOPOBJECT_OBJECTID)
	{
		if(response)
		{
			new giveplayerid;
			new str[MAX_PLAYER_NAME];
			GetPVarString(playerid, "shopobject_giveplayerid", str, MAX_PLAYER_NAME);
			sscanf(str, "u", giveplayerid);
			new stringg[512];
			if(!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
			{
				ShowPlayerDialog(playerid, SHOPOBJECT_GIVEPLAYER, DIALOG_STYLE_INPUT, "Shop Objects - Player ID", "ERROR: That player is not connected \nPlease re-enter the Player ID", "OK", "Cancel");
				return 1;
			}
			SetPVarInt(playerid, "shopobject_objectid", listitem);
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
				new name[24] = "None";

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[giveplayerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
						break;
					}
				}
				if(PlayerToyInfo[playerid][x][ptModelID] != 0 && (strcmp(name, "None", true) == 0))
				{
				    format(name, sizeof(name), "Obj ID: %d", PlayerToyInfo[playerid][x][ptModelID]);
				}
				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[giveplayerid][x][ptBone]]);
			}
			ShowPlayerDialog(playerid, SHOPOBJECT_TOYSLOT, DIALOG_STYLE_LIST, "Shop Objects - Select a Slot", stringg, "Select", "Cancel");
		}
	}
	else if(dialogid == SHOPOBJECT_TOYSLOT)
	{
		if(response)
		{
			new stringg[128];
			new giveplayerid;
			new str[MAX_PLAYER_NAME];
			GetPVarString(playerid, "shopobject_giveplayerid", str, MAX_PLAYER_NAME);
			sscanf(str, "u", giveplayerid);
			new object = HoldingObjectsShop[GetPVarInt(playerid, "shopobject_objectid")][holdingmodelid];
			new slot = listitem;
			new invoice[64];
			GetPVarString(playerid, "shopobject_orderid", invoice, sizeof(invoice));
			if(!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
			{
				ShowPlayerDialog(playerid, SHOPOBJECT_GIVEPLAYER, DIALOG_STYLE_INPUT, "Shop Objects - Player ID", "ERROR: That player is not connected \nPlease re-enter the Player ID", "OK", "Cancel");
				return 1;
			}
			format(stringg, sizeof(stringg), "You have given %s object %d in slot %d", GetPlayerNameEx(giveplayerid), object, slot);
			ShowPlayerDialog(playerid, SHOPOBJECT_SUCCESS, DIALOG_STYLE_MSGBOX, "Shop Objects - Success", stringg, "OK", "");
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "You have received a new /toys from the shop!");
			format(string, sizeof(string), "[SHOPOBJECTS] %s gave %s object %d in slot %d - Invoice %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), object, slot, invoice);
			PlayerToyInfo[giveplayerid][slot][ptModelID] = object;
			PlayerToyInfo[giveplayerid][slot][ptBone] = 1;
			Log("logs/shoplog.log", string);
			g_mysql_SaveToys(giveplayerid, slot);
		}
	}
	else if(dialogid == LISTTOYS_DELETETOY)
	{
	    if(response)
	    {
	        if(PlayerInfo[playerid][pAdmin] < 4)
	        {
				return SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to do that");
	        }
			new giveplayerid = GetPVarInt(playerid, "listitem_giveplayerid");
			SetPVarInt(playerid, "listitem_toyslot", listitem);
			format(string, sizeof(string), "Are you sure you want to delete %s's toy (Model ID: %d) from slot %d?", GetPlayerNameEx(giveplayerid), PlayerToyInfo[giveplayerid][listitem][ptModelID], listitem);
			ShowPlayerDialog(playerid, LISTTOYS_DELETETOYCONFIRM, DIALOG_STYLE_MSGBOX, "Delete Toy - Are you sure?", string, "Yes", "No");
	    }
	}
	else if(dialogid == LISTTOYS_DELETETOYCONFIRM)
	{
	    if(response)
	    {
	        new stringg[128], giveplayerid = GetPVarInt(playerid, "listitem_giveplayerid"), slot = GetPVarInt(playerid, "listitem_toyslot");
	        new object =  PlayerToyInfo[giveplayerid][slot][ptModelID];
	        if(!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
			{
				ShowPlayerDialog(playerid, SHOPOBJECT_GIVEPLAYER, DIALOG_STYLE_MSGBOX, "Delete Toy - Player ID", "ERROR: That player is not connected", "OK", "");
				return 1;
			}
			format(stringg, sizeof(stringg), "You have deleted %s's object %d in slot %d", GetPlayerNameEx(giveplayerid), object, slot);
			ShowPlayerDialog(playerid, SHOPOBJECT_SUCCESS, DIALOG_STYLE_MSGBOX, "Delete Toy - Success", stringg, "OK", "");
			format(stringg, sizeof(stringg), "Admin %s has deleted your toy (obj model: %d) from slot %d.", GetPlayerNameEx(playerid), object, slot);
			SendClientMessageEx(giveplayerid, COLOR_WHITE, stringg);
			format(string, sizeof(string), "[TOYDELETE] %s deleted %s's object %d in slot %d", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), object, slot);
			PlayerToyInfo[giveplayerid][slot][ptModelID] = 0;
			PlayerToyInfo[giveplayerid][slot][ptBone] = 0;
			Log("logs/toydelete.log", string);
			g_mysql_SaveToys(giveplayerid, slot);
	    }
	}
	else if(dialogid == MDC_SHOWCRIMES)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid, MDC_CIVILIANS, DIALOG_STYLE_LIST, "SA-MDC - Logged in | Civilian Options", "*Check Record\n*Licenses\n*Warrants\n*Issue Warrant\n*BOLO\n*Create BOLO\n*Delete", "OK", "Cancel");
	    }
	}
	else if(dialogid == FLAG_LIST)
	{
	    if(response)
	    {
	        ShowPlayerDialog(playerid, FLAG_DELETE, DIALOG_STYLE_INPUT, "FLAG DELETION", "Which flag would you like to delete?", "Delete Flag", "Close");
	    }
	}
	else if(dialogid == FLAG_DELETE)
	{
		if(response)
	    {
			format(string, sizeof(string), "Are you sure you want to delete Flag ID No: %d", strval(inputtext));
	       	ShowPlayerDialog(playerid, FLAG_DELETE2, DIALOG_STYLE_MSGBOX, "FLAG DELETION", string, "Yes", "No");
	       	SetPVarInt(playerid, "Flag_Delete_ID", strval(inputtext));
	    }
	}
	else if(dialogid == FLAG_DELETE2)
	{
		if(response)
	    {
	        new flagid = GetPVarInt(playerid, "Flag_Delete_ID");
	       	DeleteFlag(flagid, playerid);
	       	SendClientMessageEx(playerid, COLOR_YELLOW, " Flag deleted succesfully ");
	    }
	}
	else if(dialogid == CRATE_GUNMENU)
	{
	    if(response)
	    {
	        if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			new CrateID = GetPVarInt(playerid, "CrateGuns_CID");
			switch(listitem)
			{ //Desert Eagle\nSPAS-12\nMP5\nM4A1\nAK-47\nSniper Rifle\nShotgun
			    /*
			    Deagle - 4
				Spas - 8
				AK-47 - 5
				M4    - 6
				Sniper Rifle - 5
				MP5 - 5
			    */
			    case 0: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
				case 1: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
				case 2: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
				case 3: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
				case 4: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
				case 5: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
				case 6: // CRATE GUNS
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					CrateInfo[CrateID][GunQuantity]--;
				}
			}
			format(string, sizeof(string), "Serial Number: %d\nCapacity: %d/50", CrateID, CrateInfo[CrateID][GunQuantity]);
			UpdateDynamic3DTextLabelText(CrateInfo[CrateID][crLabel], COLOR_ORANGE, string);
	    }
	}
	else if(dialogid == DIALOG_REPORTMENU)
	{
	    if(response)
	    {
	        switch(listitem)
			{
			    case 0: //Deathmatch
			    {
			        if(PlayerInfo[playerid][pJailTime] > 0) {
			            SendClientMessage(playerid, COLOR_GREY, "You can't report while in prison.");
			        }
			        else {
			        	ShowPlayerDialog(playerid, DIALOG_REPORTDM, DIALOG_STYLE_INPUT, "Report Player - Deathmatch", "Enter the name or ID of the player.", "Enter", "Cancel");
					}
				}
			    case 1: //Hacking
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTHACK, DIALOG_STYLE_INPUT, "Report Player - Hacking", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 2: //Revenge Killing
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTRK, DIALOG_STYLE_INPUT, "Report Player - Revenge Killing", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 3: //Killing on Sight
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTKOS, DIALOG_STYLE_INPUT, "Report Player - Killing on Sight", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 4: //Chicken Running
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTCR, DIALOG_STYLE_INPUT, "Report Player - Chicken Running", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 5: //Car Ramming
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTCARRAM, DIALOG_STYLE_INPUT, "Report Player - Car Ramming", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 6: //Power Gaming
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTPG, DIALOG_STYLE_INPUT, "Report Player - Power Gaming", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 7: //Meta Gaming
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTMG, DIALOG_STYLE_INPUT, "Report Player - Meta Gaming", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 8: //Gun Discharge Exploits
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTGDE, DIALOG_STYLE_INPUT, "Report Player - Gun Discharge Exploits", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 9: //Spamming
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTSPAM, DIALOG_STYLE_INPUT, "Report Player - Spamming", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 10: //Money Farming
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTMF, DIALOG_STYLE_INPUT, "Report Player - Money Farming", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 11: //Ban Evader
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTBANEVADE, DIALOG_STYLE_INPUT, "Report Player - Ban Evader", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 12: //General Exploits
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTGE, DIALOG_STYLE_INPUT, "Report Player - General Exploits", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 13: //Releasing Hitman Names
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTRHN, DIALOG_STYLE_INPUT, "Report Player - Releasing Hitman Names", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 14: //Running/Swimming Man Exploit
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTRSE, DIALOG_STYLE_INPUT, "Report Player - Running/Swimming Man Exploit", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 15: //Log to Avoid
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTLOG, DIALOG_STYLE_INPUT, "Report Player - Logging to Avoid", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 16: //Car Surfing
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTCARSURF, DIALOG_STYLE_INPUT, "Report Player - Car Surfing", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 17: //NonRp Behavior
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTNRPB, DIALOG_STYLE_INPUT, "Report Player - NonRP Behavior", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 18: //Next Page
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTMENU2, DIALOG_STYLE_LIST, "Report Menu [2/2]", "Falling\nOOC Hit\nServer Advertising\nNonRP Name\nOther/Freetext (PVIP Only)\nHouse Move\nAppeal Admin Action\nPrize Claim\nShop Issue\nNot Listed Here\nNeed to speak to an admin\nRequest CA\nRequest Unmute\nPrevious Page","Select", "Exit");
			    }
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTMENU2)
	{
	    if(response)
	    {
	        switch(listitem)
			{
			    case 0: //Falling
			    {
			        if(gettime() - LastShot[playerid] < 20)
			        {
			            SendClientMessageEx(playerid, COLOR_GREY, "You have been hurt in the last 20 seconds, abusing this system will result in a temporary ban.");
			        }
			        else
			        {
			            new
			                Message[128];

						SetPVarInt(playerid, "HasReport", 1);
			            TogglePlayerControllable(playerid, 0);
						SetPVarInt(playerid, "IsFrozen", 1);
      					format(Message, sizeof(Message), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) has been frozen. (Falling Report)", GetPlayerNameEx(playerid), playerid);
						ABroadCast(COLOR_LIGHTRED, Message, 2);
						SendReportToQue(playerid, "Falling (Player Frozen)", 2, GetPlayerPriority(playerid));
						SendClientMessageEx(playerid, COLOR_WHITE, "A report has been sent to the available admins, you have been frozen.");
			        }
			    }
			    case 1: //OOC Hit
			    {
			        ShowPlayerDialog(playerid, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX, "OOC Hit", "{FFFFFF}OOC Hits are to be handled on the forums. (Player Complaint)", "Close", "");
			    }
			    case 2: //Server Advertising
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTSA, DIALOG_STYLE_INPUT, "Report Player - Server Advertising", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 3: //Non RP Name
			    {
			        ShowPlayerDialog(playerid, DIALOG_REPORTNRPN, DIALOG_STYLE_INPUT, "Report Player - Non-RP Name", "Enter the name or ID of the player.", "Enter", "Cancel");
			    }
			    case 4: //Other/Freetext (PVip Only!!)
			    {
			        if(PlayerInfo[playerid][pDonateRank] >= 4) {
			        	ShowPlayerDialog(playerid, DIALOG_REPORTFREE, DIALOG_STYLE_INPUT,"Other / Free Text","Enter the message you want to send to the admin team.","Send","Cancel");
					}
					else {
					    SendClientMessageEx(playerid, COLOR_GREY, "This is a Platinum VIP feature only.");
					}
				}
				case 5: //House Move
			    {
			        SetPVarInt(playerid, "HasReport", 1);
			        SendReportToQue(playerid, "House Move", 4, GetPlayerPriority(playerid));
			        SendClientMessageEx(playerid, COLOR_WHITE, "Your house move request has been sent to the current available admins.");
			    }
			    case 6: //Appeal Admin Action
			    {
			        SetPVarInt(playerid, "HasReport", 1);
			        SendReportToQue(playerid,"Appeal Admin Action", 4, GetPlayerPriority(playerid));
			        SendClientMessageEx(playerid, COLOR_WHITE, "Your Appeal Admin Action report has been sent to the current available admins.");
			    }
			    case 7: //Prize Claim
			    {
			        if(PlayerInfo[playerid][pFlagged] == 0) {
			            SendClientMessageEx(playerid, COLOR_GREY, "You do not have any prize claims pending. (Not Flagged)");
			            return 1;
			        }
			        else
			        {
			            SetPVarInt(playerid, "HasReport", 1);
			            SendReportToQue(playerid, "Prize Claim", 4, 6);
			            SendClientMessageEx(playerid, COLOR_WHITE, "Your Prize Claim report has been sent to the current available admins.");
			        }
			    }
			    case 8: //Shop Issue
	            {
	                ShowPlayerDialog(playerid, DIALOG_NOTHING, DIALOG_STYLE_MSGBOX, "Shop Issue", "{FFFFFF}For any shop inquiry or concern please use /shoporder to contact one of our shoptechs.", "Close", "");
	            }
	            case 9: //Not Listed Here
	            {
					ShowPlayerDialog(playerid, DIALOG_REPORTNOTLIST, DIALOG_STYLE_INPUT,"Not Listed","Using this category will receive a slower response from the admin team, please consider using the most appropriate category for a faster response.","Send","Cancel");
				}
				case 10: // Needs to speak to an admin
				{
					ShowPlayerDialog(playerid, DIALOG_SPEAKTOADMIN, DIALOG_STYLE_INPUT,"Other / Free Text","Enter the message you want to send to the admin team.","Send","Cancel");
				}
				case 11: // Request CA
				{
				    if(JustReported[playerid] > 0) {
						SendClientMessageEx(playerid, COLOR_GREY, "Wait 10 seconds after sending a next request!");
						return 1;
					}
				    JustReported[playerid]=10;
					format(string, sizeof(string), "** %s(%i) is requesting help, reason: Report Menu. (type /accepthelp %i)", GetPlayerNameEx(playerid), playerid, playerid);
					SendDutyAdvisorMessage(TEAM_AZTECAS_COLOR, string);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You have requested help from a Community Advisor, wait for a reply.");
					SetPVarInt( playerid, "COMMUNITY_ADVISOR_REQUEST", 1 );
					SetPVarInt( playerid, "HelpTime", 5);
					SetPVarString( playerid, "HelpReason", "Report Menu");
					SetTimerEx( "HelpTimer", 60000, 0, "d", playerid);
				}
				case 12: //Request Unmute
				{
    				ShowPlayerDialog(playerid, DIALOG_UNMUTE, DIALOG_STYLE_LIST, "Requesting Unmute", "Ad Unmute\nNewbie Unmute", "Select", "Exit");
	            }
			    case 13: //Previous Page
			    {
	    			ShowPlayerDialog(playerid, DIALOG_REPORTMENU, DIALOG_STYLE_LIST, "Report Menu [1/2]", "Deathmatch\nHacking\nRevenge Killing\nKilling on Sight\nChicken Running\nCar Ramming\nPower Gaming\nMeta Gaming\nGun Discharge Exploits (QS/CS)\nSpamming\nMoney Farming\nBan Evader\nGeneral Exploits\nReleasing Hitman Names\nRunning Man Exploiter\nLog to Avoid\nCar Surfing\nNonRP Behavior\nNext Page","Select", "Exit");
       			}
			}
		}
	}
	else if(dialogid == DIALOG_UNMUTE)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0:
	            {
	                SetPVarInt(playerid, "HasReport", 1);
					SendReportToQue(playerid, "Ad Unmute", 2, GetPlayerPriority(playerid));
					SendClientMessageEx(playerid, COLOR_WHITE, "Your report has been sent to the current available admins.");
	            }
	            case 1:
	            {
	                SetPVarInt(playerid, "HasReport", 1);
					SendReportToQue(playerid, "Newbie Unmute", 2, GetPlayerPriority(playerid));
					SendClientMessageEx(playerid, COLOR_WHITE, "Your report has been sent to the current available admins.");
				}
	        }
	    }
	}
	else if(dialogid == DIALOG_REPORTDM)
	{
	    if(response)
	    {
	        new
	            Player;

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTDM, DIALOG_STYLE_INPUT, "Report Player - Deathmatch", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTDM, DIALOG_STYLE_INPUT, "Report Player - Deathmatch", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			if(PlayerInfo[playerid][pDMRMuted] != 0) return SendClientMessage(playerid, COLOR_GRAD2, "You are blocked from submitting DM reports.");
			if(PlayerInfo[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD2, "You must be level 2 to use this command.");
			if(playerid == Player) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on yourself!");

			if(PlayerInfo[Player][pAdmin] >= 2 && PlayerInfo[Player][pTogReports] != 1) return SendClientMessage(playerid, COLOR_GREY, "You can't use this command on admins!");
			if(gettime() - ShotPlayer[Player][playerid] < 300)
  			{
				SetPVarInt(playerid, "pDMReport", Player);
				ShowPlayerDialog(playerid, DMRCONFIRM, DIALOG_STYLE_MSGBOX, "DM Report", "You personally witnessed the reported person death matching within the last 60 seconds. Abuse of this command could result in a temporary ban.", "Confirm", "Cancel");
			}
			else
			{
  				SendClientMessage(playerid, COLOR_WHITE, "You have not been shot by that person or have already reported them in the last 5 minutes.");
				SendClientMessage(playerid, COLOR_WHITE, "As a reminder, abuse of this system could lead to punishment up to a temporary ban.");
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTRK)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTRK, DIALOG_STYLE_INPUT, "Report Player - Revenge Killing", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTRK, DIALOG_STYLE_INPUT, "Report Player - Revenge Killing", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Revenge Killing", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid, Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Revenge Killing. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTKOS)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTKOS, DIALOG_STYLE_INPUT, "Report Player - Killing on Sight", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTKOS, DIALOG_STYLE_INPUT, "Report Player - Killing on Sight", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Killing on Sight", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Killing on Sight. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTCR)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTCR, DIALOG_STYLE_INPUT, "Report Player - Chicken Running", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTCR, DIALOG_STYLE_INPUT, "Report Player - Chicken Running", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Chicken Running", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Chicken Running. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTCARRAM)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTCARRAM, DIALOG_STYLE_INPUT, "Report Player - Car Ramming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTCARRAM, DIALOG_STYLE_INPUT, "Report Player - Car Ramming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Car Ramming", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Car Ramming. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTPG)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTPG, DIALOG_STYLE_INPUT, "Report Player - Power Gaming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTPG, DIALOG_STYLE_INPUT, "Report Player - Power Gaming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Power Gaming", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Power Gaming. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTMG)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTMG, DIALOG_STYLE_INPUT, "Report Player - Meta Gaming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTMG, DIALOG_STYLE_INPUT, "Report Player - Meta Gaming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Meta Gaming", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Meta Gaming. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTSPAM)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTSPAM, DIALOG_STYLE_INPUT, "Report Player - Spamming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTSPAM, DIALOG_STYLE_INPUT, "Report Player - Spamming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Spamming", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Spamming. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTGDE)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTGDE, DIALOG_STYLE_INPUT, "Report Player - Gun Discharge Exploits", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTGDE, DIALOG_STYLE_INPUT, "Report Player - Gun Discharge Exploits", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Gun Discharge Exploits", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Gun Discharge Exploits. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
 	else if(dialogid == DIALOG_REPORTHACK)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTHACK, DIALOG_STYLE_INPUT, "Report Player - Hacking", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTHACK, DIALOG_STYLE_INPUT, "Report Player - Hacking", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Hacking", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, 2);
				format(Message, sizeof(Message), "You have submitted a report on %s for Hacking. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTMF)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTMF, DIALOG_STYLE_INPUT, "Report Player - Money Farming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTMF, DIALOG_STYLE_INPUT, "Report Player - Money Farming", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Money Farming", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Money Farming. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTSA)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTSA, DIALOG_STYLE_INPUT, "Report Player - Server Advertising", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTSA, DIALOG_STYLE_INPUT, "Report Player - Server Advertising", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Server Advertising", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, 2);
				format(Message, sizeof(Message), "You have submitted a report on %s for Server Advertising. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTNRPN)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTNRPN, DIALOG_STYLE_INPUT, "Report Player - NonRP Name", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTNRPN, DIALOG_STYLE_INPUT, "Report Player - NonRP Name", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) NonRP Name", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for NonRP Name. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTBANEVADE)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTBANEVADE, DIALOG_STYLE_INPUT, "Report Player - Ban Evader", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTBANEVADE, DIALOG_STYLE_INPUT, "Report Player - Ban Evader", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Ban Evader", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Ban Evader. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTGE)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTGE, DIALOG_STYLE_INPUT, "Report Player - General Exploits", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTGE, DIALOG_STYLE_INPUT, "Report Player - General Exploits", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) General Exploits", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for General Exploits. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTRHN)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTRHN, DIALOG_STYLE_INPUT, "Report Player - Releasing Hitman Names", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTRHN, DIALOG_STYLE_INPUT, "Report Player - Releasing Hitman Names", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Releasing Hitman Names", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Releasing Hitman Names. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTRSE)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTRSE, DIALOG_STYLE_INPUT, "Report Player - Running/Swimming Man Exploit", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTRSE, DIALOG_STYLE_INPUT, "Report Player - Running/Swimming Man Exploit", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Running/Swimming Man Exploit", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Running/Swimming Man Exploit. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTLOG)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTLOG, DIALOG_STYLE_INPUT, "Report Player - Logging to Avoid", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTLOG, DIALOG_STYLE_INPUT, "Report Player - Logging to Avoid", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Logging to Avoid", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Logging to Avoid. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTCARSURF)
	{
	    if(response)
	    {
	        new
	            Player,
				Message[128];

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTCARSURF, DIALOG_STYLE_INPUT, "Report Player - Car Surfing", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTCARSURF, DIALOG_STYLE_INPUT, "Report Player - Car Surfing", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
			    SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "HasReport", 1);
				format(Message, sizeof(Message), "%s(%i) Car Surfing", GetPlayerNameEx(Player), Player);
				SendReportToQue(playerid,Message, 2, GetPlayerPriority(playerid));
				format(Message, sizeof(Message), "You have submitted a report on %s for Car Surfing. It has been sent to all available admins.", GetPlayerNameEx(Player));
				SendClientMessageEx(playerid, COLOR_WHITE, Message);
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTNRPB)
	{
	    if(response)
	    {
	        new
	            Player;

            if(sscanf(inputtext, "u", Player)) {
        		ShowPlayerDialog(playerid, DIALOG_REPORTNRPB, DIALOG_STYLE_INPUT, "Report Player - NonRP Behavior", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
				return 1;
			}
			else if(!IsPlayerConnected(Player)) {
				ShowPlayerDialog(playerid, DIALOG_REPORTNRPB, DIALOG_STYLE_INPUT, "Report Player - NonRP Behavior", "(Error - Invalid Player) Enter the name or ID of the player.", "Enter", "Cancel");
			}
			else if(Player == playerid) {
		    	SendClientMessage(playerid, COLOR_GREY, "You can't submit a report on yourself.");
			}
			else {
			    SetPVarInt(playerid, "NRPB", Player);
			    ShowPlayerDialog(playerid, DIALOG_REPORTNRPB2, DIALOG_STYLE_INPUT,"Report Player - NonRP Behavior","Explain what the player is doing.","Send","Cancel");
			}
	    }
	}
	else if(dialogid == DIALOG_REPORTNRPB2)
	{
		if(response == 1)
		{
		    if(isnull(inputtext)) {
		        ShowPlayerDialog(playerid, DIALOG_REPORTNRPB2, DIALOG_STYLE_INPUT,"Report Player - NonRP Behavior","Explain what the player is doing.","Send","Cancel");
		    }

			new
			    Message[128],
				Player;

			Player = GetPVarInt(playerid, "NRPB");
            SetPVarInt(playerid, "HasReport", 1);
		    format(Message, sizeof(Message), "%s(%i), %s (nonrp behavior)", GetPlayerNameEx(Player), Player, inputtext);
   		    SendReportToQue(playerid, Message, 2, GetPlayerPriority(playerid));
   		    format(Message, sizeof(Message), "You have submitted a report on %s for NonRP Behavior. It has been sent to all available admins.", GetPlayerNameEx(Player));
			SendClientMessageEx(playerid, COLOR_WHITE, Message);
   		    DeletePVar(playerid, "NRPB");
		}
		else {
		    DeletePVar(playerid, "NRPB");
		}
	}
	else if(dialogid == DIALOG_REPORTFREE)
	{
		if(response == 1)
		{
		    if(isnull(inputtext)) {
		        ShowPlayerDialog(playerid, DIALOG_REPORTFREE, DIALOG_STYLE_INPUT,"Other / Free Text","(Error - No Message) Enter the message you want to send to the admin team.","Send","Cancel");
		    }
            SetPVarInt(playerid, "HasReport", 1);

   		    SendReportToQue(playerid, inputtext, 2, GetPlayerPriority(playerid));
   		    SendClientMessageEx(playerid, COLOR_WHITE, "Your message has been sent to the admin team.");
		}
	}
	else if(dialogid == DIALOG_REPORTNOTLIST)
	{
		if(response == 1)
		{
		    if(isnull(inputtext)) {
		        ShowPlayerDialog(playerid, DIALOG_REPORTNOTLIST, DIALOG_STYLE_INPUT,"Not Listed","(Error - No Message) Using this category will receive a slower response from the admin team, please consider using the most appropriate category for a faster response","Send","Cancel");
		    }

			SetPVarString(playerid, "ReportNotList", inputtext);

			ShowPlayerDialog(playerid, DIALOG_REPORTNOTLIST2, DIALOG_STYLE_MSGBOX, "Not Listed", "Are you sure your report doesn't fit under any other report categories?", "Yes", "No");
		}
	}
	else if(dialogid == DIALOG_REPORTNOTLIST2)
	{
	    if(response == 1)
	    {
			new Message[128];

			GetPVarString(playerid, "ReportNotList", Message, sizeof(Message));
		 	SetPVarInt(playerid, "HasReport", 1);
			SendReportToQue(playerid, Message, 2, 5);
			SendClientMessageEx(playerid, COLOR_WHITE, "Your message has been sent to to the admin team.");
	    }
	}
	else if(dialogid == DIALOG_SPEAKTOADMIN)
	{
		if(response == 1)
		{
		    if(isnull(inputtext)) {
		        ShowPlayerDialog(playerid, DIALOG_REPORTNOTLIST, DIALOG_STYLE_INPUT,"Other / Free Text","(Error - No Message) Using this category will receive a slower response from the admin team, please consider using the most appropriate category for a faster response","Send","Cancel");
		    }

			SetPVarString(playerid, "ReportNotList", inputtext);

			ShowPlayerDialog(playerid, DIALOG_REPORTNOTLIST2, DIALOG_STYLE_MSGBOX, "Other / Free Text", "Are you sure you need to contact an admin?", "Yes", "No");
		}
	}
	else if(dialogid == DIALOG_REPORTNAME)
	{
	    new
			Player;

		Player = GetPVarInt(playerid, "NameChange");

        if(GetPVarInt(Player, "RequestingNameChange") == 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't requesting a namechange!");
			return 1;
		}
		if(response)
		{
			new newname[MAX_PLAYER_NAME], tmpName[24];
			GetPVarString(Player, "NewNameRequest", newname, MAX_PLAYER_NAME);

			SetPVarString(Player, "NewNameRequest", tmpName);

			format(string, sizeof(string), "SELECT `Username` FROM `accounts` WHERE `Username`='%s'", tmpName);
			mysql_function_query(MainPipeline, string, true, "OnApproveName", "ii", playerid, Player);

		}
		else
		{
			SendClientMessageEx(Player,COLOR_YELLOW," Your name change request has been denied.");
			format(string, sizeof(string), " You have denied %s's name change request.", GetPlayerNameEx(Player));
			SendClientMessageEx(playerid,COLOR_YELLOW,string);
			format(string, sizeof(string), "%s has denied %s's name change request",GetPlayerNameEx(playerid),GetPlayerNameEx(Player));
			ABroadCast(COLOR_YELLOW, string, 3);
			DeletePVar(Player, "RequestingNameChange");
		}
	}
	else if(dialogid == DIALOG_DEDICATEDPLAYER)
	{
	    if(response)
	    {
            new
                szName[MAX_PLAYER_NAME],
				szDialogStr[260],
				szFileStr[32],
				iPos,
				iCount = 0,
				iTime = gettime() - 5184000,
				File: fDedicated = fopen("RewardDedicated.cfg", io_read);

            GetPVarString(playerid, "DedicatedPlayer", szName, sizeof(szName));

			while(fread(fDedicated, szFileStr)) {
    			iPos = strfind(szFileStr, "|");

				if(strval(szFileStr[iPos + 1]) > iTime && iCount == 0 && strcmp(szFileStr, szName, false, strlen(szName))==0 ) {
					szFileStr[iPos] = 0;
					strcat(szDialogStr, szFileStr);
					iCount++;

					strcat(szDialogStr, "\n");
				}
				else if(iCount > 0)
				{
				    szFileStr[iPos] = 0;
					strcat(szDialogStr, szFileStr);
					iCount++;
                    if(iCount == 10) {
						SetPVarString(playerid, "DedicatedPlayer", szFileStr);
						printf("%s - Dedicated Player", szFileStr);
						break;
					}
					strcat(szDialogStr, "\n");
				}
			}
			fclose(fDedicated);
			//szDialogStr[strlen(szDialogStr) - 1] = 0;
			if(iCount == 10)
			{
				ShowPlayerDialog(playerid, DIALOG_DEDICATEDPLAYER, DIALOG_STYLE_LIST, "Dedicated Players (over 150 Reward Hours)", szDialogStr, "Next", "Exit");
			}
			else
			{
			    ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Dedicated Players (over 150 Reward Hours)", szDialogStr, "Exit", "");
			}
	        return 1;
	    }
	}
	/*else if(dialogid == DIALOG_TOYREWARDS)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Cane
	            {
	                SetPVarInt(playerid, "RewardToys", 19348);
	            }
	            case 1: // Monical
	            {
	                SetPVarInt(playerid, "RewardToys", 19349);
	            }
	            case 2: // Mustache
	            {
	                SetPVarInt(playerid, "RewardToys", 19350);
	            }
	            case 3: // Scarf
	            {
	                SetPVarInt(playerid, "RewardToys", 19469);
	            }
	            case 4: // Gas Mask
	            {
	                SetPVarInt(playerid, "RewardToys", 19472);
	            }
	        }
	        new stringg[512];
			for(new x;x<MAX_PLAYERTOYS;x++)
			{
				new name[24] = "None";

				for(new i;i<sizeof(HoldingObjectsAll);i++)
				{
					if(HoldingObjectsAll[i][holdingmodelid] == PlayerToyInfo[playerid][x][ptModelID])
					{
						format(name, sizeof(name), "%s", HoldingObjectsAll[i][holdingmodelname]);
					}
				}

				format(stringg, sizeof(stringg), "%s(%d) %s (Bone: %s)\n", stringg, x, name, HoldingBones[PlayerToyInfo[playerid][x][ptBone]]);
			}
			ShowPlayerDialog(playerid, DIALOG_TOYREWARDS2, DIALOG_STYLE_LIST, "Toy Rewards - Select a Slot", stringg, "Select", "Cancel");
	    }
	}
	else if(dialogid == DIALOG_TOYREWARDS2)
	{
	    if(response)
	    {
	        new toy = GetPVarInt(playerid, "RewardToys");
			SendClientMessageEx(playerid, COLOR_WHITE, "You have received a new toy! (/toys)");
			PlayerToyInfo[playerid][listitem][ptModelID] = toy;
			PlayerToyInfo[playerid][listitem][ptBone] = 1;
			g_mysql_SaveToys(playerid, listitem);
	    }
	}*/
	return 1;
}

IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	if(issuerid != INVALID_PLAYER_ID)
	{
	    ShotPlayer[issuerid][playerid] = gettime();
	    LastShot[playerid] = gettime();
	    if(weaponid > 15)
		{
		 	if(pTazer{playerid} == 1)
			{
			    new string[128];
				RemovePlayerWeapon(playerid, 23);
				GivePlayerValidWeapon(playerid, pTazerReplace{playerid}, 60000);
				format(string, sizeof(string), "* %s holsters their tazer.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				pTazer{playerid} = 0;
			}
		}
	}
	
 	if(GetPVarInt(playerid, "dmgcheck") == 1)
	{
		if(issuerid != INVALID_PLAYER_ID)
		{
	        new
	            infoString[128],
	            weaponName[24],
	            victimName[MAX_PLAYER_NAME],
	            attackerName[MAX_PLAYER_NAME];

	        GetPlayerName(playerid, victimName, sizeof (victimName));
	        GetPlayerName(issuerid, attackerName, sizeof (attackerName));

	        GetWeaponName(weaponid, weaponName, sizeof (weaponName));

	        format(infoString, sizeof(infoString), "Damagecheck on {00FFD2}%s: {FFFFFF}Issuer: %s(%d) | %s | {DA0000}%.3f", victimName, attackerName, issuerid, weaponName, amount);
            SendClientMessageEx(GetPVarInt(playerid, "dmgcheckID"), COLOR_WHITE, infoString);
  		}
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if (damagedid == INVALID_PLAYER_ID) return 1;
	if (playerid == INVALID_PLAYER_ID) return 1;
	OpenedFire[playerid] = gettime();
    //new targetplayer = GetPlayerTargetPlayer(damagedid); // Store the ID
    if(pTazer{playerid} == 1)
	{
 		if(TazerTimeout[playerid] > 0 && !GetPVarType(damagedid, "IsFrozen"))
  		{
  		    new Float:hp;
  		    GetPlayerHealth(damagedid, hp);
  		    SetPlayerHealth(damagedid, hp-amount);
			return 1;
		}
		if(GetPlayerState(damagedid) == PLAYER_STATE_ONFOOT && PlayerCuffed[damagedid] == 0)
		{
		  /* if(PlayerInfo[damagedid][pAdmin] >= 2 && PlayerInfo[damagedid][pTogReports] != 1)
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "Admins can not be tazed!");
			    new Float:hp;
	  		    GetPlayerHealth(damagedid, hp);
	  		    SetPlayerHealth(damagedid, hp+amount);
				return 1;
			}*/
			if(PlayerInfo[damagedid][pAdmin] >= 2 && PlayerInfo[damagedid][pAdminDuty] != 0)
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "This admin is on duty and can't be tazed!");
			    new Float:hp;
	  		    GetPlayerHealth(damagedid, hp);
	  		    SetPlayerHealth(damagedid, hp+amount);
				return 1;
			}
			if(GetPlayerTargetPlayer(damagedid) != INVALID_PLAYER_ID)
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "This player is aiming/discharging a firearm and can't be tazed!");
			    new Float:hp;
	  		    GetPlayerHealth(damagedid, hp);
	  		    SetPlayerHealth(damagedid, hp+amount);
				return 1;
			}
			new keys,ud,lr;
			GetPlayerKeys(damagedid, keys, ud, lr);
			if(keys == 128)
			{
			    SendClientMessageEx(playerid, COLOR_GRAD2, "This player is aiming/discharging a firearm and can't be tazed!");
			    new Float:hp;
	  		    GetPlayerHealth(damagedid, hp);
	  		    SetPlayerHealth(damagedid, hp+amount);
				return 1;
			}
			new Float:X, Float:Y, Float:Z;
	  		GetPlayerPos(playerid, X, Y, Z);
			new string[44 + (MAX_PLAYER_NAME * 2)];
			format(string, sizeof(string), "* %s fires their tazer at %s, stunning them.", GetPlayerNameEx(playerid), GetPlayerNameEx(damagedid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GameTextForPlayer(damagedid, "~r~Tazed", 3500, 3);
			TogglePlayerControllable(damagedid, 0);
			ApplyAnimation(damagedid,"CRACK","crckdeth2",4.1,0,1,1,1,1,1);
			PlayerPlaySound(damagedid, 1085, X, Y, Z);
			PlayerPlaySound(playerid, 1085, X, Y, Z);
			PlayerCuffed[damagedid] = 1;
			SetPVarInt(damagedid, "PlayerCuffed", 1);
			PlayerCuffedTime[damagedid] = 16;
			SetPVarInt(damagedid, "IsFrozen", 1);
			TazerTimeout[playerid] = 4;
			SetTimerEx("TazerTimer",1000,false,"d",playerid);
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer reloading... ~w~5", 1500,3);
		}
	}
	return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if(weaponid == WeaponExplode)
	{
	    new szString[144];
	    format(szString, sizeof(szString), "Weapon Explosion Created on Weapon ID: %i", weaponid);
	    SendClientMessage(playerid, -1, szString);
	    CreateExplosion(fX, fY, fZ, ExplodeType, ExplodeRad);
	}
	if(weaponid == WeaponCar)
	{
	    new Float:facing;
	    new szMessage[128];
	    for(new iIterator; iIterator < sizeof(CreatedCars); iIterator++) if(CreatedCars[iIterator] == INVALID_VEHICLE_ID)
		{
		    GetPlayerFacingAngle(playerid, facing);
			CreatedCars[iIterator] = CreateVehicleEx(WeaponCarID, fX, fY, fZ, facing, 233, 233, -1, playerid);
			VehicleFuel[CreatedCars[iIterator]] = 100.0;
			Vehicle_ResetData(CreatedCars[iIterator]);
			LinkVehicleToInterior(CreatedCars[iIterator], GetPlayerInterior(playerid));
			format(szMessage, sizeof(szMessage), "%s spawned a %s (%i)", GetPlayerNameEx(playerid), VehicleName[WeaponCarID - 400], WeaponCarID);
			ABroadCast(COLOR_LIGHTRED,szMessage, 4);
			return SendClientMessageEx(playerid, COLOR_GREY, "Vehicle spawned!");
		}
	}
/*	if(hittype == 3)
	{
        new string[128];
		new Float:x, Float:y, Float:z;
		new Float:RotX,Float:RotY,Float:RotZ;
		GetDynamicObjectPos(hitid, x, y, z);
		GetDynamicObjectRot(hitid, RotX, RotY, RotZ);
        //new sum = value1-value2;
        format(string, sizeof(string), "Gate ID %d has been shot", x);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
    	MoveDynamicObject(hitid, x, y, z-zGate, LowerSpeed, RotX, RotY, RotZ);
	}*/
	return 1;
}

public OnShootDynamicObject(playerid, weaponid, objectid, Float:fX, Float:fY, Float:fZ)
{
	for(new x;x<MAX_GATES;x++)
	{
	    if(GateInfo[x][gGATE] == objectid)
	    {
	        new string[128];
	        format(string, sizeof(string), "Gate ID %d has been shot", x);
	        SendClientMessageEx(playerid, COLOR_WHITE, string);
	        MoveDynamicObject(GateInfo[x][gGATE], GateInfo[x][gPosX], GateInfo[x][gPosY], GateInfo[x][gPosZ]-zGate, GateInfo[x][gSpeed], GateInfo[x][gRotX], GateInfo[x][gRotY], GateInfo[x][gRotZ]);
	        GateInfo[x][gPosZ] = GateInfo[x][gPosZ]-zGate;
	        break;
		}
	}
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
   	if(GetPVarInt(playerid, "vspawner_active") == 0) return 0;

	// Handle: They cancelled (with ESC)
	if(clickedid == Text:INVALID_TEXT_DRAW) {
        DestroySelectionMenu(playerid);
        SetPVarInt(playerid, "vspawner_active", 0);
        PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
        return 1;
	}

	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(GetPVarInt(playerid, "vspawner_active") == 0) return 0;

	new curpage = GetPVarInt(playerid, "vspawner_page");

	// Handle: next button
	if(playertextid == gNextButtonTextDrawId[playerid]) {
	    if(curpage < (GetNumberOfPages() - 1)) {
	        SetPVarInt(playerid, "vspawner_page", curpage + 1);
	        ShowPlayerModelPreviews(playerid);
         	UpdatePageTextDraw(playerid);
         	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	// Handle: previous button
	if(playertextid == gPrevButtonTextDrawId[playerid]) {
	    if(curpage > 0) {
	    	SetPVarInt(playerid, "vspawner_page", curpage - 1);
	    	ShowPlayerModelPreviews(playerid);
	    	UpdatePageTextDraw(playerid);
	    	PlayerPlaySound(playerid, 1084, 0.0, 0.0, 0.0);
		} else {
		    PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	// Search in the array of textdraws used for the items
	new x=0;
	while(x != SELECTION_ITEMS) {
	    if(playertextid == gSelectionItems[playerid][x]) {
	        HandlePlayerItemSelection(playerid, x);
	        PlayerPlaySound(playerid, 1083, 0.0, 0.0, 0.0);
	        DestroySelectionMenu(playerid);
	        CancelSelectTextDraw(playerid);
        	SetPVarInt(playerid, "vspawner_active", 0);
        	return 1;
		}
		x++;
	}

	return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	acstruct[playerid][checkmaptp] = 1; acstruct[playerid][maptplastclick] = GetTickCount();
	acstruct[playerid][maptp][0] = fX; acstruct[playerid][maptp][1] = fY; acstruct[playerid][maptp][2] = fZ;
	return 1;
}

public OnPlayerUpdate(playerid)
{
	// Do not put heavy cpu checks in here. Use the 1 second timer.
	if(playerTabbed[playerid] >= 1)
	{
		playerTabbed[playerid] = 0;
	}
	playerSeconds[playerid] = gettime();

	new pCurWeap = GetPlayerWeapon(playerid);
    if(pCurWeap != pCurrentWeapon{playerid})
    {
        OnPlayerChangeWeapon(playerid, pCurWeap);
        if(shoutEffect[playerid][0] > 0)
		{
			if(pCurWeap > 15 || pCurWeap < 43)SetPlayerArmedWeapon(playerid, 0);
		}
        pCurrentWeapon{playerid} = pCurWeap;
    }

	if(PlayerInfo[playerid][pAdmin] < 13338)
	{
		if(acstruct[playerid][checkmaptp] == 1) //blah
		{
			new Float:dis = GetPlayerDistanceFromPoint(playerid, acstruct[playerid][maptp][0], acstruct[playerid][maptp][1], acstruct[playerid][maptp][2]);
			if(dis < 5.0)
			{
				new Float:disd = GetPlayerDistanceFromPoint(playerid, acstruct[playerid][LastOnFootPosition][0], acstruct[playerid][LastOnFootPosition][1], acstruct[playerid][LastOnFootPosition][2]);
				if(disd > 25.0)
				{
					new srelay[256], Float:X, Float:Y, Float:Z;
					GetPlayerPos(playerid, X, Y, Z);
					format(srelay, sizeof(srelay), "[mapteleport] %s %d (%0.2f, %0.2f, %0.2f -> %0.2f, %0.2f, %0.2f [%0.2f, %0.2f, %0.2f]) (%f, %f) (%d) (%d)", GetPlayerNameExt(playerid), playerid, \
					acstruct[playerid][LastOnFootPosition][0], acstruct[playerid][LastOnFootPosition][1], acstruct[playerid][LastOnFootPosition][2], \
					X, Y, Z, acstruct[playerid][maptp][0], acstruct[playerid][maptp][1], acstruct[playerid][maptp][2], \
					disd, dis, GetPlayerState(playerid), (GetTickCount()-acstruct[playerid][maptplastclick]));
					Log("logs/hack.log", srelay);

					format( srelay, sizeof( srelay ), "{AA3333}AdmWarning{FFFF00}: %s has been banned, reason: TP Hacking", GetPlayerNameExt(playerid));
					ABroadCast( COLOR_LIGHTRED, srelay, 2 );
					SendClientMessage(playerid, COLOR_LIGHTRED, srelay );
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[34];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format( srelay, sizeof( srelay ), "%s (IP:%s) was banned, reason: TP Hacking", GetPlayerNameExt(playerid), playerip);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", srelay);
					AddBan(playerip);
					Kick(playerid);
					//MySQLBan(GetPlayerSQLId(playerid),playerip,"TP Hacking",-1);
					TotalAutoBan++;
				}
			}
			acstruct[playerid][checkmaptp] = 0;
		}
	}
	GetPlayerPos(playerid, acstruct[playerid][LastOnFootPosition][0], acstruct[playerid][LastOnFootPosition][1], acstruct[playerid][LastOnFootPosition][2]);

    if(control[playerid] == 1)
	{
	   	new Keys,ud,lr;
	   	GetPlayerKeys(playerid,Keys,ud,lr);

		if(ud > 0)
		{
			if(canmove == 1) return 1;
	    	else canmove = 1;

			new distance = controldistance[playerid];
		    new speed = controlspeed[playerid];

		    new Float:XA[17], Float:YA[17], Float:ZA[17];
		    new Float:XB[14], Float:YB[14], Float:ZB[14];
		    new Float:XC[3], Float:YC[3], Float:ZC[3];

			for(new x;x<sizeof(Carrier);x++)
			{
			    GetDynamicObjectPos(Carrier[x], XA[x], YA[x], ZA[x]);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
			    GetDynamicObjectPos(CarrierS[x], XB[x], YB[x], ZB[x]);
			}

			GetDynamicObjectPos(sidelift, XC[0], YC[0], ZC[0]);
			GetDynamicObjectPos(backhatch, XC[1], YC[1], ZC[1]);
			GetDynamicObjectPos(backlift, XC[2], YC[2], ZC[2]);

			for(new x;x<sizeof(Carrier);x++)
			{
   				MoveDynamicObject(Carrier[x], XA[x]-distance, YA[x], ZA[x], speed);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
				MoveDynamicObject(CarrierS[x], XB[x]-distance, YB[x], ZB[x], speed);
			}

			MoveDynamicObject(sidelift, XC[0]-distance, YC[0], ZC[0], speed);
			MoveDynamicObject(backhatch, XC[1]-distance, YC[1], ZC[1], speed);
			MoveDynamicObject(backlift, XC[2]-distance, YC[2], ZC[2], speed);
		}
	    else if(ud < 0)
		{
		    if(canmove == 1) return 1;
		    else canmove = 1;

			new distance = controldistance[playerid];
		    new speed = controlspeed[playerid];

		    new Float:XA[17], Float:YA[17], Float:ZA[17];
		    new Float:XB[14], Float:YB[14], Float:ZB[14];
	    	new Float:XC[3], Float:YC[3], Float:ZC[3];

			for(new x;x<sizeof(Carrier);x++)
			{
			    GetDynamicObjectPos(Carrier[x], XA[x], YA[x], ZA[x]);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
			    GetDynamicObjectPos(CarrierS[x], XB[x], YB[x], ZB[x]);
			}

			GetDynamicObjectPos(sidelift, XC[0], YC[0], ZC[0]);
			GetDynamicObjectPos(backhatch, XC[1], YC[1], ZC[1]);
			GetDynamicObjectPos(backlift, XC[2], YC[2], ZC[2]);

			for(new x;x<sizeof(Carrier);x++)
			{
   				MoveDynamicObject(Carrier[x], XA[x]+distance, YA[x], ZA[x], speed);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
				MoveDynamicObject(CarrierS[x], XB[x]+distance, YB[x], ZB[x], speed);
			}

			MoveDynamicObject(sidelift, XC[0]+distance, YC[0], ZC[0], speed);
			MoveDynamicObject(backhatch, XC[1]+distance, YC[1], ZC[1], speed);
			MoveDynamicObject(backlift, XC[2]+distance, YC[2], ZC[2], speed);
		}

		if(lr > 0)
		{
  			if(canmove == 1) return 1;
		   	else canmove = 1;

		    new distance = controldistance[playerid];
		    new speed = controlspeed[playerid];

	   	 	new Float:XA[17], Float:YA[17], Float:ZA[17];
		    new Float:XB[14], Float:YB[14], Float:ZB[14];
		    new Float:XC[3], Float:YC[3], Float:ZC[3];

			for(new x;x<sizeof(Carrier);x++)
			{
			    GetDynamicObjectPos(Carrier[x], XA[x], YA[x], ZA[x]);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
			    GetDynamicObjectPos(CarrierS[x], XB[x], YB[x], ZB[x]);
			}

			GetDynamicObjectPos(sidelift, XC[0], YC[0], ZC[0]);
			GetDynamicObjectPos(backhatch, XC[1], YC[1], ZC[1]);
			GetDynamicObjectPos(backlift, XC[2], YC[2], ZC[2]);

			for(new x;x<sizeof(Carrier);x++)
			{
   				MoveDynamicObject(Carrier[x], XA[x], YA[x]-distance, ZA[x], speed);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
				MoveDynamicObject(CarrierS[x], XB[x], YB[x]-distance, ZB[x], speed);
			}

			MoveDynamicObject(sidelift, XC[0], YC[0]-distance, ZC[0], speed);
			MoveDynamicObject(backhatch, XC[1], YC[1]-distance, ZC[1], speed);
			MoveDynamicObject(backlift, XC[2], YC[2]-distance, ZC[2], speed);
		}
  		else if(lr < 0)
		{
  			if(canmove == 1) return 1;
  			else canmove = 1;

			new distance = controldistance[playerid];
		   	new speed = controlspeed[playerid];

		   	new Float:XA[17], Float:YA[17], Float:ZA[17];
		    new Float:XB[14], Float:YB[14], Float:ZB[14];
			new Float:XC[3], Float:YC[3], Float:ZC[3];

			for(new x;x<sizeof(Carrier);x++)
			{
			    GetDynamicObjectPos(Carrier[x], XA[x], YA[x], ZA[x]);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
			    GetDynamicObjectPos(CarrierS[x], XB[x], YB[x], ZB[x]);
			}

			GetDynamicObjectPos(sidelift, XC[0], YC[0], ZC[0]);
			GetDynamicObjectPos(backhatch, XC[1], YC[1], ZC[1]);
			GetDynamicObjectPos(backlift, XC[2], YC[2], ZC[2]);

			for(new x;x<sizeof(Carrier);x++)
			{
   				MoveDynamicObject(Carrier[x], XA[x], YA[x]+distance, ZA[x], speed);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
				MoveDynamicObject(CarrierS[x], XB[x], YB[x]+distance, ZB[x], speed);
			}

			MoveDynamicObject(sidelift, XC[0], YC[0]+distance, ZC[0], speed);
			MoveDynamicObject(backhatch, XC[1], YC[1]+distance, ZC[1], speed);
			MoveDynamicObject(backlift, XC[2], YC[2]+distance, ZC[2], speed);
		}
	}
	return 1;
}

/*
public OnPlayerEditObject( playerid, playerobject, objectid, response,
Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ )
{
	if(!playerobject) // If this is a global object, move it for other players
	{
	    if(!IsValidDynamicObject(objectid)) return;
	    MoveDynamicObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
	}

	if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
 	{
 	    new gateid = GateEditMode[playerid];
 	    new gateid2 = GateEditMode2[playerid];
 	    if((gateid != INVALID_GATE_ID) && (gateid2 == INVALID_GATE_ID)){

			GateInfo[gateid][gPosX] = fX;
			GateInfo[gateid][gPosY] = fY;
			GateInfo[gateid][gPosZ] = fZ;
			GateInfo[gateid][gRotX] = fRotX;
			GateInfo[gateid][gRotY] = fRotY;
			GateInfo[gateid][gRotZ] = fRotZ;
		    //format(string, sizeof(string), "Gate RotZ assigned to %f", GateInfo[gateid][gRotZ]);
		    //SetDynamicObjectPos(objectid, x, y, z, 10.0, rx, ry, rz);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have finished editing the gate position.");
		    GateEditMode[playerid] = INVALID_GATE_ID;
		    SaveGates();
		    //SelectObject(playerid);
		    //return 1;
		}
 	    if((gateid2 != INVALID_GATE_ID) && (gateid == INVALID_GATE_ID)) {

			GateInfo[gateid2][gPosX] = fX;
			GateInfo[gateid2][gPosY] = fY;
			GateInfo[gateid2][gPosZ] = fZ;
			GateInfo[gateid2][gRotX] = fRotX;
			GateInfo[gateid2][gRotY] = fRotY;
			GateInfo[gateid2][gRotZ] = fRotZ;
		    //format(string, sizeof(string), "Gate RotZ assigned to %f", GateInfo[gateid][gRotZ]);
		    //SetDynamicObjectPos(objectid, x, y, z, 10.0, rx, ry, rz);
		    SetDynamicObjectPos(GateInfo[gateid2][gGATE], GateInfo[gateid2][gPosXM], GateInfo[gateid2][gPosYM], GateInfo[gateid2][gPosZM]);
		    SetDynamicObjectRot(GateInfo[gateid2][gGATE], GateInfo[gateid2][gRotXM],GateInfo[gateid2][gRotYM],GateInfo[gateid2][gRotZM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have finished editing the move gate position.");
		    GateEditMode2[playerid] = INVALID_GATE_ID;
		    SaveGates();
		    //SelectObject(playerid);
		}
	}
	return 1;
}
*/

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	/*if(!playerobject) // If this is a global object, move it for other players
	{
	    if(!IsValidDynamicObject(objectid)) return;
	    MoveDynamicObject(objectid, fX, fY, fZ, 10.0, fRotX, fRotY, fRotZ);
	}*/

	if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
 	{
 	    new gateid = GateEditMode[playerid];
 	    new gateid2 = GateEditMode2[playerid];
 	    if((gateid != INVALID_GATE_ID) && (gateid2 == INVALID_GATE_ID)){

			GateInfo[gateid][gPosX] = x;
			GateInfo[gateid][gPosY] = y;
			GateInfo[gateid][gPosZ] = z;
			GateInfo[gateid][gRotX] = rx;
			GateInfo[gateid][gRotY] = ry;
			GateInfo[gateid][gRotZ] = rz;
		    //format(string, sizeof(string), "Gate RotZ assigned to %f", GateInfo[gateid][gRotZ]);
		    //SetDynamicObjectPos(objectid, x, y, z, 10.0, rx, ry, rz);
		    SetDynamicObjectPos(GateInfo[gateid][gGATE], GateInfo[gateid][gPosX], GateInfo[gateid][gPosY], GateInfo[gateid][gPosZ]);
		    SetDynamicObjectRot(GateInfo[gateid][gGATE], GateInfo[gateid][gRotX],GateInfo[gateid][gRotY],GateInfo[gateid][gRotZ]);
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have finished editing the gate position.");
		    GateEditMode[playerid] = INVALID_GATE_ID;
		    SaveGate(gateid);
		    //SelectObject(playerid);
		    return 1;
		}
 	    if((gateid2 != INVALID_GATE_ID) && (gateid == INVALID_GATE_ID)) {

			GateInfo[gateid2][gPosXM] = x;
			GateInfo[gateid2][gPosYM] = y;
			GateInfo[gateid2][gPosZM] = z;
			GateInfo[gateid2][gRotXM] = rx;
			GateInfo[gateid2][gRotYM] = ry;
			GateInfo[gateid2][gRotZM] = rz;
		    //format(string, sizeof(string), "Gate RotZ assigned to %f", GateInfo[gateid][gRotZ]);
		    //SetDynamicObjectPos(objectid, x, y, z, 10.0, rx, ry, rz);
		    SetDynamicObjectPos(GateInfo[gateid2][gGATE], GateInfo[gateid2][gPosXM], GateInfo[gateid2][gPosYM], GateInfo[gateid2][gPosZM]);
		    SetDynamicObjectRot(GateInfo[gateid2][gGATE], GateInfo[gateid2][gRotXM],GateInfo[gateid2][gRotYM],GateInfo[gateid2][gRotZM]);
		    SendClientMessageEx(playerid, COLOR_WHITE, "You have finished editing the move gate position.");
		    GateEditMode2[playerid] = INVALID_GATE_ID;
		    SaveGate(gateid2);
		    //SelectObject(playerid);
		    return 1;
		}
		if(GetPVarInt(playerid, "DynamicFacVehAttachTo") != 0)
		{
		    new szMessage[128];
			new car = GetPVarInt(playerid, "DynamicFacVehAttachTo");
			format(szMessage, sizeof(szMessage), "Yo car bitch '%d'.", car);
			SendClientMessage(playerid, 0xfce80cFF, szMessage);
			new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
			new Float:finalx, Float:finaly;
			new Float:px, Float:py, Float:pz, Float:roz;
			GetVehiclePos(car, px, py, pz);
			GetVehicleZAngle(car, roz);
			ofx = x-px;
			ofy = y-py;
			ofz = z-pz;
			ofaz = rz-roz;
			finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
			finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);
			AttachDynamicObjectToVehicle(FactionVehicleInfo[car][fObject1], car, finalx, finaly, ofz, rz, ry, ofaz);
			DeletePVar(playerid, "DynamicFacVehAttachTo");
			return 1;
  		}
	}
	return 1;
}


public OnPlayerEditAttachedObject( playerid, response, index, modelid, boneid,
                                   Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ,
                                   Float:fRotX, Float:fRotY, Float:fRotZ,
                                   Float:fScaleX, Float:fScaleY, Float:fScaleZ )
{
	if(response == EDIT_RESPONSE_FINAL)
	{
	    if(fOffsetX > 1.4)
		{
			fOffsetX = 1.4;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum X Offset exeeded, damped to maximum");
		}
	    if(fOffsetY > 1.4) {
			fOffsetY = 1.4;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum Y Offset exeeded, damped to maximum");
		}
	    if(fOffsetZ > 1.4) {
			fOffsetZ = 1.4;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum Z Offset exeeded, damped to maximum");
		}
	    if(fOffsetX < -1.4) {
			fOffsetX = -1.4;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum X Offset exeeded, damped to maximum");
		}
	    if(fOffsetY < -1.4) {
			fOffsetY = -1.4;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum Y Offset exeeded, damped to maximum");
		}
	    if(fOffsetZ < -1.4) {
			fOffsetZ = -1.4;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum Z Offset exeeded, damped to maximum");
		}
	    if(fScaleX > 1.5) {
			fScaleX = 1.5;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum X Scale exeeded, damped to maximum");
		}
	    if(fScaleY > 1.5) {
			fScaleY = 1.5;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum Y Scale exeeded, damped to maximum");
		}
		if(fScaleZ > 1.5) {
			fScaleZ = 1.5;
			SendClientMessage(playerid, COLOR_WHITE, "Maximum Z Scale exeeded, damped to maximum");
		}

	    new slotid = GetPVarInt(playerid, "ToySlot");
		PlayerToyInfo[playerid][slotid][ptPosX] = fOffsetX;
		PlayerToyInfo[playerid][slotid][ptPosY] = fOffsetY;
		PlayerToyInfo[playerid][slotid][ptPosZ] = fOffsetZ;
		PlayerToyInfo[playerid][slotid][ptRotX] = fRotX;
		PlayerToyInfo[playerid][slotid][ptRotY] = fRotY;
		PlayerToyInfo[playerid][slotid][ptRotZ] = fRotZ;
		PlayerToyInfo[playerid][slotid][ptScaleX] = fScaleX;
		PlayerToyInfo[playerid][slotid][ptScaleY] = fScaleY;
		PlayerToyInfo[playerid][slotid][ptScaleZ] = fScaleZ;

	    g_mysql_SaveToys(playerid,slotid);
		ShowEditMenu(playerid);
	}
	else
	{
	    ShowEditMenu(playerid);
		SendClientMessage(playerid, COLOR_WHITE, "You have stopped yourself from editing the toy.");
	}
	return 1;
}


forward TazerTimer(playerid);
public TazerTimer(playerid)
{
	if (TazerTimeout[playerid] > 0)
   	{
		new string[128];
   		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~r~Tazer reloading... ~w~%d", TazerTimeout[playerid]);
		GameTextForPlayer(playerid, string,1500, 3);
		TazerTimeout[playerid] -= 1;
		SetTimerEx("TazerTimer",1000,false,"d",playerid);
   	}
	return 1;
}

Float:DistanceCameraTargetToLocation(Float:CamX, Float:CamY, Float:CamZ,  Float:ObjX, Float:ObjY, Float:ObjZ,  Float:FrX, Float:FrY, Float:FrZ)
{

    new Float:TGTDistance;

    // get distance from camera to target
    TGTDistance = floatsqroot((CamX - ObjX) * (CamX - ObjX) + (CamY - ObjY) * (CamY - ObjY) + (CamZ - ObjZ) * (CamZ - ObjZ));

    new Float:tmpX, Float:tmpY, Float:tmpZ;

    tmpX = FrX * TGTDistance + CamX;
    tmpY = FrY * TGTDistance + CamY;
    tmpZ = FrZ * TGTDistance + CamZ;

    return floatsqroot((tmpX - ObjX) * (tmpX - ObjX) + (tmpY - ObjY) * (tmpY - ObjY) + (tmpZ - ObjZ) * (tmpZ - ObjZ));
}

stock IsPlayerAimingAt(playerid, Float:x, Float:y, Float:z, Float:radius)
{
    new Float:cx,Float:cy,Float:cz,Float:fx,Float:fy,Float:fz;
    GetPlayerCameraPos(playerid, cx, cy, cz);
    GetPlayerCameraFrontVector(playerid, fx, fy, fz);
    return (radius >= DistanceCameraTargetToLocation(cx, cy, cz, x, y, z, fx, fy, fz));
}

public OnPlayerInteriorChange(playerid,newinteriorid,oldinteriorid)
{
	if(gPlayerLogged{playerid} && GetPVarInt(playerid, "EventToken") == 0)
	{
		PlayerInfo[playerid][pInt] = newinteriorid;
	}
	if(GettingSpectated[playerid] != INVALID_PLAYER_ID)
	{
	    new spectator = GettingSpectated[playerid];
	    if(!IsPlayerConnected(spectator))
	    {
	        GettingSpectated[playerid] = INVALID_PLAYER_ID;
	        Spectate[spectator] = INVALID_PLAYER_ID;
		}
		else
		{
			PlayerSpectatePlayer( spectator, playerid );
			SetPlayerInterior( spectator, GetPlayerInterior( playerid ) );
			SetPlayerVirtualWorld( spectator, GetPlayerVirtualWorld( playerid ) );
		}
	}
}

forward firstaid5(playerid);
public firstaid5(playerid)
{
	if(GetPVarInt(playerid, "usingfirstaid") == 1)
 	{
		new Float:health;
		GetPlayerHealth(playerid, health);
		if(health < 100.0)
		{
		    if((health+5.0) <= 100.0)
		    {
 				SetPlayerHealth(playerid, health+5.0);
			}
		}
	}
}
forward firstaidexpire(playerid);
public firstaidexpire(playerid)
{
	SendClientMessageEx(playerid, COLOR_GRAD1, "Your first aid kit no longer takes effect.");
 	KillTimer(GetPVarInt(playerid, "firstaid5"));
  	SetPVarInt(playerid, "usingfirstaid", 0);
}
forward rccam(playerid);
public rccam(playerid)
{
	DestroyVehicle(GetPVarInt(playerid, "rcveh"));
 	SetPlayerPosEx(playerid, GetPVarFloat(playerid, "rcX"), GetPVarFloat(playerid, "rcY"), GetPVarFloat(playerid, "rcZ"));
  	SendClientMessageEx(playerid, COLOR_GRAD1, "Your RC Cam has ran out of batteries!");
   	SetPVarInt(playerid, "rccam", 0);
}
forward cameraexpire(playerid);
public cameraexpire(playerid)
{
	SetPVarInt(playerid, "cameraactive", 0);
 	SetCameraBehindPlayer(playerid);
 	if(GetPVarInt(playerid, "camerasc") == 1)
 	{
	 	SetPlayerPosEx(playerid, GetPVarFloat(playerid, "cameraX2"), GetPVarFloat(playerid, "cameraY2"), GetPVarFloat(playerid, "cameraZ2"));
	  	SetPlayerVirtualWorld(playerid, GetPVarInt(playerid, "cameravw2"));
	  	SetPlayerInterior(playerid, GetPVarInt(playerid, "cameraint2"));
	}
 	TogglePlayerControllable(playerid,1);
  	DestroyDynamic3DTextLabel(Camera3D[playerid]);
   	SendClientMessageEx(playerid, COLOR_GRAD1, "Your camera ran out of batteries!");
}

stock ResetPlayerCash(playerid)
{
	PlayerInfo[playerid][pCash] = 0;
	ResetPlayerMoney(playerid);
	return 1;
}

//-----------------------[Set family skin]-----------------------
SetFamilySkin(playerid, skinid)
{
	new fmember;
	new skin;
	fmember = PlayerInfo[playerid][pFMember];
	skin = FamilyInfo[fmember][FamilySkins][skinid];
	if (skin==0) return 1;
	PlayerInfo[playerid][pModel] = skin;
	ChosenSkin[playerid] = skin;
	SetPlayerSkin(playerid, skin);
	return 1;
}

public OnPlayerPressButton(playerid, buttonid)
{
	if(buttonid == FBILobbyLeftBTN[0] || buttonid == FBILobbyLeftBTN[1])
	{
	    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	    {
	        MoveDynamicObject(FBILobbyLeft,293.93002319,-1498.43457031,-46.13965225,4);
			SetTimer("CloseFBILobbyLeft", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == FBILobbyRightBTN[0] || buttonid == FBILobbyRightBTN[1])
	{
	    if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	    {
	        MoveDynamicObject(FBILobbyRight,303.84756470,-1521.62988281,-46.13965225,4);
			SetTimer("CloseFBILobbyRight", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == FBIPrivateBTN[0] || buttonid == FBIPrivateBTN[1])
	{
	    if((PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2) && PlayerInfo[playerid][pRank] >= 5)
	    {
	        MoveDynamicObject(FBIPrivate[0],299.29986572,-1491.75842285,-28.73300552,4);
	        MoveDynamicObject(FBIPrivate[1],299.33737183,-1496.86145020,-28.73300552,4);
			SetTimer("CloseFBIPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsStudio)
	{
	    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsStudioA,625.60937500,-9.80000019,1106.96081543,4);
	 		MoveDynamicObject(SANewsStudioB,625.64941406,-14.77000046,1106.96081543,4);
			SetTimer("CloseSANewsStudio", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsPrivate)
	{
	    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsPrivateA,625.60937500,0.55000001,1106.96081543,4);
	 		MoveDynamicObject(SANewsPrivateB,625.65002441,-4.54999995,1106.96081543,4);
			SetTimer("CloseSANewsPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsPrivateOPP)
	{
	    if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9 || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsPrivateA,625.60937500,0.55000001,1106.96081543,4);
	 		MoveDynamicObject(SANewsPrivateB,625.65002441,-4.54999995,1106.96081543,4);
			SetTimer("CloseSANewsPrivate", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == SANewsOffice)
	{
	    if(((PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) && (PlayerInfo[playerid][pRank] >=5 || PlayerInfo[playerid][pDivision] == 4) ) || IsACop(playerid))
	    {
	        MoveDynamicObject(SANewsOfficeA,613.66998291,17.82812500,1106.98425293,4);
	 		MoveDynamicObject(SANewsOfficeB,618.69000244,17.86899948,1106.98425293,4);
			SetTimer("CloseSANewsOffice", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == sasdbtn1)
	{
	    if((PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7) && PlayerInfo[playerid][pRank] >= 5)
	    {
	        MoveDynamicObject(sasd1A,2510.65332031,-1697.00976562,561.79223633,4);
	 		MoveDynamicObject(sasd1B,2515.67211914,-1696.97485352,561.79223633,4);
			SetTimer("CloseSASD1", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == sasdbtn2)
	{
	    if((PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7) && PlayerInfo[playerid][pRank] >= 3)
	    {
	        MoveDynamicObject(sasd5A,2523.86059570,-1660.07177734,561.80206299,4);
	 		MoveDynamicObject(sasd5B,2518.84228516,-1660.10888672,561.80004883,4);
	 		//2522.86059570,-1660.07177734,561.80206299
			//2519.84228516,-1660.10888672,561.80004883
			SetTimer("CloseSASD5", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == sasdbtn3)
	{
	    if((PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7) && PlayerInfo[playerid][pRank] >= 5)
	    {
	        MoveDynamicObject(sasd3A,2521.15600586,-1697.01550293,561.79223633,4);
	 		MoveDynamicObject(sasd3B,2526.15893555,-1696.98010254,561.79223633,4);
			SetTimer("CloseSASD3", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == sasdbtn4)
	{
		if( (PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7) && PlayerInfo[playerid][pRank] >= 5)
	    {
            MoveDynamicObject(sasd2A,2515.87548828,-1697.01525879,561.79223633,4);
	 		MoveDynamicObject(sasd2B,2520.89257812,-1696.97509766,561.79223633,4);
			SetTimer("CloseSASD2", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == sasdbtn5)
	{
		if((PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7) && PlayerInfo[playerid][pRank] >= 3)
	    {
	        MoveDynamicObject(sasd4A,2510.84130859,-1660.08081055,561.79528809,4);
	 		MoveDynamicObject(sasd4B,2515.81982422,-1660.04650879,561.80004883,4);
			SetTimer("CloseSASD4", 2500, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == nooseenter[0] || buttonid == nooseenter[1])
	{
		if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	    {
	        MoveDynamicObject(entrancedoor,-766.27539062,2536.58691406,10023,2);
			SetTimer("CloseEntranceDoor", 5000,0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == radarroom[0] || buttonid == radarroom[1])
	{
		if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	    {
			MoveDynamicObject(blastdoor[1],-746.02636719,2535.19433594,10025,2);
			SetTimer("CloseBlastDoor2", 5000, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == intergate[0] || buttonid == intergate[1])
	{
		if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	    {
			MoveDynamicObject(blastdoor[2],-765.26171875,2552.31347656,10025,2);
			SetTimer("CloseBlastDoor3", 5000, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == intergate[2])
	{
		if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	    {
			MoveDynamicObject(cage,-773.52050781,2545.62109375,10025,2);
			SetTimer("CloseCage", 5000, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == ncontrolroom[0] || buttonid == ncontrolroom[1])
	{
		if(PlayerInfo[playerid][pMember] == 13 && PlayerInfo[playerid][pRank] >= 5)
	    {
	        if(ncontrolroomopened == 1)
	        {
				MoveDynamicObject(ncontrolroomobjects[0],-760.61718750,2544.21679688,10024.92480469,2);
				MoveDynamicObject(ncontrolroomobjects[1],-759.52246094,2560.88574219,10024.79785156,2);
				MoveDynamicObject(ncontrolroomobjects[2],-755.53906250,2538.61035156,10025.02636719,2);
				ncontrolroomopened = 0;
			}
			else if(ncontrolroomopened == 0)
			{
				MoveDynamicObject(ncontrolroomobjects[0],-760.61718750,2544.21679688,10020.92480469,2);
				MoveDynamicObject(ncontrolroomobjects[1],-759.52246094,2560.88574219,10020.79785156,2);
				MoveDynamicObject(ncontrolroomobjects[2],-755.53906250,2538.61035156,10021.02636719,2);
				ncontrolroomopened = 1;
			}
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
	if(buttonid == bottomroom[0] || buttonid == bottomroom[1])
	{
		if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	    {
			MoveDynamicObject(blastdoor[0],-764.11816406,2568.81445312,10025.05566406,2);
			SetTimer("CloseBlastDoor", 5000, 0);
	    }
	    else
	    {
	        SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
	}
   	if(buttonid == courtbuttons[0])
	{
		if(PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pMember] != 5)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[3])
	{
		if(PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pMember] != 5)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(courtgates[1],2138.00292969,1290.96386719-10,7698.24169922,4);
		SetTimer("CloseCourtGate2", 5000, 0);
	}
	if(buttonid == courtbuttons[1])
	{
		if(PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pMember] != 5)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == courtbuttons[2])
	{
		if(PlayerInfo[playerid][pLeader] != 3 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 5 && PlayerInfo[playerid][pMember] != 5)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(courtgates[0],2138.00000000,1316.72106934+10,7698.23632812,4);
		SetTimer("CloseCourtGate1", 5000, 0);
	}
	if(buttonid == westout)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	if(buttonid == eastout)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
 		MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
 		MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	if(buttonid == lockerin || buttonid == lockerout)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(locker1,268.29980469,112.56640625,1003.61718750,4);
		MoveDynamicObject(locker2,263.29980469,112.52929688,1003.61718750,4);
		SetTimer("CloseLocker", 2500, 0);
	}
	if(buttonid == cctvin || buttonid == cctvout)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(cctv1,263.44921875,115.79980469,1003.61718750,4);
		MoveDynamicObject(cctv2,268.46875000,115.83691406,1003.61718750,4);
		SetTimer("CloseCCTV", 2500, 0);
	}
	if(buttonid == chiefin || buttonid == chiefout)
	{
		if((PlayerInfo[playerid][pRank] < 6 && PlayerInfo[playerid][pMember] == 1) || PlayerInfo[playerid][pMember] != 1)
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		MoveDynamicObject(chief1,228.0,119.50000000,1009.21875000,4);
		MoveDynamicObject(chief2,230.0,119.53515625,1009.21875000,4);
	    SetTimer("CloseChief", 2500, 0);
	}
	if(buttonid == elevator)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR3, DIALOG_STYLE_LIST, "Elevator", "Rooftop\nGarage", "Select", "Cancel");
	}
	if(buttonid == garagekey)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR2, DIALOG_STYLE_LIST, "Elevator", "Rooftop\nInterior", "Select", "Cancel");
	}
	if(buttonid == roofkey)
	{
		if(!IsACop(playerid))
		{
			SendClientMessageEx(playerid,COLOR_GREY,"Access denied.");
			return 1;
		}
		else ShowPlayerDialog( playerid, ELEVATOR, DIALOG_STYLE_LIST, "Elevator", "Interior\nGarage", "Select", "Cancel");
	}
	if(buttonid == westin)
	{
		MoveDynamicObject(westlobby1,239.71582031,115.09179688,1002.21502686,4);
		MoveDynamicObject(westlobby2,239.67968750,120.09960938,1002.21502686,4);
		SetTimer("CloseWestLobby", 2500, 0);
	}
	if(buttonid == eastin)
	{
	    MoveDynamicObject(eastlobby1,253.14941406,111.59960938,1002.21502686,4);
	    MoveDynamicObject(eastlobby2,253.18457031,106.59960938,1002.21502686,4);
		SetTimer("CloseEastLobby", 2500, 0);
	}
	if (buttonid == ngeveryone)
	{
 		if (NGCellStatus == 0)
   		{
			MoveDynamicObject(NGGate1, -292.82714844,1872.89453125,30.15856934, 4.5000);
			NGCellStatus=1;
			}
			else
			{
			MoveDynamicObject(NGGate1, -292.82714844,1872.89453125,25.90857315, 4.5000);
			NGCellStatus=0;
		}
	}
	if (buttonid == PrisonButtons[0] || buttonid == PrisonButtons[3] || buttonid == PrisonButtons[5] || buttonid == PrisonButtons[6] || buttonid == PrisonButtons[7])
	{
 		if (PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 11)
   		{
            ShowPlayerDialog(playerid, PANEL, DIALOG_STYLE_LIST, "Easter Basin Correctional Facility Controls", "Prison Controls\r\nLockdown All\r\nClear Lockdown\r\nDistress Beacon", "Select", "Cancel");
		}
		else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use the control panel.");
	}
	if(buttonid == PrisonButtons[1])
	{
	    if(IsACop(playerid))
	    {
     		MoveDynamicObject(BlastDoors[0],-2093.0048828125, -203.93110656738, 1994.6691894531, 1);
			SetTimer("ClosePrisonDoor", 3000, 0);
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this control panel.");
	}
	if(buttonid == PrisonButtons[2])
	{
	    if(IsACop(playerid))
	    {
			MoveDynamicObject(BlastDoors[1], -2088.7998046875, -211.2998046875, 1996.7062988281, 1);
		 	MoveDynamicObject(BlastDoors[6], -2088.76562500,-209.21093750,998.66918945, 1);
			SetTimer("ClosePrisonDoor2", 3000, 0);
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this control panel.");
	}
	if(buttonid == PrisonButtons[4]) //
	{
	    if(IsACop(playerid))
	    {
     		MoveDynamicObject(BlastDoors[11], -2050.50097656,-205.82617188,987.02539062, 1);
			SetTimer("ClosePrisonDoor3", 3000, 0);
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this control panel.");
	}
	if(buttonid == PrisonButtons[8]) //
	{
	    if(IsACop(playerid))
	    {
     		MoveDynamicObject(BlastDoors[16], -2057.9, -143.4, 987.24, 1);
			SetTimer("ClosePrisonDoor4", 3000, 0);
	    }
	    else return SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this control panel.");
	}
	if (buttonid == SFPDButton[0] || buttonid == SFPDButton[3])
	{
	    if(IsACop(playerid))
	    {
			MoveDynamicObject(SFPDObject[0], -1636.02539062, 700.0, 19994.54101562, 2.5);
			SetTimer("SFPD", 3000, 0);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Access denied.");
		}
	}

	if (buttonid == SFPDButton[1] || buttonid == SFPDButton[2])
	{
	    if(IsACop(playerid))
	    {
			MoveDynamicObject(SFPDObject[1], -1635.99414062,698,19994.55078125, 2.5);
			SetTimer("SFPD1", 3000, 0);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Access denied.");
		}
	}

	if (buttonid == SFPDButton[4] || buttonid == SFPDButton[5])
	{
	    if(IsACop(playerid))
	    {
			MoveDynamicObject(SFPDObject[2], -1623.8,712.56250000,19994.85937500, 2.5);
			SetTimer("SFPD2", 3000, 0);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Access denied.");
		}
	}

	if (buttonid == SFPDButton[6] || buttonid == SFPDButton[7])
	{
	    if(IsACop(playerid))
	    {
			MoveDynamicObject(SFPDObject[3], -1613.92871094,679.6,19989.05468750, 2.5);
            SetTimer("SFPD3", 3000, 0);
		}
		else
		{
		    SendClientMessageEx(playerid, COLOR_GREY, "Access denied.");
		}
	}

	if (buttonid == SFPDButton[8] || buttonid == SFPDButton[9])
	{
	    if(IsACop(playerid))
	    {
			MoveDynamicObject(SFPDObject[4], -1636.0,712.56250000,19994.85937500, 2.5);
			SetTimer("SFPD4", 3000, 0);
		}
		else
		{
            SendClientMessageEx(playerid, COLOR_GREY, "Access denied.");
		}
	}
	return false;
}

forward SFPD(playerid);
public SFPD(playerid)
{
	MoveDynamicObject(SFPDObject[0], -1636.02539062,701.49707031,19994.54101562, 2.5);
 	return 1;
}

forward SFPD1(playerid);
public SFPD1(playerid)
{
	MoveDynamicObject(SFPDObject[1], -1635.99414062, 696.53320312, 19994.55078125, 2.5);
 	return 1;
}

forward SFPD2(playerid);
public SFPD2(playerid)
{
	MoveDynamicObject(SFPDObject[2],-1625.28808594,712.56250000,19994.85937500, 2.5);
 	return 1;
}

forward SFPD3(playerid);
public SFPD3(playerid)
{
	MoveDynamicObject(SFPDObject[3], -1613.92871094,681.78125000,19989.05468750, 2.5);
 	return 1;
}

forward SFPD4(playerid);
public SFPD4(playerid)
{
	MoveDynamicObject(SFPDObject[4], -1634.79492188, 712.56250000, 19994.85937500, 2.5);
 	return 1;
}

forward DoorOpen(playerid);
public DoorOpen(playerid)
{
	  MoveDynamicObject(lspddoor1, 247.2763671875,72.536186218262,1002.640625, 3.5000);
	  MoveDynamicObject(lspddoor2, 244.0330657959,72.580932617188,1002.640625, 3.5000);
	  return 1;
}
forward DoorClose(playerid);
public DoorClose(playerid)
{
	  MoveDynamicObject(lspddoor1, 246.35150146484,72.547714233398,1002.640625, 3.5000);
	  MoveDynamicObject(lspddoor2, 245.03300476074,72.568511962891,1002.640625, 3.5000);
	  return 1;
}
forward House275GateControl(gate, open);
public House275GateControl(gate, open) // open = Open (1) or Closed (0)
{
	switch(gate)
	{
	    case 0:
	    {
	        if(open)
	        {
	            MoveDynamicObject(House275Gate[0], 661.76,-1221.51,8.71, 4.0);
	        }
	        else
	        {
	            MoveDynamicObject(House275Gate[0], 661.76,-1221.51,13.87, 4.5);
	        }
	    }
	    case 1:
	    {
	        if(open)
	        {
	            MoveDynamicObject(House275Gate[1], 658.95,-1311.08,5.93, 4.0);
	        }
	        else
	        {
	            MoveDynamicObject(House275Gate[1], 658.95,-1311.08,12.25, 4.5);
	        }
	    }
	    case 2:
	    {
	        if(open)
	        {
	            MoveDynamicObject(House275Gate[2], 787.17,-1158.40,16.13, 4.0);
	        }
	        else
	        {
	            MoveDynamicObject(House275Gate[2], 787.17,-1158.40,22.23, 4.5);
	        }
	    }
	}
	return 1;
}

forward Project1906GateControl(open);
public Project1906GateControl(open) // open = Open (1) or Closed (0)
{
	if(open)
	{
		MoveDynamicObject(CustomProject1906, 2230.79931641,-1374.39099121,23.12499809, 4.0);
	}
	else
	{
		MoveDynamicObject(CustomProject1906, 2221.98828125,-1374.33398438,23.12499809, 4.5);
	}
	return 1;
}

RemovePlayerWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);
	PlayerInfo[playerid][pGuns][GetWeaponSlot(weaponid)] = 0;
	SetPlayerWeaponsEx(playerid);
	return 1;
}

public OnEnterExitModShop( playerid, enterexit, interiorid ) {
	if(!enterexit && GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)) > -1) UpdatePlayerVehicleMods(playerid, GetPlayerVehicle(playerid, GetPlayerVehicleID(playerid)));
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvPaintJob] = paintjobid;
	}
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    if(GetPlayerVehicle(playerid, vehicleid) > -1)
	{
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor1] = color1;
		PlayerVehicleInfo[playerid][GetPlayerVehicle(playerid, vehicleid)][pvColor2] = color2;
	}
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {
	if(!(1 <= GetPlayerInterior(playerid) <= 3) && PlayerInfo[playerid][pAdmin] <= 1 && !GetPVarType(playerid, "unMod")) {

		new
			szMessage[128];

		format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s may be hacking vehicle modifications (applied %s %s to their %s).", GetPlayerNameEx(playerid), partName(componentid), partType(GetVehicleComponentType(componentid)), GetVehicleName(vehicleid));
		ABroadCast(COLOR_YELLOW, szMessage, 2);
		Log("logs/hack.log", szMessage);
		return 0;
	}
	if(GetPVarType(playerid, "unMod")) DeletePVar(playerid, "unMod");
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnObjectMoved(objectid)
{
    if(objectid != gFerrisWheel) return 0;

    SetTimer("RotateWheel",3*1000,0);
    return 1;
}

public OnDynamicObjectMoved(objectid)
{
	if(objectid == CarrierS[5])
	{
	    canmove = 0;
	}

	new Float:x, Float:y, Float:z;
	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
		if(objectid == Obj_FloorDoors[i][0])
		{
		    GetDynamicObjectPos(Obj_FloorDoors[i][0], x, y, z);

		    if(x < X_DOOR_L_OPENED - 0.5)   // Some floor doors have shut, move the elevator to next floor in queue:
		    {
				Elevator_MoveToFloor(ElevatorQueue[0]);
				RemoveFirstQueueFloor();
			}
		}
	}

	if(objectid == Obj_Elevator)   // The elevator reached the specified floor.
	{
	    KillTimer(ElevatorBoostTimer);  // Kills the timer, in case the elevator reached the floor before boost.

	    FloorRequestedBy[ElevatorFloor] = INVALID_PLAYER_ID;

	    Elevator_OpenDoors();
	    Floor_OpenDoors(ElevatorFloor);

	    GetDynamicObjectPos(Obj_Elevator, x, y, z);
	    Label_Elevator	= CreateDynamic3DTextLabel("Press 'F' to use elevator", COLOR_YELLOW, 1784.9822, -1302.0426, z - 0.9, 4.0);

	    ElevatorState 	= ELEVATOR_STATE_WAITING;
	    SetTimer("Elevator_TurnToIdle", ELEVATOR_WAIT_TIME, 0);
	}
}

public StartRandomFire()
{
	new string[128];
    new RAND = random(sizeof(RandomFireSpawns));
    RandomFire_X = RandomFireSpawns[RAND][0];
    RandomFire_Y = RandomFireSpawns[RAND][1];
    RandomFire_Z = RandomFireSpawns[RAND][2];
    format(RandomFireLocation, 256, "%s", RandomFireLocationNames[RAND]);
    RandomFireTimer = SetTimer("RandomFire",5000,1);
    FireCount = 0;
    RandomFireActive = 1;
    FireSmoke = CreateObject(2780,  RandomFire_X,RandomFire_Y,RandomFire_Z-2,  0.000,90.000,0.000);

    foreach(Player, i)
	{
        if(IsPlayerInCircle(i,RandomFire_X,RandomFire_Y,70))
		{
	        format(string, sizeof(string), "(INFO) A fire has erupted in the vicinity.");
	        SendClientMessage(i,COLOR_YELLOW,string);
        }
	}

    format(string, sizeof(string), "---------------INFO---------------");
    SendFamilyMessage(4, COLOR_TWPINK, string);
    format(string, sizeof(string), "DPS AUTOMATED DISPATCH");
    SendFamilyMessage(4, COLOR_TWPINK, string);
    format(string, sizeof(string), "Be advised. Fire reported at location below.");
    SendFamilyMessage(4, COLOR_TWPINK, string);
    format(string, sizeof(string), "LOCATION: %s", RandomFireLocation);
    SendFamilyMessage(4, COLOR_TWPINK, string);
    format(string, sizeof(string), "Information: Multiple explosions, approach with caution.");
    SendFamilyMessage(4, COLOR_TWPINK, string);
    format(string, sizeof(string), "Suggested action: Wait for explosions to subside, extinguish remaining flames.");
    SendFamilyMessage(4, COLOR_TWPINK, string);
    format(string, sizeof(string), "---------------INFO---------------");
    SendFamilyMessage(4, COLOR_TWPINK, string);
    SetAllMedicCheckpoint(RandomFire_X,RandomFire_Y,RandomFire_Z,5.0);
    foreach(Player, i)
    {
    	if(IsACop(i) || PlayerInfo[i][pMember] == 4 || PlayerInfo[i][pMember] == 15)
		{
            SendClientMessage(i, COLOR_YELLOW, "(INFO) A fire location has been put on your GPS.");
    	}
	}
    format(string, sizeof(string), "---------------INFO---------------");
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    format(string, sizeof(string), "DCP AUTOMATED DISPATCH");
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    format(string, sizeof(string), "All units be advised. Fire reported at location below.");
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    format(string, sizeof(string), "LOCATION: %s", RandomFireLocation);
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    format(string, sizeof(string), "Information: Multiple explosions, approach with caution.");
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    format(string, sizeof(string), "Suggested action: Quarantine area, wait for LSFD to contain flames.");
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(2, COLOR_DBLUE, string);
	SendFamilyMessage(3, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    format(string, sizeof(string), "---------------INFO---------------");
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
	SetAllCopCheckpoint(RandomFire_X,RandomFire_Y,RandomFire_Z,5.0);
}

public RandomFire()
{
    new string[128];
	if(FireCount<=50)
	{ // 50
        CreateExplosion(RandomFire_X+random(3),RandomFire_Y+random(3),RandomFire_Z+random(2), 3, 6.0);
        CreateExplosion(RandomFire_X-random(3),RandomFire_Y-random(3),RandomFire_Z-random(2), 7, 8.0);
        CreateExplosion(RandomFire_X+random(3),RandomFire_Y-random(3),RandomFire_Z+random(1), 7, 7.0);
        FireCount++;
        return 1;
 	}
  	if(FireCount>50 && FireCount<=60)
  	{ // 50 && 60
        FireCount++;
        return 1;
    }
	KillTimer(RandomFireTimer);
    RandomFireActive = 0;
    DestroyObject(FireSmoke);
	//DisablePlayerCheckpoint;
    format(string, sizeof(string), "DISPATCH: The fire at %s has been contained.", RandomFireLocation);
    SendFamilyMessage(4, COLOR_TWPINK, string);

    format(string, sizeof(string), "DISPATCH: The fire at %s has been contained.", RandomFireLocation);
    SendFamilyMessage(1, COLOR_DBLUE, string);
	SendFamilyMessage(2, COLOR_DBLUE, string);
	SendFamilyMessage(3, COLOR_DBLUE, string);
	SendFamilyMessage(7, COLOR_DBLUE, string);
    return 1;
}

public MAINTENANCE_T5() // GLOBAL MAINTENANCE TIMER 5
{

	// AUTOMATED FIRE GENERATION SYSTEM
	if(RandomFireActive == 0)
	{
 		StartRandomFire();
   	}
}

public IsPlayerInCircle(playerid,Float:x,Float:y,radius)
{
	if(GetPlayerDistanceToPoint(playerid,x,y) < radius)
	{
		return 1;
	}
	return 0;
}

public GetPlayerDistanceToPoint(playerid,Float:x,Float:y)
{
	new Float:x1,Float:y1,Float:z1;
	new Float:tmpdis;
	GetPlayerPos(playerid,x1,y1,z1);
	tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+floatpower(floatabs(floatsub(y,y1)),2));
	return floatround(tmpdis);
}


public OnPlayerEnterDynamicArea(playerid, areaid)
{
	foreach(new i: Player)
	{
	    if(GetPVarType(i, "pBoomBoxArea"))
	    {
	        if(areaid == GetPVarInt(i, "pBoomBoxArea"))
	        {
	            new station[256];
	            GetPVarString(i, "pBoomBoxStation", station, sizeof(station));
	            if(!isnull(station))
				{
					PlayAudioStreamForPlayerEx(playerid, station, GetPVarFloat(i, "pBoomBoxX"), GetPVarFloat(i, "pBoomBoxY"), GetPVarFloat(i, "pBoomBoxZ"), 30.0, 1);
	            }
				return 1;
	        }
	    }
	}
	if(areaid == audiourlid)
	{
	    PlayAudioStreamForPlayerEx(playerid, audiourlurl, audiourlparams[0], audiourlparams[1], audiourlparams[2], audiourlparams[3], 1);
	}
	return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
    foreach(new i: Player)
	{
	    if(GetPVarType(i, "pBoomBoxArea"))
	    {
	        if(areaid == GetPVarInt(i, "pBoomBoxArea"))
	        {
	            StopAudioStreamForPlayerEx(playerid);
				return 1;
	        }
	    }
	}
	if(areaid == audiourlid)
	{
	    StopAudioStreamForPlayerEx(playerid);
	}
	return 1;
}

forward ControlCam(playerid);
public ControlCam(playerid)
{
    new Float:X, Float:Y, Float:Z;
	GetDynamicObjectPos(Carrier[0], X, Y, Z);
 	SetPlayerCameraPos(playerid, X-200, Y, Z+40);
  	SetPlayerCameraLookAt(playerid, X, Y, Z);
}

Vehicle_ResetData(iVehicleID) {
	if(GetVehicleModel(iVehicleID)) {
		for(new cv = 0; cv < 6; cv++)
	    {
			CrateVehicleLoad[iVehicleID][vCrateID][cv] = -1;
		}
		Vehicle_Armor(iVehicleID);
		Vehicle_DArmor(iVehicleID);
		LockStatus{iVehicleID} = 0;
		VehicleStatus{iVehicleID} = 0;
		arr_Engine{iVehicleID} = 0;
		TruckContents{iVehicleID} = 0;
		stationidv[iVehicleID][0] = 0;
		VehicleFuel[iVehicleID] = 100.0;

		if(LockStatus{iVehicleID}) foreach(new i: Player) if(PlayerInfo[i][pLockCar] == iVehicleID) {
			PlayerInfo[i][pLockCar] = INVALID_VEHICLE_ID;
		}

		if(VehicleBomb{iVehicleID} == 1) foreach(new i: Player) if(PlacedVehicleBomb[i] == iVehicleID) {
			VehicleBomb{iVehicleID} = 0;
			PlacedVehicleBomb[i] = INVALID_VEHICLE_ID;
			PickUpC4(i);
			PlayerInfo[i][pC4Used] = 0;
			PlayerInfo[i][pC4Get] = 1;
		}
	}
}

public OnVehicleSpawn(vehicleid) {

	Vehicle_ResetData(vehicleid);
	new
		v;

	foreach(new i: Player) if((v = GetPlayerVehicle(i, vehicleid)) != -1) {
		DestroyVehicle(vehicleid);

		new
			iVehicleID = CreateVehicleEx(PlayerVehicleInfo[i][v][pvModelId], PlayerVehicleInfo[i][v][pvPosX], PlayerVehicleInfo[i][v][pvPosY], PlayerVehicleInfo[i][v][pvPosZ], PlayerVehicleInfo[i][v][pvPosAngle],PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2], -1, i);

		PlayerVehicleInfo[i][v][pvId] = iVehicleID;

		Vehicle_ResetData(iVehicleID);
		if(!isnull(PlayerVehicleInfo[i][v][pvPlate])) {
			SetVehicleNumberPlate(iVehicleID, PlayerVehicleInfo[i][v][pvPlate]);
		}
		if(PlayerVehicleInfo[i][v][pvLocked] == 1) LockPlayerVehicle(i, iVehicleID, PlayerVehicleInfo[i][v][pvLock]);
		ChangeVehiclePaintjob(iVehicleID, PlayerVehicleInfo[i][v][pvPaintJob]);
		ChangeVehicleColor(iVehicleID, PlayerVehicleInfo[i][v][pvColor1], PlayerVehicleInfo[i][v][pvColor2]);
		for(new m = 0; m < MAX_MODS; m++)
		{
			if (PlayerVehicleInfo[i][v][pvMods][m] >= 1000 && PlayerVehicleInfo[i][v][pvMods][m] <= 1193)
			{
				if (InvalidModCheck(PlayerVehicleInfo[i][v][pvModelId], PlayerVehicleInfo[i][v][pvMods][m]))
				{
					AddVehicleComponent(iVehicleID, PlayerVehicleInfo[i][v][pvMods][m]);
				}
				else
				{
					PlayerVehicleInfo[i][v][pvMods][m] = 0;
				}
			}
		}
		new string[128];
		format(string,sizeof(string),"Your %s has been sent to the location at which you last parked it.",GetVehicleName(iVehicleID));
		SendClientMessageEx(i, COLOR_GRAD1, string);
	}
}

Vehicle_Armor(iVehicleID) {
	switch(GetVehicleModel(iVehicleID)) {
		case 596, 597, 598: SetVehicleHealth(iVehicleID, 2000.0);
		case 490: SetVehicleHealth(iVehicleID, 2500.0);
		case 407, 470: SetVehicleHealth(iVehicleID, 3000.0);
		case 428, 433, 447, 427: SetVehicleHealth(iVehicleID, 4000.0);
		case 601, 528: SetVehicleHealth(iVehicleID, 5000.0);
		case 432, 425: SetVehicleHealth(iVehicleID, 7500.0);
	}
}

Vehicle_DArmor(iVehicleID) {
	new vehid = GetDynamicCarID(iVehicleID);
	if(vehid != -1) {
    SetVehicleHealth(iVehicleID, FactionVehicleInfo[vehid][fMaxHP]);
	}
}

LockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus{carid} = 1;
	    vehicle_lock_doors(carid);
	}
}

UnLockPlayerVehicle(ownerid, carid, type)
{
	new v = GetPlayerVehicle(ownerid, carid);
	if(PlayerVehicleInfo[ownerid][v][pvId] == carid && type == 3)
	{
	    LockStatus{carid} = 0;
		vehicle_unlock_doors(carid);
	}
}

LockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 3)
	{
	    LockStatus{carid} = 1;
		vehicle_lock_doors(carid);
	}
}

UnLockGangVehicle(family, carid, type)
{
	new v = GetGangVehicle(family, carid);
	if(FamilyVehicleInfo[family][v][fvId] == carid && type == 3)
	{
	    LockStatus{carid} = 0;
		vehicle_unlock_doors(carid);
	}
}

forward DisableVehicleAlarm(vehicleid);
public DisableVehicleAlarm(vehicleid)
{
	new engine,lights,alarm,doors,bonnet,boot,objective;
 	GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(vehicleid,engine,lights,VEHICLE_PARAMS_OFF,doors,bonnet,boot,objective);
	return 1;
}

forward ReleasePlayer(playerid);
public ReleasePlayer(playerid)
{
	DeletePVar(playerid, "IsFrozen");
	TogglePlayerControllable(playerid,1);
}

stock strmatch(const String1[], const String2[])
{
	if ((strcmp(String1, String2, true, strlen(String2)) == 0) && (strlen(String2) == strlen(String1)))
	{
		return true;
	}
	else
	{
		return false;
	}
}

stock ARank(playerid)
{
	new arank[256];
	if(PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[playerid][pSMod] == 0) format(arank, sizeof(arank), "Moderator");
	else if(PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[playerid][pSMod] == 1) format(arank, sizeof(arank), "Senior Moderator");
	else if(PlayerInfo[playerid][pAdmin] == 2) format(arank, sizeof(arank), "Junior Admin");
	else if(PlayerInfo[playerid][pAdmin] == 3) format(arank, sizeof(arank), "General Admin");
	else if(PlayerInfo[playerid][pAdmin] == 4) format(arank, sizeof(arank), "Senior Admin");
    else if(PlayerInfo[playerid][pAdmin] == 1337) format(arank, sizeof(arank), "Head Admin");
	else if(PlayerInfo[playerid][pAdmin] == 1338) format(arank, sizeof(arank), "Admin Director");
	else if(PlayerInfo[playerid][pAdmin] == 13338) format(arank, sizeof(arank), "Co-Executive");
	else if(PlayerInfo[playerid][pAdmin] == 99998) format(arank, sizeof(arank), "Lead Developer");
	else if(PlayerInfo[playerid][pAdmin] == 99999) format(arank, sizeof(arank), "Executive Admin");
	else if(PlayerInfo[playerid][pHelper] == 1) format(arank, sizeof(arank), "Helper");
	else if(PlayerInfo[playerid][pHelper] == 2) format(arank, sizeof(arank), "Advisor");
	else if(PlayerInfo[playerid][pHelper] == 3) format(arank, sizeof(arank), "Senior Advisor");
	else if(PlayerInfo[playerid][pHelper] == 4) format(arank, sizeof(arank), "Chief Advisor");
	return arank;
}

//------------------------------------------------------------------------------
//CAR DEALERSHIP SYSTEM BY DONUTS
//------------------------------------------------------------------------------
stock CreateCarDealership(Float: enx, Float: eny, Float: enz, Float: radius, price, message[])
{
	new dealershipid = GetFreeCarDealership();
	if(dealershipid == -1) return -1;
	new text_info[128];
	CarDealershipInfo[dealershipid][cdEntranceX] = enx;
	CarDealershipInfo[dealershipid][cdEntranceY] = eny;
	CarDealershipInfo[dealershipid][cdEntranceZ] = enz;
	CarDealershipInfo[dealershipid][cdRadius] = radius;
	CarDealershipInfo[dealershipid][cdPrice] = price;
	strmid(CarDealershipInfo[dealershipid][cdMessage], message, 0, strlen(message), 255);
	CarDealershipInfo[dealershipid][cdPickupID] = CreatePickupEx(1239, 1, CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ]);
	format(text_info, sizeof(text_info), "Car Dealership %s For Sale\nPrice: %d\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdPrice], CarDealershipInfo[dealershipid][cdRadius], dealershipid);
    CarDealershipInfo[dealershipid][cdTextLabel] = CreateDynamic3DTextLabel(text_info,COLOR_RED,CarDealershipInfo[dealershipid][cdEntranceX], CarDealershipInfo[dealershipid][cdEntranceY], CarDealershipInfo[dealershipid][cdEntranceZ]+0.75,3.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1);
    SavecDealership(dealershipid);
    return dealershipid;
}
stock DestroyCarDealership(dealershipid)
{
	new string[30];
	CarDealershipInfo[dealershipid][cdEntranceX] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceY] = 0.0;
	CarDealershipInfo[dealershipid][cdEntranceZ] = 0.0;
	CarDealershipInfo[dealershipid][cdRadius] = 0.0;
	CarDealershipInfo[dealershipid][cdTill] = 0;
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdPrice] = 0;
	format(string, sizeof(string), "None");
	strmid(CarDealershipInfo[dealershipid][cdOwner], string, 0, strlen(string), 255);
	format(string, sizeof(string), "None");
	strmid(CarDealershipInfo[dealershipid][cdMessage], string, 0, strlen(string), 255);
	DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdTextLabel]);
	DestroyPickupEx(CarDealershipInfo[dealershipid][cdPickupID]);
	CarDealershipInfo[dealershipid][cdPickupID] = 0;
	CarDealershipInfo[dealershipid][cdTextLabel] = Text3D:INVALID_3DTEXT_ID;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
	{
		if (CarDealershipInfo[dealershipid][cdVehicleModel][v] != 0)
		{
	        DestroyCarDealershipVehicle(dealershipid, v);
		}
	}
	SavecDealership(dealershipid);
}
stock GetFreeCarDealership()
{
    new
		i = 0;
	while (i < MAX_CARDEALERSHIPS && CarDealershipInfo[i][cdEntranceX] != 0.0 && CarDealershipInfo[i][cdEntranceY] != 0.0)
	{
		i++;
	}
	if (i == MAX_CARDEALERSHIPS) return -1;
	return i;

}
stock SetPlayerOwnerOfCD(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	CarDealershipInfo[dealershipid][cdOwned] = 1;
	GetPlayerName(playerid, owner, sizeof(owner));
	strmid(CarDealershipInfo[dealershipid][cdOwner], owner, 0, strlen(owner), 255);
	new text_info[128];
	format(text_info, sizeof(text_info), "Car Dealership %s\nOwner: %s\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdOwner], CarDealershipInfo[dealershipid][cdRadius], dealershipid);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_GREEN, text_info);
	SavecDealership(dealershipid);
}
stock SellCarDealership(dealershipid)
{
	CarDealershipInfo[dealershipid][cdOwned] = 0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][0] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][1] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][2] = 0.0;
	CarDealershipInfo[dealershipid][cdVehicleSpawn][3] = 0.0;
	strmid(CarDealershipInfo[dealershipid][cdOwner], "No-one", 0, MAX_PLAYER_NAME, 255);
	new text_info[128];
	format(text_info, sizeof(text_info), "Car Dealership %s For Sale\nPrice: %d\nRadius: %.1f\nID: %d", CarDealershipInfo[dealershipid][cdMessage], CarDealershipInfo[dealershipid][cdPrice], CarDealershipInfo[dealershipid][cdRadius], dealershipid);
	UpdateDynamic3DTextLabelText(CarDealershipInfo[dealershipid][cdTextLabel], COLOR_RED, text_info);
	SavecDealership(dealershipid);
}
stock IsPlayerOwnerOfCD(playerid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
	    if(strcmp(CarDealershipInfo[d][cdOwner],owner, true ) == 0)
	    {
			return d;
		}
	}
	return -1;
}
stock IsPlayerOwnerOfCDEx(playerid, dealershipid)
{
	new owner[MAX_PLAYER_NAME];
	GetPlayerName(playerid, owner, sizeof(owner));
	if(strcmp(CarDealershipInfo[dealershipid][cdOwner],owner, true ) == 0)
	{
	    return 1;
	}
	return 0;
}
stock CreateCarDealershipVehicle(dealershipid, modelid, Float: x, Float: y, Float: z, Float: a, price)
{
    new cdvehicleid = GetFreeCarDealershipVehicleId(dealershipid);
    if(cdvehicleid == -1) return -1;
    new text_info[128];
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = modelid;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = price;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = x;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = y;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = z;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = a;
    new carcreated = CreateVehicleEx(modelid, x, y, z, a, 0, 0, 6);
    format(text_info, sizeof(text_info), "%s For Sale | Price: %d", GetVehicleName(carcreated), CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid]);
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = CreateDynamic3DTextLabel(text_info,COLOR_LIGHTBLUE,0.0, 0.0, 0.0,5.0,INVALID_PLAYER_ID,carcreated,1);
	CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = carcreated;
	SavecDealership(cdvehicleid);
    return cdvehicleid;
}
stock DestroyCarDealershipVehicle(dealershipid, cdvehicleid)
{
    CarDealershipInfo[dealershipid][cdVehicleModel][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleCost][cdvehicleid] = 0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnX][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnY][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnZ][cdvehicleid] = 0.0;
    CarDealershipInfo[dealershipid][cdVehicleSpawnAngle][cdvehicleid] = 0.0;
    DestroyDynamic3DTextLabel(CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid]);
    DestroyVehicle(CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid]);
    CarDealershipInfo[dealershipid][cdVehicleLabel][cdvehicleid] = Text3D:INVALID_3DTEXT_ID;
    CarDealershipInfo[dealershipid][cdVehicleId][cdvehicleid] = 0;
}
stock GetFreeCarDealershipVehicleId(dealershipid)
{
    new
		i = 0;
	while (i < MAX_DEALERSHIPVEHICLES && CarDealershipInfo[dealershipid][cdVehicleModel][i] != 0)
	{
		i++;
	}
	if (i == MAX_DEALERSHIPVEHICLES) return -1;
	return i;

}
stock GetCarDealershipVehicleId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return v;
            }
		}
    }
    return -1;
}
stock GetCarDealershipId(vehicleid)
{
    for(new d = 0; d < MAX_CARDEALERSHIPS; d++)
    {
        for(new v = 0; v < MAX_DEALERSHIPVEHICLES; v++)
        {
            if(CarDealershipInfo[d][cdVehicleId][v] == vehicleid)
            {
                return d;
            }
		}
    }
    return -1;
}

//------------------------------------------------------------------------------
//PLAYER VEHICLE SYSTEM BY DONUTS
//------------------------------------------------------------------------------
stock CreatePlayerVehicle(playerid, playervehicleid, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] == INVALID_PLAYER_VEHICLE_ID)
	{
 		VehicleSpawned[playerid]++;
	    PlayerCars++;
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = modelid;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = x;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = y;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = z;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = angle;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = color1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = color2;
		PlayerVehicleInfo[playerid][playervehicleid][pvPark] = 1;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = price;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		for(new m = 0; m < MAX_MODS; m++)
	    {
	    	PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
		}
		new carcreated = CreateVehicleEx(modelid,x,y,z,angle,color1,color2,-1, playerid);
		Vehicle_ResetData(carcreated);
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 1;
		//SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);

		g_mysql_SaveVehicle(playerid, playervehicleid);
		return carcreated;
	}
	return INVALID_PLAYER_VEHICLE_ID;
}

stock DestroyPlayerVehicle(playerid, playervehicleid)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvModelId])
	{
	    VehicleSpawned[playerid]--;
	    PlayerCars--;
		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		PlayerVehicleInfo[playerid][playervehicleid][pvModelId] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = 0.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] = -1;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor1] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvColor2] = 126;
		PlayerVehicleInfo[playerid][playervehicleid][pvPrice] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvFuel] = 100.0;
		PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] = 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] = 0;
		VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 100.0;
	    PlayerVehicleInfo[playerid][playervehicleid][pvId] = INVALID_PLAYER_VEHICLE_ID;
	    if(PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] != INVALID_PLAYER_ID)
	    {
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
	        PlayerInfo[PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
	    	PlayerVehicleInfo[playerid][playervehicleid][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}

		g_mysql_SaveVehicle(playerid, playervehicleid);
	}
}

stock LoadPlayerVehicles(playerid) {
	new bool:bVehRestoreFlag = false;

	switch(PlayerInfo[playerid][pDonateRank]) {
		case 0: {
			PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
			PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
		}
		case 1: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
		}
		case 2: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
        }
		case 3: {
            PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 1;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 1;
        }
        default: {
        	PlayerVehicleInfo[playerid][0][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][1][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][2][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][3][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][4][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][5][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][6][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][7][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][8][pvDisabled] = 0;
            PlayerVehicleInfo[playerid][9][pvDisabled] = 0;
        }
	}
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++) {
        if(vehicleSpawnCountCheck(playerid)) {
			if(PlayerVehicleInfo[playerid][v][pvModelId] >= 400) {
				if(PlayerVehicleInfo[playerid][v][pvSpawned] && !PlayerVehicleInfo[playerid][v][pvDisabled] && !PlayerVehicleInfo[playerid][v][pvImpounded]) {

					PlayerCars++;
					VehicleSpawned[playerid]++;
					new carcreated = CreateVehicleEx(PlayerVehicleInfo[playerid][v][pvModelId], PlayerVehicleInfo[playerid][v][pvPosX], PlayerVehicleInfo[playerid][v][pvPosY], PlayerVehicleInfo[playerid][v][pvPosZ], PlayerVehicleInfo[playerid][v][pvPosAngle],PlayerVehicleInfo[playerid][v][pvColor1], PlayerVehicleInfo[playerid][v][pvColor2], -1, playerid);
					Vehicle_ResetData(carcreated);
					PlayerVehicleInfo[playerid][v][pvId] = carcreated;
					VehicleFuel[carcreated] = PlayerVehicleInfo[playerid][v][pvFuel];

					if(PlayerVehicleInfo[playerid][v][pvLocked]) {
						LockPlayerVehicle(playerid, carcreated, PlayerVehicleInfo[playerid][v][pvLock]);
					}
					LoadPlayerVehicleMods(playerid, v);

					new szPrefix[32], tmpFVehModelId, Float:tmpFVehPos[4];

					format(szPrefix, sizeof(szPrefix), "tmpVeh%dModelId", v);
					tmpFVehModelId = GetPVarInt(playerid, szPrefix);
					DeletePVar(playerid, szPrefix);
					format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosX", v);
					tmpFVehPos[0] = GetPVarFloat(playerid, szPrefix);
					DeletePVar(playerid, szPrefix);
					format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosY", v);
					tmpFVehPos[1] = GetPVarFloat(playerid, szPrefix);
					DeletePVar(playerid, szPrefix);
					format(szPrefix, sizeof(szPrefix), "tmpVeh%dPosZ", v);
					tmpFVehPos[2] = GetPVarFloat(playerid, szPrefix);
					DeletePVar(playerid, szPrefix);
					format(szPrefix, sizeof(szPrefix), "tmpVeh%dAngle", v);
					tmpFVehPos[3] = GetPVarFloat(playerid, szPrefix);
					DeletePVar(playerid, szPrefix);


					if(tmpFVehPos[0] != 0.0 && tmpFVehModelId == PlayerVehicleInfo[playerid][v][pvModelId])
					{
						SetVehiclePos(carcreated, tmpFVehPos[0], tmpFVehPos[1], tmpFVehPos[2]);
						SetVehicleZAngle(carcreated, tmpFVehPos[3]);

						bVehRestoreFlag = true;
					}
				}
				else if(PlayerVehicleInfo[playerid][v][pvSpawned] != 0) {
					PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
				}
			}
			else if(PlayerVehicleInfo[playerid][v][pvImpounded] != 0) {
				PlayerVehicleInfo[playerid][v][pvImpounded] = 0;
			}
			else if(PlayerVehicleInfo[playerid][v][pvSpawned] != 0) {
				PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
			}
        }
		else PlayerVehicleInfo[playerid][v][pvSpawned] = 0;
    }

	if(bVehRestoreFlag == true) SendClientMessageEx(playerid, COLOR_WHITE, "Your vehicles have been restored to their last known location from your previous timeout.");
    return 1;
}

vehicleSpawnCountCheck(playerid) {
	switch(PlayerInfo[playerid][pDonateRank]) {
		case 0, 1, 2: if(VehicleSpawned[playerid] >= 2) return 0;
		case 3: if(VehicleSpawned[playerid] >= 3) return 0;
		case 4, 5: if(VehicleSpawned[playerid] >= 5) return 0;
		default: return 0;
	}
	return 1;
}

vehicleCountCheck(playerid) {

	new
		iCount = GetPlayerVehicleCount(playerid);

	switch(PlayerInfo[playerid][pDonateRank]) {
		case 0: if(iCount >= 5) return 0;
		case 1: if((iCount >= 6) || (PlayerInfo[playerid][pTempVIP] > 0 && iCount >= 5)) return 0;
		case 2: if(iCount >= 7) return 0;
		case 3: if(iCount >= 8) return 0;
		case 4, 5: if(iCount >= 10) return 0;
		default: return 0;
	}
	return 1;
}

stock UnloadPlayerVehicles(playerid) {
	for(new v = 0; v < MAX_PLAYERVEHICLES; v++) if(PlayerVehicleInfo[playerid][v][pvId] != INVALID_PLAYER_VEHICLE_ID && !PlayerVehicleInfo[playerid][v][pvImpounded] && PlayerVehicleInfo[playerid][v][pvSpawned]) {
		PlayerCars--;
		if(LockStatus{PlayerVehicleInfo[playerid][v][pvId]} != 0) LockStatus{PlayerVehicleInfo[playerid][v][pvId]} = 0;
		DestroyVehicle(PlayerVehicleInfo[playerid][v][pvId]);
		VehicleFuel[PlayerVehicleInfo[playerid][v][pvId]] = 100.0;
		PlayerVehicleInfo[playerid][v][pvId] = INVALID_PLAYER_VEHICLE_ID;
		if(PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] != INVALID_PLAYER_ID)
		{
			PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeys] = INVALID_PLAYER_VEHICLE_ID;
			PlayerInfo[PlayerVehicleInfo[playerid][v][pvAllowedPlayerId]][pVehicleKeysFrom] = INVALID_PLAYER_ID;
			PlayerVehicleInfo[playerid][v][pvAllowedPlayerId] = INVALID_PLAYER_ID;
		}
    }
	VehicleSpawned[playerid] = 0;
}

stock UpdatePlayerVehicleParkPosition(playerid, playervehicleid, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health)
{
	if(PlayerVehicleInfo[playerid][playervehicleid][pvId] != INVALID_PLAYER_VEHICLE_ID && GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]))
	{
		new Float:oldx, Float:oldy, Float:oldz, Float: oldfuel, arrDamage[4];
		oldx = PlayerVehicleInfo[playerid][playervehicleid][pvPosX];
		oldy = PlayerVehicleInfo[playerid][playervehicleid][pvPosY];
		oldz = PlayerVehicleInfo[playerid][playervehicleid][pvPosZ];
		if(oldx == newx && oldy == newy && oldz == newz) return 0;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosX] = newx;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosY] = newy;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosZ] = newz;
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle] = newangle;
		oldfuel = VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]];
		VehicleFuel[PlayerVehicleInfo[playerid][playervehicleid][pvId]] = 100.0;
		UpdatePlayerVehicleMods(playerid, playervehicleid);
		GetVehicleDamageStatus(PlayerVehicleInfo[playerid][playervehicleid][pvId], arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
		DestroyVehicle(PlayerVehicleInfo[playerid][playervehicleid][pvId]);
		new carcreated = CreateVehicleEx(PlayerVehicleInfo[playerid][playervehicleid][pvModelId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ],
		PlayerVehicleInfo[playerid][playervehicleid][pvPosAngle],PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2], -1, playerid);
		PlayerVehicleInfo[playerid][playervehicleid][pvId] = carcreated;
		Vehicle_ResetData(carcreated);
		VehicleFuel[carcreated] = oldfuel;
		// SetVehicleNumberPlate(carcreated, PlayerVehicleInfo[playerid][playervehicleid][pvNumberPlate]);
		SetVehicleHealth(carcreated, health);
		if(PlayerVehicleInfo[playerid][playervehicleid][pvLocked] == 1) LockPlayerVehicle(playerid, PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvLock]);
		LoadPlayerVehicleMods(playerid, playervehicleid);
		UpdateVehicleDamageStatus(PlayerVehicleInfo[playerid][playervehicleid][pvId], arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);

		g_mysql_SaveVehicle(playerid, playervehicleid);
		return 1;
	}
	return 0;
}

stock UpdatePlayerVehicleMods(playerid, playervehicleid)
{
	if(GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]) && PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 && PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] == 1 && !PlayerVehicleInfo[playerid][playervehicleid][pvDisabled]) {
		new carid = PlayerVehicleInfo[playerid][playervehicleid][pvId];
		new exhaust, frontbumper, rearbumper, roof, spoilers, sideskirt1,
			sideskirt2, wheels, hydraulics, nitro, hood, lamps, stereo, ventright, ventleft;
		exhaust = GetVehicleComponentInSlot(carid, CARMODTYPE_EXHAUST);
		frontbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_FRONT_BUMPER);
		rearbumper = GetVehicleComponentInSlot(carid, CARMODTYPE_REAR_BUMPER);
		roof = GetVehicleComponentInSlot(carid, CARMODTYPE_ROOF);
		spoilers = GetVehicleComponentInSlot(carid, CARMODTYPE_SPOILER);
		sideskirt1 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		sideskirt2 = GetVehicleComponentInSlot(carid, CARMODTYPE_SIDESKIRT);
		wheels = GetVehicleComponentInSlot(carid, CARMODTYPE_WHEELS);
		hydraulics = GetVehicleComponentInSlot(carid, CARMODTYPE_HYDRAULICS);
		nitro = GetVehicleComponentInSlot(carid, CARMODTYPE_NITRO);
		hood = GetVehicleComponentInSlot(carid, CARMODTYPE_HOOD);
		lamps = GetVehicleComponentInSlot(carid, CARMODTYPE_LAMPS);
		stereo = GetVehicleComponentInSlot(carid, CARMODTYPE_STEREO);
		ventright = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_RIGHT);
		ventleft = GetVehicleComponentInSlot(carid, CARMODTYPE_VENT_LEFT);
		if(spoilers >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][0] = spoilers;
		if(hood >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][1] = hood;
		if(roof >= 1000)        PlayerVehicleInfo[playerid][playervehicleid][pvMods][2] = roof;
		if(sideskirt1 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][3] = sideskirt1;
		if(lamps >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][4] = lamps;
		if(nitro >= 1000)       PlayerVehicleInfo[playerid][playervehicleid][pvMods][5] = nitro;
		if(exhaust >= 1000)     PlayerVehicleInfo[playerid][playervehicleid][pvMods][6] = exhaust;
		if(wheels >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][7] = wheels;
		if(stereo >= 1000)      PlayerVehicleInfo[playerid][playervehicleid][pvMods][8] = stereo;
		if(hydraulics >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][9] = hydraulics;
		if(frontbumper >= 1000) PlayerVehicleInfo[playerid][playervehicleid][pvMods][10] = frontbumper;
		if(rearbumper >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][11] = rearbumper;
		if(ventright >= 1000)   PlayerVehicleInfo[playerid][playervehicleid][pvMods][12] = ventright;
		if(ventleft >= 1000)    PlayerVehicleInfo[playerid][playervehicleid][pvMods][13] = ventleft;
		if(sideskirt2 >= 1000)  PlayerVehicleInfo[playerid][playervehicleid][pvMods][14] = sideskirt2;

		g_mysql_SaveVehicle(playerid, playervehicleid);
	}
}

stock LoadPlayerVehicleMods(playerid, playervehicleid)
{
	if(GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]) && PlayerVehicleInfo[playerid][playervehicleid][pvImpounded] == 0 && PlayerVehicleInfo[playerid][playervehicleid][pvSpawned] == 1) {

        if(strlen(PlayerVehicleInfo[playerid][playervehicleid][pvPlate]) > 0)
		{
		    SetVehicleNumberPlate(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvPlate]);
		    SetVehiclePos(PlayerVehicleInfo[playerid][playervehicleid][pvId], 9999.9, 9999.9, 9999.9);
		    SetVehiclePos(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvPosX], PlayerVehicleInfo[playerid][playervehicleid][pvPosY], PlayerVehicleInfo[playerid][playervehicleid][pvPosZ]);
		}

		if(PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob] != -1)
		{
			 ChangeVehiclePaintjob(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvPaintJob]);
			 ChangeVehicleColor(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvColor1], PlayerVehicleInfo[playerid][playervehicleid][pvColor2]);
		}
		for(new m = 0; m < MAX_MODS; m++)
		{
		    if (PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] >= 1000  && PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] <= 1193)
		    {
				if (InvalidModCheck(GetVehicleModel(PlayerVehicleInfo[playerid][playervehicleid][pvId]),PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]))
				{
					AddVehicleComponent(PlayerVehicleInfo[playerid][playervehicleid][pvId], PlayerVehicleInfo[playerid][playervehicleid][pvMods][m]);
				}
				else
				{
				    PlayerVehicleInfo[playerid][playervehicleid][pvMods][m] = 0;
				}
			}
		}
	}
}

stock GetPlayerFreeVehicleId(playerid) {
	for(new i; i < MAX_PLAYERVEHICLES; ++i) {
		if(PlayerVehicleInfo[playerid][i][pvModelId] == 0) return i;
	}
	return -1;
}

GetPlayerVehicleCount(playerid)
{
	new cars = 0;
	for(new i = 0; i < MAX_PLAYERVEHICLES; i++) if(PlayerVehicleInfo[playerid][i][pvModelId]) ++cars;
	return cars;
}

CheckPlayerVehiclesForDesync(playerid) {
	for(new i = 0; i != MAX_PLAYERVEHICLES; ++i) {
		if(PlayerVehicleInfo[playerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID && GetVehicleModel(PlayerVehicleInfo[playerid][i][pvId]) != PlayerVehicleInfo[playerid][i][pvModelId]) {
			UnloadPlayerVehicles(playerid);
			LoadPlayerVehicles(playerid);
			return SendClientMessageEx(playerid, COLOR_YELLOW, "Your vehicles were de-synced; they have been respawned to ensure no conflicts arise.");
	    }
	}
	return 1;
}

stock GetPlayerVehicle(playerid, vehicleid)
{
    for(new v = 0; v < MAX_PLAYERVEHICLES; v++)
    {
        if(PlayerVehicleInfo[playerid][v][pvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}


//------------------------------------------------------------------------------
//----------------------DYNAMIC GANG VEHICLE SYSTEM-----------------------------
//------------------------------------------------------------------------------

stock CreateGangVehicle(f, fv, modelid, Float: x, Float: y, Float: z, Float: angle, color1, color2, price)
{
	if(FamilyVehicleInfo[f][fv][fvId] == INVALID_VEHICLE_ID)
	{
		FamilyVehicleInfo[f][fv][fvModelId] = modelid;
		FamilyVehicleInfo[f][fv][fvSpawnx] = x;
		FamilyVehicleInfo[f][fv][fvSpawny] = y;
		FamilyVehicleInfo[f][fv][fvSpawnz] = z;
		FamilyVehicleInfo[f][fv][fvSpawna] = angle;
		FamilyVehicleInfo[f][fv][fvColor1] = color1;
		FamilyVehicleInfo[f][fv][fvColor2] = color2;
		FamilyVehicleInfo[f][fv][fvPrice] = price;
		//FamilyVehicleInfo[f][fv][fvSpawned] = 1;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		new carcreated = CreateVehicleEx(modelid,x,y,z,angle,color1,color2,-1);
		FamilyVehicleInfo[f][fv][fvId] = carcreated;
		Vehicle_ResetData(carcreated);
		printf("Created the gang vehicle for family %d | vehicleid #%d | familyvehicleslot #%d.", f, FamilyVehicleInfo[f][fv][fvId], fv);
		return carcreated;
	}
	return INVALID_VEHICLE_ID;
}

stock DestroyGangVehicle(f, fv)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
		FamilyVehicleInfo[f][fv][fvModelId] = 0;
		FamilyVehicleInfo[f][fv][fvSpawnx] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawny] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawnz] = 0.0;
		FamilyVehicleInfo[f][fv][fvSpawna] = 0.0;
		FamilyVehicleInfo[f][fv][fvPaintJob] = -1;
		FamilyVehicleInfo[f][fv][fvColor1] = 126;
		FamilyVehicleInfo[f][fv][fvColor2] = 126;
		FamilyVehicleInfo[f][fv][fvPrice] = 0;
		FamilyVehicleInfo[f][fv][fvImpounded] = 0;
        //FamilyVehicleInfo[f][fv][fvSpawned] = 0;
		FamilyVehicleInfo[f][fv][fvFuel] = 100.0;
		VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
	    FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
	}
}

stock LoadGangVehicles(f)
{
	for(new fv = 0; fv < MAX_GANG_VEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvModelId] != 0)
        {
			new carcreated = CreateVehicleEx(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz], FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
			FamilyVehicleInfo[f][fv][fvId] = carcreated;
			VehicleFuel[carcreated] = FamilyVehicleInfo[f][fv][fvFuel];
			if(VehicleFuel[carcreated] == 0) VehicleFuel[carcreated] = 100.0;
			if(FamilyVehicleInfo[f][fv][fvLocked] == 1) LockGangVehicle(f, FamilyVehicleInfo[f][fv][fvId], FamilyVehicleInfo[f][fv][fvLock]);
        }
    }
}

stock UnloadGangVehicles(f)
{
	for(new fv = 0; fv < MAX_PLAYERVEHICLES; fv++)
    {
        if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
        {
            if(LockStatus{FamilyVehicleInfo[f][fv][fvId]} != 0) LockStatus{FamilyVehicleInfo[f][fv][fvId]} = 0;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			VehicleFuel[FamilyVehicleInfo[f][fv][fvId]] = 100.0;
			FamilyVehicleInfo[f][fv][fvId] = INVALID_VEHICLE_ID;
        }
    }
}

stock UpdateGangVehicleParkPosition(f, fv, Float:newx, Float:newy, Float:newz, Float:newangle, Float:health, temp = 1)
{
	if(FamilyVehicleInfo[f][fv][fvId] != INVALID_VEHICLE_ID)
	{
	    if(temp == 0)
		{
	 		new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnx];
			oldy = FamilyVehicleInfo[f][fv][fvSpawny];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnz];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnx] = newx;
			FamilyVehicleInfo[f][fv][fvSpawny] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnz] = newz;
			FamilyVehicleInfo[f][fv][fvSpawna] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicleEx(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnx], FamilyVehicleInfo[f][fv][fvSpawny], FamilyVehicleInfo[f][fv][fvSpawnz],
			FamilyVehicleInfo[f][fv][fvSpawna],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
			Vehicle_ResetData(carcreated);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
		else
		{
		    new Float:oldx, Float:oldy, Float:oldz;
			oldx = FamilyVehicleInfo[f][fv][fvSpawnxtmp];
			oldy = FamilyVehicleInfo[f][fv][fvSpawnytmp];
			oldz = FamilyVehicleInfo[f][fv][fvSpawnztmp];
			if(oldx == newx && oldy == newy && oldz == newz) return 0;
			FamilyVehicleInfo[f][fv][fvSpawnxtmp] = newx;
			FamilyVehicleInfo[f][fv][fvSpawnytmp] = newy;
			FamilyVehicleInfo[f][fv][fvSpawnztmp] = newz;
			FamilyVehicleInfo[f][fv][fvSpawnatmp] = newangle;
			DestroyVehicle(FamilyVehicleInfo[f][fv][fvId]);
			new carcreated = CreateVehicleEx(FamilyVehicleInfo[f][fv][fvModelId], FamilyVehicleInfo[f][fv][fvSpawnxtmp], FamilyVehicleInfo[f][fv][fvSpawnytmp], FamilyVehicleInfo[f][fv][fvSpawnztmp],
			FamilyVehicleInfo[f][fv][fvSpawnatmp],FamilyVehicleInfo[f][fv][fvColor1], FamilyVehicleInfo[f][fv][fvColor2], -1);
	        FamilyVehicleInfo[f][fv][fvId] = carcreated;
			Vehicle_ResetData(carcreated);
	        SetVehicleHealth(carcreated, health);
	        SaveFamiliesHQ();
        	return 1;
		}
	}
	return 0;
}

stock GetGangFreeVehicleId(f)
{
    new
		i = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
		i++;
	}
	if (i == MAX_GANG_VEHICLES) return -1;
	return i;

}

stock GetGangVehicleCount(f)
{
    new
		i = 0,
		cars = 0;
	while (i < MAX_GANG_VEHICLES && FamilyVehicleInfo[f][i][fvId] != INVALID_VEHICLE_ID)
	{
	    cars++;
		i++;
	}
	return cars;

}

stock GetGangVehicle(f, vehicleid)
{
	if(f == 255) return -1;
	if(vehicleid == -1) return -1;
    for(new v = 0; v < MAX_GANG_VEHICLES; v++)
    {
        if(FamilyVehicleInfo[f][v][fvId] == vehicleid)
        {
            return v;
        }
    }
    return -1;
}

OnPlayerChangeWeapon(playerid, newweapon)
{
	if(pTazer{playerid} == 1) SetPlayerArmedWeapon(playerid,23);

 	if(GetPVarInt(playerid, "IsInArena") >= 0)
	{
	    new a = GetPVarInt(playerid, "IsInArena");
	    if(PaintBallArena[a][pbGameType] == 3)
	    {
	        if(PaintBallArena[a][pbFlagNoWeapons] == 1)
	        {
	        	if(GetPVarInt(playerid, "AOSlotPaintballFlag") != -1)
	        	{
					SetPlayerArmedWeapon(playerid, 0);
	        	}
			}
	    }
	}
	if(PlayerInfo[playerid][pAdmin] < 4)
	{
		if(GetPVarInt(playerid, "EventToken") != 0) return 1;
		if(GetPlayerState(playerid) == PLAYER_STATE_NONE || GetPlayerState(playerid) == PLAYER_STATE_DRIVER || GetPlayerState(playerid) == PLAYER_STATE_WASTED || GetPlayerState(playerid) == PLAYER_STATE_SPAWNED || GetPlayerState(playerid) == PLAYER_STATE_SPECTATING) return 1;

		if( PlayerInfo[playerid][pGuns][1] != 2 && GetPlayerWeapon( playerid ) == 2)
		{
		    // Don't really care about golf club hacking do we?
			//ExecuteHackerAction( playerid, newweapon );
		}
		else if( PlayerInfo[playerid][pGuns][1] != 3 && GetPlayerWeapon( playerid ) == 3)
		{
			ExecuteHackerAction( playerid, newweapon );
		}
		else if( PlayerInfo[playerid][pGuns][1] != 4 && GetPlayerWeapon( playerid ) == 4)
		{
		    if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pMember] != 8)
		    {
			    new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
	            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				ABroadCast( COLOR_LIGHTRED, String, 2 );
				SendClientMessage(playerid, COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
                new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
			ExecuteHackerAction( playerid, newweapon );
		}
		else if( PlayerInfo[playerid][pGuns][1] != 5 && GetPlayerWeapon( playerid ) == 5)
		{
			ExecuteHackerAction( playerid, newweapon );
		}
        else if( PlayerInfo[playerid][pGuns][1] != 6 && GetPlayerWeapon( playerid ) == 6)
		{
			ExecuteHackerAction( playerid, newweapon );
		}
		else if( PlayerInfo[playerid][pGuns][1] != 7 && GetPlayerWeapon( playerid ) == 7)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][1] != 8 && GetPlayerWeapon( playerid ) == 8)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][1] != 9 && GetPlayerWeapon( playerid ) == 9)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
		    {
			    new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
	            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
			ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][2] != 22 && GetPlayerWeapon( playerid ) == 22)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
		    {
			    new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
	            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][2] != 23 && GetPlayerWeapon( playerid ) == 23)
        {
            if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5) {}
            else
            {
            	if(PlayerInfo[playerid][pConnectHours] < 2)
			    {
				    new WeaponName[32];
					GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
					new String[128];
		            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
					SendClientMessageToAllEx( COLOR_LIGHTRED, String );
					SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
					//RemovePlayerWeapon(playerid, weaponid);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", String);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
					TotalAutoBan++;
				}
            	ExecuteHackerAction( playerid, newweapon );
            }
        }
        else if( PlayerInfo[playerid][pGuns][2] != 24 && GetPlayerWeapon( playerid ) == 24)
        {
            if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5) {}
            else
            {
                if(PlayerInfo[playerid][pConnectHours] < 2)
			    {
				    new WeaponName[32];
					GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
					new String[128];
		            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
					SendClientMessageToAllEx( COLOR_LIGHTRED, String );
					SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
					//RemovePlayerWeapon(playerid, weaponid);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", String);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
					TotalAutoBan++;
				}
            	ExecuteHackerAction( playerid, newweapon );
            }
        }
        else if( PlayerInfo[playerid][pGuns][3] != 25 && GetPlayerWeapon( playerid ) == 25)
        {
            if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5) {}
            else
            {
                if(PlayerInfo[playerid][pConnectHours] < 2)
			    {
				    new WeaponName[32];
					GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
					new String[128];
		            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
					SendClientMessageToAllEx( COLOR_LIGHTRED, String );
					SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
					//RemovePlayerWeapon(playerid, weaponid);
					PlayerInfo[playerid][pBanned] = 3;
					new playerip[32];
					GetPlayerIp(playerid, playerip, sizeof(playerip));
					format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
					PlayerInfo[playerid][pBanned] = 3;
					Log("logs/ban.log", String);
					new ip[32];
					GetPlayerIp(playerid,ip,sizeof(ip));
					AddBan(ip);
					Kick(playerid);
					//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
					TotalAutoBan++;
				}
            	ExecuteHackerAction( playerid, newweapon );
            }
        }
        else if( PlayerInfo[playerid][pGuns][3] != 26 && GetPlayerWeapon( playerid ) == 26)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][3] != 27 && GetPlayerWeapon( playerid ) == 27)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][4] != 28 && GetPlayerWeapon( playerid ) == 28)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
                new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][4] != 29 && GetPlayerWeapon( playerid ) == 29)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][5] != 30 && GetPlayerWeapon( playerid ) == 30)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][4] != 32 && GetPlayerWeapon( playerid ) == 32)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][5] != 31 && GetPlayerWeapon( playerid ) == 31)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][6] != 33 && GetPlayerWeapon( playerid ) == 33)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][6] != 34 && GetPlayerWeapon( playerid ) == 34)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][7] != 35 && GetPlayerWeapon( playerid ) == 35)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][7] != 36 && GetPlayerWeapon( playerid ) == 36)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
            new String[128];
			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][7] != 37 && GetPlayerWeapon( playerid ) == 37)
        {
			new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][7] != 38 && GetPlayerWeapon( playerid ) == 38)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
            new String[128];
			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][8] != 16 && GetPlayerWeapon( playerid ) == 16)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][8] != 17 && GetPlayerWeapon( playerid ) == 17)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][8] != 18 && GetPlayerWeapon( playerid ) == 18)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][8] != 39 && GetPlayerWeapon( playerid ) == 39)
        {
            new WeaponName[32];
			GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
			new String[128];
            format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
			SendClientMessageToAllEx( COLOR_LIGHTRED, String );
			SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
			//RemovePlayerWeapon(playerid, weaponid);
			PlayerInfo[playerid][pBanned] = 3;
			new playerip[32];
			GetPlayerIp(playerid, playerip, sizeof(playerip));
			format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
			PlayerInfo[playerid][pBanned] = 3;
			Log("logs/ban.log", String);
			new ip[32];
			GetPlayerIp(playerid,ip,sizeof(ip));
			AddBan(ip);
			Kick(playerid);
			//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
			TotalAutoBan++;
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][9] != 41 && GetPlayerWeapon( playerid ) == 41)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][9] != 42 && GetPlayerWeapon( playerid ) == 42)
        {
            if(PlayerInfo[playerid][pConnectHours] < 2)
    		{
		    	new WeaponName[32];
				GetWeaponName(newweapon, WeaponName, sizeof(WeaponName));
				new String[128];
    			format( String, sizeof( String ), "AdmCmd: %s has been banned, reason: Weapon hacking (%s).", GetPlayerNameEx(playerid), WeaponName );
				SendClientMessageToAllEx( COLOR_LIGHTRED, String );
				SetPVarInt(playerid, "_HACK_WARNINGS", 0 );
				//RemovePlayerWeapon(playerid, weaponid);
				PlayerInfo[playerid][pBanned] = 3;
				new playerip[32];
				GetPlayerIp(playerid, playerip, sizeof(playerip));
				format( String, sizeof( String ), "AdmCmd: %s (IP:%s) was banned, reason: Weapon hacking (%s)", GetPlayerNameEx(playerid), playerip, WeaponName);
				PlayerInfo[playerid][pBanned] = 3;
				Log("logs/ban.log", String);
				new ip[32];
				GetPlayerIp(playerid,ip,sizeof(ip));
				AddBan(ip);
				Kick(playerid);
				//MySQLBan(GetPlayerSQLId(playerid),ip,"Weapon Hacking",-1);
				TotalAutoBan++;
			}
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][9] != 43 && GetPlayerWeapon( playerid ) == 43)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][10] != 11 && GetPlayerWeapon( playerid ) == 11)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][10] != 12 && GetPlayerWeapon( playerid ) == 12)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][10] != 13 && GetPlayerWeapon( playerid ) == 13)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][10] != 14 && GetPlayerWeapon( playerid ) == 14)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][10] != 15 && GetPlayerWeapon( playerid ) == 15)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][11] != 44 && GetPlayerWeapon( playerid ) == 44)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][11] != 45 && GetPlayerWeapon( playerid ) == 45)
        {
            ExecuteHackerAction( playerid, newweapon );
        }
        else if( PlayerInfo[playerid][pGuns][11] != 46 && GetPlayerWeapon( playerid ) == 46)
        {
            PlayerInfo[playerid][pGuns][11] = 46;
        }
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new gun,tmp;
	 	GetPlayerWeaponData(playerid,4,gun,tmp);
	  	#pragma unused tmp
	   	if(gun)SetPlayerArmedWeapon(playerid,gun);
	   	else SetPlayerArmedWeapon(playerid,0);
	}
	return 1;
}

VehicleLightSwitch(playerid)
{
	new string[128];
	new vid = GetPlayerVehicleID(playerid);
	if(vid == INVALID_VEHICLE_ID)
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Invalid Vehicle ID");
		return 1;
	}

	if(Lamp[vid] == 1)
 	{
		 DestroyObject(light[vid]);
		 Lamp[vid] = 0;
		 format(string, sizeof(string), "* %s removes the police light from their dashboard.", GetPlayerNameEx(playerid));
		 ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		 return 1;
	}
	if(Lamp[vid] == 0)
 	{
		for(new i=0; i<sizeof(Offsets); i++)
	 	{
			 if(Offsets[i][UCModelID] == GetVehicleModel(vid))
			 {
				 light[vid] = CreateObject(18646,Offsets[i][UCX], Offsets[i][UCY], Offsets[i][UCZ], 0.0, 0.0, 96.0);
				 AttachObjectToVehicle(light[vid], vid, Offsets[i][UCX], Offsets[i][UCY], Offsets[i][UCZ], 0.0, 0.0, 0.0);
				 Lamp[vid] = 1;
				 format(string, sizeof(string), "* %s places a police light on their dashboard.", GetPlayerNameEx(playerid));
		 		 ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			 }
		}
		return 1;
	}
	return 1;
}

IsNumeric(szInput[]) {

	new
		iChar,
		i = 0;

	while ((iChar = szInput[i++])) if (!('0' <= iChar <= '9')) return 0;
	return 1;
}

ReturnUser(text[]) {

	new
		strPos,
		returnID = 0,
		bool: isnum = true;

	while(text[strPos]) {
		if(isnum) {
			if ('0' <= text[strPos] <= '9') returnID = (returnID * 10) + (text[strPos] - '0');
			else isnum = false;
		}
		strPos++;
	}
	if (isnum) {
		if(IsPlayerConnected(returnID)) return returnID;
	}
	else {

		new
			sz_playerName[MAX_PLAYER_NAME];

		foreach(new i: Player) {
			GetPlayerName(i, sz_playerName, MAX_PLAYER_NAME);
			if(!strcmp(sz_playerName, text, true, strPos)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

MainMenuUpdateForPlayer(playerid)
{
	new string[156];

	if(InsideMainMenu{playerid} == 1 || InsideTut{playerid} == 1)
	{
		format(string, sizeof(string), "~y~MOTD~w~: %s", GlobalMOTD);
		TextDrawSetString(MainMenuTxtdraw[0], string);
		if(DoubleXP) {
			format(string, sizeof(string), "~g~Double XP is active");
			TextDrawSetString(MainMenuTxtdraw[1], string);
		}
		if(!DoubleXP) {
			format(string, sizeof(string), "~r~Double XP is disabled");
			TextDrawSetString(MainMenuTxtdraw[1], string);
		}
		if(iRewardPlay) {
			format(string, sizeof(string), "~g~Reward Play is active");
			TextDrawSetString(MainMenuTxtdraw[4], string);
		}
		if(!iRewardPlay) {
			format(string, sizeof(string), "~r~Reward Play is disabled");
			TextDrawSetString(MainMenuTxtdraw[4], string);
		}
		format(string, sizeof(string), "%s", AutoMessages[random(sizeof(AutoMessages))]);
		TextDrawSetString(MainMenuTxtdraw[7], string);
		format(string, sizeof(string), "Logins: ~y~%s~w~ | Connections: ~y~%s~w~ | Registrations: ~y~%s~w~ | Peak Players: ~y~%d (%d/%d/%d)~w~", FormatMoney(TotalLogin), FormatMoney(TotalConnect), FormatMoney(TotalRegister), MaxPlayersConnected, MPDay,MPMonth,MPYear);
		TextDrawSetString(MainMenuTxtdraw[8], string);
	}
}

stock str_replace(sSearch[], sReplace[], const sSubject[], &iCount = 0)
{
	new
		iLengthTarget = strlen(sSearch),
		iLengthReplace = strlen(sReplace),
		iLengthSource = strlen(sSubject),
		iItterations = (iLengthSource - iLengthTarget) + 1;

	new
		sTemp[128],
		sReturn[128];

	strcat(sReturn, sSubject, 256);
	iCount = 0;

	for(new iIndex; iIndex < iItterations; ++iIndex)
	{
		strmid(sTemp, sReturn, iIndex, (iIndex + iLengthTarget), (iLengthTarget + 1));

		if(!strcmp(sTemp, sSearch, false))
		{
			strdel(sReturn, iIndex, (iIndex + iLengthTarget));
			strins(sReturn, sReplace, iIndex, iLengthReplace);

			iIndex += iLengthTarget;
			iCount++;
		}
	}

	return sReturn;
}

/* Delay Timers */

// Timer Name: SkinDelay(playerid)
timer SkinDelay[1000, i](playerid)
{
	SetPlayerSkin(playerid, PlayerInfo[playerid][pModel]);

	// Attach Storage Objects
	for(new i = 0; i < 3; i++)
	{
		if(StorageInfo[playerid][i][sAttached] == 1)
		{
			switch(i)
			{
				case 0: // Bag
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
					SetPlayerAttachedObject(playerid, 9, 2919, 5, 0.25, 0, 0, 0, 270, 0, 0.2, 0.2, 0.2);
				}
				case 1: // Backpack
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
					SetPlayerAttachedObject(playerid, 9, 371, 1, 0.1, -0.1, 0, 0, 90, 0, 1, 1, 1);
				}
				case 2: // Briefcase
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 9)) RemovePlayerAttachedObject(playerid, 9);
					SetPlayerAttachedObject(playerid, 9, 1210, 5, 0.3, 0.0, 0.0, 0.0, 270.0, 180.0, 1, 1, 1);
				}
			}
		}
	}
	return 1;
}

// Timer Name: NOPCheck(playerid)
timer NOPCheck[5000, i](playerid)
{
	if(GetPlayerState(playerid) != 2) NOPTrigger[playerid] = 0;
	new newcar = GetPlayerVehicleID(playerid);
	if(PlayerInfo[playerid][pAdmin] > 1 || GetPlayerState(playerid) != 2) return 1;
    else if(IsAnDOCCar(newcar) && PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] != 11) ExecuteNOPAction(playerid);
    else if(IsACopCar(newcar) && PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1) ExecuteNOPAction(playerid);
    else if(IsAPlane(newcar) && (PlayerInfo[playerid][pFlyLic] != 1)) ExecuteNOPAction(playerid);
    else if(IsAFBICar(newcar) && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pLeader] != 2) ExecuteNOPAction(playerid);
    else if(IsAnNGCar(newcar) && PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] !=11) ExecuteNOPAction(playerid);
    else if(IsAnNGAIRCar(newcar) && PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] !=11) ExecuteNOPAction(playerid);
    else if(IsAnSFPDCar(newcar) && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 3) ExecuteNOPAction(playerid);
    else if(IsAnSASDCar(newcar) && PlayerInfo[playerid][pMember] != 7 && PlayerInfo[playerid][pLeader] != 7) ExecuteNOPAction(playerid);
    //else if(IsAPizzaCar(newcar) && PlayerInfo[playerid][pJob] != 21 && PlayerInfo[playerid][pJob2] != 21) ExecuteNOPAction(playerid);
    else if(IsAnAmbulance(newcar) && PlayerInfo[playerid][pMember] != 4 && PlayerInfo[playerid][pLeader] != 4) ExecuteNOPAction(playerid);
    else if(IsVIPcar(newcar) && PlayerInfo[playerid][pDonateRank] == 0) ExecuteNOPAction(playerid);
    else if(IsATierraARCar(newcar) && PlayerInfo[playerid][pMember] != 12 && PlayerInfo[playerid][pLeader] != 12) ExecuteNOPAction(playerid);
	else if(IsAnOPGVehicles(newcar) && PlayerInfo[playerid][pMember] != 13 && PlayerInfo[playerid][pLeader] != 13) ExecuteNOPAction(playerid);
    else if(IsAnNGARMCar(newcar) && PlayerInfo[playerid][pMember] != 11 && PlayerInfo[playerid][pLeader] !=11) ExecuteNOPAction(playerid);
	else if(IsASaPaCar(newcar) && PlayerInfo[playerid][pMember] != 17 && PlayerInfo[playerid][pLeader] !=17) ExecuteNOPAction(playerid);
	else if(IsASaPaAirCar(newcar) && PlayerInfo[playerid][pMember] != 17 && PlayerInfo[playerid][pLeader] !=17) ExecuteNOPAction(playerid);
	return 1;
}

/* Repeating Timers */

// Timer Name: AFKUpdate()
// TickRate: 10 Secs.
task AFKUpdate[10000]()
{
	if(Iter_Count(Player) > MAX_PLAYERS - 100)
	{
		foreach(new i: Player)
		{
			if((playerTabbed[i] > 300 || playerAFK[i] > 300) && PlayerInfo[i][pShopTech] < 1 && PlayerInfo[i][pAdmin] < 4)
			{
				Kick(i);
			}
		}
	}
	return 1;
}

// Timer Name: RconUpd()
// TickRate: 5 Minutes.
task RconUpd[300000]()
{
    new randcon = Random(1, 25);
	switch(randcon)
	{
	    case 1:
	    {
	        SendRconCommand("rcon_password jLiwajHdtw617");
	    }
	    case 2:
	    {
	        SendRconCommand("rcon_password Lua671HA81kHakcm");
	    }
	    case 3:
	    {
	        SendRconCommand("rcon_password Ya8yHaoPamQwvs7");
	    }
	    case 4:
	    {
	        SendRconCommand("rcon_password Ia9116Andyqola");
	    }
	    case 5:
	    {
	        SendRconCommand("rcon_password 17MaoTejAzQknR");
	    }
	    case 6:
	    {
	        SendRconCommand("rcon_password Uq4nAl9jsJa9qmLa");
	    }
	    case 7:
	    {
	        SendRconCommand("rcon_password iAuqLam817Aldnv");
	    }
	    case 8:
	    {
	        SendRconCommand("rcon_password 01LaMsnUqYtsbn");
	    }
	    case 9:
	    {
	        SendRconCommand("rcon_password 456yhgbnkdlikjq");
	    }
	    case 10:
	    {
	        SendRconCommand("rcon_password Ihqy156NAjlwkHa");
	    }
	    case 11:
	    {
	        SendRconCommand("rcon_password 81jblGQlamsqihqJB");
	    }
	    case 12:
	    {
	        SendRconCommand("rcon_password 1897whljkanldowu72y2enwdlh29");
	    }
	    case 13:
	    {
	        SendRconCommand("rcon_password 178yhfnlaiu81asdwfe");
	    }
	    case 14:
	    {
	        SendRconCommand("rcon_password 1289yhnshhlaj71");
	    }
	    case 15:
	    {
	        SendRconCommand("rcon_password 187618okuys71n");
	    }
	    case 16:
	    {
	        SendRconCommand("rcon_password 2nopjf78yw2md");
	    }
	    case 17:
	    {
	        SendRconCommand("rcon_password naysquqliwuqe8171");
	    }
	    case 18:
	    {
	        SendRconCommand("rcon_password wpqksjncbcswuiu1");
	    }
	    case 19:
	    {
	        SendRconCommand("rcon_password 1082bkjdnwNjakl");
	    }
	    case 20:
	    {
	        SendRconCommand("rcon_password 71oAOqinsqcbm");
	    }
	    case 21:
	    {
	        SendRconCommand("rcon_password wyqoakf71902dj");
	    }
	    case 22:
	    {
	        SendRconCommand("rcon_password 729dbqjBajnkw");
	    }
	    case 23:
	    {
	        SendRconCommand("rcon_password 10smwywoAIajdw");
	    }
	    case 24:
	    {
	        SendRconCommand("rcon_password 14ghbnjwlwajhbe");
	    }
	    case 25:
	    {
	        SendRconCommand("rcon_password 6719ijdhgwhdwlakd");
	    }
	}

}



// Timer Name: SyncUp()
// TickRate: 1 Minute.
task SyncUp[60000]()
{
	static
		string[128];

	SyncTime();
	SyncMinTime();
	LoadDragonBorn();

	foreach(new i: Player)
	{
		SetPlayerScore(i, PlayerInfo[i][pLevel]);
	   	if(PlayerInfo[i][pProbationTime] > 0 && !PlayerInfo[i][pBeingSentenced])
	   	{
	       	PlayerInfo[i][pProbationTime]--;
	   	}
	   	if(PlayerInfo[i][pBeingSentenced] > 1) {
			if(--PlayerInfo[i][pBeingSentenced] == 1)
			{
				TogglePlayerControllable(i, true);
				DeletePVar(i, "IsFrozen");
				//Frozen[i] = 0;
				SetPlayerPosEx(i, 1415.5137,-1702.2272,13.5395);
				SetPlayerFacingAngle(i, 240.0264);
				SendClientMessageEx(i, COLOR_WHITE, "No Judge has attended your pending trial, you are free!");
				PlayerInfo[i][pBeingSentenced] = 0;
			}
		}
		if(IsValidDynamicObject(PlayerInfo[i][pWeedObject]) && PlayerInfo[i][pWeedGrowth] < 45) switch(PlayerInfo[i][pDrugsSkill]) {
			case 0 .. 50: PlayerInfo[i][pWeedGrowth] += 1;
			case 51 .. 100: PlayerInfo[i][pWeedGrowth] += 2;
			case 101 .. 200: PlayerInfo[i][pWeedGrowth] += 3;
			case 201 .. 400: PlayerInfo[i][pWeedGrowth] += 4;
			default: PlayerInfo[i][pWeedGrowth] += 5;
		}
		switch(GetPVarInt(i, "STD")) {
			case 1: {
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 5.0);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "* Lost 4 health due to STD.");
			}
			case 2: {
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 12.0);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "* Lost 8 health due to STD.");
			}
			case 3: {
				new Float: health;
				GetPlayerHealth(i, health);
				SetPlayerHealth(i, health - 20.0);
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "* Lost 12 health due to STD.");
			}
		}
		if(GetPlayerCash(i) < 0) {
			if(!GetPVarType(i, "debtMsg")) {
				format(string, sizeof(string), "You're now in debt; you must repay the debt of $%d. If not, you will be arrested...", GetPlayerCash(i));
				SendClientMessageEx(i, COLOR_LIGHTRED, string);
				SetPVarInt(i, "debtMsg", 1);
			}
		}
		else DeletePVar(i, "debtMsg");
	}
}

stock SaveAllAccountsUpdate()
{
	foreach(new i: Player) if(gPlayerLogged{i}) {
	    GetPlayerIp(i, PlayerInfo[i][pIP], 16);
		SetPVarInt(i, "AccountSaving", 1);
		OnPlayerStatsUpdate(i);
		break; // We only need to save one player at a time.
	}
}

// Timer Name: SaveAccountsUpdate()
// TickRate: 5 Minutes.
task SaveAccountsUpdate[1680000]()
{
	foreach(new i: Player) if(gPlayerLogged{i}) {
		SetPVarInt(i, "AccountSaving", 1);
		OnPlayerStatsUpdate(i);
		break; // We only need to save one player at a time.
	}
}

// Timer Name: ProductionUpdate()
// TickRate: 5 Minutes.
task ProductionUpdate[300000]()
{
	// Dump Accounts to /accdump/ for Crash Recovery.
	//g_mysql_dumpaccounts();

	AdvisorMessage++;
	foreach(new i: Player)
	{
		if(GetPVarInt(i, "ManualSave")) DeletePVar(i, "ManualSave");

		if(AdvisorMessage == 3 && Advisors > 0 && PlayerInfo[i][pLevel] < 4)
		{
			SendClientMessageEx(i, COLOR_LIGHTBLUE, "Need help? The Community Advisors are here to help you. (/requesthelp to get help)");
		}
		if(PlayerInfo[i][pConnectHours] < 2) {
			SendClientMessageEx(i, COLOR_LIGHTRED, "Due to an increase in new playing accounts being created for Death Matching, weapons for new players are restricted for the first two hours of game play.");
		}

		if(PlayerInfo[i][pGiftTime] > 0) {
			PlayerInfo[i][pGiftTime] -= 5;
		}
		if(PlayerInfo[i][pFishes] >= 5) {
			if(FishCount[i] >= 3) PlayerInfo[i][pFishes] = 0;
			else ++FishCount[i];
		}
		if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; GameTextForPlayer(i, "~p~Drunk effect~n~~w~Gone", 3500, 1); }
	}
	if(AdvisorMessage == 3) {
		AdvisorMessage = 0;
	}
	if(VIPGifts == 1) {
		if(VIPGiftsTimeLeft > 0)
		{
			VIPGiftsTimeLeft -= 5;
			if(VIPGiftsTimeLeft > 0)
			{
				new string[128];
				format(string, sizeof(string), "%s would like for you to come to Club VIP for free gifts and great times [%d minutes remains]", VIPGiftsName, VIPGiftsTimeLeft);
				SendVIPMessage(COLOR_LIGHTGREEN, string);
			}
		}
		else
		{
			VIPGiftsTimeLeft = 0;
			VIPGifts = 0;
			new string[128];
			format(string, sizeof(string), "Club VIP is no longer giving away free gifts. Thanks for coming!", VIPGiftsName, VIPGiftsTimeLeft);
			SendVIPMessage(COLOR_LIGHTGREEN, string);
		}
	}
	SaveFamilies();
}


// Timer Name: playerTabbedLoop()
// TickRate: 1 secs.
task playerTabbedLoop[1000]() {

	new
		iTick = gettime() - 1;

	foreach(new x: Player) if(1 <= GetPlayerState(x) <= 3) {
		if(playerTabbed[x] >= 1) {
			if(++playerTabbed[x] >= 1800 && PlayerInfo[x][pAdmin] < 2) {
			    SendClientMessageEx(x, COLOR_WHITE, "You have been automatically kicked for alt-tabbing.");
    			return Kick(x);
			}
		}
	    else if(++playerSeconds[x] < iTick && playerTabbed[x] == 0) {
	        playerTabbed[x] = 1;
	    }
		else if((IsPlayerInRangeOfPoint(x, 2.0, PlayerPos[x][0], PlayerPos[x][1], PlayerPos[x][2]) || InsidePlane[x] != INVALID_PLAYER_ID) && ++playerLastTyped[x] >= 10) {
			if(++playerAFK[x] >= 1800 && PlayerInfo[x][pAdmin] < 2) {
			    SendClientMessageEx(x, COLOR_WHITE, "You have been automatically kicked for idling.");
				return Kick(x);
			}
		}
		else playerAFK[x] = 0;
		GetPlayerPos(x, PlayerPos[x][0], PlayerPos[x][1], PlayerPos[x][2]);
	}
	return 1;
}

// Timer Name: MoneyUpdate()
// TickRate: 1 secs.
task MoneyUpdate[1000]()
{
	new
		iTempVar;

	if(iAdverTimer >= 1)
		--iAdverTimer;

	new minuitet=minuite;
	gettime(hour,minuite,second);
	FixHour(hour);
	hour = shifthour;
	if(minuitet != minuite)
	{
		new tstring[7];
		if(minuite < 10)
		{
			format(tstring, sizeof(tstring), "%d:0%d", hour, minuite);
		}
		else
		{
			format(tstring, sizeof(tstring), "%d:%d", hour, minuite);
		}
		TextDrawSetString(WristWatch, tstring);
	}
	if(EventKernel[EventStatus] >= 2 && EventKernel[EventTime] > 0)
	{
    	if(--EventKernel[EventTime] <= 0) {
    	    foreach(new i: Player)
			{
    			if( GetPVarInt( i, "EventToken" ) == 1 )
				{
				    if(EventKernel[EventType] == 3) {
						DisablePlayerCheckpoint(i);
					} else {
						ResetPlayerWeapons( i );
						SetPlayerWeapons(i);
						SetPlayerToTeamColor(i);
						SetPlayerSkin(i, PlayerInfo[i][pModel]);
						SetPlayerPosEx(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3]);
						SetPlayerVirtualWorld(i, EventLastVW[i]);
						SetPlayerFacingAngle(i, EventFloats[i][0]);
						SetPlayerInterior(i,EventLastInt[i]);
						SetPlayerHealth(i, EventFloats[i][4]);
						SetPlayerArmour(i, EventFloats[i][5]);
						Player_LeaveEventPrep(i,EventFloats[i][1],EventFloats[i][2],EventFloats[i][3], FREEZE_TIME);
						for(new d = 0; d < 6; d++)
						{
							EventFloats[i][d] = 0.0;
						}
						EventLastVW[i] = 0;
						EventLastInt[i] = 0;
					}
					DeletePVar(i, "EventToken");
					SendClientMessageEx( i, COLOR_YELLOW, "You have been removed from the event as it has been terminated by the timer." );
				}
			}

			EventKernel[ EventPositionX ] = 0;
			EventKernel[ EventPositionY ] = 0;
			EventKernel[ EventPositionZ ] = 0;
			EventKernel[ EventTeamPosX1 ] = 0;
			EventKernel[ EventTeamPosY1 ] = 0;
			EventKernel[ EventTeamPosZ1 ] = 0;
			EventKernel[ EventTeamPosX2 ] = 0;
			EventKernel[ EventTeamPosY2 ] = 0;
			EventKernel[ EventTeamPosZ2 ] = 0;
			EventKernel[ EventStatus ] = 0;
			EventKernel[ EventType ] = 0;
			EventKernel[ EventHealth ] = 0;
			EventKernel[ EventLimit ] = 0;
			EventKernel[ EventPlayers ] = 0;
			EventKernel[ EventWeapons ][0] = 0;
			EventKernel[ EventWeapons ][1] = 0;
			EventKernel[ EventWeapons ][2] = 0;
			EventKernel[ EventWeapons ][3] = 0;
			EventKernel[ EventWeapons ][4] = 0;
			for(new i = 0; i < 20; i++)
			{
			    EventRCPU[i] = 0;
			    EventRCPX[i] = 0.0;
			    EventRCPY[i] = 0.0;
			    EventRCPZ[i] = 0.0;
			    EventRCPS[i] = 0.0;
			    EventRCPT[i] = 0;
			}
			EventKernel[EventCreator] = INVALID_PLAYER_ID;
			EventKernel[VipOnly] = 0;
			EventKernel[EventJoinStaff] = 0;
			SendClientMessageToAllEx( COLOR_LIGHTBLUE, "* The event has been finished because the time limit has been reached." );
		}
	}
	foreach(new i: Player)
	{
		if(gPlayerLogged{i})
		{
		    if(GetPlayerPing(i) > MAX_PING)
		    {
		        if(playerTabbed[i] == 0)
		        {
					new
						string[89 + MAX_PLAYER_NAME];

		            format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s has just been kicked for %d ping (maximum: "#MAX_PING").", GetPlayerNameEx(i), GetPlayerPing(i));
					ABroadCast(COLOR_YELLOW, string, 2);
		        	SendClientMessageEx(i, COLOR_WHITE, "You have been kicked because your ping is higher than the maximum.");
		        	KickWithMessage(i);
				}
		    }

		    if(PlayerInfo[i][pBuddyInvited] == 1 && --PlayerInfo[i][pTempVIP] <= 0)
			{
				PlayerInfo[i][pTempVIP] = 0;
				PlayerInfo[i][pBuddyInvited] = 0;
				PlayerInfo[i][pDonateRank] = 0;
				SendClientMessageEx(i, COLOR_LIGHTBLUE, "Your temporary VIP subscription has expired.");
				SetPlayerToTeamColor(i);
    		}
			if((iTempVar = GetPVarInt(i, "adT")) != 0) {
				if(--iTempVar <= 0) DeletePVar(i, "adT");
				else SetPVarInt(i, "adT", iTempVar);
			}

			if(PlayerInfo[i][pTriageTime] != 0)
	  		{
				PlayerInfo[i][pTriageTime]--;
    		}
			if(PlayerInfo[i][pTicketTime] != 0)
			{
				PlayerInfo[i][pTicketTime]--;
			}
			if(PlayerInfo[i][pServiceTime] != 0)
			{
			    PlayerInfo[i][pServiceTime]--;
			}
			if(PlayerInfo[i][pCash] != GetPlayerMoney(i))
			{
				ResetPlayerMoney(i);
				GivePlayerMoney(i, PlayerInfo[i][pCash]);
			}
			if(PlayerInfo[i][pGPS] > 0 && GetPVarType(i, "gpsonoff"))
   			{
    			new zone[28];
				GetPlayer2DZone(i, zone, MAX_ZONE_NAME);
				TextDrawSetString(GPS[i], zone);
			}
			if(GetPVarType(i, "Injured")) SetPlayerArmedWeapon(i, 0);
			if(GetPVarType(i, "IsFrozen")) TogglePlayerControllable(i, 0);

			if(IsInSideVIP(i)) { SetPlayerArmedWeapon(i, 0); }
		}
	}
}

// Timer Name: SpecUpdate()
// TickRate: 3 secs.
task SpecUpdate[3000]()
{
	foreach(new i: Player)
	{
	    if(PlayerInfo[i][pAdmin] >= 2)
	    {
		    if(Spectating[i] >= 1)
		    {
				if(Spectate[i] < 553)
				{
					new targetid = Spectate[ i ];
					if( !IsPlayerConnected( targetid ) )
					{
    					SendClientMessageEx( i, COLOR_WHITE, "The player you were spectating has left the server." );
			    		GettingSpectated[Spectate[i]] = INVALID_PLAYER_ID;
			    		Spectating[i] = 0;
						Spectate[i] = INVALID_PLAYER_ID;
						SetPVarInt(i, "SpecOff", 1 );
						TogglePlayerSpectating( i, false );
						SetCameraBehindPlayer(i);

						if(GetPVarType(i, "pWatchdogWatching")) DeletePVar(i, "pWatchdogWatching");
					}
				}
				if(Spectate[i] == 553)
				{
					TogglePlayerControllable(i, 1);
					TogglePlayerSpectating(i, 0);
					DeletePVar(i, "MedicBill");
					SpawnPlayer( i );
					Spectate[i] = INVALID_PLAYER_ID;
					Spectating[i] = 0;
				}
				if(Spectate[i] == 556)
				{
					SetPlayerToTeamColor(i);
					Spectate[i] = INVALID_PLAYER_ID;
				}
			}
		}
	}
}

// Timer Name: TurfWarsUpdate()
// TickRate: 1 secs.
task TurfWarsUpdate[1000]()
{
	for(new i = 0; i < MAX_TURFS; i++)
	{
	    if(TurfWars[i][twActive] == 1)
	    {
	        if(TurfWars[i][twTimeLeft] > 0)
	        {
	            TurfWars[i][twTimeLeft]--;
	        }
	        else
	        {
	            if(TurfWars[i][twAttemptId] != -1)
	            {
					CaptureTurfWarsZone(TurfWars[i][twAttemptId],i);
	            }
				TurfWars[i][twActive] = 0;
				foreach(new x: Player)
				{
	                if(turfWarsMiniMap[x] == 1)
	    			{
	    			    turfWarsMiniMap[x] = 0;
	   					SetPlayerToTeamColor(x);
	   				}
				}
	        }
	    }
	}
}

// Timer Name: SpeedCameraCheck()
// TickRate: 1 second.
task SpeedCameraCheck[500]()
{
	foreach(Player, i) {
	    if(PlayerInfo[i][pReceivedSpeedTicket] >= 1) {
	    	PlayerInfo[i][pReceivedSpeedTicket] --;
		}
	    for(new c=0; c<MAX_SPEEDCAMS; c++) {
	    	if(IsPlayerInRangeOfPoint(i, 15, SpeedCams[c][SCamX], SpeedCams[c][SCamY], SpeedCams[c][SCamZ]) && GetPlayerState(i) == PLAYER_STATE_DRIVER) {
	    	    new veh = GetPlayerVehicleID(i);
	    	    new Float:Speed = GetVehicleSpeed(veh, 0);
				if(floatround(Speed/1.609) > SpeedCams[c][CamSpeed]) {
				    if(!IsAGovernmentFaction(i) && PlayerInfo[i][pReceivedSpeedTicket] == 0) {
						new string[128];
						new SpeedPrice = (floatround(Speed/1.609)-SpeedCams[c][CamSpeed])+800;
						format(string,sizeof(string),"[SPEED CAMERA] You were caught doing %dMPH in a %dMPH zone. You were given a speeding ticket for $%d.",floatround(Speed/1.609),SpeedCams[c][CamSpeed],SpeedPrice);
						SendClientMessageEx(i,COLOR_YELLOW,string);

						if(GetPlayerCash(i) < SpeedPrice){
							PlayerInfo[i][pAccount] = PlayerInfo[i][pAccount] - SpeedPrice;
						}
						else if(GetPlayerCash(i) >= SpeedPrice)
						{
							GivePlayerCash(i,  -SpeedPrice);
						}

						PlayerInfo[i][pReceivedSpeedTicket] =10;
					}
				}
	    	}
		}
	}
	return 1;
}

// Timer Name: PaintballArenaUpdate()
// TickRate: 1 secs.
task PaintballArenaUpdate[1000]()
{
	for(new i = 0; i < MAX_ARENAS; i++)
	{
	    if(PaintBallArena[i][pbActive] == 1)
	    {
	        if(PaintBallArena[i][pbGameType] == 3)
	        {
	            if(PaintBallArena[i][pbFlagRedActive] == 1)
	            {
	                if(PaintBallArena[i][pbFlagRedActiveTime] <= 0)
	                {
	                    ResetFlagPaintballArena(i,1);
	                    PaintBallArena[i][pbFlagRedActiveTime] = 0;
	                }
	                PaintBallArena[i][pbFlagRedActiveTime]--;
	            }
	            if(PaintBallArena[i][pbFlagBlueActive] == 1)
	            {
	                if(PaintBallArena[i][pbFlagBlueActiveTime] <= 0)
	                {
	                    ResetFlagPaintballArena(i,2);
	                    PaintBallArena[i][pbFlagBlueActiveTime] = 0;
	                }
	                PaintBallArena[i][pbFlagBlueActiveTime]--;
	            }
	        }

	        // Inactive Players Check
	        if(PaintBallArena[i][pbPlayers] > 1)
	        {
				PaintBallArena[i][pbTimeLeft]--;
			}

			if(PaintBallArena[i][pbTimeLeft] == 300-1)
			{
			    SendPaintballArenaMessage(i, COLOR_YELLOW, "Five minutes left in this round!");
				//SendPaintballArenaSound(i, 1057);
				////SendPaintballArenaAudio(i, 5, 100);
			}

			if(PaintBallArena[i][pbTimeLeft] == 180)
			{
				SendPaintballArenaMessage(i, COLOR_YELLOW, "Three minutes left in this round!");
				//SendPaintballArenaSound(i, 1057);
				////SendPaintballArenaAudio(i, 4, 100);
			}
			if(PaintBallArena[i][pbTimeLeft] == 120)
			{
				SendPaintballArenaMessage(i, COLOR_YELLOW, "Two minutes left in this round!");
				//SendPaintballArenaSound(i, 1057);
				//SendPaintballArenaAudio(i, 3, 100);
			}
			if(PaintBallArena[i][pbTimeLeft] == 60)
			{
				SendPaintballArenaMessage(i, COLOR_YELLOW, "One minute left in this round!");
				//SendPaintballArenaSound(i, 1057);
				//SendPaintballArenaAudio(i, 2, 100);
			}
			if(PaintBallArena[i][pbTimeLeft] == 30)
			{
			    SendPaintballArenaMessage(i, COLOR_YELLOW, "30 seconds left in this round!");
			    //SendPaintballArenaSound(i, 1057);
			    //SendPaintballArenaAudio(i, 6, 100);
			}
			if(PaintBallArena[i][pbTimeLeft] == 12)
			{
			    SendPaintballArenaMessage(i, COLOR_RED, "Sudden death, 5 seconds left!");
			    //SendPaintballArenaSound(i, 1057);
			    //SendPaintballArenaAudio(i, 37, 100);
			}
			if(PaintBallArena[i][pbTimeLeft] == 7)
			{
			    SendPaintballArenaMessage(i, COLOR_YELLOW, "Round Over!");
			    //SendPaintballArenaSound(i, 1057);
			    //SendPaintballArenaAudio(i, 20, 100);
			}
			if(PaintBallArena[i][pbTimeLeft] >= 1 && PaintBallArena[i][pbTimeLeft] <= 7)
			{
			    foreach(new p: Player)
			    {
					new arenaid = GetPVarInt(p, "IsInArena");
					if(arenaid == i)
					{
						TogglePlayerControllable(p, 0);
						PaintballScoreboard(p, arenaid);
					}
			    }
			    //SendPaintballArenaSound(i, 1057);
			}
			if(PaintBallArena[i][pbTimeLeft] <= 0)
			{
			    new
					winnerid = SortWinnerPaintballScores(i),
					string[60 + MAX_PLAYER_NAME];

			    format(string, sizeof(string), "%s has won $%d from the Paintball Match, thanks for playing!",GetPlayerNameEx(winnerid),PaintBallArena[i][pbMoneyPool]);
			    GivePlayerCash(winnerid,PaintBallArena[i][pbMoneyPool]);
			    SendPaintballArenaMessage(i, COLOR_YELLOW, string);
			    foreach(new p: Player)
			    {
			        new arenaid = GetPVarInt(p, "IsInArena");
			        if(arenaid == i)
			        {
			            PaintballScoreboard(p, arenaid);
			        	TogglePlayerControllable(p, 1);
					}
			    }
			    foreach(new p: Player)
			    {
			        new arenaid = GetPVarInt(p, "IsInArena");
			        if(arenaid == i)
			        {
			            LeavePaintballArena(p, arenaid);
					}
			    }
			    ResetPaintballArena(i);
			}
	    }
	}
}

// Login Display / Random Message text (Added by Shane)
// 8 secs beat
task LoginUpdate[8000]()
{
	foreach(new i: Player)
	{
		new string[176];
		if(InsideMainMenu{i} == 1 || InsideTut{i} == 1)
		{
			format(string, sizeof(string), "~y~MOTD~w~: %s", GlobalMOTD);
			TextDrawSetString(MainMenuTxtdraw[0], string);
			if(DoubleXP) {
				format(string, sizeof(string), "~g~Double XP is active");
				TextDrawSetString(MainMenuTxtdraw[1], string);
			}
			if(!DoubleXP) {
				format(string, sizeof(string), "~r~Double XP is disabled");
				TextDrawSetString(MainMenuTxtdraw[1], string);
			}
			if(iRewardPlay) {
				format(string, sizeof(string), "~g~Reward Play is active");
				TextDrawSetString(MainMenuTxtdraw[4], string);
			}
			if(!iRewardPlay) {
				format(string, sizeof(string), "~r~Reward Play is disabled");
				TextDrawSetString(MainMenuTxtdraw[4], string);
			}
			format(string, sizeof(string), "%s", AutoMessages[random(sizeof(AutoMessages))]);
			TextDrawSetString(MainMenuTxtdraw[7], string);
			format(string, sizeof(string), "Logins: ~y~%s~w~ | Connections: ~y~%s~w~ | Registrations: ~y~%s~w~ | Peak Players: ~y~%d (%d/%d/%d)~w~", FormatMoney(TotalLogin), FormatMoney(TotalConnect), FormatMoney(TotalRegister), MaxPlayersConnected, MPDay,MPMonth,MPYear);
			TextDrawSetString(MainMenuTxtdraw[8], string);
			SetPlayerJoinCamera(i);
		}
	}
}

// Timer Name: EMSUpdate()
// TickRate: 5 secs.
task EMSUpdate[5000]()
{
	foreach(new i: Player)
	{
	    if(InsideTut{i} > 0)
	    {
		    if(gettime() - GetPVarInt(i, "pTutTime") > 20)
			{
				GameTextForPlayer(i, "~n~~n~~n~~n~~n~~n~~n~~n~~w~Press ~r~~k~~CONVERSATION_YES~~w~ to continue", 2000, 3);
			}
		}
	    if(GetPVarType(i, "Injured"))
	    {
	        if(GetPVarInt(i, "EMSAttempt") != 0)
			{

				new Float:health;
 				GetPlayerHealth(i,health);
				SetPlayerHealth(i, health-1);
				if(GetPVarInt(i, "EMSAttempt") == -1)
				{
					if(GetPlayerAnimationIndex(i) != 746) ClearAnimations(i), ApplyAnimation(i, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
    				if(!GetPVarType(i, "StreamPrep") && !IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")) && !GetPVarInt(i, "OnStretcher"))
	    			{
	        			SendClientMessageEx(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
					GameTextForPlayer(i, "~r~Injured~n~~y~/accept death ~w~or ~g~/service ems", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 1)
				{
					if(GetPlayerAnimationIndex(i) != 746) ClearAnimations(i), ApplyAnimation(i, "KNIFE", "KILL_Knife_Ped_Die", 4.0, 0, 1, 1, 1, 0, 1);
	    			if(!GetPVarType(i, "StreamPrep") && !IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")) && !GetPVarInt(i, "OnStretcher"))
	    			{
	        			SendClientMessageEx(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
					GameTextForPlayer(i, "~r~Injured~n~~g~Waiting for EMS to Arrive...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 2)
				{
	    			if(!GetPVarType(i, "StreamPrep") && !IsPlayerInRangeOfPoint(i, 3.0, GetPVarFloat(i,"MedicX"), GetPVarFloat(i,"MedicY"), GetPVarFloat(i,"MedicZ")) && !GetPVarInt(i, "OnStretcher"))
	    			{
	        			SendClientMessageEx(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
	    			}
	    			GameTextForPlayer(i, "~g~Rescued~n~~b~Awaiting Treatment...", 5000, 3);
				}
				if(GetPVarInt(i, "EMSAttempt") == 3)
				{
	    			if(IsPlayerInAnyVehicle(i))
	    			{
	        			new ambmodel = GetPlayerVehicleID(i);
	        			if(IsAnAmbulance(ambmodel) || IsATierraESCar(ambmodel) || IsAnNGCar(ambmodel))
	        			{
	    					GameTextForPlayer(i, "~g~Rescued~n~~y~Waiting for EMS to take to Hospital...", 5000, 3);
						}
						else
						{
		    				SendClientMessageEx(i, COLOR_WHITE, "You fell unconscious due to no life support, you were immediately sent to the hospital.");
	        				KillEMSQueue(i);
							SpawnPlayer(i);
						}
					}
					else
					{
		    			SendClientMessageEx(i, COLOR_WHITE, "You fell out of the vehicle, you were immediately sent to the hospital.");
	        			KillEMSQueue(i);
						SpawnPlayer(i);
					}
				}

				GetPlayerHealth(i, health);
				if(health <= 5)
				{
	    			SendClientMessageEx(i, COLOR_WHITE, "You fell unconscious, you were immediately sent to the hospital.");
	    			KillEMSQueue(i);
					SpawnPlayer(i);
				}
	        }
	    }
	}
}

// Timer Name: ServerHeartbeat()
// TickRate: 1 secs.
task ServerHeartbeat[1000]() {
	if(++AdminWarning == 15) {
		for(new z = 0; z < MAX_REPORTS; z++)
		{
			if(Reports[z][BeingUsed] == 1)
			{
				if(Reports[z][ReportPriority] == 1 || Reports[z][ReportPriority] == 2)
				{
					ABroadCast(COLOR_LIGHTRED,"A priority report is pending.", 2, true);
					break;
				}
			}
		}
		AdminWarning = 0;
	}
	if(++PrizeClaim == 15) {
		for(new z = 0; z < MAX_REPORTS; z++)
		{
			if(Reports[z][BeingUsed] == 1)
			{
				if(Reports[z][ReportPriority] == 6)
				{
					ABroadCast(COLOR_LIGHTRED,"A prize claim report is pending.", 2, true);
					break;
				}
			}
		}
		PrizeClaim = 0;
	}
 	new Float:shouthealth;
    static string[128];
	foreach(new i: Player)
	{
	 	/*
		if(GetPVarInt(i, "sgcheck") == 1)
		{
            new Float:x,Float:y,Float:z;
            GetPlayerPos(i, x, y, z);
            if(z > SGcheckPos[i][2])
            {
                //new string[128];
            	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may be using sprunk guard.", GetPlayerNameEx(i));
            	SendClientMessage(GetPVarInt(i,"sgcheckerid"), COLOR_YELLOW, string);
   			}
		}
		*/
	    if(myCoolDown[i] != 0 && useCoolDown == 1) myCoolDown[i] -= 1; //shout cooldown
		for(new e = 0; e < 3; e++) if(shoutEffect[i][e] != 0) shoutEffect[i][e] -= 1; //effect cooldown
		if(shoutEffect[i][1] == 0 && fireEffect[i] >= 0)
		{
			RemovePlayerAttachedObject(i, fireEffect[i]);
			fireEffect[i] = -1;
 		}
		else if(shoutEffect[i][2] == 0 && frostEffect[i] >= 0)
		{
		 	RemovePlayerAttachedObject(i, frostEffect[i]);
			frostEffect[i] = -1;
		}
		if(shoutEffect[i][1] != 0 || shoutEffect[i][2] != 0)
		{
			GetPlayerHealth(i, shouthealth);
			SetPlayerHealth(i, (shouthealth - 5.0));
		}
		if(playerTabbed[i] == 0) {
			switch(PlayerInfo[i][pLevel]) {
				case 0 .. 2: PlayerInfo[i][pPayCheck] += 1;
				case 3 .. 4: PlayerInfo[i][pPayCheck] += 2;
				case 5 .. 6: PlayerInfo[i][pPayCheck] += 3;
				case 7 .. 8: PlayerInfo[i][pPayCheck] += 4;
				case 9 .. 10: PlayerInfo[i][pPayCheck] += 5;
				case 11 .. 12: PlayerInfo[i][pPayCheck] += 6;
				case 13 .. 14: PlayerInfo[i][pPayCheck] += 7;
				case 15 .. 16: PlayerInfo[i][pPayCheck] += 8;
				case 17 .. 18: PlayerInfo[i][pPayCheck] += 9;
				case 19 .. 20: PlayerInfo[i][pPayCheck] += 10;
				default: PlayerInfo[i][pPayCheck] += 11;
			}
			if(++PlayerInfo[i][pConnectSeconds] >= 3600) {
				PayDay(i);
			}
		}
		if(PlayerInfo[i][pJudgeJailType] != 0 && PlayerInfo[i][pJudgeJailTime] > 0 && !PlayerInfo[i][pBeingSentenced]) PlayerInfo[i][pJudgeJailTime]--;
		if(PlayerInfo[i][pJudgeJailTime] <= 0 && PlayerInfo[i][pJudgeJailType] != 0) PlayerInfo[i][pJudgeJailType] = 0;
		if(PlayerInfo[i][pJailTime] > 0 && --PlayerInfo[i][pJailTime] <= 0) {
			if(strfindex(PlayerInfo[i][pPrisonReason], "[IC]", true) != -1 || strfindex(PlayerInfo[i][pPrisonReason], "[ISOLATE]", true) != -1) {
	   			SetPlayerInterior(i, 0);
				PlayerInfo[i][pInt] = 0;
				SetPlayerVirtualWorld(i, 0);
				PlayerInfo[i][pVW] = 0;
				SetPlayerPosEx(i, -2028.5829,-96.5533,35.1641);
			}
			else {
			 	SetPlayerInterior(i, 0);
				PlayerInfo[i][pInt] = 0;
				SetPlayerVirtualWorld(i, 0);
				PlayerInfo[i][pVW] = 0;
	    		SetPlayerPosEx(i, 1544.5059,-1675.5673,13.5585);
			}
			PlayerInfo[i][pJailTime] = 0;
			PhoneOnline[i] = 0;
			SendClientMessageEx(i, COLOR_GRAD1,"   You have paid your debt to society.");
			GameTextForPlayer(i, "~g~Freedom~n~~w~Try to be a better citizen", 5000, 3);
			ClearCrimes(i);
			strcpy(PlayerInfo[i][pPrisonReason], "None", 128);
			SetPlayerToTeamColor(i);
		}

		if(CommandSpamTimes[i] != 0)
		{
			CommandSpamTimes[i]--;
		}
		if(TextSpamTimes[i] != 0)
		{
			TextSpamTimes[i]--;
		}
		if(UsedFind[i] >= 1) --UsedFind[i];
		if(PlayerInfo[i][pMechTime] > 0) PlayerInfo[i][pMechTime]--;
		if(PlayerInfo[i][pLawyerTime] > 0) PlayerInfo[i][pLawyerTime]--;
		if(PlayerInfo[i][pDrugsTime] > 0) PlayerInfo[i][pDrugsTime]--;
		if(PlayerInfo[i][pRMuted] == 2) {
			PlayerInfo[i][pRMutedTime]--;
			if(PlayerInfo[i][pRMutedTime] <= 0) {
				PlayerInfo[i][pRMuted] = 0;
			}
		}
		if(PlayerInfo[i][pVMuted] == 2) {
			PlayerInfo[i][pVMutedTime]--;
			if(PlayerInfo[i][pVMutedTime] <= 0) {
				PlayerInfo[i][pVMuted] = 0;
			}
		}

		if(GetPVarType(i, "hFind"))
		{
		    new Float:X, Float:Y, Float:Z, pID = GetPVarInt(i, "hFind");
		    if(IsPlayerConnected(pID))
		    {
			    GetPlayerPos(pID, X, Y, Z);
			    SetPlayerCheckpoint(i, X, Y, Z, 4.0);
			}
		}

		if(WantLawyer[i] >= 1)
		{
			CallLawyer[i] = 111;
			if(WantLawyer[i] == 1)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Do you want a Lawyer? (Type yes or no)");
			}
			WantLawyer[i] ++;
			if(WantLawyer[i] == 8)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Do you want a Lawyer? (Type yes or no)");
			}
			if(WantLawyer[i] == 15)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "Do you want a Lawyer? (Type yes or no)");
			}
			if(WantLawyer[i] == 20)
			{
				SendClientMessageEx(i, COLOR_LIGHTRED, "There is no Lawyer available to you anymore, Jail Time started.");
				WantLawyer[i] = 0;
				CallLawyer[i] = 0;
			}
		}
		if(PlayerDrunk[i] >= 5)
		{
			PlayerDrunkTime[i] += 1;
			if(PlayerDrunkTime[i] == 8)
			{
				PlayerDrunkTime[i] = 0;

				if(IsPlayerInAnyVehicle(i))
				{
					if(GetPlayerState(i) == 2)
					{
						new Float:angle;
						GetPlayerFacingAngle(i, angle);
						SetVehicleZAngle(GetPlayerVehicleID(i), angle + random(10) - 5);
					}
				}
				else
				{
					ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
				}
			}
		}
		if(PlayerStoned[i] >= 3)
		{
			PlayerStoned[i] += 1;
			SetPlayerDrunkLevel(i, 40000);
			if(PlayerStoned[i] == 50)
			{
				PlayerStoned[i] = 0;
				SetPlayerDrunkLevel(i, 0);
				SendClientMessageEx(i, COLOR_GRAD1, " You are no longer stoned!");
			}
		}
		if(PlayerInfo[i][pSexTime] > 0)
		{
			if(PlayerInfo[i][pSexTime] <= 0)
			{
				PlayerInfo[i][pSexTime] = 0;
			}
			else
			{
				PlayerInfo[i][pSexTime] -= 1;
			}
		}
		if(BoxWaitTime[i] > 0)
		{
			if(BoxWaitTime[i] >= BoxDelay)
			{
				BoxDelay = 0;
				BoxWaitTime[i] = 0;
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~g~Match Started", 5000, 1);
				TogglePlayerControllable(i, 1);
				RoundStarted = 1;
			}
			else
			{
				format(string, sizeof(string), "%d", BoxDelay - BoxWaitTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				BoxWaitTime[i] += 1;
			}
		}
		if(RoundStarted > 0)
		{
			if(PlayerBoxing[i] > 0)
			{
				new trigger = 0;
				new Lost = 0;
				new Float:angle;
				new Float:health;
				GetPlayerHealth(i, health);
				if(health < 12)
				{
					if(i == Boxer1) { Lost = 1; trigger = 1; }
					else if(i == Boxer2) { Lost = 2; trigger = 1; }
				}
				if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
				if(trigger)
				{
					new winner[MAX_PLAYER_NAME];
					new loser[MAX_PLAYER_NAME];
					new titel[MAX_PLAYER_NAME];
					if(Lost == 1)
					{
						if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
						{
							if(IsPlayerInRangeOfPoint(Boxer1,25.0,768.48, -73.66, 1000.57) || IsPlayerInRangeOfPoint(Boxer2,25.0,768.48, -73.66, 1000.57))
							{
								SetPlayerPosEx(Boxer1, 768.48, -73.66, 1000.57); SetPlayerPosEx(Boxer2, 768.48, -73.66, 1000.57);
								SetPlayerInterior(Boxer1, 7); SetPlayerInterior(Boxer2, 7);
								GetPlayerName(Boxer1, loser, sizeof(loser));
								GetPlayerName(Boxer2, winner, sizeof(winner));
								SetPlayerWeapons(Boxer1);
								SetPlayerWeapons(Boxer2);
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
								if(TBoxer != INVALID_PLAYER_ID)
								{
									if(IsPlayerConnected(TBoxer))
									{
										if(TBoxer != Boxer2)
										{
											if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12)
											{
												TBoxer = Boxer2;
												GetPlayerName(TBoxer, titel, sizeof(titel));
												new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
												Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
												Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
												Misc_Save();
												format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
											}
											else
											{
												SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job!");
											}
										}
										else
										{
											GetPlayerName(TBoxer, titel, sizeof(titel));
											format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
											Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
											Misc_Save();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
									SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
									SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
									SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
									SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer2, 50.0);
								}
								GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
							SetPlayerPosEx(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPosEx(Boxer2, 765.8433,3.2924,1000.7186);
							SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
							GetPlayerName(Boxer1, loser, sizeof(loser));
							GetPlayerName(Boxer2, winner, sizeof(winner));
							SetPlayerWeapons(Boxer1);
							SetPlayerWeapons(Boxer2);
							if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pLoses] += 1; }
							if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pWins] += 1; }
							if(TBoxer != INVALID_PLAYER_ID)
							{
								if(IsPlayerConnected(TBoxer))
								{
									if(TBoxer != Boxer2)
									{
										if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12)
										{
											TBoxer = Boxer2;
											GetPlayerName(TBoxer, titel, sizeof(titel));
											new nstring[MAX_PLAYER_NAME];
											format(nstring, sizeof(nstring), "%s", titel);
											strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
											Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
											Misc_Save();
											format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
											ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
										}
										else
										{
											SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job!");
										}
									}
									else
									{
										GetPlayerName(TBoxer, titel, sizeof(titel));
										format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
										ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
										Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
										Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
										Misc_Save();
									}
								}
							}//TBoxer
							format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
							SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer1, "~r~You lost", 3500, 1);
							format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
							SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer2, "~r~You won", 3500, 1);
							if(GetPlayerHealth(Boxer1, health) < 20)
							{
								SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								SetPlayerHealth(Boxer1, 30.0);
							}
							else
							{
								SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								SetPlayerHealth(Boxer1, 50.0);
							}
							if(GetPlayerHealth(Boxer2, health) < 20)
							{
								SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								SetPlayerHealth(Boxer2, 30.0);
							}
							else
							{
								SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								SetPlayerHealth(Boxer2, 50.0);
							}
							GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
							if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
							PlayerBoxing[Boxer1] = 0;
							PlayerBoxing[Boxer2] = 0;
						}
					}
					else if(Lost == 2)
					{
						if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
						{
							if(IsPlayerInRangeOfPoint(Boxer1,25.0,768.48, -73.66, 1000.57) || IsPlayerInRangeOfPoint(Boxer2,25.0, 768.48, -73.66, 1000.57))
							{
								SetPlayerPosEx(Boxer1, 768.48, -73.66, 1000.57); SetPlayerPosEx(Boxer2, 768.48, -73.66, 1000.57);
								SetPlayerInterior(Boxer1, 7); SetPlayerInterior(Boxer2, 7);
								GetPlayerName(Boxer1, winner, sizeof(winner));
								GetPlayerName(Boxer2, loser, sizeof(loser));
								if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pWins] += 1; }
								if(TBoxer != INVALID_PLAYER_ID)
								{
									if(IsPlayerConnected(TBoxer))
									{
										if(TBoxer != Boxer1)
										{
											if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12)
											{
												TBoxer = Boxer1;
												GetPlayerName(TBoxer, titel, sizeof(titel));
												new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
												Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
												Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
												Misc_Save();
												format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
												ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
											}
											else
											{
												SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job!");
											}
										}
										else
										{
											GetPlayerName(TBoxer, titel, sizeof(titel));
											format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
											ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
											Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
											Misc_Save();
										}
									}
								}//TBoxer
								format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
								SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
								format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
								SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
									SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
									SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
									SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
									SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
									SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
									SetPlayerHealth(Boxer2, 50.0);
								}
								GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
								if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
							SetPlayerPosEx(Boxer1, 768.48, -73.66, 1000.57); SetPlayerPosEx(Boxer2, 768.48, -73.66, 1000.57);
							SetPlayerInterior(Boxer1, 7); SetPlayerInterior(Boxer2, 7);
							GetPlayerName(Boxer1, winner, sizeof(winner));
							GetPlayerName(Boxer2, loser, sizeof(loser));
							if(PlayerInfo[Boxer2][pJob] == 12 || PlayerInfo[Boxer2][pJob2] == 12) { PlayerInfo[Boxer2][pLoses] += 1; }
							if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pWins] += 1; }
							if(TBoxer != INVALID_PLAYER_ID)
							{
								if(IsPlayerConnected(TBoxer))
								{
									if(TBoxer != Boxer1)
									{
										if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12)
										{
											TBoxer = Boxer1;
											GetPlayerName(TBoxer, titel, sizeof(titel));
											new nstring[MAX_PLAYER_NAME];
											format(nstring, sizeof(nstring), "%s", titel);
											strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
											Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
											Misc_Save();
											format(string, sizeof(string), "Boxing News: %s has Won the fight against Champion %s and is now the new Boxing Champion.",  titel, loser);
											ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
										}
										else
										{
											SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You would have been the Champion if you had the Boxer Job!");
										}
									}
									else
									{
										GetPlayerName(TBoxer, titel, sizeof(titel));
										format(string, sizeof(string), "Boxing News: Boxing Champion %s has Won the fight against %s.",  titel, loser);
										ProxDetector(30.0, Boxer1, string, COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
										Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
										Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
										Misc_Save();
									}
								}
							}//TBoxer
							format(string, sizeof(string), "* You have Lost the Fight against %s.", winner);
							SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer2, "~r~You lost", 3500, 1);
							format(string, sizeof(string), "* You have Won the Fight against %s.", loser);
							SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, string);
							GameTextForPlayer(Boxer1, "~g~You won", 3500, 1);
							if(GetPlayerHealth(Boxer1, health) < 20)
							{
								SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								SetPlayerHealth(Boxer1, 30.0);
							}
							else
							{
								SendClientMessageEx(Boxer1, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								SetPlayerHealth(Boxer1, 50.0);
							}
							if(GetPlayerHealth(Boxer2, health) < 20)
							{
								SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel exhausted from the Fight, go eat somewhere.");
								SetPlayerHealth(Boxer2, 30.0);
							}
							else
							{
								SendClientMessageEx(Boxer2, COLOR_LIGHTBLUE, "* You feel perfect, even after the Fight.");
								SetPlayerHealth(Boxer2, 50.0);
							}
							GameTextForPlayer(Boxer1, "~g~Match Over", 5000, 1); GameTextForPlayer(Boxer2, "~g~Match Over", 5000, 1);
							if(PlayerInfo[Boxer1][pJob] == 12 || PlayerInfo[Boxer1][pJob2] == 12) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
							PlayerBoxing[Boxer1] = 0;
							PlayerBoxing[Boxer2] = 0;
						}
					}
					InRing = 0;
					RoundStarted = 0;
					Boxer1 = INVALID_PLAYER_ID;
					Boxer2 = INVALID_PLAYER_ID;
					TBoxer = INVALID_PLAYER_ID;
					trigger = 0;
				}
			}
		}
		if(FindTime[i] >= 1)
		{
			if(FindTime[i] == FindTimePoints[i]) {
				FindTime[i] = 0;
				FindTimePoints[i] = 0;
				SetPlayerToTeamColor(FindingPlayer[i]);
				FindingPlayer[i] = -1;
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
				GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1);
			}
			else
			{
				format(string, sizeof(string), "%d", FindTimePoints[i] - FindTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				FindTime[i] += 1;
			}
		}
		if(CalledCops[i] >= 1)
		{
			if(CopsCallTime[i] < 1) { CopsCallTime[i] = 0; HidePlayerBeaconForCops(i); CalledCops[i] = 0; }
			else
			{
				CopsCallTime[i]--;
			}
		}
		if(CalledMedics[i] >= 1)
		{
			if(MedicsCallTime[i] < 1) { MedicsCallTime[i] = 0; HidePlayerBeaconForMedics(i); CalledMedics[i] = 0; }
			else
			{
				MedicsCallTime[i]--;
			}
		}
		if(NewbieTimer[i] > 0)
		{
			NewbieTimer[i]--;
		}
		if(CancelReportTimer[i] > 0)
		{
			CancelReportTimer[i]--;
		}
		if(AcceptedReportTimer[i] > 0)
		{
			AcceptedReportTimer[i]--;
		}
		if(HlKickTimer[i] > 0)
		{
			HlKickTimer[i]--;
		}
		if(HelperTimer[i] > 0)
		{
			HelperTimer[i]--;
		}
		if(JustReported[i] > 0)
		{
			JustReported[i]--;
		}
		if(TaxiCallTime[i] > 0)
		{
			if(TaxiAccepted[i] < 999)
			{
				if(IsPlayerConnected(TaxiAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(TaxiAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(EMSCallTime[i] > 0)
		{
			if(EMSAccepted[i] < 999)
			{
				if(IsPlayerConnected(EMSAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(EMSAccepted[i], X, Y, Z);
					new zone[MAX_ZONE_NAME];
					//Get3DZone(X, Y, Z, zone, sizeof(zone));
					format(string, sizeof(string), "Your patient is located in %s.", zone);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}

		if(BusCallTime[i] > 0)
		{
			if(BusAccepted[i] < 999)
			{
				if(IsPlayerConnected(BusAccepted[i]))
				{
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(BusAccepted[i], X, Y, Z);
					SetPlayerCheckpoint(i, X, Y, Z, 5);
				}
			}
		}
		if(MedicCallTime[i] > 0)
		{
			if(MedicCallTime[i] == 45) { MedicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			else
			{
				format(string, sizeof(string), "%d", 45 - MedicCallTime[i]);
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(MedicAccepted[i], X, Y, Z);
				SetPlayerCheckpoint(i, X, Y, Z, 5);
				GameTextForPlayer(i, string, 1500, 6);
				MedicCallTime[i] += 1;
			}
		}
		if(MechanicCallTime[i] > 0)
		{
			if(MechanicCallTime[i] == 30) { MechanicCallTime[i] = 0; DisablePlayerCheckpoint(i); PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0); GameTextForPlayer(i, "~r~RedMarker gone", 2500, 1); }
			else
			{
				format(string, sizeof(string), "%d", 30 - MechanicCallTime[i]);
				GameTextForPlayer(i, string, 1500, 6);
				MechanicCallTime[i] += 1;
			}
		}
		if(PlayerCuffed[i] == 1)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				//Frozen[i] = 0;
    			DeletePVar(i, "IsFrozen");
				TogglePlayerControllable(i, 1);
				PlayerCuffed[i] = 0;
				DeletePVar(i, "PlayerCuffed");
				PlayerCuffedTime[i] = 0;
				ClearAnimations(i);
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				SetPlayerPosEx(i, X, Y, Z);
			}
			else
			{
				PlayerCuffedTime[i] -= 1;
			}
		}
		if(PlayerCuffed[i] == 2)
		{
			if(PlayerCuffedTime[i] <= 0)
			{
				new Float:X, Float:Y, Float:Z;
				GetPlayerPos(i, X, Y, Z);
				new copinrange;
				foreach(new j: Player)
				{
					if(IsPlayerInRangeOfPoint(j, 30, X, Y, Z) && IsACop(j))
					{
						copinrange = 1;
					}
				}

				if(copinrange == 0)
				{
					//Frozen[i] = 0;
					DeletePVar(i, "IsFrozen");
					GameTextForPlayer(i, "~r~You broke the Cuffs, you are free!", 2500, 3);
					TogglePlayerControllable(i, 1);
					PlayerCuffed[i] = 0;
					DeletePVar(i, "PlayerCuffed");
					PlayerCuffedTime[i] = 0;
				}
				else
				{
					PlayerCuffedTime[i] = 60;
				}
			}
			else
			{
				PlayerCuffedTime[i] -= 1;
			}
		}
	}
}

// Timer Name: ServerHeartbeatTwo()
// TickRate: 1 secs.
task ServerHeartbeatTwo[1000]() {

	foreach(new i: Player)
	{
		if(IsPlayerInAnyVehicle(i)) {
			if(GetPlayerState(i) == PLAYER_STATE_DRIVER) SetPlayerArmedWeapon(i, 0);
			else if(PlayerInfo[i][pGuns][4] == 0) SetPlayerArmedWeapon(i, 0);
			else SetPlayerArmedWeapon(i, 29);
		}

		if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && JetPack[i] == 0 && PlayerInfo[i][pAdmin] < 4)
		{
			new string[74 + MAX_PLAYER_NAME];
		    format( string, sizeof( string ), "{AA3333}AdmWarning{FFFF00}: %s (ID %d) may possibly be jetpack hacking.", GetPlayerNameEx(i), i);
			ABroadCast( COLOR_YELLOW, string, 2 );
			format(string, sizeof(string), "%s (ID %d) may possibly be jetpack hacking.", GetPlayerNameEx(i), i);
			Log("logs/hack.log", string);
		}

		if( IsPlayerInRangeOfPoint( i, 2, 1544.2, -1353.4, 329.4 ) )
		{
		    GivePlayerValidWeapon( i, 46, 9 );
		}
		if(GetPlayerState(i) == PLAYER_STATE_ONFOOT) for(new h = 0; h < sizeof(FamilyInfo); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, FamilyInfo[h][FamilySafe][0], FamilyInfo[h][FamilySafe][1], FamilyInfo[h][FamilySafe][2]))
			{
				if(FamilyInfo[h][FamilyUSafe] == 1)
				{
					GameTextForPlayer(i, "~y~gang safe~w~~n~Type ~r~/safehelp~w~ for more information", 5000, 3);
				}
			}
		}

		for(new h = 0; h < sizeof(Points); h++)
		{
			if(IsPlayerInRangeOfPoint(i, 2.0, Points[h][Pointx], Points[h][Pointy], Points[h][Pointz]))
			{
				if(Points[h][Type] == 1 && !GetPVarType(i, "Packages"))
				{
					GameTextForPlayer(i, "~w~Type /getmats to purchase a ~n~~r~materials package", 5000, 5);
				}
				else if(Points[h][Type] == 3 && PlayerInfo[i][pPot] < 3)
				{
					GameTextForPlayer(i, "~w~Type /getseeds to purchase some ~r~pot seeds", 5000, 5);
				}
				else if(Points[h][Type] == 4)
				{
					GameTextForPlayer(i, "~w~Type /getcrack to purchase some ~r~crack", 5000, 5);
				}
				else if(Points[h][Type] == 5)
				{
					GameTextForPlayer(i, "~w~Type /getcrate to purchase a ~r~crate", 5000, 5);
				}
			}
		}

		if(CellTime[i] > 0 && 0 <= Mobile[i] < sizeof Mobile)
		{
			if (CellTime[i] == 60)
			{
				CellTime[i] = 1;
				if(Mobile[Mobile[i]] == i)
				{
					CallCost[i] += 10;
				}
			}
			CellTime[i]++;
			if (Mobile[Mobile[i]] == INVALID_PLAYER_ID && CellTime[i] == 5)
			{
				if(IsPlayerConnected(Mobile[i]))
				{
				    new Float:rX, Float:rY, Float:rZ;
				    GetPlayerPos(i, rX, rY, rZ);
					new string[18 + MAX_PLAYER_NAME];
					format(string, sizeof(string), "* %s's phone rings.", GetPlayerNameEx(Mobile[i]));
					RingTone[Mobile[i]] = 10;
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
		}

		if(CellTime[i] == 0 && CallCost[i] > 0)
		{
			new string[28];
			format(string, sizeof(string), "~w~The call cost~n~~r~$%d",CallCost[i]);
			GivePlayerCash(i, -CallCost[i]);
			GameTextForPlayer(i, string, 5000, 1);
			CallCost[i] = 0;
		}

		if(TransportDriver[i] < 999)
		{
			if(GetPlayerVehicleID(i) != GetPlayerVehicleID(TransportDriver[i]) || !TransportDuty[TransportDriver[i]])
			{
				if(IsPlayerConnected(TransportDriver[i]))
				{
					TransportMoney[TransportDriver[i]] += TransportCost[i];
					TransportTime[TransportDriver[i]] = 0;
					TransportCost[TransportDriver[i]] = 0;
					new string[36];
					format(string, sizeof(string), "~w~Passenger left~n~~g~Earned $%d",TransportCost[i]);
					GameTextForPlayer(TransportDriver[i], string, 5000, 1);
					TransportDriver[i] = INVALID_PLAYER_ID;
				}
			}
			else if(TransportTime[i] >= 16)
			{
				TransportTime[i] = 1;
				if(TransportDriver[i] < 999)
				{
					if(IsPlayerConnected(TransportDriver[i]))
					{
	  					TransportCost[i] += TransportValue[TransportDriver[i]];
						TransportCost[TransportDriver[i]] = TransportCost[i];
					}
				}
			}
			TransportTime[i] += 1;
			new string[24];
			format(string, sizeof(string), "~r~%d ~w~: ~g~$%d",TransportTime[i],TransportCost[i]);
			GameTextForPlayer(i, string, 15000, 6);
			if(TransportCost[i] > GetPlayerCash(i))
			{
			    RemovePlayerFromVehicle(i);
			    new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(i, slx, sly, slz);
				SetPlayerPosEx(i, slx, sly, slz + 2);
			    GameTextForPlayer(i, "~r~You're flat out of cash!", 4000, 4);
			}
		}

		if(GetVehicleModel(GetPlayerVehicleID(i)) != 594 && GetPVarType(i, "rccam")) {
			DestroyVehicle(GetPVarInt(i, "rcveh"));
			KillTimer(GetPVarInt(i, "rccamtimer"));
		}

	}
}

// Timer Name: ServerMicrobeat()
// TickRate: 500ms
task ServerMicrobeat[500]() {

    static
		Float: fExpHealth,
		Float: fCurrentSpeed,
		Float: fVehicleHealth,
		iVehicle,
		szSpeed[42],
		arrVehParams[7],
		arrDamage[4];

	foreach(new i: Player) switch(GetPlayerState(i)) {
	    case PLAYER_STATE_DRIVER: {
			iVehicle = GetPlayerVehicleID(i);
			GetVehicleHealth(iVehicle, fVehicleHealth);
			fCurrentSpeed = player_get_speed(i);

			if(arr_Towing[i] != INVALID_VEHICLE_ID) {
				if(GetVehicleModel(arr_Towing[i]) && IsVehicleStreamedIn(arr_Towing[i], i)) AttachTrailerToVehicle(arr_Towing[i], iVehicle);
				else arr_Towing[i] = INVALID_VEHICLE_ID;
			}

			if(PlayerInfo[i][pAdmin] <= 1) switch(Seatbelt[i]) {
				case 0: if((fVehSpeed[i] - fCurrentSpeed > 40.0) && (fVehHealth[i] != fVehicleHealth)) GetPlayerHealth(i, fExpHealth), SetPlayerHealth(i, fExpHealth - (fVehSpeed[i] - fCurrentSpeed) / 3.0);
				default: if((fVehSpeed[i] - fCurrentSpeed > 40.0) && (fVehHealth[i] != fVehicleHealth)) GetPlayerHealth(i, fExpHealth), SetPlayerHealth(i, fExpHealth - ((fVehSpeed[i] - fCurrentSpeed) / 6.0));
			}

			fVehSpeed[i] = fCurrentSpeed;
            fVehHealth[i] = fVehicleHealth;

			if(fVehicleHealth < 350.0 && PlayerInfo[i][pAdminDuty] == 0)
			{
 				SetVehicleHealth(iVehicle, 251.0);
    			GetVehicleParamsEx(iVehicle, arrVehParams[0], arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
				if(arrVehParams[0] == VEHICLE_PARAMS_ON) SetVehicleParamsEx(iVehicle,VEHICLE_PARAMS_OFF, arrVehParams[1], arrVehParams[2], arrVehParams[3], arrVehParams[4], arrVehParams[5], arrVehParams[6]);
				GameTextForPlayer(i, "~r~Totalled!", 2500, 3);
				arr_Engine{iVehicle} = 0;
			}
			if(fVehicleHealth < 350.0 && PlayerInfo[i][pAdminDuty] == 1)
			{
 				SetVehicleHealth(iVehicle, 1000.0);
				GameTextForPlayer(i, "~b~Nope <3", 300, 3);
			}
			else if(PlayerInfo[i][pSpeedo] != 0 && FindTimePoints[i] == 0 && arr_Engine{iVehicle} == 1) {
				format(szSpeed, sizeof(szSpeed),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~%.0f MPH", fCurrentSpeed);
				GameTextForPlayer(i, szSpeed, 1500, 3);
			}
  			for(new x = 0; x < sizeof(SpikeStrips); ++x) if(SpikeStrips[x][sX] != 0 && GetVehicleDistanceFromPoint(iVehicle, SpikeStrips[x][sX], SpikeStrips[x][sY], SpikeStrips[x][sZ]) <= 3.0) {
				GetVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
				arrDamage[3] = encode_tires(1, 1, 1, 1);
				UpdateVehicleDamageStatus(iVehicle, arrDamage[0], arrDamage[1], arrDamage[2], arrDamage[3]);
	   		}
		}
		case PLAYER_STATE_PASSENGER: {

		    iVehicle = GetPlayerVehicleID(i);
            GetVehicleHealth(iVehicle,fExpHealth);
			fCurrentSpeed = player_get_speed(i);

			if(PlayerInfo[i][pAdmin] <= 1) switch(Seatbelt[i]) {
				case 0: if((fVehSpeed[i] - fCurrentSpeed > 40.0) && (fVehHealth[i] - fExpHealth > 0)) GetPlayerHealth(i, fExpHealth), SetPlayerHealth(i, fExpHealth - (fVehSpeed[i] - fCurrentSpeed) / 3.0);
				default: if((fVehSpeed[i] - fCurrentSpeed > 40.0) && (fVehHealth[i] - fExpHealth > 0)) GetPlayerHealth(i, fExpHealth), SetPlayerHealth(i, fExpHealth - ((fVehSpeed[i] - fCurrentSpeed) / 6.0));
			}

			fVehSpeed[i] = fCurrentSpeed;
			fVehHealth[i] = fExpHealth;
		}
	}
}

// Timer Name: VehicleUpdate()
// TickRate: 10 secs.
task VehicleUpdate[10000]() {

    static engine,lights,alarm,doors,bonnet,boot,objective;
    for(new v = 0; v < MAX_VEHICLES; v++) if(GetVehicleModel(v)) {
	    GetVehicleParamsEx(v,engine,lights,alarm,doors,bonnet,boot,objective);
	    if(engine == VEHICLE_PARAMS_ON) {
			if(arr_Engine{v} == 0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			else if(!IsVIPcar(v) && !IsATruckerCar(v) && VehicleFuel[v] > 0.0) {
				VehicleFuel[v] -= 0.1;
				if(VehicleFuel[v] <= 0.0) SetVehicleParamsEx(v,VEHICLE_PARAMS_OFF,lights,alarm,doors,bonnet,boot,objective);
			}
	    }
	}
}

// ------------------------ Elevator Functions ------------------------
stock Elevator_Initialize()
{
	// Initializes the elevator.

	Obj_Elevator 			= CreateDynamicObject(18755, 1786.678100, -1303.459472, GROUND_Z_COORD + ELEVATOR_OFFSET, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);
	Obj_ElevatorDoors[1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.459472, GROUND_Z_COORD, 0.000000, 0.000000, 270.000000);

	Label_Elevator          = CreateDynamic3DTextLabel("Press 'F' to use elevator", COLOR_YELLOW, 1784.9822, -1302.0426, 13.6491, 4.0);


	new string[128],
		Float:z;

	for(new i; i < sizeof(Obj_FloorDoors); i ++)
	{
	    Obj_FloorDoors[i][0] 	= CreateDynamicObject(18757, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);
		Obj_FloorDoors[i][1] 	= CreateDynamicObject(18756, X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(i), 0.000000, 0.000000, 270.000000);

		format(string, sizeof(string), "%s\nPress 'F' to call", LAElevatorFloorData[0][i]);

		if(i == 0)
		    z = 13.4713;
		else
		    z = 13.4713 + 8.7396 + ((i-1) * 5.45155);

		Label_Floors[i]         = CreateDynamic3DTextLabel(string, COLOR_YELLOW, 1783.9799, -1300.7660, z, 10.5);
		// Label_Elevator, Text3D:Label_Floors[21];
	}

	// Open ground floor doors:
	Floor_OpenDoors(0);
	Elevator_OpenDoors();
}

stock Elevator_OpenDoors()
{
	// Opens the elevator's doors.

	new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_L_OPENED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_R_OPENED, y, z, DOORS_SPEED);
}

stock Elevator_CloseDoors()
{
    // Closes the elevator's doors.

    if(ElevatorState == ELEVATOR_STATE_MOVING)
	    return 0;

    new Float:x, Float:y, Float:z;

	GetDynamicObjectPos(Obj_ElevatorDoors[0], x, y, z);
	MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, y, z, DOORS_SPEED);
	return 1;
}

stock Floor_OpenDoors(floorid)
{
    // Opens the doors at the specified floor.
    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_L_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_R_OPENED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
}

stock Floor_CloseDoors(floorid)
{
    // Closes the doors at the specified floor.

    MoveDynamicObject(Obj_FloorDoors[floorid][0], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
	MoveDynamicObject(Obj_FloorDoors[floorid][1], X_DOOR_CLOSED, -1303.171142, GetDoorsZCoordForFloor(floorid), DOORS_SPEED);
}

forward KickPublic(playerid);
public KickPublic(playerid) { Kick(playerid); }

KickWithMessage(playerid)
{
    SetTimerEx("KickPublic", 20, 0, "d", playerid);
}

stock Elevator_MoveToFloor(floorid)
{
	// Moves the elevator to specified floor (doors are meant to be already closed).

	ElevatorState = ELEVATOR_STATE_MOVING;
	ElevatorFloor = floorid;

	// Move the elevator slowly, to give time to clients to sync the object surfing. Then, boost it up:
	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), 0.25);
    DestroyDynamic3DTextLabel(Label_Elevator);

	ElevatorBoostTimer = SetTimerEx("Elevator_Boost", 2000, 0, "i", floorid);
}

forward Elevator_Boost(floorid);
public Elevator_Boost(floorid)
{
	// Increases the elevator's speed until it reaches 'floorid'

	MoveDynamicObject(Obj_Elevator, 1786.678100, -1303.459472, GetElevatorZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[0], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
    MoveDynamicObject(Obj_ElevatorDoors[1], X_DOOR_CLOSED, -1303.459472, GetDoorsZCoordForFloor(floorid), ELEVATOR_SPEED);
}

forward Elevator_TurnToIdle();
public Elevator_TurnToIdle()
{
	ElevatorState = ELEVATOR_STATE_IDLE;
	ReadNextFloorInQueue();
}

stock RemoveFirstQueueFloor()
{
	// Removes the data in ElevatorQueue[0], and reorders the queue accordingly.

	for(new i; i < sizeof(ElevatorQueue) - 1; i ++)
	    ElevatorQueue[i] = ElevatorQueue[i + 1];

	ElevatorQueue[sizeof(ElevatorQueue) - 1] = INVALID_FLOOR;
}

stock AddFloorToQueue(floorid)
{
 	// Adds 'floorid' at the end of the queue.

	// Scan for the first empty space:
	new slot = -1;
	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    if(ElevatorQueue[i] == INVALID_FLOOR)
	    {
	        slot = i;
	        break;
	    }
	}

	if(slot != -1)
	{
	    ElevatorQueue[slot] = floorid;

     	// If needed, move the elevator.
	    if(ElevatorState == ELEVATOR_STATE_IDLE)
	        ReadNextFloorInQueue();

	    return 1;
	}
	return 0;
}

stock ResetElevatorQueue()
{
	// Resets the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	{
	    ElevatorQueue[i] 	= INVALID_FLOOR;
	    FloorRequestedBy[i] = INVALID_PLAYER_ID;
	}
}

stock IsFloorInQueue(floorid)
{
	// Checks if the specified floor is currently part of the queue.

	for(new i; i < sizeof(ElevatorQueue); i ++)
	    if(ElevatorQueue[i] == floorid)
	        return 1;

	return 0;
}

stock ReadNextFloorInQueue()
{
	// Reads the next floor in the queue, closes doors, and goes to it.

	if(ElevatorState != ELEVATOR_STATE_IDLE || ElevatorQueue[0] == INVALID_FLOOR)
	    return 0;

	Elevator_CloseDoors();
	Floor_CloseDoors(ElevatorFloor);
	return 1;
}

stock DidPlayerRequestElevator(playerid)
{
	for(new i; i < sizeof(FloorRequestedBy); i ++)
	    if(FloorRequestedBy[i] == playerid)
	        return 1;

	return 0;
}

stock ShowElevatorDialog(playerid)
{
	new string[512];
 	for(new x;x<20;x++)
	{
  		format(string, sizeof(string), "%s%d - %s\n", string, (x+1), LAElevatorFloorData[0][x]);
	}

	ShowPlayerDialog(playerid, LAELEVATOR, DIALOG_STYLE_LIST, "Elevator", string, "Select", "Cancel");
}

stock CallElevator(playerid, floorid)
{
	// Calls the elevator (also used with the elevator dialog).

	if(FloorRequestedBy[floorid] != INVALID_PLAYER_ID || IsFloorInQueue(floorid))
	    return 0;

	FloorRequestedBy[floorid] = playerid;
	AddFloorToQueue(floorid);
	return 1;
}

stock RemoveBuildings(playerid)
{
	//New VIP Removes
	RemoveBuildingForPlayer(playerid, 641, 1688.5234, -1673.2188, 17.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1733.6563, -1709.1016, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1711.5625, -1703.8203, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1733.1641, -1695.2109, 12.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1693.6719, -1647.4531, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1710.3828, -1634.9219, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1710.3906, -1634.8750, 19.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1717.4844, -1633.0313, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1717.4922, -1632.9844, 19.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1537, 1725.4297, -1637.4375, 19.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1533, 1728.4453, -1637.4375, 19.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1711.9766, -1629.3359, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1711.9844, -1629.2891, 19.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1703.8828, -1621.9922, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1733.0469, -1631.8047, 19.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1733.0391, -1631.8516, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1732.9609, -1626.5469, 19.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1732.9297, -1626.5781, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 642, 1738.5547, -1629.6328, 20.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 1738.5859, -1629.6016, 19.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1740.4766, -1621.9219, 17.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1693.6719, -1620.1797, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1703.8828, -1614.7969, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1711.3438, -1606.0391, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1703.9063, -1593.6719, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1709.5000, -1597.6484, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1216, 1709.9922, -1604.9141, 13.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1722.3750, -1620.6016, 15.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1722.1797, -1615.7188, 11.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1289, 1733.8594, -1608.9141, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1288, 1732.8047, -1608.9141, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1733.1250, -1601.3125, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1740.4453, -1614.3984, 17.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1744.4922, -1598.3359, 15.6250, 0.25);
	//ngrp map removes
	RemoveBuildingForPlayer(playerid, 1413, 1904.3750, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1909.6563, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1914.9297, -1879.7344, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 17350, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -89.9297, -1133.7500, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -87.0547, -1132.6797, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -79.2500, -1137.7188, 0.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 3285, -73.8047, -1141.4219, 1.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 17072, -54.9922, -1130.7266, 4.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 17073, -56.1250, -1130.1719, 4.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -84.3750, -1116.0938, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1447, -84.0547, -1117.2188, 1.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -60.3594, -1116.9375, 0.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.6719, -1125.6953, 0.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -63.4141, -1115.4141, 0.0469, 0.25);
	return 1;
}

stock UpdateWheelTarget()
{
    gCurrentTargetYAngle += 36.0; // There are 10 carts, so 360 / 10
    if(gCurrentTargetYAngle >= 360.0) {
		gCurrentTargetYAngle = 0.0;
    }
	if(gWheelTransAlternate) gWheelTransAlternate = 0;
	else gWheelTransAlternate = 1;
}

stock CreatePickupEx(model, type, Float:X, Float:Y, Float:Z, Virtualworld = -1)
{
	totalpickups++;
	return CreateDynamicPickup(model, type, X, Y, Z, Virtualworld);
}

stock DestroyPickupEx(pickupid)
{
	totalpickups--;
	return DestroyDynamicPickup(pickupid);
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z)
{
    exitpos[0] = x; exitpos[1] = y; exitpos[2] = z;
    return SetPlayerPos(playerid, x, y, z);
}

stock TutorialStep(playerid)
{
	if(gettime() - GetPVarInt(playerid, "pTutTime") < 5)
	{
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~r~PLEASE WAIT", 1100, 3);
		return 1;
	}

	if(InsideTut{playerid} < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You can't use the command outside the tutorial.");
		return 1;
	}

    SetPVarInt(playerid, "pTutTime", gettime());
	switch(TutStep[playerid])
	{
		case 1:
		{
			HideTutGUIFrame(playerid, 1);
			ShowTutGUIFrame(playerid, 2);
			TutStep[playerid] = 2;
            SetPVarInt(playerid, "pTutTime", gettime()-4);

			// Los Santos Bank (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 1457.4854,-1011.5267,26.8438);
			SetPlayerPosEx(playerid, 1457.4854,-1011.5267,-10.0);
			SetPlayerCameraPos(playerid, 1457.5421,-1039.4404,28.4274);
			SetPlayerCameraLookAt(playerid, 1457.4854,-1011.5267,26.8438);
		}
		case 2:
		{
			ShowTutGUIFrame(playerid, 3);
			TutStep[playerid] = 3;
            SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Los Santos ATM (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 2140.5173,-1163.9576,23.9922);
			SetPlayerPosEx(playerid, 2140.5173,-1163.9576,-10.0);
			SetPlayerCameraPos(playerid, 2145.8252,-1159.2659,27.7218);
			SetPlayerCameraLookAt(playerid, 2140.5173,-1163.9576,23.9922);
		}
		case 3:
		{
			ShowTutGUIFrame(playerid, 4);
			TutStep[playerid] = 4;
            SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Fishing Pier (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 370.0804,-2087.8767,7.8359);
			SetPlayerPosEx(playerid, 370.0804,-2087.8767,-10.0);
			SetPlayerCameraPos(playerid, 423.3802,-2067.7915,29.8605);
			SetPlayerCameraLookAt(playerid, 370.0804,-2087.8767,7.8359);
		}
		case 4:
		{
			ShowTutGUIFrame(playerid, 5);
			TutStep[playerid] = 5;
            SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Ganton Gym (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 2229.4968,-1722.0701,13.5625);
			SetPlayerPosEx(playerid, 2229.4968,-1722.0701,-10.0);
			SetPlayerCameraPos(playerid, 2211.1460,-1748.3909,29.3744);
			SetPlayerCameraLookAt(playerid, 2229.4968,-1722.0701,13.5625);
		}
		case 5:
		{
			ShowTutGUIFrame(playerid, 6);
			TutStep[playerid] = 6;
            SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Arms Dealer (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 1366.1187,-1275.1248,13.5469);
			SetPlayerPosEx(playerid, 1366.1187,-1275.1248,-10.0);
			SetPlayerCameraPos(playerid, 1341.2936,-1294.8105,23.3096);
			SetPlayerCameraLookAt(playerid, 1366.1187,-1275.1248,13.5469);
		}
		case 6:
		{
			ShowTutGUIFrame(playerid, 7);
			TutStep[playerid] = 7;
            SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Drugs Dealer (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 2167.5542,-1673.1503,15.0812);
			SetPlayerPosEx(playerid, 2167.5542,-1673.1503,-10.0);
			SetPlayerCameraPos(playerid, 2186.2607,-1693.4254,29.5406);
			SetPlayerCameraLookAt(playerid, 2167.5542,-1673.1503,15.0812);
		}
		case 7:
		{
			ShowTutGUIFrame(playerid, 8);
			TutStep[playerid] = 8;
            SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Drugs Smuggler (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 59.9634,-283.6652,1.5781);
			SetPlayerPosEx(playerid, 59.9634,-283.6652,-10.0);
			SetPlayerCameraPos(playerid, 96.4630,-216.5790,34.2965);
			SetPlayerCameraLookAt(playerid, 59.9634,-283.6652,1.5781);
		}
		case 8:
		{
			ShowTutGUIFrame(playerid, 9);
			TutStep[playerid] = 9;
		}
		case 9:
		{
			for(new f = 2; f < 10; f++)
			{
				HideTutGUIFrame(playerid, f);
			}
			ShowTutGUIFrame(playerid, 10);
			TutStep[playerid] = 10;

			// LSPD (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid, 1554.3381,-1675.5692,16.1953);
			SetPlayerPosEx(playerid, 1554.3381,-1675.5692,-10.0);
			SetPlayerCameraPos(playerid, 1514.7783,-1700.2913,36.7506);
			SetPlayerCameraLookAt(playerid, 1554.3381,-1675.5692,16.1953);
		}
		case 10:
		{
			HideTutGUIFrame(playerid, 10);
			ShowTutGUIFrame(playerid, 11);
			TutStep[playerid] = 11;

			// All Saints (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1175.5581,-1324.7922,18.1610);
			SetPlayerPosEx(playerid, 1188.4574,-1309.2242,-10.0);
			SetPlayerCameraPos(playerid,1188.4574,-1309.2242,13.5625+6.0);
			SetPlayerCameraLookAt(playerid,1175.5581,-1324.7922,18.1610);
		}
		case 11:
		{
			HideTutGUIFrame(playerid, 11);
			ShowTutGUIFrame(playerid, 12);
			TutStep[playerid] = 12;

			// San Andreas News (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,643.6738,-1348.9811,17.7879);
			SetPlayerPosEx(playerid, 643.6738,-1348.9811,-10.0);
			SetPlayerCameraPos(playerid,616.4327,-1336.6818,20.9202);
			SetPlayerCameraLookAt(playerid,643.6738,-1348.9811,17.7879);
		}
		case 12:
		{
			HideTutGUIFrame(playerid, 12);
			ShowTutGUIFrame(playerid, 13);
			TutStep[playerid] = 13;

			// Government (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1478.4708,-1754.7579,16.7400);
			SetPlayerPosEx(playerid, 1478.4708,-1754.7579,-10.0);
			SetPlayerCameraPos(playerid,1520.2188,-1712.0742,40.5350);
			SetPlayerCameraLookAt(playerid,1478.4708,-1754.7579,16.7400);
		}
		case 13:
		{
			HideTutGUIFrame(playerid, 13);
			ShowTutGUIFrame(playerid, 14);
			TutStep[playerid] = 14;

			// TR (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,-2679.5342,1639.0643,65.8865);
			SetPlayerPosEx(playerid, -2679.5342,1639.0643,-10.0);
			SetPlayerCameraPos(playerid,-2734.3477,1520.4971,87.1810);
			SetPlayerCameraLookAt(playerid,-2679.5342,1639.0643,65.8865);
		}
		case 14:
		{
			HideTutGUIFrame(playerid, 14);
			ShowTutGUIFrame(playerid, 15);
			TutStep[playerid] = 15;

			// Gang SaC Beach (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,655.5394,-1867.2231,5.4609);
			SetPlayerPosEx(playerid, 655.5394,-1867.2231,-10.0);
			SetPlayerCameraPos(playerid,699.7435,-1936.7568,24.8646);
			SetPlayerCameraLookAt(playerid,655.5394,-1867.2231,5.4609);
		}
		case 15:
		{
			HideTutGUIFrame(playerid, 15);
			ShowTutGUIFrame(playerid, 16);
			TutStep[playerid] = 16;

			// 24/7 Store (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1315.6570,-898.7749,39.5781);
			SetPlayerPosEx(playerid, 1315.6570,-898.7749,-10.0);
			SetPlayerCameraPos(playerid,1315.4285,-922.5234,44.0355);
			SetPlayerCameraLookAt(playerid,1315.6570,-898.7749,39.5781);
		}
		case 16:
		{
			HideTutGUIFrame(playerid, 16);
			ShowTutGUIFrame(playerid, 17);
			TutStep[playerid] = 17;

			// Clothing Store (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1457.1664,-1138.0111,26.6261);
			SetPlayerPosEx(playerid, 1457.1664,-1138.0111,-10.0);
			SetPlayerCameraPos(playerid,1459.0411,-1156.4342,33.4464);
			SetPlayerCameraLookAt(playerid,1457.1664,-1138.0111,26.6261);
		}
		case 17:
		{
			HideTutGUIFrame(playerid, 17);
			ShowTutGUIFrame(playerid, 18);
			TutStep[playerid] = 18;

			// Car Dealership (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1656.6107,-1892.3878,13.5521);
			SetPlayerPosEx(playerid,1656.6107,-1892.3878,-10.0);
			SetPlayerCameraPos(playerid,1678.1699,-1863.5964,22.9622);
			SetPlayerCameraLookAt(playerid,1656.6107,-1892.3878,13.5521);
		}
		case 18:
		{
			HideTutGUIFrame(playerid, 18);
			ShowTutGUIFrame(playerid, 19);
			TutStep[playerid] = 19;

			// Los Santos (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1607.0160,-1510.8218,207.4438);
			SetPlayerPosEx(playerid,1607.0160,-1510.8218,-10.0);
			SetPlayerCameraPos(playerid,1850.1813,-1765.7552,81.9271);
			SetPlayerCameraLookAt(playerid,1607.0160,-1510.8218,207.4438);
		}
		case 19:
		{
			HideTutGUIFrame(playerid, 19);
			ShowTutGUIFrame(playerid, 20);
			TutStep[playerid] = 20;

			// VIP (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1797.3397,-1578.3440,14.0798);
			SetPlayerPosEx(playerid,1797.3397,-1578.3440,-10.0);
			SetPlayerCameraPos(playerid,1832.1698,-1600.1538,32.2877);
			SetPlayerCameraLookAt(playerid,1797.3397,-1578.3440,14.0798);
		}
		case 20:
		{
			HideTutGUIFrame(playerid, 20);
			ShowTutGUIFrame(playerid, 21);
			TutStep[playerid] = 21;

			// Unity Station (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1716.1129,-1880.0715,22.0264);
			SetPlayerPosEx(playerid,1716.1129,-1880.0715,-10.0);
			SetPlayerCameraPos(playerid,1755.0413,-1824.8710,20.2100);
			SetPlayerCameraLookAt(playerid,1716.1129,-1880.0715,22.0264);
		}
		case 21:
		{
			HideTutGUIFrame(playerid, 21);
			ShowTutGUIFrame(playerid, 22);
			TutStep[playerid] = 22;
   			SetPVarInt(playerid, "pTutTime", gettime()-4);
			// Unity Station (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1716.1129,-1880.0715,22.0264);
			SetPlayerPosEx(playerid,1716.1129,-1880.0715,-10.0);
			SetPlayerCameraPos(playerid,1755.0413,-1824.8710,20.2100);
			SetPlayerCameraLookAt(playerid,1716.1129,-1880.0715,22.0264);
		}
		case 22:
		{
			HideTutGUIFrame(playerid, 22);
			ShowTutGUIFrame(playerid, 23);
			TutStep[playerid] = 23;
   			SetPVarInt(playerid, "pTutTime", gettime()+3);
			// Unity Station (Camera)
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			Streamer_UpdateEx(playerid,1716.1129,-1880.0715,22.0264);
			SetPlayerPosEx(playerid,1716.1129,-1880.0715,-10.0);
			SetPlayerCameraPos(playerid,1755.0413,-1824.8710,20.2100);
			SetPlayerCameraLookAt(playerid,1716.1129,-1880.0715,22.0264);
		}
		case 23:
		{
			HideTutGUIBox(playerid);
			HideTutGUIFrame(playerid, 23);
			DeletePVar(playerid, "pTutTime");
			TutStep[playerid] = 0;

			PlayerInfo[playerid][pTut] = 1;
			gOoc[playerid] = 0; gNews[playerid] = 0; gFam[playerid] = 0;
			TogglePlayerControllable(playerid, 1);
			SetCamBack(playerid);
			DeletePVar(playerid, "MedicBill");
			SetPlayerColor(playerid,TEAM_HIT_COLOR);
			SetPlayerInterior(playerid,0);

			for(new x;x<10000;x++)
			{
				new rand=random(300);
				if(PlayerInfo[playerid][pSex] == 0)
				{
					if(IsValidSkin(rand) && IsFemaleSpawnSkin(rand))
					{
					    PlayerInfo[playerid][pModel] = rand;
						SetPlayerSkin(playerid, rand);
						break;
					}
				}
				else
				{
				    if(IsValidSkin(rand) && !IsFemaleSkin(rand))
					{
					    PlayerInfo[playerid][pModel] = rand;
						SetPlayerSkin(playerid, rand);
						break;
					}
				}
			}

			switch(random(2))
			{
			    case 0:
				{
					SetPlayerPosEx(playerid, 1715.1201,-1903.1711,13.5665);
					SetPlayerFacingAngle(playerid, 360.0);
				}
				case 1:
				{
				    SetPlayerPosEx(playerid, -1969.0737,138.1210,27.6875);
				    SetPlayerFacingAngle(playerid, 90.0);
				}
			}
			SetCameraBehindPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
		}
	}
	return 1;
}

stock PlayAudioStreamForPlayerEx(playerid, url[], Float:posX = 0.0, Float:posY = 0.0, Float:posZ = 0.0, Float:distance = 50.0, usepos = 0)
{
	if(GetPVarType(playerid, "pAudioStream")) StopAudioStreamForPlayer(playerid);
	else SetPVarInt(playerid, "pAudioStream", 1);
    PlayAudioStreamForPlayer(playerid, url, posX, posY, posZ, distance, usepos);
}

stock StopAudioStreamForPlayerEx(playerid)
{
	DeletePVar(playerid, "pAudioStream");
    StopAudioStreamForPlayer(playerid);
}

stock CreateVehicleEx(modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, respawn_delay, playerid = INVALID_PLAYER_ID)
{
	new string[128];
	format(string, sizeof(string), "(%d, %f, %f, %f, %f, %d, %d, %d) (%s)", modelid, x, y, z, angle, color1, color2, respawn_delay, GetPlayerNameEx(playerid));
	Log("logs/cardebug.log", string);

	new id = CreateVehicle(modelid, x, y, z, angle, color1, color2, respawn_delay);

	format(string, sizeof(string), "-> [%d]", id);
	Log("logs/cardebug.log", string);
	return id;
}

//DFU SHITS NIQQA

//PlayerInfo[playerid][pRank]
//PlayerInfo[playerid][pDivision]

stock loadFactions() {
    mysql_function_query(MainPipeline, "SELECT * from groups", true, "OnQueryFinish", "i", THREAD_LOAD_FACTIONS);
    return 1;
}

stock loadFacVehicles() {
    mysql_function_query(MainPipeline, "SELECT * from groupvehicles", true, "OnQueryFinish", "i", THREAD_LOAD_FACTIONVEHS);
    return 1;
}

stock SaveAllFactions() {
	for(new i = 1; i < MAX_FACTIONS; i++) {
		if(FactionInfo[i][fType] != 0) {
			SaveFaction(i);
		}
	}
}

stock SaveAllFactionVehicles() {
	for(new i = 1; i < MAX_FACTIONVEHICLES; i++) {
		if(FactionVehicleInfo[i][fModel] != 0) {
			SaveFactionVehicle(i);
		}
	}
}


stock GetPlayerFactionType(playerid) {
	return FactionInfo[PlayerInfo[playerid][pMember]][fType];
}


stock GetPlayerFactionName(playerid) {
	new string[31];
	string = "None";
	if(PlayerInfo[playerid][pMember] != 0) {
	    format(string, sizeof(string), "%s", FactionInfo[PlayerInfo[playerid][pMember]][fName]);
	}
	return string;
}

stock GetPlayerFactionMOTD(playerid) {
	new string[128];
	string = "None";
	if(PlayerInfo[playerid][pMember] != 0) {
	    format(string, sizeof(string), "%s", FactionInfo[PlayerInfo[playerid][pMember]][fMOTD]);
	}
	return string;
}

stock GetPlayerFactionRank(playerid) {
	new string[MAX_NAME_LEN];
	string = "None";
	if(PlayerInfo[playerid][pRank] != 0) {
	    switch(PlayerInfo[playerid][pRank]) {
		    case 1: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][0]);
		    }
		    case 2: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][1]);
		    }
		    case 3: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][2]);
		    }
		    case 4: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][3]);
		    }
		    case 5: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][4]);
		    }
		    case 6: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][5]);
		    }
		    case 7: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][6]);
		    }
		    case 8: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][7]);
		    }
		    case 9: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][8]);
		    }
		    case 10: {
                format(string, sizeof(string), "%s", FacRanks[PlayerInfo[playerid][pMember]][9]);
		    }
		}
	}
	return string;
}

stock GetPlayerFactionDiv(playerid) {
    new string[31];
    string = "None";
	if(PlayerInfo[playerid][pDivision] != 0) {
		switch(PlayerInfo[playerid][pDivision]) {
		    case 1: {
                format(string, sizeof(string), "%s", FacDivs[PlayerInfo[playerid][pMember]][0]);
		    }
		    case 2: {
                format(string, sizeof(string), "%s", FacDivs[PlayerInfo[playerid][pMember]][1]);
		    }
		    case 3: {
                format(string, sizeof(string), "%s", FacDivs[PlayerInfo[playerid][pMember]][2]);
		    }
		    case 4: {
                format(string, sizeof(string), "%s", FacDivs[PlayerInfo[playerid][pMember]][3]);
		    }
		    case 5: {
                format(string, sizeof(string), "%s", FacDivs[PlayerInfo[playerid][pMember]][4]);
		    }
		}
	}
	return string;
}

//Faction Types
/*
0 - None
1 - GOV
2 - Judicial
3 - Hitman
4 - Transportation
5 - Medical
6 - Law Enforcement
*/

GetFactionType(factiontype) {

	new
		szResult[32] = "None";

	switch(factiontype) {
		case 1: szResult = "Government";
		case 2: szResult = "Judicial";
		case 3: szResult = "Hitman";
		case 4: szResult = "Transportation";
		case 5: szResult = "Medical";
		case 6: szResult = "Law Enforcement";
	}
	return szResult;
}

stock GetPlayerFaction(playerid) {
	return PlayerInfo[playerid][pMember];
}

stock SetPlayerFaction(playerid, factionid) {
	return PlayerInfo[playerid][pMember] = factionid;
}

stock SetPlayerFactionLeader(playerid, factionid) {
	return PlayerInfo[playerid][pLeader] = factionid;
}

stock SetPlayerFactionRank(playerid, rankid) {
	return PlayerInfo[playerid][pRank] = rankid;
}

stock SetPlayerFactionDiv(playerid, divid) {
	return PlayerInfo[playerid][pDivision] = divid;
}

IsAGov(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(GetPlayerFactionType(playerid) == 1) return 1;
 	}
	return 0;
}

Weapon_ReturnName(iModelID) {

	new
		szWepName[32] = "(none)";

	switch(iModelID) {
		case 0: szWepName = "punch";
		case 1: szWepName = "Brass Knuckles";
		case 2: szWepName = "Golf Club";
		case 3: szWepName = "Nitestick";
		case 4: szWepName = "Knife";
		case 5: szWepName = "Baseball Bat";
		case 6: szWepName = "Shovel";
		case 7: szWepName = "Pool Cue";
		case 8: szWepName = "Katana";
		case 9: szWepName = "Chainsaw";
		case 10: szWepName = "purple dildo";
		case 11: szWepName = "small white vibrator";
		case 12: szWepName = "large white vibrator";
		case 13: szWepName = "silver vibrator";
		case 14: szWepName = "bouquet of flowers";
		case 15: szWepName = "Cane";
		case 16: szWepName = "Grenade";
		case 17: szWepName = "Tear Gas";
		case 18: szWepName = "Molotov Cocktail";
		case 19: szWepName = "Jetpack";
		case 20: szWepName = "";
		case 21: szWepName = "";
		case 22: szWepName = "Colt .45";
		case 23: szWepName = "Silenced Colt .45";
		case 24: szWepName = "Desert Eagle";
		case 25: szWepName = "Shotgun";
		case 26: szWepName = "Sawn-off Shotgun";
		case 27: szWepName = "SPAS-12";
		case 28: szWepName = "Micro Uzi";
		case 29: szWepName = "MP5";
		case 30: szWepName = "AK-47";
		case 31: szWepName = "M4A1";
		case 32: szWepName = "TEC-9";
		case 33: szWepName = "Rifle";
		case 34: szWepName = "Sniper Rifle";
		case 35: szWepName = "RPG";
		case 36: szWepName = "Heat Seeker";
		case 37: szWepName = "Flamethrower";
		case 38: szWepName = "Minigun";
		case 39: szWepName = "Satchel Charge";
		case 40: szWepName = "Detonator";
		case 41: szWepName = "Spray Can";
		case 42: szWepName = "Fire Extinguisher";
		case 43: szWepName = "Camera";
		case 44: szWepName = "Nightvision Goggles";
		case 45: szWepName = "Thermal Goggles";
		case 46: szWepName = "Parachute";
	}
	return szWepName;
}

ListFactions(playerid) {

	new
		szDialogStr[MAX_FACTIONS * (MAX_NAME_LEN + 16)],
		iCount = 1;

	while(iCount < MAX_FACTIONS) {
		if(FactionInfo[iCount][fName][0])
			format(szDialogStr, sizeof szDialogStr, "%s\n(%i) {%6x}%s{FFFFFF}", szDialogStr, iCount, FactionInfo[iCount][fDutyColor], FactionInfo[iCount][fName]);

		else
			format(szDialogStr, sizeof szDialogStr, "%s\n(%i) (empty)", szDialogStr, iCount);

		++iCount;
	}
	return ShowPlayerDialog(playerid, DIALOG_LISTFACS, DIALOG_STYLE_LIST, "List Factions", szDialogStr, "Select", "Cancel");
}

MakeLeadList(playerid) {

	new
		szDialogStr[MAX_FACTIONS * (MAX_NAME_LEN + 16)],
		iCount = 1;

	while(iCount < MAX_FACTIONS) {
		if(FactionInfo[iCount][fName][0])
			format(szDialogStr, sizeof szDialogStr, "%s\n(%i) {%6x}%s{FFFFFF}", szDialogStr, iCount, FactionInfo[iCount][fDutyColor], FactionInfo[iCount][fName]);

		else
			format(szDialogStr, sizeof szDialogStr, "%s\n(%i) (empty)", szDialogStr, iCount);

		++iCount;
	}
	return ShowPlayerDialog(playerid, DIALOG_LEADLIST, DIALOG_STYLE_LIST, "Make Leader", szDialogStr, "Select", "Cancel");
}

ArrayCount(arrCount[], iMax = sizeof arrCount) {

	new
		iCount,
		iPos;

	while(iPos < iMax) if(arrCount[iPos++]) ++iCount;
	return iCount;
}

StringCount(arrCount[][], iMax = sizeof arrCount) {

	new
		iCount,
		iPos;

	while(iPos < iMax) if(arrCount[iPos++][0]) ++iCount;
	return iCount;
}

CMD:editfac(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 1337 || PlayerInfo[playerid][pFactionModerator]) {
		ListFactions(playerid);
	}
	return 1;
}

DisplayFacDialog(playerid, facid) {

	new
		szDialogStr[1024],
		szTitle[32 + MAX_NAME_LEN];
    format(szDialogStr, sizeof(szDialogStr),
  		"Name: %s\n\
		Type: %s\n\
		Radio: %s (rank %i)\n\
		Department Radio: %s (rank %i)\n\
		Government Annoucnements: %s (rank %i)\n\
		Locker Access: %s (rank %i)\n\
		Bug: %s (rank %i)\n\
		Spikes: %s (rank %i)\n\
		Barricades: %s (rank %i)\n\
  		Cones: %s (rank %i)",
		FactionInfo[facid][fName],
		GetFactionType(FactionInfo[facid][fType]),
		((FactionInfo[facid][fRadio] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fRadio],
		((FactionInfo[facid][fDRadio] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fDRadio],
		((FactionInfo[facid][fGovAnnounce] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fGovAnnounce],
		((FactionInfo[facid][fLocker] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fLocker],
		((FactionInfo[facid][fBug] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fBug],
		((FactionInfo[facid][fSpikes] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fSpikes],
		((FactionInfo[facid][fBarricades] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fBarricades],
		((FactionInfo[facid][fCones] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fCones]
	);
    format(szDialogStr, sizeof(szDialogStr),
  		"%s\n\
 		Flares: %s (rank %i)\n\
  		Barrels: %s (rank %i)\n\
  		Free Name Change: %s (rank %i)\n\
		Duty Color: {%6x}(edit){FFFFFF}\n\
		Radio Color: {%6x}(edit){FFFFFF}\n\
		Edit Locker Weapons (%i defined)\n\
		Edit Divisions (%i defined)\n\
		Edit Ranks (%i defined)\n\
		Edit Locker Position (current distance: %.0f)",
		szDialogStr,
		((FactionInfo[facid][fFlares] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fFlares],
		((FactionInfo[facid][fBarrels] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fBarrels],
		((FactionInfo[facid][fFreeNameChange] != -1) ? ("Yes") : ("No")), FactionInfo[facid][fFreeNameChange],
		FactionInfo[facid][fDutyColor],
		FactionInfo[facid][fRadioColor],
		ArrayCount(FactionInfo[facid][fGun], MAX_FAC_WEAPONS),
		StringCount(FacDivs[facid], MAX_FAC_DIVS),
		StringCount(FacRanks[facid], MAX_FAC_RANKS),
		GetPlayerDistanceFromPoint(playerid, FactionInfo[facid][fLockerPos][0], FactionInfo[facid][fLockerPos][1], FactionInfo[facid][fLockerPos][2])
	);
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(szDialogStr, "\n{AA3333}Disband Faction");
	format(szTitle, sizeof szTitle, "Edit Faction {%6x}(%s)", FactionInfo[facid][fDutyColor], FactionInfo[facid][fName]);
	return ShowPlayerDialog(playerid, DIALOG_EDITFAC, DIALOG_STYLE_LIST, szTitle, szDialogStr, "Select", "Cancel");
}
/*
DisplayDeployDialog(playerid) {

	new string[1024];
	new pfac = PlayerInfo[playerid][pMember];
	new prank = PlayerInfo[playerid][pRank];
	if(FactionInfo[pfac][fSpikes] >= PlayerInfo[playerid][pRank])
	{
 		format(string, sizeof(string),"Spikes (%i/%i deployed)\n",FactionInfo[facid][fName],MAX_SPIKES);
	}
	if(FactionInfo[pfac][fBarricades] >= PlayerInfo[playerid][pRank])
	{
 		format(string, sizeof(string),"Barricades (%i/%i deployed)\n",FactionInfo[facid][fName],MAX_BARRICADES);
	}
	if(FactionInfo[pfac][fCones] >= PlayerInfo[playerid][pRank])
	{
 		format(string, sizeof(string),"Cones (%i/%i deployed)\n",FactionInfo[facid][fName],MAX_CONES);
	}
	if(FactionInfo[pfac][fFlares] >= PlayerInfo[playerid][pRank])
	{
 		format(string, sizeof(string),"Flares (%i/%i deployed)\n",FactionInfo[facid][fName],MAX_FLARES);
	}
	if(FactionInfo[pfac][fBarrels] >= PlayerInfo[playerid][pRank])
	{
 		format(string, sizeof(string),"Barrels (%i/%i deployed)",FactionInfo[facid][fName],MAX_BARRELS);
	}
	return ShowPlayerDialog(playerid, DIALOG_EDITFAC, DIALOG_STYLE_LIST, "Deploy List", szDialogStr, "Select", "Cancel");
}
*/
DisplayDeployDialog(playerid) {

	new string[1024];
    format(string, sizeof(string),
  		"Spikes	(%i/%i deployed)\n\
 		Barricades (%i/%i deployed)\n\
  		Cones (%i/%i deployed)\n\
  		Flares (%i/%i deployed)\n\
		Barrels (%i/%i deployed)",
		TotalSpikes,
		MAX_SPIKES,
		TotalCades,
		MAX_BARRICADES,
		TotalCones,
		MAX_CONES,
		TotalFlares,
		MAX_FLARES,
		TotalBarrels,
		MAX_BARRELS
	);
	return ShowPlayerDialog(playerid, DIALOG_DEPLOY, DIALOG_STYLE_LIST, "Deploy List", string, "Deploy", "Cancel");
}

DisplayDestroyDialog(playerid) {

	new string[1024];
    format(string, sizeof(string),
  		"Spikes	(%i/%i deployed)\n\
 		Barricades (%i/%i deployed)\n\
  		Cones (%i/%i deployed)\n\
  		Flares (%i/%i deployed)\n\
		Barrels	(%i/%i deployed)",
		TotalSpikes,
		MAX_SPIKES,
		TotalCades,
		MAX_BARRICADES,
		TotalCones,
		MAX_CONES,
		TotalFlares,
		MAX_FLARES,
		TotalBarrels,
		MAX_BARRELS
	);
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(string, "\n{AA3333}Destroy All Deploys");
	return ShowPlayerDialog(playerid, DIALOG_DESTROY, DIALOG_STYLE_LIST, "{AA3333}Destroy List", string, "Continue", "Cancel");
}

DisplayDesSpikesDialog(playerid) {

    new sstring[4096];
    new lstring[512];
    new facid = PlayerInfo[playerid][pMember];
    new dutycolor;
    if(FactionInfo[facid][fDutyColor] > 0)
    {
        dutycolor = FactionInfo[facid][fDutyColor];
	}
	else dutycolor = 2263842;
	for(new i = 0; i < MAX_SPIKES; i++)
	{
		new Float: distance = GetPlayerDistanceFromPoint(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
	    format(lstring, sizeof(lstring), "Loc: {3399FF}%s{FFFFFF} | By: {%6x}%s{FFFFFF} (distance: %.0f)", SpikeStrips[i][sDeployedAt], dutycolor, SpikeStrips[i][sDeployedBy], distance);
		format(sstring, sizeof sstring, "%s\n(%d) %s", sstring, i, ((SpikeStrips[i][sObjectID]) ? (lstring) : ("(None)")));
	}
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(sstring, "\n{AA3333}Destroy All Spikes");
	return ShowPlayerDialog(playerid, DIALOG_DES_SPIKES, DIALOG_STYLE_LIST, "{AA3333}Destroy Spikes", sstring, "Destroy", "Cancel");
}

DisplayDesCadesDialog(playerid) {

    new sstring[4096];
    new lstring[512];
    new facid = PlayerInfo[playerid][pMember];
    new dutycolor;
    if(FactionInfo[facid][fDutyColor] > 0)
    {
        dutycolor = FactionInfo[facid][fDutyColor];
	}
	else dutycolor = 2263842;
	for(new i = 0; i < MAX_BARRICADES; i++)
	{
		new Float: distance = GetPlayerDistanceFromPoint(playerid, Barricades[i][sX], Barricades[i][sY], Barricades[i][sZ]);
	    format(lstring, sizeof(lstring), "Loc: {3399FF}%s{FFFFFF} | By: {%6x}%s{FFFFFF} (distance: %.0f)", Barricades[i][sDeployedAt], dutycolor, Barricades[i][sDeployedBy], distance);
		format(sstring, sizeof sstring, "%s\n(%d) %s", sstring, i, ((Barricades[i][sObjectID]) ? (lstring) : ("(None)")));
	}
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(sstring, "\n{AA3333}Destroy All Barricades");
	return ShowPlayerDialog(playerid, DIALOG_DES_CADES, DIALOG_STYLE_LIST, "{AA3333}Destroy Barricades", sstring, "Destroy", "Cancel");
}

DisplayDesConesDialog(playerid) {

    new sstring[4096];
    new lstring[512];
    new facid = PlayerInfo[playerid][pMember];
    new dutycolor;
    if(FactionInfo[facid][fDutyColor] > 0)
    {
        dutycolor = FactionInfo[facid][fDutyColor];
	}
	else dutycolor = 2263842;
	for(new i = 0; i < MAX_CONES; i++)
	{
		new Float: distance = GetPlayerDistanceFromPoint(playerid, Cones[i][sX], Cones[i][sY], Cones[i][sZ]);
	    format(lstring, sizeof(lstring), "Loc: {3399FF}%s{FFFFFF} | By: {%6x}%s{FFFFFF} (distance: %.0f)", Cones[i][sDeployedAt], dutycolor, Cones[i][sDeployedBy], distance);
		format(sstring, sizeof sstring, "%s\n(%d) %s", sstring, i, ((Cones[i][sObjectID]) ? (lstring) : ("(None)")));
	}
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(sstring, "\n{AA3333}Destroy All Cones");
	return ShowPlayerDialog(playerid, DIALOG_DES_CONES, DIALOG_STYLE_LIST, "{AA3333}Destroy Cones", sstring, "Destroy", "Cancel");
}

DisplayDesFlaresDialog(playerid) {

    new sstring[4096];
    new lstring[512];
    new facid = PlayerInfo[playerid][pMember];
    new dutycolor;
    if(FactionInfo[facid][fDutyColor] > 0)
    {
        dutycolor = FactionInfo[facid][fDutyColor];
	}
	else dutycolor = 2263842;
	for(new i = 0; i < MAX_FLARES; i++)
	{
		new Float: distance = GetPlayerDistanceFromPoint(playerid, Flares[i][sX], Flares[i][sY], Flares[i][sZ]);
	    format(lstring, sizeof(lstring), "Loc: {3399FF}%s{FFFFFF} | By: {%6x}%s{FFFFFF} (distance: %.0f)", Flares[i][sDeployedAt], dutycolor, Flares[i][sDeployedBy], distance);
		format(sstring, sizeof sstring, "%s\n(%d) %s", sstring, i, ((Flares[i][sObjectID]) ? (lstring) : ("(None)")));
	}
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(sstring, "\n{AA3333}Destroy All Flares");
	return ShowPlayerDialog(playerid, DIALOG_DES_FLARES, DIALOG_STYLE_LIST, "{AA3333}Destroy Flares", sstring, "Destroy", "Cancel");
}

DisplayDesBarrelsDialog(playerid) {

    new sstring[4096];
    new lstring[512];
    new facid = PlayerInfo[playerid][pMember];
    new dutycolor;
    if(FactionInfo[facid][fDutyColor] > 0)
    {
        dutycolor = FactionInfo[facid][fDutyColor];
	}
	else dutycolor = 2263842;
	for(new i = 0; i < MAX_BARRELS; i++)
	{
		new Float: distance = GetPlayerDistanceFromPoint(playerid, Barrels[i][sX], Barrels[i][sY], Barrels[i][sZ]);
	    format(lstring, sizeof(lstring), "Loc: {3399FF}%s{FFFFFF} | By: {%6x}%s{FFFFFF} (distance: %.0f)", Barrels[i][sDeployedAt], dutycolor, Barrels[i][sDeployedBy], distance);
		format(sstring, sizeof sstring, "%s\n(%d) %s", sstring, i, ((Barrels[i][sObjectID]) ? (lstring) : ("(None)")));
	}
	if(PlayerInfo[playerid][pAdmin] >= 1337) strcat(sstring, "\n{AA3333}Destroy All Barrels");
	return ShowPlayerDialog(playerid, DIALOG_DES_BARRELS, DIALOG_STYLE_LIST, "{AA3333}Destroy Barrels", sstring, "Destroy", "Cancel");
}

/*IsAJudge(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(GetPlayerFactionType(playerid) == 2) return 1;
 	}
	return 0;
}
*/

IsAHitman(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(GetPlayerFactionType(playerid) == 3) return 1;
 	}
	return 0;
}
/*
IsATransport(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(GetPlayerFactionType(playerid) == 4) return 1;
 	}
	return 0;
}
*/
IsAMedic(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(GetPlayerFactionType(playerid) == 5) return 1;
 	}
	return 0;
}

IsACop(playerid) {
	if(IsPlayerConnected(playerid)) {
		if(GetPlayerFactionType(playerid) == 6) return 1;
 	}
	return 0;
}

stock IsMDCPermitted(playerid)
{
	if(IsACop(playerid) == 1) {
		return 1;
	}
	return 0;
}

stock SendDepartmentMessage(string[]) {
	foreach(new i: Player) {
	    if(PlayerInfo[i][pMember] != 0) {
		    if(FactionInfo[PlayerInfo[i][pMember]][fDRadio] == 1) {
                SendClientMessageEx(i, DEPTRADIO, string);
		    }
	    }
	}
}

stock SendRadioMessage(factionid, color, string[])
{
	foreach(new i: Player) {
		if(PlayerInfo[i][pMember] == factionid) {
			SendClientMessageEx(i, color, string);
		}
	    if(PlayerInfo[i][pAdmin] > 1 && BigEar[i] == 4 && BigEarFaction[i] == factionid) {
			new szAntiprivacy[128];
			format(szAntiprivacy, sizeof(szAntiprivacy), "(BE) %s", string);
			SendClientMessageEx(i, color, szAntiprivacy);
		}
	}
}

CMD:gov(playerid, params[])
{
	if(FactionInfo[PlayerInfo[playerid][pMember]][fGovAnnounce] == 1)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/gov)ernment [text]");
			return 1;
		}

		new string[128];
		if(PlayerInfo[playerid][pLeader] >= 1)
		{
		    format(string, sizeof(string), "** %s: %s %s: %s **", GetPlayerFactionName(playerid), GetPlayerFactionRank(playerid), GetPlayerNameEx(playerid), params);
            SendClientMessageToAllEx(COLOR_WHITE, "|___________ Government News Announcement ___________|");
			SendClientMessageToAllEx(COLOR_DBLUE, string);
			Log("logs/faction.log", string);
		}
	}
	return 1;
}
/*
CMD:feditrank(playerid, params[])
{
    new string[128], factionID, rankID, newRank[31];
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "Access denied");
    if(sscanf(params, "dds[31]", factionID, rankID, newRank)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /feditrank [faction id] [rank number] [new rank]");
	if(rankID > 10 || rankID < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 10 for rank number!"); return 1; }
    if(factionID > MAX_FACTIONS || factionID < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 30 for faction id!"); return 1; }
    else
    {
        switch(rankID)
        {
            case 1: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank1]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 1 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 2: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank2]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 2 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 3: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank3]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 3 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 4: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank4]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 4 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 5: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank5]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 5 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 6: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank6]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 6 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 7: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank7]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 7 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 8: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank8]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 8 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 9: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank9]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 9 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 10: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fRank10]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Rank 10 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
        }
    }
	return 1;
}

CMD:feditdiv(playerid, params[])
{
    new string[128], factionID, rankID, newRank[21];
    if(PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "Access denied");
    if(sscanf(params, "dds[21]", factionID, rankID, newRank)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /feditdiv [faction id] [division number] [new division name]");
	if(rankID > 5 || rankID < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 5 for division number!"); return 1; }
    if(factionID > MAX_FACTIONS || factionID < 0) { SendClientMessageEx(playerid, COLOR_GREY, "   Don't go below number 0, or above number 30 for faction id!"); return 1; }
    else
    {
        switch(rankID)
        {
            case 1: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fDiv1]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Division 1 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 2: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fDiv2]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Division 2 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 3: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fDiv3]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Division 3 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 4: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fDiv4]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Division 4 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
            case 5: {
            	mysql_real_escape_string(newRank, FactionInfo[factionID][fDiv5]);
                SaveFaction(factionID);

            	format(string, sizeof(string), "You have changed the title of Division 5 to '%s'.", newRank);
    			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
            }
		}
    }
	return 1;
}
*/
CMD:makeleader(playerid, params[])
{
	if (PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new giveplayerid;
		if(sscanf(params, "d", giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /makeleader [player]");
			return 1;
		}
		SetPVarInt(playerid, "LeadListPID", giveplayerid);
  		ShowPlayerDialog(playerid, DIALOG_LEADASK, DIALOG_STYLE_LIST, "What do you want to grant?", "Leader Level 1\nLeader Level 2\n{FF0000}Revoke Leader", "Select", "Close");

	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
	}
	return 1;
}


CMD:givediv(playerid, params[])
{
    new string[128], giveplayerid, div;
	if(PlayerInfo[playerid][pLeader] >= 1)
	{
	    if(sscanf(params, "ud", giveplayerid, div)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giverank [player] [Div (0(None)-5)]");
		if(div > 5 || div < 0) return SendClientMessageEx(playerid, COLOR_GREY, "Don't go below number 0, or above number 5!");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[playerid][pMember] != PlayerInfo[giveplayerid][pMember]) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your faction!");
			if(div == PlayerInfo[playerid][pDivision]) return SendClientMessageEx(playerid, COLOR_GREY, "This person is already in that division.");

			format(string, sizeof(string), "You have been assigned to a new division by %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[playerid][pDivision] = div;

			format(string, sizeof(string), "Your new division is \'(%s)\'.", GetPlayerFactionDiv(playerid), div);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);

   			format(string, sizeof(string), "%s has given %s division %i in the %s .", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), div, FactionInfo[PlayerInfo[playerid][pMember]][fName]);
			Log("logs/faction.log", string);

			format(string, sizeof(string), "You have given %s \'%s (%d)\'.", GetPlayerNameEx(giveplayerid), GetPlayerFactionDiv(playerid), div);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:giverank(playerid, params[])
{
    new string[128], giveplayerid, rank;
	if (PlayerInfo[playerid][pLeader] == 1)
	{
		if(sscanf(params, "ud", giveplayerid, rank)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giverank [player] [Rank (1-10)]");
		if(rank > 10 || rank < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Don't go below number 1, or above number 10!");

		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[playerid][pMember] != PlayerInfo[giveplayerid][pMember]) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your faction!");
		    if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GREY, "You can't promote or demote your self.");
		    if(PlayerInfo[giveplayerid][pRank] >= PlayerInfo[playerid][pRank]) return SendClientMessageEx(playerid, COLOR_GREY, "You can't promote someone to or above your rank.");
			if(rank == PlayerInfo[giveplayerid][pRank]) return SendClientMessageEx(playerid, COLOR_GREY, "This person already has this rank.");
			if(rank > PlayerInfo[giveplayerid][pRank])
		    {
		        format(string, sizeof(string), "You have been promoted to a higher rank by %s.", GetPlayerNameEx(playerid));
		    }
		    if(rank < PlayerInfo[giveplayerid][pRank])
		    {
		        format(string, sizeof(string), "You have been promoted to a lower rank by %s.", GetPlayerNameEx(playerid));
		    }
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[giveplayerid][pRank] = rank;

			format(string, sizeof(string), "Your new rank is \'%s (%d)\'.", GetPlayerFactionRank(giveplayerid), rank);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);

   			format(string, sizeof(string), "%s has given %s rank %i in the %s .", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, FactionInfo[PlayerInfo[playerid][pMember]][fName]);
			Log("logs/faction.log", string);

			format(string, sizeof(string), "You have given %s \'%s (%d)\'.", GetPlayerNameEx(giveplayerid), GetPlayerFactionRank(giveplayerid), rank);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	if(PlayerInfo[playerid][pLeader] == 2)
	{
	    if(sscanf(params, "ud", giveplayerid, rank)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /giverank [player] [Rank (1-10)]");
		if(rank > 10 || rank < 1) return SendClientMessageEx(playerid, COLOR_GREY, "Don't go below number 1, or above number 10!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[playerid][pMember] != PlayerInfo[giveplayerid][pMember]) return SendClientMessageEx(playerid, COLOR_GRAD1, "That person is not in your faction!");
			if(rank == PlayerInfo[giveplayerid][pRank]) return SendClientMessageEx(playerid, COLOR_GREY, "This person already has this rank.");
			if(rank > PlayerInfo[giveplayerid][pRank])
		    {
		        format(string, sizeof(string), "You have been promoted to a higher rank by %s.", GetPlayerNameEx(playerid));
		    }
		    if(rank < PlayerInfo[giveplayerid][pRank])
		    {
		        format(string, sizeof(string), "You have been promoted to a lower rank by %s.", GetPlayerNameEx(playerid));
		    }
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			PlayerInfo[giveplayerid][pRank] = rank;

			format(string, sizeof(string), "Your new rank is \'%s (%d)\'.", GetPlayerFactionRank(giveplayerid), rank);
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);

   			format(string, sizeof(string), "%s has given %s rank %i in the %s .", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), rank, FactionInfo[PlayerInfo[playerid][pMember]][fName]);
			Log("logs/faction.log", string);

			format(string, sizeof(string), "You have given %s \'%s (%d)\'.", GetPlayerNameEx(giveplayerid), GetPlayerFactionRank(giveplayerid), rank);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:r(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/r)adio [radio chat]");
	if(FactionInfo[PlayerInfo[playerid][pMember]][fRadio] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Your group does not have a radio.");

    if(PlayerInfo[playerid][pDivision] != 0) {
    	format(string, sizeof(string), "** %s (%s) %s: %s **", GetPlayerFactionRank(playerid), GetPlayerFactionDiv(playerid), GetPlayerNameEx(playerid), params);
		SendRadioMessage(PlayerInfo[playerid][pMember], RADIO, string);
	}
	else {
	    format(string, sizeof(string), "** %s %s: %s **", GetPlayerFactionRank(playerid), GetPlayerNameEx(playerid), params);
		SendRadioMessage(PlayerInfo[playerid][pMember], RADIO, string);
	}
	format(string, sizeof(string), "(radio) %s",params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,15.0,5000);
	return 1;
}

CMD:d(playerid, params[])
{
	return SendClientMessageEx(playerid, COLOR_GREY, "The (/d)epartment chat has been renamed to /dept!");
	//return cmd_dept(playerid, params);
}


CMD:dept(playerid, params[])
{
	new string[128];
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/dept)[department chat]");
	if(FactionInfo[PlayerInfo[playerid][pMember]][fDRadio] == 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "Your group does not have access to this radio.");

    if(PlayerInfo[playerid][pDivision] != 0) {
    	format(string, sizeof(string), "** %s %s (%s) %s: %s **", FactionInfo[PlayerInfo[playerid][pMember]][fName], GetPlayerFactionRank(playerid), GetPlayerFactionDiv(playerid), GetPlayerNameEx(playerid), params);
		SendDepartmentMessage(string);
	}
	else {
	    format(string, sizeof(string), "** %s %s %s: %s **", FactionInfo[PlayerInfo[playerid][pMember]][fName], GetPlayerFactionRank(playerid), GetPlayerNameEx(playerid), params);
		SendDepartmentMessage(string);
	}
	format(string, sizeof(string), "(radio) %s",params);
	SetPlayerChatBubble(playerid,string,COLOR_WHITE,15.0,5000);
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pReceiver] > 0)
		{
			if(GetPVarType(i, "pReceiverOn"))
			{
				if(GetPVarInt(i, "pReceiverMLeft") > 0)
				{
					format(string, sizeof(string), "** (receiver) %s: %s", GetPlayerNameEx(playerid), params);
					SendClientMessageEx(i, DEPTRADIO, string);
					SetPVarInt(i, "pReceiverMLeft", GetPVarInt(i, "pReceiverMLeft") - 1);
				}
				else
				{
					PlayerInfo[i][pReceiver]--;
					SetPVarInt(i, "pReceiverMLeft", 4);
					SendClientMessageEx(i, DEPTRADIO, "Your receiver ran out of batteries!");
				}
			}
		}
	}
	return 1;
}

CMD:m(playerid, params[]) {
    if(!isnull(params)) {
        if(IsACop(playerid) == 1 || IsAMedic(playerid) == 1) {
            new
				szMessage[128];

			format(szMessage, sizeof(szMessage), "(megaphone) %s: %s", GetPlayerNameEx(playerid), params);
			ProxDetector(80.0, playerid, szMessage, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW,1);
        }
        else SendClientMessageEx(playerid, COLOR_GRAD2, "   You do not have authority to use the megaphone.");
    }
    else SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/m)egaphone [megaphone chat]");
	return 1;
}

CMD:fackick(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fackick [player]");


		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pMember] >= 1 || PlayerInfo[giveplayerid][pLeader] >= 1)
			{
				format(string, sizeof(string), "You have been faction-kicked, by %s.", GetPlayerNameEx( playerid ));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pMember] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pModel] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				pTazer{giveplayerid} = 0;
				SetPlayerToTeamColor(giveplayerid);
				format(string, sizeof(string), "You have faction-kicked %s.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't kick someone from a faction if they're not a member.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified..");
		}
	}
	return 1;
}

CMD:showbadge(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /showbadge [player]");

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(ProxDetectorS(5.0, playerid, giveplayerid)) {
				switch(PlayerInfo[playerid][pMember]) {
				case 1 .. 4, 5, 6, 7, 10, 11, 12, 13,16,17: {

						new
						infoArrays[3][64];

						GetPlayerFactionInfo(playerid, infoArrays[0], infoArrays[1], infoArrays[2]);

						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "%s %s is a duly sworn member of the %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Current Assignment: %s.", infoArrays[1]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						switch(PlayerInfo[playerid][pMember]) {
						case 1: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the City of Los Santos.");
						case 2: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
						case 3: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the City of San Fierro.");
						case 4: { }
						case 12: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the Nation of Tierra Robada.");
						case 13: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
						case 16: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
						default: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the State of San Andreas.");
						}
						if(PlayerInfo[playerid][pMember] != 6 && PlayerInfo[playerid][pMember] != 12 && PlayerInfo[playerid][pMember] != 4 && PlayerInfo[playerid][pMember] != 10) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						else if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						else if(PlayerInfo[playerid][pMember] != 4) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to assist in arrests.");
						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "* %s shows their badge to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				default: SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service faction.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service faction.");
	}
	return 1;
}

CMD:hshowbadge(playerid, params[])
{
	if(IsAHitman(playerid) == 1)
	{
		new string[128], giveplayerid, rank, faction, division;
		if(sscanf(params, "uiii", giveplayerid, faction, rank, division))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hshowbadge [player] [faction] [rank] [division]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 SFPD |4 FDSA |5 Judicial System");
   			SendClientMessageEx(playerid, COLOR_GRAD2, "|6 Government |7 SASD |9 SA News 10 Taxi Company");
      		SendClientMessageEx(playerid, COLOR_GRAD1, "|11 SAAS |12 Tierra Robada |13 NOOSE |16 SHAFT");
			return 1;
		}

		if(giveplayerid != INVALID_PLAYER_ID) {
			if(ProxDetectorS(5.0, playerid, giveplayerid)) {
				switch(faction) {
				case 1 .. 4, 5, 6, 7, 10, 11, 12, 13: {

						new
						infoArrays[3][64];

						switch (faction) // infoArrays[2]/infoArrays[0]/infoArrays[1] data is pulled from here
						{
						    case 1:
							{
					            infoArrays[2] = "LSPD";
								switch(rank)
								{
								    case 1: infoArrays[0] = "Officer";
								    case 2: infoArrays[0] = "Corporal";
								    case 3: infoArrays[0] = "Sergeant";
								    case 4: infoArrays[0] = "Lieutenant";
								    case 5: infoArrays[0] = "Captain";
								    case 6: infoArrays[0] = "Chief";
								    default: infoArrays[0] = "Cadet";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "General Duties";
								    case 2: infoArrays[1] = "DET";
								    case 3: infoArrays[1] = "FTO";
								    case 4: infoArrays[1] = "IA";
								    case 5: infoArrays[1] = "SWAT";
								    case 6: infoArrays[1] = "HSIU";
								    default: infoArrays[1] = "General Duties";
								}
							}
					  		case 2:
							{
					            infoArrays[2] = "FBI";
								switch(rank)
								{
								    case 1: infoArrays[0] = "Staff";
								    case 2: infoArrays[0] = "Agent";
								    case 3: infoArrays[0] = "Senior Agent";
								    case 4: infoArrays[0] = "Special Agent";
								    case 5: infoArrays[0] = "Assistant Director";
								    case 6: infoArrays[0] = "Director";
								    default: infoArrays[0] = "Intern";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "General Duties";
								    case 2: infoArrays[1] = "GU";
								    case 3: infoArrays[1] = "FAN";
								    case 4: infoArrays[1] = "CID";
								    case 5: infoArrays[1] = "IA";
									case 6: infoArrays[1] = "NSB";
								    default: infoArrays[1] = "General Duties";
								}
							}
					  		case 3:
							{
					            infoArrays[2] = "SFPD";
								switch(rank)
								{
									case 1: infoArrays[0] = "Officer";
									case 2: infoArrays[0] = "Corporal";
									case 3: infoArrays[0] = "Sergeant";
									case 4: infoArrays[0] = "Lieutenant";
									case 5: infoArrays[0] = "Captain";
									case 6: infoArrays[0] = "Chief";
									default: infoArrays[0] = "Cadet";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "HR";
									case 2: infoArrays[1] = "ERT";
								    case 3: infoArrays[1] = "IA";
								    case 4: infoArrays[1] = "SO";
								    case 5: infoArrays[1] = "DOC";
								    default: infoArrays[1] = "General Duties";
								}
							}
					  		case 4:
							{
					            infoArrays[2] = "FDSA";
								switch(rank)
								{
									case 1: infoArrays[0] = "EMT Intermediate";
									case 2: infoArrays[0] = "EMT Paramedic";
									case 3: infoArrays[0] = "Lieutenant";
									case 4: infoArrays[0] = "Captain";
									case 5: infoArrays[0] = "Deputy Chief";
									case 6: infoArrays[0] = "Chief";
									default: infoArrays[0] = "EMT Basic";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "FD";
								    case 2: infoArrays[1] = "Life Flight";
								    case 3: infoArrays[1] = "T&R";
								    default: infoArrays[1] = "General Duties";
								}
							}
							case 5:
							{
						        infoArrays[2] = "Judicial";
								switch(rank)
								{
									case 1: infoArrays[0] = "Clerk of Court";
									case 2: infoArrays[0] = "District Attorney";
									case 3: infoArrays[0] = "District Judge";
									case 4: infoArrays[0] = "Appellate Judge";
									case 5: infoArrays[0] = "Associate Justice";
									case 6: infoArrays[0] = "Chief Justice";
									default: infoArrays[0] = "Fugitive Recovery Agent";
								}
								infoArrays[1] = "None";
							}
					  		case 6:
							{
					            infoArrays[2] = "State Government";
								switch(rank)
								{
									case 1: infoArrays[0] = "Staff Member";
									case 2: infoArrays[0] = "G.E.T. Officer";
									case 3: infoArrays[0] = "Legislator";
									case 4: infoArrays[0] = "Government Cabinet";
									case 5: infoArrays[0] = "Vice President";
									case 6: infoArrays[0] = "President";
									default: infoArrays[0] = "Intern";
								}
								infoArrays[1] = "None";
							}
					  		case 7:
							{
						        infoArrays[2] = "SASD";
								switch(rank)
								{
									case 1: infoArrays[0] = "Deputy";
									case 2: infoArrays[0] = "Senior Deputy";
									case 3: infoArrays[0] = "Sergeant";
									case 4: infoArrays[0] = "Lieutenant";
									case 5: infoArrays[0] = "Captain";
									case 6: infoArrays[0] = "Sheriff";
									default: infoArrays[0] = "Trainee";
								}
								switch(division)
								{
								    case 2: infoArrays[1] = "TET";
								    case 3: infoArrays[1] = "SCU";
								    case 4: infoArrays[1] = "SORT";
								    case 5: infoArrays[1] = "FTO";
								    default: infoArrays[1] = "Patrol";
								}
							}
							case 8:
							{
							    infoArrays[2] = "Hitman Agency";
							    switch(rank)
							    {
					    			case 1: infoArrays[0] = "Freelancer";
									case 2: infoArrays[0] = "Marksman";
									case 3: infoArrays[0] = "Agent";
									case 4: infoArrays[0] = "Special Agent";
									case 5: infoArrays[0] = "Vice Director";
									case 6: infoArrays[0] = "Director";
									default: infoArrays[0] = "Freelancer";
								}
								infoArrays[1] = "None";
							}
							case 9:
							{
								infoArrays[2] = "SANews";
								switch(rank)
								{
									case 1: infoArrays[0] = "Local Reporter";
									case 2: infoArrays[0] = "Local Editor";
									case 3: infoArrays[0] = "Network Anchor";
									case 4: infoArrays[0] = "Network Editor";
									case 5: infoArrays[0] = "Asst. Network Producer";
									case 6: infoArrays[0] = "Network Producer";
									default: infoArrays[0] = "Intern";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "Security";
								    case 2: infoArrays[1] = "IA";
								    case 3: infoArrays[1] = "Tech Support";
								    case 4: infoArrays[1] = "TnR";
								    default: infoArrays[1] = "General";
								}
							}
					   		case 10:
							{
					            infoArrays[2] = "San Andreas Department of Transportation";
								switch(rank)
								{
									case 1: infoArrays[0] = "Trainee";
									case 2: infoArrays[0] = "Taxi Rookie";
									case 3: infoArrays[0] = "Cabbie";
									case 4: infoArrays[0] = "Dispatcher";
									case 5: infoArrays[0] = "Shift Supervisor";
									case 6: infoArrays[0] = "Taxi Company Owner";
									default: infoArrays[0] = "Trainee";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "Internal Affairs";
								    case 2: infoArrays[1] = "Alternative Transportation Operators";
								    case 3: infoArrays[1] = "T&R";
								    default: infoArrays[1] = "None";
								}
							}
							case 11:
							{
					            infoArrays[2] = "SAAS";
								switch(rank)
					 			{
					 			    case 0: infoArrays[0] = "Private";
					 				case 1: infoArrays[0] = "Corporal";
					 				case 2: infoArrays[0] = "Sergeant";
					 				case 3: infoArrays[0] = "Lieutenant";
					 				case 4: infoArrays[0] = "Captain";
					 				case 5: infoArrays[0] = "Major";
					 				case 6: infoArrays[0] = "General";
									default: infoArrays[0] = "Private";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "AIR";
								    case 2: infoArrays[1] = "ARM";
								    case 3: infoArrays[1] = "VET";
									case 4: infoArrays[1] = "AIR SF";
									case 5: infoArrays[1] = "SAASA";
									case 6: infoArrays[1] = "INF";
									case 7: infoArrays[1] = "CM";
								    default: infoArrays[1] = "General Duties";
								}
							}
							case 12:
							{
						        infoArrays[2] = "Tierra Robada";
								if(division == 1 || division == 0)
						    	{
									switch(rank)
									{
										case 1: infoArrays[0] = "Citizen";
										case 2: infoArrays[0] = "People's Representative";
										case 3: infoArrays[0] = "Tribal Representative";
										case 4: infoArrays[0] = "Mayor";
										case 5: infoArrays[0] = "Ruling Council Member";
										case 6: infoArrays[0] = "Executive Officer of RC";
										default: infoArrays[0] = "Resident";
									}
								}
								else if(division == 2)
								{
									switch(rank)
									{
										case 1: infoArrays[0] = "Citizen";
										case 2: infoArrays[0] = "Private";
										case 3: infoArrays[0] = "Lieutenant";
										case 4: infoArrays[0] = "Captain";
										case 5: infoArrays[0] = "General";
										case 6: infoArrays[0] = "Executive Officer of RC";
										default: infoArrays[0] = "Resident";
									}
								}
								else if(division == 3)
								{
									switch(rank)
									{
										case 1: infoArrays[0] = "Citizen";
										case 2: infoArrays[0] = "Trainee";
										case 3: infoArrays[0] = "Lieutenant";
										case 4: infoArrays[0] = "Captain";
										case 5: infoArrays[0] = "Chief";
										case 6: infoArrays[0] = "Executive Officer of RC";
										default: infoArrays[0] = "Resident";
									}
								}
								else if(division == 4)
								{
									switch(rank)
									{
										case 1: infoArrays[0] = "Citizen";
										case 2: infoArrays[0] = "Aide";
										case 3: infoArrays[0] = "Staff";
										case 4: infoArrays[0] = "Ambassador";
										case 5: infoArrays[0] = "Councelor General";
										case 6: infoArrays[0] = "Executive Officer of RC";
										default: infoArrays[0] = "Resident";
									}
								}
								else if(division == 5)
								{
									switch(rank)
									{
										case 1: infoArrays[0] = "Citizen";
										case 2: infoArrays[0] = "Staff";
										case 3: infoArrays[0] = "Assistant Director";
										case 4: infoArrays[0] = "Director";
										case 5: infoArrays[0] = "Chief Administrator";
										case 6: infoArrays[0] = "Executive Officer of RC";
										default: infoArrays[0] = "Resident";
									}
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "Civil";
								    case 2: infoArrays[1] = "AF";
								    case 3: infoArrays[1] = "ES";
								    case 4: infoArrays[1] = "DC";
								    case 5: infoArrays[1] = "TRAA";
								    default: infoArrays[1] = "Civil";
								}
							}
							case 13:
							{
					            infoArrays[2] = "NOOSE";
								switch(rank)
								{
					   				case 0: infoArrays[0] = "Ensign";
					       			case 1: infoArrays[0] = "Marksman";
					       			case 2: infoArrays[0] = "Elite Marksman";
					          		case 3: infoArrays[0] = "Operative";
					            	case 4: infoArrays[0] = "Elite Operative";
					             	case 5: infoArrays[0] = "Vice Commander";
					              	case 6: infoArrays[0] = "Commander";
					               	default: infoArrays[0] = "Ensign";
								}
								switch(division)
								{
								    case 1: infoArrays[1] = "AIR";
								    case 2: infoArrays[1] = "LRSS";
								    case 3: infoArrays[1] = "VET";
								    default: infoArrays[1] = "General Duties";
								}
							}
							case 16:
							{

								infoArrays[2] = "S.H.A.F.T";
								switch(rank)
								{
								case 0: infoArrays[0] = "Probationary Agent";
								case 1: infoArrays[0] = "Agent";
								case 2: infoArrays[0] = "Special Agent";
								case 3: infoArrays[0] = "Supervisory Special Agent";
								case 4: infoArrays[0] = "Special Agent in Charge";
								case 5: infoArrays[0] = "Deputy Director";
								case 6: infoArrays[0] = "Director";
								default: infoArrays[0] = "Probationary Agent";
								}
								switch(division)
								{
								case 1: infoArrays[1] = "IA";
								case 2: infoArrays[1] = "ATT";
								case 3: infoArrays[1] = "TAR";
								case 4: infoArrays[1] = "FO";
								default: infoArrays[1] = "General Duties";
								}
							}
							case 17:
							{

								infoArrays[2] = "SA:PA";
								switch(rank)
								{
								case 0: infoArrays[0] = "Rookie";
								case 1: infoArrays[0] = "Patrol Officer";
								case 2: infoArrays[0] = "Sergeant";
								case 3: infoArrays[0] = "Lieutenant";
								case 4: infoArrays[0] = "Captain";
								case 5: infoArrays[0] = "Assistant Chief of Ops";
								case 6: infoArrays[0] = "Chief of Operations";
								default: infoArrays[0] = "Rookie";
								}
								switch(division)
								{
								case 1: infoArrays[1] = "IA";
								case 2: infoArrays[1] = "T&R";
								case 3: infoArrays[1] = "AIR";
								default: infoArrays[1] = "General Duties";
								}
							}
						    default: { infoArrays[2] = "None"; infoArrays[1] = "None"; infoArrays[0] = "N/A"; }
						}

						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "%s %s is a duly sworn member of the %s.", infoArrays[0], GetPlayerNameEx(playerid), infoArrays[2]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						format(string, sizeof(string), "Current Assignment: %s.", infoArrays[1]);
						SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
						switch(faction) {
						case 1: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the City of Los Santos.");
						case 2: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
						case 3: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the City of San Fierro.");
						case 4: { }
						case 12: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the Nation of Tierra Robada.");
						case 13: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
						case 16: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the United States Government.");
						default: SendClientMessageEx(giveplayerid, COLOR_WHITE, "Under the Authority of the State of San Andreas.");
						}
						if(faction != 6 && faction != 12 && faction != 4 && faction != 10) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						else if(faction == 12 && division == 2) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to arrest.");
						else if(faction != 4) SendClientMessageEx(giveplayerid, COLOR_WHITE, "Official has the authority to assist in arrests.");
						SendClientMessageEx(giveplayerid, COLOR_GRAD2, "----------------------------------------------------------------------------------------------------");
						format(string, sizeof(string), "* %s shows their badge to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					default: SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service faction.");
				}
			}
			else SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
		}
		else SendClientMessageEx(playerid, COLOR_WHITE, "You are not in a civil service faction.");
	}
	return 1;
}

CMD:order(playerid, params[])
{
	if(IsAHitman(playerid) == 1)
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GREY, "You cannot do this right now.");
		if(IsPlayerInRangeOfPoint(playerid, 4.0, -71.419654846191,1360.4097900391,1080.2185058594) || IsPlayerInRangeOfPoint(playerid, 6.0, 1415.727905, -1299.371093, 15.054657))
		{
			if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");
			new Hitman[32], skin = -1;
			if(sscanf(params, "s[32]D", Hitman, skin))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /order [name]");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 1: Knife ($800), SDPistol ($1000), Shotgun ($1500), Skin ($2500), Desert Eagle ($5000), MP5 ($2500), Kevlar Vest ($6000), firstaid ($500)");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 2: Rifle ($3000), AK47 ($10,000), M4 ($12,000)");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 3: SPAS-12 ($35,000), Sniper ($35,000)");
				SendClientMessageEx(playerid, COLOR_GRAD2, " Rank 4: C4 ($50,000)");
				return 1;
			}
			else if(strcmp(Hitman,"skin",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1) {
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that!");
				}
				else if(IsInvalidSkin(skin)) {
					SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /order skin [skin ID]");
				}
				else if(GetPlayerCash(playerid) >= 2500) {
					SetPlayerSkin(playerid, skin);
					PlayerInfo[playerid][pModel] = skin;
					GivePlayerCash(playerid, -2500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"You have purchased a skin!");
				}
				else SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that!");
			}
			else if(strcmp(Hitman,"Knife",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 800)
				{
					GivePlayerValidWeapon(playerid, 4, 3);
					GivePlayerCash(playerid, -800);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a knife!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"firstaid",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 500)
				{
					SetPlayerHealth(playerid, 100);
					GivePlayerCash(playerid, -500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a firstaid!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"SDPistol",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1000)
				{
					GivePlayerValidWeapon(playerid, 23, 99999);
					GivePlayerCash(playerid, -1000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a silenced pistol!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Shotgun",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 1500)
				{
					GivePlayerValidWeapon(playerid, 25, 99999);
					GivePlayerCash(playerid, -1500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a shotgun!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Deagle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) > 5000)
				{
					GivePlayerValidWeapon(playerid, 24, 99999);
					GivePlayerCash(playerid, -5000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a Desert Eagle!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"MP5",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, " You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 2500)
				{
					GivePlayerValidWeapon(playerid, 29, 99999);
					GivePlayerCash(playerid, -2500);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an MP5!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Rifle",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 3000)
				{
					GivePlayerValidWeapon(playerid, 33, 99999);
					GivePlayerCash(playerid, -3000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a rifle!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"AK47",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "   you are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 10000)
				{
					GivePlayerValidWeapon(playerid, 30, 99999);
					GivePlayerCash(playerid, -10000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an AK-47!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"M4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 2)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 12000)
				{
					GivePlayerValidWeapon(playerid, 31, 99999);
					GivePlayerCash(playerid, -12000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased an M4!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Vest",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 6000)
				{
					SetPlayerArmour(playerid, 100);
					GivePlayerCash(playerid, -6000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a kevlar vest!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Spas12",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 27, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a SPAS-12!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"Sniper",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 3)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "You are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 35000)
				{
					GivePlayerValidWeapon(playerid, 34, 99999);
					GivePlayerCash(playerid, -35000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased a sniper rifle!");
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
			else if(strcmp(Hitman,"C4",true) == 0)
			{
				if(PlayerInfo[playerid][pRank] < 4)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "Yyou are not the required rank for that weapon!");
					return 1;
				}
				if(GetPlayerCash(playerid) >= 50000)
				{
					PlayerInfo[playerid][pC4Get] = 1;
					PlayerInfo[playerid][pBombs]++;
					GivePlayerCash(playerid, -50000);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"   You have purchased one block of C4!");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY,"   You can't afford that package!");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You are not at the gun shack!");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a member of the hitman agency!");
		return 1;
	}
	return 1;
}

CMD:facban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], giveplayerid, faction;
		if(sscanf(params, "ui", giveplayerid, faction))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /facban [player] [factionid]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 SFPD |4 FDSA |5 Judicial System");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|6 Government |7 SASD |8 Hitman |9 SA News");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|10 Taxi Company |11 SAAS |12 Tierra Robada");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|13 NOOSE | 16 SHAFT");
			return 1;
		}

		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pFactionBanned] >= 1) return SendClientMessageEx(playerid, COLOR_WHITE, "This player is already faction-banned, the system does not support multiple bans.");
			if( faction >= 1 && faction < 17 )
			{
				PlayerInfo[giveplayerid][pFactionBanned] = faction;
				format(string, sizeof(string), "You have faction-banned %s from faction %d.", GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pFactionBanned]);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "You have been faction-banned, by %s.", GetPlayerNameEx( playerid ));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pMember] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				PlayerInfo[giveplayerid][pModel] = NOOB_SKIN;
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerSkin(giveplayerid, NOOB_SKIN);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid faction id.");
				SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 SFPD |4 FDSA |5 Judicial System");
				SendClientMessageEx(playerid, COLOR_GRAD2, "|6 Government |7 SASD |8 Hitman |9 SA News");
				SendClientMessageEx(playerid, COLOR_GRAD1, "|10 Taxi Company |11 SAAS |12 Tierra Robada");
				SendClientMessageEx(playerid, COLOR_GRAD1, "|13 NOOSE |16 SHAFT");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:faccsfunban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /faccsfunban [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if( PlayerInfo[giveplayerid][pCSFBanned] == 0 ) return SendClientMessageEx( playerid, COLOR_WHITE, "That player isn't banned from Civil Service Factions." );
			PlayerInfo[giveplayerid][pCSFBanned] = 0;
			format(string, sizeof(string), "You have unbanned Player %s from all Civil Services Factions.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have been unbanned from Civil Services Factions, by %s.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:facunban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 1337)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /facunban [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if( PlayerInfo[giveplayerid][pFactionBanned] == 0 ) return SendClientMessageEx( playerid, COLOR_WHITE, "That player isn't banned from any factions." );
			format(string, sizeof(string), "You have unbanned Player %s from Faction %d.", GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pFactionBanned]);
			SendClientMessageEx(playerid, COLOR_WHITE, string);
			format(string, sizeof(string), "You have been unbanned from Faction %d, by %s.", PlayerInfo[giveplayerid][pFactionBanned], GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
			PlayerInfo[giveplayerid][pFactionBanned] = 0;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:faccsfban(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /faccsfban [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if( PlayerInfo[giveplayerid][pMember] >= 1 || PlayerInfo[giveplayerid][pLeader] >= 1 )
			{
				PlayerInfo[giveplayerid][pCSFBanned] = 1;
				format(string, sizeof(string), "You have been faction-banned, by %s, from ALL Civil Service Factions.", GetPlayerNameEx( playerid ));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[giveplayerid][pMember] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pModel] = NOOB_SKIN;
				SetPlayerToTeamColor(giveplayerid);
				SetPlayerSkin(giveplayerid, NOOB_SKIN);
				format(string, sizeof(string), "You have faction-banned %s from all CSF factions.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "You can't kick someone from a faction if they're not a leader / member.");
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Player not connected.");
		}
	}
	return 1;
}

CMD:switchfac(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator] >= 1)
	{
		new string[128], factionid;
		if(sscanf(params, "d", factionid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /switchfac [factionid]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 SFPD |4 FDSA |5 Judicial System");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|6 Government |7 SASD |9 SA News");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|10 Taxi Company |11 SAAS |12 Tierra Robada");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|13 NOOSE |16 SHAFT");
			return 1;
		}
		if(PlayerInfo[playerid][pLeader] != 0) return SendClientMessage(playerid, COLOR_WHITE, "You are a leader from a faction, please use /quitfaction then try again.");
		switch(factionid)
		{
		case 1:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (LSPD).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 2:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (FBI).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 3:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (SFPD).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 4:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (FDSA).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 5:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (Judicial System).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 6:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (Government).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 7:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (SASD).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 8:
			{
				/*format(string, sizeof(string), "You have switched to faction ID %d (Hitman Agency).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;*/
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You can not switch to the Hitman Agency with /switchfac.");
			}
		case 9:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (SA News).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 10:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (Taxi Company).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 11:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (SAAS).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 12:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (Tierra Robada).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 13:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (NOOSE).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		case 16:
			{
				format(string, sizeof(string), "You have switched to faction ID %d (SHAFT).", factionid);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[playerid][pMember] = factionid;
				PlayerInfo[playerid][pRank] = 6;
				PlayerInfo[playerid][pFMember] = 255;
			}
		default:
			{
				SendClientMessageEx( playerid, COLOR_WHITE, "Invalid Faction ID!" );
				SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 SFPD |4 FDSA |6 Government ");
				SendClientMessageEx(playerid, COLOR_GRAD2, "|7 SASD |8 Hitman |9 SA News");
				SendClientMessageEx(playerid, COLOR_GRAD1, "|10 Taxi Company |11 SAAS |12 Tierra Robada");
				SendClientMessageEx(playerid, COLOR_GRAD1, "|13 NOOSE |16 SHAFT");
			}
		}
	}
	return 1;
}

CMD:lspdsveh(playerid, params[])
{
	new carid;
	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pLeader] == 1)
	{
		RespawnLSPDV(carid);
	}
	return 1;
}

stock RespawnLSPDV(carid)
{
	for(new v = 0; v < sizeof(LSPDVehicles); v++) {
	    if(carid == LSPDVehicles[v])
		{
			SetVehicleToRespawn(carid);
			return 1;
		}
	}
	return 0;
}

CMD:fcheck(playerid, params[]) {
if (PlayerInfo[playerid][pAdmin] >= 1)
{
	new giveplayerid;
	new facfam[64], rank[64], employer[64], division[64], coordsstring[128];
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /fcheck [player]");

	if(IsPlayerConnected(giveplayerid))
	{
		if(PlayerInfo[giveplayerid][pFMember] < 255)
		{
		    facfam = "Family";
			format(employer, sizeof(employer), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyName]);
			switch(PlayerInfo[giveplayerid][pRank])
			{
				case 1: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank1]);
				case 2: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank2]);
				case 3: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank3]);
				case 4: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank4]);
				case 5: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank5]);
	  			case 6: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank6]);
				default: format(rank, sizeof(rank), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyRank1]);
			}
			SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
			format(coordsstring, sizeof(coordsstring), "Name: %s | %s: %s | Rank: %s (%d)", GetPlayerNameEx(giveplayerid), facfam, employer, rank, PlayerInfo[giveplayerid][pRank]);
			SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
			SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
		}
		else if(PlayerInfo[giveplayerid][pMember] > 0 && PlayerInfo[playerid][pAdmin] >= 2)
		{
			GetPlayerFactionInfo(giveplayerid, rank, division, employer);
		    facfam = "Faction";
			SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
			format(coordsstring, sizeof(coordsstring), "Name: %s | %s: %s | Rank: %s (%d) | Division: %s", GetPlayerNameEx(giveplayerid), facfam, employer, rank, PlayerInfo[giveplayerid][pRank], division);
			SendClientMessageEx(playerid, COLOR_GRAD5,coordsstring);
			SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
			if(PlayerInfo[playerid][pAdmin] >= 2) {
			format(coordsstring, sizeof(coordsstring), "%s is not in a Family or Faction.", GetPlayerNameEx(giveplayerid));
			}
			else
			{
			format(coordsstring, sizeof(coordsstring), "%s is not in a Family.", GetPlayerNameEx(giveplayerid));
			}
			SendClientMessageEx(playerid, COLOR_RED, coordsstring);
			SendClientMessageEx(playerid, COLOR_GREEN, "_____________________________________________________");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
	}
}
	return 1;
}

CMD:leaderhelp(playerid, params[])
{
    if (PlayerInfo[playerid][pLeader] >= 1) {
        SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
        SendClientMessageEx(playerid, COLOR_WHITE,"*** LEADER HELP *** - Type a command for more infomation.");
        SendClientMessageEx(playerid, COLOR_GRAD3,"*** LEADERS *** /invite /uninvite /giverank /givediv /ouninvite");
        if(IsAGov(playerid) == 1) {
            SendClientMessageEx(playerid, COLOR_GRAD3,"*** LEADERS *** /settax /taxwithdraw (give some money to the civil service factions.)");
        }
        SendClientMessageEx(playerid, COLOR_GREEN,"_______________________________________");
    }
    else {
        SendClientMessageEx(playerid, COLOR_GREY, "You're not a leader.");
    }
    return 1;
}

CMD:searchcar(playerid, params[])
{
    new string[128];
    if (!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI / Coastguard!");
        return 1;
    }
    if(GetPVarInt(playerid, "Injured") != 0) {
		SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
		return 1;
	}
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicles.");
        return 1;
    }
	if(!IsABike(closestcar) && !IsAPlane(closestcar)) {
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
	if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "The vehicle's trunk must be opened in order to search it.");
		return 1;
	}
	}
    foreach(new i: Player)
	{
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1)
		{
            string[0] = 0;
            for(new x = 0; x < 3; x++)
			{
                if(PlayerVehicleInfo[i][v][pvWeapons][x] != 0)
				{
                    new
                        szWep[20];

                    GetWeaponName(PlayerVehicleInfo[i][v][pvWeapons][x], szWep, sizeof(szWep));
                    if(isnull(string)) format(string, sizeof(string), "* Trunk contains: %s", szWep);
                    else format(string, sizeof(string), "%s, %s", string, szWep);
                }
            }
            if(!isnull(string)) SendClientMessageEx(playerid, COLOR_WHITE, string);
            else SendClientMessageEx(playerid, COLOR_WHITE, "* Trunk contains: nothing.");
        }
    }
    return 1;
}

CMD:takecarweapons(playerid, params[])
{
    if (PlayerInfo[playerid][pMember] != 1 && PlayerInfo[playerid][pLeader] != 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pLeader] != 2 && PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pLeader] != 3)
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You're not a law enforcement officer.");
        return 1;
    }
    new carid = GetPlayerVehicleID(playerid);
    new closestcar = GetClosestCar(playerid,carid);
    if(!IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0))
	{
        SendClientMessageEx(playerid,COLOR_GREY,"You are not near any vehicles.");
        return 1;
    }
    foreach(new i: Player)
	{
        new v = GetPlayerVehicle(i, closestcar);
        if(v != -1)
		{
            PlayerVehicleInfo[i][v][pvWeapons][0] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][1] = 0;
            PlayerVehicleInfo[i][v][pvWeapons][2] = 0;
        }
        SendClientMessageEx(playerid, COLOR_WHITE,  "All weapons have been removed from this vehicle.");
    }
    return 1;
}

CMD:gate(playerid, params[])
{
	new string[128];
    if(IsACop(playerid))
	{
        GetPlayerPos( playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(LSPDGate, Positions[1][0], Positions[1][1], Positions[1][2]);
        GetDynamicObjectPos(LSPDGate2, Positions[4][0], Positions[4][1], Positions[4][2]);
        GetDynamicObjectPos(SFPDGate1, Positions[6][0], Positions[6][1], Positions[6][2]);
        GetDynamicObjectPos(SFPDGate2, Positions[7][0], Positions[7][1], Positions[7][2]);
        GetDynamicObjectPos(SFPDGate3, Positions[8][0], Positions[8][1], Positions[8][2]);
        GetDynamicObjectPos(FBIGate1, Positions[2][0], Positions[2][1], Positions[2][2]);
        GetDynamicObjectPos(FBIGate2, Positions[3][0], Positions[3][1], Positions[3][2]);
        GetDynamicObjectPos(NGGate, Positions[5][0], Positions[5][1], Positions[5][2]);
       	GetDynamicObjectPos(SASDGate1, Positions[9][0], Positions[9][1], Positions[9][2]);
        GetDynamicObjectPos(SASDGate2, Positions[10][0], Positions[10][1], Positions[10][2]);
        GetDynamicObjectPos(SASDGate3, Positions[11][0], Positions[11][1], Positions[11][2]);
        GetDynamicObjectPos(nationalGATE, Positions[12][0], Positions[12][1], Positions[12][2]);
        GetDynamicObjectPos(nationalGATE2, Positions[13][0], Positions[13][1], Positions[13][2]);

        if(IsPlayerInRangeOfPoint(playerid, 8.0, 1379.7907714844, -1678.4444580078, 13.386324882507)) {
            if(COURTGStatus == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(COURTGate, 1389.12402344,-1679.52185059,12.97999668, 4);
                COURTGStatus = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(COURTGate, 1383.96484375,-1679.52185059,12.97999668, 4);
                COURTGStatus = 0;
            }
        }
        if(IsPlayerInRangeOfPoint(playerid, 8.0, 1374.4561767578, -324.36892700195, 2.9602181911469)) {
            if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] >= 4) {
            	if(SFPDGStatus == 0) {
            	    format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
            	    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	    SetDynamicObjectRot(SFPDGate, 0, 359.49356079102, 18.847045898438);
            	    SFPDGStatus = 1;
            	}
            	else {
            	    format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
            	    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            	    SetDynamicObjectRot(SFPDGate, 0, 89.784210205078, 18.848266601563);
            	    SFPDGStatus = 0;
            	}
        	}
		}

		// Trucker checkpoint games
        if(IsPlayerInRangeOfPoint(playerid, 5.0, -1398.81823730,-817.38598633,81.53202057)) {
            if(CheckPointGateStatus[0] == 1) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[0], 0.00000000,329.37799072,274.00000000);
                CheckPointGateStatus[0] = 0;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[0], 0.00000000,269.94769287,273.99902344);
                CheckPointGateStatus[0] = 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 5.0, -1390.13732910,-816.83264160,81.45809937)) {
            if(CheckPointGateStatus[1] == 1) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[1], 0.00000000,328.31597900,94.07043457);
                CheckPointGateStatus[1] = 0;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[1], 0.00000000,269.94506836,94.07153320);
                CheckPointGateStatus[1] = 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 5.0, 48.45977783,-1528.41442871,5.12334347)) {
            if(CheckPointGateStatus[2] == 1) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[2], 0.00000000,0.00000000,80.17993164);
                CheckPointGateStatus[2] = 0;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[2], 0.00000000,89.69036865,80.17822266);
                CheckPointGateStatus[2] = 1;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 5.0, 56.86661530,-1534.65405273,4.98051977)) {
            if(CheckPointGateStatus[3] == 1) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[3], 0.00000000,0.00000000,82.49023438);
                CheckPointGateStatus[3] = 0;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(CheckPointGates[3], 0.00000000,269.94769287,82.48538208);
                CheckPointGateStatus[3] = 1;
            }
        }
        if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 15.0 ) {
            if(LSPDGateStatus == 0 ) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(LSPDGate, 0.000000, 0, 90);
                LSPDGateStatus = 1;
            }
            else {
                LSPDGateStatus = 0;
                SetDynamicObjectRot(LSPDGate, 0.000000, 90, 90);
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[9][0], Positions[9][1], Positions[9][2]) < 15.0 ) {
            if(SASDGate1Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(SASDGate1, 0, 0, 90);
                SASDGate1Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(SASDGate1, 0, 90, 90);
                SASDGate1Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[10][0], Positions[10][1], Positions[10][2]) < 15.0 ) {
            if(SASDGate2Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SASDGate2, 2335, 2443.45, 0.0, 3);
                SASDGate2Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SASDGate2, 2335, 2443.45, 6.0, 3);
                SASDGate2Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[11][0], Positions[11][1], Positions[11][2]) < 15.0 ) {
            if(SASDGate3Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SASDGate3, 2294, 2511, 3.26, 3);
                SASDGate3Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SASDGate3, 2294, 2502, 3.26, 3);
                SASDGate3Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0 ) {
            if(LSPDGate2Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 1588.6501464844, -1638.0750732422, 6.2343215942383, 3);
                LSPDGate2Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 1588.6428222656, -1638.02734375, 15.240161895752, 3);
                LSPDGate2Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[4][0], Positions[4][1], Positions[4][2]) < 15.0 ) {
            if(LSPDGate2Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 313.49652099609, -1482.9189453125, 26.682577133179, 3);
                LSPDGate2Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(LSPDGate2, 320.40628051758, -1487.9129638672, 26.900407791138, 3);
                LSPDGate2Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[6][0], Positions[6][1], Positions[6][2]) < 15.0 ) {
            if(SFPDGate1Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(SFPDGate1, 0.000000, 0, 90);
                SFPDGate1Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(SFPDGate1, 0.000000, 90, 90);
                SFPDGate1Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[7][0], Positions[7][1], Positions[7][2]) < 15.0 ) {
            if(SFPDGate2Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(SFPDGate2, 0.000000, 0, 90);
                SFPDGate2Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                SetDynamicObjectRot(SFPDGate2, 0.000000, 270, 90);
                SFPDGate2Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[8][0], Positions[8][1], Positions[8][2]) < 15.0 ) {
            if(SFPDGate3Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SFPDGate3, -1631.58520508,688.43920898,13.51924896, 4.5);
                SFPDGate3Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SFPDGate3, -1631.58496094,688.43847656,8.70806313, 4.5);
                SFPDGate3Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[2][0], Positions[2][1], Positions[2][2]) < 15.0 ) {
            if(FBIGate1Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate1, 313.49652099609, -1482.9189453125, 26.682577133179, 3);
                FBIGate1Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate1, 320.40628051758, -1487.9129638672, 26.900407791138, 3);
                FBIGate1Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[3][0], Positions[3][1], Positions[3][2]) < 15.0 ) {
            if(FBIGate2Status == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate2, 290.56341552734, -1547.8900146484, 27.16854095459, 3);
                FBIGate2Status = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FBIGate2, 283.96463012695, -1543.154296875, 27.167940139771, 3);
                FBIGate2Status = 0;
            }
        }
        else if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[5][0], Positions[5][1], Positions[5][2]) < 15.0 ) {
            if(NGGateStatus == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(NGGate, 96.809570, 1920.160156, 21.000000, 3);
                NGGateStatus = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(NGGate, 96.810302, 1920.160156, 17.299999, 3);
                NGGateStatus = 0;
            }
        }
        else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2086.4263, -189.4620, 995.7036))
		{
			if(PrisonGates[0] == 0)
			{
	  			format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
	     		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	       		MoveDynamicObject(BlastDoors[12], -2080.19873047,-189.68353271,997.97924805, 1);
	         	PrisonGates[0] = 1;
			}
			else
			{
	  			format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
				ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				MoveDynamicObject(BlastDoors[12], -2084.14086914,-189.68321228,997.97924805, 1);
				PrisonGates[0] = 0;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2070.31152344, -111.42968750, 984.64465332))
		{
			if(PrisonGates[1] == 0)
			{
  				format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
    	 		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   		MoveDynamicObject(BlastDoors[13], -2070.31152344,-111.42968750,989.64465332, 1);
    	     	PrisonGates[1] = 1;
			}
			else
			{
			    format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
				ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 				MoveDynamicObject(BlastDoors[13], -2070.31152344,-111.42968750,984.64465332, 1);
				PrisonGates[1] = 0;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2052.199218, -138.100006, 36.90001))
		{
			if(PrisonGates[2] == 0)
			{
  				format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
    	 		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   		MoveDynamicObject(BlastDoors[14],-2043.5, -138.1,  36.9, 3);
    	     	PrisonGates[2] = 1;
			}
			else
			{
			    format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
				ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 				MoveDynamicObject(BlastDoors[14],-2052.199218, -138.100006, 36.90001, 3);
				PrisonGates[2] = 0;
			}
		}
		else if(IsPlayerInRangeOfPoint(playerid, 10.0, -2052.199218, -118.800003, 36.900001))
		{
			if(PrisonGates[3] == 0)
			{
  				format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
    	 		ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    	   		MoveDynamicObject(BlastDoors[15],-2043.5, -118.8, 36.9, 3);
    	     	PrisonGates[3] = 1;
			}
			else
			{
			    format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
				ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 				MoveDynamicObject(BlastDoors[15],-2052.199218, -118.800003, 36.900001, 3);
				PrisonGates[3] = 0;
			}
		}
		else if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11) {
    	 	if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[12][0], Positions[12][1], Positions[12][2]) < 15.0 ) {
         	   if(nationalStatus == 0) {
         	       format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
         	       ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
         	       MoveDynamicObject(nationalGATE, 207.36718750,1875.72949219,13.93899250,3);
         	       MoveDynamicObject(nationalGATE2,220.46093750,1875.70898438,13.93899250,3);
         	       nationalStatus = 1;
         	   }
         	   else {
         	       format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
         	       ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
         	       MoveDynamicObject(nationalGATE, 211.86804199,1875.72998047,13.93899250,3);
         	       MoveDynamicObject(nationalGATE2,215.96099854,1875.70983887,13.93899250,3);
         	       nationalStatus = 0;
         	   }
        	}
		}
	}
    else if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9) {
        GetPlayerPos( playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(SANGate, Positions[6][0], Positions[6][1], Positions[6][2]);
        if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[6][0], Positions[6][1], Positions[6][2]) < 15.0 ) {
            if(SANGateStatus == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ) ,playerid);
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SANGate, 773.99975585938, -1384.8256835938, 12.719062805176, 4.5000);
                SANGateStatus = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(SANGate, 781.77154541016, -1384.7692871094, 12.72666358947, 4.5000);
                SANGateStatus = 0;
            }
        }
    }
    else if(PlayerInfo[playerid][pFMember] == 5) {
        GetPlayerPos( playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(TRIGate, Positions[6][0], Positions[6][1], Positions[6][2]);
        if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[6][0], Positions[6][1], Positions[6][2]) < 25.0 ) {
            if(TRIGateStatus == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ) ,playerid);
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(TRIGate, 1637.21875, -1852.6630859375, 12.535882949829, 4.5000);
                TRIGateStatus = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(TRIGate, 1627.21875, -1852.6630859375, 12.535882949829, 4.5000);
                TRIGateStatus = 0;
            }
        }
    }
    else if(PlayerInfo[playerid][pFMember] == 1)
	{
        GetPlayerPos( playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(FAM1Gate, Positions[1][0], Positions[1][1], Positions[1][2]);
        if(GetDistance( Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 15.0 ) {
            if(FAM1GateStatus == 0) {
                format( string, sizeof( string ), "* %s (%d) uses their remote to open the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FAM1Gate, 242.89768981934 , -151.99508666992 , 0.16124999523163 ,2);
                FAM1GateStatus = 1;
            }
            else {
                format( string, sizeof( string ), "* %s (%d) uses their remote to close the gates.", GetPlayerNameEx( playerid ),playerid );
                ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                MoveDynamicObject(FAM1Gate, 242.8935546875 , -160.873046875 , 0.16124999523163 ,2);
                FAM1GateStatus = 0;
            }
        }
    }
    return 1;
}

CMD:sonline(playerid, params[]) {
    if((PlayerInfo[playerid][pLeader] == 6) || (PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >= 4)) {

		new
			szDialog[512];

		foreach(new i: Player) if(PlayerInfo[i][pMember] == 6) {
			new
			rank[64],
			division[64],
			employer[64];
			GetPlayerFactionInfo(i, rank, division, employer);
			switch(PlayerInfo[i][pDuty]) {
				case 1: format(szDialog, sizeof(szDialog), "%s\r\n* %s %s (on duty)", szDialog, rank, GetPlayerNameEx(i));
				default: format(szDialog, sizeof(szDialog), "%s\r\n* %s %s (off duty)", szDialog, rank, GetPlayerNameEx(i));
			}
		}
		if(!isnull(szDialog)) {
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Government Members", szDialog, "Select", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");

    }
    return 1;
}

CMD:fmdc(playerid, params[]) {
    if((PlayerInfo[playerid][pLeader] == 4) || (PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 4)) {

		new
			szDialog[1024];

		foreach(new i: Player) if(PlayerInfo[i][pMember] == 4) switch(PlayerInfo[i][pDuty]) {
			case 1: format(szDialog, sizeof(szDialog), "%s\r\n* %s (on duty), %i calls accepted, %i patients delivered.", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted], PlayerInfo[i][pPatientsDelivered]);
			default: format(szDialog, sizeof(szDialog), "%s\r\n* %s (off duty), %i calls accepted, %i patients delivered.", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted], PlayerInfo[i][pPatientsDelivered]);
		}
		if(!isnull(szDialog)) {
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "FDSA Members", szDialog, "Select", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");

    }
    return 1;
}

CMD:online(playerid, params[]) {
    if((PlayerInfo[playerid][pLeader] == 9) || (PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] >= 5)) {

		new
			szDialog[1024];

		foreach(new i: Player) if(PlayerInfo[i][pMember] == 9) switch(PlayerInfo[i][pDuty]) {
			case 1: format(szDialog, sizeof(szDialog), "%s\r\n* %s (on duty)", szDialog, GetPlayerNameEx(i));
			default: format(szDialog, sizeof(szDialog), "%s\r\n* %s (off duty)", szDialog, GetPlayerNameEx(i));
		}
		if(!isnull(szDialog)) {
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "SANews Members", szDialog, "Select", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");

    }
    return 1;
}

CMD:tonline(playerid, params[]) {
    if((PlayerInfo[playerid][pLeader] == 10) || (PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pRank] >= 4)) {

		new
			szDialog[1024];

		foreach(new i: Player) if(PlayerInfo[i][pMember] == 10) switch(TransportDuty[i]) {
			case 1: format(szDialog, sizeof(szDialog), "%s\r\n* %s (on duty), %i calls accepted", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted]);
			default: format(szDialog, sizeof(szDialog), "%s\r\n* %s (off duty), %i calls accepted", szDialog, GetPlayerNameEx(i), PlayerInfo[i][pCallsAccepted]);
		}
		if(!isnull(szDialog)) {
			ShowPlayerDialog(playerid, 0, DIALOG_STYLE_LIST, "Taxi Company Members", szDialog, "Select", "Cancel");
		}
		else SendClientMessageEx(playerid, COLOR_GREY, "No members are online at this time.");
    }
    return 1;
}

CMD:mdc(playerid, params[])
{
    if(IsMDCPermitted(playerid))
	{
        if(IsPlayerInAnyVehicle(playerid))
		{
            ShowPlayerDialog(playerid, MDC_MAIN, DIALOG_STYLE_LIST, "SA-MDC - Logged in", "*Civilian Information\n*Find LEO\n*Law Enforcement Agencies\n*MDC Message\n*SMS", "OK", "Cancel");
            ConnectedToPC[playerid] = 1337;
        }
        else SendClientMessageEx(playerid, COLOR_GREY, "You are not in a vehicle.");
    }
    return 1;
}

CMD:tow(playerid, params[]) {
 	if(PlayerInfo[playerid][pFMember] == 1 || PlayerInfo[playerid][pFMember] == 13 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[playerid][pDivision] == 2) {
   		if(IsPlayerInAnyVehicle(playerid))
     	{
			new
				carid = GetPlayerVehicleID(playerid);

			if(IsATowTruck(carid))
			{
   				new
					closestcar = GetClosestCar(playerid, carid);

				foreach(new i: Player) {
					if(arr_Towing[i] == closestcar || (GetPlayerVehicleID(i) == closestcar && GetPlayerState(i) == 2)) return SendClientMessageEx(playerid, COLOR_GREY, "You can't tow a vehicle which is occupied, or in tow.");
				}

       			if(GetDistanceToCar(playerid,closestcar) <= 8 && !IsTrailerAttachedToVehicle(carid)) {
					foreach(new i: Player) {
						if(GetPlayerVehicle(i, closestcar) != -1) {

							new
								hKey;

							if(((hKey = PlayerInfo[i][pPhousekey]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])
							||((hKey = PlayerInfo[i][pPhousekey2]) != INVALID_HOUSE_ID) && IsPlayerInRangeOfPoint(playerid, 50.0, HouseInfo[hKey][hExteriorX], HouseInfo[hKey][hExteriorY], HouseInfo[hKey][hExteriorZ])) {
								return SendClientMessageEx(playerid, COLOR_GREY, "This vehicle doesn't need to be towed.");
							}

							arr_Towing[playerid] = closestcar;
						    SendClientMessageEx(playerid, COLOR_GRAD2, "This player owned vehicle is available for impounding.");
      						return AttachTrailerToVehicle(closestcar,carid);
						}
					}
					SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle has no registration, it is available for impounding.");
					AttachTrailerToVehicle(closestcar,carid);
					arr_Towing[playerid] = closestcar;
					return 1;
     			}
			}
			else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to tow with this vehicle.");
   		}
     	else SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be inside a vehicle to use this command!");
	}
   	else SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	return 1;
}

CMD:untow(playerid, params[])
{
	// Hades Children tow trucks
 	if(PlayerInfo[playerid][pFMember] == 1 || PlayerInfo[playerid][pFMember] == 13 || IsACop(playerid) || PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pLeader] == 12 && PlayerInfo[playerid][pDivision] == 2)
	{
   		if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
     	{
      		SendClientMessageEx(playerid, COLOR_GRAD1,"You have unhooked the vehicle that you were towing.");
			arr_Towing[playerid] = INVALID_VEHICLE_ID;
			DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
     	}
      	else
       	{
        	SendClientMessageEx(playerid, COLOR_GRAD1,"You are currently not towing anything.");
        }
  	}
   	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:impound(playerid, params[]) {
	switch(PlayerInfo[playerid][pMember]) {
		case 1, 2, 3, 7, 11, 13, 16: {
			if(!IsAtImpoundingPoint(playerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You are not near the impound point, you can't impound!");
				return 1;
			}
			if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{

				new
					iVehType,
					iVehIndex,
					iTargetOwner,
					iVehTowed = GetVehicleTrailer(GetPlayerVehicleID(playerid));

				if(!GetVehicleModel(iVehTowed)) {
					return SendClientMessageEx(playerid, COLOR_GREY, "The vehicle in tow has been desynced and therefore cannot be impounded.");
				}
				foreach(new i: Player) {
					iVehIndex = GetPlayerVehicle(i, iVehTowed);
					if(iVehIndex != -1) {
						iVehType = 1;
						iTargetOwner = i;
						break;
					}
				}
				if(!iVehType) {
					for(new i; i < MAX_FAMILY; ++i) {
						iVehIndex = GetGangVehicle(i, iVehTowed);
						if(iVehIndex != -1) {
							iVehType = 2;
							iTargetOwner = i;
							break;
						}
					}
				}
				switch(iVehType) {
					case 0, 2: {
						SendClientMessageEx(playerid, COLOR_GRAD1, "The impound administration could not find any registration on the vehicle and has returned it.");
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						SetVehicleToRespawn(iVehTowed);
					}
					case 1: {

						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvImpounded] = 1;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvSpawned] = 0;
						PlayerVehicleInfo[iTargetOwner][iVehIndex][pvId] = INVALID_PLAYER_VEHICLE_ID;
						DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						SetVehiclePos(iVehTowed, 0, 0, 0); // Attempted desync fix
						DestroyVehicle(iVehTowed);

						VehicleSpawned[iTargetOwner]--;
						--PlayerCars;

						new
							szMessage[96];

						format(szMessage, sizeof(szMessage),"* You have impounded %s's %s.",GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "Your %s has been impounded. You may release it at the DMV in Dillimore.", VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400]);
						SendClientMessageEx(iTargetOwner, COLOR_LIGHTBLUE, szMessage);

						format(szMessage, sizeof(szMessage), "HQ: %s has impounded %s's %s ($%i unpaid tickets).", GetPlayerNameEx(playerid), GetPlayerNameEx(iTargetOwner), VehicleName[PlayerVehicleInfo[iTargetOwner][iVehIndex][pvModelId] - 400], PlayerVehicleInfo[iTargetOwner][iVehIndex][pvTicket]);
						SendRadioMessage(PlayerInfo[playerid][pMember], RADIO, szMessage);
					}
				}
				arr_Towing[playerid] = INVALID_VEHICLE_ID;
			}
		}
		default: SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	}
	return 1;
}

CMD:fdsa(playerid, params[])
{

	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
			ShowPlayerDialog(playerid, FDSAMENU, DIALOG_STYLE_LIST, "FDSA","Duty\nUniform\nEquipment\nCivilian", "Select", "Cancel");
	}
	return 1;
}

CMD:noose(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	{
		if (IsPlayerInRangeOfPoint(playerid,4, -761.904663, 2575.887451, 10016.670898) || IsPlayerInRangeOfPoint(playerid,4, -757.500488, 2575.700927, 10016.677734) || IsPlayerInRangeOfPoint(playerid, 5.0, -2043.527832, -189.208435, 985.183105))
		{
			ShowPlayerDialog(playerid, NOOSEDUTYMENU, DIALOG_STYLE_LIST, "NOOSE Menu","Duty\nEquipment\nSWAT Uniform\nArmy Uniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your NOOSE lockers.");
		}
	}
	return 1;
}

CMD:trlocker(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12)
	{
		if ((IsPlayerInRangeOfPoint(playerid,3,354.37, 173.91, 1008.38) || IsPlayerInRangeOfPoint(playerid,3,327.232757, 306.817230, 999.148437)|| IsPlayerInRangeOfPoint(playerid,3,1188.5157470703,-1350.9741210938, 2423.2648925781 ) || IsPlayerInRangeOfPoint(playerid,3,-2031.335083, -114.719253, 1035.171875)) && PlayerInfo[playerid][pVW] == 99)
		{
			ShowPlayerDialog(playerid, TRMENU, DIALOG_STYLE_LIST, "Tierra Robada Menu", "Civil\nArmed Forces\nEmergency Services\nDiplomatic Corps\nAviation Administration\nRoster (online members)", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your Tierra Robada lockers.");
		}
	}
	return 1;
}

CMD:lspd(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,255.3,77.4,1003.6) || IsPlayerInRangeOfPoint(playerid,3,-1616.1294,681.1594,7.1875) || IsPlayerInRangeOfPoint(playerid,3,327.05, 306.81, 999.14) || IsPlayerInRangeOfPoint(playerid,3,264.29, 109.84, 1004.62) || IsPlayerInRangeOfPoint(playerid, 5.0, -2043.527832, -189.208435, 985.183105) || IsPlayerInRangeOfPoint(playerid, 5.0, 1112.7, -2055.8, 1409.7))
		{
			ShowPlayerDialog(playerid, DUTYMENU, DIALOG_STYLE_LIST, "LSPD Menu","Duty\nEquipment\nSWAT\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your LSPD lockers.");
		}
	}
	return 1;
}

CMD:rapid(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13)
	{
		ShowPlayerDialog(playerid, RRMENU, DIALOG_STYLE_LIST, "Rapid Recovery","Rapid Uniforms\nRapid Equipment\nRefill Health($1000)\nKevlar Vest($1000)\nMechanic Job", "Select", "Cancel");
	}
	return 1;
}

CMD:taxi(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10) {
	    if(IsPlayerInRangeOfPoint(playerid, 4.0, 1404.0183,-1504.1228,-51.7531)) {
	        ShowPlayerDialog(playerid, DIALOG_TAXI, DIALOG_STYLE_LIST, "Taxi Company: Lockers", "Toggle Duty\nEquipment", "Proceed", "Cancel");
		}
		else {
		    SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your lockers.");
		}
	}
	return 1;
}

CMD:sapa(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 17 || PlayerInfo[playerid][pLeader] == 17)
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 1894.334350,-2292.476562, 1999.371582+0.6))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SAPA, DIALOG_STYLE_LIST, "SA:PA: Lockers", "Toggle Duty\nEquipment\nClothing Selection\nClear Suspect", "Proceed", "Cancel");
     	}
      	else
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SA:PA lockers.");
 		}
  	}
	return 1;
}

CMD:sfpd(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 293.675415, 188.238296, 1007.171875+0.6) || IsPlayerInRangeOfPoint(playerid, 3.0, 321.43, 303.96, 999.14) && PlayerInfo[playerid][pVW] == 2112 || IsPlayerInRangeOfPoint(playerid, 5.0, -2043.527832, -189.208435, 985.183105) || IsPlayerInRangeOfPoint(playerid,3,264.29, 109.84, 1004.62) && PlayerInfo[playerid][pVW] == 1818 || IsPlayerInRangeOfPoint(playerid, 4, -1625.9365,719.1707,19995.8594) || IsPlayerInRangeOfPoint(playerid, 5.0, 1112.7, -2055.8, 1409.7))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SFPD, DIALOG_STYLE_LIST, "SFPD: Lockers", "Toggle Duty\nEquipment\nClothing Selection\nClear Suspect", "Proceed", "Cancel");
     	}
      	else
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SFPD lockers.");
 		}
  	}
	return 1;
}

CMD:sasd(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7)
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 2525.9009,-1655.4312,562.8000) || IsPlayerInRangeOfPoint(playerid, 4.0, 327.05, 306.81, 999.14+0.6) || IsPlayerInRangeOfPoint(playerid, 3.0, 321.43, 303.96, 999.14) && PlayerInfo[playerid][pVW] == 2112 || IsPlayerInRangeOfPoint(playerid, 4.0, 2588.6382,2252.3303,1025.2900) || IsPlayerInRangeOfPoint(playerid, 5.0, -2043.527832, -189.208435, 985.183105) || IsPlayerInRangeOfPoint(playerid, 5.0, 1112.7, -2055.8, 1409.7))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SASD, DIALOG_STYLE_LIST, "SASD: Lockers", "Toggle Duty\nEquipment\nClothing Selection\nClear Suspect", "Proceed", "Cancel");
       	}
        else
        {
        	SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SASD lockers.");
     	}
  	}
	return 1;
}

CMD:sanews(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)//
 	{
  		if(IsPlayerInRangeOfPoint(playerid, 4.0, 621.7416,-8.3904,1102.7633))
    	{
     		ShowPlayerDialog(playerid, DIALOG_SANEWS, DIALOG_STYLE_LIST, "SANews: Lockers", "Toggle Duty\nCamera\nKevlar Vest ($2000)\nFirst Aid Kit\n9mm ($1000)\nDeagle ($5000)\nShotgun ($1500)\nClothing Selection", "Proceed", "Cancel");
     	}
 		else
   		{
     		SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SANews lockers.");
     	}
  	}
  	return 1;
}

CMD:coastguard(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 3)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,2106.0317,2809.0493,-15.9556))
		{
			ShowPlayerDialog(playerid, CGDUTYMENU, DIALOG_STYLE_LIST, "Coastguard Menu","Duty\nEquipment\nUniform\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your Coast Guard lockers.");
		}
	}
	return 1;
}

CMD:wp(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pMember] == 7 && PlayerInfo[playerid][pDivision] == 5)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,2106.0317,2809.0493,-15.9556))
		{
			ShowPlayerDialog(playerid, WPDUTYMENU, DIALOG_STYLE_LIST, "Water Patrol Menu","Duty\nEquipment\nUniform\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your Water Patrol lockers.");
		}
	}
	return 1;
}

CMD:shaft(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	{
		if (IsPlayerInRangeOfPoint(playerid,5.0,-562.5217,478.1677,1369.4100))
		{
			ShowPlayerDialog(playerid, SHAFTDUTYMENU, DIALOG_STYLE_LIST, "SHAFT Menu","Duty\nEquipment\nSWAT Uniform\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SHAFT lockers.");
		}
	}
	return 1;
}
CMD:fbi(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2)
	{
		if (IsPlayerInRangeOfPoint(playerid,3,310.3679,-1537.5204,-45.1338) || IsPlayerInRangeOfPoint(playerid, 5.0, -2043.527832, -189.208435, 985.183105) || IsPlayerInRangeOfPoint(playerid, 5.0, 1085.5, -2041.2, 1411.2))
		{
			ShowPlayerDialog(playerid, FDUTYMENU, DIALOG_STYLE_LIST, "FBI Menu","Duty\nEquipment\nSWAT Uniform\nUniform\nUndercover\nClear Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your FBI lockers.");
		}
	}
	return 1;
}

CMD:doc(playerid, params[])
{
	if( (PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pDivision] == 5) || (PlayerInfo[playerid][pLeader] == 3) || (PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] > 5))
	{
		if (IsPlayerInRangeOfPoint(playerid,3,298.1291809082,-74.630012512207,1001.515625))
		{
			ShowPlayerDialog(playerid, NDUTYMENU, DIALOG_STYLE_LIST, "DOC Menu","Duty\nEquipment\nClear Suspect\nRelease Suspect", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your DOC lockers.");
		}
	}
	return 1;
}

CMD:saas(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
		if(IsPlayerInRangeOfPoint(playerid,50.0,306.4042,-159.0768,999.5938) && GetPlayerVirtualWorld(playerid) == 1337 || IsPlayerInRangeOfPoint(playerid, 50.0,332.2686,2345.0667,8905.4180) || IsPlayerInRangeOfPoint(playerid, 5.0, -2043.527832, -189.208435, 985.183105))// NG Duty
		{
			ShowPlayerDialog(playerid, NGMENU, DIALOG_STYLE_LIST, "SAAS","Duty\nUniforms\nWeapons\nUndercover\nClear Suspect\nKevlar Vest\nFirst Aid Kit\nAccessories", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your SAAS lockers.");
		}
	}
	return 1;
}

CMD:se(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(IsPlayerInRangeOfPoint(playerid,3,354.37,173.91,1008.38) && GetPlayerVirtualWorld(playerid) == 20041 || IsPlayerInRangeOfPoint(playerid, 5.0, 1060, -2121.2, 1533.7)) // SENATE Duty
		{
			ShowPlayerDialog(playerid, SEMENU, DIALOG_STYLE_LIST, "Government","Duty\nUniforms\nEquipment", "Select", "Cancel");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You aren't in range of your Senate lockers.");
		}
	}
	return 1;
}

CMD:help(playerid, params[])
{
	if(PlayerInfo[playerid][pLevel] <= 3)
	{
		SendClientMessageEx(playerid, TEAM_AZTECAS_COLOR,"*** HELP *** /report /requesthelp (/newb)ie /tognewbie");
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"*** ACCOUNT *** /rules /faq /(net)stats /inventory /myguns /buylevel /upgrade /changepass /killcheckpoint /resetupgrades(100k)");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** CHAT *** /w(hisper) /o(oc) /s(hout) /l(ow) /b /ad(vertise) /f(amily) /me /togooc /tognews /togfam /togwhisper /do");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** BANK *** /balance /withdraw /deposit /wiretransfer /abalance /awithdraw /adeposit /awiretransfer");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /pay /writecheck /cashchecks /charity /time /buy /(check)id /music /showlicenses /clothes /mywarrants /ringtone");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /lock /skill /stopani /kill /buyclothes /droplicense /calculate /refuel /car /seatbelt /checkbelt");
	SendClientMessageEx(playerid, COLOR_WHITE,"*** GENERAL *** /cancel /accept /eject /usepot /usecrack /contract /service /families /joinevent /checkweed /nextpaycheck");


	switch(PlayerInfo[playerid][pJob])
	{
		case 1: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted /offerappeal /finishappeal");
		case 3: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sell /getcrack /getseeds /plantseeds /pickweed /checkweed");
		case 5: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /refill /mechduty");
		case 8: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sellmats /sellgun");
		case 10: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fight");
		case 14: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		case 15: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /craft");
		case 19: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /loadtruck /checktruck /hijacktruck");
		case 21: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getpizza");
	}
	switch(PlayerInfo[playerid][pJob2])
	{
		case 1: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /find");
		case 2: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /lawyerduty /free /defend /wanted");
		case 3: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sex");
		case 4: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sell /getcrack /getseeds /plantseeds /pickweed /checkweed");
		case 5: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /dropcar");
		case 7: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fix /nos /hyd /repair /refill /mechduty");
		case 8: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /guard /frisk");
		case 9: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sellmats /sellgun");
		case 10: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /sellnewcar");
		case 12: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fight");
		case 14: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getcrate");
		case 15: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /papers /bring /deliver");
		case 17: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /fare");
		case 18: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getmats /sell /craft");
		case 19: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /selldrink");
		case 20: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /loadtruck /checktruck /hijacktruck");
		case 21: SendClientMessageEx(playerid,COLOR_WHITE,"*** JOB *** /getpizza");
	}
	switch(PlayerInfo[playerid][pMember])
	{
		case 1:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** LSPD *** (/r)adio /dept (/m)egaphone (/su)spect /lspd /mdc /detain /arrest /warrantarrest /wanted /cuff /tazer");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** LSPD *** /frisk /take /ticket (/gov)ernment /clothes /ram /invite /giverank /deploy (spikes/cone/flare) /spikestrips");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** LSPD *** /deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /givediv ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** LSPD *** /flares /cones /wants /docarrest /siren /destroyplant /radargun /searchcar");
		}
		case 2:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FBI *** (/r)adio /dept (/m)egaphone (/su)spect /fbi /mdc /detain /arrest /warrantarrest /wanted /cuff ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FBI *** /frisk /take /ticket (/gov)ernment /clothes /ram /invite /giverank /deploy (spikes/cone/flare) /spikestrips ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FBI *** /deploycade /destroycade /revokedl /revokeairdl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /givediv");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FBI *** /destroyplant /radargun /flares /cones /wants /searchcar /tazer /bug /togbr /docarrest /siren /hfind");
		}
		case 3:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SFPD *** (/r)adio /dept (/m)egaphone (/su)spect /sfpd /mdc /detain /arrest /warrantarrest /jarrest /wanted");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SFPD *** /frisk /take /ticket (/gov)ernment /deliver /clothes /ram /invite /giverank /spikestrips  /present /searchcar");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SFPD *** /deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /givediv /radargun");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SFPD *** /isolate /docarrest /siren /deploy (spikes/cone/flare) /cones /flares /backentrance  /cuff /tazer /wants /destroyplant");
		}
		case 4:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FDSA *** (/r)adio /dept (/m)egaphone /heal /clothes /invite /giverank /fdsa /revokeboatdl /givediv");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FDSA *** /getpt /movept /loadpt /deliverpt /destroyplant");
		}
		case 5:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** JUDICIAL SYSTEM *** (/r)adio /dept /warrant /warrantwd /judgefine /judgejail /judgeprison /probation /wants");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** JUDICIAL SYSTEM *** /invite /uninvite /giverank /trial /adjourn /sentence /reward /checkjudgements /reversejudgement /present");
		}
		case 6:
		{
			if(PlayerInfo[playerid][pRank] < 3)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** (/r)adio /dept (/se)nate /mdc /deployspikes /destroyspikes /spikestrips /tazer /frisk /cuff");
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** (/r)adio /dept (/se)nate /settax /checktax /taxwithdraw /invite /giverank (/gov)ernment (/su)spect");
				SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** /mdc /detain /arrest /wanted /cuff /tazer /frisk /take /ticket /clothes /ram /invite /giverank");
				SendClientMessageEx(playerid, COLOR_WHITE, "*** GOVERNMENT *** /spikestrips /destroyplant /radargun /warrantarrest /pardon /commute /wants /deployspikes /destroyspikes");
			}
		}
		case 7:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SASD *** (/r)adio /dept (/m)egaphone (/su)spect /sasd /mdc /detain /arrest /warrantarrest /wanted /cuff");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SASD *** /frisk /take /ticket (/gov)ernment /clothes /ram /invite /giverank /deploy (spikes/cone/flare) ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SASD *** /deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /givediv ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SASD *** /tazer /docarrest /siren /spikestrips /flares /cones /wants /destroyplant /searchcar /radargun");
		}
		case 8:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** HITMAN AGENCY *** (/f)amily /r /contracts /givemehit /order /ranks /profile /h(show)badge /hfind");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** HITMAN AGENCY *** /plantbomb /plantcarbomb /pickupbomb /clothes /invite /giverank /showmehq /showmehq2 /showmehq3");
		}
		case 9:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** NEWS AGENCY *** /live /nr [text] /broadcast /cameraangle /clothes /invite /giverank /liveban /newsdiv");
		}
		case 10:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** TAXI *** /fare /taxi /ataxi /tonline /r /invite /giverank /eba");
		}
		case 11:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SAAS *** /r /dept /mdc /backup /tazer /ram /shutdown /take /frisk /radargun /(un)cuff /detain /ticket /su /isolate /backentrance");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SAAS *** /wanted /checkjudgements /wants /warrantarrest /destroyplant /vmdc /vticket /vcheck /searchcar /docarrest /siren");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SAAS *** /spikestrips /deploy(destroy)cade /deploy(destroy)spikes /(no)backup /gov /givediv /showmeship /arrest");
			if(PlayerInfo[playerid][pDivision] == 7) SendClientMessageEx(playerid, COLOR_WHITE, "*** SAAS *** /loadpt /deliverpt /heal /movept");
		}
		case 12:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** TIERRA ROBADA *** (/r)adio /trlocker /trdiv /clothes /invite /uninvite /giverank /gov /showbadge");
			if(PlayerInfo[playerid][pDivision] == 2)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** TIERRA ROBADA ARMED FORCES *** (/m)egaphone /tazer /detain /cuff /arrest /ticket /frisk");
			}
			if(PlayerInfo[playerid][pDivision] == 3)
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "*** TIERRA ROBADA EMERGENCY SERVICES *** (/m)egaphone /heal /movept /loadpt /deliverpt");
			}
			if(PlayerInfo[playerid][pDivision] == 5)
			{
			    SendClientMessageEx(playerid, COLOR_WHITE, "*** Aviation Administration division *** /issuepilot /revokepilot");
			}
		}
		case 13:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** NOOSE *** (/r)adio /dept (/m)egaphone (/su)spect /noose /mdc /detain /arrest /warrantarrest /wanted /cuff /tazer");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** NOOSE *** /frisk /take /ticket /ram /invite /giverank /deploy (spikes/cone/flare) /spikestrips /flares /cones /wants");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** NOOSE *** /deploycade /destroycade /vcheck /vmdc /destroyplant /radargun /searchcar /givediv /docarrest /siren");
		}
		case 16:
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** S.H.A.F.T *** (/r)adio /dept (/m)egaphone (/su)spect /shaft /mdc /detain /arrest /warrantarrest /wanted /cuff ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** S.H.A.F.T *** (/gov)ernment /ram /invite /giverank /destroy(cade/spikes/cone/flare) /deploy(cade/spikes/cone/flare)");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** S.H.A.F.T *** /docarrest /siren /spikestrips /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /givediv");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** S.H.A.F.T *** /frisk /take /ticket /radargun /flares /cones /wants /searchcar /tazer /bug /togbr /hfind");
		}
		case 17:
		{
			//SendClientMessageEx(playerid, COLOR_WHITE, "*** SA:PA *** (/r)adio /dept (/m)egaphone /sapadiv");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SA:PA *** (/r)adio /dept (/m)egaphone (/su)spect /sapa /mdc /detain /arrest /warrantarrest /wanted /cuff /tazer");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SA:PA *** /frisk /take /ticket (/gov)ernment /clothes /ram /invite /giverank /deploy (spikes/cone/flare) /spikestrips");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SA:PA *** /deploycade /destroycade /revokedl /vcheck /vmdc /vticket /tow /untow /impound /dmvrelease /givediv ");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** SA:PA *** /flares /cones /wants /docarrest /siren /destroyplant /radargun /searchcar");
		}
	}
	if (PlayerInfo[playerid][pFMember] != 255)
	{
		if(PlayerInfo[playerid][pRank] < 5)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FAMILY *** (/f)amily /clothes /safehelp /movegate");
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FAMILY *** (/f)amily /clothes /safehelp /movegate /fdeposit /fwithdraw /fbalance /claim /capture /adjust");
			SendClientMessageEx(playerid, COLOR_WHITE, "*** FAMILY *** /gpark /gvlock /gbuylock");
		}
	}
	if (PlayerInfo[playerid][pAdmin] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "*** ADMIN *** (/a)dmin (/ah)elp");
	}
	if (PlayerInfo[playerid][pHelper] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "*** COMMUNITY ADVISOR *** (/ch)elp");
	}
	if(PlayerInfo[playerid][pDonateRank] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_PURPLE, "*** VIP *** /travel /viplocker /tokenhelp /buddyinvite /phoneprivacy /setautoreply");
	}
	if(PlayerInfo[playerid][pDonateRank] == 5)
	{
		SendClientMessageEx(playerid, COLOR_PURPLE, "*** VIP Moderator *** /vipparty /vto /vtoreset /vmute /vsuspend");
	}
	SendClientMessageEx(playerid, COLOR_WHITE,"*** OTHER *** /cellphonehelp /carhelp /househelp /toyhelp /renthelp /jobhelp /leaderhelp /animhelp /fishhelp /insurehelp");
	return 1;
}

CMD:calltank(playerid, params[]) {
	new
		tank;

	if(PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 3 || PlayerInfo[playerid][pDivision] == 5)) {
		if(sscanf(params, "d", tank)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /calltank [1-3]");
		}
		if(tank < 1 || tank > 3) {
			return SendClientMessageEx(playerid, COLOR_GRAD1, "The tank number can only be 1-3!");
		}

	    else if(IsPlayerInRangeOfPoint(playerid, 10, 286.7334, 2024.3762, 17.6406)) {
	        if(tank == 1) {
	        	if(tanks[0] == 0) {
       		 		NGARMVehicles[0] = CreateVehicleEx(432,278.00000000,2018.00000000,17.73996162,270.00000000,0,0, VEHICLE_RESPAWN); //Rhino
     		 		tanks[0] = 1;
					Vehicle_ResetData(NGARMVehicles[0]);
	            	SendClientMessageEx(playerid, COLOR_WHITE, "Tank #1 was successfully spawned." );
	        	}
	        	else return SendClientMessageEx(playerid, COLOR_GRAD1, "Tank #1 is currently spawned!");
	    	}
			else if(tank == 2) {
	        	if(tanks[1] == 0) {
	            	NGARMVehicles[1] = CreateVehicleEx(432,278.00000000,2024.00000000,17.73996162,270.00000000,0,0, VEHICLE_RESPAWN);
					tanks[1] = 1;
					Vehicle_ResetData(NGARMVehicles[1]);
					SendClientMessageEx(playerid, COLOR_WHITE, "Tank #2 was successfully spawned." );
	        	}
	        	else return SendClientMessageEx(playerid, COLOR_GRAD1, "Tank #2 is currently spawned!");
	    	}
			else if(tank == 3) {
	        	if(tanks[2] == 0) {
	         	   	NGARMVehicles[2] = CreateVehicleEx(432,278.00000000,2030.00000000,17.73996162,270.00000000,0,0, VEHICLE_RESPAWN); //Rhino    *****Restricted to the ARM Division*****
	            	tanks[2] = 1;
					Vehicle_ResetData(NGARMVehicles[2]);
	            	SendClientMessageEx(playerid, COLOR_WHITE, "Tank #3 was successfully spawned." );
	        	}
	        	else return SendClientMessageEx(playerid, COLOR_GRAD1, "Tank #3 is currently spawned!");
	    	}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not in range of the tank spawn position." );
	}
	return 1;
}

CMD:rovehs(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 1 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 1) {
		for(new v = 0; v < sizeof(LSPDVehicles); v++) {
		    if(LSPDVehicles[v] > 0 && IsVehicleOccupied(LSPDVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(LSPDVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (LSPD) have been respawned.");
	} else if(PlayerInfo[playerid][pMember] == 2 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 2) {
		for(new v = 0; v < sizeof(FBIVehicles); v++) {
		    if(FBIVehicles[v] > 0 && IsVehicleOccupied(FBIVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FBIVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (FBI) have been respawned.");
	} else if(PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 4) {
		for(new v = 0; v < sizeof(FDSAVehicles); v++) {
		    if(FDSAVehicles[v] > 0 && IsVehicleOccupied(FDSAVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(FDSAVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (LSFMD) have been respawned.");
	} else if(PlayerInfo[playerid][pMember] == 6 && PlayerInfo[playerid][pRank] >= 5 || PlayerInfo[playerid][pLeader] == 6) {
		for(new v = 0; v < sizeof(GovVehicles); v++) {
		    if(GovVehicles[v] > 0 && IsVehicleOccupied(GovVehicles[v]) == INVALID_VEHICLE_ID)
				SetVehicleToRespawn(GovVehicles[v]);
		}

		SendClientMessage(playerid, COLOR_WHITE, "All unoccupied vehicles for your faction (GOVERNMENT) have been respawned.");
	} else return SendClientMessage(playerid, COLOR_GREY, "You're not authorized to use this command");
	return 1;
}

CMD:respawnfcars(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 3) return SendClientMessageEx(playerid, COLOR_GRAD2, "You are not authorized to use this command.");
	new string[128], factionid;
	if(sscanf(params, "d", factionid)) return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /respawnfcars [factionid]");
	switch(factionid) {
	    case 1: {
			for(new i = 0; i < sizeof(LSPDVehicles); i++) {
			    SetVehicleToRespawn(LSPDVehicles[i]);
			}
		}
		case 2: {
			for(new i = 0; i < sizeof(FBIVehicles); i++) {
			    SetVehicleToRespawn(FBIVehicles[i]);
			}
		}
		case 3: {
			for(new i = 0; i < sizeof(SFPDVehicles); i++) {
			    SetVehicleToRespawn(SFPDVehicles[i]);
			}
		}
		case 4: {
			for(new i = 0; i < sizeof(FDSAVehicles); i++) {
			    SetVehicleToRespawn(FDSAVehicles[i]);
			}
		}
		case 6: {
			for(new i = 0; i < sizeof(GovVehicles); i++) {
			    SetVehicleToRespawn(GovVehicles[i]);
			}
		}
		case 7: {
			for(new i = 0; i < sizeof(SASDVehicles); i++) {
			    SetVehicleToRespawn(SASDVehicles[i]);
			}
		}
		case 11: {
			for(new i = 0; i < sizeof(NGARMVehicles); i++) {
			    for(new e = 0; e < sizeof(NGAIRVehicles); e++) {
			        for(new ah = 0; ah < sizeof(NGLandVehicles); ah++) {
			    		SetVehicleToRespawn(NGARMVehicles[i]);
			    		SetVehicleToRespawn(NGAIRVehicles[e]);
			    		SetVehicleToRespawn(NGLandVehicles[ah]);
					}
				}
			}
		}
		case 12: {
			for(new i = 0; i < sizeof(TierraVehicles); i++) {
			    for(new e = 0; e < sizeof(TierraARVehicles); e++) {
			        for(new ah = 0; ah < sizeof(TierraESVehicles); ah++) {
			            SetVehicleToRespawn(TierraARVehicles[e]);
			            SetVehicleToRespawn(TierraESVehicles[ah]);
			    		SetVehicleToRespawn(TierraVehicles[i]);
					}
				}
			}
		}
		case 13: {
			for(new i = 0; i < sizeof(OPGVehicles); i++) {
			    SetVehicleToRespawn(OPGVehicles[i]);
			}
		}
	}
	format(string, sizeof(string), "You have respawned faction %d's vehicles.", factionid);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:callair(playerid, params[]) {
	if(PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 1 || PlayerInfo[playerid][pDivision] == 4 || PlayerInfo[playerid][pDivision] == 3)) {
		if(isnull(params)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /callair [Hunter | Hydra]" );
		}
	    else if(IsPlayerInRangeOfPoint(playerid, 10, 326.2754,1887.7212,17.6566)) {
	        if(strcmp(params,"hunter",true) == 0) {
	        	if(air[0] == 0) {
       		 		NGAIRVehicles[2] = CreateVehicleEx(425,339.02539062,1898.24414062,19.70312119,90.00000000,0,0, VEHICLE_RESPAWN); //Hunter
     		 		air[0] = 1;
					Vehicle_ResetData(NGAIRVehicles[2]);
	            	SendClientMessageEx(playerid, COLOR_WHITE, "Hunter was successfully spawned." );
	        	}
	        	else return SendClientMessageEx(playerid, COLOR_GRAD1, "Hunter is currently spawned!");
	    	}
			else if(strcmp(params,"hydra",true) == 0) {
	        	if(air[1] == 0) {
	            	NGAIRVehicles[3] = CreateVehicleEx(520, 339.02539062,1876.93261719,19.70312119,90.00000000,0,0, VEHICLE_RESPAWN); //Hydra
					air[1] = 1;
					Vehicle_ResetData(NGAIRVehicles[3]);
					SendClientMessageEx(playerid, COLOR_WHITE, "Hydra was successfully spawned." );
	        	}
	        	else return SendClientMessageEx(playerid, COLOR_GRAD1, "Hydra is currently spawned!");
	    	}
		}
		else return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not in range of the spawn position." );
	}
	return 1;
}

CMD:destroyair(playerid, params[]) {
	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 1 || PlayerInfo[playerid][pDivision] == 4 || PlayerInfo[playerid][pDivision] == 3)) {
		if(isnull(params)) {
		    new string[64];
		    SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroyair [Hunter | Hydra]" );
		    if(PlayerInfo[playerid][pAdmin] >= 3) {
				if(air[0] == 0) {
				    SendClientMessageEx(playerid, COLOR_GREY, "Hunter isn't currently spawned.");
				} else {
				    format(string, sizeof(string), "Hunter is currently spawned, vehicle ID %d", NGAIRVehicles[2]);
		    		SendClientMessageEx(playerid, COLOR_CYAN, string);
				}
		        if(air[1] == 0) {
		            SendClientMessageEx(playerid, COLOR_GREY, "Hydra isn't currently spawned.");
		        } else {
		            format(string, sizeof(string), "Hydra is currently spawned, vehicle ID %d", NGAIRVehicles[3]);
		    		SendClientMessageEx(playerid, COLOR_CYAN, string);
		        }
		    }
		}
		if(strcmp(params,"hunter",true) == 0) {
			if(air[0] == 1) {
				DestroyVehicle(NGAIRVehicles[2]);
				NGAIRVehicles[2] = INVALID_VEHICLE_ID;
 				air[0] = 0;
 				SendClientMessageEx(playerid, COLOR_WHITE, "Hunter has been successfully destroyed.");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "Hunter isn't currently spawned!");
		}
		else if(strcmp(params,"hydra",true) == 0) {
			if(air[1] == 1) {
				DestroyVehicle(NGAIRVehicles[3]);
				NGAIRVehicles[3] = INVALID_VEHICLE_ID;
 				air[1] = 0;
 				SendClientMessageEx(playerid, COLOR_WHITE, "Hydra has been successfully destroyed.");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "Hydra isn't currently spawned!");
		}
	}
 	return 1;
}


CMD:destroytank(playerid, params[]) {
	new
	    tank,
		string[128];

	if(PlayerInfo[playerid][pAdmin] >= 3 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pDivision] == 3 || PlayerInfo[playerid][pDivision] == 5)) {
 		if(sscanf(params, "d", tank)) {
   			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroytank [1-3]");
   			if(PlayerInfo[playerid][pAdmin] >= 3) {
				if(tanks[0] == 0 && tanks[1] == 0 && tanks[2] == 0) {
				    SendClientMessageEx(playerid, COLOR_GREY, "No tanks are currently spawned. " );
				} else {
				    format(string, sizeof(string), "Tank(s) are currently spawned, Vehicle ID's.. Tank 1: %d | Tank 2: %d | Tank 3: %d", NGARMVehicles[0], NGARMVehicles[1], NGARMVehicles[2]);
		    		SendClientMessageEx(playerid, COLOR_CYAN, string);
				}
		    }
   			return 1;
		}
		if(tank < 1 || tank > 3) {
			return SendClientMessageEx(playerid, COLOR_GRAD1, "The tank number can only be 1-3!");
		}

		if(tank == 1) {
			if(tanks[0] == 1) {
				DestroyVehicle(NGARMVehicles[0]);
    			NGARMVehicles[0] = INVALID_VEHICLE_ID;
 				tanks[0] = 0;
 				SendClientMessageEx(playerid, COLOR_WHITE, "Tank #1 has been successfully destroyed.");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "Tank #1 isn't currently spawned!");
		}
		else if(tank == 2) {
			if(tanks[1] == 1) {
				DestroyVehicle(NGARMVehicles[1]);
				NGARMVehicles[1] = INVALID_VEHICLE_ID;
 				tanks[1] = 0;
 				SendClientMessageEx(playerid, COLOR_WHITE, "Tank #2 has been successfully destroyed.");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "Tank #2 isn't currently spawned!");
		}
		else if(tank == 3) {
			if(tanks[2] == 1) {
				DestroyVehicle(NGARMVehicles[2]);
				NGARMVehicles[2] = INVALID_VEHICLE_ID;
 				tanks[2] = 0;
 				SendClientMessageEx(playerid, COLOR_WHITE, "Tank #3 has been successfully destroyed.");
			}
			else return SendClientMessageEx(playerid, COLOR_GRAD1, "Tank #3 isn't currently spawned!");
		}
	}
 	return 1;
}

CMD:showmeship(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11)
	{
	    new Float:X, Float:Y, Float:Z;
	    GetDynamicObjectPos(Carrier[0], X, Y, Z);
	    SetPlayerCheckpoint(playerid,X, Y, Z, 4.0);
		GameTextForPlayer(playerid, "~w~Waypoint set ~r~USS Nimitz", 5000, 1);
	}
	return 1;
}

CMD:resetcarrier(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[playerid][pRank] == 6)
	{
	    if(GetPVarInt(playerid, "dccConfirm") == 0)
	    {
	        SetPVarInt(playerid, "dccConfirm", 1);
	        SendClientMessageEx(playerid, COLOR_WHITE, "Use of this command will fully reset the carrier to its original position");
	        SendClientMessageEx(playerid, COLOR_WHITE, "If you are sure you want to do this, please re-type the command (/resetcarrier)");
	    }
	    else
	    {
	        SetPVarInt(playerid, "dccConfirm", 0);

	        SendClientMessageEx(playerid, COLOR_WHITE, "* Unloading Vehicles");
	        //UnloadNGVehicles();

	        SendClientMessageEx(playerid, COLOR_WHITE, "* Destroying Objects");
			DestroyDynamicObject(sidelift);
			DestroyDynamicObject(backhatch);
			DestroyDynamicObject(backlift);
			for(new x;x<sizeof(Carrier);x++)
			{
			    DestroyDynamicObject(Carrier[x]);
			}
			for(new x;x<sizeof(CarrierS);x++)
			{
			    DestroyDynamicObject(CarrierS[x]);
			}

			SendClientMessageEx(playerid, COLOR_WHITE, "* Re-Building Carrier");
			sidelift = CreateDynamicObject(3114, 231.916656, 3615.134277, 17.269205, 0.0000, 0.0000, 0.0000); // Side Lift Up
			backhatch = CreateDynamicObject(3113, 180.344864, 3600.390137, 2.516232, 0.0000, 0.0000, 0.0000); // Back Hatch Closed
			backlift = CreateDynamicObject(3115, 189.694626, 3599.983398, 17.483730, 0.0000, 0.0000, 0.0000); // Back Lift Up

			Carrier[0] = CreateDynamicObject(10771, 288.665771, 3600.003418, 6.032381, 0.0000, 0.0000, 0.0000, 300);
			Carrier[1] = CreateDynamicObject(11145, 225.782196, 3600.015137, 4.754915, 0.0000, 0.0000, 0.0000, 300);
			Carrier[2] = CreateDynamicObject(11149, 282.526093, 3594.805176, 12.487646, 0.0000, 0.0000, 0.0000, 300);
			Carrier[3] = CreateDynamicObject(11146, 279.620544, 3600.541016, 12.893089, 0.0000, 0.0000, 0.0000, 300);
			Carrier[4] = CreateDynamicObject(10770, 291.858917, 3592.397949, 39.171509, 0.0000, 0.0000, 0.0000, 300);
			Carrier[5] = CreateDynamicObject(10772, 290.014313, 3599.787598, 17.833616, 0.0000, 0.0000, 0.0000, 300);
			Carrier[6] = CreateDynamicObject(1671, 354.860748, 3589.442383, 11.234554, 0.0000, 0.0000, 175.3254, 300);
			Carrier[7] = CreateDynamicObject(925, 304.330383, 3589.067383, 11.735489, 0.0000, 0.0000, 0.0000, 300);
			Carrier[8] = CreateDynamicObject(930, 301.851654, 3588.497070, 11.131838, 0.0000, 0.0000, 0.0000, 300);
			Carrier[9] = CreateDynamicObject(930, 301.856079, 3589.598145, 11.181837, 0.0000, 0.0000, 0.0000, 300);
			Carrier[10] = CreateDynamicObject(964, 300.513062, 3589.303711, 10.705961, 0.0000, 0.0000, 177.4217, 300);
			Carrier[11] = CreateDynamicObject(964, 299.024902, 3589.362793, 10.698584, 0.0000, 0.0000, 177.4217, 300);
			Carrier[12] = CreateDynamicObject(1271, 305.058319, 3591.442871, 11.048584, 0.0000, 0.0000, 359.1406, 300);
			Carrier[13] = CreateDynamicObject(1431, 303.009491, 3591.383789, 11.253574, 0.0000, 0.0000, 0.0000, 300);
			Carrier[14] = CreateDynamicObject(2567, 297.100800, 3591.239746, 12.558563, 0.0000, 0.0000, 91.1003, 300);
			Carrier[15] = CreateDynamicObject(3576, 301.050110, 3593.777344, 12.198634, 0.0000, 0.0000, 0.0000, 300);
			Carrier[16] = CreateDynamicObject(3633, 304.567841, 3593.262207, 11.173386, 0.0000, 0.0000, 0.0000, 300);

			CarrierS[0] = CreateDynamicObject(3267, 320.358582, 3592.519043, 21.567169, 0.0000, 0.0000, 0.0000);
			CarrierS[1] = CreateDynamicObject(11237, 291.557526, 3592.407715, 39.065594, 0.0000, 0.0000, 0.0000);
			CarrierS[2] = CreateDynamicObject(3395, 354.861725, 3590.989746, 10.797120, 0.0000, 0.0000, 88.0403);
			CarrierS[3] = CreateDynamicObject(1671, 356.571838, 3588.612793, 11.234554, 0.0000, 0.0000, 134.9316);
			CarrierS[4] = CreateDynamicObject(3393, 358.360016, 3588.834961, 10.797121, 0.0000, 0.0000, 0.0000);
			CarrierS[5] = CreateDynamicObject(3277, 320.391876, 3592.538086, 21.514416, 0.0000, 0.0000, 164.0483);

			SendClientMessageEx(playerid, COLOR_WHITE, "* Re-Loading Vehicles");
			//LoadNGVehicles();

			SendClientMessageEx(playerid, COLOR_WHITE, "* Saving Carrier");
			SaveCarrier();

			SendClientMessageEx(playerid, COLOR_WHITE, "* Done!");
		}
	}
	return 1;
}

CMD:control(playerid, params[])
{
    if(PlayerInfo[playerid][pLeader] == 11 && PlayerInfo[playerid][pRank] == 6)
	{
		if(control[playerid] == 1)
		{
		    TogglePlayerControllable(playerid, true);
		    SetCameraBehindPlayer(playerid);
		    KillTimer(ControlTimer[playerid]);
		    //LoadNGVehicles();
		    SaveCarrier();
	  		control[playerid] = 0;
	   		SendClientMessageEx(playerid, COLOR_WHITE, "You are no longer controlling the Aircraft Carrier");
		}
		else
		{
		    //UnloadNGVehicles();
	     	new Float:X, Float:Y, Float:Z;
		    GetDynamicObjectPos(Carrier[0], X, Y, Z);
		    SetPlayerCameraPos(playerid, X-200, Y, Z+40);
		    SetPlayerCameraLookAt(playerid, X, Y, Z);
		    TogglePlayerControllable(playerid, false);
		    ControlTimer[playerid] = SetTimerEx("ControlCam", 1000, true, "i", playerid);
		    control[playerid] = 1;
	   		controlspeed[playerid] = 25;
	  		controldistance[playerid] = 50;
		   	SendClientMessageEx(playerid, COLOR_WHITE, "You are now controlling the Aircraft Carrier with Speed 50, Distance 100");
		}
	}
	return 1;
}

CMD:bldown(playerid, params[])
{
    new string[30 + MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(backlift, X, Y, Z);
   	if(IsPlayerInRangeOfPoint(playerid, 50, X, Y, Z) && (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11))
    {
    	if(canmove == 1) return 1;
	    format(string, sizeof(string), "* %s moves down the back lift.", GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

		MoveDynamicObject (backlift,X, Y, 10.435794,1); // Back Lift (down position)
	}
	return 1;
}

CMD:blup(playerid, params[])
{
    new string[30 + MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(backlift, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 50, X, Y, Z) && (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11))
    {
    	if(canmove == 1) return 1;
    	format(string, sizeof(string), "* %s moves up the back lift.", GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		MoveDynamicObject (backlift,X, Y, 17.483730,1); // Back Lift (up position)
	}
	return 1;
}

CMD:sldown(playerid, params[])
{
    new string[30 + MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(sidelift, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 50, X, Y, Z) && (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11))
    {
    	if(canmove == 1) return 1;
	    format(string, sizeof(string), "* %s moves down the side lift.", GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		MoveDynamicObject (sidelift,X, Y, 10.271654,1); // Side Lift (down position)
	}
	return 1;
}

CMD:slup(playerid, params[])
{
	new string[30 + MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(sidelift, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 50, X, Y, Z) && (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11))
    {
    	if(canmove == 1) return 1;
	    format(string, sizeof(string), "* %s moves up the side lift.", GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		MoveDynamicObject (sidelift,X, Y, 17.269205,1); // Side Lift (down position)
	}
	return 1;
}

CMD:bhdown(playerid, params[])
{
    new string[30 + MAX_PLAYER_NAME], Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(backhatch, X, Y, Z);
   	if(IsPlayerInRangeOfPoint(playerid, 50, X, Y, Z) && (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11))
    {
		if(canmove == 1) return 1;
   		format(string, sizeof(string), "* %s moves down the back hatch.", GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		MoveDynamicObject (backhatch, X, Y, 2.516232,1); // Back Hatch (down position)
	}
	return 1;
}

CMD:bhup(playerid, params[])
{
    new string[128], Float:X, Float:Y, Float:Z;
    GetDynamicObjectPos(backhatch, X, Y, Z);
    if(IsPlayerInRangeOfPoint(playerid, 50, X, Y, Z) && (PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11))
    {
    	if(canmove == 1) return 1;
	    format(string, sizeof(string), "* %s moves up the back hatch", GetPlayerNameEx(playerid));
		ProxDetector(50.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		MoveDynamicObject (backhatch,X, Y, 17.280232,1); // Back Hatch (up position)
	}
	else
	{
	    SendClientMessageEx(playerid, COLOR_GRAD2, "* You are not near the back lift");
	}
	return 1;
}

CMD:badge(playerid, params[]) {
    if((IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 12 || PlayerInfo[playerid][pLeader] == 12 || PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10) && GetPVarInt(playerid, "IsInArena") < 0 && !GetPVarInt(playerid, "EventToken") && PlayerInfo[playerid][pJailTime] == 0
	|| PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 1) {
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use your badge while you're in an event.");
			return 1;
		}
		if(PlayerInfo[playerid][pDuty]) {
			PlayerInfo[playerid][pDuty] = 0;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have hidden your badge, and will now be identified as being off-duty.");
		}
		else {
			PlayerInfo[playerid][pDuty] = 1;
			SetPlayerToTeamColor(playerid);
			SendClientMessageEx(playerid, COLOR_WHITE, "You have shown your badge, and will now be identified as being on-duty.");
		}
	}
	return 1;
}

CMD:showmehq(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
        SetPlayerCheckpoint(playerid,-418.95, -1759.26, 6.22, 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN;
    }
    return 1;
}


CMD:showmehq2(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
        SetPlayerCheckpoint(playerid,811.087707, -564.493835, 16.335937, 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN2;
    }
    return 1;
}


CMD:showmehq3(playerid, params[])
{
    if(CheckPointCheck(playerid)) {
        SendClientMessageEx(playerid, COLOR_WHITE, "Please ensure that your current checkpoint is destroyed first (you either have material packages, or another existing checkpoint).");
        return 1;
    }
    if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
        SetPlayerCheckpoint(playerid, 1415.727905, -1299.371093, 15.054657, 4.0);
        GameTextForPlayer(playerid, "~w~Waypoint set ~r~HQ", 5000, 1);
        gPlayerCheckpointStatus[playerid] = CHECKPOINT_HITMAN3;
    }
    return 1;
}

CMD:shutdown(playerid, params[])
{
    if(IsACop(playerid)) {
        new string[128];
        new tw = GetPlayerTurfWarsZone(playerid);
        new rank = PlayerInfo[playerid][pRank];
        if(rank < 3) {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be at least Rank 3 to shutdown turfs!");
            return 1;
        }
        if(tw != -1) {
            if(TurfWars[tw][twLocked] == 1) {
                SendClientMessageEx(playerid, COLOR_GRAD2, "The turf is currently locked by a admin, you can not shutdown the turf!");
                return 1;
            }
            if(TurfWars[tw][twVulnerable] == 0) {
                if(TurfWars[tw][twActive] == 0) {
                    SendClientMessageEx(playerid, COLOR_GRAD2, "The turf isn't in a active turf war, you have no reason to shutdown the turf!");
                }
                else {
                    new count = 0;
                    if(TurfWars[tw][twAttemptId] == -1) {
                        SendClientMessageEx(playerid, COLOR_GRAD2, "The LEO Factions are already attempting to shutdown the turf war!");
                        return 1;
                    }

                    foreach(new i: Player) {
                        if(TurfWars[tw][twAttemptId] == PlayerInfo[i][pFMember]) {
                            if(GetPlayerTurfWarsZone(i) == tw) {
                                count++;
                            }
                        }
                    }
                    if(count != 0) {
                        format(string,sizeof(string),"There is still %d Attacking Members on the Turf, you must get rid of them before shuting down!",count);
                        SendClientMessageEx(playerid, COLOR_GRAD2, string);
                    }
                    else {
                        ShutdownTurfWarsZone(tw);
                    }
                }
            }
            else {
                SendClientMessageEx(playerid, COLOR_GRAD2, "This turf is currently not vulnerable, you are unable to shutdown!");
                SendClientMessageEx(playerid, COLOR_GRAD1, "If you are in FBI, You must contact a admin to lock down the turf with a IC Casefile.");
            }
        }
        else {
            SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be in a turf to be able to shutdown turfs!");
        }
    }
    else {
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not in a LEO Faction, you can not shutdown turfs!");
    }
	return 1;
}

CMD:present(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] == 5 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3)
	{
		new giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /present [player]");
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
			if(PlayerInfo[giveplayerid][pBeingSentenced] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "That player isn't pending a sentence!");
			if(courtjail[giveplayerid] == 0) return SendClientMessageEx(playerid, COLOR_GRAD1, "That player isn't in the courthouse jail!");
			if(courtjail[giveplayerid] == 2)
			{
				SetPlayerPosEx(giveplayerid, 2132.0679,1314.2238,7699.0547);
		    	SetPlayerFacingAngle(giveplayerid, 354.2492);
			}
			else if(courtjail[giveplayerid] == 1)
			{
				SetPlayerPosEx(giveplayerid, 2131.8599,1294.4722,7699.0547);
		    	SetPlayerFacingAngle(giveplayerid, 182.6859);
			}
			courtjail[giveplayerid] = 0;
		    SetCameraBehindPlayer(giveplayerid);
		}
	}
	else
	{
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not a part of the Judicial System/SFPD!");
	}
	return 1;
}

CMD:changename(playerid, params[])
{
	if(IsAtNameChange(playerid))
	{
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pMember] == 16)
		{
			ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes are free for hitmen, SHAFT and FBI.", "Change", "Cancel" );
		}
		else
		{
			ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes cost $15,000 per level.", "Change", "Cancel" );
		}
	}
	else if(PlayerInfo[playerid][pAdmin] == 1 && PlayerInfo[playerid][pSMod] > 0) ShowPlayerDialog( playerid, DIALOG_NAMECHANGE, DIALOG_STYLE_INPUT, "Name Change","Please enter your new desired name!\n\nNote: Name Changes are free because you are a Senior Moderator.", "Change", "Cancel" );
	else
	{
		SendClientMessageEx( playerid, COLOR_WHITE, "   You are not in the Name Change Place!" );
	}
	return 1;
}

CMD:checkjudgements(playerid, params[])
{
    if(IsACop(playerid))
    {

    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_GRAD4, "There must be at least one judge online to use this command!");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Pending Judgements List:");

		new
			string[53],
			fCounter;

		foreach(new i: Player)
		{
			if(PlayerInfo[i][pJudgeJailType] == 1)
			{
	  			if(PlayerInfo[i][pJailTime] > 1)
		    	{
					format(string, sizeof(string), "Sentenced: %s - jail (transport completed) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
				else
				{
    				format(string, sizeof(string), "Sentenced: %s - jail (being transported) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}
			else if(PlayerInfo[i][pJudgeJailType] == 2)
			{
				if(PlayerInfo[i][pJailTime] > 1)
    			{
					format(string, sizeof(string), "Sentenced: %s - prison (transport completed) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
				else
				{
    				format(string, sizeof(string), "Sentenced: %s - prison (being transported) - time: %d.",GetPlayerNameEx(i),PlayerInfo[i][pJudgeJailTime]);
					SendClientMessageEx(playerid, COLOR_GRAD1, string);
					++fCounter;
				}
			}
		}
		if(fCounter <= 0)
		{
  			SendClientMessageEx(playerid, COLOR_GRAD1, "Nobody is pending judgement.");
		}
  	}
	return 1;
}

CMD:freezebank(playerid, params[])
{
  	if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");

	new
	    giveplayerid,
		string[128],
		rank[64],
		division[64],
		employer[64];

	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freezebank [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(PlayerInfo[giveplayerid][pFreezeBank] == 0)
	    {
	        PlayerInfo[giveplayerid][pFreezeBank] = 1;
         	GetPlayerFactionInfo(playerid, rank, division, employer);
	    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has froze %s bank account.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	ABroadCast(COLOR_YELLOW,string, 2);
	    	format(string, sizeof(string), "You have freezed %s's bank account.", GetPlayerNameEx(giveplayerid));
   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
   		 	format(string, sizeof(string), "Your bank account has been frozen by %s", GetPlayerNameEx(playerid));
   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    }
	    else
	    {
	        PlayerInfo[giveplayerid][pFreezeBank] = 0;
	        format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has unfrozen %s bank account.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	    	ABroadCast(COLOR_YELLOW,string, 2);
	    	format(string, sizeof(string), "You have unfrozen %s's bank account.", GetPlayerNameEx(giveplayerid));
   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
   		 	format(string, sizeof(string), "Your bank account has been unfrozen by %s", GetPlayerNameEx(playerid));
   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    }
	}
	return 1;
}

CMD:freezeassets(playerid, params[])
{
  	if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GREY, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");

	new
	    giveplayerid,
		string[128],
		rank[64],
		division[64],
		employer[64],
		houseorcar[8];

	if(sscanf(params, "us[8]", giveplayerid, houseorcar)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freezeassets [player] [house/car]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(strcmp(houseorcar, "house", true) == 0)
	    {
		    if(PlayerInfo[giveplayerid][pFreezeHouse] == 0)
		    {
		        PlayerInfo[giveplayerid][pFreezeHouse] = 1;
	         	GetPlayerFactionInfo(playerid, rank, division, employer);
		    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has frozen %s house assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    	ABroadCast(COLOR_YELLOW,string, 2);
		    	format(string, sizeof(string), "You have freezed %s's house assets.", GetPlayerNameEx(giveplayerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   		 	format(string, sizeof(string), "Your house assets have been frozen by %s", GetPlayerNameEx(playerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    }
		    else
		    {
		        PlayerInfo[giveplayerid][pFreezeHouse] = 0;
		        format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has unfrozen %s bank account.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    	ABroadCast(COLOR_YELLOW,string, 2);
		    	format(string, sizeof(string), "You have unfrozen %s's house assets.", GetPlayerNameEx(giveplayerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   		 	format(string, sizeof(string), "Your house assets have been unfrozen by %s", GetPlayerNameEx(playerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    }
		}
		else if(strcmp(houseorcar, "car", true) == 0)
	    {
		    if(PlayerInfo[giveplayerid][pFreezeCar] == 0)
		    {
		        PlayerInfo[giveplayerid][pFreezeCar] = 1;
	         	GetPlayerFactionInfo(playerid, rank, division, employer);
		    	format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has frozen %s vehicle assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    	ABroadCast(COLOR_YELLOW,string, 2);
		    	format(string, sizeof(string), "You have freezed %s's vehicle assets.", GetPlayerNameEx(giveplayerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   		 	format(string, sizeof(string), "Your vehicle assets have been frozen by %s", GetPlayerNameEx(playerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    }
		    else
		    {
		        PlayerInfo[giveplayerid][pFreezeCar] = 0;
		        format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has unfrozen %s vehicle assets.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
		    	ABroadCast(COLOR_YELLOW,string, 2);
		    	format(string, sizeof(string), "You have unfrozen %s's vehicle assets.", GetPlayerNameEx(giveplayerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
	   		 	format(string, sizeof(string), "Your vehicle assets have been unfrozen by %s", GetPlayerNameEx(playerid));
	   		 	SendClientMessageEx(playerid, COLOR_WHITE, string);
		    }
		}
		else
		{
		    return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /freezeassets [player] [house/car]");
		}
	}
	return 1;
}

CMD:reward(playerid, params[])
{


    if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");

	new
		giveplayerid,
		money;

	if(sscanf(params, "ud", giveplayerid, money)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /reward [player] [money(max of $50,000)]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
		new
			string[64 + (MAX_PLAYER_NAME * 2)];

  		if(money < 1 || money > 50000) return SendClientMessageEx(playerid, COLOR_GRAD5, "Reward amount cannot be lower than $1 or higher than $50,000!");
    	new rank[64], division[64], employer[64];
   		GetPlayerFactionInfo(playerid, rank, division, employer);
	    format(string, sizeof(string), "{AA3333}AdmWarning{FFFF00}: %s %s has just rewarded %s $%d.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
	    ABroadCast(COLOR_YELLOW,string, 2);
	    new log[128];
		format(log, sizeof(log), "AdmCmd: %s %s has just rewarded %s $%d", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), money);
		Log("logs/rpspecial.log", log);
  		GivePlayerCash(giveplayerid, money);
    	format(string, sizeof(string), "You have given a reward of $%d to %s.", money, GetPlayerNameEx(giveplayerid));
	    SendClientMessageEx(playerid, COLOR_WHITE, string);
	    format(string, sizeof(string), "You have recieved a reward of $%d from %s %s.", money, rank, GetPlayerNameEx(playerid));
	   	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:reversejudgement(playerid, params[])
{


    if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 4) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 4+ can do this.");

	new
		giveplayerid; // For future reference - sscanf plugin is 3 times as fast as ReturnUser, even when used on only one argument

	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /reversejudgement [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(PlayerInfo[giveplayerid][pJudgeJailTime] != 0)
   		{
     		new rank[64], division[64], employer[64], string[52 + (MAX_PLAYER_NAME * 2)];
       		GetPlayerFactionInfo(playerid, rank, division, employer);
			if(PlayerInfo[giveplayerid][pJailTime] != 0) PlayerInfo[giveplayerid][pJailTime] = 0;
			PlayerInfo[giveplayerid][pJudgeJailTime] = 0;
   			switch(PlayerInfo[playerid][pSex])
			{
			    case 1: format(string, sizeof(string), "%s %s has reversed %s's judgement, he is free to go.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			    case 2: format(string, sizeof(string), "%s %s has reversed %s's judgement, she is free to go.", rank, GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
			}
   			SendRadioMessage(1, DEPTRADIO, string);
			SendRadioMessage(2, DEPTRADIO, string);
			SendRadioMessage(3, DEPTRADIO, string);
			SendRadioMessage(5, DEPTRADIO, string);
			SendRadioMessage(6, DEPTRADIO, string);
			SendRadioMessage(7, DEPTRADIO, string);
			SendRadioMessage(11, DEPTRADIO, string);
			SendRadioMessage(13, DEPTRADIO, string);
			SendRadioMessage(16, DEPTRADIO, string);
   		}
	    else
   		{
        	SendClientMessageEx(playerid, COLOR_GRAD1, "That player doesn't have a jail/prison sentence.");
   		}
	}
	return 1;
}

CMD:commute(playerid, params[])
{


	if((PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 ) && PlayerInfo[playerid][pRank] >= 6)
 	{
		new
			giveplayerid;

		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /commute [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[giveplayerid][pJudgeJailTime] != 0)
		    {
				new string[68 + (MAX_PLAYER_NAME * 2)];
				if(PlayerInfo[giveplayerid][pJailTime] != 0) PlayerInfo[giveplayerid][pJailTime] = PlayerInfo[giveplayerid][pJailTime]/2;
				PlayerInfo[giveplayerid][pJudgeJailTime] = PlayerInfo[giveplayerid][pJudgeJailTime]/2;
				switch(PlayerInfo[playerid][pSex])
				{
					case 1: format(string, sizeof(string), "President %s has commuted %s, his sentence is now half (%d seconds).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pJudgeJailTime]);
					case 2: format(string, sizeof(string), "President %s has commuted %s, her sentence is now half (%d seconds).", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pJudgeJailTime]);
				}
			    SendRadioMessage(1, DEPTRADIO, string);
				SendRadioMessage(2, DEPTRADIO, string);
				SendRadioMessage(3, DEPTRADIO, string);
				SendRadioMessage(5, DEPTRADIO, string);
				SendRadioMessage(6, DEPTRADIO, string);
				SendRadioMessage(7, DEPTRADIO, string);
				SendRadioMessage(11, DEPTRADIO, string);
				SendRadioMessage(13, DEPTRADIO, string);
				SendRadioMessage(16, DEPTRADIO, string);
	    	}
	    	else
   			{
	        	SendClientMessageEx(playerid, COLOR_GRAD1, "That player doesn't have a jail/prison sentence.");
   			}
		}
   	}
   	else
   	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only the President can use this command.");
	}
	return 1;
}

CMD:pardon(playerid, params[])
{
    if((PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6 ) && PlayerInfo[playerid][pRank] >= 6)
    {
		new
			giveplayerid;

        if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /pardon [player]");
		if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		if(IsPlayerConnected(giveplayerid))
		{
		    if(PlayerInfo[giveplayerid][pJudgeJailTime] != 0)
		    {
				new string[58 + (MAX_PLAYER_NAME * 2)];
		        if(PlayerInfo[giveplayerid][pJailTime] != 0) PlayerInfo[giveplayerid][pJailTime] = 0;
		        PlayerInfo[giveplayerid][pJudgeJailTime] = 0;
		        switch(PlayerInfo[playerid][pSex])
				{
				    case 1: format(string, sizeof(string), "President %s has forgiven %s of his crimes, he's now free.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				    case 2: format(string, sizeof(string), "President %s has forgiven %s of his crimes, she's now free.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				}
			    SendRadioMessage(1, DEPTRADIO, string);
				SendRadioMessage(2, DEPTRADIO, string);
				SendRadioMessage(3, DEPTRADIO, string);
				SendRadioMessage(5, DEPTRADIO, string);
				SendRadioMessage(6, DEPTRADIO, string);
				SendRadioMessage(7, DEPTRADIO, string);
				SendRadioMessage(11, DEPTRADIO, string);
				SendRadioMessage(13, DEPTRADIO, string);
				SendRadioMessage(16, DEPTRADIO, string);
		    }
		    else
	   		{
	       		SendClientMessageEx(playerid, COLOR_GRAD1, "That player doesn't have a jail/prison sentence.");
	   		}
		}
	}
 	else
  	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Only the President can use this command.");
  	}
	return 1;
}

CMD:wants(playerid, params[])
{
    if(IsACop(playerid))
    {
    	if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_GRAD4, "There must be at least one judge online to use this command!");
		SendClientMessageEx(playerid, COLOR_YELLOW, "Outstanding Warrants List:");

		new
			fCounter,
			string[128];

		foreach(new i: Player)
		{
			if(!isnull(PlayerInfo[i][pWarrant]))
			{
				format(string, sizeof(string), "%s (%d) - reason: %s.",GetPlayerNameEx(i),i,PlayerInfo[i][pWarrant]);
				SendClientMessageEx(playerid, COLOR_GRAD1, string);
				++fCounter;
			}
		}
		if(fCounter <= 0)
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "Nobody has any pending warrants.");
		}
  	}
	return 1;
}
CMD:jarrest(playerid, params[])
{
    if(PlayerInfo[playerid][pMember]==3||PlayerInfo[playerid][pLeader]==3)
	{
 		if(!IsAtArrestPoint(playerid))
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the arrest point.");
	    	return 1;
		}
		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(PlayerInfo[suspect][pJudgeJailType] != 1) { return SendClientMessageEx(playerid, COLOR_GREY, "That player doesn't need to complete a sentence in jail."); }
				new string[18 + MAX_PLAYER_NAME];
				format(string, sizeof(string), "* You arrested %s!", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				ResetPlayerWeaponsEx(suspect);
				for(new x; x < MAX_PLAYERVEHICLES; x++) if(PlayerVehicleInfo[suspect][x][pvTicket] >= 1) {
					PlayerVehicleInfo[suspect][x][pvTicket] = 0;
				}
				SetPlayerInterior(suspect, 5);
 				SetPlayerPosEx(suspect,318.5971,312.9619,999.1484);
 				PlayerInfo[suspect][pJailTime] = PlayerInfo[suspect][pJudgeJailTime];
 				DeletePVar(suspect, "IsFrozen");
 				PhoneOnline[suspect] = 1;
  				PlayerInfo[suspect][pArrested] += 1;
    			SetPlayerFree(suspect,playerid, "was arrested");
			   	PlayerInfo[suspect][pWantedLevel] = 0;
			   	SetPlayerToTeamColor(suspect);
			    SetPlayerWantedLevel(suspect, 0);
				WantLawyer[suspect] = 1;
				TogglePlayerControllable(suspect, 1);
				ClearAnimations(suspect);
				PlayerCuffed[suspect] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				PlayerInfo[suspect][pVW] = 0;
				SetPlayerVirtualWorld(suspect, 0);
			}
		}
	}
	return 1;
}

CMD:deliver(playerid, params[])
{
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 1991.7953,-2321.2532,13.5469))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not at the Los Santos International Airport.");
		return 1;
	}
	new giveplayerid;
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /deliver [player]");
	if(PlayerInfo[playerid][pRank] < 1)
	{
		SendClientMessageEx(playerid, COLOR_WHITE, "You must be at least rank 1.");
		return 1;
	}
	if(IsPlayerConnected(giveplayerid))
	{
		if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "   Can't throw yourself into prison!"); return 1; }
		if(PlayerInfo[giveplayerid][pJudgeJailTime] == 0 && PlayerInfo[giveplayerid][pJudgeJailType] != 2) { SendClientMessageEx(playerid, COLOR_GREY, "That player doesn't need to be in prison!"); return 1; }
		if(ProxDetectorS(8.0, playerid, giveplayerid))
		{
			new string[37 + MAX_PLAYER_NAME];
  			DeletePVar(giveplayerid, "IsFrozen");
			format(string, sizeof(string), "* You've brought %s to EBCF.", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "* %s brought you to EBCF.", GetPlayerNameEx(playerid));
			SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
			GameTextForPlayer(giveplayerid, "~w~Welcome to ~n~~r~EBCF", 5000, 3);
			ClearAnimations(giveplayerid);
			PlayerCuffed[giveplayerid] = 0;
			DeletePVar(giveplayerid, "PlayerCuffed");
			format(PlayerInfo[giveplayerid][pPrisonedBy], 24, "%s", GetPlayerNameEx(playerid));
			format(PlayerInfo[giveplayerid][pPrisonReason], 128, "[IC] Judge Sentence");
			PlayerInfo[giveplayerid][pWantedLevel] = 0;
			SetPlayerToTeamColor(giveplayerid);
			SetPlayerWantedLevel(giveplayerid, 0);
			SetPlayerSkin(giveplayerid, 50);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pJailTime] = PlayerInfo[giveplayerid][pJudgeJailTime];
			SetPlayerInterior(giveplayerid, 1);
			PlayerInfo[giveplayerid][pInt] = 1;
			SetPlayerSkin(giveplayerid, 50);
			SetPlayerVirtualWorld(giveplayerid, 0);
			PlayerInfo[giveplayerid][pVW] = 0;
			SetPlayerColor(giveplayerid, TEAM_ORANGE_COLOR);
			new rand = random(sizeof(DocPrison));
			SetPlayerFacingAngle(giveplayerid, 0);
			SetPlayerPosEx(giveplayerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
			ResetPlayerWeaponsEx(giveplayerid);
			Player_StreamPrep(giveplayerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		return 1;
	}
	return 1;
}

CMD:checktruck(playerid, params[])
{
	if(PlayerInfo[playerid][pJob] != 20 && PlayerInfo[playerid][pJob2] != 20 && !IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a Trucker or a Cop!");
        return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot search the contents of a truck while inside a vehicle.");
			return 1;
		}
		new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(closestcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if(boot == VEHICLE_PARAMS_OFF || boot == VEHICLE_PARAMS_UNSET)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "The truck's trunk must be opened in order to search it.");
			return 1;
		}

		new string[128];

		new iTruckContents = TruckContents{closestcar};
		new truckcontentname[50];
		if(iTruckContents == 0)
		{ format(truckcontentname, sizeof(truckcontentname), "None"); }
		else if(iTruckContents >= 1 && iTruckContents <= 3)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Food & beverages");}
		else if(iTruckContents >= 4 && iTruckContents <= 6)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Clothing"); }
		else if(iTruckContents == 7)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}Legal materials"); }
		else if(iTruckContents >= 8 && iTruckContents <= 10)
		{ format(truckcontentname, sizeof(truckcontentname), "{00F70C}24/7 items"); }
		else if(iTruckContents >= 11 && iTruckContents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal weapons"); }
		else if(iTruckContents >= 16 && iTruckContents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal drugs"); }
		else if(iTruckContents >= 21 && iTruckContents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}Illegal materials"); }

     	SendClientMessageEx(playerid, COLOR_GREEN,"_______________ Los Santos Docks TRUCK _______________");
		if(IsPlayerInVehicle(playerid, closestcar))
  		{
    		SendClientMessageEx(playerid, COLOR_WHITE, "There is a player in that truck. In order to check the content of the truck, the driver must be removed.");
      		return 1;
		}

		format(string, sizeof(string), "Vehicle registration: %s (%d)", GetVehicleName(closestcar), closestcar);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "Content: %s", truckcontentname);
		SendClientMessageEx(playerid, COLOR_WHITE, string);

		if(IsACop(playerid) && iTruckContents >= 11)
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "To remove the illegal goods, type /cleartruck near the truck.");
		}

		if(PlayerInfo[playerid][pJob] == 20 || PlayerInfo[playerid][pJob2] == 20)
		{
			if(iTruckContents > 0 && TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "To deliver the goods, type /hijacktruck as the driver.");
			}
			else if(TruckUsed[playerid] == INVALID_VEHICLE_ID)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "To get goods, type /loadtruck as the driver.");
			}
			else if(TruckUsed[playerid] == closestcar && gPlayerCheckpointStatus[playerid] == CHECKPOINT_RETURNTRUCK)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "This is your truck. You have not returned it to the docks yet for your pay.");
			}
			else if(TruckUsed[playerid] == closestcar)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "This is your truck. You have not delivered your goods yet.");
			}
			else if(TruckUsed[playerid] != INVALID_VEHICLE_ID)
			{
				SendClientMessageEx(playerid, COLOR_YELLOW, "You are already on another delivery. Type /cancel truck to cancel that delivery.");
			}
		}
     	SendClientMessageEx(playerid, COLOR_GREEN,"_________________________________________________________");
    }
	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not near a Los Santos Docks truck.");
 	}
    return 1;
}

CMD:cleartruck(playerid, params[])
{
	if(!IsACop(playerid))
	{
        SendClientMessageEx(playerid, COLOR_GRAD2, "You are not a Cop!");
        return 1;
	}

	new carid = GetPlayerVehicleID(playerid);
 	new closestcar = GetClosestCar(playerid, carid);
  	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 6.0) && IsATruckerCar(closestcar))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    SendClientMessageEx(playerid, COLOR_GRAD1, "You cannot clear the truck while inside of a vehicle.");
		    return 1;
		}
		new iTruckContents = TruckContents{closestcar};
		if(iTruckContents < 11)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "There are no illegal items in that Truck.");
			return 1;
		}
		new string[128];

		new truckcontentname[50];
		if(iTruckContents >= 11 && iTruckContents <= 15)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal weapons"); }
		else if(iTruckContents >= 16 && iTruckContents <= 20)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal drugs"); }
		else if(iTruckContents >= 21 && iTruckContents <= 25)
		{ format(truckcontentname, sizeof(truckcontentname), "{FF0606}illegal materials"); }
 		foreach(new i: Player)
		{
  			if(TruckUsed[i] == closestcar)
     		{
				DeletePVar(i, "TruckDeliver");
				TruckUsed[i] = INVALID_VEHICLE_ID;
				TruckContents{closestcar} = 0;
				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
 				SendClientMessageEx(i, COLOR_WHITE, "Your Truck delivery has failed. Law enforcement has confiscated the illegal goods.");
       		}
		}
		format(string, sizeof(string), "You removed the %s {FFFFFF}from the Truck.", truckcontentname);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "* %s has taken the illegal items from the Truck.", GetPlayerNameEx(playerid));
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    }
   	else
	{
 		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not near a Los Santos Docks Truck.");
 	}
    return 1;
}

CMD:spikestrips(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pRank] >= 3)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed spikes:");
   			for(new i, string[56 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] != 0) // Checking for next available ID.
				{
					format(string, sizeof(string), "HQ: Spike ID: %d | Deployed location: %s | Deployed by: %s", i, SpikeStrips[i][sDeployedAt], SpikeStrips[i][sDeployedBy]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:warnlight(playerid, params[])
{
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
            return SendClientMessage(playerid, -1, "* You are not the driver!");
        }
        new pveh = GetPlayerVehicleID(playerid);
        if (!GetVehicleModel(pveh)) return SendClientMessage(playerid, -1, "* You are not in a vehicle!");
        if (VObject5(obj[pveh])) return SendClientMessage(playerid, -1, "** You switched off the emergency lights.**"), DObject5(obj[pveh]);
        switch (GetVehicleModel(pveh))
       {
			case 573:
            {
                obj[pveh] = CObject5(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject5(obj[pveh], pveh, -0.0, 2.8, 1.6, 0.000000, 0.000000, 0.000000);
            }
            default:
            {
                return SendClientMessage(playerid, -1, "* You are not in a warning light compatible police vehicle!");
            }
        }
        return SendClientMessage(playerid, -1, "**Emergency Lights Activated.**");
	//return 0;
}

CMD:code2(playerid, params[])
{
		if (!IsACop(playerid))
		{
			return SendClientMessage(playerid, -1, "You are not a Law Enforcement Officer");
		}
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
            return SendClientMessage(playerid, -1, "* You are not the driver!");
        }
        new pveh = GetPlayerVehicleID(playerid);
        if (!GetVehicleModel(pveh)) return SendClientMessage(playerid, -1, "* You are not in a vehicle!");
        if (VObject2(obj[pveh])) return SendClientMessage(playerid, -1, "* You switched off the lights."), DObject2(obj[pveh]);
        switch (GetVehicleModel(pveh))
        {
			//19419 - Lightbar, 18646 - Dash, 19292 - blue flash, 19294 - yellow flash, 19290 red flash
			case 420:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 421:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 560:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 426:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 457:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, 0.049999, 1.4, 0.000000, 0.000000, 0.000000);
            }
			case 482:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, 0.6, 1.05, 0.000000, 0.000000, 0.000000);
            }
			case 490:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, 0.039999, 1.0, 0.000000, 0.000000, 0.000000);
            }
			 case 497:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000,1, -0.65, 0.000000, 0.000000, 0.000000);
	         }
			case 494:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -0.2, 0.81, 0.000000, 0.000000, 0.000000);
            }
			case 503:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -0.2, 0.81, 0.000000, 0.000000, 0.000000);
            }
			case 504:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -0.2, 0.81, 0.000000, 0.000000, 0.000000);
            }
			case 505:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, -0.19999, 1.1, 0.000000, 0.000000, 0.000000);
            }
			case 523:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000, 0.734498, 0.27, 0.000000, 0.000000, 0.000000);
	         }
			case 528:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, 0.049999, 1.05, 0.000000, 0.000000, 0.000000);
            }
			 case 544:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000,4.35, 1.35,0.00000, 0.000000, 0.000000);
	         }
			  case 535:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000,0.52, 0.5,0.00000, 0.000000, 0.000000);
	         }
			  case 545:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000,-0.4, 0.85,0.00000, 0.000000, 0.000000);
	         }
			 case 554:
            {
                obj[pveh] = CObject2(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000,0.52, 0.85,0.00000, 0.000000, 0.000000);
	         }
			 case 556:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.000000,-0.1, 1.70,0.00000, 0.000000, 0.000000);
	         }
             case 566:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			 case 583:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject2(obj[pveh], pveh, 0.5,-0.4, 1.72,0.00000, 0.000000, 0.000000);
			}
			case 585:
            {
                obj[pveh] = CObject2(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			 case 596:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, -0.379999, 0.889999, 0.000000, 0.000000, 0.000000);
            }
             case 597:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, -0.474999, 0.834999, 0.000000, 0.000000, 0.000000);
            }
             case 598:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, -0.334498, 0.90, 0.000000, 0.000000, 0.000000);
            }
            case 599:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, -0.19999, 1.0, 0.000000, 0.000000, 0.000000);
            }
		    case 601:
            {
                obj[pveh] = CObject2(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject2(obj[pveh], pveh, 0.000000, 2.49999, 1.1, 0.000000, 0.000000, 0.000000);
            }
			default:
            {
                return SendClientMessage(playerid, -1, "* You are not in a CODE 2 compatible emergency vehicle!");
            }
        }
        return SendClientMessage(playerid, -1, "**Emergency Lights Activated.**");
}

CMD:traffic(playerid, params[])
{
		if (!IsACop(playerid))
		{
			return SendClientMessage(playerid, -1, "You are not a Law Enforcement Officer");
		}
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
            return SendClientMessage(playerid, -1, "* You are not the driver!");
        }
        new pveh = GetPlayerVehicleID(playerid);
        if (!GetVehicleModel(pveh)) return SendClientMessage(playerid, -1, "* You are not in a vehicle!");
        if (VObject4(obj[pveh])) return SendClientMessage(playerid, -1, "* You switched off the lights."), DObject4(obj[pveh]);
        switch (GetVehicleModel(pveh))
        {
			//19419 - Lightbar, 18646 - Dash, 19292 - blue flash, 19294 - yellow flash, 19290 red flash
			case 420:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 421:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 426:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			case 523:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
				AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
	         }
			case 528:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
             case 566:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			 case 585:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			 case 596:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
             case 597:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
             case 598:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
            case 599:
            {
                obj[pveh] = CObject4(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject4(obj[pveh], pveh, -0.500000, -1.534498, 0.5, 0.000000, 0.000000, 0.000000);
            }
			default:
            {
                return SendClientMessage(playerid, -1, "* You are not in a traffic compatible emergency vehicle!");
            }
        }
        return SendClientMessage(playerid, -1, "**Emergency Lights Activated.**");
}

CMD:code3(playerid, params[])
{
		if (!IsACop(playerid))
		{
			return SendClientMessage(playerid, -1, "You are not a Law Enforcement Officer");
		}
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        {
            return SendClientMessage(playerid, -1, "* You are not the driver!");
        }
        new pveh = GetPlayerVehicleID(playerid);
        if (!GetVehicleModel(pveh)) return SendClientMessage(playerid, -1, "* You are not in a vehicle!");
        if (VObject3(obj[pveh])) return SendClientMessage(playerid, -1, "** You switched off the emergency lights.**"), DObject2(obj[pveh]);
        switch (GetVehicleModel(pveh))
       {
			case 421:
            {
                obj[pveh] = CObject3(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject3(obj[pveh], pveh, -0.500000, 0.2, 0.8, 0.000000, 0.000000, 0.000000);
            }
			case 426:
            {
                obj[pveh] = CObject3(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject3(obj[pveh], pveh, -0.500000, 0.2, 0.8, 0.000000, 0.000000, 0.000000);
            }
			case 490:
            {
                obj[pveh] = CObject3(19292, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                AObject3(obj[pveh], pveh, -0.5, -2.6, 0.6, 0.000000, 0.000000, 0.000000);
            }
            default:
            {
                return SendClientMessage(playerid, -1, "* You are not in a CODE 3 compatible police vehicle!");
            }
        }
        return SendClientMessage(playerid, -1, "**Emergency Lights Activated.**");
	//return 0;
}

CMD:lightbar(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		new vehicleid = GetPlayerVehicleID(playerid);
	    if(NeonON[vehicleid] == 1)
		{
			DestroyObject(GetPVarInt(playerid, "neon"));
			DestroyObject(GetPVarInt(playerid, "neon1"));
			DeletePVar(playerid, "neon0");
			DeletePVar(playerid, "neon1");
      		SendClientMessageEx(playerid, COLOR_WHITE, "lightbar disabled.");
			NeonON[vehicleid]=0;
			return 1;
		}
	    else if(NeonON[vehicleid] == 0)
	    {
			DestroyObject(GetPVarInt(playerid, "neon"));
			DestroyObject(GetPVarInt(playerid, "neon1"));
			DeletePVar(playerid, "neon0");
			DeletePVar(playerid, "neon1");
			switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
			{
				case 415:
				{
						SetPVarInt(playerid, "neon", CreateObject(18646,0,0,0,0,0,0,100.0));
						SetPVarInt(playerid, "neon1", CreateObject(18646,0,0,0,0,0,0,100.0));
						AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						NeonON[vehicleid] = 1;
				}
				case 402:
				{
						SetPVarInt(playerid, "neon", CreateObject(18646,0,0,0,0,0,0,100.0));
						SetPVarInt(playerid, "neon1", CreateObject(18646,0,0,0,0,0,0,100.0));
						AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						NeonON[vehicleid] = 1;
				}
				case 541, 411:
				{
						SetPVarInt(playerid, "neon", CreateObject(18646,0,0,0,0,0,0,100.0));
						SetPVarInt(playerid, "neon1", CreateObject(18646,0,0,0,0,0,0,100.0));
						AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						NeonON[vehicleid] = 1;
				}
				case 451: {
						SetPVarInt(playerid, "neon", CreateObject(18646,0,0,0,0,0,0,100.0));
						SetPVarInt(playerid, "neon1", CreateObject(18646,0,0,0,0,0,0,100.0));
						AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.6, 0.0, 0.80, 0.0, 0.0, 0.0);
						NeonON[vehicleid] = 1;
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "lightbar enabled.");
			return 1;
	    }
		SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle does not support mounted lightbars.");
		return 1;
	}
	return 1;
}

CMD:siren(playerid, params[])
{
	#pragma unused params
    if(IsACop(playerid))
    {
		VehicleLightSwitch(playerid);
	}
	return 1;
}

CMD:fdl(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 4 || PlayerInfo[playerid][pLeader] == 4)
	{
	    if(GetPVarType(playerid, "Siren"))
		{
  			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
    		if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1);
      		DeletePVar(playerid, "Siren");
      		SendClientMessageEx(playerid, COLOR_WHITE, "Siren disabled.");
			return 1;
		}
	    else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2);
			if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1)) RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1);
			switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
			{
				case 415:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.20, 0.30, 0.3, -90, -30, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1, 18646, 10, -0.20, 0.30, 0.3, -90, -30, 0);
				}
				case 402:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.20, 0.5, 0.4, -90, -50, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1, 18646, 10, -0.20, 0.5, 0.4, -90, -50, 0);
				}
				case 541, 411:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, 0.0, 0.2, 0.4, -90, -30, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1, 18646, 10, 0.0, 0.2, 0.4, -90, -30, 0);
				}
				case 451: {
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.30, 0.4, 0.6, -90, -50, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1, 18646, 10, -0.30, 0.4, 0.6, -90, -50, 0);
				}
				default:
				{
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 2, 18646, 10, -0.30, 0.4, 0.4, -90, -50, 0);
					SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS - 1, 18646, 10, -0.30, 0.4, 0.4, -90, -50, 0);
				}
			}
			SetPVarInt(playerid, "Siren", 1);
			SendClientMessageEx(playerid, COLOR_WHITE, "Siren enabled.");
			return 1;
	    }
		SendClientMessage(playerid, COLOR_GRAD2, "This vehicle does not support mounted sirens.");
	}
	return 1;
}

CMD:cones(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2)
	{
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pRank] >= 3)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed cones:");
			for(new i, string[56 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(Cones); i++)
			{
				if(Cones[i][sX] != 0) // Checking for next available ID.
				{
					format(string, sizeof(string), "HQ: Cone ID: %d | Deployed location: %s | Deployed by: %s", i, Cones[i][sDeployedAt], Cones[i][sDeployedBy]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:flares(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2)
	{
		if(PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pRank] >= 3)
		{
  			SendClientMessageEx(playerid, COLOR_WHITE, "Current deployed flares:");
			for(new i, string[58 + MAX_ZONE_NAME + MAX_PLAYER_NAME]; i < sizeof(Flares); i++)
			{
				if(Flares[i][sX] != 0) // Checking for next available ID.
				{
					format(string, sizeof(string), "HQ: Flare ID: %d | Deployed location: %s | Deployed by: %s", i, Flares[i][sDeployedAt], Flares[i][sDeployedBy]);
					SendClientMessageEx(playerid, COLOR_GRAD2, string);
				}
 			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:deploy(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
		return 1;
	}
    if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 3)
	{
		DisplayDeployDialog(playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a faction.");
	}
	return 1;
}

CMD:destroy(playerid)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
		return 1;
	}
    if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1 || PlayerInfo[playerid][pAdmin] >= 3)
	{
		DisplayDestroyDialog(playerid);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a faction.");
	}
	return 1;
}



CMD:deployspikes(playerid, params[])
{
    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || (PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 1) || PlayerInfo[playerid][pMember] == 7)
		{
			for(new i; i < sizeof(SpikeStrips); i++)
			{
				if(SpikeStrips[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					SpikeStrips[i][sObjectID] = CreateDynamicObject(2899, SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]-0.8, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, SpikeStrips[i][sDeployedAt], MAX_ZONE_NAME);
					SpikeStrips[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Spike ID: %d successfully created.", i);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					format(string, sizeof(string), "HQ: A spike has been deployed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[i][sDeployedAt]);
					TotalSpikes++;
					foreach(new x: Player)
					{
						if(IsACop(x))
						{
							SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
						}
					}
					return 1;
				}
    		}
			SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more strips." );
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}


CMD:destroyspikes(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroyspikes [spike ID]");

    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 6 || PlayerInfo[playerid][pLeader] == 6)
	{
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 2)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(SpikeStrips)) || SpikeStrips[id][sX] == 0) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid spike ID.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(SpikeStrips[id][sObjectID]);
				SpikeStrips[id][sX] = 0;
				SpikeStrips[id][sY] = 0;
				SpikeStrips[id][sZ] = 0;
				SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Spike %d successfully deleted.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
                TotalSpikes--;
				format(string, sizeof(string), "HQ: A spike has been destroyed by %s at %s.", GetPlayerNameEx(playerid), SpikeStrips[id][sDeployedAt]);
				foreach(new x: Player)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:destroycone(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroycone [cone ID]");

    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2)
	{
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 2)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(Cones)) || Cones[id][sX] == 0) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid cone ID.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(Cones[id][sObjectID]);
				Cones[id][sX] = 0; Cones[id][sY] = 0; Cones[id][sZ] = 0;
				Cones[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Cone ID: %d successfully deleted.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				TotalCones--;
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:destroyflare(playerid, params[])
{
	if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /destroyflare [flare ID]");

    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2)
	{
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pMember] == 3 && PlayerInfo[playerid][pRank] >= 2)
		{
			new id = strval(params);
			if(!(0 <= id <= sizeof(Flares)) || Flares[id][sX] == 0) {
				return SendClientMessageEx(playerid, COLOR_WHITE, "Invalid flare ID.");
			}
			else
			{
				new string[43 + MAX_PLAYER_NAME + MAX_ZONE_NAME];
				DestroyDynamicObject(Flares[id][sObjectID]);
				Flares[id][sX] = 0; Flares[id][sY] = 0; Flares[id][sZ] = 0;
				Flares[id][sObjectID] = INVALID_OBJECT_ID;
				format(string,sizeof(string),"Flare ID: %d successfully deleted.", id);
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				TotalFlares--;
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:deploycone(playerid, params[])
{
    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7)
		{
			for(new i; i < sizeof(Cones); i++)
			{
				if(Cones[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, Cones[i][sX], Cones[i][sY], Cones[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					Cones[i][sObjectID] = CreateDynamicObject(1238, Cones[i][sX], Cones[i][sY], Cones[i][sZ]-0.7, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, Cones[i][sDeployedAt], MAX_ZONE_NAME);
					Cones[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Cone ID: %d successfully created.", i);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					TotalCones++;
					return 1;
				}
    		}
			SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more cones." );
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:deployflare(playerid, params[])
{
    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] >= 3 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 7)
		{
			for(new i; i < sizeof(Flares); i++)
			{
				if(Flares[i][sX] == 0)
				{
					new
						Float: f_TempAngle,
						string[128];

					GetPlayerPos(playerid, Flares[i][sX], Flares[i][sY], Flares[i][sZ]);
					GetPlayerFacingAngle(playerid, f_TempAngle);
					Flares[i][sObjectID] = CreateDynamicObject(18728, Flares[i][sX], Flares[i][sY], Flares[i][sZ]-2.4, 0.0, 0.0, f_TempAngle);
					GetPlayer3DZone(playerid, Flares[i][sDeployedAt], MAX_ZONE_NAME);
					Flares[i][sDeployedBy] = GetPlayerNameEx(playerid);
					format(string,sizeof(string),"Flare ID: %d successfully created.", i);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
					TotalFlares++;
					return 1;
				}
    		}
			SendClientMessageEx(playerid, COLOR_WHITE, "Unable to spawn more flares." );
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You must be rank 3 or higher!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:tra(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 10 && PlayerInfo[playerid][pRank] >= 4 || PlayerInfo[playerid][pLeader] == 10)
	{
		if(isnull(params))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /tra [text]");
			return 1;
		}

		new string[128];

		if(PlayerInfo[playerid][pRank] == 6)
		{
			format(string, sizeof(string), "** Taxi Company Owner %s: %s **", GetPlayerNameEx(playerid), params);
			SendClientMessageToAllEx(COLOR_WHITE, "|___________ An announcement from the Travel Officials ___________|");
			SendClientMessageToAllEx(COLOR_TAXI, string);
		}
		else if(PlayerInfo[playerid][pRank] == 5)
		{
			format(string, sizeof(string), "** Shift Supervisor %s: %s **", GetPlayerNameEx(playerid), params);
			SendClientMessageToAllEx(COLOR_WHITE, "|___________ An announcement from the Travel Officials ___________|");
			SendClientMessageToAllEx(COLOR_TAXI, string);
		}
		else if(PlayerInfo[playerid][pRank] == 4)
		{
		    format(string, sizeof(string), "** Dispatcher %s: %s **", GetPlayerNameEx(playerid), params);
			SendClientMessageToAllEx(COLOR_WHITE, "|___________ An announcement from the Travel Officials ___________|");
			SendClientMessageToAllEx(COLOR_TAXI, string);
		}
	}
	return 1;
}

CMD:eba(playerid, params[]) {
	return cmd_emergencybutton(playerid, params);
}

CMD:emergencybutton(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 10 || PlayerInfo[playerid][pLeader] == 10) {
		new
	    	string[128],
			Location[MAX_ZONE_NAME];

        if( PlayerCuffed[ playerid ] >= 1 || PlayerInfo[ playerid ][ pJailTime ] > 0 || PlayerInfo[playerid][pHospital] > 0 || PlayerTied[playerid] > 0 ) {
			SendClientMessageEx( playerid, COLOR_WHITE, "You can't do this right now." );
		}

		GetPlayer2DZone(playerid, Location, MAX_ZONE_NAME);
	    foreach(new i: Player) {
	    	if(PlayerInfo[i][pMember] == 3||PlayerInfo[i][pLeader] == 3||PlayerInfo[i][pMember] == 1||PlayerInfo[i][pLeader] == 1||PlayerInfo[i][pMember] == 2||PlayerInfo[i][pLeader] == 2|| (PlayerInfo[i][pMember] == 4||PlayerInfo[i][pLeader] == 4&&PlayerInfo[i][pDivision] == 2)||PlayerInfo[i][pMember] == 7||PlayerInfo[i][pLeader] == 7 || PlayerInfo[i][pMember] == 11 || PlayerInfo[i][pLeader] == 11 || PlayerInfo[i][pMember] == 13 || PlayerInfo[i][pLeader] == 13) {
				SendClientMessageEx(i, TEAM_BLUE_COLOR, "HQ: All Units APB: Reporter: Taxi Company Office");
				format(string, sizeof(string), "HQ: A distress signal is forwarded from the Taxi Company Office for %s at %s",GetPlayerNameEx(playerid), Location);
				SendClientMessageEx(i, TEAM_BLUE_COLOR, string);
			}
		}
		format(string, sizeof(string), "* An alarm engages in %s's taxi at %s. A message is dispatched to the Companies office.", GetPlayerNameEx(playerid), Location);
		SendTaxiMessage(TEAM_AZTECAS_COLOR, string);
		SendClientMessage(playerid, COLOR_WHITE, "You have pressed the emergency button, police have been informed.");
	}
	return 1;
}

CMD:backup(playerid, params[])
{
    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		if (Backup[playerid] != 1)
		{
			new
				zone[MAX_ZONE_NAME],
				string[40 + MAX_PLAYER_NAME + MAX_ZONE_NAME];

			GetPlayer3DZone(playerid, zone, sizeof(zone));
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "%s is requesting immediate backup at %s.", GetPlayerNameEx(playerid), zone);
            Backup[playerid] = 1;
			foreach(new i: Player)
			{
				if(IsACop(i))
				{
      				SetPlayerMarkerForPlayer(i, playerid, 0x2641FEAA);
					SendClientMessageEx(i, TEAM_BLUE_COLOR, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
			SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not a Cop / FBI / Coastguard!");
	}
	return 1;
}

CMD:nobackup(playerid, params[])
{
    BackupClear(playerid, 0);
	return 1;
}

CMD:fdbackup(playerid, params[])
{
    if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4)//model
	{
		if(Backup[playerid] != 1)
		{
			new string[128];
			format(string, sizeof(string), "* %s requests backup over their radio.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			format(string, sizeof(string), "HQ: %s is requesting immediate assistance, radio for additional details. %s's location has been transmitted to your GPS [See Pink Dot].", GetPlayerNameEx(playerid), GetPlayerNameEx(playerid));
            Backup[playerid] = 1;
			foreach(new i: Player)
			{
				if(PlayerInfo[i][pMember]==4||PlayerInfo[i][pLeader]==4)//model
				{
        			SetPlayerMarkerForPlayer(i, playerid, TEAM_CYAN_COLOR);
					SendClientMessageEx(i, TEAM_CYAN_COLOR, string);
				}
			}
			SendClientMessageEx(playerid, COLOR_WHITE, "Type /nobackup to clear your backup request.");
     		SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "  You already have an active backup request!");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in the FDSA!");
	}
	return 1;
}

CMD:quitfaction(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] >= 1 || PlayerInfo[playerid][pLeader] >= 1)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE,"* You have quit your faction, you are now a civilian again.");
		new string[128];
		format(string, sizeof(string), "%s has quit the %s as a rank %i", GetPlayerNameEx(playerid), factionName(PlayerInfo[playerid][pMember]), PlayerInfo[playerid][pRank]);
		Log("logs/faction.log", string);
		PlayerInfo[playerid][pMember] = 0;
		PlayerInfo[playerid][pRank] = 0;
		PlayerInfo[playerid][pDuty] = 0;
		PlayerInfo[playerid][pLeader] = 0;
		PlayerInfo[playerid][pDivision] = 0;
		if(!IsValidSkin(GetPlayerSkin(playerid)))
		{
  			new rand = random(sizeof(CIV));
			SetPlayerSkin(playerid,CIV[rand]);
			PlayerInfo[playerid][pModel] = CIV[rand];
		}
		SetPlayerToTeamColor(playerid);
		player_remove_vip_toys(playerid);
   		pTazer{playerid} = 0;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You're not in a faction.");
	}
	return 1;
}
CMD:warrantwd(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] != 5)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
 	}
	if(PlayerInfo[playerid][pMember] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
  	}

  	new string[128], giveplayerid;
  	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /warrantwd [player]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't remove warrants on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
 		if(strlen(PlayerInfo[giveplayerid][pWarrant]) == 0) return SendClientMessageEx(playerid, COLOR_GRAD5, "That player doesn't have any active warrants.");
		format(PlayerInfo[giveplayerid][pWarrant], 128, "");
		format(string, sizeof(string), "You have successfully recalled %s's warrant.", GetPlayerNameEx(giveplayerid));
  		SendClientMessageEx(playerid, COLOR_GRAD2, string);
		return 1;
	}
	return 1;
}

CMD:warrantarrest(playerid, params[])
{
    new string[128];

    if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
	    if(JudgeOnlineCheck() == 0) return SendClientMessageEx(playerid, COLOR_GRAD4, "There must be at least one judge online to do this!");
        if(!IsPlayerInRangeOfPoint(playerid, 4.0, 1384.0507,-1688.8254,13.5341))
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "You aren't at the warrant arrest point(Behind the courtroom building).");
	    	return 1;
		}

		new suspect = GetClosestPlayer(playerid);
		if(IsPlayerConnected(suspect))
		{
			if(ProxDetectorS(5.0, playerid,suspect))
			{
				if(strlen(PlayerInfo[suspect][pWarrant]) < 1)
				{
	   				SendClientMessageEx(playerid, COLOR_GREY, "The player must have active warrants.");
				    return 1;
				}
				format(string, sizeof(string), "* You warrant arrested %s!", GetPlayerNameEx(suspect));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				ResetPlayerWeaponsEx(suspect);
				format(string, sizeof(string), "<< Defendant %s has been delivered to the courtroom pending trial by %s >>", GetPlayerNameEx(suspect), GetPlayerNameEx(playerid));
				SendRadioMessage(5, DEPTRADIO, string);
				SetPlayerInterior(suspect, 1);
				SetPlayerVirtualWorld(suspect, 20025);
				PlayerInfo[suspect][pVW] = 20025;
				new rand = random(sizeof(WarrantJail));
				SetPlayerFacingAngle(suspect, 0);
				SetPlayerPosEx(suspect, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2]);
				if(rand != 0) courtjail[suspect] = 2;
				else courtjail[suspect] = 1;
    			SetCameraBehindPlayer(suspect);
       			DeletePVar(suspect, "IsFrozen");
				PlayerCuffed[suspect] = 0;
				DeletePVar(suspect, "PlayerCuffed");
				PlayerCuffedTime[suspect] = 0;
				PhoneOnline[suspect] = 1;
    			PlayerInfo[suspect][pArrested] += 1;
    			SetPlayerFree(suspect,playerid, "was warrant arrested");
		    	PlayerInfo[suspect][pWantedLevel] = 0;
		    	SetPlayerToTeamColor(suspect);
		    	SetPlayerWantedLevel(suspect, 0);
			    WantLawyer[suspect] = 1;
				ClearAnimations(suspect);
				PlayerInfo[suspect][pBeingSentenced] = 60;
				SendClientMessageEx(suspect, COLOR_LIGHTBLUE, "You have been arrested for a pending warrant on you, you'll be attended by a judge soon.");
				Player_StreamPrep(suspect, WarrantJail[rand][0], WarrantJail[rand][1], WarrantJail[rand][2], FREEZE_TIME);
			}
		}
		else
		{
  			SendClientMessageEx(playerid, COLOR_GREY, "   No-one close enough to arrest.");
	    	return 1;
		}
	}
	else
	{
 		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI / Coastguard!");
   		return 1;
	}
	return 1;
}

CMD:adjourn(playerid, params[])
{
	new string[128], giveplayerid;

	if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /adjourn [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(PlayerInfo[giveplayerid][pBeingSentenced])
	    {
	    	PlayerInfo[giveplayerid][pBeingSentenced] = 0;
	    	TogglePlayerControllable(giveplayerid, 1);
	    	DeletePVar(giveplayerid, "IsFrozen");
			PhoneOnline[giveplayerid] = 0;
			format(PlayerInfo[giveplayerid][pWarrant], 128, "");
	    	format(string, sizeof(string), "You have released %s from the courtroom.", GetPlayerNameEx(giveplayerid));
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s has released you from the courtroom, you can now leave.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "The player needs to be on the courtroom being sentenced");
	}
	return 1;
}

CMD:sentence(playerid, params[]) {

	new
		giveplayerid;

    if(PlayerInfo[playerid][pMember] != 5) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	}
	else if(PlayerInfo[playerid][pRank] < 3) {
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
	}
	else if(sscanf(params, "u", giveplayerid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /sentence [player]");
	}
	else if(IsPlayerConnected(giveplayerid)) {
		if(giveplayerid == playerid) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
		}
 		else if(PlayerInfo[giveplayerid][pBeingSentenced]) {
    		PlayerInfo[giveplayerid][pBeingSentenced] = 0;
	    	TogglePlayerControllable(giveplayerid, 0);
	    	SetPVarInt(giveplayerid, "IsFrozen", 1);
			PhoneOnline[giveplayerid] = 1;
			PlayerInfo[giveplayerid][pWarrant][0] = 0;

			SetPlayerPosEx(giveplayerid, 1384.0507,-1688.8254,13.5341);
			SetPlayerVirtualWorld(giveplayerid, 0);
			SetPlayerInterior(playerid, 0);

			new string[58 + MAX_PLAYER_NAME];
  			format(string, sizeof(string), "You have released %s from the courtroom.", GetPlayerNameEx(giveplayerid));
    		SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s has released you from the courtroom, you can now leave.", GetPlayerNameEx(playerid));
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "The player needs to be in the courtroom being sentenced.");
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	return 1;
}

CMD:trial(playerid, params[])
{
	new string[128], giveplayerid;

    if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 3) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
	if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /trial [player]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(PlayerInfo[giveplayerid][pBeingSentenced])
	    {
	    	PlayerInfo[giveplayerid][pBeingSentenced] += 10;
	    	format(string, sizeof(string), "You have extended %s's courtroom time by 10 minutes, courtroom time: %d", GetPlayerNameEx(giveplayerid), PlayerInfo[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, string);
	    	format(string, sizeof(string), "%s has extended your courtroom time by 10 minutes, courtroom time: %d", GetPlayerNameEx(playerid), PlayerInfo[giveplayerid][pBeingSentenced]);
	    	SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD2, "The player needs to be on the courtroom being sentenced");
	}
	return 1;
}

CMD:subpoena(playerid, params[])
{
	new string[128], dates[32], message[64], giveplayerid;

    if(PlayerInfo[playerid][pMember] != 5) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
	if(PlayerInfo[playerid][pRank] < 1) return SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 1+ can do this.");
	if(sscanf(params, "us[32]s[64]", giveplayerid, dates, message)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /subpoena [player] [date] [message]");
	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    SendClientMessageEx(giveplayerid, COLOR_WHITE, "|___________ Important Message from the Courts ___________|");
	    format(string, sizeof(string), "You have been summoned for a Court Appearance on the day of %s for the following reason(s): %s", dates, message);
		SendClientMessageEx(giveplayerid, COLOR_YELLOW, string);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, "|_________________________________________________________|");
	}
	return 1;
}

CMD:judgejail(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] != 5)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /judgejail [player] [time 1-45 minutes] [reason]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
		if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That player isn't being sentenced!");
		if(jailtime < 1 && jailtime > 45) return SendClientMessageEx(playerid, COLOR_GRAD5, "Time cannot be lower than 1 minute or higher than 45 minutes!");
		PlayerInfo[giveplayerid][pJudgeJailType] = 1;
		PlayerInfo[giveplayerid][pJudgeJailTime] = jailtime*60;
		format(string, sizeof(string), "You have sentenced %s to fulfill %d minutes in jail, reason: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "You have been sentenced to fulfill %d minutes in jail by %s, reason: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(IsACop(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* You have been auto-removed from your faction by being sentenced to jail, you are now a civilian again.");
			PlayerInfo[giveplayerid][pMember] = 0;
			PlayerInfo[giveplayerid][pRank] = 0;
			PlayerInfo[giveplayerid][pDuty] = 0;
			PlayerInfo[giveplayerid][pLeader] = 0;
			if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
			{
			    new rand = random(sizeof(CIV));
				SetPlayerSkin(giveplayerid,CIV[rand]);
				PlayerInfo[giveplayerid][pModel] = CIV[rand];
			}
			player_remove_vip_toys(giveplayerid);
			SetPlayerToTeamColor(giveplayerid);
			pTazer{giveplayerid} = 0;
		}
	}
	return 1;
}

CMD:judgeprison(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] != 5)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], giveplayerid, jailtime, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, jailtime, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /judgeprison [player] [time 1-120 minutes] [reason]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That player isn't being sentenced!");
		if(jailtime < 1 && jailtime > 45) return SendClientMessageEx(playerid, COLOR_GRAD5, "Time cannot be lower than 1 minute or higher than 45 minutes");
		PlayerInfo[giveplayerid][pJudgeJailType] = 2;
		PlayerInfo[giveplayerid][pJudgeJailTime] = jailtime*60;
		format(string, sizeof(string), "You have sentenced %s to fulfill %d minutes in prison, reason: %s", GetPlayerNameEx(giveplayerid), jailtime, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "You have been sentenced to fulfill %d minutes in prison by %s, reason: %s", jailtime, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
		if(IsACop(giveplayerid))
		{
		    SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE,"* You have been auto-removed from your faction by being sentenced to jail, you are now a civilian again.");
			PlayerInfo[giveplayerid][pMember] = 0;
			PlayerInfo[giveplayerid][pRank] = 0;
			PlayerInfo[giveplayerid][pDuty] = 0;
			PlayerInfo[giveplayerid][pLeader] = 0;
			if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
			{
			    new rand = random(sizeof(CIV));
				SetPlayerSkin(giveplayerid,CIV[rand]);
				PlayerInfo[giveplayerid][pModel] = CIV[rand];
			}
			player_remove_vip_toys(giveplayerid);
			SetPlayerToTeamColor(giveplayerid);
   			pTazer{giveplayerid} = 0;
		}
	}
	return 1;
}

CMD:judgefine(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] != 5)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], giveplayerid, judgefine, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, judgefine, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /judgefine [player] [fine amount max of $250,000] [reason]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
	    if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That player isn't being sentenced!");
		if(judgefine < 1 && judgefine > 250000) return SendClientMessageEx(playerid, COLOR_GRAD5, "Fine amount cannot be lower than $1 or higher than $250,000!");
		GivePlayerCash(giveplayerid, -judgefine);
		Tax += judgefine;
		format(string, sizeof(string), "You have fined %s $%d, reason: %s", GetPlayerNameEx(giveplayerid), judgefine, reason);
		SendClientMessageEx(playerid, COLOR_WHITE, string);
		format(string, sizeof(string), "You have been fined $%d by %s, reason: %s", judgefine, GetPlayerNameEx(playerid), reason);
		SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
	}
	return 1;
}

CMD:probation(playerid, params[])
{
    if(PlayerInfo[playerid][pMember] != 5)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
        return 1;
    }
    if(PlayerInfo[playerid][pRank] < 3)
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
        return 1;
    }

	new string[128], giveplayerid, probtime, reason[64];
	if(sscanf(params, "uds[64]", giveplayerid, probtime, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /probation [player] [time 1-360 Minutes] [reason and terms]");

    if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't use this command on yourself!");
    if(IsPlayerConnected(giveplayerid))
	{
        if(!PlayerInfo[giveplayerid][pBeingSentenced]) return SendClientMessageEx(playerid, COLOR_GRAD5, "That player isn't being sentenced!");
        if(probtime < 1 && probtime > 360) return SendClientMessageEx(playerid, COLOR_GRAD5, "Time cannot be lower 1 minute or higher than 360 minutes!");
        PlayerInfo[giveplayerid][pProbationTime] = probtime;
        format(string, sizeof(string), "You have set %s in probation for %d minutes, reason and terms: %s", GetPlayerNameEx(giveplayerid), probtime, reason);
        SendClientMessageEx(playerid, COLOR_WHITE, string);
        format(string, sizeof(string), "You have been set in probation for %d minutes by %s, reason and terms: %s", probtime, GetPlayerNameEx(playerid), reason);
        SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
    }
    return 1;
}
CMD:warrant(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 5)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not part of the Judicial System!");
  		return 1;
	}
	if(PlayerInfo[playerid][pRank] < 3)
	{
  		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only rank 3+ can do this.");
  		return 1;
	}

	new string[128], crime[64], giveplayerid;
	if(sscanf(params, "us[64]", giveplayerid, crime)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /warrant [player] [crime]");

	if(giveplayerid == playerid) return SendClientMessageEx(playerid, COLOR_GRAD1, "You can't place warrants on yourself!");
	if(IsPlayerConnected(giveplayerid))
	{
		if(!isnull(PlayerInfo[giveplayerid][pWarrant])) return SendClientMessageEx(playerid, COLOR_GRAD5, "That player has active warrants already.");
		format(PlayerInfo[giveplayerid][pWarrant], 64, crime);
		format(string, sizeof(string), "You are hereby commanded to apprehend and present to the court %s to answer the charges of:", GetPlayerNameEx(giveplayerid));
		SendRadioMessage(1, DEPTRADIO, string);
		SendRadioMessage(2, DEPTRADIO, string);
		SendRadioMessage(3, DEPTRADIO, string);
		SendRadioMessage(5, DEPTRADIO, string);
		SendRadioMessage(7, DEPTRADIO, string);
		SendRadioMessage(11, DEPTRADIO, string);
		SendRadioMessage(13, DEPTRADIO, string);
		SendRadioMessage(16, DEPTRADIO, string);
		format(string, sizeof(string), "%s", crime);
		SendRadioMessage(1, DEPTRADIO, string);
		SendRadioMessage(2, DEPTRADIO, string);
		SendRadioMessage(3, DEPTRADIO, string);
		SendRadioMessage(5, DEPTRADIO, string);
		SendRadioMessage(7, DEPTRADIO, string);
		SendRadioMessage(11, DEPTRADIO, string);
		SendRadioMessage(13, DEPTRADIO, string);
		SendRadioMessage(16, DEPTRADIO, string);
		return 1;
	}
	return 1;
}
CMD:listfacpay(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator]) {
		if(isnull(params)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listfacpay [faction ID 1-12]");
		}

		new iFactionID = strval(params);

		if(iFactionID < 1 || iFactionID > 12 && iFactionID != 16 && iFactionID != 17) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /listfacpay [faction ID 1-12]");
		}

		new
			szMessage[37];

		format(szMessage, sizeof(szMessage), "Listing Faction ID %i's paychecks...", iFactionID);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, szMessage);

		for(new x; x < 7; x++) {
			format(szMessage, sizeof(szMessage), "Rank %i: $%i", x, FactionPay[iFactionID - 1][x]);
			SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
	return 1;
}

CMD:facpay(playerid, params[]) {
    if(PlayerInfo[playerid][pAdmin] >= 4 || PlayerInfo[playerid][pFactionModerator]) {

		new
			iFactionID,
			iRankValue,
			iPayValue;

		if(sscanf(params, "ddd", iFactionID, iRankValue, iPayValue)) {
			return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /facpay [faction ID] [rank] [pay amount]");
		}
		--iFactionID;
		if(!(0 <= iFactionID < sizeof(FactionPay))) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Valid faction IDs run from 1 to 12.");
		}
		else if(!(0 <= iRankValue <= 6)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "Valid ranks are 0 to 6.");
		}
		else if(!(1 <= iPayValue <= 100000)) {
			return SendClientMessageEx(playerid, COLOR_GRAD1, "The specified pay amount must be between $1 and $100,000.");
		}

		FactionPay[iFactionID][iRankValue] = iPayValue;

		new
			szMessage[46 + MAX_PLAYER_NAME];

		format(szMessage, sizeof(szMessage), "You have set faction %d's pay for rank %d to $%d.", iFactionID + 1, iRankValue, iPayValue);
		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
		format(szMessage, sizeof(szMessage), "%s has set faction %i's pay for rank %i to %i.", GetPlayerNameEx(playerid), iFactionID + 1, iRankValue, iPayValue);
		Log("logs/facpay.log", szMessage);
		SaveThePay();
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
    return 1;
}

CMD:bug(playerid, params[]) {
    if(FactionInfo[PlayerInfo[playerid][pMember]][fBug] == 1) {

        new
			iTargetID;

        if(sscanf(params, "u", iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /bug [player]");
		}
        else if(PlayerInfo[iTargetID][pAdmin] >= 2) {
			SendClientMessageEx(playerid, COLOR_GREY, "You cannot place bugs on admins.");
		}
		else if(GetPVarInt(iTargetID, "AdvisorDuty") == 1) {
    		SendClientMessageEx(playerid, COLOR_GREY, "You cannot place bugs on advisors while they are on duty.");
		}
  		else if(PlayerInfo[iTargetID][pBugged] > 0) {
  		    if(PlayerInfo[iTargetID][pBugged] != PlayerInfo[playerid][pMember]) {
  		        SendClientMessageEx(playerid, COLOR_GRAD1, "You can't remove this bug.");
  		    }
			else {
				new
					szMessage[32 + MAX_PLAYER_NAME];

	    		PlayerInfo[iTargetID][pBugged] = 0;
	     		format(szMessage,sizeof(szMessage),"The bug on %s has been disabled.", GetPlayerNameEx(iTargetID));
	       		SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
       		}
		}
		else if(ProxDetectorS(4.0, playerid, iTargetID)) {

			new
				szMessage[28 + MAX_PLAYER_NAME];

			PlayerInfo[iTargetID][pBugged] = PlayerInfo[playerid][pMember];
	    	format(szMessage,sizeof(szMessage),"You have placed a bug on %s.",GetPlayerNameEx(iTargetID));
		    SendClientMessageEx(playerid, COLOR_GRAD1, szMessage);
		}
		else SendClientMessageEx(playerid, COLOR_GRAD1, "You need to be close to the person.");
	}
	return 1;
}
CMD:vmdc(playerid, params[])
{
    if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 2)
    {
        new string[128], giveplayerid;
        if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vmdc [player]");

   		if(IsPlayerConnected(giveplayerid))
    	{
	        SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
			format(string, sizeof(string), "*** %s' Vehicles  ***", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
	        for(new i=0; i<MAX_PLAYERVEHICLES; i++)
         	{
			    if(PlayerVehicleInfo[giveplayerid][i][pvId] != INVALID_PLAYER_VEHICLE_ID)
				{
    				format(string, sizeof(string), "Vehicle registration: %d | Vehicle Name: %s | Ticket: $%d.",PlayerVehicleInfo[giveplayerid][i][pvId],GetVehicleName(PlayerVehicleInfo[giveplayerid][i][pvId]),PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
				else if(PlayerVehicleInfo[giveplayerid][i][pvImpounded])
				{
    				format(string, sizeof(string), "Vehicle registration: Voided (impounded) | Vehicle Name: %s | Ticket: $%d.",VehicleName[PlayerVehicleInfo[giveplayerid][i][pvModelId] - 400],PlayerVehicleInfo[giveplayerid][i][pvTicket]);
					SendClientMessageEx(playerid, COLOR_WHITE, string);
	    		}
	    	}
	    	SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
   		}
    }
	return 1;
}

CMD:vticket(playerid, params[])
{
    if(IsACop(playerid))
    {
        if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /vticket [vehicle registration]");

        if(PlayerInfo[playerid][pTicketTime] != 0)
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You must wait within a minute in order to use this command again!");
            return 1;
        }

        new Float: x, Float: y, Float: z, vehicleid = strval(params);
        GetVehiclePos(vehicleid, x, y, z);
        if(IsPlayerInRangeOfPoint(playerid, 5.0, x, y, z))
		{
            if(vehicleid != INVALID_VEHICLE_ID)
			{
                foreach(new i: Player)
				{
                    new v = GetPlayerVehicle(i, vehicleid);
                    if(v != -1)
					{
						new string[62 + MAX_PLAYER_NAME];
                        PlayerVehicleInfo[i][v][pvTicket] += 1000;
                        PlayerInfo[playerid][pTicketTime] = 60;
                        format(string, sizeof(string), "You have issued a $1000 ticket on %s's %s.",GetPlayerNameEx(i),GetVehicleName(PlayerVehicleInfo[i][v][pvId]));
                        SendClientMessageEx(playerid, COLOR_WHITE, string);
                        return 1;
                    }
                }
                for(new f = 0; f < MAX_FAMILY; f++)
				{
                    new v = GetGangVehicle(f, vehicleid);
                    if(v != -1)
					{
                        SendClientMessageEx(playerid, COLOR_WHITE, "You can not issue a ticket on a family owned vehicle!");
                        return 1;
                    }
                }
                SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle does not have any registration!");
            }
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD2, "You need to be near such vehicle!");
        }
    }
    return 1;
}

CMD:vcheck(playerid, params[])
{
    if(IsACop(playerid) || PlayerInfo[playerid][pAdmin] >= 2)
	{
        new carid = GetPlayerVehicleID(playerid);
        new closestcar = GetClosestCar(playerid, carid);
        if(IsTrailerAttachedToVehicle(carid))
		{
            new carbeingtowed = GetVehicleTrailer(carid);
            foreach(new i: Player)
			{
                new v = GetPlayerVehicle(i, carbeingtowed);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: $%d",carbeingtowed,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, carbeingtowed);
                if(v != -1)
                {
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s",carbeingtowed,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader]);
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else if(IsPlayerInRangeOfVehicle(playerid, closestcar, 9.0) && !IsTrailerAttachedToVehicle(carid))
		{
            foreach(new i: Player)
			{
                new v = GetPlayerVehicle(i, closestcar);
                if(v != -1)
				{
					new string[78 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Ticket: $%d | Speed: %.0f MPH",closestcar,GetVehicleName(PlayerVehicleInfo[i][v][pvId]),GetPlayerNameEx(i),PlayerVehicleInfo[i][v][pvTicket], vehicle_get_speed(closestcar));
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            for(new f = 0; f < MAX_FAMILY; f++)
			{
                new v = GetGangVehicle(f, closestcar);
                if(v != -1)
				{
					new string[72 + MAX_PLAYER_NAME];
                    format(string, sizeof(string), "Vehicle registration: %d | Name: %s | Owner: %s | Speed: %.0f MPH",closestcar,GetVehicleName(FamilyVehicleInfo[f][v][fvId]),FamilyInfo[f][FamilyLeader], vehicle_get_speed(closestcar));
                    SendClientMessageEx(playerid, COLOR_WHITE, string);
                    return 1;
                }
            }
            SendClientMessageEx(playerid, COLOR_GRAD2, "This vehicle is not owned by anyone!");
        }
        else
		{
            SendClientMessageEx(playerid, COLOR_GRAD1, "ERROR: You are not towing a vehicle/near to another vehicle.");
        }
    }
    else
	{
        SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use this command.");
    }
    return 1;
}
/*
CMD:deploycade(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 13 || PlayerInfo[playerid][pLeader] == 13 ||
	PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pLeader] == 1 || PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pLeader] == 2 || PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pLeader] == 3 || PlayerInfo[playerid][pLeader] == 5 || PlayerInfo[playerid][pMember] == 7 || PlayerInfo[playerid][pLeader] == 7 || PlayerInfo[playerid][pMember] == 11 || PlayerInfo[playerid][pLeader] == 11 || PlayerInfo[playerid][pLeader] == 6 || PlayerInfo[playerid][pMember] == 6
	|| PlayerInfo[playerid][pMember] == 16 || PlayerInfo[playerid][pLeader] == 16)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 2 && PlayerInfo[playerid][pMember] == 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least a SASD Sergeant to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");
			return 1;
		}

		new string[128], Float:Position[4];
		for(new i; i<MAX_BARRICADES; i++)
		{
			if(Barricade[i] == 0)
			{
				GetPlayerPos(playerid, Position[0], Position[1], Position[2]);
				GetPlayerFacingAngle(playerid, Position[3]);
				Barricade[i] = CreateDynamicObject(981, Position[0], Position[1], Position[2], 0.0, 0.0, Position[3]+180.0, -1, -1, -1, 200.0);
				SetPlayerPosEx(playerid, Position[0] - 2, Position[1] - 2, Position[2]);
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: A barricade has been deployed by %s at %s.", GetPlayerNameEx(playerid), zone);
				TotalCades++;
				foreach(new x: Player)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "All available barriers have been deployed.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:destroycade(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You must be on foot to use this command.");
			return 1;
		}
  		if(PlayerInfo[playerid][pRank] < 2 && PlayerInfo[playerid][pMember] == 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least a SASD Sergeant to use this command.");
			return 1;
		}
		if(PlayerInfo[playerid][pRank] < 3 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 7)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You need to be at least rank 3 to use this command.");
			return 1;
		}
		new string[128], Float:Position[3];
		for(new i; i<MAX_BARRICADES; i++)
		{
			GetDynamicObjectPos(Barricade[i], Position[0], Position[1], Position[2]);

			if(IsPlayerInRangeOfPoint(playerid, 5.0, Position[0], Position[1], Position[2]))
			{
				DestroyDynamicObject(Barricade[i]);
				Barricade[i] = 0;
				new zone[MAX_ZONE_NAME];
				GetPlayer3DZone(playerid, zone, sizeof(zone));
				format(string, sizeof(string), "HQ: A barricade has been destroyed by %s at %s.", GetPlayerNameEx(playerid), zone);
				TotalCades--;
				foreach(new x: Player)
				{
					if(IsACop(x))
					{
						SendClientMessageEx(x, TEAM_BLUE_COLOR, string);
					}
				}
				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_GREY, "You are not near any barricades.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}
*/
CMD:su(playerid, params[]) {
	if(IsACop(playerid)) {
		if(PlayerInfo[playerid][pJailTime] > 0) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
		}

		new
			iTargetID,
			szCrime[64];

		if(sscanf(params, "us[64]", iTargetID, szCrime)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: (/su)spect [player] [crime description]");
		}
		else if(!IsPlayerConnected(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
		}
		else if(IsACop(iTargetID)) {
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on a law enforcement officer.");
		}
		else if(PlayerInfo[iTargetID][pWantedLevel] >= 6) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Target is already most wanted.");
		}
		else {

			new
				szMessage[128];

			++PlayerInfo[iTargetID][pCrimes];
			SetPlayerWantedLevel(iTargetID, ++PlayerInfo[iTargetID][pWantedLevel]);
			AddCrime(playerid, iTargetID, szCrime);

			format(szMessage, sizeof(szMessage), "You've commited a crime ( %s ). Reporter: %s.", szCrime, GetPlayerNameEx(playerid));
			SendClientMessageEx(iTargetID, COLOR_LIGHTRED, szMessage);

			format(szMessage, sizeof(szMessage), "Current wanted level: %d", PlayerInfo[iTargetID][pWantedLevel]);
			SendClientMessageEx(iTargetID, COLOR_YELLOW, szMessage);

			foreach(new i: Player) if(IsACop(i)) {
				format(szMessage, sizeof(szMessage), "HQ: All units APB (reporter: %s)",GetPlayerNameEx(playerid));
				SendClientMessageEx(i, TEAM_BLUE_COLOR, szMessage);
				format(szMessage, sizeof(szMessage), "HQ: Crime: %s, suspect: %s", szCrime, GetPlayerNameEx(iTargetID));
				SendClientMessageEx(i, TEAM_BLUE_COLOR, szMessage);
			}
		}
	}
	else SendClientMessageEx(playerid, COLOR_GRAD2, "You're not a law enforcement officer.");
	return 1;
}

CMD:heal(playerid, params[])
{

	new giveplayerid, price;
	if(sscanf(params, "ud", giveplayerid, price)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /heal [player] [price]");

	if(!(200 <= price <= 1000))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Healing price can't below $200 or above $1,000.");
		return 1;
	}
	if (giveplayerid == playerid)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can't heal yourself.");
		return 1;
	}
	if (IsPlayerConnected(giveplayerid))
	{
		new iVehicle = GetPlayerVehicleID(playerid);
		if(PlayerInfo[playerid][pMember]==4||PlayerInfo[playerid][pLeader]==4 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3) || (PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 7 || PlayerInfo[playerid][pDivision] == 3)))//model
		{
			if(GetPlayerVehicleID(giveplayerid) == iVehicle && (IsATierraESCar(iVehicle) || IsAnAmbulance(iVehicle)))
			{
			    new Float:X, Float:Y, Float:Z;
	   			GetPlayerPos(giveplayerid, X, Y, Z);

				if(!IsPlayerInRangeOfPoint(playerid, 10, X, Y, Z)) return SendClientMessageEx(playerid, TEAM_GREEN_COLOR,"You are not near them!");
				new Float:tempheal;
				GetPlayerHealth(giveplayerid,tempheal);
				if(tempheal >= 100.0)
				{
					SendClientMessageEx(playerid, TEAM_GREEN_COLOR,"That person is fully healed.");
					return 1;
				}
				new string[64];
				format(string, sizeof(string), "You healed %s for $%d.", GetPlayerNameEx(giveplayerid),price);
				SendClientMessageEx(playerid, COLOR_PINK, string);
				GivePlayerCash(playerid, price / 2);
				Tax += price / 2;
				GivePlayerCash(giveplayerid, -price);
				SetPlayerHealth(giveplayerid, 100);
				PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
				PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "You have been healed to 100 health for $%d by %s.",price, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, TEAM_GREEN_COLOR,string);
				if(GetPVarType(giveplayerid, "STD"))
				{
					DeletePVar(giveplayerid, "STD");
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* You are no longer infected with a STD because of the medic's help.");
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "Both you and the patient must be in an ambulance.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	return 1;
}

CMD:invite(playerid, params[])
{
	if (PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], ftext[50], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /invite [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (PlayerInfo[giveplayerid][pLeader] == 0 && PlayerInfo[giveplayerid][pMember] == 0 && PlayerInfo[giveplayerid][pFMember] == 255)
			{
				if(PlayerInfo[playerid][pLeader] == 1) { ftext = "LSPD"; }
				else if(PlayerInfo[playerid][pLeader] == 2) { ftext = "FBI"; }
				else if(PlayerInfo[playerid][pLeader] == 3) { ftext = "SFPD"; }
				else if(PlayerInfo[playerid][pLeader] == 4) { ftext = "FDSA"; }
				else if(PlayerInfo[playerid][pLeader] == 5) { ftext = "Judicial System"; }
				else if(PlayerInfo[playerid][pLeader] == 6) { ftext = "The Government"; }
				else if(PlayerInfo[playerid][pLeader] == 7) { ftext = "SASD"; }
				else if(PlayerInfo[playerid][pLeader] == 8) { ftext = "Hitman Agency"; }
				else if(PlayerInfo[playerid][pLeader] == 9) { ftext = "SANews"; }
				else if(PlayerInfo[playerid][pLeader] == 10) { ftext = "San Andreas Department of Transportation"; }
				else if(PlayerInfo[playerid][pLeader] == 11) { ftext = "SAAS"; }
				else if(PlayerInfo[playerid][pLeader] == 12) { ftext = "Tierra Robada"; }
				else if(PlayerInfo[playerid][pLeader] == 13) { ftext = "Rapid Recovery"; }
				else if(PlayerInfo[playerid][pLeader] == 16) { ftext = "S.H.A.F.T"; }
				else if(PlayerInfo[playerid][pLeader] == 17) { ftext = "SA:PA"; }
				else { return 1; }
				InviteOffer[giveplayerid] = playerid;
				InviteFamily[giveplayerid] = 255;
				InviteFaction[giveplayerid] = PlayerInfo[playerid][pLeader];
				format(string, sizeof(string), "You have been invited to join the %s by %s - type /accept faction.", ftext, GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "You have invited %s to join the %s.", GetPlayerNameEx(giveplayerid),ftext);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "The player you're trying to invite is already in another faction or family.");
				return 1;
			}

		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only leaders can do this.");
	}
	return 1;
}

CMD:ouninvite(playerid, params[]) {
	if (PlayerInfo[playerid][pLeader] >= 1) {
		if(isnull(params)) {
			return SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /uninvite [name]");
		}

		new query[512], tmpName[24];
		SetPVarString(playerid, "OnUninvite", tmpName);

		format(query,sizeof(query),"UPDATE `accounts` SET `Member`=0,`Rank`=0,`OnDuty`=0,`Leader`=0,`Model`=%d WHERE `Username`='%s' \
			AND `FactionModerator`=0 \
			AND `AdminLevel` < 4 \
			AND `Member`=%d \
			AND `Leader`=0 \
			AND `Rank` < %d",
			CIV[random(sizeof(CIV))],
			tmpName,
			PlayerInfo[playerid][pLeader],
			PlayerInfo[playerid][pRank]
		);
		mysql_function_query(MainPipeline, query, false, "OnUninvite", "i", playerid);

		new string[128];
		format(string, sizeof(string), "Attempting to kick %s from the faction...", tmpName);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	}
	else SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only leaders can do this.");
	return 1;
}

forward OnUninvite(index);
public OnUninvite(index)
{
	new string[128], name[24];
	GetPVarString(index, "OnUninvite", name, 24);

	if(mysql_affected_rows(MainPipeline)) {
		format(string, sizeof(string), "You have successfully kicked %s's account from the faction.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	else {
		format(string, sizeof(string), "There was an issue with kicking %s's account from the faction.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}
	DeletePVar(index, "OnUninvite");

	return 1;
}

CMD:uninvite(playerid, params[])
{
	if (PlayerInfo[playerid][pLeader] >= 1)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /uninvite [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if ((PlayerInfo[giveplayerid][pMember] == PlayerInfo[playerid][pLeader]) && (PlayerInfo[giveplayerid][pLeader] == 0 || PlayerInfo[giveplayerid][pRank] < PlayerInfo[playerid][pRank]))
			{
				format(string, sizeof(string), "* You have been kicked from the faction by leader %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* You are now a civilian again.");
				format(string, sizeof(string), "%s has uninvited %s from the %s as a rank %i.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), factionName(PlayerInfo[giveplayerid][pMember]), PlayerInfo[giveplayerid][pRank]);
				Log("logs/faction.log", string);
				PlayerInfo[giveplayerid][pMember] = 0;
				PlayerInfo[giveplayerid][pRank] = 0;
				PlayerInfo[giveplayerid][pDuty] = 0;
				PlayerInfo[giveplayerid][pLeader] = 0;
				PlayerInfo[giveplayerid][pDivision] = 0;
				if(!IsValidSkin(GetPlayerSkin(giveplayerid)))
				{
					new rand = random(sizeof(CIV));
					SetPlayerSkin(giveplayerid,CIV[rand]);
					PlayerInfo[giveplayerid][pModel] = CIV[rand];
				}
				player_remove_vip_toys(giveplayerid);
				SetPlayerToTeamColor(giveplayerid);
				pTazer{giveplayerid} = 0;
				format(string, sizeof(string), "You have kicked %s from the faction.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				return 1;
			}
			else SendClientMessageEx(playerid, COLOR_WHITE, "That player can not be uninvited by you.");
		}
		SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You are not authorized to use that command - only leaders can do this.");
	}
	return 1;
}

CMD:getpt(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 4 || PlayerInfo[playerid][pMember] == 4)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /getpt(patient) [player]");

		if(IsPlayerConnected(giveplayerid))
		{
		    if (giveplayerid == playerid)
		    {
		        SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You cannot accept your own Emergency Dispatch call!");
				return 1;
		    }
			if(GetPVarInt(giveplayerid,"MedicCall") == 1)
			{
				if(PlayerInfo[giveplayerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				format(string, sizeof(string), "EMS Driver %s has accepted the Emergency Dispatch call for (%d) %s.",GetPlayerNameEx(playerid),giveplayerid,GetPlayerNameEx(giveplayerid));
				SendRadioMessage(4, TEAM_MED_COLOR, string);
				format(string, sizeof(string), "* You have accepted EMS Call from %s, you will see the marker until you have reached it.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* EMS Driver %s has accepted your EMS Call; please wait at your current position.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				GameTextForPlayer(playerid, "~w~EMS Caller~n~~r~Go to the red marker.", 5000, 1);
				EMSCallTime[playerid] = 1;
				EMSAccepted[playerid] = giveplayerid;
				SetPVarInt(giveplayerid, "EMSAttempt", 1);
				PlayerInfo[playerid][pCallsAccepted]++;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, "The player has not requested any EMS attention!");
			}
		}
	}
	return 1;
}

CMD:movept(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 4 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 3) || (PlayerInfo[playerid][pMember] == 11 && (PlayerInfo[playerid][pDivision] == 7 || PlayerInfo[playerid][pDivision] == 3)))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /movepatient [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid,"Injured") == 1)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command while in a vehicle.");
				if(PlayerInfo[giveplayerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You can't use this command on jailed players.");
				if(GetPVarInt(giveplayerid, "OnStretcher") == 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "The player is already on a stretcher, you can't do this right now!");
					return 1;
				}

				new Float:mX, Float:mY, Float:mZ;
				GetPlayerPos(giveplayerid, mX, mY, mZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, mX, mY, mZ))
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You have to be close to the patient to be able to move them!");
					return 1;
				}
				SendClientMessageEx(playerid, COLOR_GRAD2, "You have 30 seconds to move to another location or you can either press the '{AA3333}FIRE{BFC0C2}' button.");
				format(string, sizeof(string), "* You have been put on a stretcher by %s.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* You have put %s on a stretcher, you may move them now.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "* %s puts %s on a stretcher, tightening the belts securely.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);

				SetPVarInt(giveplayerid, "OnStretcher", 1);
				SetPVarInt(playerid, "TickEMSMove", SetTimerEx("MoveEMS", 30000, false, "d", playerid));
				SetPVarInt(playerid, "MovingStretcher", giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "The player has to be injured in-order to move them!");
			}
		}
	}
	return 1;
}

CMD:revokedl(playerid, params[])
{
	if(((PlayerInfo[playerid][pMember] == 1 || PlayerInfo[playerid][pMember] == 1) && PlayerInfo[playerid][pRank] >= 3) || (PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 2) || ((PlayerInfo[playerid][pMember] == 3 || PlayerInfo[playerid][pMember] == 3) && PlayerInfo[playerid][pRank] >= 4) || PlayerInfo[playerid][pMember] == 7)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revokedl [player] [reason]");

		new copveh = GetPlayerVehicleID(playerid);
		if((IsACopCar(copveh)) || (IsAnNGCar(copveh)) || (IsAnNGAIRCar(copveh)) || (IsAFBICar(copveh)) || (IsAnDOCCar(copveh))
					|| ((IsAnSFPDCar(copveh)) || (IsAnSASDCar(copveh)) || (IsAnWPCar(copveh))
					|| (IsAnEPCar(copveh)) || (IsASaPaCar(copveh)) || (IsASaPaAirCar(copveh))) && IsPlayerInAnyVehicle(playerid))
		{
			if((IsPlayerConnected(giveplayerid)) && (giveplayerid != INVALID_PLAYER_ID))
			{
				if(PlayerInfo[giveplayerid][pCarLic] == 0)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "This player has no driver's license to revoke.");
					return 1;
				}
				if(GetPVarInt(playerid, "Injured") != 0) {
					SendClientMessageEx (playerid, COLOR_GRAD2, "You cannot do this at this time.");
					return 1;
				}
				new	sz_FacInfo[3][64];
				GetPlayerFactionInfo(playerid, sz_FacInfo[0], sz_FacInfo[1], sz_FacInfo[2]);
				format(string,sizeof(string),"The %s has revoked your driver's license, reason: %s.", sz_FacInfo[2], reason);
				SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,string);
				format(string,sizeof(string),"HQ: %s %s %s has revoked %s's driver's license, reason: %s.", sz_FacInfo[2], sz_FacInfo[0], GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				SendRadioMessage(1,TEAM_BLUE_COLOR,string);
				SendRadioMessage(2,TEAM_BLUE_COLOR,string);
				SendRadioMessage(3,TEAM_BLUE_COLOR,string);
				SendRadioMessage(4,TEAM_BLUE_COLOR,string);
				SendRadioMessage(7, TEAM_BLUE_COLOR, string);
				SendRadioMessage(11, TEAM_BLUE_COLOR, string);
				SendRadioMessage(12,TEAM_BLUE_COLOR,string);
				SendRadioMessage(13,TEAM_BLUE_COLOR,string);
				SendClientMessageEx(giveplayerid,COLOR_WHITE,"(( A new driver's license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
				format(string,sizeof(string),"You have revoked %s's driver's license.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid,COLOR_WHITE,string);
				format(string, sizeof(string), "s took %s's driver's license. REASON: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pCarLic] = 0;
				return 1;
			}
			SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
			return 1;
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
			return 1;
		}
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorised to do this.");
	return 1;
}

CMD:revokeboatdl(playerid, params[])
{
	if( (PlayerInfo[playerid][pMember] == 4) || ( (PlayerInfo[playerid][pMember] == 3) && (PlayerInfo[playerid][pDivision] == 3) ))
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revokeboatdl [player] [reason]");

		new carid = GetPlayerVehicleID(playerid);
		if(!IsAnAmbulance(carid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
			return 1;
		}
		if((IsPlayerConnected(giveplayerid)) && (giveplayerid != INVALID_PLAYER_ID))
		{
			if(PlayerInfo[giveplayerid][pBoatLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "This player has no boating license to revoke.");
				return 1;
			}
			format(string,sizeof(string),"The Coast Guard has revoked your boating license, reason: %s.",reason);
			SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,string);
			format(string,sizeof(string),"HQ: Coast Guardsman %s has revoked %s's boating license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			SendRadioMessage(1,TEAM_BLUE_COLOR,string);
			SendRadioMessage(2,TEAM_BLUE_COLOR,string);
			SendRadioMessage(3,TEAM_BLUE_COLOR,string);
			SendRadioMessage(4,TEAM_BLUE_COLOR,string);
			SendRadioMessage(7, TEAM_BLUE_COLOR, string);
			SendRadioMessage(11, TEAM_BLUE_COLOR, string);
			SendRadioMessage(12,TEAM_BLUE_COLOR,string);
			SendRadioMessage(13,TEAM_BLUE_COLOR,string);
			SendRadioMessage(16,TEAM_BLUE_COLOR,string);
			SendClientMessageEx(giveplayerid,COLOR_WHITE,"(( A new boating license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
			format(string,sizeof(string),"You have revoked %s's boating license.",GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_WHITE,string);
			format(string, sizeof(string), "%s took %s's boating license. REASON: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			Log("logs/licenses.log", string);
			PlayerInfo[giveplayerid][pBoatLic] = 0;
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to do this.");
	return 1;
}

CMD:revokeairdl(playerid, params[])
{
	if((PlayerInfo[playerid][pMember] == 2 || PlayerInfo[playerid][pMember] == 2) && PlayerInfo[playerid][pRank] >= 3)
	{
		new string[128], giveplayerid, reason[64];
		if(sscanf(params, "us[64]", giveplayerid, reason)) return SendClientMessageEx(playerid, COLOR_WHITE, "No player specified. USAGE: /revokeairdl [player] [reason]");

		new carid = GetPlayerVehicleID(playerid);
		if(!IsAFBICar(carid))
		{
			SendClientMessageEx(playerid, COLOR_GRAD2,"You must be in a faction vehicle to do this.");
			return 1;
		}
		if((IsPlayerConnected(giveplayerid)) && (giveplayerid != INVALID_PLAYER_ID))
		{
			if(PlayerInfo[giveplayerid][pFlyLic] == 0)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "This player has no pilot license to revoke.");
				return 1;
			}
			format(string,sizeof(string),"The Federal Bureau of Investigation has revoked your pilot license, reason: %s.",reason);
			SendClientMessageEx(giveplayerid,COLOR_LIGHTBLUE,string);
			switch(PlayerInfo[playerid][pRank])
			{
			case 3: format(string,sizeof(string),"HQ: FBI Agent %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			case 4: format(string,sizeof(string),"HQ: FBI Special Agent %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			case 5: format(string,sizeof(string),"HQ: FBI Assistant Director %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			case 6: format(string,sizeof(string),"HQ: FBI Director %s has revoked %s's pilot license, reason: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			}
			SendRadioMessage(1,TEAM_BLUE_COLOR,string);
			SendRadioMessage(2,TEAM_BLUE_COLOR,string);
			SendRadioMessage(3,TEAM_BLUE_COLOR,string);
			SendRadioMessage(4,TEAM_BLUE_COLOR,string);
			SendRadioMessage(7, TEAM_BLUE_COLOR, string);
			SendRadioMessage(11, TEAM_BLUE_COLOR, string);
			SendRadioMessage(12,TEAM_BLUE_COLOR,string);
			SendRadioMessage(13,TEAM_BLUE_COLOR,string);
			SendRadioMessage(16,TEAM_BLUE_COLOR,string);
			SendClientMessageEx(giveplayerid,COLOR_WHITE,"(( A new pilot license can be acquired at City Hall. If you deem this action as abuse, contact an admin. ))");
			format(string,sizeof(string),"You have revoked %s's pilot license.",GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid,COLOR_WHITE,string);
			format(string, sizeof(string), "%s took %s's pilot license. REASON: %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),reason);
			Log("logs/licenses.log", string);
			PlayerInfo[giveplayerid][pFlyLic] = 0;
			return 1;
		}
		SendClientMessageEx(playerid, COLOR_GRAD2, "Invalid player specified.");
		return 1;
	}
	SendClientMessageEx(playerid, COLOR_GRAD2, "You're not authorized to do this.");
	return 1;
}

CMD:issuepilot(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 5)
	{
		new giveplayerid, string[128];
  		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /issuepilot [playerid]" );
  		if(IsPlayerConnected(giveplayerid))
    	{
     		if(PlayerInfo[giveplayerid][pFlyLic] == 0)
       		{
       		    format(string, sizeof(string), "You have given a pilot license to %s.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Aviation Administration %s has given you a pilot license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Player %s has given a pilot license to %s.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 1;
				return 1;
			}
			else
			{
			    return SendClientMessage(playerid, COLOR_GREY, "That player already has a pilot license.");
			}
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player isn't connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command.");
}

CMD:revokepilot(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 5)
	{
		new giveplayerid, string[128];
  		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /revokepilot [playerid]" );
  		if(IsPlayerConnected(giveplayerid))
    	{
     		if(PlayerInfo[giveplayerid][pFlyLic] == 1)
       		{
       		    format(string, sizeof(string), "You have revoked %s pilot license.",GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Aviation Administration %s has revoked your pilot license.",GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Player %s has revoked %s pilot license.",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				Log("logs/licenses.log", string);
				PlayerInfo[giveplayerid][pFlyLic] = 0;
				return 1;
			}
			else
			{
			    return SendClientMessage(playerid, COLOR_GREY, "That player doesn't have a pilot license.");
			}
		}
		else
		{
		    return SendClientMessage(playerid, COLOR_GREY, "That player isn't connected.");
		}
	}
	else return SendClientMessage(playerid, COLOR_GREY, "You cannot use this command.");
}

CMD:ram(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this while being in a arena!");
			return 1;
		}
		if( PlayerCuffed[playerid] >= 1 )
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now.");
			return 1;
		}

		new string[128];
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (IsPlayerInRangeOfPoint(playerid,3,HouseInfo[i][hExteriorX], HouseInfo[i][hExteriorY], HouseInfo[i][hExteriorZ]))
			{
				format(string, sizeof(string), "* %s breaches the door, and enters.", GetPlayerNameEx(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SetPlayerInterior(playerid,HouseInfo[i][hHInteriorWorld]);
				SetPlayerPosEx(playerid,HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ]);
				GameTextForPlayer(playerid, "~r~Breached the door", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[i][hHInteriorWorld];
				PlayerInfo[playerid][pVW] = i+6000;
				SetPlayerVirtualWorld(playerid, i+6000);
				if(HouseInfo[i][hCustomInterior] == 1) Player_StreamPrep(playerid, HouseInfo[i][hInteriorX],HouseInfo[i][hInteriorY],HouseInfo[i][hInteriorZ], FREEZE_TIME);
				return 1;
			}
		}
		if(PlayerInfo[playerid][pRank] > 3)
		{
			for(new i = 0; i < sizeof(DDoorsInfo); i++)
			{
				if (IsPlayerInRangeOfPoint(playerid,3.0,DDoorsInfo[i][ddExteriorX], DDoorsInfo[i][ddExteriorY], DDoorsInfo[i][ddExteriorZ]) && PlayerInfo[playerid][pVW] == DDoorsInfo[i][ddExteriorVW] && DDoorsInfo[i][ddVIP] > 0)
				{
					SetPlayerInterior(playerid,DDoorsInfo[i][ddInteriorInt]);
					PlayerInfo[playerid][pInt] = DDoorsInfo[i][ddInteriorInt];
					PlayerInfo[playerid][pVW] = DDoorsInfo[i][ddInteriorVW];
					SetPlayerVirtualWorld(playerid, DDoorsInfo[i][ddInteriorVW]);
					SetPlayerColor(playerid, COLOR_RED);
					if(DDoorsInfo[i][ddVehicleAble] > 0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
						SetVehiclePos(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
						SetVehicleZAngle(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorA]);
						SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorVW]);
						LinkVehicleToInterior(GetPlayerVehicleID(playerid), DDoorsInfo[i][ddInteriorInt]);
					}
					else {
						SetPlayerPosEx(playerid,DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ]);
						SetPlayerFacingAngle(playerid,DDoorsInfo[i][ddInteriorA]);
						SetCameraBehindPlayer(playerid);
					}
					if(DDoorsInfo[i][ddCustomInterior]) Player_StreamPrep(playerid, DDoorsInfo[i][ddInteriorX],DDoorsInfo[i][ddInteriorY],DDoorsInfo[i][ddInteriorZ], FREEZE_TIME);
					return 1;
				}
			}
		}
		if (IsPlayerInRangeOfPoint(playerid,4.0,648.7888,-1360.7708,13.5875))
		{
			format(string, sizeof(string), "* %s breaches the door, and enters.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SetPlayerInterior(playerid,1);
			PlayerInfo[playerid][pInt] = 1;
			SetPlayerVirtualWorld(playerid, 4225);
			PlayerInfo[playerid][pVW] = 4225;
			SetPlayerPosEx(playerid,626.4980,21.4223,1107.9686);
			SetPlayerFacingAngle(playerid, 178.6711);
			Player_StreamPrep(playerid, 626.4980,21.4223,1107.9686, FREEZE_TIME);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:settax(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not the President.");
		return 1;
	}
	if(PlayerInfo[playerid][pRank] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not the President.");
		return 1;
	}

	new string[128], tax, szMessage[128];
	if(sscanf(params, "d", tax)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settax [percentage]");

	if (tax < 1 || tax > 29)
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "Percentage must be greater than 0 and below 30.");
		return 1;
	}
	TaxValue = tax;
	//Misc_Save();
	Tax_Save();
	format(string, sizeof(string), "The income tax has been set to %d percent (of each paycheck).", TaxValue);
	format(szMessage, sizeof(szMessage), "{AA3333}AdmWarning{FFFF00}: %s has set the income tax to %d percent (of each paycheck).", GetPlayerNameEx(playerid), TaxValue);
	ABroadCast(COLOR_LIGHTRED,szMessage, 2);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:taxwithdraw(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

	new string[128], amount, reason[64];
	if(sscanf(params, "ds[64]", amount, reason))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /taxwithdraw [amount] [reason]");
		format(string, sizeof(string), "* VAULT BALANCE: $%d.", Tax);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}

	if(amount < 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
		return 1;
	}
	if( Tax > amount )
	{
		Tax -= amount;
		//Misc_Save();
		Tax_Save();
		GivePlayerCash( playerid, amount );
		format( string, sizeof( string ), "You have withdrawn $%d from the vault.", amount );
		SendClientMessageEx( playerid, COLOR_WHITE, string );
		format(string,sizeof(string),"{AA3333}AdmWarning{FFFF00}: %s has withdrawn $%d of the tax money from the vault, reason: %s.",GetPlayerNameEx(playerid),amount,reason);
		ABroadCast( COLOR_YELLOW, string, 2);
		Log("logs/rpspecial.log", string);
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "Insufficient funds are available.");
	}
	return 1;
}

CMD:taxdeposit(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a Government Leader.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /taxdeposit [amount]");
		format(string, sizeof(string), "* VAULT BALANCE: $%d.", Tax);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}

	if(amount < 0)
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Invalid amount specified.");
		return 1;
	}
	Tax += amount;
	//Misc_Save();
	Tax_Save();
	GivePlayerCash(playerid, -amount);
	format( string, sizeof( string ), "You have deposited $%d into the vault.", amount );
	SendClientMessageEx( playerid, COLOR_WHITE, string );
	return 1;
}

CMD:settaxmoney(playerid, params[])
{
	if(PlayerInfo[playerid][pAdmin] < 1337)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not authorised to use this command.");
		return 1;
	}

	new string[128], amount;
	if(sscanf(params, "d", amount))
	{
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /settaxmoney [amount]");
		format(string, sizeof(string), "* CURRENT VAULT BALANCE: $%d.", Tax);
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
		return 1;
	}

	Tax = amount;
	format( string, sizeof( string ), "You have set the tax money amount to $%d.", amount);
	SendClientMessageEx( playerid, COLOR_WHITE, string );
	Tax_Save();
	return 1;
}

CMD:checktax(playerid, params[])
{
	new string[128];
	if(PlayerInfo[playerid][pMember] != 6)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a government official.");
		return 1;
	}
	format(string, sizeof(string), "* CURRENT VAULT BALANCE: $%d.", Tax);
	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:take(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 2)
	{
		if(PlayerInfo[playerid][pRank] < 1 && PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pMember] != 7 && PlayerInfo[playerid][pMember] != 9)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   You need to be rank 1 or higher for this action!");
			return 1;
		}

		new string[128], choice[32], giveplayerid;
		if(sscanf(params, "s[32]u", choice, giveplayerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /take [name] [player]");
			SendClientMessageEx(playerid, COLOR_GREY, "Available names: Weapons, Pot, Crack, Materials, Cellphone, Radio.");
			return 1;
		}
		if(strcmp(choice,"radio",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's radio.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's radio.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pRadio] = 0;
					PlayerInfo[giveplayerid][pRadioFreq] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		if(strcmp(choice,"cellphone",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's cellphone.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your cellphone.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's cellphone.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pPnumber] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"weapons",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's weapons.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's weapons.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					ResetPlayerWeaponsEx(giveplayerid);
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"pot",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's pot.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's pot.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pPot] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"crack",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's crack.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away your crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's crack.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pCrack] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else if(strcmp(choice,"materials",true) == 0)
		{
			if(IsPlayerConnected(giveplayerid))
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					format(string, sizeof(string), "* You have taken away %s's materials.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s as taken away your materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has taken away %s's materials.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					PlayerInfo[giveplayerid][pMats] = 0;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}

			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "   Invalid item specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a law enforcement officer.");
		return 1;
	}
	return 1;
}

CMD:frisk(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 8 || PlayerInfo[playerid][pJob2] == 8 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2) || PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 2 )
	{
		new string[128], storageid, giveplayerid;
		if(sscanf(params, "u", giveplayerid)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /frisk [player]");
			return 1;
		}
		/*if(sscanf(params, "ud", giveplayerid, storageid)) {
		SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /frisk [player] [storageid]");
		SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
		return 1;
		}

		if(storageid < 0 || storageid > 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "USAGE: /frisk [player] [storageid]");
			SendClientMessageEx(playerid, COLOR_GREY, "StorageIDs: (0) Pocket - (1) Equipped Storage Device");
			return 1;
		}*/

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot frisk yourself!"); return 1; }

				/*// Find the storageid of the storagedevice.
				if(storageid == 1) {
					new bool:itemEquipped = false;
					for(new i = 0; i < 3; i++)
					{
						if(StorageInfo[giveplayerid][i][sAttached] == 1) {
							storageid = i+1;
							itemEquipped = true;
						}
					}
					if(itemEquipped == false) return SendClientMessageEx(playerid, COLOR_WHITE, "That player doesn't have a storage device equipped!");
				}*/
				new packages = GetPVarInt(giveplayerid, "Packages");
				new crates = PlayerInfo[giveplayerid][pCrates];
				SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
				format(string, sizeof(string), "*** %s' items...  ***", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				if(PlayerInfo[giveplayerid][pPot] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d grams of pot.", PlayerInfo[giveplayerid][pPot]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}

				if(PlayerInfo[giveplayerid][pWSeeds] == 1)
				{
					SendClientMessageEx(playerid, COLOR_GREY, "(Pocket) Marijuana Seeds");
				}
				if(PlayerInfo[giveplayerid][pCrack] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d grams of crack.", PlayerInfo[giveplayerid][pCrack]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pMats] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d materials.", PlayerInfo[giveplayerid][pMats]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
                if(packages > 0)
				{
					format(string, sizeof(string), "(Pocket) %d material packages.", packages);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(crates > 0)
				{
					format(string, sizeof(string), "(Pocket) %d drug crates.", crates);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(storageid > 0)
				{
					if(StorageInfo[giveplayerid][storageid-1][sPot] > 0)
					{
						format(string, sizeof(string), "(%s) %d grams of pot.", storagetype[storageid], StorageInfo[giveplayerid][storageid-1][sPot]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					if(StorageInfo[giveplayerid][storageid-1][sCrack] > 0)
					{
						format(string, sizeof(string), "(%s) %d grams of crack.", storagetype[storageid], StorageInfo[giveplayerid][storageid-1][sCrack]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
					if(StorageInfo[giveplayerid][storageid-1][sMats] > 0)
					{
						format(string, sizeof(string), "(%s) %d materials.", storagetype[storageid], StorageInfo[giveplayerid][storageid-1][sMats]);
						SendClientMessageEx(playerid, COLOR_GREY, string);
					}
				}

				if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0)
				{
					format(string, sizeof(string), "(Pocket) %d fish.", PlayerInfo[giveplayerid][pFishes]);
					SendClientMessageEx(playerid, COLOR_GREY, string);
				}
				if(PlayerInfo[giveplayerid][pPhoneBook] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Phone book.");
				if(PlayerInfo[giveplayerid][pCDPlayer] > 0) SendClientMessageEx(playerid, COLOR_GREY, "Music player.");
				new weaponname[50];
				format(string, sizeof(string), "*** %s' weapons...  ***", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				for (new i = 0; i < 12; i++)
				{
					if(PlayerInfo[giveplayerid][pGuns][i] > 0)
					{
						GetWeaponName(PlayerInfo[giveplayerid][pGuns][i], weaponname, sizeof(weaponname));
						format(string, sizeof(string), "Weapon: %s.", weaponname);
						SendClientMessageEx(playerid, COLOR_GRAD1, string);
					}
				}
				SendClientMessageEx(playerid, COLOR_GREEN, "_______________________________________");
				format(string, sizeof(string), "* %s has frisked %s for any illegal items.", GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a law enforcement officer, or a bodyguard!");
		return 1;
	}
	return 1;
}

CMD:hbadge(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8) {
		if(isnull(params)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hbadge [faction]" );
			SendClientMessageEx(playerid, COLOR_GRAD3, "|1 LSPD |2 FBI |3 SFPD |4 FDSA |5 Judicial System");
			SendClientMessageEx(playerid, COLOR_GRAD2, "|6 Government |7 SASD |8 Hitman |9 SA News");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|10 Taxi Company |11 SAAS |12 Tierra Robada");
			SendClientMessageEx(playerid, COLOR_GRAD1, "|13 NOOSE |16 SHAFT");
		}
		else switch(strval(params)) {
			case 0: {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge back to normal.");
		        SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			case 1: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to LSPD.");
			    SetPlayerColor(playerid,TEAM_BLUE_COLOR);
			}
			case 2: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to FBI.");
			    SetPlayerColor(playerid,TEAM_FBI_COLOR);
			}
			case 3: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to SFPD.");
			    SetPlayerColor(playerid, TEAM_SFPD);
			}
			case 4: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to FDSA.");
			    SetPlayerColor(playerid, TEAM_MED_COLOR);
			}
			case 5: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to Judicial.");
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			case 6: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to Government.");
			    SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			case 7: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to SASD.");
			    SetPlayerColor(playerid, TEAM_SASD);
			}
			case 8: {
		        SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge back to normal.");
		        SetPlayerColor(playerid,TEAM_HIT_COLOR);
			}
			case 9: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to SANews.");
			    SetPlayerColor(playerid,TEAM_NEWS_COLOR);
			}
			case 10: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to Taxi Company.");
			    SetPlayerColor(playerid, COLOR_TAXI);
			}
			case 11: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to SAAS.");
			    SetPlayerColor(playerid,COLOR_NG);
			}
			case 12: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to Tierra Robada.");
			    SetPlayerColor(playerid, COLOR_TR);
			}
			case 13: {
			    SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to NOOSE.");
			    SetPlayerColor(playerid,COLOR_NOOSE);
			}
			case 16: {
				SendClientMessageEx(playerid, COLOR_WHITE, "You have set your badge to SHAFT.");
				SetPlayerColor(playerid,COLOR_SHAFT);
			}
			default: SendClientMessageEx(playerid, COLOR_GREY, "Invalid faction specified.");
		}
	}
	return 1;
}

CMD:profile(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /profile [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			new ftext[24];
			if(PlayerInfo[giveplayerid][pMember] == 1 || PlayerInfo[giveplayerid][pLeader] == 1)
			{ ftext = "LSPD"; }
			else if(PlayerInfo[giveplayerid][pMember] == 2 || PlayerInfo[giveplayerid][pLeader] == 2)
			{ ftext = "FBI"; }
			else if(PlayerInfo[giveplayerid][pMember] == 4 || PlayerInfo[giveplayerid][pLeader] == 4)
			{ ftext = "FDSA"; }
			else if(PlayerInfo[giveplayerid][pMember] == 6 || PlayerInfo[giveplayerid][pLeader] == 6)
			{ ftext = "The Government"; }
			else if(PlayerInfo[giveplayerid][pMember] == 7 || PlayerInfo[giveplayerid][pLeader] == 7)
			{ ftext = "SASD"; }
			else if(PlayerInfo[giveplayerid][pMember] == 8 || PlayerInfo[giveplayerid][pLeader] == 8)
			{ ftext = "Hitman Agency"; }
			else if(PlayerInfo[giveplayerid][pMember] == 9 || PlayerInfo[giveplayerid][pLeader] == 9)
			{ ftext = "SANews"; }
			else if(PlayerInfo[giveplayerid][pMember] == 10 || PlayerInfo[giveplayerid][pLeader] == 10)
			{ ftext = "Taxi Faction"; }
			else if(PlayerInfo[giveplayerid][pMember] == 11 || PlayerInfo[giveplayerid][pLeader] == 11)
			{ ftext = "SAAS"; }
			else if(PlayerInfo[giveplayerid][pMember] == 12 || PlayerInfo[giveplayerid][pLeader] == 12)
			{ ftext = "Tierra Robada"; }
			else if(PlayerInfo[giveplayerid][pMember] == 13 || PlayerInfo[giveplayerid][pLeader] == 13)
			{ ftext = "NOOSE"; }
			else if(PlayerInfo[giveplayerid][pMember] == 16 || PlayerInfo[giveplayerid][pLeader] == 16)
			{ ftext = "S.H.A.F.T"; }
			else if(PlayerInfo[giveplayerid][pMember] == 17 || PlayerInfo[giveplayerid][pLeader] == 17)
			{ ftext = "SA:PA"; }
			else
			{ ftext = "None"; }
			new f2text[64];
			if(PlayerInfo[giveplayerid][pFMember] < 255)
			{
				format(f2text, sizeof(f2text), "%s", FamilyInfo[PlayerInfo[giveplayerid][pFMember]][FamilyName]);
			}
			else { f2text = "None"; }
			SendClientMessageEx(playerid, COLOR_WHITE, "Profile Information:");
			format(string, sizeof(string), "Name: %s", GetPlayerNameEx(giveplayerid));
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Age: %d", PlayerInfo[giveplayerid][pAge]);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Organisation: %s", ftext);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Family: %s", f2text);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "Bounty: $%d", PlayerInfo[giveplayerid][pHeadValue]);
			SendClientMessageEx(playerid, COLOR_GRAD2, string);
		}
	}
	return 1;
}

CMD:ranks(playerid, params[])
{
	if (PlayerInfo[playerid][pMember] != 8 && PlayerInfo[playerid][pLeader] != 8 && PlayerInfo[playerid][pAdmin] < 4) return SendClientMessageEx(playerid, COLOR_GREY, "You are not a Member of the Hitman Agency!");
	SendClientMessageEx(playerid, COLOR_WHITE, "|__________________ Agency's Ranks __________________|");

	new string[128];
	foreach(new i: Player)
	{
		if(PlayerInfo[i][pMember] == 8 || PlayerInfo[i][pLeader] == 8)
		{
			if( GoChase[playerid] == INVALID_PLAYER_ID )
			{
				format(string, sizeof(string), "* Name: %s | Rank %d | Completed Hits: %d | Failed Hits: %d", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits]);
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
			else
			{
				format(string, sizeof(string), "* Name: %s | Rank %d | Completed Hits: %d | Failed Hits: %d | Chasing: %s", GetPlayerNameEx(i),PlayerInfo[i][pRank], PlayerInfo[i][pCHits], PlayerInfo[i][pFHits], GetPlayerNameEx(GoChase[i]));
				SendClientMessageEx(playerid, COLOR_GREY, string);
			}
		}
	}
	return 1;
}

CMD:plantcarbomb(playerid, params[]) {
	return cmd_pcb(playerid, params);
}

CMD:pcb(playerid, params[])
{
	if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		if (PlayerInfo[playerid][pC4] == 0)
		{
			if (PlayerInfo[playerid][pBombs] != 0)
			{
				new carid = GetPlayerVehicleID(playerid);
				new closestcar = GetClosestCar(playerid, carid);
				if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0))
				{
					if(VehicleBomb{closestcar} == 1)
					{
						SendClientMessageEx(playerid, COLOR_GRAD2, "There is already a C4 on the vehicle engine!");
						return 1;
					}
					VehicleBomb{closestcar} = 1;
					PlacedVehicleBomb[playerid] = closestcar;
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
					SendClientMessageEx(playerid, COLOR_GREEN, "You have placed C4 on the vehicle engine, /pickupbomb to remove it.");
					PlayerInfo[playerid][pC4] = 1;
					PlayerInfo[playerid][pBombs]--;
					PlayerInfo[playerid][pC4Used] = 2;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You are not close enough to any vehicle!");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have C4!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You can only deploy 1 C4 at a time ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a member of the Hitman Agency ! ");
	}
	return 1;
}

CMD:bizmenu(playerid, params[])
{
    for(new d = 0 ; d < MAX_BIZ; d++)
	{
        new idx = PlayerInfo[playerid][pVBiz];
     	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
        if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a busines.");
        SetPVarInt(playerid, "bizmenu", d);
		if(IsPlayerInRangeOfPoint(playerid, 1, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]) || IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
        {
            ShowPlayerDialog(playerid,DIALOG_BIZMENU,DIALOG_STYLE_LIST,"BUSINESS ACCOUNT", "Balance\nWithdraw","Select","Cancel");
        	return 1;
        }
        else
        {
            SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not near your business!");
    	}
	}
    return 1;
}

CMD:lockbiz(playerid, params[])
{
	new string[128], idx, done;//, lockdone
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pBiz])
	{
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        if(!BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 1;
				format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(PlayerInfo[playerid][pBiz]), RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], PlayerInfo[playerid][pBiz]);
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[PlayerInfo[playerid][pBiz]][bStatus])
	        {
		        BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
				format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(PlayerInfo[playerid][pBiz]), RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], PlayerInfo[playerid][pBiz]);
	            UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			//lockdone = 1;
	    }
    }
    if(PlayerInfo[playerid][pVBiz] && !done)
	{
	    idx = PlayerInfo[playerid][pVBiz];
		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
	        if(!BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 1;
				format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], idx);
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and unlocks it.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(playerid, "~g~Business Unlocked", 3500, 3);
			}
			else if(BizInfo[idx][bStatus])
	        {
		        BizInfo[idx][bStatus] = 0;
				format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], idx);
	            UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
		        format(string, sizeof(string), "* %s takes out their business keys and locks it.", PlayerInfo[playerid]);
				ProxDetector(15.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				GameTextForPlayer(playerid, "~r~Business Locked", 3500, 3);
			}
			done = 1;
			//lockdone = 1;
	    }
    }
    return 1;
}

CMD:buybiz(playerid, params[])
{
	new string[128], done;
   	if(PlayerInfo[playerid][pBiz] && PlayerInfo[playerid][pVBiz] && PlayerInfo[playerid][pDonateRank] >= 4) return SendClientMessage(playerid, COLOR_GREY, "You already own two businesses.");
	if(PlayerInfo[playerid][pBiz] && PlayerInfo[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_GREY, "You already own a business.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
	    {
			if(!strcmp("The State", BizInfo[idx][bOwner], false))
			{
			    if(GetPVarInt(playerid, "Cash") < BizInfo[idx][bPrice]) return SendClientMessage(playerid, COLOR_GREY, "You don't have enough money to buy this business.");
				SetPVarInt(playerid, "Cash", GetPVarInt(playerid, "Cash") -BizInfo[idx][bPrice]);
				if(PlayerInfo[playerid][pBiz]) PlayerInfo[playerid][pVBiz] = idx;
				else PlayerInfo[playerid][pBiz] = idx;
			    format(BizInfo[idx][bOwner], 32, "%s", PlayerInfoU(playerid));
			    format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], idx);
				UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
				SendClientMessage(playerid, COLOR_GREEN, " You have successfully bought a business.");
				SendClientMessage(playerid, COLOR_WHITE, " Type /bizhelp to view your business commands.");
				format(string, sizeof(string), "%s has bought business id %d.", PlayerInfo[playerid], idx);
				Log("logs/business.log", string);
				idx = MAX_BIZ;
				done = 1;
			}
			if(idx == MAX_BIZ-1 && !done)
			{
			    SendClientMessage(playerid, COLOR_GREY, "This business is owned by someone else.");
			}
	    }
	    if(idx == MAX_BIZ-1 && !done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near a buyable business.");
	    }
	}
	return 1;
}

CMD:sellbiztomarket(playerid, params[])
{
	new string[128];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(!PlayerInfo[playerid][pBiz] && !PlayerInfo[playerid][pVBiz]) return SendClientMessage(playerid, COLOR_GREY, "You don't own a business.");
	if(sscanf(params, "s[8]", params)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /sellbiztomarket [confirm]");
	if(!strcmp(params, "confirm", true))
	{
	    new done;
	    if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[PlayerInfo[playerid][pBiz]][bX], BizInfo[PlayerInfo[playerid][pBiz]][bY], BizInfo[PlayerInfo[playerid][pBiz]][bZ]))
	    {
	        GiveZaiatMoney(playerid, (75*BizInfo[PlayerInfo[playerid][pBiz]][bPrice])/100);
			BizInfo[PlayerInfo[playerid][pBiz]][bStatus] = 0;
		    format(BizInfo[PlayerInfo[playerid][pBiz]][bOwner], 32, "The State");
		    format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(PlayerInfo[playerid][pBiz]), RBT(PlayerInfo[playerid][pBiz]), BizInfo[PlayerInfo[playerid][pBiz]][bOwner], PlayerInfo[playerid][pBiz]);
		    UpdateDynamic3DTextLabelText(BizInfo[PlayerInfo[playerid][pBiz]][bText], COLOR_WHITE, string);
		    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your business to The State. (75 percent of original price was paid back)");
            format(string, sizeof(string), "%s has sold business id %d to the market.", PlayerInfo[playerid], PlayerInfo[playerid][pBiz]);
			Log("logs/business.log", string);
			PlayerInfo[playerid][pBiz] = 0;
			done = 1;
	    }
	    if(!done)
	    {
	        new idx = PlayerInfo[playerid][pVBiz];
   	 		if(IsPlayerInRangeOfPoint(playerid, 2, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]))
		    {
		        GiveZaiatMoney(playerid, (75*BizInfo[idx][bPrice])/100);
				BizInfo[idx][bStatus] = 0;
			    format(BizInfo[idx][bOwner], 32, "The State");
			    format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], idx);
			    UpdateDynamic3DTextLabelText(BizInfo[idx][bText], COLOR_WHITE, string);
			    SendClientMessage(playerid, COLOR_GREEN, " You have successfully sold your business to The State. (75 percent of original price was paid back)");
	            format(string, sizeof(string), "%s has sold business id %d to the market.", PlayerInfo[playerid], idx);
				Log("logs/business.log", string);
				PlayerInfo[playerid][pVBiz] = 0;
				done = 1;
		    }
	    }
		if(!done)
	    {
	        SendClientMessage(playerid, COLOR_GREY, "You are not near your business.");
	        return 1;
	    }
    }
	return 1;
}

CMD:bizstats(playerid, params[])
{
	new string[128], playerb = playerid, status[16], status2[16];
	// Business Status for non-owners
	if(PlayerInfo[playerb][pBiz]) format(status, sizeof(status), "%s", RBS(PlayerInfo[playerb][pBiz]));
	else if(!PlayerInfo[playerb][pBiz]) format(status, sizeof(status), "None");
	if(PlayerInfo[playerb][pVBiz]) format(status2, sizeof(status2), "%s", RBS(PlayerInfo[playerb][pVBiz]));
	else if(!PlayerInfo[playerb][pVBiz]) format(status2, sizeof(status2), "None");
	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	format(string, sizeof(string), "Businesses of %s", PlayerInfo[playerb]);
	SendClientMessage(playerid, COLOR_ORANGE, string);
	format(string, sizeof(string), "Business 1: %s | ID: %s | Level: %s | Status: %s | Money: %s", RBT(PlayerInfo[playerb][pBiz]), RPBK(playerb), RPBL(playerb),status, RPBP(playerb), RPBM(playerb));
	SendClientMessage(playerid, COLOR_WHITE, string);
	format(string, sizeof(string), "Business 2: %s | ID: %s | Level: %s | Status: %s | Money: %s", RBT(PlayerInfo[playerb][pVBiz]), RPVIPBK(playerb), RPVIPBL(playerb),status2, RPVIPBP(playerb), RPVIPBM(playerb));
	SendClientMessage(playerid, COLOR_FADE2, string);
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "_____________________________________________________");
	return 1;
}

CMD:bused(playerid, params[])
{
	new string[128];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_WHITE, "You must be Admin to use this Command!");
	SendClientMessage(playerid, COLOR_ORANGE, "[Used Businesses]:");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(BizInfo[idx][bType])
	    {
			format(string, sizeof(string), "ID: %d | Type: %s | Level: %d | Price: $%d | Products: %d | Vault: $%d | Owner: %s", idx, RBT(idx), BizInfo[idx][bLevel], BizInfo[idx][bPrice],BizInfo[idx][bProducts], BizInfo[idx][bMoney], BizInfo[idx][bOwner]);
			SendClientMessage(playerid, COLOR_ORANGE, string);
	    }
	}
	return 1;
}

CMD:bedit(playerid, params[])
{
	new bizid, string[128], input;
	new Float:X, Float:Y, Float:Z;
	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_WHITE, "You must be Admin to use this Command!");
	if(sscanf(params, "s[32]", params))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit [option] [bizid]");
		SendClientMessage(playerid, COLOR_GREY, "OPTIONS: location | price | level | products | vault");
		return 1;
	}
	if(!strcmp(params, "location", true, 8))
	{
	    if(sscanf(params, "s[32]i", params, bizid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit location [bizid]");
		new idx=bizid;
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
		GetPlayerPos(playerid, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]);
		DestroyDynamicPickup(BizInfo[bizid][bPickup]);
    	//BizInfo[bizid][bPickup] = CreateDynamicPickup(1274, 1, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ], 0);
    	if(BizInfo[bizid][bType] == 1)
	    {
  			BizInfo[bizid][bPickup] = CreateDynamicPickup(1274, 1, X, Y, Z, 0);
	    }
	    if(BizInfo[bizid][bType] == 2)
	    {
  			BizInfo[bizid][bPickup] = CreateDynamicPickup(1275, 1, X, Y, Z, 0);
	    }
	    if(BizInfo[bizid][bType] == 3)
	    {
  			BizInfo[bizid][bPickup] = CreateDynamicPickup(1242, 1, X, Y, Z, 0);
   	    }
   	    if(BizInfo[bizid][bType] == 4)
   	    {
  			BizInfo[bizid][bPickup] = CreateDynamicPickup(1582, 1, X, Y, Z, 0);
 	    }
 	    if(BizInfo[bizid][bType] == 5)
 	    {
   			BizInfo[bizid][bPickup] = CreateDynamicPickup(1650, 1, X, Y, Z, 0);
   	    }
   	    if(BizInfo[bizid][bType] == 6)
   	    {
   			BizInfo[bizid][bPickup] = CreateDynamicPickup(19094, 1, X, Y, Z, 0);
   	    }
   	    if(BizInfo[bizid][bType] == 7)
   	    {
     		BizInfo[bizid][bPickup] = CreateDynamicPickup(321, 1, X, Y, Z, 0);
  	    }
		DestroyDynamic3DTextLabel(BizInfo[bizid][bText]);
        if(!strcmp("The State", BizInfo[idx][bOwner])) format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nFor Sale\nPrice: $%d\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice], idx);
		else format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], idx);
    	BizInfo[bizid][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, BizInfo[bizid][bX], BizInfo[bizid][bY], BizInfo[bizid][bZ]+0.8, 4);
	    format(string, sizeof(string), "AdmWarn: %s has changed business ID %d's location.", PlayerInfo[playerid], bizid);
		ABroadCast(COLOR_LIGHTRED, string,4);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "price", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit price [bizid] [price]");
		if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
		if(strcmp("The State", BizInfo[bizid][bOwner])) return SendClientMessage(playerid, COLOR_GREY, "You can't edit the price of owned businesses.");
	    BizInfo[bizid][bPrice] = input;
	    format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nFor Sale\nPrice: $%d\nID: %d", RBS(bizid), RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice], bizid);
	    UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's price to $%d.", PlayerInfo[playerid], bizid, input);
		ABroadCast(COLOR_LIGHTRED, string,4);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "level", true, 5))
	{
	    // L1: 0 | L2: 100 | L3: 300 | L4: 700 | L5: 1200
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit level [bizid] [level]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0 || input > 5) return SendClientMessage(playerid, COLOR_GREY, "Levels are between 1 and 5.");
	    BizInfo[bizid][bLevel] = input;
	    if(input == 1) BizInfo[bizid][bSold] = 0;
	    if(input == 2) BizInfo[bizid][bSold] = 100;
	    if(input == 3) BizInfo[bizid][bSold] = 300;
	    if(input == 4) BizInfo[bizid][bSold] = 700;
	    if(input == 5) BizInfo[bizid][bSold] = 1200;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's level to %d.", PlayerInfo[playerid], bizid, input);
		ABroadCast(COLOR_LIGHTRED, string,4);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "products", true, 8))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit products [bizid] [amount]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Products can't be negative.");
	    BizInfo[bizid][bProducts] = input;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's products to %d.", PlayerInfo[playerid], bizid, input);
		ABroadCast(COLOR_LIGHTRED, string,4);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "vault", true, 5))
	{
	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit vault [bizid] [amount]");
    	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    	if(input < 0) return SendClientMessage(playerid, COLOR_GREY, "Vault money can't be negative.");
	    BizInfo[bizid][bMoney] = input;
	    format(string, sizeof(string), "AdmWarn: %s has set business ID %d's vault money to $%d.", PlayerInfo[playerid], bizid, input);
		ABroadCast(COLOR_LIGHTRED, string,4);
		Log("logs/business.log", string);
	}
	else if(!strcmp(params, "truckers", true, 8))
	{
   	    if(sscanf(params, "s[32]ii", params, bizid, input)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bedit truckers [bizid] [type] (1=Accepting | 2=NotAccepting");
        if(!BizInfo[bizid][bAP])
		{
		    BizInfo[bizid][bAP] = 1;
		    format(string, sizeof(string), "AdmWarn: %s has set business ID %d to accept truckers.", PlayerInfo[playerid], bizid);
			ABroadCast(COLOR_LIGHTRED, string,4);
			Log("logs/business.log", string);
		}
		else
		{
		    BizInfo[bizid][bAP] = 0;
		    format(string, sizeof(string), "AdmWarn: %s has set business ID %d to NOT accept truckers.", PlayerInfo[playerid], bizid);
			ABroadCast(COLOR_LIGHTRED, string,4);
			Log("logs/business.log", string);
		}
	}
	return 1;
}

CMD:gotobiz(playerid, params[])
{
    new idx, string[128];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_WHITE, "You must be Admin to use this Command!");
	if(sscanf(params, "i", idx)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /gotobiz [bizid]");
	if(!BizInfo[idx][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	SetPlayerPos(playerid, BizInfo[idx][bX], BizInfo[idx][bY], BizInfo[idx][bZ]);
	format(string, sizeof(string), " You have teleported to business ID %d.", idx);
	SendClientMessage(playerid, COLOR_WHITE, string);
	return 1;
}

CMD:asellbiz(playerid, params[])
{
	new bizid, string[128];
   	if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_WHITE, "You must be Admin to use this Command!");
	if(sscanf(params, "i", bizid)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /asellbiz [bizid]");
	if(!BizInfo[bizid][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
	if(!strcmp("The State", BizInfo[bizid][bOwner], true)) return SendClientMessage(playerid, COLOR_GREY, "This business is not owned by anybody.");
	foreach(Player, i)
	{
	    if(IsPlayerConnected(i) && PlayerInfo[i][pBiz] == bizid)
		{
			PlayerInfo[i][pBiz] = 0;
			format(string, sizeof(string), " Administrator %s has sold your business.", PlayerInfo[playerid]);
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	format(string, sizeof(string), "AdmWarn: %s has sold %s's business. (ID %d)", PlayerInfo[playerid], BizInfo[bizid][bOwner], bizid);
	ABroadCast(COLOR_LIGHTRED, string,4);
	Log("logs/business.log", string);
    BizInfo[bizid][bStatus] = 0;
    format(BizInfo[bizid][bOwner], 32, "The State");
    format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nFor Sale\nPrice: $%d\nID: %d", RBS(bizid), RBT(bizid), BizInfo[bizid][bOwner], BizInfo[bizid][bPrice], bizid);
 	UpdateDynamic3DTextLabelText(BizInfo[bizid][bText], COLOR_WHITE, string);
	return 1;
}

CMD:createbiz(playerid, params[])
{
	new type, string[128];
    if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_WHITE, "You must be Admin to use this Command!");
	if(sscanf(params, "i", type))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USAGE: /createbiz [type]");
		SendClientMessage(playerid, COLOR_GREY, "TYPES: 1) 24/7 | 2) Clothes Shop | 3) Ammunation | 4) Well Stacked Pizza | 5) Gas Station | 6)Burger Shot | 7)Sex Shop");
		return 1;
	}
	if(type < 1 || type > 7) return SendClientMessage(playerid, COLOR_GREY, "Businesses are between 1 and 7.");
	for(new idx=1; idx<MAX_BIZ; idx++)
	{
	    if(!BizInfo[idx][bType])
		{
		    // Getting Business Setup
		    new Float:X, Float:Y, Float:Z;
		    GetPlayerPos(playerid, X, Y, Z);
		    BizInfo[idx][bType] = type;
		    BizInfo[idx][bStatus] = 1;
		    format(BizInfo[idx][bOwner], 32, "The State");
		    BizInfo[idx][bX] = X;
		    BizInfo[idx][bY] = Y;
		    BizInfo[idx][bZ] = Z;
		    BizInfo[idx][bMoney] = 0;
		    BizInfo[idx][bProducts] = 999999999;
		    BizInfo[idx][bSold] = 0;
		    BizInfo[idx][bLevel] = 1;
		    BizInfo[idx][bPrice] = 10000000;
		    if(BizInfo[idx][bType] == 1)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1274, 1, X, Y, Z, 0);
    	    }
    	    if(BizInfo[idx][bType] == 2)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1275, 1, X, Y, Z, 0);
    	    }
    	    if(BizInfo[idx][bType] == 3)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1242, 1, X, Y, Z, 0);
    	    }
    	    if(BizInfo[idx][bType] == 4)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1582, 1, X, Y, Z, 0);
    	    }
    	    if(BizInfo[idx][bType] == 5)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(1650, 1, X, Y, Z, 0);
    	    }
    	    if(BizInfo[idx][bType] == 6)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(19094, 1, X, Y, Z, 0);
    	    }
    	    if(BizInfo[idx][bType] == 7)
    	    {
     			BizInfo[idx][bPickup] = CreateDynamicPickup(321, 1, X, Y, Z, 0);
    	    }
			format(string, sizeof(string), "%s\n\n{FFFFFF}%s\nOwner: %s\nFor Sale\nPrice: $%d\nID: %d", RBS(idx), RBT(idx), BizInfo[idx][bOwner], BizInfo[idx][bPrice], idx);
			BizInfo[idx][bText] = CreateDynamic3DTextLabel(string, COLOR_WHITE, X, Y, Z+0.8, 4);
			format(string, sizeof(string), "AdmWarn: %s has created business ID %d.", PlayerInfo[playerid], idx);
			ABroadCast(COLOR_LIGHTRED, string,4);
			Log("logs/business.log", string);
			idx = MAX_BIZ;
		}
	}
	return 1;
}

CMD:deletebiz(playerid, params[])
{
	new id, string[128];
    if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, COLOR_GREY, "You need to login first before using any command.");
	if(PlayerInfo[playerid][pAdmin] < 1337) return SendClientMessage(playerid, COLOR_WHITE, "You must be Admin to use this Command!");
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, COLOR_WHITE, "USAGE: /deletebiz [bizid]");
	if(!BizInfo[id][bType]) return SendClientMessage(playerid, COLOR_GREY, "Invalid business id.");
    foreach(Player, i)
	{
	    if(IsPlayerConnected(i) && PlayerInfo[i][pBiz] == id)
		{
		    PlayerInfo[playerid][pBiz] = 0;
		    format(string, sizeof(string), " Administrator %s has deleted your business.", PlayerInfo[playerid]);
			SendClientMessage(i, COLOR_WHITE, string);
		}
	}
	if(!strcmp("The State", BizInfo[id][bOwner]))
	{
		format(string, sizeof(string), "AdmWarn: %s has deleted business ID %d.", PlayerInfo[playerid], id);
	}
	else
	{
	    format(string, sizeof(string), "AdmWarn: %s has deleted %s's business. (ID %d)", PlayerInfo[playerid], BizInfo[id][bOwner], id);
	}
	ABroadCast(COLOR_LIGHTRED, string,4);
	Log("logs/business.log", string);
	BizInfo[id][bType] = 0;
    BizInfo[id][bStatus] = 0;
    format(BizInfo[id][bOwner], 32, "");
    BizInfo[id][bX] = 0;
    BizInfo[id][bY] = 0;
    BizInfo[id][bZ] = 0;
    BizInfo[id][bMoney] = 0;
    BizInfo[id][bProducts] = 0;
    DestroyDynamicPickup(BizInfo[id][bPickup]);
    DestroyDynamic3DTextLabel(BizInfo[id][bText]);
	return 1;
}

CMD:plantbomb(playerid, params[]) {
	return cmd_pb(playerid, params);
}

CMD:pb(playerid, params[])
{
	if (PlayerInfo[playerid][pMember] == 8 || PlayerInfo[playerid][pLeader] == 8)
	{
		if (PlayerInfo[playerid][pC4] == 0)
		{
			if (PlayerInfo[playerid][pBombs] != 0)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					SendClientMessageEx(playerid, COLOR_LIGHTRED,"You can't plant C4 while in a vehicle!");
					return 1;
				}
				GetPlayerPos(playerid,Positions[0][0], Positions[0][1], Positions[0][2]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_X", Positions[0][0]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Y", Positions[0][1]);
				SetPVarFloat(playerid, "DYN_C4_FLOAT_Z", Positions[0][2]);
				PlayerInfo[playerid][pC4] = CreateDynamicObject(1654, Positions[0][0], Positions[0][1], Positions[0][2]-0.9, 0, 89.325012207031, 3.9700012207031);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.0,0,0,0,0,0);
				SendClientMessageEx(playerid, COLOR_GREEN, "You have placed C4 on the ground, /pickupbomb to remove it.");
				//PlayerInfo[playerid][pC4] = 1;
				PlayerInfo[playerid][pBombs]--;
				PlayerInfo[playerid][pC4Used] = 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You do not have C4!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GRAD2, " You can only deploy 1 C4 at a time ! ");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, " You are not a member of the Hitman Agency ! ");
	}
	return 1;
}

CMD:pub(playerid, params[]) {
	return cmd_pickupbomb(playerid, params);
}

CMD:pickupbomb(playerid, params[])
{
	if (PlayerInfo[playerid][pMember] != 8 && PlayerInfo[playerid][pLeader] != 8)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You are not a Hitman!");
		return 1;
	}
	if (PlayerInfo[playerid][pC4] == 0)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You haven't planted a bomb!");
		return 1;
	}
	new carid = GetPlayerVehicleID(playerid);
	new closestcar = GetClosestCar(playerid, carid);
	if(IsPlayerInRangeOfVehicle(playerid, closestcar, 4.0) && VehicleBomb{closestcar} == 1)
	{
		VehicleBomb{closestcar} = 0;
		PlacedVehicleBomb[playerid] = INVALID_VEHICLE_ID;
		PickUpC4(playerid);
		SendClientMessageEx(playerid, COLOR_GREEN, "Bomb picked up successfully.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, GetPVarFloat(playerid, "DYN_C4_FLOAT_X"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Y"), GetPVarFloat(playerid, "DYN_C4_FLOAT_Z")))
	{
		PickUpC4(playerid);
		SendClientMessageEx(playerid, COLOR_GREEN, "Bomb picked up successfully.");
		PlayerInfo[playerid][pBombs]++;
		PlayerInfo[playerid][pC4Used] = 0;
		PlayerInfo[playerid][pC4Get] = 1;
		return 1;
	}
	return 1;
}

CMD:tazer(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128];
		if(PlayerInfo[playerid][pConnectHours] < 2 || PlayerInfo[playerid][pWRestricted] > 0) return SendClientMessageEx(playerid, COLOR_GRAD2, "You cannot use this as you are currently restricted from possessing weapons!");

		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");
			return 1;
		}
		if(PlayerCuffedTime[playerid] > 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this while tazed/cuffed.");
			return 1;
		}
		if(gettime() - LastShot[playerid] < 5) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You have been shot in the last 5 seconds.");
			return 1;
		}

		if(pTazer{playerid} == 0)
		{
			pTazerReplace{playerid} = PlayerInfo[playerid][pGuns][2];
			if(PlayerInfo[playerid][pGuns][2] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][2]);
			format(string, sizeof(string), "* %s unholsters their tazer.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 23, 60000);
			pTazer{playerid} = 1;
		}
		else
		{
			RemovePlayerWeapon(playerid, 23);
			GivePlayerValidWeapon(playerid, pTazerReplace{playerid}, 60000);
			format(string, sizeof(string), "* %s holsters their tazer.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			pTazer{playerid} = 0;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not in Law Enforcement!");
		return 1;
	}
	return 1;
}

CMD:radargun(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		new string[128];
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		if(GetPVarInt(playerid, "IsInArena") >= 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You can't do this right now, you are in a arena!");
			return 1;
		}
		if(GetPVarInt( playerid, "EventToken") != 0)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't use the tazer while you're in an event.");
			return 1;
		}

		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		if(PlayerInfo[playerid][pJailTime] > 0)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this in jail/prison.");
			return 1;
		}
		if(PlayerCuffed[playerid] >= 1) {
			SendClientMessageEx(playerid, COLOR_WHITE, "You cannot use this while tazed/cuffed.");
			return 1;
		}

		new SpeedRadar = GetPVarInt(playerid, "SpeedRadar");
		if(SpeedRadar == 0)
		{
			SetPVarInt(playerid, "RadarReplacement", PlayerInfo[playerid][pGuns][9]);
			if(PlayerInfo[playerid][pGuns][9] != 0) RemovePlayerWeapon(playerid, PlayerInfo[playerid][pGuns][9]);
			format(string, sizeof(string), "* %s takes out a LIDAR speed gun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			GivePlayerValidWeapon(playerid, 43, 60000);
			SetPVarInt(playerid, "SpeedRadar", 1);
		}
		else
		{
			RemovePlayerWeapon(playerid, 43);
			GivePlayerValidWeapon(playerid, GetPVarInt(playerid, "RadarReplacement"), 60000);
			format(string, sizeof(string), "* %s puts away their LIDAR speed gun.", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			DeletePVar(playerid, "SpeedRadar");
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a Cop / FBI / Coastguard!");
		return 1;
	}
	return 1;
}

CMD:cuff(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2))
	{
		if(GetPVarInt(playerid, "Injured") == 1)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this right now.");
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cuff [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot cuff yourself!"); return 1; }
				if(PlayerCuffed[giveplayerid] == 1 || GetPlayerSpecialAction(giveplayerid) == SPECIAL_ACTION_HANDSUP)
				{
					format(string, sizeof(string), "* You have been handcuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You handcuffed %s, till uncuff.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s handcuffs %s, tightening the cuffs securely.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~r~Cuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 0);
					ClearAnimations(giveplayerid);
					//ApplyAnimation(giveplayerid,"ped","cower",1,1,0,0,0,0,1);
					SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_CUFFED);
					PlayerCuffed[giveplayerid] = 2;
					SetPVarInt(giveplayerid, "PlayerCuffed", 2);
					SetPVarInt(giveplayerid, "IsFrozen", 1);
					//Frozen[giveplayerid] = 1;
					PlayerCuffedTime[giveplayerid] = 300;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't restrained!");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:uncuff(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /uncuff [player]");

		if(IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				/*if(PlayerInfo[giveplayerid][pJailTime] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, "You can't uncuff a jailed player.");
					return 1;
				} */
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't uncuff yourself."); return 1; }
				if(PlayerCuffed[giveplayerid]>1)
				{
					DeletePVar(giveplayerid, "IsFrozen");
					format(string, sizeof(string), "* You have been uncuffed by %s.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* You uncuffed %s.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s has uncuffed %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GameTextForPlayer(giveplayerid, "~g~Uncuffed", 2500, 3);
					TogglePlayerControllable(giveplayerid, 1);
					SetPlayerSpecialAction(giveplayerid,SPECIAL_ACTION_NONE);
					ClearAnimations(giveplayerid);
					PlayerCuffed[giveplayerid] = 0;
                    PlayerCuffedTime[giveplayerid] = 0;
					DeletePVar(giveplayerid, "PlayerCuffed");
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You're not a law enforcement officer.");
	}
	return 1;
}

CMD:detain(playerid, params[])
{
	if(IsACop(playerid))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't do this while you're in a vehicle.");
			return 1;
		}

		new string[128], giveplayerid, seat;
		if(sscanf(params, "ud", giveplayerid, seat)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /detain [player] [seatid 1-3]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(seat < 1 || seat > 3)
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "The seat ID cannot be above 3 or below 1.");
				return 1;
			}
			if(IsACop(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "You can't detain other law enforcement officers.");
				return 1;
			}
			if(IsPlayerInAnyVehicle(giveplayerid))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That person is in a car - get them out first.");
				return 1;
			}
			if (ProxDetectorS(8.0, playerid, giveplayerid))
			{
				if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot detain yourself!"); return 1; }
				if(PlayerCuffed[giveplayerid] == 2)
				{
					new carid = gLastCar[playerid];
					if(IsSeatAvailable(carid, seat))
					{
						new Float:pos[6];
						GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
						GetPlayerPos(giveplayerid, pos[3], pos[4], pos[5]);
						GetVehiclePos( carid, pos[0], pos[1], pos[2]);
						if (floatcmp(floatabs(floatsub(pos[0], pos[3])), 10.0) != -1 &&
								floatcmp(floatabs(floatsub(pos[1], pos[4])), 10.0) != -1 &&
								floatcmp(floatabs(floatsub(pos[2], pos[5])), 10.0) != -1) return false;
						format(string, sizeof(string), "* You were detained by %s .", GetPlayerNameEx(playerid));
						SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* You detained %s .", GetPlayerNameEx(giveplayerid));
						SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s throws %s in the vehicle.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						GameTextForPlayer(giveplayerid, "~r~Detained", 2500, 3);
						ClearAnimations(giveplayerid);
						TogglePlayerControllable(giveplayerid, false);
						PutPlayerInVehicle(giveplayerid, carid, seat);
					}
					else
					{
						SendClientMessageEx(playerid, COLOR_GREY, "That seat isn't available!");
						return 1;
					}
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That person isn't cuffed.");
					return 1;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, " You're not close enough to the player or your car!");
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GRAD2, "   You are not in Law Enforcement!");
	}
	return 1;
}
/*CMD:drag(playerid, params[])
{
	if(IsACop(playerid))
	{
		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /drag [playerid]");

		if(IsPlayerConnected(giveplayerid))
		{
			if(GetPVarInt(giveplayerid, "PlayerCuffed") == 2)
			{
				if(IsPlayerInAnyVehicle(playerid)) return SendClientMessageEx(playerid, COLOR_WHITE, " You must be out of the vehicle to use this command.");
				if(GetPVarInt(giveplayerid, "BeingDragged") == 1)
				{
					SendClientMessageEx(playerid, COLOR_WHITE, " That player is already being dragged. ");
					return 1;
				}
                new Float:dX, Float:dY, Float:dZ;
				GetPlayerPos(giveplayerid, dX, dY, dZ);
				if(!IsPlayerInRangeOfPoint(playerid, 5.0, dX, dY, dZ))
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, " That suspect is not near you.");
					return 1;
				}
				format(string, sizeof(string), "* %s has is now dragging you.", GetPlayerNameEx(playerid));
				SendClientMessageEx(giveplayerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* You are now dragging %s, you may move them now.", GetPlayerNameEx(giveplayerid));
				SendClientMessageEx(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "* %s grabs ahold of %s and begins to move them.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				SendClientMessageEx(playerid, COLOR_WHITE, "You are now dragging the suspect, press the '{AA3333}FIRE{FFFFFF}' button to stop.");
				SetPVarInt(giveplayerid, "BeingDragged", 1);
				SetPVarInt(playerid, "DraggingPlayer", giveplayerid);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_WHITE, " The specified player is not cuffed !");
			}
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a LEO ! ");
		return 1;
	}
	return 1;
}*/

CMD:hfind(playerid, params[]) {
	if(PlayerInfo[playerid][pMember] != 8 && PlayerInfo[playerid][pLeader] != 8 &&
	PlayerInfo[playerid][pMember] != 2 && PlayerInfo[playerid][pLeader] != 2 &&
	PlayerInfo[playerid][pMember] != 16 && PlayerInfo[playerid][pLeader] != 16) {
		return 1;
	}
	new
		iTargetID;

	if(sscanf(params, "u", iTargetID)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /hfind [player]");
	}
	else if(iTargetID == playerid) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself.");
	}
	else if(!IsPlayerConnected(iTargetID)) {
		return SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
	}
	else if(GetPlayerInterior(iTargetID) != 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "That person is inside an interior.");
	}
	else if(PlayerInfo[iTargetID][pAdmin] >= 2) {
		return SendClientMessageEx(playerid, COLOR_GREY, "You are unable to find this person.");
	}
	else if(PhoneOnline[iTargetID] > 0) {
		return SendClientMessageEx(playerid, COLOR_GREY, "* The signal cannot be reached.");
	}

    if(GetPVarType(playerid, "hFind")) {
   		SendClientMessageEx(playerid, COLOR_GRAD2, "Stopped Updating");
        DeletePVar(playerid, "hFind");
        DisablePlayerCheckpoint(playerid);
	}
	else
	{
		new
			szZone[MAX_ZONE_NAME],
			szMessage[108];

		new Float:X, Float:Y, Float:Z;
	    GetPlayerPos(iTargetID, X, Y, Z);
	    DisablePlayerCheckpoint(playerid);
	    SetPlayerCheckpoint(playerid, X, Y, Z, 4.0);
		GetPlayer3DZone(iTargetID, szZone, sizeof(szZone));
		format(szMessage, sizeof(szMessage), "Tracking on %s, last seen at %s.", GetPlayerNameEx(iTargetID), szZone);
		SendClientMessageEx(playerid, COLOR_GRAD2, szMessage);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Type /hfind again to stop tracking.");
		SetPVarInt(playerid, "hFind", iTargetID);
	}
	return 1;
}

CMD:nr(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
		new string[128];
		if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(isnull(params)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /nr [text]");

		new newcar = GetPlayerVehicleID(playerid);
		if(IsANewsCar(newcar) || IsPlayerInRangeOfPoint(playerid,7.0,639.7627,-11.1346,1107.9656))
		{
			if(PlayerInfo[playerid][pRank] < 1)
			{
				SendClientMessageEx(playerid, COLOR_GRAD2, "You must be at least rank 1.");
			}
			else
			{
				format(string, sizeof(string), "NR %s (%d): %s", GetPlayerNameEx(playerid), playerid, params);
				OOCNews(COLOR_NEWS,string);
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You're not in a news van or chopper or in the studio.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a News Reporter!");
	}
	return 1;
}

CMD:watchtv(playerid, params[])
{
	if( (GetPlayerVirtualWorld(playerid) >= 6000 && GetPlayerVirtualWorld(playerid) <= (6000 + MAX_HOUSES)) || WatchingTV[playerid] != 0)
	{
		if(broadcasting == 0)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Nothings on TV!");
			return 1;
		}

		new string[128];
		if(WatchingTV[playerid] == 0)
		{
			format(string, sizeof(string), "* %s starts watching TV", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Type /watchtv again to stop watching TV");
			BroadcastLastVW[playerid] = GetPlayerVirtualWorld(playerid);
			BroadcastLastInt[playerid] = GetPlayerInterior(playerid);
			GetPlayerPos(playerid, BroadcastFloats[playerid][1], BroadcastFloats[playerid][2], BroadcastFloats[playerid][3]);
			GetPlayerFacingAngle(playerid, BroadcastFloats[playerid][0]);

			WatchingTV[playerid] = 1;
			viewers++;
			UpdateSANewsBroadcast();

			TogglePlayerControllable(playerid, false);
			SetPlayerInterior(playerid, 1);
			SetPlayerVirtualWorld(playerid, 4225);
			SetPlayerPosEx(playerid, 639.2813,-11.8090,1111.4656);

			if(cameraangle == 0)
			{
				SetPlayerCameraPos(playerid, 635.6883,-11.1890,1108.6041);
				SetPlayerCameraLookAt(playerid, 641.3040,-12.2565,1108.1642);
			}
			else if(cameraangle == 1)
			{
				SetPlayerCameraPos(playerid, 637.9041,-8.3097,1108.9656);
				SetPlayerCameraLookAt(playerid, 640.9764,-14.7714,1107.9656);
			}
			else if(cameraangle == 2)
			{
				SetPlayerCameraPos(playerid, 638.6522,-15.6267,1108.9656);
				SetPlayerCameraLookAt(playerid, 640.7208,-9.5926,1107.2006);
			}
			else
			{
				SetPlayerCameraPos(playerid, 635.6883,-11.1890,1108.6041);
				SetPlayerCameraLookAt(playerid, 641.3040,-12.2565,1108.1642);
			}
		}
		else
		{
			SetPlayerPosEx(playerid,BroadcastFloats[playerid][1],BroadcastFloats[playerid][2],BroadcastFloats[playerid][3]);
			SetPlayerVirtualWorld(playerid, BroadcastLastVW[playerid]);
			PlayerInfo[playerid][pVW] = BroadcastLastVW[playerid];
			SetPlayerInterior(playerid, BroadcastLastInt[playerid]);
			PlayerInfo[playerid][pInt] = BroadcastLastInt[playerid];
			SetPlayerFacingAngle(playerid, BroadcastFloats[playerid][0]);
			SetCameraBehindPlayer(playerid);
			Player_StreamPrep(playerid, BroadcastFloats[playerid][1],BroadcastFloats[playerid][2],BroadcastFloats[playerid][3], FREEZE_TIME);

			WatchingTV[playerid] = 0;
			viewers--;
			UpdateSANewsBroadcast();

			format(string, sizeof(string), "* %s stops watching TV", GetPlayerNameEx(playerid));
			ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You must be in a house!");
	}
	return 1;
}

CMD:cameraangle(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 3 || PlayerInfo[playerid][pLeader] == 9)
	{
		if(IsPlayerInRangeOfPoint(playerid,10.0,631.8096,-10.9424,1107.9729))
		{
			if(broadcasting == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Not currently broadcasting!");
				return 1;
			}

			new string[128], choice[32];
			if(sscanf(params, "s[32]", choice))
			{
				SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /cameraangle [location]");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Locations: Center,Left,Right");
				return 1;
			}

			if(strcmp(choice,"center",true) == 0)
			{
				format(string, sizeof(string), "** %s changes the camera angle to the center **", GetPlayerNameEx(playerid));
				SendRadioMessage(9, RADIO, string);
				cameraangle = 0;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,635.6883,-11.1890,1108.6041,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else if(strcmp(choice,"left",true) == 0)
			{
				format(string, sizeof(string), "** %s changes the camera angle to the left **", GetPlayerNameEx(playerid));
				SendRadioMessage(9, RADIO, string);
				cameraangle = 1;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,637.9041,-8.3097,1107.9656,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else if(strcmp(choice,"right",true) == 0)
			{
				format(string, sizeof(string), "** %s changes the camera angle to the right **", GetPlayerNameEx(playerid));
				SendRadioMessage(9, RADIO, string);
				cameraangle = 2;
				DestroyDynamic3DTextLabel(camera);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,638.6522,-15.6267,1107.9656,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Unrecognized camera angle");
				return 1;
			}
			foreach(new i: Player)
			{
				if(WatchingTV[i] == 1)
				{
					if(cameraangle == 0)
					{
						SetPlayerCameraPos(i, 635.6883,-11.1890,1108.6041);
						SetPlayerCameraLookAt(i, 641.3040,-12.2565,1108.1642);
					}
					else if(cameraangle == 1)
					{
						SetPlayerCameraPos(i, 637.9041,-8.3097,1108.9656);
						SetPlayerCameraLookAt(i, 640.9764,-14.7714,1107.9656);
					}
					else if(cameraangle == 2)
					{
						SetPlayerCameraPos(i, 638.6522,-15.6267,1108.9656);
						SetPlayerCameraLookAt(i, 640.7208,-9.5926,1107.2006);
					}
					else
					{
						SetPlayerCameraPos(i, 635.6883,-11.1890,1108.6041);
						SetPlayerCameraLookAt(i, 641.3040,-12.2565,1108.1642);
					}
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Not in the studio!");
		}
	}
	return 1;
}

CMD:stopnews(playerid, params[])
{
	if(PlayerInfo[playerid][pLeader] == 9 || PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] > 5)
	{
	    if(shutdown == 0)
	    {
	        shutdown = 1;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have just shutdown the whole news system and are ending anything in progres..." );
	        if(broadcasting == 1)
	        {
	            SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Broadcasting has just been shutdown..");
				broadcasting = 0;
				UpdateSANewsBroadcast();
				DestroyDynamic3DTextLabel(camera);
	            foreach(new i: Player)
				{
					if(WatchingTV[i] == 1)
					{
						SetPlayerPosEx(i,BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3]);
						SetPlayerVirtualWorld(i, BroadcastLastVW[i]);
						PlayerInfo[i][pInt] = BroadcastLastVW[i];
						SetPlayerInterior(i, BroadcastLastInt[i]);
						PlayerInfo[i][pInt] = BroadcastLastInt[i];
						SetPlayerFacingAngle(i, BroadcastFloats[i][0]);
						SetCameraBehindPlayer(i);
						WatchingTV[i] = 0;
						viewers = 0;
						UpdateSANewsBroadcast();
						Player_StreamPrep(i, BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3], FREEZE_TIME);
					}
				}
	        }
	        foreach(new i: Player)
	        {
	            if(TalkingLive[i] != INVALID_PLAYER_ID)
				{
					SendClientMessageEx(i, COLOR_LIGHTBLUE, "* Live conversation ended.");
					SendClientMessageEx(TalkingLive[i], COLOR_LIGHTBLUE, "* Live conversation ended.");
					TogglePlayerControllable(i, 1);
					TogglePlayerControllable(TalkingLive[i], 1);
					TalkingLive[TalkingLive[i]] = INVALID_PLAYER_ID;
					TalkingLive[i] = INVALID_PLAYER_ID;
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Live has just been shutdown..");
					return 1;
				}
	        }
	    }
	    else
	    {
	        shutdown = 0;
	        SendClientMessageEx(playerid, COLOR_WHITE, "You have just turned on the news system. " );
	    }
	}
	return 1;
}

CMD:liveban(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pRank] >= 1 || PlayerInfo[playerid][pLeader] == 9)
	{
	    new giveplayerid,
	        string[128];

	    if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /liveban [player]");
	    if(PlayerInfo[giveplayerid][pLiveBanned] == 0)
	    {
	        PlayerInfo[giveplayerid][pLiveBanned] = 1;
	        format(string, sizeof(string), "%s has interview banned %s", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, string);
	        return 1;
	    }
	    else
	    {
	        PlayerInfo[giveplayerid][pLiveBanned] = 0;
	        format(string, sizeof(string), "%s has unbanned %s from interviews", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
	        SendRadioMessage(9, RADIO, string);
	        return 1;
	    }
	}
	return 1;
}

CMD:broadcast(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 && PlayerInfo[playerid][pDivision] == 3 || PlayerInfo[playerid][pLeader] == 9)
	{
	    if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(IsPlayerInRangeOfPoint(playerid,10.0,631.8096,-10.9424,1107.9729))
		{
			new string[128];
			if(broadcasting == 0)
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Now broadcasting LIVE");
				broadcasting = 1;
				cameraangle = 0;
				UpdateSANewsBroadcast();
				format(string, sizeof(string), "%s will now broadcast LIVE from the studio! /watchtv to tune in!", GetPlayerNameEx(playerid));
				OOCNews(COLOR_NEWS,string);
				camera = CreateDynamic3DTextLabel("*The Camera*",COLOR_RED,635.6883,-11.1890,1108.6041,13.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
				return 1;
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* No longer broadcasting");
				broadcasting = 0;
				UpdateSANewsBroadcast();
				DestroyDynamic3DTextLabel(camera);
				foreach(new i: Player)
				{
					if(WatchingTV[i] == 1)
					{
						SetPlayerPosEx(i,BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3]);
						SetPlayerVirtualWorld(i, BroadcastLastVW[i]);
						PlayerInfo[i][pInt] = BroadcastLastVW[i];
						SetPlayerInterior(i, BroadcastLastInt[i]);
						PlayerInfo[i][pInt] = BroadcastLastInt[i];
						SetPlayerFacingAngle(i, BroadcastFloats[i][0]);
						SetCameraBehindPlayer(i);
						WatchingTV[i] = 0;
						viewers = 0;
						UpdateSANewsBroadcast();
						Player_StreamPrep(i, BroadcastFloats[i][1],BroadcastFloats[i][2],BroadcastFloats[i][3], FREEZE_TIME);
					}
				}
				return 1;
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* You aren't in the studio!");
		}
	}
	return 1;
}

CMD:live(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] == 9 || PlayerInfo[playerid][pLeader] == 9)
	{
	    if(shutdown == 1) return SendClientMessageEx(playerid, COLOR_WHITE, "The news system is currently shut down." );
		if(TalkingLive[playerid] != INVALID_PLAYER_ID)
		{
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Live conversation ended.");
			SendClientMessageEx(TalkingLive[playerid], COLOR_LIGHTBLUE, "* Live conversation ended.");
			TogglePlayerControllable(playerid, 1);
			TogglePlayerControllable(TalkingLive[playerid], 1);
			TalkingLive[TalkingLive[playerid]] = INVALID_PLAYER_ID;
			TalkingLive[playerid] = INVALID_PLAYER_ID;
			return 1;
		}

		new string[128], giveplayerid;
		if(sscanf(params, "u", giveplayerid)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /live [player]");

		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
			    if(PlayerInfo[giveplayerid][pLiveBanned] == 1) return SendClientMessageEx(playerid, COLOR_GREY, "That player is interview banned.");
				if(PlayerCuffed[giveplayerid] >= 1 || PlayerCuffed[playerid] >= 1)
				{
					SendClientMessageEx(playerid, COLOR_GRAD2, "You are unable to do this right now.");
				}
				else
				{
					if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You cannot talk live with yourself!"); return 1; }
					format(string, sizeof(string), "* You offered %s to have a live conversation.", GetPlayerNameEx(giveplayerid));
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* %s offered you to have a live conversation, type /accept live to accept.", GetPlayerNameEx(playerid));
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					LiveOffer[giveplayerid] = playerid;
				}
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
				return 1;
			}

		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You are not a News Reporter!");
	}
	return 1;
}

CMD:wanted(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pJob] == 2 || PlayerInfo[playerid][pJob2] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5)
	{
		new string[128], x;

		SendClientMessageEx(playerid, COLOR_GREEN, "Current Wanted Suspects:");
		foreach(new i: Player)
		{
			if(PlayerInfo[i][pWantedLevel] >= 1)
			{
				format(string, sizeof(string), "%s%s: %d", string,GetPlayerNameEx(i),PlayerInfo[i][pWantedLevel]);
				x++;
				if(x > 3) {
					SendClientMessageEx(playerid, COLOR_YELLOW, string);
					x = 0;
					format(string, sizeof(string), " ");
				} else {
					format(string, sizeof(string), "%s, ", string);
				}
			}
		}
		if(x <= 3 && x > 0)
		{
			string[strlen(string)-2] = '.';
			SendClientMessageEx(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_GREY, "   You're not a Lawyer / Cop / FBI!");
	}
	return 1;
}

CMD:ticket(playerid, params[])
{
	if(IsACop(playerid) || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pDivision] == 2 || PlayerInfo[playerid][pMember] == 4 && PlayerInfo[playerid][pRank] >= 5 || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2) || (PlayerInfo[playerid][pMember] == 12 && PlayerInfo[playerid][pDivision] == 2))
	{

		new string[128], giveplayerid, moneys, reason[64];
		if(sscanf(params, "uds[64]", giveplayerid, moneys, reason)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ticket [player] [price] [reason]");

		if(giveplayerid == playerid)
		{
			SendClientMessageEx(playerid, COLOR_GREY, "You can't ticket yourself.");
			return 1;
		}

		if(moneys < 1 || moneys > 15000) { SendClientMessageEx(playerid, COLOR_GREY, "The ticket price can't be below $1 or higher then $15,000."); return 1; }
		if(IsPlayerConnected(giveplayerid))
		{
			if(giveplayerid != INVALID_PLAYER_ID)
			{
				if (ProxDetectorS(8.0, playerid, giveplayerid))
				{
					if(giveplayerid == playerid) return 1;

					format(string, sizeof(string), "* You gave %s a ticket costing $%d, reason: %s", GetPlayerNameEx(giveplayerid), moneys, reason);
					SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s has given you a ticket costing $%d, reason: %s", GetPlayerNameEx(playerid), moneys, reason);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "* Officer %s writes up a ticket and gives it to %s.", GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					SendClientMessageEx(giveplayerid, COLOR_LIGHTBLUE, "* Type /accept ticket, to accept it.");
					TicketOffer[giveplayerid] = playerid;
					TicketMoney[giveplayerid] = moneys;
					return 1;
				}
				else
				{
					SendClientMessageEx(playerid, COLOR_GREY, "That player isn't near you.");
					return 1;
				}
			}
		}
		else
		{
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
			return 1;
		}
	}
	return 1;
}

CMD:isolate(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 3 && PlayerInfo[playerid][pMember] != 11) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not authorized to use this command!");
	}

	else {

		new
		    iGivePlayer,
			szMessage[128];

	    if(sscanf(params, "u", iGivePlayer)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /isolate [player]");
		}
		else if(iGivePlayer == playerid) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You can't use this command on yourself!");
		}
		else if(!IsPlayerConnected(iGivePlayer)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(!ProxDetectorS(10.0, playerid, iGivePlayer)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "That player is to far from you.");
		}
		else {
			if(strfindex(PlayerInfo[iGivePlayer][pPrisonReason], "[IC]", true) != -1)
   			{
                strcpy(PlayerInfo[iGivePlayer][pPrisonReason], "[ISOLATE] EBCF Arrest", 128);
         		format(szMessage, sizeof(szMessage), "You have sent %s to isolation.", GetPlayerNameEx(iGivePlayer));
           		SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
            	format(szMessage, sizeof(szMessage), "%s has sent you to isolation.", GetPlayerNameEx(playerid));
	            SendClientMessageEx(iGivePlayer, COLOR_WHITE, szMessage);
	           // SetPlayerPosEx(iGivePlayer, -2095.3391, -215.8563, 978.8315);
				Player_StreamPrep(iGivePlayer, -2095.3391, -215.8563, 978.8315, FREEZE_TIME);
				SetPlayerInterior(iGivePlayer, 10);

	        }
	        else if(strfindex(PlayerInfo[iGivePlayer][pPrisonReason], "[ISOLATE]", true) != -1)
	        {
         		new rand;
           		strcpy(PlayerInfo[iGivePlayer][pPrisonReason], "[IC] EBCF Arrest", 128);
	            format(szMessage, sizeof(szMessage), "You have released %s from isolation.", GetPlayerNameEx(iGivePlayer));
	            SendClientMessageEx(playerid, COLOR_WHITE, szMessage);
	            format(szMessage, sizeof(szMessage), "%s has released you from isolation.", GetPlayerNameEx(playerid));
	            SendClientMessageEx(iGivePlayer, COLOR_WHITE, szMessage);
          		rand = random(sizeof(DocPrison));
				SetPlayerPosEx(iGivePlayer, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
		    }
		    else SendClientMessageEx(playerid, COLOR_WHITE, "That player isn't imprisoned.");
		}
	}
	return 1;
}

CMD:docarrest(playerid, params[])
{
	if(!IsACop(playerid)) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a LEO faction. ");
	}
	else if(!IsPlayerInRangeOfPoint(playerid, 10.0, -2079.7764, -111.6902, 982.4116) && !IsPlayerInRangeOfPoint(playerid, 10.0, -2090.0583,-135.3540,40.1016) && !IsPlayerInRangeOfPoint(playerid, 10.0, -2053.8149,-198.9500,15.0703)) {
 		SendClientMessageEx(playerid, COLOR_GREY, "You are not at the DoC Prison arrest point." );
 	}

	else {


   		new
     		moneys,
       		time,
			string[128];

        new suspect = GetClosestPlayer(playerid);
  		if(sscanf(params, "dddd", moneys, time)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /docarrest [fine] [minutes]");
		}
		else if(!(1 <= moneys <= 200000)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The jail fine can't be below $1 or above $200,000.");
		}
		else if(!(1 <= time <= 120)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "Jail time can't be below 1 or above 120 minutes - take the person to prison for more time.");
		}
		else if(!IsPlayerConnected(suspect)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(!ProxDetectorS(5.0, playerid, suspect)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You are close enough to the suspect.");
		}
		else if(PlayerInfo[suspect][pWantedLevel] < 1 && PlayerInfo[playerid][pMember] != 12) {
		    SendClientMessageEx(playerid, COLOR_GREY, "The player must have a wanted level of at least one star.");
		}
		else {

			format(string, sizeof(string), "* You arrested %s!", GetPlayerNameEx(suspect));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(suspect, -moneys);
			Tax += moneys;
			ResetPlayerWeaponsEx(suspect);
			for(new x; x < MAX_PLAYERVEHICLES; x++) if(PlayerVehicleInfo[suspect][x][pvTicket] >= 1) {
				PlayerVehicleInfo[suspect][x][pvTicket] = 0;
			}
			SetPlayerInterior(suspect, 10);
			new rand = random(sizeof(DocPrison));
			SetPlayerFacingAngle(suspect, 0);
			SetPlayerPosEx(suspect, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
			if(PlayerInfo[suspect][pDonateRank] >= 2)
			{
				PlayerInfo[suspect][pJailTime] = ((time*60)*75)/100;
			}
			else
			{
				PlayerInfo[suspect][pJailTime] = time * 60;
			}
			DeletePVar(suspect, "IsFrozen");
			PhoneOnline[suspect] = 1;
			PlayerInfo[suspect][pArrested] += 1;
			SetPlayerFree(suspect,playerid, "was arrested");
			PlayerInfo[suspect][pWantedLevel] = 0;
			SetPlayerToTeamColor(suspect);
			SetPlayerWantedLevel(suspect, 0);
			WantLawyer[suspect] = 1;
			TogglePlayerControllable(suspect, 1);
			ClearAnimations(suspect);
			PlayerCuffed[suspect] = 0;
			DeletePVar(suspect, "PlayerCuffed");
			PlayerCuffedTime[suspect] = 0;
			PlayerInfo[suspect][pVW] = 0;
			SetPlayerVirtualWorld(suspect, 0);
			strcpy(PlayerInfo[suspect][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[suspect][pPrisonReason], "[IC] EBCF Arrest", 128);
			SetPlayerToTeamColor(suspect);
			Player_StreamPrep(suspect, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
	    }
	}
	return 1;
}

CMD:ataxi(playerid, params[])
{
	if(PlayerInfo[playerid][pMember] != 10 && PlayerInfo[playerid][pLeader] != 10 && PlayerInfo[playerid][pJob] != 17 && PlayerInfo[playerid][pJob2] != 17 && PlayerInfo[playerid][pTaxiLicense] == 1) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not part of the San Andreas Department of Transportation.");
	}
    else if(TransportDuty[playerid] != 1) {
		SendClientMessageEx(playerid, COLOR_GREY, "You are currently not on duty.");
	}

	else {

		new
			szMessage[128],
		    iTarget;

		if(sscanf(params, "u", iTarget)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /ataxi [player]");
		}
		else if(!IsPlayerConnected(iTarget)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(iTarget == playerid) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You can't accept your own taxi call.");
		}
		else if(!GetPVarType(iTarget, "TaxiCall")) {
		    SendClientMessageEx(playerid, COLOR_GREY, "That player has not called for a taxi.");
		}
		else if(TaxiCallTime[playerid] > 0 ) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You have already accepted a call.");
		}

		else {
      		format(szMessage, sizeof(szMessage), "** Taxi Driver %s has accepted the taxi call from %s(%d)" , GetPlayerNameEx(playerid), GetPlayerNameEx(iTarget), iTarget);
        	SendTaxiMessage(TEAM_AZTECAS_COLOR, szMessage);
         	format(szMessage, sizeof(szMessage), "* Taxi Driver %s has accepted your Taxi Call; please wait at your current position.",GetPlayerNameEx(playerid));
          	SendClientMessageEx(iTarget, COLOR_LIGHTBLUE, szMessage);
           	GameTextForPlayer(playerid, "~w~Taxi Caller~n~~r~Go to the red marker.", 5000, 1);
            TaxiCallTime[playerid] = 1;
            TaxiAccepted[playerid] = iTarget;
   			DeletePVar(iTarget, "TaxiCall");
			PlayerInfo[playerid][pCallsAccepted]++;
		}
	}
	return 1;
}

CMD:arrest(playerid, params[])
{
	if(!IsACop(playerid)) {
	    SendClientMessageEx(playerid, COLOR_GREY, "You are not part of a LEO faction. ");
	}
	else if(!IsAtArrestPoint(playerid)) {
 		SendClientMessageEx(playerid, COLOR_GREY, "You are not at a arrest point." );
 	}

	else {


   		new
     		moneys,
       		time,
         	bail,
          	bailprice,
			string[128];

        new suspect = GetClosestPlayer(playerid);
  		if(sscanf(params, "dddd", moneys, time, bail, bailprice)) {
			SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /arrest [price] [time (minutes)] [bail (0=no 1=yes)] [bailprice]");
		}
		else if(!(1 <= moneys <= 30000)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The jail price can't be below $1 or above $30,000.");
		}
		else if(!(1 <= time <= 30)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "Jail time can't be below 1 or above 30 minutes - take the person to prison for more time.");
		}
		else if(!(0 <= bail <= 1)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The bail option must be set to 0 or 1.");
		}
		else if(!(0 <= bailprice <= 10000)) {
  			SendClientMessageEx(playerid, COLOR_GREY, "The bail price can't be below $0 or above $10,000.");
		}
		else if(!IsPlayerConnected(suspect)) {
			SendClientMessageEx(playerid, COLOR_GREY, "Invalid player specified.");
		}
		else if(!ProxDetectorS(5.0, playerid, suspect)) {
		    SendClientMessageEx(playerid, COLOR_GREY, "You are close enough to the suspect.");
		}
		else if(PlayerInfo[suspect][pWantedLevel] < 1 && PlayerInfo[playerid][pMember] != 12) {
		    SendClientMessageEx(playerid, COLOR_GREY, "The player must have a wanted level of at least one star.");
		}
		else {

			format(string, sizeof(string), "* You arrested %s!", GetPlayerNameEx(suspect));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerCash(suspect, -moneys);
			Tax += moneys;
			ResetPlayerWeaponsEx(suspect);
			for(new x; x < MAX_PLAYERVEHICLES; x++) if(PlayerVehicleInfo[suspect][x][pvTicket] >= 1) {
				PlayerVehicleInfo[suspect][x][pvTicket] = 0;
			}
			SetPlayerInterior(suspect, 10);
			new rand = random(sizeof(DocPrison));
			SetPlayerFacingAngle(suspect, 0);
			Streamer_UpdateEx(playerid, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
			SetPlayerPosEx(suspect, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2]);
			if(PlayerInfo[suspect][pDonateRank] >= 2)
			{
				PlayerInfo[suspect][pJailTime] = ((time*60)*75)/100;
			}
			else
			{
				PlayerInfo[suspect][pJailTime] = time * 60;
			}
			DeletePVar(suspect, "IsFrozen");
			PhoneOnline[suspect] = 1;
			PlayerInfo[suspect][pArrested] += 1;
			SetPlayerFree(suspect,playerid, "was arrested");
			PlayerInfo[suspect][pWantedLevel] = 0;
			SetPlayerToTeamColor(suspect);
			SetPlayerWantedLevel(suspect, 0);
			WantLawyer[suspect] = 1;
			TogglePlayerControllable(suspect, 1);
			ClearAnimations(suspect);
			PlayerCuffed[suspect] = 0;
			DeletePVar(suspect, "PlayerCuffed");
			PlayerCuffedTime[suspect] = 0;
			PlayerInfo[suspect][pVW] = 0;
			SetPlayerVirtualWorld(suspect, 0);
			strcpy(PlayerInfo[suspect][pPrisonedBy], GetPlayerNameEx(playerid), MAX_PLAYER_NAME);
			strcpy(PlayerInfo[suspect][pPrisonReason], "[IC] EBCF Arrest", 128);
			SetPlayerToTeamColor(suspect);
			Player_StreamPrep(suspect, DocPrison[rand][0], DocPrison[rand][1], DocPrison[rand][2], FREEZE_TIME);
	    }
	}
	return 1;
}

CMD:contract(playerid, params[])
{
	if(PlayerCuffed[playerid] != 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts while in cuffs.");
	if(PlayerInfo[playerid][pJailTime] > 0) return SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts while in jail.");

	new string[128], giveplayerid, moneys, detail[32];
	if(sscanf(params, "uds[32]", giveplayerid, moneys, detail)) return SendClientMessageEx(playerid, COLOR_GREY, "USAGE: /contract [player] [amount] [details]");

	if (!IsPlayerConnected(giveplayerid)) {
		return SendClientMessageEx(playerid, COLOR_GRAD1, "Invalid player specified.");
	}
	if( moneys < 100000 || moneys > 1000000)
	{
		SendClientMessageEx(playerid, COLOR_GREY, "You can't place contracts that are less than $100,000 or more than $10,000,000.");
		return 1;
	}
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You must be level 3 to place a contract.");
		return 1;
	}
	if(PlayerInfo[giveplayerid][pConnectHours] < 12)
	{
		SendClientMessageEx(playerid, COLOR_GRAD1, "You can not place contracts on players with less than 12 playing hours.");
		return 1;
	}
	if( PlayerInfo[playerid][pMember] == 8 )
	{
		SendClientMessageEx( playerid, COLOR_GREY, "You can't place contracts as a hitman." );
	}
	else
	{
		if(giveplayerid != INVALID_PLAYER_ID)
		{
			if( moneys >= 10000001 )
			{
				SendClientMessageEx( playerid, COLOR_GREY, "The maximum contract price is $10,000,000!" );
				return 1;
			}

			if( PlayerInfo[giveplayerid][pHeadValue] >= 10000000 )
			{
				SendClientMessageEx( playerid, COLOR_GREY, "That player has the maximum on their head." );
				return 1;
			}
			if(moneys + PlayerInfo[giveplayerid][pHeadValue] >= 10000001 )
			{
				SendClientMessageEx( playerid, COLOR_GREY, "That player has the maximum on their head." );
				return 1;
			}

			if(giveplayerid == playerid) { SendClientMessageEx(playerid, COLOR_GREY, "You can't contract yourself."); return 1; }
			new playermoney = GetPlayerCash(playerid);
			if (moneys > 0 && playermoney >= moneys)
			{
				if(strlen(detail) > 32) return SendClientMessageEx(playerid, COLOR_GRAD1, "Contract details may not be longer than 32 characters in length.");
				GivePlayerCash(playerid, (0 - moneys));
				PlayerInfo[giveplayerid][pHeadValue]+=moneys;
				strmid(PlayerInfo[giveplayerid][pContractBy], GetPlayerNameEx(playerid), 0, strlen(GetPlayerNameEx(playerid)), MAX_PLAYER_NAME);
				strmid(PlayerInfo[giveplayerid][pContractDetail], detail, 0, strlen(detail), 32);
				format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
				SendFamilyMessage(8, COLOR_YELLOW, string);
				format(string, sizeof(string), "* You placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(giveplayerid), moneys, detail);
				SendClientMessageEx(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof(string), "<< %s has placed a contract on %s for $%d, details: %s >>",GetPlayerNameEx(playerid),GetPlayerNameEx(giveplayerid),moneys,detail);
				Log("logs/contracts.log", string);
				format(string, sizeof(string), "%s has placed a contract on %s for $%d, details: %s.",GetPlayerNameEx(playerid), GetPlayerNameEx(giveplayerid), moneys, detail);
				ABroadCast(COLOR_YELLOW,string,4);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "You don't have enough money for this.");
			}
		}
	}
	return 1;
}

ProxDetector(Float: f_Radius, playerid, string[],col1,col2,col3,col4,col5,chat=0) {
	if(WatchingTV[playerid] != 1) {

		new
			Float: f_playerPos[3];

		GetPlayerPos(playerid, f_playerPos[0], f_playerPos[1], f_playerPos[2]);
		new str[128];
		foreach(new i: Player) {
			if((InsidePlane[playerid] == GetPlayerVehicleID(i) && GetPlayerState(i) == 2) || (InsidePlane[i] == GetPlayerVehicleID(playerid) && GetPlayerState(playerid) == 2) || (InsidePlane[playerid] != INVALID_VEHICLE_ID && InsidePlane[playerid] == InsidePlane[i])) {
				SendClientMessageEx(i, col1, string);
			}
			else if(GetPlayerVirtualWorld(i) == GetPlayerVirtualWorld(playerid)) {
				if(chat && IsPlayerInRangeOfPoint(i, f_Radius * 0.6, f_playerPos[0], f_playerPos[1], f_playerPos[2]) && PlayerInfo[i][pBugged] >= 1)
				{
				    if(playerid == i)
				    {
				    	format(str, sizeof(str), "{8D8DFF}(BUGGED) {CBCCCE}%s", string);
				    }
				    else {
				    	format(str, sizeof(str), "{8D8DFF}(BUG ID %d) {CBCCCE}%s", i,string);
				    }
				    SendBugMessage(PlayerInfo[i][pBugged], COLOR_LIGHTGREEN, str);
				}
				if(IsPlayerInRangeOfPoint(i, f_Radius / 16, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col1, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 8, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col2, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 4, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col3, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius / 2, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col4, string);
				}
				else if(IsPlayerInRangeOfPoint(i, f_Radius, f_playerPos[0], f_playerPos[1], f_playerPos[2])) {
					SendClientMessageEx(i, col5, string);
				}
			}
			if(BigEar[i] == 1 || BigEar[i] == 6 && BigEarPlayer[i] == playerid) {
				new string2[128] = "(BE) ";
				strcat(string2,string, sizeof(string2));
				SendClientMessageEx(i, col1,string);
			}
		}
	}
	return 1;
}

stock SendBugMessage(member, color, string[])
{
	foreach(new i: Player)
	{
 		if(FactionInfo[member][fBug] == 1 && PlayerInfo[i][pMember] == member && gBug{i} == 1)
		{
			SendClientMessageEx(i, color, string);
		}
	}
}
